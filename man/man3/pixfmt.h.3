.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/pixfmt.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/pixfmt.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'libavutil/avconfig\&.h'\fP
.br
\fC#include 'version\&.h'\fP
.br
\fC#include 'old_pix_fmts\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAVPALETTE_SIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBAVPALETTE_COUNT\fP   256"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_XVMC\fP   \fBAV_PIX_FMT_XVMC_MPEG2_IDCT\fP"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_Y400A\fP   \fBAV_PIX_FMT_GRAY8A\fP"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBR24P\fP   \fBAV_PIX_FMT_GBRP\fP"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_NE\fP(be,  le)   AV_PIX_FMT_##le"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGB32\fP   \fBAV_PIX_FMT_NE\fP(ARGB, BGRA)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGB32_1\fP   \fBAV_PIX_FMT_NE\fP(RGBA, ABGR)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGR32\fP   \fBAV_PIX_FMT_NE\fP(ABGR, RGBA)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGR32_1\fP   \fBAV_PIX_FMT_NE\fP(BGRA, ARGB)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_0RGB32\fP   \fBAV_PIX_FMT_NE\fP(0RGB, BGR0)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_0BGR32\fP   \fBAV_PIX_FMT_NE\fP(0BGR, RGB0)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GRAY16\fP   \fBAV_PIX_FMT_NE\fP(GRAY16BE, GRAY16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGB48\fP   \fBAV_PIX_FMT_NE\fP(RGB48BE,  RGB48LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGB565\fP   \fBAV_PIX_FMT_NE\fP(RGB565BE, RGB565LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGB555\fP   \fBAV_PIX_FMT_NE\fP(RGB555BE, RGB555LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGB444\fP   \fBAV_PIX_FMT_NE\fP(RGB444BE, RGB444LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGR48\fP   \fBAV_PIX_FMT_NE\fP(BGR48BE,  BGR48LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGR565\fP   \fBAV_PIX_FMT_NE\fP(BGR565BE, BGR565LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGR555\fP   \fBAV_PIX_FMT_NE\fP(BGR555BE, BGR555LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGR444\fP   \fBAV_PIX_FMT_NE\fP(BGR444BE, BGR444LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV420P9\fP   \fBAV_PIX_FMT_NE\fP(YUV420P9BE , YUV420P9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV422P9\fP   \fBAV_PIX_FMT_NE\fP(YUV422P9BE , YUV422P9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV444P9\fP   \fBAV_PIX_FMT_NE\fP(YUV444P9BE , YUV444P9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV420P10\fP   \fBAV_PIX_FMT_NE\fP(YUV420P10BE, YUV420P10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV422P10\fP   \fBAV_PIX_FMT_NE\fP(YUV422P10BE, YUV422P10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV444P10\fP   \fBAV_PIX_FMT_NE\fP(YUV444P10BE, YUV444P10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV420P12\fP   \fBAV_PIX_FMT_NE\fP(YUV420P12BE, YUV420P12LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV422P12\fP   \fBAV_PIX_FMT_NE\fP(YUV422P12BE, YUV422P12LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV444P12\fP   \fBAV_PIX_FMT_NE\fP(YUV444P12BE, YUV444P12LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV420P14\fP   \fBAV_PIX_FMT_NE\fP(YUV420P14BE, YUV420P14LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV422P14\fP   \fBAV_PIX_FMT_NE\fP(YUV422P14BE, YUV422P14LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV444P14\fP   \fBAV_PIX_FMT_NE\fP(YUV444P14BE, YUV444P14LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV420P16\fP   \fBAV_PIX_FMT_NE\fP(YUV420P16BE, YUV420P16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV422P16\fP   \fBAV_PIX_FMT_NE\fP(YUV422P16BE, YUV422P16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUV444P16\fP   \fBAV_PIX_FMT_NE\fP(YUV444P16BE, YUV444P16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_RGBA64\fP   \fBAV_PIX_FMT_NE\fP(RGBA64BE, RGBA64LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BGRA64\fP   \fBAV_PIX_FMT_NE\fP(BGRA64BE, BGRA64LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBRP9\fP   \fBAV_PIX_FMT_NE\fP(GBRP9BE ,    GBRP9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBRP10\fP   \fBAV_PIX_FMT_NE\fP(GBRP10BE,    GBRP10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBRP12\fP   \fBAV_PIX_FMT_NE\fP(GBRP12BE,    GBRP12LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBRP14\fP   \fBAV_PIX_FMT_NE\fP(GBRP14BE,    GBRP14LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBRP16\fP   \fBAV_PIX_FMT_NE\fP(GBRP16BE,    GBRP16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_GBRAP16\fP   \fBAV_PIX_FMT_NE\fP(GBRAP16BE,   GBRAP16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BAYER_BGGR16\fP   \fBAV_PIX_FMT_NE\fP(BAYER_BGGR16BE,    BAYER_BGGR16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BAYER_RGGB16\fP   \fBAV_PIX_FMT_NE\fP(BAYER_RGGB16BE,    BAYER_RGGB16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BAYER_GBRG16\fP   \fBAV_PIX_FMT_NE\fP(BAYER_GBRG16BE,    BAYER_GBRG16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_BAYER_GRBG16\fP   \fBAV_PIX_FMT_NE\fP(BAYER_GRBG16BE,    BAYER_GRBG16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA420P9\fP   \fBAV_PIX_FMT_NE\fP(YUVA420P9BE , YUVA420P9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA422P9\fP   \fBAV_PIX_FMT_NE\fP(YUVA422P9BE , YUVA422P9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA444P9\fP   \fBAV_PIX_FMT_NE\fP(YUVA444P9BE , YUVA444P9LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA420P10\fP   \fBAV_PIX_FMT_NE\fP(YUVA420P10BE, YUVA420P10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA422P10\fP   \fBAV_PIX_FMT_NE\fP(YUVA422P10BE, YUVA422P10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA444P10\fP   \fBAV_PIX_FMT_NE\fP(YUVA444P10BE, YUVA444P10LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA420P16\fP   \fBAV_PIX_FMT_NE\fP(YUVA420P16BE, YUVA420P16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA422P16\fP   \fBAV_PIX_FMT_NE\fP(YUVA422P16BE, YUVA422P16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_YUVA444P16\fP   \fBAV_PIX_FMT_NE\fP(YUVA444P16BE, YUVA444P16LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_XYZ12\fP   \fBAV_PIX_FMT_NE\fP(XYZ12BE, XYZ12LE)"
.br
.ti -1c
.RI "#define \fBAV_PIX_FMT_NV20\fP   \fBAV_PIX_FMT_NE\fP(NV20BE,  NV20LE)"
.br
.ti -1c
.RI "#define \fBPixelFormat\fP   \fBAVPixelFormat\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_Y400A\fP   \fBAV_PIX_FMT_Y400A\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GBR24P\fP   \fBAV_PIX_FMT_GBR24P\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_NE\fP(be,  le)   \fBAV_PIX_FMT_NE\fP(be, le)"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGB32\fP   \fBAV_PIX_FMT_RGB32\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGB32_1\fP   \fBAV_PIX_FMT_RGB32_1\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGR32\fP   \fBAV_PIX_FMT_BGR32\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGR32_1\fP   \fBAV_PIX_FMT_BGR32_1\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_0RGB32\fP   \fBAV_PIX_FMT_0RGB32\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_0BGR32\fP   \fBAV_PIX_FMT_0BGR32\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GRAY16\fP   \fBAV_PIX_FMT_GRAY16\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGB48\fP   \fBAV_PIX_FMT_RGB48\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGB565\fP   \fBAV_PIX_FMT_RGB565\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGB555\fP   \fBAV_PIX_FMT_RGB555\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGB444\fP   \fBAV_PIX_FMT_RGB444\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGR48\fP   \fBAV_PIX_FMT_BGR48\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGR565\fP   \fBAV_PIX_FMT_BGR565\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGR555\fP   \fBAV_PIX_FMT_BGR555\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGR444\fP   \fBAV_PIX_FMT_BGR444\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV420P9\fP   \fBAV_PIX_FMT_YUV420P9\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV422P9\fP   \fBAV_PIX_FMT_YUV422P9\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV444P9\fP   \fBAV_PIX_FMT_YUV444P9\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV420P10\fP   \fBAV_PIX_FMT_YUV420P10\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV422P10\fP   \fBAV_PIX_FMT_YUV422P10\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV444P10\fP   \fBAV_PIX_FMT_YUV444P10\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV420P12\fP   \fBAV_PIX_FMT_YUV420P12\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV422P12\fP   \fBAV_PIX_FMT_YUV422P12\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV444P12\fP   \fBAV_PIX_FMT_YUV444P12\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV420P14\fP   \fBAV_PIX_FMT_YUV420P14\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV422P14\fP   \fBAV_PIX_FMT_YUV422P14\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV444P14\fP   \fBAV_PIX_FMT_YUV444P14\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV420P16\fP   \fBAV_PIX_FMT_YUV420P16\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV422P16\fP   \fBAV_PIX_FMT_YUV422P16\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_YUV444P16\fP   \fBAV_PIX_FMT_YUV444P16\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_RGBA64\fP   \fBAV_PIX_FMT_RGBA64\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_BGRA64\fP   \fBAV_PIX_FMT_BGRA64\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GBRP9\fP   \fBAV_PIX_FMT_GBRP9\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GBRP10\fP   \fBAV_PIX_FMT_GBRP10\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GBRP12\fP   \fBAV_PIX_FMT_GBRP12\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GBRP14\fP   \fBAV_PIX_FMT_GBRP14\fP"
.br
.ti -1c
.RI "#define \fBPIX_FMT_GBRP16\fP   \fBAV_PIX_FMT_GBRP16\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBAVPixelFormat\fP { \fBAV_PIX_FMT_NONE\fP = -1, \fBAV_PIX_FMT_YUV420P\fP, \fBAV_PIX_FMT_YUYV422\fP, \fBAV_PIX_FMT_RGB24\fP, \fBAV_PIX_FMT_BGR24\fP, \fBAV_PIX_FMT_YUV422P\fP, \fBAV_PIX_FMT_YUV444P\fP, \fBAV_PIX_FMT_YUV410P\fP, \fBAV_PIX_FMT_YUV411P\fP, \fBAV_PIX_FMT_GRAY8\fP, \fBAV_PIX_FMT_MONOWHITE\fP, \fBAV_PIX_FMT_MONOBLACK\fP, \fBAV_PIX_FMT_PAL8\fP, \fBAV_PIX_FMT_YUVJ420P\fP, \fBAV_PIX_FMT_YUVJ422P\fP, \fBAV_PIX_FMT_YUVJ444P\fP, \fBAV_PIX_FMT_XVMC_MPEG2_MC\fP, \fBAV_PIX_FMT_XVMC_MPEG2_IDCT\fP, \fBAV_PIX_FMT_UYVY422\fP, \fBAV_PIX_FMT_UYYVYY411\fP, \fBAV_PIX_FMT_BGR8\fP, \fBAV_PIX_FMT_BGR4\fP, \fBAV_PIX_FMT_BGR4_BYTE\fP, \fBAV_PIX_FMT_RGB8\fP, \fBAV_PIX_FMT_RGB4\fP, \fBAV_PIX_FMT_RGB4_BYTE\fP, \fBAV_PIX_FMT_NV12\fP, \fBAV_PIX_FMT_NV21\fP, \fBAV_PIX_FMT_ARGB\fP, \fBAV_PIX_FMT_RGBA\fP, \fBAV_PIX_FMT_ABGR\fP, \fBAV_PIX_FMT_BGRA\fP, \fBAV_PIX_FMT_GRAY16BE\fP, \fBAV_PIX_FMT_GRAY16LE\fP, \fBAV_PIX_FMT_YUV440P\fP, \fBAV_PIX_FMT_YUVJ440P\fP, \fBAV_PIX_FMT_YUVA420P\fP, \fBAV_PIX_FMT_VDPAU_H264\fP, \fBAV_PIX_FMT_VDPAU_MPEG1\fP, \fBAV_PIX_FMT_VDPAU_MPEG2\fP, \fBAV_PIX_FMT_VDPAU_WMV3\fP, \fBAV_PIX_FMT_VDPAU_VC1\fP, \fBAV_PIX_FMT_RGB48BE\fP, \fBAV_PIX_FMT_RGB48LE\fP, \fBAV_PIX_FMT_RGB565BE\fP, \fBAV_PIX_FMT_RGB565LE\fP, \fBAV_PIX_FMT_RGB555BE\fP, \fBAV_PIX_FMT_RGB555LE\fP, \fBAV_PIX_FMT_BGR565BE\fP, \fBAV_PIX_FMT_BGR565LE\fP, \fBAV_PIX_FMT_BGR555BE\fP, \fBAV_PIX_FMT_BGR555LE\fP, \fBAV_PIX_FMT_VAAPI_MOCO\fP, \fBAV_PIX_FMT_VAAPI_IDCT\fP, \fBAV_PIX_FMT_VAAPI_VLD\fP, \fBAV_PIX_FMT_YUV420P16LE\fP, \fBAV_PIX_FMT_YUV420P16BE\fP, \fBAV_PIX_FMT_YUV422P16LE\fP, \fBAV_PIX_FMT_YUV422P16BE\fP, \fBAV_PIX_FMT_YUV444P16LE\fP, \fBAV_PIX_FMT_YUV444P16BE\fP, \fBAV_PIX_FMT_VDPAU_MPEG4\fP, \fBAV_PIX_FMT_DXVA2_VLD\fP, \fBAV_PIX_FMT_RGB444LE\fP, \fBAV_PIX_FMT_RGB444BE\fP, \fBAV_PIX_FMT_BGR444LE\fP, \fBAV_PIX_FMT_BGR444BE\fP, \fBAV_PIX_FMT_GRAY8A\fP, \fBAV_PIX_FMT_BGR48BE\fP, \fBAV_PIX_FMT_BGR48LE\fP, \fBAV_PIX_FMT_YUV420P9BE\fP, \fBAV_PIX_FMT_YUV420P9LE\fP, \fBAV_PIX_FMT_YUV420P10BE\fP, \fBAV_PIX_FMT_YUV420P10LE\fP, \fBAV_PIX_FMT_YUV422P10BE\fP, \fBAV_PIX_FMT_YUV422P10LE\fP, \fBAV_PIX_FMT_YUV444P9BE\fP, \fBAV_PIX_FMT_YUV444P9LE\fP, \fBAV_PIX_FMT_YUV444P10BE\fP, \fBAV_PIX_FMT_YUV444P10LE\fP, \fBAV_PIX_FMT_YUV422P9BE\fP, \fBAV_PIX_FMT_YUV422P9LE\fP, \fBAV_PIX_FMT_VDA_VLD\fP, \fBAV_PIX_FMT_GBRP\fP, \fBAV_PIX_FMT_GBRP9BE\fP, \fBAV_PIX_FMT_GBRP9LE\fP, \fBAV_PIX_FMT_GBRP10BE\fP, \fBAV_PIX_FMT_GBRP10LE\fP, \fBAV_PIX_FMT_GBRP16BE\fP, \fBAV_PIX_FMT_GBRP16LE\fP, \fBAV_PIX_FMT_YUVA422P_LIBAV\fP, \fBAV_PIX_FMT_YUVA444P_LIBAV\fP, \fBAV_PIX_FMT_YUVA420P9BE\fP, \fBAV_PIX_FMT_YUVA420P9LE\fP, \fBAV_PIX_FMT_YUVA422P9BE\fP, \fBAV_PIX_FMT_YUVA422P9LE\fP, \fBAV_PIX_FMT_YUVA444P9BE\fP, \fBAV_PIX_FMT_YUVA444P9LE\fP, \fBAV_PIX_FMT_YUVA420P10BE\fP, \fBAV_PIX_FMT_YUVA420P10LE\fP, \fBAV_PIX_FMT_YUVA422P10BE\fP, \fBAV_PIX_FMT_YUVA422P10LE\fP, \fBAV_PIX_FMT_YUVA444P10BE\fP, \fBAV_PIX_FMT_YUVA444P10LE\fP, \fBAV_PIX_FMT_YUVA420P16BE\fP, \fBAV_PIX_FMT_YUVA420P16LE\fP, \fBAV_PIX_FMT_YUVA422P16BE\fP, \fBAV_PIX_FMT_YUVA422P16LE\fP, \fBAV_PIX_FMT_YUVA444P16BE\fP, \fBAV_PIX_FMT_YUVA444P16LE\fP, \fBAV_PIX_FMT_VDPAU\fP, \fBAV_PIX_FMT_XYZ12LE\fP, \fBAV_PIX_FMT_XYZ12BE\fP, \fBAV_PIX_FMT_NV16\fP, \fBAV_PIX_FMT_NV20LE\fP, \fBAV_PIX_FMT_NV20BE\fP, \fBAV_PIX_FMT_RGBA64BE\fP =0x123, \fBAV_PIX_FMT_RGBA64LE\fP, \fBAV_PIX_FMT_BGRA64BE\fP, \fBAV_PIX_FMT_BGRA64LE\fP, \fBAV_PIX_FMT_0RGB\fP =0x123+4, \fBAV_PIX_FMT_RGB0\fP, \fBAV_PIX_FMT_0BGR\fP, \fBAV_PIX_FMT_BGR0\fP, \fBAV_PIX_FMT_YUVA444P\fP, \fBAV_PIX_FMT_YUVA422P\fP, \fBAV_PIX_FMT_YUV420P12BE\fP, \fBAV_PIX_FMT_YUV420P12LE\fP, \fBAV_PIX_FMT_YUV420P14BE\fP, \fBAV_PIX_FMT_YUV420P14LE\fP, \fBAV_PIX_FMT_YUV422P12BE\fP, \fBAV_PIX_FMT_YUV422P12LE\fP, \fBAV_PIX_FMT_YUV422P14BE\fP, \fBAV_PIX_FMT_YUV422P14LE\fP, \fBAV_PIX_FMT_YUV444P12BE\fP, \fBAV_PIX_FMT_YUV444P12LE\fP, \fBAV_PIX_FMT_YUV444P14BE\fP, \fBAV_PIX_FMT_YUV444P14LE\fP, \fBAV_PIX_FMT_GBRP12BE\fP, \fBAV_PIX_FMT_GBRP12LE\fP, \fBAV_PIX_FMT_GBRP14BE\fP, \fBAV_PIX_FMT_GBRP14LE\fP, \fBAV_PIX_FMT_GBRAP\fP, \fBAV_PIX_FMT_GBRAP16BE\fP, \fBAV_PIX_FMT_GBRAP16LE\fP, \fBAV_PIX_FMT_YUVJ411P\fP, \fBAV_PIX_FMT_BAYER_BGGR8\fP, \fBAV_PIX_FMT_BAYER_RGGB8\fP, \fBAV_PIX_FMT_BAYER_GBRG8\fP, \fBAV_PIX_FMT_BAYER_GRBG8\fP, \fBAV_PIX_FMT_BAYER_BGGR16LE\fP, \fBAV_PIX_FMT_BAYER_BGGR16BE\fP, \fBAV_PIX_FMT_BAYER_RGGB16LE\fP, \fBAV_PIX_FMT_BAYER_RGGB16BE\fP, \fBAV_PIX_FMT_BAYER_GBRG16LE\fP, \fBAV_PIX_FMT_BAYER_GBRG16BE\fP, \fBAV_PIX_FMT_BAYER_GRBG16LE\fP, \fBAV_PIX_FMT_BAYER_GRBG16BE\fP, \fBAV_PIX_FMT_NB\fP, \fBPIX_FMT_NONE\fP = AV_PIX_FMT_NONE, \fBPIX_FMT_YUV420P\fP, \fBPIX_FMT_YUYV422\fP, \fBPIX_FMT_RGB24\fP, \fBPIX_FMT_BGR24\fP, \fBPIX_FMT_YUV422P\fP, \fBPIX_FMT_YUV444P\fP, \fBPIX_FMT_YUV410P\fP, \fBPIX_FMT_YUV411P\fP, \fBPIX_FMT_GRAY8\fP, \fBPIX_FMT_MONOWHITE\fP, \fBPIX_FMT_MONOBLACK\fP, \fBPIX_FMT_PAL8\fP, \fBPIX_FMT_YUVJ420P\fP, \fBPIX_FMT_YUVJ422P\fP, \fBPIX_FMT_YUVJ444P\fP, \fBPIX_FMT_XVMC_MPEG2_MC\fP, \fBPIX_FMT_XVMC_MPEG2_IDCT\fP, \fBPIX_FMT_UYVY422\fP, \fBPIX_FMT_UYYVYY411\fP, \fBPIX_FMT_BGR8\fP, \fBPIX_FMT_BGR4\fP, \fBPIX_FMT_BGR4_BYTE\fP, \fBPIX_FMT_RGB8\fP, \fBPIX_FMT_RGB4\fP, \fBPIX_FMT_RGB4_BYTE\fP, \fBPIX_FMT_NV12\fP, \fBPIX_FMT_NV21\fP, \fBPIX_FMT_ARGB\fP, \fBPIX_FMT_RGBA\fP, \fBPIX_FMT_ABGR\fP, \fBPIX_FMT_BGRA\fP, \fBPIX_FMT_GRAY16BE\fP, \fBPIX_FMT_GRAY16LE\fP, \fBPIX_FMT_YUV440P\fP, \fBPIX_FMT_YUVJ440P\fP, \fBPIX_FMT_YUVA420P\fP, \fBPIX_FMT_VDPAU_H264\fP, \fBPIX_FMT_VDPAU_MPEG1\fP, \fBPIX_FMT_VDPAU_MPEG2\fP, \fBPIX_FMT_VDPAU_WMV3\fP, \fBPIX_FMT_VDPAU_VC1\fP, \fBPIX_FMT_RGB48BE\fP, \fBPIX_FMT_RGB48LE\fP, \fBPIX_FMT_RGB565BE\fP, \fBPIX_FMT_RGB565LE\fP, \fBPIX_FMT_RGB555BE\fP, \fBPIX_FMT_RGB555LE\fP, \fBPIX_FMT_BGR565BE\fP, \fBPIX_FMT_BGR565LE\fP, \fBPIX_FMT_BGR555BE\fP, \fBPIX_FMT_BGR555LE\fP, \fBPIX_FMT_VAAPI_MOCO\fP, \fBPIX_FMT_VAAPI_IDCT\fP, \fBPIX_FMT_VAAPI_VLD\fP, \fBPIX_FMT_YUV420P16LE\fP, \fBPIX_FMT_YUV420P16BE\fP, \fBPIX_FMT_YUV422P16LE\fP, \fBPIX_FMT_YUV422P16BE\fP, \fBPIX_FMT_YUV444P16LE\fP, \fBPIX_FMT_YUV444P16BE\fP, \fBPIX_FMT_VDPAU_MPEG4\fP, \fBPIX_FMT_DXVA2_VLD\fP, \fBPIX_FMT_RGB444LE\fP, \fBPIX_FMT_RGB444BE\fP, \fBPIX_FMT_BGR444LE\fP, \fBPIX_FMT_BGR444BE\fP, \fBPIX_FMT_GRAY8A\fP, \fBPIX_FMT_BGR48BE\fP, \fBPIX_FMT_BGR48LE\fP, \fBPIX_FMT_YUV420P9BE\fP, \fBPIX_FMT_YUV420P9LE\fP, \fBPIX_FMT_YUV420P10BE\fP, \fBPIX_FMT_YUV420P10LE\fP, \fBPIX_FMT_YUV422P10BE\fP, \fBPIX_FMT_YUV422P10LE\fP, \fBPIX_FMT_YUV444P9BE\fP, \fBPIX_FMT_YUV444P9LE\fP, \fBPIX_FMT_YUV444P10BE\fP, \fBPIX_FMT_YUV444P10LE\fP, \fBPIX_FMT_YUV422P9BE\fP, \fBPIX_FMT_YUV422P9LE\fP, \fBPIX_FMT_VDA_VLD\fP, \fBPIX_FMT_GBRP\fP, \fBPIX_FMT_GBRP9BE\fP, \fBPIX_FMT_GBRP9LE\fP, \fBPIX_FMT_GBRP10BE\fP, \fBPIX_FMT_GBRP10LE\fP, \fBPIX_FMT_GBRP16BE\fP, \fBPIX_FMT_GBRP16LE\fP, \fBPIX_FMT_RGBA64BE\fP =0x123, \fBPIX_FMT_RGBA64LE\fP, \fBPIX_FMT_BGRA64BE\fP, \fBPIX_FMT_BGRA64LE\fP, \fBPIX_FMT_0RGB\fP =0x123+4, \fBPIX_FMT_RGB0\fP, \fBPIX_FMT_0BGR\fP, \fBPIX_FMT_BGR0\fP, \fBPIX_FMT_YUVA444P\fP, \fBPIX_FMT_YUVA422P\fP, \fBPIX_FMT_YUV420P12BE\fP, \fBPIX_FMT_YUV420P12LE\fP, \fBPIX_FMT_YUV420P14BE\fP, \fBPIX_FMT_YUV420P14LE\fP, \fBPIX_FMT_YUV422P12BE\fP, \fBPIX_FMT_YUV422P12LE\fP, \fBPIX_FMT_YUV422P14BE\fP, \fBPIX_FMT_YUV422P14LE\fP, \fBPIX_FMT_YUV444P12BE\fP, \fBPIX_FMT_YUV444P12LE\fP, \fBPIX_FMT_YUV444P14BE\fP, \fBPIX_FMT_YUV444P14LE\fP, \fBPIX_FMT_GBRP12BE\fP, \fBPIX_FMT_GBRP12LE\fP, \fBPIX_FMT_GBRP14BE\fP, \fBPIX_FMT_GBRP14LE\fP, \fBPIX_FMT_NB\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 
pixel format definitions 
.PP
Definition in file \fBpixfmt\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define AV_PIX_FMT_0BGR32   \fBAV_PIX_FMT_NE\fP(0BGR, RGB0)"

.PP
Definition at line 297 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_0RGB32   \fBAV_PIX_FMT_NE\fP(0RGB, BGR0)"

.PP
Definition at line 296 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BAYER_BGGR16   \fBAV_PIX_FMT_NE\fP(BAYER_BGGR16BE,    BAYER_BGGR16LE)"

.PP
Definition at line 334 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BAYER_GBRG16   \fBAV_PIX_FMT_NE\fP(BAYER_GBRG16BE,    BAYER_GBRG16LE)"

.PP
Definition at line 336 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BAYER_GRBG16   \fBAV_PIX_FMT_NE\fP(BAYER_GRBG16BE,    BAYER_GRBG16LE)"

.PP
Definition at line 337 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BAYER_RGGB16   \fBAV_PIX_FMT_NE\fP(BAYER_RGGB16BE,    BAYER_RGGB16LE)"

.PP
Definition at line 335 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGR32   \fBAV_PIX_FMT_NE\fP(ABGR, RGBA)"

.PP
Definition at line 294 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGR32_1   \fBAV_PIX_FMT_NE\fP(BGRA, ARGB)"

.PP
Definition at line 295 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGR444   \fBAV_PIX_FMT_NE\fP(BGR444BE, BGR444LE)"

.PP
Definition at line 307 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGR48   \fBAV_PIX_FMT_NE\fP(BGR48BE,  BGR48LE)"

.PP
Definition at line 304 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGR555   \fBAV_PIX_FMT_NE\fP(BGR555BE, BGR555LE)"

.PP
Definition at line 306 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGR565   \fBAV_PIX_FMT_NE\fP(BGR565BE, BGR565LE)"

.PP
Definition at line 305 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_BGRA64   \fBAV_PIX_FMT_NE\fP(BGRA64BE, BGRA64LE)"

.PP
Definition at line 326 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBR24P   \fBAV_PIX_FMT_GBRP\fP"

.PP
Definition at line 284 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBRAP16   \fBAV_PIX_FMT_NE\fP(GBRAP16BE,   GBRAP16LE)"

.PP
Definition at line 332 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBRP10   \fBAV_PIX_FMT_NE\fP(GBRP10BE,    GBRP10LE)"

.PP
Definition at line 328 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBRP12   \fBAV_PIX_FMT_NE\fP(GBRP12BE,    GBRP12LE)"

.PP
Definition at line 329 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBRP14   \fBAV_PIX_FMT_NE\fP(GBRP14BE,    GBRP14LE)"

.PP
Definition at line 330 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBRP16   \fBAV_PIX_FMT_NE\fP(GBRP16BE,    GBRP16LE)"

.PP
Definition at line 331 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GBRP9   \fBAV_PIX_FMT_NE\fP(GBRP9BE ,    GBRP9LE)"

.PP
Definition at line 327 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_GRAY16   \fBAV_PIX_FMT_NE\fP(GRAY16BE, GRAY16LE)"

.PP
Definition at line 299 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_NE(be, le)   AV_PIX_FMT_##le"

.PP
Definition at line 289 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_NV20   \fBAV_PIX_FMT_NE\fP(NV20BE,  NV20LE)"

.PP
Definition at line 351 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGB32   \fBAV_PIX_FMT_NE\fP(ARGB, BGRA)"

.PP
Definition at line 292 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGB32_1   \fBAV_PIX_FMT_NE\fP(RGBA, ABGR)"

.PP
Definition at line 293 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGB444   \fBAV_PIX_FMT_NE\fP(RGB444BE, RGB444LE)"

.PP
Definition at line 303 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGB48   \fBAV_PIX_FMT_NE\fP(RGB48BE,  RGB48LE)"

.PP
Definition at line 300 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGB555   \fBAV_PIX_FMT_NE\fP(RGB555BE, RGB555LE)"

.PP
Definition at line 302 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGB565   \fBAV_PIX_FMT_NE\fP(RGB565BE, RGB565LE)"

.PP
Definition at line 301 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_RGBA64   \fBAV_PIX_FMT_NE\fP(RGBA64BE, RGBA64LE)"

.PP
Definition at line 325 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_XVMC   \fBAV_PIX_FMT_XVMC_MPEG2_IDCT\fP"

.PP
Definition at line 86 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_XYZ12   \fBAV_PIX_FMT_NE\fP(XYZ12BE, XYZ12LE)"

.PP
Definition at line 350 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_Y400A   \fBAV_PIX_FMT_GRAY8A\fP"

.PP
Definition at line 283 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV420P10   \fBAV_PIX_FMT_NE\fP(YUV420P10BE, YUV420P10LE)"

.PP
Definition at line 312 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV420P12   \fBAV_PIX_FMT_NE\fP(YUV420P12BE, YUV420P12LE)"

.PP
Definition at line 315 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV420P14   \fBAV_PIX_FMT_NE\fP(YUV420P14BE, YUV420P14LE)"

.PP
Definition at line 318 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV420P16   \fBAV_PIX_FMT_NE\fP(YUV420P16BE, YUV420P16LE)"

.PP
Definition at line 321 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV420P9   \fBAV_PIX_FMT_NE\fP(YUV420P9BE , YUV420P9LE)"

.PP
Definition at line 309 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV422P10   \fBAV_PIX_FMT_NE\fP(YUV422P10BE, YUV422P10LE)"

.PP
Definition at line 313 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV422P12   \fBAV_PIX_FMT_NE\fP(YUV422P12BE, YUV422P12LE)"

.PP
Definition at line 316 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV422P14   \fBAV_PIX_FMT_NE\fP(YUV422P14BE, YUV422P14LE)"

.PP
Definition at line 319 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV422P16   \fBAV_PIX_FMT_NE\fP(YUV422P16BE, YUV422P16LE)"

.PP
Definition at line 322 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV422P9   \fBAV_PIX_FMT_NE\fP(YUV422P9BE , YUV422P9LE)"

.PP
Definition at line 310 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV444P10   \fBAV_PIX_FMT_NE\fP(YUV444P10BE, YUV444P10LE)"

.PP
Definition at line 314 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV444P12   \fBAV_PIX_FMT_NE\fP(YUV444P12BE, YUV444P12LE)"

.PP
Definition at line 317 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV444P14   \fBAV_PIX_FMT_NE\fP(YUV444P14BE, YUV444P14LE)"

.PP
Definition at line 320 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV444P16   \fBAV_PIX_FMT_NE\fP(YUV444P16BE, YUV444P16LE)"

.PP
Definition at line 323 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUV444P9   \fBAV_PIX_FMT_NE\fP(YUV444P9BE , YUV444P9LE)"

.PP
Definition at line 311 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA420P10   \fBAV_PIX_FMT_NE\fP(YUVA420P10BE, YUVA420P10LE)"

.PP
Definition at line 343 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA420P16   \fBAV_PIX_FMT_NE\fP(YUVA420P16BE, YUVA420P16LE)"

.PP
Definition at line 346 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA420P9   \fBAV_PIX_FMT_NE\fP(YUVA420P9BE , YUVA420P9LE)"

.PP
Definition at line 340 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA422P10   \fBAV_PIX_FMT_NE\fP(YUVA422P10BE, YUVA422P10LE)"

.PP
Definition at line 344 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA422P16   \fBAV_PIX_FMT_NE\fP(YUVA422P16BE, YUVA422P16LE)"

.PP
Definition at line 347 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA422P9   \fBAV_PIX_FMT_NE\fP(YUVA422P9BE , YUVA422P9LE)"

.PP
Definition at line 341 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA444P10   \fBAV_PIX_FMT_NE\fP(YUVA444P10BE, YUVA444P10LE)"

.PP
Definition at line 345 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA444P16   \fBAV_PIX_FMT_NE\fP(YUVA444P16BE, YUVA444P16LE)"

.PP
Definition at line 348 of file pixfmt\&.h\&.
.SS "#define AV_PIX_FMT_YUVA444P9   \fBAV_PIX_FMT_NE\fP(YUVA444P9BE , YUVA444P9LE)"

.PP
Definition at line 342 of file pixfmt\&.h\&.
.SS "#define AVPALETTE_COUNT   256"

.PP
Definition at line 34 of file pixfmt\&.h\&.
.SS "#define AVPALETTE_SIZE   1024"

.PP
Definition at line 33 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_0BGR32   \fBAV_PIX_FMT_0BGR32\fP"

.PP
Definition at line 366 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_0RGB32   \fBAV_PIX_FMT_0RGB32\fP"

.PP
Definition at line 365 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGR32   \fBAV_PIX_FMT_BGR32\fP"

.PP
Definition at line 363 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGR32_1   \fBAV_PIX_FMT_BGR32_1\fP"

.PP
Definition at line 364 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGR444   \fBAV_PIX_FMT_BGR444\fP"

.PP
Definition at line 376 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGR48   \fBAV_PIX_FMT_BGR48\fP"

.PP
Definition at line 373 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGR555   \fBAV_PIX_FMT_BGR555\fP"

.PP
Definition at line 375 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGR565   \fBAV_PIX_FMT_BGR565\fP"

.PP
Definition at line 374 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_BGRA64   \fBAV_PIX_FMT_BGRA64\fP"

.PP
Definition at line 395 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GBR24P   \fBAV_PIX_FMT_GBR24P\fP"

.PP
Definition at line 357 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GBRP10   \fBAV_PIX_FMT_GBRP10\fP"

.PP
Definition at line 397 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GBRP12   \fBAV_PIX_FMT_GBRP12\fP"

.PP
Definition at line 398 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GBRP14   \fBAV_PIX_FMT_GBRP14\fP"

.PP
Definition at line 399 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GBRP16   \fBAV_PIX_FMT_GBRP16\fP"

.PP
Definition at line 400 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GBRP9   \fBAV_PIX_FMT_GBRP9\fP"

.PP
Definition at line 396 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_GRAY16   \fBAV_PIX_FMT_GRAY16\fP"

.PP
Definition at line 368 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_NE(be, le)   \fBAV_PIX_FMT_NE\fP(be, le)"

.PP
Definition at line 359 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGB32   \fBAV_PIX_FMT_RGB32\fP"

.PP
Definition at line 361 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGB32_1   \fBAV_PIX_FMT_RGB32_1\fP"

.PP
Definition at line 362 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGB444   \fBAV_PIX_FMT_RGB444\fP"

.PP
Definition at line 372 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGB48   \fBAV_PIX_FMT_RGB48\fP"

.PP
Definition at line 369 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGB555   \fBAV_PIX_FMT_RGB555\fP"

.PP
Definition at line 371 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGB565   \fBAV_PIX_FMT_RGB565\fP"

.PP
Definition at line 370 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_RGBA64   \fBAV_PIX_FMT_RGBA64\fP"

.PP
Definition at line 394 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_Y400A   \fBAV_PIX_FMT_Y400A\fP"

.PP
Definition at line 356 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV420P10   \fBAV_PIX_FMT_YUV420P10\fP"

.PP
Definition at line 381 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV420P12   \fBAV_PIX_FMT_YUV420P12\fP"

.PP
Definition at line 384 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV420P14   \fBAV_PIX_FMT_YUV420P14\fP"

.PP
Definition at line 387 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV420P16   \fBAV_PIX_FMT_YUV420P16\fP"

.PP
Definition at line 390 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV420P9   \fBAV_PIX_FMT_YUV420P9\fP"

.PP
Definition at line 378 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV422P10   \fBAV_PIX_FMT_YUV422P10\fP"

.PP
Definition at line 382 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV422P12   \fBAV_PIX_FMT_YUV422P12\fP"

.PP
Definition at line 385 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV422P14   \fBAV_PIX_FMT_YUV422P14\fP"

.PP
Definition at line 388 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV422P16   \fBAV_PIX_FMT_YUV422P16\fP"

.PP
Definition at line 391 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV422P9   \fBAV_PIX_FMT_YUV422P9\fP"

.PP
Definition at line 379 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV444P10   \fBAV_PIX_FMT_YUV444P10\fP"

.PP
Definition at line 383 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV444P12   \fBAV_PIX_FMT_YUV444P12\fP"

.PP
Definition at line 386 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV444P14   \fBAV_PIX_FMT_YUV444P14\fP"

.PP
Definition at line 389 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV444P16   \fBAV_PIX_FMT_YUV444P16\fP"

.PP
Definition at line 392 of file pixfmt\&.h\&.
.SS "#define PIX_FMT_YUV444P9   \fBAV_PIX_FMT_YUV444P9\fP"

.PP
Definition at line 380 of file pixfmt\&.h\&.
.SS "#define PixelFormat   \fBAVPixelFormat\fP"

.PP
Definition at line 354 of file pixfmt\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBAVPixelFormat\fP"
Pixel format\&.
.PP
\fBNote:\fP
.RS 4
AV_PIX_FMT_RGB32 is handled in an endian-specific manner\&. An RGBA color is put together as: (A << 24) | (R << 16) | (G << 8) | B This is stored as BGRA on little-endian CPU architectures and ARGB on big-endian CPUs\&.
.RE
.PP
\fB\fP
.RS 4
When the pixel format is palettized RGB (AV_PIX_FMT_PAL8), the palettized image data is stored in \fBAVFrame\&.data\fP[0]\&. The palette is transported in \fBAVFrame\&.data\fP[1], is 1024 bytes long (256 4-byte entries) and is formatted the same as in AV_PIX_FMT_RGB32 described above (i\&.e\&., it is also endian-specific)\&. Note also that the individual RGB palette components stored in \fBAVFrame\&.data\fP[1] should be in the range 0\&.\&.255\&. This is important as many custom PAL8 video codecs that were designed to run on the IBM VGA graphics adapter use 6-bit palette components\&.
.RE
.PP
\fB\fP
.RS 4
For all the 8bit per pixel formats, an RGB32 palette is in data[1] like for pal8\&. This palette is filled in automatically by the function allocating the picture\&.
.RE
.PP
\fBNote:\fP
.RS 4
Make sure that all newly added big-endian formats have (pix_fmt & 1) == 1 and that all newly added little-endian formats have (pix_fmt & 1) == 0\&. This allows simpler detection of big vs little-endian\&. 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAV_PIX_FMT_NONE \fP\fP
.TP
\fB\fIAV_PIX_FMT_YUV420P \fP\fP
planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples) 
.TP
\fB\fIAV_PIX_FMT_YUYV422 \fP\fP
packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr 
.TP
\fB\fIAV_PIX_FMT_RGB24 \fP\fP
packed RGB 8:8:8, 24bpp, RGBRGB\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_BGR24 \fP\fP
packed RGB 8:8:8, 24bpp, BGRBGR\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_YUV422P \fP\fP
planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples) 
.TP
\fB\fIAV_PIX_FMT_YUV444P \fP\fP
planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples) 
.TP
\fB\fIAV_PIX_FMT_YUV410P \fP\fP
planar YUV 4:1:0, 9bpp, (1 Cr & Cb sample per 4x4 Y samples) 
.TP
\fB\fIAV_PIX_FMT_YUV411P \fP\fP
planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) 
.TP
\fB\fIAV_PIX_FMT_GRAY8 \fP\fP
Y , 8bpp\&. 
.TP
\fB\fIAV_PIX_FMT_MONOWHITE \fP\fP
Y , 1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb\&. 
.TP
\fB\fIAV_PIX_FMT_MONOBLACK \fP\fP
Y , 1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb\&. 
.TP
\fB\fIAV_PIX_FMT_PAL8 \fP\fP
8 bit with PIX_FMT_RGB32 palette 
.TP
\fB\fIAV_PIX_FMT_YUVJ420P \fP\fP
planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV420P and setting color_range 
.TP
\fB\fIAV_PIX_FMT_YUVJ422P \fP\fP
planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV422P and setting color_range 
.TP
\fB\fIAV_PIX_FMT_YUVJ444P \fP\fP
planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV444P and setting color_range 
.TP
\fB\fIAV_PIX_FMT_XVMC_MPEG2_MC \fP\fP
XVideo Motion Acceleration via common packet passing\&. 
.TP
\fB\fIAV_PIX_FMT_XVMC_MPEG2_IDCT \fP\fP
.TP
\fB\fIAV_PIX_FMT_UYVY422 \fP\fP
packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1 
.TP
\fB\fIAV_PIX_FMT_UYYVYY411 \fP\fP
packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3 
.TP
\fB\fIAV_PIX_FMT_BGR8 \fP\fP
packed RGB 3:3:2, 8bpp, (msb)2B 3G 3R(lsb) 
.TP
\fB\fIAV_PIX_FMT_BGR4 \fP\fP
packed RGB 1:2:1 bitstream, 4bpp, (msb)1B 2G 1R(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits 
.TP
\fB\fIAV_PIX_FMT_BGR4_BYTE \fP\fP
packed RGB 1:2:1, 8bpp, (msb)1B 2G 1R(lsb) 
.TP
\fB\fIAV_PIX_FMT_RGB8 \fP\fP
packed RGB 3:3:2, 8bpp, (msb)2R 3G 3B(lsb) 
.TP
\fB\fIAV_PIX_FMT_RGB4 \fP\fP
packed RGB 1:2:1 bitstream, 4bpp, (msb)1R 2G 1B(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits 
.TP
\fB\fIAV_PIX_FMT_RGB4_BYTE \fP\fP
packed RGB 1:2:1, 8bpp, (msb)1R 2G 1B(lsb) 
.TP
\fB\fIAV_PIX_FMT_NV12 \fP\fP
planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V) 
.TP
\fB\fIAV_PIX_FMT_NV21 \fP\fP
as above, but U and V bytes are swapped 
.TP
\fB\fIAV_PIX_FMT_ARGB \fP\fP
packed ARGB 8:8:8:8, 32bpp, ARGBARGB\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_RGBA \fP\fP
packed RGBA 8:8:8:8, 32bpp, RGBARGBA\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_ABGR \fP\fP
packed ABGR 8:8:8:8, 32bpp, ABGRABGR\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_BGRA \fP\fP
packed BGRA 8:8:8:8, 32bpp, BGRABGRA\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_GRAY16BE \fP\fP
Y , 16bpp, big-endian\&. 
.TP
\fB\fIAV_PIX_FMT_GRAY16LE \fP\fP
Y , 16bpp, little-endian\&. 
.TP
\fB\fIAV_PIX_FMT_YUV440P \fP\fP
planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples) 
.TP
\fB\fIAV_PIX_FMT_YUVJ440P \fP\fP
planar YUV 4:4:0 full scale (JPEG), deprecated in favor of PIX_FMT_YUV440P and setting color_range 
.TP
\fB\fIAV_PIX_FMT_YUVA420P \fP\fP
planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A samples) 
.TP
\fB\fIAV_PIX_FMT_VDPAU_H264 \fP\fP
H\&.264 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_VDPAU_MPEG1 \fP\fP
MPEG-1 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_VDPAU_MPEG2 \fP\fP
MPEG-2 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_VDPAU_WMV3 \fP\fP
WMV3 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_VDPAU_VC1 \fP\fP
VC-1 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_RGB48BE \fP\fP
packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian 
.TP
\fB\fIAV_PIX_FMT_RGB48LE \fP\fP
packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian 
.TP
\fB\fIAV_PIX_FMT_RGB565BE \fP\fP
packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), big-endian 
.TP
\fB\fIAV_PIX_FMT_RGB565LE \fP\fP
packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), little-endian 
.TP
\fB\fIAV_PIX_FMT_RGB555BE \fP\fP
packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), big-endian, most significant bit to 0 
.TP
\fB\fIAV_PIX_FMT_RGB555LE \fP\fP
packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), little-endian, most significant bit to 0 
.TP
\fB\fIAV_PIX_FMT_BGR565BE \fP\fP
packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), big-endian 
.TP
\fB\fIAV_PIX_FMT_BGR565LE \fP\fP
packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), little-endian 
.TP
\fB\fIAV_PIX_FMT_BGR555BE \fP\fP
packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), big-endian, most significant bit to 1 
.TP
\fB\fIAV_PIX_FMT_BGR555LE \fP\fP
packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), little-endian, most significant bit to 1 
.TP
\fB\fIAV_PIX_FMT_VAAPI_MOCO \fP\fP
HW acceleration through VA API at motion compensation entry-point, Picture\&.data[3] contains a vaapi_render_state struct which contains macroblocks as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_VAAPI_IDCT \fP\fP
HW acceleration through VA API at IDCT entry-point, Picture\&.data[3] contains a vaapi_render_state struct which contains fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_VAAPI_VLD \fP\fP
HW decoding through VA API, Picture\&.data[3] contains a vaapi_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_YUV420P16LE \fP\fP
planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P16BE \fP\fP
planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P16LE \fP\fP
planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P16BE \fP\fP
planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P16LE \fP\fP
planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P16BE \fP\fP
planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_VDPAU_MPEG4 \fP\fP
MPEG4 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIAV_PIX_FMT_DXVA2_VLD \fP\fP
HW decoding through DXVA2, Picture\&.data[3] contains a LPDIRECT3DSURFACE9 pointer\&. 
.TP
\fB\fIAV_PIX_FMT_RGB444LE \fP\fP
packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), little-endian, most significant bits to 0 
.TP
\fB\fIAV_PIX_FMT_RGB444BE \fP\fP
packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), big-endian, most significant bits to 0 
.TP
\fB\fIAV_PIX_FMT_BGR444LE \fP\fP
packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), little-endian, most significant bits to 1 
.TP
\fB\fIAV_PIX_FMT_BGR444BE \fP\fP
packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), big-endian, most significant bits to 1 
.TP
\fB\fIAV_PIX_FMT_GRAY8A \fP\fP
8bit gray, 8bit alpha 
.TP
\fB\fIAV_PIX_FMT_BGR48BE \fP\fP
packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as big-endian 
.TP
\fB\fIAV_PIX_FMT_BGR48LE \fP\fP
packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P9BE \fP\fP
planar YUV 4:2:0, 13\&.5bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian The following 12 formats have the disadvantage of needing 1 format for each bit depth\&. Notice that each 9/10 bits sample is stored in 16 bits with extra padding\&. If you want to support multiple bit depths, then using AV_PIX_FMT_YUV420P16* with the bpp stored separately is better\&. 
.TP
\fB\fIAV_PIX_FMT_YUV420P9LE \fP\fP
planar YUV 4:2:0, 13\&.5bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P10BE \fP\fP
planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P10LE \fP\fP
planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P10BE \fP\fP
planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P10LE \fP\fP
planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P9BE \fP\fP
planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P9LE \fP\fP
planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P10BE \fP\fP
planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P10LE \fP\fP
planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P9BE \fP\fP
planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P9LE \fP\fP
planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_VDA_VLD \fP\fP
hardware decoding through VDA 
.TP
\fB\fIAV_PIX_FMT_GBRP \fP\fP
planar GBR 4:4:4 24bpp 
.TP
\fB\fIAV_PIX_FMT_GBRP9BE \fP\fP
planar GBR 4:4:4 27bpp, big-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP9LE \fP\fP
planar GBR 4:4:4 27bpp, little-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP10BE \fP\fP
planar GBR 4:4:4 30bpp, big-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP10LE \fP\fP
planar GBR 4:4:4 30bpp, little-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP16BE \fP\fP
planar GBR 4:4:4 48bpp, big-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP16LE \fP\fP
planar GBR 4:4:4 48bpp, little-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA422P_LIBAV \fP\fP
planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples) duplicated pixel formats for compatibility with libav\&. FFmpeg supports these formats since May 8 2012 and Jan 28 2012 (commits f9ca1ac7 and 143a5c55) Libav added them Oct 12 2012 with incompatible values (commit 6d5600e85) 
.TP
\fB\fIAV_PIX_FMT_YUVA444P_LIBAV \fP\fP
planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples) 
.TP
\fB\fIAV_PIX_FMT_YUVA420P9BE \fP\fP
planar YUV 4:2:0 22\&.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA420P9LE \fP\fP
planar YUV 4:2:0 22\&.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA422P9BE \fP\fP
planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA422P9LE \fP\fP
planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA444P9BE \fP\fP
planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA444P9LE \fP\fP
planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUVA420P10BE \fP\fP
planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA420P10LE \fP\fP
planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA422P10BE \fP\fP
planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA422P10LE \fP\fP
planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA444P10BE \fP\fP
planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA444P10LE \fP\fP
planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA420P16BE \fP\fP
planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA420P16LE \fP\fP
planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA422P16BE \fP\fP
planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA422P16LE \fP\fP
planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA444P16BE \fP\fP
planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian) 
.TP
\fB\fIAV_PIX_FMT_YUVA444P16LE \fP\fP
planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian) 
.TP
\fB\fIAV_PIX_FMT_VDPAU \fP\fP
HW acceleration through VDPAU, Picture\&.data[3] contains a VdpVideoSurface\&. 
.TP
\fB\fIAV_PIX_FMT_XYZ12LE \fP\fP
packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as little-endian, the 4 lower bits are set to 0 
.TP
\fB\fIAV_PIX_FMT_XYZ12BE \fP\fP
packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as big-endian, the 4 lower bits are set to 0 
.TP
\fB\fIAV_PIX_FMT_NV16 \fP\fP
interleaved chroma YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples) 
.TP
\fB\fIAV_PIX_FMT_NV20LE \fP\fP
interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_NV20BE \fP\fP
interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_RGBA64BE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian 
.TP
\fB\fIAV_PIX_FMT_RGBA64LE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian 
.TP
\fB\fIAV_PIX_FMT_BGRA64BE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian 
.TP
\fB\fIAV_PIX_FMT_BGRA64LE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian 
.TP
\fB\fIAV_PIX_FMT_0RGB \fP\fP
packed RGB 8:8:8, 32bpp, 0RGB0RGB\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_RGB0 \fP\fP
packed RGB 8:8:8, 32bpp, RGB0RGB0\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_0BGR \fP\fP
packed BGR 8:8:8, 32bpp, 0BGR0BGR\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_BGR0 \fP\fP
packed BGR 8:8:8, 32bpp, BGR0BGR0\&.\&.\&. 
.TP
\fB\fIAV_PIX_FMT_YUVA444P \fP\fP
planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples) 
.TP
\fB\fIAV_PIX_FMT_YUVA422P \fP\fP
planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples) 
.TP
\fB\fIAV_PIX_FMT_YUV420P12BE \fP\fP
planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P12LE \fP\fP
planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P14BE \fP\fP
planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV420P14LE \fP\fP
planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P12BE \fP\fP
planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P12LE \fP\fP
planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P14BE \fP\fP
planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV422P14LE \fP\fP
planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P12BE \fP\fP
planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P12LE \fP\fP
planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P14BE \fP\fP
planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIAV_PIX_FMT_YUV444P14LE \fP\fP
planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP12BE \fP\fP
planar GBR 4:4:4 36bpp, big-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP12LE \fP\fP
planar GBR 4:4:4 36bpp, little-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP14BE \fP\fP
planar GBR 4:4:4 42bpp, big-endian 
.TP
\fB\fIAV_PIX_FMT_GBRP14LE \fP\fP
planar GBR 4:4:4 42bpp, little-endian 
.TP
\fB\fIAV_PIX_FMT_GBRAP \fP\fP
planar GBRA 4:4:4:4 32bpp 
.TP
\fB\fIAV_PIX_FMT_GBRAP16BE \fP\fP
planar GBRA 4:4:4:4 64bpp, big-endian 
.TP
\fB\fIAV_PIX_FMT_GBRAP16LE \fP\fP
planar GBRA 4:4:4:4 64bpp, little-endian 
.TP
\fB\fIAV_PIX_FMT_YUVJ411P \fP\fP
planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) full scale (JPEG), deprecated in favor of PIX_FMT_YUV411P and setting color_range 
.TP
\fB\fIAV_PIX_FMT_BAYER_BGGR8 \fP\fP
bayer, BGBG\&.\&.(odd line), GRGR\&.\&.(even line), 8-bit samples */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_RGGB8 \fP\fP
bayer, RGRG\&.\&.(odd line), GBGB\&.\&.(even line), 8-bit samples */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_GBRG8 \fP\fP
bayer, GBGB\&.\&.(odd line), RGRG\&.\&.(even line), 8-bit samples */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_GRBG8 \fP\fP
bayer, GRGR\&.\&.(odd line), BGBG\&.\&.(even line), 8-bit samples */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_BGGR16LE \fP\fP
bayer, BGBG\&.\&.(odd line), GRGR\&.\&.(even line), 16-bit samples, little-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_BGGR16BE \fP\fP
bayer, BGBG\&.\&.(odd line), GRGR\&.\&.(even line), 16-bit samples, big-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_RGGB16LE \fP\fP
bayer, RGRG\&.\&.(odd line), GBGB\&.\&.(even line), 16-bit samples, little-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_RGGB16BE \fP\fP
bayer, RGRG\&.\&.(odd line), GBGB\&.\&.(even line), 16-bit samples, big-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_GBRG16LE \fP\fP
bayer, GBGB\&.\&.(odd line), RGRG\&.\&.(even line), 16-bit samples, little-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_GBRG16BE \fP\fP
bayer, GBGB\&.\&.(odd line), RGRG\&.\&.(even line), 16-bit samples, big-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_GRBG16LE \fP\fP
bayer, GRGR\&.\&.(odd line), BGBG\&.\&.(even line), 16-bit samples, little-endian */ 
.TP
\fB\fIAV_PIX_FMT_BAYER_GRBG16BE \fP\fP
bayer, GRGR\&.\&.(odd line), BGBG\&.\&.(even line), 16-bit samples, big-endian */ 
.TP
\fB\fIAV_PIX_FMT_NB \fP\fP
number of pixel formats, DO NOT USE THIS if you want to link with shared libav* because the number of formats might differ between versions 
.TP
\fB\fIPIX_FMT_NONE \fP\fP
.TP
\fB\fIPIX_FMT_YUV420P \fP\fP
planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples) 
.TP
\fB\fIPIX_FMT_YUYV422 \fP\fP
packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr 
.TP
\fB\fIPIX_FMT_RGB24 \fP\fP
packed RGB 8:8:8, 24bpp, RGBRGB\&.\&.\&. 
.TP
\fB\fIPIX_FMT_BGR24 \fP\fP
packed RGB 8:8:8, 24bpp, BGRBGR\&.\&.\&. 
.TP
\fB\fIPIX_FMT_YUV422P \fP\fP
planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples) 
.TP
\fB\fIPIX_FMT_YUV444P \fP\fP
planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples) 
.TP
\fB\fIPIX_FMT_YUV410P \fP\fP
planar YUV 4:1:0, 9bpp, (1 Cr & Cb sample per 4x4 Y samples) 
.TP
\fB\fIPIX_FMT_YUV411P \fP\fP
planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) 
.TP
\fB\fIPIX_FMT_GRAY8 \fP\fP
Y , 8bpp\&. 
.TP
\fB\fIPIX_FMT_MONOWHITE \fP\fP
Y , 1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb\&. 
.TP
\fB\fIPIX_FMT_MONOBLACK \fP\fP
Y , 1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb\&. 
.TP
\fB\fIPIX_FMT_PAL8 \fP\fP
8 bit with PIX_FMT_RGB32 palette 
.TP
\fB\fIPIX_FMT_YUVJ420P \fP\fP
planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV420P and setting color_range 
.TP
\fB\fIPIX_FMT_YUVJ422P \fP\fP
planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV422P and setting color_range 
.TP
\fB\fIPIX_FMT_YUVJ444P \fP\fP
planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV444P and setting color_range 
.TP
\fB\fIPIX_FMT_XVMC_MPEG2_MC \fP\fP
XVideo Motion Acceleration via common packet passing\&. 
.TP
\fB\fIPIX_FMT_XVMC_MPEG2_IDCT \fP\fP
.TP
\fB\fIPIX_FMT_UYVY422 \fP\fP
packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1 
.TP
\fB\fIPIX_FMT_UYYVYY411 \fP\fP
packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3 
.TP
\fB\fIPIX_FMT_BGR8 \fP\fP
packed RGB 3:3:2, 8bpp, (msb)2B 3G 3R(lsb) 
.TP
\fB\fIPIX_FMT_BGR4 \fP\fP
packed RGB 1:2:1 bitstream, 4bpp, (msb)1B 2G 1R(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits 
.TP
\fB\fIPIX_FMT_BGR4_BYTE \fP\fP
packed RGB 1:2:1, 8bpp, (msb)1B 2G 1R(lsb) 
.TP
\fB\fIPIX_FMT_RGB8 \fP\fP
packed RGB 3:3:2, 8bpp, (msb)2R 3G 3B(lsb) 
.TP
\fB\fIPIX_FMT_RGB4 \fP\fP
packed RGB 1:2:1 bitstream, 4bpp, (msb)1R 2G 1B(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits 
.TP
\fB\fIPIX_FMT_RGB4_BYTE \fP\fP
packed RGB 1:2:1, 8bpp, (msb)1R 2G 1B(lsb) 
.TP
\fB\fIPIX_FMT_NV12 \fP\fP
planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V) 
.TP
\fB\fIPIX_FMT_NV21 \fP\fP
as above, but U and V bytes are swapped 
.TP
\fB\fIPIX_FMT_ARGB \fP\fP
packed ARGB 8:8:8:8, 32bpp, ARGBARGB\&.\&.\&. 
.TP
\fB\fIPIX_FMT_RGBA \fP\fP
packed RGBA 8:8:8:8, 32bpp, RGBARGBA\&.\&.\&. 
.TP
\fB\fIPIX_FMT_ABGR \fP\fP
packed ABGR 8:8:8:8, 32bpp, ABGRABGR\&.\&.\&. 
.TP
\fB\fIPIX_FMT_BGRA \fP\fP
packed BGRA 8:8:8:8, 32bpp, BGRABGRA\&.\&.\&. 
.TP
\fB\fIPIX_FMT_GRAY16BE \fP\fP
Y , 16bpp, big-endian\&. 
.TP
\fB\fIPIX_FMT_GRAY16LE \fP\fP
Y , 16bpp, little-endian\&. 
.TP
\fB\fIPIX_FMT_YUV440P \fP\fP
planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples) 
.TP
\fB\fIPIX_FMT_YUVJ440P \fP\fP
planar YUV 4:4:0 full scale (JPEG), deprecated in favor of PIX_FMT_YUV440P and setting color_range 
.TP
\fB\fIPIX_FMT_YUVA420P \fP\fP
planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A samples) 
.TP
\fB\fIPIX_FMT_VDPAU_H264 \fP\fP
H\&.264 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_VDPAU_MPEG1 \fP\fP
MPEG-1 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_VDPAU_MPEG2 \fP\fP
MPEG-2 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_VDPAU_WMV3 \fP\fP
WMV3 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_VDPAU_VC1 \fP\fP
VC-1 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_RGB48BE \fP\fP
packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian 
.TP
\fB\fIPIX_FMT_RGB48LE \fP\fP
packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian 
.TP
\fB\fIPIX_FMT_RGB565BE \fP\fP
packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), big-endian 
.TP
\fB\fIPIX_FMT_RGB565LE \fP\fP
packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), little-endian 
.TP
\fB\fIPIX_FMT_RGB555BE \fP\fP
packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), big-endian, most significant bit to 0 
.TP
\fB\fIPIX_FMT_RGB555LE \fP\fP
packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), little-endian, most significant bit to 0 
.TP
\fB\fIPIX_FMT_BGR565BE \fP\fP
packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), big-endian 
.TP
\fB\fIPIX_FMT_BGR565LE \fP\fP
packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), little-endian 
.TP
\fB\fIPIX_FMT_BGR555BE \fP\fP
packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), big-endian, most significant bit to 1 
.TP
\fB\fIPIX_FMT_BGR555LE \fP\fP
packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), little-endian, most significant bit to 1 
.TP
\fB\fIPIX_FMT_VAAPI_MOCO \fP\fP
HW acceleration through VA API at motion compensation entry-point, Picture\&.data[3] contains a vaapi_render_state struct which contains macroblocks as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_VAAPI_IDCT \fP\fP
HW acceleration through VA API at IDCT entry-point, Picture\&.data[3] contains a vaapi_render_state struct which contains fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_VAAPI_VLD \fP\fP
HW decoding through VA API, Picture\&.data[3] contains a vaapi_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_YUV420P16LE \fP\fP
planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV420P16BE \fP\fP
planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV422P16LE \fP\fP
planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV422P16BE \fP\fP
planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV444P16LE \fP\fP
planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV444P16BE \fP\fP
planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_VDPAU_MPEG4 \fP\fP
MPEG4 HW decoding with VDPAU, data[0] contains a \fBvdpau_render_state\fP struct which contains the bitstream of the slices as well as various fields extracted from headers\&. 
.TP
\fB\fIPIX_FMT_DXVA2_VLD \fP\fP
HW decoding through DXVA2, Picture\&.data[3] contains a LPDIRECT3DSURFACE9 pointer\&. 
.TP
\fB\fIPIX_FMT_RGB444LE \fP\fP
packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), little-endian, most significant bits to 0 
.TP
\fB\fIPIX_FMT_RGB444BE \fP\fP
packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), big-endian, most significant bits to 0 
.TP
\fB\fIPIX_FMT_BGR444LE \fP\fP
packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), little-endian, most significant bits to 1 
.TP
\fB\fIPIX_FMT_BGR444BE \fP\fP
packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), big-endian, most significant bits to 1 
.TP
\fB\fIPIX_FMT_GRAY8A \fP\fP
8bit gray, 8bit alpha 
.TP
\fB\fIPIX_FMT_BGR48BE \fP\fP
packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as big-endian 
.TP
\fB\fIPIX_FMT_BGR48LE \fP\fP
packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as little-endian 
.TP
\fB\fIPIX_FMT_YUV420P9BE \fP\fP
planar YUV 4:2:0, 13\&.5bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV420P9LE \fP\fP
planar YUV 4:2:0, 13\&.5bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV420P10BE \fP\fP
planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV420P10LE \fP\fP
planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV422P10BE \fP\fP
planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV422P10LE \fP\fP
planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV444P9BE \fP\fP
planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV444P9LE \fP\fP
planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV444P10BE \fP\fP
planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV444P10LE \fP\fP
planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV422P9BE \fP\fP
planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV422P9LE \fP\fP
planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_VDA_VLD \fP\fP
hardware decoding through VDA 
.TP
\fB\fIPIX_FMT_GBRP \fP\fP
planar GBR 4:4:4 24bpp 
.TP
\fB\fIPIX_FMT_GBRP9BE \fP\fP
planar GBR 4:4:4 27bpp, big endian 
.TP
\fB\fIPIX_FMT_GBRP9LE \fP\fP
planar GBR 4:4:4 27bpp, little endian 
.TP
\fB\fIPIX_FMT_GBRP10BE \fP\fP
planar GBR 4:4:4 30bpp, big endian 
.TP
\fB\fIPIX_FMT_GBRP10LE \fP\fP
planar GBR 4:4:4 30bpp, little endian 
.TP
\fB\fIPIX_FMT_GBRP16BE \fP\fP
planar GBR 4:4:4 48bpp, big endian 
.TP
\fB\fIPIX_FMT_GBRP16LE \fP\fP
planar GBR 4:4:4 48bpp, little endian 
.TP
\fB\fIPIX_FMT_RGBA64BE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian 
.TP
\fB\fIPIX_FMT_RGBA64LE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian 
.TP
\fB\fIPIX_FMT_BGRA64BE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian 
.TP
\fB\fIPIX_FMT_BGRA64LE \fP\fP
packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian 
.TP
\fB\fIPIX_FMT_0RGB \fP\fP
packed RGB 8:8:8, 32bpp, 0RGB0RGB\&.\&.\&. 
.TP
\fB\fIPIX_FMT_RGB0 \fP\fP
packed RGB 8:8:8, 32bpp, RGB0RGB0\&.\&.\&. 
.TP
\fB\fIPIX_FMT_0BGR \fP\fP
packed BGR 8:8:8, 32bpp, 0BGR0BGR\&.\&.\&. 
.TP
\fB\fIPIX_FMT_BGR0 \fP\fP
packed BGR 8:8:8, 32bpp, BGR0BGR0\&.\&.\&. 
.TP
\fB\fIPIX_FMT_YUVA444P \fP\fP
planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples) 
.TP
\fB\fIPIX_FMT_YUVA422P \fP\fP
planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples) 
.TP
\fB\fIPIX_FMT_YUV420P12BE \fP\fP
planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV420P12LE \fP\fP
planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV420P14BE \fP\fP
planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV420P14LE \fP\fP
planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV422P12BE \fP\fP
planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV422P12LE \fP\fP
planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV422P14BE \fP\fP
planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV422P14LE \fP\fP
planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV444P12BE \fP\fP
planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV444P12LE \fP\fP
planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_YUV444P14BE \fP\fP
planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian 
.TP
\fB\fIPIX_FMT_YUV444P14LE \fP\fP
planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian 
.TP
\fB\fIPIX_FMT_GBRP12BE \fP\fP
planar GBR 4:4:4 36bpp, big endian 
.TP
\fB\fIPIX_FMT_GBRP12LE \fP\fP
planar GBR 4:4:4 36bpp, little endian 
.TP
\fB\fIPIX_FMT_GBRP14BE \fP\fP
planar GBR 4:4:4 42bpp, big endian 
.TP
\fB\fIPIX_FMT_GBRP14LE \fP\fP
planar GBR 4:4:4 42bpp, little endian 
.TP
\fB\fIPIX_FMT_NB \fP\fP
number of pixel formats, DO NOT USE THIS if you want to link with shared libav* because the number of formats might differ between versions 
.PP
Definition at line 66 of file pixfmt\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
