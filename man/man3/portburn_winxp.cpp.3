.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_winxp.cpp" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_winxp.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'portburn\&.h'\fP
.br
\fC#include <windows\&.h>\fP
.br
\fC#include <imapi\&.h>\fP
.br
\fC#include <imapi2\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBPBHandle\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_WIN32_WINNT\fP   0x0400"
.br
.ti -1c
.RI "#define \fBPBFUNC\fP(r,  \fBf\fP)                        "
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBIMAPI_V1\fP, \fBIMAPI_V2\fP, \fBIMAPI_VERS\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPBFUNC\fP (\fBvoid\fP *, \fBOpen\fP())"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBvoid\fP, \fBClose\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (char *, \fBLastError\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBGetNumDevices\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (char *, \fBGetDeviceName\fP(\fBvoid\fP *handle, \fBint\fP index))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBOpenDevice\fP(\fBvoid\fP *handle, \fBint\fP index))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBCloseDevice\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBEjectDevice\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBStartErasing\fP(\fBvoid\fP *handle, \fBint\fP type))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBGetEraseStatus\fP(\fBvoid\fP *handle, float *out_fraction_complete))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBStartStaging\fP(\fBvoid\fP *handle, \fBconst\fP char *tmpdir))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBStartTrack\fP(\fBvoid\fP *handle, \fBconst\fP char *\fBname\fP))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBAddFrame\fP(\fBvoid\fP *handle, short *\fBbuffer\fP))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBEndTrack\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBStartBurning\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBCancelBurning\fP(\fBvoid\fP *handle))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBGetStatus\fP(\fBvoid\fP *handle, float *out_fraction_complete))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBGetOption\fP(\fBvoid\fP *handle, \fBint\fP option, \fBint\fP *\fBvalue\fP))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBSetOption\fP(\fBvoid\fP *handle, \fBint\fP option, \fBint\fP \fBvalue\fP))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBGetSupportedSpeeds\fP(\fBvoid\fP *handle, \fBint\fP *cnt, \fBint\fP *option[]))"
.br
.ti -1c
.RI "\fBPBFUNC\fP (\fBint\fP, \fBGetMediaState\fP(\fBvoid\fP *handle, \fBint\fP *state))"
.br
.ti -1c
.RI "\fBvoid\fP * \fBPortBurn_Open\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBPortBurn_Close\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "char * \fBPortBurn_LastError\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_GetNumDevices\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "char * \fBPortBurn_GetDeviceName\fP (\fBvoid\fP *handle, \fBint\fP index)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_OpenDevice\fP (\fBvoid\fP *handle, \fBint\fP index)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_CloseDevice\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_EjectDevice\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_StartStaging\fP (\fBvoid\fP *handle, \fBconst\fP char *tmpdir)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_StartTrack\fP (\fBvoid\fP *handle, \fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_AddFrame\fP (\fBvoid\fP *handle, short *\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_EndTrack\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_StartBurning\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_CancelBurning\fP (\fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_GetStatus\fP (\fBvoid\fP *handle, float *out_fraction_complete)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_GetOption\fP (\fBvoid\fP *handle, \fBint\fP option, \fBint\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_SetOption\fP (\fBvoid\fP *handle, \fBint\fP option, \fBint\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_GetSpeeds\fP (\fBvoid\fP *handle, \fBint\fP *cnt, \fBint\fP *speeds[])"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_StartErasing\fP (\fBvoid\fP *handle, \fBint\fP type)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_GetEraseStatus\fP (\fBvoid\fP *handle, float *out_fraction_complete)"
.br
.ti -1c
.RI "\fBint\fP \fBPortBurn_GetMediaState\fP (\fBvoid\fP *handle, \fBint\fP *state)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "struct {"
.br
.ti -1c
.RI "   \fBvoid\fP *(* \fBOpen\fP )()"
.br
.ti -1c
.RI "   \fBvoid\fP(* \fBClose\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   char *(* \fBLastError\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBGetNumDevices\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   char *(* \fBGetDeviceName\fP )(\fBvoid\fP *handle, \fBint\fP index)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBOpenDevice\fP )(\fBvoid\fP *handle, \fBint\fP index)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBCloseDevice\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBEjectDevice\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBStartErasing\fP )(\fBvoid\fP *handle, \fBint\fP type)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBGetEraseStatus\fP )(\fBvoid\fP *handle, float 
.br
      *out_fraction_complete)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBStartStaging\fP )(\fBvoid\fP *handle, \fBconst\fP char *tmpdir)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBStartTrack\fP )(\fBvoid\fP *handle, \fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBAddFrame\fP )(\fBvoid\fP *handle, short *\fBbuffer\fP)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBEndTrack\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBStartBurning\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBCancelBurning\fP )(\fBvoid\fP *handle)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBGetStatus\fP )(\fBvoid\fP *handle, float 
.br
      *out_fraction_complete)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBGetOption\fP )(\fBvoid\fP *handle, \fBint\fP option, 
.br
      \fBint\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBSetOption\fP )(\fBvoid\fP *handle, \fBint\fP option, 
.br
      \fBint\fP \fBvalue\fP)"
.br
.ti -1c
.RI "   \fBint\fP(* \fBGetSupportedSpeeds\fP )(\fBvoid\fP *handle, \fBint\fP *cnt, \fBint\fP 
.br
      *option[])"
.br
.ti -1c
.RI "   \fBint\fP(* \fBGetMediaState\fP )(\fBvoid\fP *handle, \fBint\fP *state)"
.br
.ti -1c
.RI "} \fBvectors\fP [\fBIMAPI_VERS\fP]"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _WIN32_WINNT   0x0400"

.PP
Definition at line 16 of file portburn_winxp\&.cpp\&.
.SS "#define PBFUNC(r, \fBf\fP)"
\fBValue:\fP
.PP
.nf
extern r PortBurn_v1_ ## f;   \
   extern r PortBurn_v2_ ## f;
.fi
.PP
Definition at line 27 of file portburn_winxp\&.cpp\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIIMAPI_V1 \fP\fP
.TP
\fB\fIIMAPI_V2 \fP\fP
.TP
\fB\fIIMAPI_VERS \fP\fP
.PP
Definition at line 53 of file portburn_winxp\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "PBFUNC (\fBvoid\fP *, \fBOpen\fP())"

.SS "PBFUNC (\fBvoid\fP, \fBClose\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (char *, \fBLastError\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (\fBint\fP, \fBGetNumDevices\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (char *, \fBGetDeviceName\fP(\fBvoid\fP *handle, \fBint\fP index))"

.SS "PBFUNC (\fBint\fP, \fBOpenDevice\fP(\fBvoid\fP *handle, \fBint\fP index))"

.SS "PBFUNC (\fBint\fP, \fBCloseDevice\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (\fBint\fP, \fBEjectDevice\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (\fBint\fP, \fBStartErasing\fP(\fBvoid\fP *handle, \fBint\fP type))"

.SS "PBFUNC (\fBint\fP, \fBGetEraseStatus\fP(\fBvoid\fP *handle, float *out_fraction_complete))"

.SS "PBFUNC (\fBint\fP, \fBStartStaging\fP(\fBvoid\fP *handle, \fBconst\fP char *tmpdir))"

.SS "PBFUNC (\fBint\fP, \fBStartTrack\fP(\fBvoid\fP *handle, \fBconst\fP char *\fBname\fP))"

.SS "PBFUNC (\fBint\fP, \fBAddFrame\fP(\fBvoid\fP *handle, short *\fBbuffer\fP))"

.SS "PBFUNC (\fBint\fP, \fBEndTrack\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (\fBint\fP, \fBStartBurning\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (\fBint\fP, \fBCancelBurning\fP(\fBvoid\fP *handle))"

.SS "PBFUNC (\fBint\fP, \fBGetStatus\fP(\fBvoid\fP *handle, float *out_fraction_complete))"

.SS "PBFUNC (\fBint\fP, \fBGetOption\fP(\fBvoid\fP *handle, \fBint\fP option, \fBint\fP *\fBvalue\fP))"

.SS "PBFUNC (\fBint\fP, \fBSetOption\fP(\fBvoid\fP *handle, \fBint\fP option, \fBint\fP \fBvalue\fP))"

.SS "PBFUNC (\fBint\fP, \fBGetSupportedSpeeds\fP(\fBvoid\fP *handle, \fBint\fP *cnt, \fBint\fP *option[]))"

.SS "PBFUNC (\fBint\fP, \fBGetMediaState\fP(\fBvoid\fP *handle, \fBint\fP *state))"

.SS "\fBint\fP PortBurn_AddFrame (\fBvoid\fP * handle, short * buffer)"

.PP
Definition at line 296 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_CancelBurning (\fBvoid\fP * handle)"

.PP
Definition at line 329 of file portburn_winxp\&.cpp\&.
.SS "\fBvoid\fP PortBurn_Close (\fBvoid\fP * handle)"

.PP
Definition at line 191 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_CloseDevice (\fBvoid\fP * handle)"

.PP
Definition at line 252 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_EjectDevice (\fBvoid\fP * handle)"

.PP
Definition at line 263 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_EndTrack (\fBvoid\fP * handle)"

.PP
Definition at line 307 of file portburn_winxp\&.cpp\&.
.SS "char* PortBurn_GetDeviceName (\fBvoid\fP * handle, \fBint\fP index)"

.PP
Definition at line 230 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_GetEraseStatus (\fBvoid\fP * handle, float * out_fraction_complete)"

.PP
Definition at line 390 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_GetMediaState (\fBvoid\fP * handle, \fBint\fP * state)"

.PP
Definition at line 402 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_GetNumDevices (\fBvoid\fP * handle)"

.PP
Definition at line 217 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_GetOption (\fBvoid\fP * handle, \fBint\fP option, \fBint\fP * value)"

.PP
Definition at line 351 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_GetSpeeds (\fBvoid\fP * handle, \fBint\fP * cnt, \fBint\fP * speeds[])"

.PP
Definition at line 373 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_GetStatus (\fBvoid\fP * handle, float * out_fraction_complete)"

.PP
Definition at line 340 of file portburn_winxp\&.cpp\&.
.SS "char* PortBurn_LastError (\fBvoid\fP * handle)"

.PP
Definition at line 206 of file portburn_winxp\&.cpp\&.
.SS "\fBvoid\fP* PortBurn_Open ()"

.PP
Definition at line 133 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_OpenDevice (\fBvoid\fP * handle, \fBint\fP index)"

.PP
Definition at line 241 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_SetOption (\fBvoid\fP * handle, \fBint\fP option, \fBint\fP value)"

.PP
Definition at line 362 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_StartBurning (\fBvoid\fP * handle)"

.PP
Definition at line 318 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_StartErasing (\fBvoid\fP * handle, \fBint\fP type)"

.PP
Definition at line 379 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_StartStaging (\fBvoid\fP * handle, \fBconst\fP char * tmpdir)"

.PP
Definition at line 274 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP PortBurn_StartTrack (\fBvoid\fP * handle, \fBconst\fP char * name)"

.PP
Definition at line 285 of file portburn_winxp\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "\fBint\fP(* AddFrame) (\fBvoid\fP *handle, short *\fBbuffer\fP)"

.PP
Definition at line 73 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* CancelBurning) (\fBvoid\fP *handle)"

.PP
Definition at line 76 of file portburn_winxp\&.cpp\&.
.SS "\fBvoid\fP(* Close) (\fBvoid\fP *handle)"

.PP
Definition at line 62 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* CloseDevice) (\fBvoid\fP *handle)"

.PP
Definition at line 67 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* EjectDevice) (\fBvoid\fP *handle)"

.PP
Definition at line 68 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* EndTrack) (\fBvoid\fP *handle)"

.PP
Definition at line 74 of file portburn_winxp\&.cpp\&.
.SS "char*(* GetDeviceName) (\fBvoid\fP *handle, \fBint\fP index)"

.PP
Definition at line 65 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* GetEraseStatus) (\fBvoid\fP *handle, float *out_fraction_complete)"

.PP
Definition at line 70 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* GetMediaState) (\fBvoid\fP *handle, \fBint\fP *state)"

.PP
Definition at line 81 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* GetNumDevices) (\fBvoid\fP *handle)"

.PP
Definition at line 64 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* GetOption) (\fBvoid\fP *handle, \fBint\fP option, \fBint\fP *\fBvalue\fP)"

.PP
Definition at line 78 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* GetStatus) (\fBvoid\fP *handle, float *out_fraction_complete)"

.PP
Definition at line 77 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* GetSupportedSpeeds) (\fBvoid\fP *handle, \fBint\fP *cnt, \fBint\fP *option[])"

.PP
Definition at line 80 of file portburn_winxp\&.cpp\&.
.SS "char*(* LastError) (\fBvoid\fP *handle)"

.PP
Definition at line 63 of file portburn_winxp\&.cpp\&.
.SS "\fBvoid\fP*(* Open) ()"

.PP
Definition at line 61 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* OpenDevice) (\fBvoid\fP *handle, \fBint\fP index)"

.PP
Definition at line 66 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* SetOption) (\fBvoid\fP *handle, \fBint\fP option, \fBint\fP \fBvalue\fP)"

.PP
Definition at line 79 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* StartBurning) (\fBvoid\fP *handle)"

.PP
Definition at line 75 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* StartErasing) (\fBvoid\fP *handle, \fBint\fP type)"

.PP
Definition at line 69 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* StartStaging) (\fBvoid\fP *handle, \fBconst\fP char *tmpdir)"

.PP
Definition at line 71 of file portburn_winxp\&.cpp\&.
.SS "\fBint\fP(* StartTrack) (\fBvoid\fP *handle, \fBconst\fP char *\fBname\fP)"

.PP
Definition at line 72 of file portburn_winxp\&.cpp\&.
.SS "struct { \&.\&.\&. } 
 vectors[\fBIMAPI_VERS\fP]"

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
