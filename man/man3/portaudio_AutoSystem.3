.TH "portaudio::AutoSystem" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
portaudio::AutoSystem \- A RAII idiom class to ensure automatic clean-up when an exception is raised\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AutoSystem\&.hxx>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAutoSystem\fP (\fBbool\fP \fBinitialize\fP=\fBtrue\fP)"
.br
.ti -1c
.RI "\fB~AutoSystem\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBinitialize\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBterminate\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
A RAII idiom class to ensure automatic clean-up when an exception is raised\&. 

A simple helper class which uses the 'Resource Acquisition is Initialization' idiom (RAII)\&. Use this class to initialize/terminate the \fBSystem\fP rather than using \fBSystem\fP directly\&. \fBAutoSystem\fP must be created on stack and must be valid throughout the time you wish to use PortAudioCpp\&. Your 'main' function might be a good place for it\&.
.PP
To avoid having to type \fBportaudio::System::instance()\fP\&.xyz() all the time, it's usually a good idea to make a reference to the \fBSystem\fP which can be accessed directly\&. 
.PP
.nf
/// portaudio::AutoSys autoSys;
/// portaudio::System &sys = portaudio::System::instance();
/// 
.fi
.PP
 
.PP
Definition at line 31 of file AutoSystem\&.hxx\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "portaudio::AutoSystem::AutoSystem (\fBbool\fP initialize = \fC\fBtrue\fP\fP)\fC [inline]\fP"

.PP
Definition at line 34 of file AutoSystem\&.hxx\&.
.SS "portaudio::AutoSystem::~AutoSystem ()\fC [inline]\fP"

.PP
Definition at line 40 of file AutoSystem\&.hxx\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP portaudio::AutoSystem::initialize ()\fC [inline]\fP"

.PP
Definition at line 46 of file AutoSystem\&.hxx\&.
.SS "\fBvoid\fP portaudio::AutoSystem::terminate ()\fC [inline]\fP"

.PP
Definition at line 51 of file AutoSystem\&.hxx\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
