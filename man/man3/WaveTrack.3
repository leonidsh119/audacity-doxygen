.TH "WaveTrack" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WaveTrack \- A \fBTrack\fP that contains audio waveform data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <WaveTrack\&.h>\fP
.PP
Inherits \fBTrack\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBLocation\fP"
.br
.RI "\fIUsed only by \fBWaveTrack\fP, a special way to hold location that can accommodate merged regions\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBWaveTrackDisplay\fP { \fBWaveform\fP = 0, \fBMinDisplay\fP = Waveform, \fBobsoleteWaveformDBDisplay\fP, \fBSpectrum\fP, \fBobsolete1\fP, \fBobsolete2\fP, \fBobsolete3\fP, \fBobsolete4\fP, \fBMaxDisplay\fP = Spectrum, \fBNoDisplay\fP }"
.br
.ti -1c
.RI "typedef \fBWaveTrackLocation\fP \fBLocation\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~WaveTrack\fP ()"
.br
.ti -1c
.RI "double \fBGetOffset\fP () \fBconst\fP  override"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetOffset\fP (double o) override"
.br
.ti -1c
.RI "double \fBGetStartTime\fP () \fBconst\fP "
.br
.RI "\fIGet the time at which the first clip in the track starts\&. \fP"
.ti -1c
.RI "double \fBGetEndTime\fP () \fBconst\fP "
.br
.RI "\fIGet the time at which the last clip in the track ends, plus recorded stuff\&. \fP"
.ti -1c
.RI "\fBint\fP \fBGetKind\fP () \fBconst\fP  override"
.br
.ti -1c
.RI "double \fBGetRate\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetRate\fP (double newRate)"
.br
.ti -1c
.RI "float \fBGetGain\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetGain\fP (float newGain)"
.br
.ti -1c
.RI "float \fBGetPan\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetPan\fP (float newPan)"
.br
.ti -1c
.RI "float \fBGetChannelGain\fP (\fBint\fP channel) \fBconst\fP "
.br
.ti -1c
.RI "\fBsampleFormat\fP \fBGetSampleFormat\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBConvertToSampleFormat\fP (\fBsampleFormat\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBSpectrogramSettings\fP & \fBGetSpectrogramSettings\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBSpectrogramSettings\fP & \fBGetSpectrogramSettings\fP ()"
.br
.ti -1c
.RI "\fBSpectrogramSettings\fP & \fBGetIndependentSpectrogramSettings\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetSpectrogramSettings\fP (\fBSpectrogramSettings\fP *pSettings)"
.br
.ti -1c
.RI "\fBconst\fP \fBWaveformSettings\fP & \fBGetWaveformSettings\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBWaveformSettings\fP & \fBGetWaveformSettings\fP ()"
.br
.ti -1c
.RI "\fBWaveformSettings\fP & \fBGetIndependentWaveformSettings\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetWaveformSettings\fP (\fBWaveformSettings\fP *pSettings)"
.br
.ti -1c
.RI "\fBbool\fP \fBCut\fP (double t0, double t1, \fBTrack\fP **dest) override"
.br
.ti -1c
.RI "\fBbool\fP \fBCopy\fP (double t0, double t1, \fBTrack\fP **dest) \fBconst\fP  override"
.br
.ti -1c
.RI "\fBbool\fP \fBCopyNonconst\fP (double t0, double t1, \fBTrack\fP **dest)"
.br
.ti -1c
.RI "\fBbool\fP \fBClear\fP (double t0, double t1) override"
.br
.ti -1c
.RI "\fBbool\fP \fBPaste\fP (double t0, \fBconst\fP \fBTrack\fP *src) override"
.br
.ti -1c
.RI "\fBbool\fP \fBClearAndPaste\fP (double t0, double t1, \fBconst\fP \fBTrack\fP *src, \fBbool\fP preserve=\fBtrue\fP, \fBbool\fP merge=\fBtrue\fP, \fBTimeWarper\fP *effectWarper=\fBNULL\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBSilence\fP (double t0, double t1) override"
.br
.ti -1c
.RI "\fBbool\fP \fBInsertSilence\fP (double \fBt\fP, double \fBlen\fP) override"
.br
.ti -1c
.RI "\fBbool\fP \fBSplitAt\fP (double \fBt\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBSplit\fP (double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBClearAndAddCutLine\fP (double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBSplitCut\fP (double t0, double t1, \fBTrack\fP **dest)"
.br
.ti -1c
.RI "\fBbool\fP \fBSplitDelete\fP (double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBJoin\fP (double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBDisjoin\fP (double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBTrim\fP (double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBHandleClear\fP (double t0, double t1, \fBbool\fP addCutLines, \fBbool\fP split)"
.br
.ti -1c
.RI "\fBbool\fP \fBSyncLockAdjust\fP (double oldT1, double newT1) override"
.br
.ti -1c
.RI "\fBbool\fP \fBIsEmpty\fP (double t0, double t1)"
.br
.RI "\fIReturns true if there are no WaveClips in the specified region\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBAppend\fP (\fBsamplePtr\fP \fBbuffer\fP, \fBsampleFormat\fP \fBformat\fP, \fBsampleCount\fP \fBlen\fP, unsigned \fBint\fP stride=1, \fBXMLWriter\fP *blockFileLog=\fBNULL\fP)"
.br
.RI "\fIAppend the sample data to the \fBWaveTrack\fP\&. You must call \fBFlush()\fP after the last Append\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBFlush\fP ()"
.br
.RI "\fIFlush must be called after last Append\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBAppendAlias\fP (\fBconst\fP wxString &fName, \fBsampleCount\fP \fBstart\fP, \fBsampleCount\fP \fBlen\fP, \fBint\fP channel, \fBbool\fP useOD)"
.br
.ti -1c
.RI "\fBbool\fP \fBAppendCoded\fP (\fBconst\fP wxString &fName, \fBsampleCount\fP \fBstart\fP, \fBsampleCount\fP \fBlen\fP, \fBint\fP channel, \fBint\fP decodeType)"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBGetODFlags\fP ()"
.br
.RI "\fIgets an int with OD flags so that we can determine which ODTasks should be run on this track after save/open, etc\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBDeleteWaveCaches\fP ()"
.br
.RI "\fIDeletes all clips' wavecaches\&. Careful, This may not be threadsafe\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBAddInvalidRegion\fP (\fBsampleCount\fP startSample, \fBsampleCount\fP endSample)"
.br
.RI "\fIAdds an invalid region to the wavecache so it redraws that portion only\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBGet\fP (\fBsamplePtr\fP \fBbuffer\fP, \fBsampleFormat\fP \fBformat\fP, \fBsampleCount\fP \fBstart\fP, \fBsampleCount\fP \fBlen\fP, \fBfillFormat\fP fill=\fBfillZero\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBSet\fP (\fBsamplePtr\fP \fBbuffer\fP, \fBsampleFormat\fP \fBformat\fP, \fBsampleCount\fP \fBstart\fP, \fBsampleCount\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGetEnvelopeValues\fP (double *\fBbuffer\fP, \fBint\fP bufferLen, double t0, double tstep) \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBGetMinMax\fP (float *\fBmin\fP, float *\fBmax\fP, double t0, double t1)"
.br
.ti -1c
.RI "\fBbool\fP \fBGetRMS\fP (float *rms, double t0, double t1)"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBGetClipAtX\fP (\fBint\fP xcoord)"
.br
.ti -1c
.RI "\fBSequence\fP * \fBGetSequenceAtX\fP (\fBint\fP xcoord)"
.br
.ti -1c
.RI "\fBEnvelope\fP * \fBGetEnvelopeAtX\fP (\fBint\fP xcoord)"
.br
.ti -1c
.RI "\fBEnvelope\fP * \fBGetActiveEnvelope\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBGetClipAtSample\fP (\fBsampleCount\fP sample)"
.br
.ti -1c
.RI "\fBsampleCount\fP \fBGetBlockStart\fP (\fBsampleCount\fP \fBt\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBsampleCount\fP \fBGetBestBlockSize\fP (\fBsampleCount\fP \fBt\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBsampleCount\fP \fBGetMaxBlockSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBsampleCount\fP \fBGetIdealBlockSize\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBHandleXMLTag\fP (\fBconst\fP wxChar *\fBtag\fP, \fBconst\fP wxChar **attrs) override"
.br
.ti -1c
.RI "\fBvoid\fP \fBHandleXMLEndTag\fP (\fBconst\fP wxChar *\fBtag\fP) override"
.br
.ti -1c
.RI "\fBXMLTagHandler\fP * \fBHandleXMLChild\fP (\fBconst\fP wxChar *\fBtag\fP) override"
.br
.ti -1c
.RI "\fBvoid\fP \fBWriteXML\fP (\fBXMLWriter\fP &xmlFile) override"
.br
.ti -1c
.RI "\fBbool\fP \fBGetErrorOpening\fP () override"
.br
.ti -1c
.RI "\fBbool\fP \fBLock\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBCloseLock\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBUnlock\fP ()"
.br
.ti -1c
.RI "\fBsampleCount\fP \fBTimeToLongSamples\fP (double t0) \fBconst\fP "
.br
.RI "\fIConvert correctly between an (absolute) time in seconds and a number of samples\&. \fP"
.ti -1c
.RI "double \fBLongSamplesToTime\fP (\fBsampleCount\fP pos) \fBconst\fP "
.br
.RI "\fIConvert correctly between an number of samples and an (absolute) time in seconds\&. \fP"
.ti -1c
.RI "WaveClipList::compatibility_iterator \fBGetClipIterator\fP ()"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBCreateClip\fP ()"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBNewestOrNewClip\fP ()"
.br
.RI "\fIGet access to the most recently added clip, or create a clip, if there is not already one\&. THIS IS NOT NECESSARILY RIGHTMOST\&. \fP"
.ti -1c
.RI "\fBWaveClip\fP * \fBRightmostOrNewClip\fP ()"
.br
.RI "\fIGet access to the last (rightmost) clip, or create a clip, if there is not already one\&. \fP"
.ti -1c
.RI "\fBint\fP \fBGetClipIndex\fP (\fBWaveClip\fP *clip)"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBGetClipByIndex\fP (\fBint\fP index)"
.br
.ti -1c
.RI "\fBint\fP \fBGetNumClips\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBFillSortedClipArray\fP (WaveClipArray &clips) \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBCanOffsetClip\fP (\fBWaveClip\fP *clip, double amount, double *allowedAmount=\fBNULL\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBCanInsertClip\fP (\fBWaveClip\fP *clip)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMoveClipToTrack\fP (\fBWaveClip\fP *clip, \fBWaveTrack\fP *dest)"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBRemoveAndReturnClip\fP (\fBWaveClip\fP *clip)"
.br
.ti -1c
.RI "\fBvoid\fP \fBAddClip\fP (\fBWaveClip\fP *clip)"
.br
.ti -1c
.RI "\fBbool\fP \fBMergeClips\fP (\fBint\fP clipidx1, \fBint\fP clipidx2)"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdateLocationsCache\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBconst\fP std::vector< \fBLocation\fP > & \fBGetCachedLocations\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBExpandCutLine\fP (double cutLinePosition, double *cutlineStart=\fBNULL\fP, double *cutlineEnd=\fBNULL\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBRemoveCutLine\fP (double cutLinePosition)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMerge\fP (\fBconst\fP \fBTrack\fP &orig) override"
.br
.ti -1c
.RI "\fBbool\fP \fBResample\fP (\fBint\fP \fBrate\fP, \fBProgressDialog\fP *progress=\fBNULL\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBGetAutoSaveIdent\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetAutoSaveIdent\fP (\fBint\fP id)"
.br
.ti -1c
.RI "\fBint\fP \fBGetLastScaleType\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLastScaleType\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBint\fP \fBGetLastdBRange\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLastdBRange\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBWaveTrackDisplay\fP \fBGetDisplay\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetDisplay\fP (\fBWaveTrackDisplay\fP display)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGetDisplayBounds\fP (float *\fBmin\fP, float *\fBmax\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetDisplayBounds\fP (float \fBmin\fP, float \fBmax\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBGetSpectrumBounds\fP (float *\fBmin\fP, float *\fBmax\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetSpectrumBounds\fP (float \fBmin\fP, float \fBmax\fP) \fBconst\fP "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBWaveTrackDisplay\fP \fBFindDefaultViewMode\fP ()"
.br
.ti -1c
.RI "static \fBWaveTrackDisplay\fP \fBConvertLegacyDisplayValue\fP (\fBint\fP oldValue)"
.br
.ti -1c
.RI "static \fBWaveTrackDisplay\fP \fBValidateWaveTrackDisplay\fP (\fBWaveTrackDisplay\fP display)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "WaveClipList \fBmClips\fP"
.br
.ti -1c
.RI "\fBsampleFormat\fP \fBmFormat\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmRate\fP"
.br
.ti -1c
.RI "float \fBmGain\fP"
.br
.ti -1c
.RI "float \fBmPan\fP"
.br
.ti -1c
.RI "float \fBmDisplayMin\fP"
.br
.ti -1c
.RI "float \fBmDisplayMax\fP"
.br
.ti -1c
.RI "float \fBmSpectrumMin\fP"
.br
.ti -1c
.RI "float \fBmSpectrumMax\fP"
.br
.ti -1c
.RI "\fBWaveTrackDisplay\fP \fBmDisplay\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmLastScaleType\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmLastdBRange\fP"
.br
.ti -1c
.RI "std::vector< \fBLocation\fP > \fBmDisplayLocationsCache\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBTrackFactory\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A \fBTrack\fP that contains audio waveform data\&. 
.PP
Definition at line 62 of file WaveTrack\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBWaveTrackLocation\fP \fBWaveTrack::Location\fP"

.PP
Definition at line 89 of file WaveTrack\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBWaveTrack::WaveTrackDisplay\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWaveform \fP\fP
.TP
\fB\fIMinDisplay \fP\fP
.TP
\fB\fIobsoleteWaveformDBDisplay \fP\fP
.TP
\fB\fISpectrum \fP\fP
.TP
\fB\fIobsolete1 \fP\fP
.TP
\fB\fIobsolete2 \fP\fP
.TP
\fB\fIobsolete3 \fP\fP
.TP
\fB\fIobsolete4 \fP\fP
.TP
\fB\fIMaxDisplay \fP\fP
.TP
\fB\fINoDisplay \fP\fP
.PP
Definition at line 408 of file WaveTrack\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "WaveTrack::~WaveTrack ()\fC [virtual]\fP"

.PP
Definition at line 169 of file WaveTrack\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP WaveTrack::AddClip (\fBWaveClip\fP * clip)"

.PP
Definition at line 998 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::AddInvalidRegion (\fBsampleCount\fP startSample, \fBsampleCount\fP endSample)"

.PP
Adds an invalid region to the wavecache so it redraws that portion only\&. 
.PP
Definition at line 2635 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Append (\fBsamplePtr\fP buffer, \fBsampleFormat\fP format, \fBsampleCount\fP len, unsigned \fBint\fP stride = \fC1\fP, \fBXMLWriter\fP * blockFileLog = \fC\fBNULL\fP\fP)"

.PP
Append the sample data to the \fBWaveTrack\fP\&. You must call \fBFlush()\fP after the last Append\&. If there is an existing \fBWaveClip\fP in the \fBWaveTrack\fP then the data is appended to that clip\&. If there are no WaveClips in the track, then a NEW one is created\&. 
.PP
Definition at line 1568 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::AppendAlias (\fBconst\fP wxString & fName, \fBsampleCount\fP start, \fBsampleCount\fP len, \fBint\fP channel, \fBbool\fP useOD)"

.PP
Definition at line 1576 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::AppendCoded (\fBconst\fP wxString & fName, \fBsampleCount\fP start, \fBsampleCount\fP len, \fBint\fP channel, \fBint\fP decodeType)"
for use with On-Demand decoding of compressed files\&. decodeType should be an enum from \fBODDecodeTask\fP that specifies what Type of encoded file this is, such as eODFLAC 
.PP
Definition at line 1583 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::CanInsertClip (\fBWaveClip\fP * clip)"

.PP
Definition at line 2372 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::CanOffsetClip (\fBWaveClip\fP * clip, double amount, double * allowedAmount = \fC\fBNULL\fP\fP)"

.PP
Definition at line 2324 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Clear (double t0, double t1)\fC [override]\fP"

.PP
Definition at line 721 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::ClearAndAddCutLine (double t0, double t1)"

.PP
Definition at line 726 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::ClearAndPaste (double t0, double t1, \fBconst\fP \fBTrack\fP * src, \fBbool\fP preserve = \fC\fBtrue\fP\fP, \fBbool\fP merge = \fC\fBtrue\fP\fP, \fBTimeWarper\fP * effectWarper = \fC\fBNULL\fP\fP)"

.PP
Definition at line 808 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::CloseLock ()"

.PP
Definition at line 1848 of file WaveTrack\&.cpp\&.
.SS "\fBWaveTrack::WaveTrackDisplay\fP WaveTrack::ConvertLegacyDisplayValue (\fBint\fP oldValue)\fC [static]\fP"

.PP
Definition at line 230 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::ConvertToSampleFormat (\fBsampleFormat\fP format)"

.PP
Definition at line 500 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Copy (double t0, double t1, \fBTrack\fP ** dest) const\fC [override]\fP"

.PP
Definition at line 626 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::CopyNonconst (double t0, double t1, \fBTrack\fP ** dest)"

.PP
Definition at line 716 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::CreateClip ()"

.PP
Definition at line 2243 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Cut (double t0, double t1, \fBTrack\fP ** dest)\fC [override]\fP"

.PP
Definition at line 532 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::DeleteWaveCaches ()"

.PP
Deletes all clips' wavecaches\&. Careful, This may not be threadsafe\&. 
.PP
Definition at line 2628 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Disjoin (double t0, double t1)"

.PP
Definition at line 1425 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::ExpandCutLine (double cutLinePosition, double * cutlineStart = \fC\fBNULL\fP\fP, double * cutlineEnd = \fC\fBNULL\fP\fP)"

.PP
Definition at line 2501 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::FillSortedClipArray (WaveClipArray & clips) const"

.PP
Definition at line 2616 of file WaveTrack\&.cpp\&.
.SS "\fBWaveTrack::WaveTrackDisplay\fP WaveTrack::FindDefaultViewMode ()\fC [static]\fP"

.PP
Definition at line 203 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Flush ()"

.PP
Flush must be called after last Append\&. 
.PP
Definition at line 1665 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Get (\fBsamplePtr\fP buffer, \fBsampleFormat\fP format, \fBsampleCount\fP start, \fBsampleCount\fP len, \fBfillFormat\fP fill = \fC\fBfillZero\fP\fP) const"
MM: Now that each wave track can contain multiple clips, we don't have a continous space of samples anymore, but we simulate it, because there are alot of places (e\&.g\&. effects) using this interface\&. This interface makes much sense for modifying samples, but note that it is not time-accurate, because the 'offset' is a double value and therefore can lie inbetween samples\&. But as long as you use the same value for 'start' in both calls to 'Set' and 'Get' it is guaranteed that the same samples are affected\&. 
.PP
Definition at line 2004 of file WaveTrack\&.cpp\&.
.SS "\fBEnvelope\fP * WaveTrack::GetActiveEnvelope (\fBvoid\fP)"

.PP
Definition at line 2222 of file WaveTrack\&.cpp\&.
.SS "\fBint\fP WaveTrack::GetAutoSaveIdent ()"

.PP
Definition at line 2641 of file WaveTrack\&.cpp\&.
.SS "\fBsampleCount\fP WaveTrack::GetBestBlockSize (\fBsampleCount\fP t) const"

.PP
Definition at line 1617 of file WaveTrack\&.cpp\&.
.SS "\fBsampleCount\fP WaveTrack::GetBlockStart (\fBsampleCount\fP t) const"

.PP
Definition at line 1602 of file WaveTrack\&.cpp\&.
.SS "\fBconst\fP std::vector<\fBLocation\fP>& WaveTrack::GetCachedLocations () const\fC [inline]\fP"

.PP
Definition at line 380 of file WaveTrack\&.h\&.
.SS "float WaveTrack::GetChannelGain (\fBint\fP channel) const"

.PP
Definition at line 479 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::GetClipAtSample (\fBsampleCount\fP sample)"

.PP
Definition at line 2194 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::GetClipAtX (\fBint\fP xcoord)"

.PP
Definition at line 2181 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::GetClipByIndex (\fBint\fP index)"

.PP
Definition at line 2289 of file WaveTrack\&.cpp\&.
.SS "\fBint\fP WaveTrack::GetClipIndex (\fBWaveClip\fP * clip)"

.PP
Definition at line 2284 of file WaveTrack\&.cpp\&.
.SS "WaveClipList::compatibility_iterator WaveTrack::GetClipIterator ()\fC [inline]\fP"

.PP
Definition at line 313 of file WaveTrack\&.h\&.
.SS "\fBWaveTrackDisplay\fP WaveTrack::GetDisplay () const\fC [inline]\fP"

.PP
Definition at line 446 of file WaveTrack\&.h\&.
.SS "\fBvoid\fP WaveTrack::GetDisplayBounds (float * min, float * max) const"

.PP
Definition at line 296 of file WaveTrack\&.cpp\&.
.SS "double WaveTrack::GetEndTime () const\fC [virtual]\fP"

.PP
Get the time at which the last clip in the track ends, plus recorded stuff\&. 
.PP
\fBReturns:\fP
.RS 4
time in seconds, or zero if there are no clips in the track\&. 
.RE
.PP

.PP
Implements \fBTrack\fP\&.
.PP
Definition at line 1895 of file WaveTrack\&.cpp\&.
.SS "\fBEnvelope\fP * WaveTrack::GetEnvelopeAtX (\fBint\fP xcoord)"

.PP
Definition at line 2212 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::GetEnvelopeValues (double * buffer, \fBint\fP bufferLen, double t0, double tstep) const"

.PP
Definition at line 2115 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::GetErrorOpening ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBTrack\fP\&.
.PP
Definition at line 1831 of file WaveTrack\&.cpp\&.
.SS "float WaveTrack::GetGain () const"

.PP
Definition at line 375 of file WaveTrack\&.cpp\&.
.SS "\fBsampleCount\fP WaveTrack::GetIdealBlockSize ()"

.PP
Definition at line 1660 of file WaveTrack\&.cpp\&.
.SS "\fBSpectrogramSettings\fP & WaveTrack::GetIndependentSpectrogramSettings ()"

.PP
Definition at line 747 of file WaveTrack\&.cpp\&.
.SS "\fBWaveformSettings\fP & WaveTrack::GetIndependentWaveformSettings ()"

.PP
Definition at line 779 of file WaveTrack\&.cpp\&.
.SS "\fBint\fP WaveTrack::GetKind () const\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBTrack\fP\&.
.PP
Definition at line 112 of file WaveTrack\&.h\&.
.SS "\fBint\fP WaveTrack::GetLastdBRange () const\fC [inline]\fP"

.PP
Definition at line 443 of file WaveTrack\&.h\&.
.SS "\fBint\fP WaveTrack::GetLastScaleType () const\fC [inline]\fP"

.PP
Definition at line 440 of file WaveTrack\&.h\&.
.SS "\fBsampleCount\fP WaveTrack::GetMaxBlockSize () const"

.PP
Definition at line 1637 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::GetMinMax (float * min, float * max, double t0, double t1)"

.PP
Definition at line 1920 of file WaveTrack\&.cpp\&.
.SS "\fBint\fP WaveTrack::GetNumClips () const"

.PP
Definition at line 2297 of file WaveTrack\&.cpp\&.
.SS "unsigned \fBint\fP WaveTrack::GetODFlags ()"

.PP
gets an int with OD flags so that we can determine which ODTasks should be run on this track after save/open, etc\&. 
.PP
Definition at line 1590 of file WaveTrack\&.cpp\&.
.SS "double WaveTrack::GetOffset () const\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBTrack\fP\&.
.PP
Definition at line 184 of file WaveTrack\&.cpp\&.
.SS "float WaveTrack::GetPan () const"

.PP
Definition at line 385 of file WaveTrack\&.cpp\&.
.SS "double WaveTrack::GetRate () const"

.PP
Definition at line 363 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::GetRMS (float * rms, double t0, double t1)"

.PP
Definition at line 1966 of file WaveTrack\&.cpp\&.
.SS "\fBsampleFormat\fP WaveTrack::GetSampleFormat ()\fC [inline]\fP"

.PP
Definition at line 139 of file WaveTrack\&.h\&.
.SS "\fBSequence\fP * WaveTrack::GetSequenceAtX (\fBint\fP xcoord)"

.PP
Definition at line 2234 of file WaveTrack\&.cpp\&.
.SS "\fBconst\fP \fBSpectrogramSettings\fP & WaveTrack::GetSpectrogramSettings () const"

.PP
Definition at line 731 of file WaveTrack\&.cpp\&.
.SS "\fBSpectrogramSettings\fP & WaveTrack::GetSpectrogramSettings ()"

.PP
Definition at line 739 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::GetSpectrumBounds (float * min, float * max) const"

.PP
Definition at line 308 of file WaveTrack\&.cpp\&.
.SS "double WaveTrack::GetStartTime () const\fC [virtual]\fP"

.PP
Get the time at which the first clip in the track starts\&. 
.PP
\fBReturns:\fP
.RS 4
time in seconds, or zero if there are no clips in the track 
.RE
.PP

.PP
Implements \fBTrack\fP\&.
.PP
Definition at line 1875 of file WaveTrack\&.cpp\&.
.SS "\fBconst\fP \fBWaveformSettings\fP & WaveTrack::GetWaveformSettings () const"

.PP
Definition at line 763 of file WaveTrack\&.cpp\&.
.SS "\fBWaveformSettings\fP & WaveTrack::GetWaveformSettings ()"

.PP
Definition at line 771 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::HandleClear (double t0, double t1, \fBbool\fP addCutLines, \fBbool\fP split)"

.PP
Definition at line 1005 of file WaveTrack\&.cpp\&.
.SS "\fBXMLTagHandler\fP * WaveTrack::HandleXMLChild (\fBconst\fP wxChar * tag)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBXMLTagHandler\fP\&.
.PP
Definition at line 1759 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::HandleXMLEndTag (\fBconst\fP wxChar * tag)\fC [override]\fP"

.PP
Definition at line 1752 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::HandleXMLTag (\fBconst\fP wxChar * tag, \fBconst\fP wxChar ** attrs)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBXMLTagHandler\fP\&.
.PP
Definition at line 1671 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::InsertSilence (double t, double len)\fC [override]\fP"

.PP
Definition at line 1395 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::IsEmpty (double t0, double t1)"

.PP
Returns true if there are no WaveClips in the specified region\&. 
.PP
\fBReturns:\fP
.RS 4
true if no clips in the track overlap the specified time range, false otherwise\&. 
.RE
.PP

.PP
Definition at line 509 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Join (double t0, double t1)"

.PP
Definition at line 1507 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Lock ()"

.PP
Definition at line 1840 of file WaveTrack\&.cpp\&.
.SS "double WaveTrack::LongSamplesToTime (\fBsampleCount\fP pos) const"

.PP
Convert correctly between an number of samples and an (absolute) time in seconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP The time number of samples from the start of the track to convert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The time in seconds\&. 
.RE
.PP

.PP
Definition at line 1870 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::Merge (\fBconst\fP \fBTrack\fP & orig)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBTrack\fP\&.
.PP
Definition at line 153 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::MergeClips (\fBint\fP clipidx1, \fBint\fP clipidx2)"

.PP
Definition at line 2573 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::MoveClipToTrack (\fBWaveClip\fP * clip, \fBWaveTrack\fP * dest)"

.PP
Definition at line 2311 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::NewestOrNewClip ()"

.PP
Get access to the most recently added clip, or create a clip, if there is not already one\&. THIS IS NOT NECESSARILY RIGHTMOST\&. 
.PP
\fBReturns:\fP
.RS 4
a pointer to the most recently added \fBWaveClip\fP 
.RE
.PP

.PP
Definition at line 2250 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Paste (double t0, \fBconst\fP \fBTrack\fP * src)\fC [override]\fP"

.PP
Definition at line 1189 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::RemoveAndReturnClip (\fBWaveClip\fP * clip)"

.PP
Definition at line 990 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::RemoveCutLine (double cutLinePosition)"

.PP
Definition at line 2564 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Resample (\fBint\fP rate, \fBProgressDialog\fP * progress = \fC\fBNULL\fP\fP)"

.PP
Definition at line 2592 of file WaveTrack\&.cpp\&.
.SS "\fBWaveClip\fP * WaveTrack::RightmostOrNewClip ()"

.PP
Get access to the last (rightmost) clip, or create a clip, if there is not already one\&. 
.PP
\fBReturns:\fP
.RS 4
a pointer to a \fBWaveClip\fP at the end of the track 
.RE
.PP

.PP
Definition at line 2261 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Set (\fBsamplePtr\fP buffer, \fBsampleFormat\fP format, \fBsampleCount\fP start, \fBsampleCount\fP len)"

.PP
Definition at line 2075 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetAutoSaveIdent (\fBint\fP id)"

.PP
Definition at line 2646 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetDisplay (\fBWaveTrackDisplay\fP display)\fC [inline]\fP"

.PP
Definition at line 447 of file WaveTrack\&.h\&.
.SS "\fBvoid\fP WaveTrack::SetDisplayBounds (float min, float max) const"

.PP
Definition at line 302 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetGain (float newGain)"

.PP
Definition at line 380 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetLastdBRange () const"

.PP
Definition at line 291 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetLastScaleType () const"

.PP
Definition at line 286 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetOffset (double o)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBTrack\fP\&.
.PP
Definition at line 189 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetPan (float newPan)"

.PP
Definition at line 421 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetRate (double newRate)"

.PP
Definition at line 368 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetSpectrogramSettings (\fBSpectrogramSettings\fP * pSettings)"

.PP
Definition at line 755 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetSpectrumBounds (float min, float max) const"

.PP
Definition at line 352 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::SetWaveformSettings (\fBWaveformSettings\fP * pSettings)"

.PP
Definition at line 786 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Silence (double t0, double t1)\fC [override]\fP"

.PP
Definition at line 1352 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Split (double t0, double t1)"

.PP
Definition at line 2384 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::SplitAt (double t)"

.PP
Definition at line 2392 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::SplitCut (double t0, double t1, \fBTrack\fP ** dest)"

.PP
Definition at line 543 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::SplitDelete (double t0, double t1)"

.PP
Definition at line 983 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::SyncLockAdjust (double oldT1, double newT1)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBTrack\fP\&.
.PP
Definition at line 1131 of file WaveTrack\&.cpp\&.
.SS "AUDACITY_DLL_API \fBsampleCount\fP WaveTrack::TimeToLongSamples (double t0) const"

.PP
Convert correctly between an (absolute) time in seconds and a number of samples\&. This method will not give the correct results if used on a relative time (difference of two times)\&. Each absolute time must be converted and the numbers of samples differenced: sampleCount start = track->TimeToLongSamples(t0); sampleCount end = track->TimeToLongSamples(t1); sampleCount len = (sampleCount)(end - start); NOT the likes of: sampleCount len = track->TimeToLongSamples(t1 - t0); See also \fBWaveTrack::TimeToLongSamples()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIt0\fP The time (floating point seconds) to convert 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of samples from the start of the track which lie before the given time\&. 
.RE
.PP

.PP
Definition at line 1865 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Trim (double t0, double t1)"

.PP
Definition at line 571 of file WaveTrack\&.cpp\&.
.SS "\fBbool\fP WaveTrack::Unlock ()"

.PP
Definition at line 1857 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::UpdateLocationsCache () const"

.PP
Definition at line 2431 of file WaveTrack\&.cpp\&.
.SS "\fBWaveTrack::WaveTrackDisplay\fP WaveTrack::ValidateWaveTrackDisplay (\fBWaveTrackDisplay\fP display)\fC [static]\fP"

.PP
Definition at line 264 of file WaveTrack\&.cpp\&.
.SS "\fBvoid\fP WaveTrack::WriteXML (\fBXMLWriter\fP & xmlFile)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBTrack\fP\&.
.PP
Definition at line 1795 of file WaveTrack\&.cpp\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBTrackFactory\fP\fC [friend]\fP"

.PP
Definition at line 82 of file WaveTrack\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "WaveClipList WaveTrack::mClips\fC [protected]\fP"

.PP
Definition at line 460 of file WaveTrack\&.h\&.
.SS "\fBWaveTrackDisplay\fP WaveTrack::mDisplay\fC [protected]\fP"

.PP
Definition at line 477 of file WaveTrack\&.h\&.
.SS "std::vector<\fBLocation\fP> WaveTrack::mDisplayLocationsCache\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 480 of file WaveTrack\&.h\&.
.SS "float WaveTrack::mDisplayMax\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 473 of file WaveTrack\&.h\&.
.SS "float WaveTrack::mDisplayMin\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 472 of file WaveTrack\&.h\&.
.SS "\fBsampleFormat\fP WaveTrack::mFormat\fC [protected]\fP"

.PP
Definition at line 462 of file WaveTrack\&.h\&.
.SS "float WaveTrack::mGain\fC [protected]\fP"

.PP
Definition at line 464 of file WaveTrack\&.h\&.
.SS "\fBint\fP WaveTrack::mLastdBRange\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 479 of file WaveTrack\&.h\&.
.SS "\fBint\fP WaveTrack::mLastScaleType\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 478 of file WaveTrack\&.h\&.
.SS "float WaveTrack::mPan\fC [protected]\fP"

.PP
Definition at line 465 of file WaveTrack\&.h\&.
.SS "\fBint\fP WaveTrack::mRate\fC [protected]\fP"

.PP
Definition at line 463 of file WaveTrack\&.h\&.
.SS "float WaveTrack::mSpectrumMax\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 475 of file WaveTrack\&.h\&.
.SS "float WaveTrack::mSpectrumMin\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 474 of file WaveTrack\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
