.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope_ui.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope_ui.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <cairo\&.h>\fP
.br
\fC#include <gtk/gtk\&.h>\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/extensions/ui/ui\&.h'\fP
.br
\fC#include '\&./uris\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBScoChan\fP"
.br
.ti -1c
.RI "struct \fBEgScopeUI\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDAWIDTH\fP   (640)"
.br
.ti -1c
.RI "#define \fBDAHEIGHT\fP   (200)"
.br
.ti -1c
.RI "#define \fBMAX_CAIRO_PATH\fP   (128)"
.br
.ti -1c
.RI "#define \fBCYPOS\fP(VAL)   (chn_y_offset \- (VAL) * chn_y_scale)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLV2_SYMBOL_EXPORT\fP \fBconst\fP \fBLV2UI_Descriptor\fP * \fBlv2ui_descriptor\fP (\fBuint32_t\fP index)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CYPOS(VAL)   (chn_y_offset \- (VAL) * chn_y_scale)"

.SS "#define DAHEIGHT   (200)"

.PP
Definition at line 28 of file examploscope_ui\&.c\&.
.SS "#define DAWIDTH   (640)"

.PP
Definition at line 27 of file examploscope_ui\&.c\&.
.SS "#define MAX_CAIRO_PATH   (128)"
Max continuous points on path\&. Many short-path segments are expensive|inefficient long paths are not supported by all surfaces (usually its a miter - not point - limit, depending on used cairo backend) 
.PP
Definition at line 35 of file examploscope_ui\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBLV2_SYMBOL_EXPORT\fP \fBconst\fP \fBLV2UI_Descriptor\fP* lv2ui_descriptor (\fBuint32_t\fP index)"
Prototype for UI accessor function\&.
.PP
This is the entry point to a UI library, which works in the same way as \fBlv2_descriptor()\fP but for UIs rather than plugins\&. 
.PP
Definition at line 647 of file examploscope_ui\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
