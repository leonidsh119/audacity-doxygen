.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_front.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_front.c \- Implements PortAudio API functions defined in \fBportaudio\&.h\fP, checks some errors, delegates platform-specific behavior to host API implementations\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <memory\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include 'portaudio\&.h'\fP
.br
\fC#include 'pa_util\&.h'\fP
.br
\fC#include 'pa_endianness\&.h'\fP
.br
\fC#include 'pa_types\&.h'\fP
.br
\fC#include 'pa_hostapi\&.h'\fP
.br
\fC#include 'pa_stream\&.h'\fP
.br
\fC#include 'pa_trace\&.h'\fP
.br
\fC#include 'pa_debugprint\&.h'\fP
.br
\fC#include 'pa_svnrevision\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBpaVersionMajor\fP   19"
.br
.ti -1c
.RI "#define \fBpaVersionMinor\fP   5"
.br
.ti -1c
.RI "#define \fBpaVersionSubMinor\fP   0"
.br
.ti -1c
.RI "#define \fBpaVersion\fP   \fBpaMakeVersionNumber\fP(\fBpaVersionMajor\fP, \fBpaVersionMinor\fP, \fBpaVersionSubMinor\fP)"
.br
.ti -1c
.RI "#define \fBSTRINGIFY\fP(x)   #x"
.br
.ti -1c
.RI "#define \fBTOSTRING\fP(x)   \fBSTRINGIFY\fP(x)"
.br
.ti -1c
.RI "#define \fBPA_VERSION_STRING_\fP   \fBTOSTRING\fP(\fBpaVersionMajor\fP) '\&.' \fBTOSTRING\fP(\fBpaVersionMinor\fP) '\&.' \fBTOSTRING\fP(\fBpaVersionSubMinor\fP)"
.br
.ti -1c
.RI "#define \fBPA_VERSION_TEXT_\fP   'PortAudio \fBV\fP' PA_VERSION_STRING_ '\-devel, revision ' TOSTRING(\fBPA_SVN_REVISION\fP)"
.br
.ti -1c
.RI "#define \fBPA_LAST_HOST_ERROR_TEXT_LENGTH_\fP   1024"
.br
.ti -1c
.RI "#define \fBPA_IS_INITIALISED_\fP   (initializationCount_ != 0)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBint\fP \fBPa_GetVersion\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBPa_GetVersionText\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaVersionInfo\fP * \fBPa_GetVersionInfo\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBPaUtil_SetLastHostErrorInfo\fP (\fBPaHostApiTypeId\fP hostApiType, long \fBerrorCode\fP, \fBconst\fP char *errorText)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_Initialize\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_Terminate\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaHostErrorInfo\fP * \fBPa_GetLastHostErrorInfo\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBPa_GetErrorText\fP (\fBPaError\fP \fBerrorCode\fP)"
.br
.ti -1c
.RI "\fBPaHostApiIndex\fP \fBPa_HostApiTypeIdToHostApiIndex\fP (\fBPaHostApiTypeId\fP type)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPaUtil_GetHostApiRepresentation\fP (struct \fBPaUtilHostApiRepresentation\fP **hostApi, \fBPaHostApiTypeId\fP type)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPaUtil_DeviceIndexToHostApiDeviceIndex\fP (\fBPaDeviceIndex\fP *hostApiDevice, \fBPaDeviceIndex\fP device, struct \fBPaUtilHostApiRepresentation\fP *hostApi)"
.br
.ti -1c
.RI "\fBPaHostApiIndex\fP \fBPa_GetHostApiCount\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaHostApiIndex\fP \fBPa_GetDefaultHostApi\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaHostApiInfo\fP * \fBPa_GetHostApiInfo\fP (\fBPaHostApiIndex\fP hostApi)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_HostApiDeviceIndexToDeviceIndex\fP (\fBPaHostApiIndex\fP hostApi, \fBint\fP hostApiDeviceIndex)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_GetDeviceCount\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_GetDefaultInputDevice\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_GetDefaultOutputDevice\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaDeviceInfo\fP * \fBPa_GetDeviceInfo\fP (\fBPaDeviceIndex\fP device)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_IsFormatSupported\fP (\fBconst\fP \fBPaStreamParameters\fP *inputParameters, \fBconst\fP \fBPaStreamParameters\fP *outputParameters, double sampleRate)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_OpenStream\fP (\fBPaStream\fP **stream, \fBconst\fP \fBPaStreamParameters\fP *inputParameters, \fBconst\fP \fBPaStreamParameters\fP *outputParameters, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamFlags\fP streamFlags, \fBPaStreamCallback\fP *streamCallback, \fBvoid\fP *\fBuserData\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_OpenDefaultStream\fP (\fBPaStream\fP **stream, \fBint\fP inputChannelCount, \fBint\fP outputChannelCount, \fBPaSampleFormat\fP \fBsampleFormat\fP, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamCallback\fP *streamCallback, \fBvoid\fP *\fBuserData\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPaUtil_ValidateStreamPointer\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_CloseStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_SetStreamFinishedCallback\fP (\fBPaStream\fP *stream, \fBPaStreamFinishedCallback\fP *streamFinishedCallback)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_StartStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_StopStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_AbortStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_IsStreamStopped\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_IsStreamActive\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaStreamInfo\fP * \fBPa_GetStreamInfo\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaTime\fP \fBPa_GetStreamTime\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "double \fBPa_GetStreamCpuLoad\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_ReadStream\fP (\fBPaStream\fP *stream, \fBvoid\fP *\fBbuffer\fP, unsigned long frames)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_WriteStream\fP (\fBPaStream\fP *stream, \fBconst\fP \fBvoid\fP *\fBbuffer\fP, unsigned long frames)"
.br
.ti -1c
.RI "signed long \fBPa_GetStreamReadAvailable\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "signed long \fBPa_GetStreamWriteAvailable\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaHostApiTypeId\fP \fBPa_GetStreamHostApiType\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_GetSampleSize\fP (\fBPaSampleFormat\fP \fBformat\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBPaUtilStreamRepresentation\fP * \fBfirstOpenStream_\fP = \fBNULL\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Implements PortAudio API functions defined in \fBportaudio\&.h\fP, checks some errors, delegates platform-specific behavior to host API implementations\&. 

Implements the functions defined in the PortAudio API (\fBportaudio\&.h\fP), validates some parameters and checks for state inconsistencies before forwarding API requests to specific Host API implementations (via the interface declared in \fBpa_hostapi\&.h\fP), and Streams (via the interface declared in \fBpa_stream\&.h\fP)\&.
.PP
This file manages initialization and termination of Host API implementations via initializer functions stored in the paHostApiInitializers global array (usually defined in an os-specific pa_[os]_hostapis\&.c file)\&.
.PP
This file maintains a list of all open streams and closes them at \fBPa_Terminate()\fP\&.
.PP
Some utility functions declared in \fBpa_util\&.h\fP are implemented in this file\&.
.PP
All PortAudio API functions can be conditionally compiled with logging code\&. To compile with logging, define the PA_LOG_API_CALLS precompiler symbol\&. 
.PP
Definition in file \fBpa_front\&.c\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define PA_IS_INITIALISED_   (initializationCount_ != 0)"

.PP
Definition at line 165 of file pa_front\&.c\&.
.SS "#define PA_LAST_HOST_ERROR_TEXT_LENGTH_   1024"

.PP
Definition at line 138 of file pa_front\&.c\&.
.SS "#define PA_VERSION_STRING_   \fBTOSTRING\fP(\fBpaVersionMajor\fP) '\&.' \fBTOSTRING\fP(\fBpaVersionMinor\fP) '\&.' \fBTOSTRING\fP(\fBpaVersionSubMinor\fP)"

.PP
Definition at line 112 of file pa_front\&.c\&.
.SS "#define PA_VERSION_TEXT_   'PortAudio \fBV\fP' PA_VERSION_STRING_ '\-devel, revision ' TOSTRING(\fBPA_SVN_REVISION\fP)"

.PP
Definition at line 113 of file pa_front\&.c\&.
.SS "#define paVersion   \fBpaMakeVersionNumber\fP(\fBpaVersionMajor\fP, \fBpaVersionMinor\fP, \fBpaVersionSubMinor\fP)"
This is a combination of paVersionMajor, paVersionMinor and paVersionSubMinor\&. It will always increase so that version numbers can be compared as integers to see which is later\&. 
.PP
Definition at line 107 of file pa_front\&.c\&.
.SS "#define paVersionMajor   19"
This is incremented if we make incompatible API changes\&. This version scheme is based loosely on http://semver.org/ 
.PP
Definition at line 88 of file pa_front\&.c\&.
.SS "#define paVersionMinor   5"
This is incremented when we add functionality in a backwards-compatible manner\&. Or it is set to zero when paVersionMajor is incremented\&. 
.PP
Definition at line 94 of file pa_front\&.c\&.
.SS "#define paVersionSubMinor   0"
This is incremented when we make backwards-compatible bug fixes\&. Or it is set to zero when paVersionMinor changes\&. 
.PP
Definition at line 100 of file pa_front\&.c\&.
.SS "#define STRINGIFY(x)   #x"

.PP
Definition at line 109 of file pa_front\&.c\&.
.SS "#define TOSTRING(x)   \fBSTRINGIFY\fP(x)"

.PP
Definition at line 110 of file pa_front\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBPaError\fP Pa_AbortStream (\fBPaStream\fP * stream)"
Terminates audio processing immediately without waiting for pending buffers to complete\&. 
.PP
Definition at line 1483 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_CloseStream (\fBPaStream\fP * stream)"
Closes an audio stream\&. If the audio stream is active it discards any pending buffers as if \fBPa_AbortStream()\fP had been called\&. 
.PP
\fBTodo\fP
.RS 4
REVIEW: shouldn't we close anyway? see: http://www.portaudio.com/trac/ticket/115 
.RE
.PP

.PP
Definition at line 1368 of file pa_front\&.c\&.
.SS "\fBPaHostApiIndex\fP Pa_GetDefaultHostApi (\fBvoid\fP)"
Retrieve the index of the default host API\&. The default host API will be the lowest common denominator host API on the current platform and is unlikely to provide the best performance\&.
.PP
\fBReturns:\fP
.RS 4
A non-negative value ranging from 0 to (\fBPa_GetHostApiCount()\fP-1) indicating the default host API index or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 572 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_GetDefaultInputDevice (\fBvoid\fP)"
Retrieve the index of the default input device\&. The result can be used in the inputDevice parameter to \fBPa_OpenStream()\fP\&.
.PP
\fBReturns:\fP
.RS 4
The default input device index for the default host API, or paNoDevice if no default input device is available or an error was encountered\&. 
.RE
.PP

.PP
Definition at line 701 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_GetDefaultOutputDevice (\fBvoid\fP)"
Retrieve the index of the default output device\&. The result can be used in the outputDevice parameter to \fBPa_OpenStream()\fP\&.
.PP
\fBReturns:\fP
.RS 4
The default output device index for the default host API, or paNoDevice if no default output device is available or an error was encountered\&.
.RE
.PP
\fBNote:\fP
.RS 4
On the PC, the user can specify a default device by setting an environment variable\&. For example, to use device #1\&. 
.PP
.nf

 set PA_RECOMMENDED_OUTPUT_DEVICE=1
.fi
.PP
 The user should first determine the available device ids by using the supplied application 'pa_devs'\&. 
.RE
.PP

.PP
Definition at line 724 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_GetDeviceCount (\fBvoid\fP)"
Retrieve the number of available devices\&. The number of available devices may be zero\&.
.PP
\fBReturns:\fP
.RS 4
A non-negative value indicating the number of available devices or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 680 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaDeviceInfo\fP* Pa_GetDeviceInfo (\fBPaDeviceIndex\fP device)"
Retrieve a pointer to a \fBPaDeviceInfo\fP structure containing information about the specified device\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable \fBPaDeviceInfo\fP structure\&. If the device parameter is out of range the function returns NULL\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP A valid device index in the range 0 to (\fBPa_GetDeviceCount()\fP-1)
.RE
.PP
\fBNote:\fP
.RS 4
PortAudio manages the memory referenced by the returned pointer, the client must not manipulate or free the memory\&. The pointer is only guaranteed to be valid between calls to \fBPa_Initialize()\fP and \fBPa_Terminate()\fP\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaDeviceInfo\fP, \fBPaDeviceIndex\fP 
.RE
.PP

.PP
Definition at line 747 of file pa_front\&.c\&.
.SS "\fBconst\fP char* Pa_GetErrorText (\fBPaError\fP errorCode)"
Translate the supplied PortAudio error code into a human readable message\&. 
.PP
\fBTodo\fP
.RS 4
could catenate the last host error text to result in the case of paUnanticipatedHostError\&. see: http://www.portaudio.com/trac/ticket/114 
.RE
.PP

.PP
Definition at line 420 of file pa_front\&.c\&.
.SS "\fBPaHostApiIndex\fP Pa_GetHostApiCount (\fBvoid\fP)"
Retrieve the number of available host APIs\&. Even if a host API is available it may have no devices available\&.
.PP
\fBReturns:\fP
.RS 4
A non-negative value indicating the number of available host APIs or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiIndex\fP 
.RE
.PP

.PP
Definition at line 551 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaHostApiInfo\fP* Pa_GetHostApiInfo (\fBPaHostApiIndex\fP hostApi)"
Retrieve a pointer to a structure containing information about a specific host Api\&.
.PP
\fBParameters:\fP
.RS 4
\fIhostApi\fP A valid host API index ranging from 0 to (\fBPa_GetHostApiCount()\fP-1)
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable \fBPaHostApiInfo\fP structure describing a specific host API\&. If the hostApi parameter is out of range or an error is encountered, the function returns NULL\&.
.RE
.PP
The returned structure is owned by the PortAudio implementation and must not be manipulated or freed\&. The pointer is only guaranteed to be valid between calls to \fBPa_Initialize()\fP and \fBPa_Terminate()\fP\&. 
.PP
Definition at line 601 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaHostErrorInfo\fP* Pa_GetLastHostErrorInfo (\fBvoid\fP)"
Return information about the last host error encountered\&. The error information returned by \fBPa_GetLastHostErrorInfo()\fP will never be modified asynchronously by errors occurring in other PortAudio owned threads (such as the thread that manages the stream callback\&.)
.PP
This function is provided as a last resort, primarily to enhance debugging by providing clients with access to all available error information\&.
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable structure constraining information about the host error\&. The values in this structure will only be valid if a PortAudio function has previously returned the paUnanticipatedHostError error code\&. 
.RE
.PP

.PP
Definition at line 414 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_GetSampleSize (\fBPaSampleFormat\fP format)"
Retrieve the size of a given sample format in bytes\&.
.PP
\fBReturns:\fP
.RS 4
The size in bytes of a single sample in the specified format, or paSampleFormatNotSupported if the format is not supported\&. 
.RE
.PP

.PP
Definition at line 1800 of file pa_front\&.c\&.
.SS "double Pa_GetStreamCpuLoad (\fBPaStream\fP * stream)"
Retrieve CPU usage information for the specified stream\&. The 'CPU Load' is a fraction of total CPU time consumed by a callback stream's audio processing routines including, but not limited to the client supplied stream callback\&. This function does not work with blocking read/write streams\&.
.PP
This function may be called from the stream callback function or the application\&.
.PP
\fBReturns:\fP
.RS 4
A floating point value, typically between 0\&.0 and 1\&.0, where 1\&.0 indicates that the stream callback is consuming the maximum number of CPU cycles possible to maintain real-time operation\&. A value of 0\&.5 would imply that PortAudio and the stream callback was consuming roughly 50% of the available CPU time\&. The return value may exceed 1\&.0\&. A value of 0\&.0 will always be returned for a blocking read/write stream, or if an error occurs\&. 
.RE
.PP

.PP
Definition at line 1607 of file pa_front\&.c\&.
.SS "\fBPaHostApiTypeId\fP Pa_GetStreamHostApiType (\fBPaStream\fP * stream)"
Retrieve the host type handling an open stream\&.
.PP
\fBReturns:\fP
.RS 4
Returns a non-negative value representing the host API type handling an open stream or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 1773 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaStreamInfo\fP* Pa_GetStreamInfo (\fBPaStream\fP * stream)"
Retrieve a pointer to a \fBPaStreamInfo\fP structure containing information about the specified stream\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable \fBPaStreamInfo\fP structure\&. If the stream parameter is invalid, or an error is encountered, the function returns NULL\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP A pointer to an open stream previously created with Pa_OpenStream\&.
.RE
.PP
\fBNote:\fP
.RS 4
PortAudio manages the memory referenced by the returned pointer, the client must not manipulate or free the memory\&. The pointer is only guaranteed to be valid until the specified stream is closed\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamInfo\fP 
.RE
.PP

.PP
Definition at line 1542 of file pa_front\&.c\&.
.SS "signed long Pa_GetStreamReadAvailable (\fBPaStream\fP * stream)"
Retrieve the number of frames that can be read from the stream without waiting\&.
.PP
\fBReturns:\fP
.RS 4
Returns a non-negative value representing the maximum number of frames that can be read from the stream without blocking or busy waiting or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 1716 of file pa_front\&.c\&.
.SS "\fBPaTime\fP Pa_GetStreamTime (\fBPaStream\fP * stream)"
Returns the current time in seconds for a stream according to the same clock used to generate callback \fBPaStreamCallbackTimeInfo\fP timestamps\&. The time values are monotonically increasing and have unspecified origin\&.
.PP
Pa_GetStreamTime returns valid time values for the entire life of the stream, from when the stream is opened until it is closed\&. Starting and stopping the stream does not affect the passage of time returned by Pa_GetStreamTime\&.
.PP
This time may be used for synchronizing other events to the audio stream, for example synchronizing audio to MIDI\&.
.PP
\fBReturns:\fP
.RS 4
The stream's current time in seconds, or 0 if an error occurred\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaTime\fP, \fBPaStreamCallback\fP, \fBPaStreamCallbackTimeInfo\fP 
.RE
.PP

.PP
Definition at line 1578 of file pa_front\&.c\&.
.SS "signed long Pa_GetStreamWriteAvailable (\fBPaStream\fP * stream)"
Retrieve the number of frames that can be written to the stream without waiting\&.
.PP
\fBReturns:\fP
.RS 4
Returns a non-negative value representing the maximum number of frames that can be written to the stream without blocking or busy waiting or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 1745 of file pa_front\&.c\&.
.SS "\fBint\fP Pa_GetVersion (\fBvoid\fP)"
Retrieve the release number of the currently running PortAudio build\&. For example, for version '19\&.5\&.1' this will return 0x00130501\&. 
.PP
Definition at line 115 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaVersionInfo\fP* Pa_GetVersionInfo ()"
The structure that this points to is statically allocated\&. Do not attempt to free it or modify it\&. 
.PP
Definition at line 133 of file pa_front\&.c\&.
.SS "\fBconst\fP char* Pa_GetVersionText (\fBvoid\fP)"
Retrieve a textual description of the current PortAudio build, eg 'PortAudio V19\&.5\&.0-devel, revision 1952M'\&. The format of the text may change so do not try to parse the returned string\&. 
.PP
\fBDeprecated\fP
.RS 4
use \fBPaVersionInfo()\fP instead 
.RE
.PP

.PP
Definition at line 120 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_HostApiDeviceIndexToDeviceIndex (\fBPaHostApiIndex\fP hostApi, \fBint\fP hostApiDeviceIndex)"
Convert a host-API-specific device index to standard PortAudio device index\&. This function may be used in conjunction with the deviceCount field of \fBPaHostApiInfo\fP to enumerate all devices for the specified host API\&.
.PP
\fBParameters:\fP
.RS 4
\fIhostApi\fP A valid host API index ranging from 0 to (\fBPa_GetHostApiCount()\fP-1)
.br
\fIhostApiDeviceIndex\fP A valid per-host device index in the range 0 to (Pa_GetHostApiInfo(hostApi)->deviceCount-1)
.RE
.PP
\fBReturns:\fP
.RS 4
A non-negative PaDeviceIndex ranging from 0 to (\fBPa_GetDeviceCount()\fP-1) or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
A paInvalidHostApi error code indicates that the host API index specified by the hostApi parameter is out of range\&.
.PP
A paInvalidDevice error code indicates that the hostApiDeviceIndex parameter is out of range\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiInfo\fP 
.RE
.PP

.PP
Definition at line 642 of file pa_front\&.c\&.
.SS "\fBPaHostApiIndex\fP Pa_HostApiTypeIdToHostApiIndex (\fBPaHostApiTypeId\fP type)"
Convert a static host API unique identifier, into a runtime host API index\&.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP A unique host API identifier belonging to the PaHostApiTypeId enumeration\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A valid PaHostApiIndex ranging from 0 to (\fBPa_GetHostApiCount()\fP-1) or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
The paHostApiNotFound error code indicates that the host API specified by the type parameter is not available\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiTypeId\fP 
.RE
.PP

.PP
Definition at line 468 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_Initialize (\fBvoid\fP)"
Library initialization function - call this before using PortAudio\&. This function initializes internal data structures and prepares underlying host APIs for use\&. With the exception of \fBPa_GetVersion()\fP, \fBPa_GetVersionText()\fP, and \fBPa_GetErrorText()\fP, this function MUST be called before using any other PortAudio API functions\&.
.PP
If \fBPa_Initialize()\fP is called multiple times, each successful call must be matched with a corresponding call to \fBPa_Terminate()\fP\&. Pairs of calls to \fBPa_Initialize()\fP/Pa_Terminate() may overlap, and are not required to be fully nested\&.
.PP
Note that if \fBPa_Initialize()\fP returns an error code, \fBPa_Terminate()\fP should NOT be called\&.
.PP
\fBReturns:\fP
.RS 4
paNoError if successful, otherwise an error code indicating the cause of failure\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_Terminate\fP 
.RE
.PP

.PP
Definition at line 355 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_IsFormatSupported (\fBconst\fP \fBPaStreamParameters\fP * inputParameters, \fBconst\fP \fBPaStreamParameters\fP * outputParameters, double sampleRate)"
Determine whether it would be possible to open a stream with the specified parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIinputParameters\fP A structure that describes the input parameters used to open a stream\&. The suggestedLatency field is ignored\&. See \fBPaStreamParameters\fP for a description of these parameters\&. inputParameters must be NULL for output-only streams\&.
.br
\fIoutputParameters\fP A structure that describes the output parameters used to open a stream\&. The suggestedLatency field is ignored\&. See \fBPaStreamParameters\fP for a description of these parameters\&. outputParameters must be NULL for input-only streams\&.
.br
\fIsampleRate\fP The required sampleRate\&. For full-duplex streams it is the sample rate for both input and output
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 if the format is supported, and an error code indicating why the format is not supported otherwise\&. The constant paFormatIsSupported is provided to compare with the return value for success\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpaFormatIsSupported\fP, \fBPaStreamParameters\fP 
.RE
.PP

.PP
Definition at line 1032 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_IsStreamActive (\fBPaStream\fP * stream)"
Determine whether the stream is active\&. A stream is active after a successful call to \fBPa_StartStream()\fP, until it becomes inactive either as a result of a call to \fBPa_StopStream()\fP or \fBPa_AbortStream()\fP, or as a result of a return value other than paContinue from the stream callback\&. In the latter case, the stream is considered inactive after the last buffer has finished playing\&.
.PP
\fBReturns:\fP
.RS 4
Returns one (1) when the stream is active (ie playing or recording audio), zero (0) when not playing or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_StopStream\fP, \fBPa_AbortStream\fP, \fBPa_IsStreamStopped\fP 
.RE
.PP

.PP
Definition at line 1525 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_IsStreamStopped (\fBPaStream\fP * stream)"
Determine whether the stream is stopped\&. A stream is considered to be stopped prior to a successful call to Pa_StartStream and after a successful call to Pa_StopStream or Pa_AbortStream\&. If a stream callback returns a value other than paContinue the stream is NOT considered to be stopped\&.
.PP
\fBReturns:\fP
.RS 4
Returns one (1) when the stream is stopped, zero (0) when the stream is running or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_StopStream\fP, \fBPa_AbortStream\fP, \fBPa_IsStreamActive\fP 
.RE
.PP

.PP
Definition at line 1509 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_OpenDefaultStream (\fBPaStream\fP ** stream, \fBint\fP numInputChannels, \fBint\fP numOutputChannels, \fBPaSampleFormat\fP sampleFormat, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamCallback\fP * streamCallback, \fBvoid\fP * userData)"
A simplified version of \fBPa_OpenStream()\fP that opens the default input and/or output devices\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP The address of a PaStream pointer which will receive a pointer to the newly opened stream\&.
.br
\fInumInputChannels\fP The number of channels of sound that will be supplied to the stream callback or returned by Pa_ReadStream\&. It can range from 1 to the value of maxInputChannels in the \fBPaDeviceInfo\fP record for the default input device\&. If 0 the stream is opened as an output-only stream\&.
.br
\fInumOutputChannels\fP The number of channels of sound to be delivered to the stream callback or passed to Pa_WriteStream\&. It can range from 1 to the value of maxOutputChannels in the \fBPaDeviceInfo\fP record for the default output device\&. If 0 the stream is opened as an output-only stream\&.
.br
\fIsampleFormat\fP The sample format of both the input and output buffers provided to the callback or passed to and from Pa_ReadStream and Pa_WriteStream\&. sampleFormat may be any of the formats described by the PaSampleFormat enumeration\&.
.br
\fIsampleRate\fP Same as Pa_OpenStream parameter of the same name\&. 
.br
\fIframesPerBuffer\fP Same as Pa_OpenStream parameter of the same name\&. 
.br
\fIstreamCallback\fP Same as Pa_OpenStream parameter of the same name\&. 
.br
\fIuserData\fP Same as Pa_OpenStream parameter of the same name\&.
.RE
.PP
\fBReturns:\fP
.RS 4
As for Pa_OpenStream
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_OpenStream\fP, \fBPaStreamCallback\fP 
.RE
.PP

.PP
Definition at line 1272 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_OpenStream (\fBPaStream\fP ** stream, \fBconst\fP \fBPaStreamParameters\fP * inputParameters, \fBconst\fP \fBPaStreamParameters\fP * outputParameters, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamFlags\fP streamFlags, \fBPaStreamCallback\fP * streamCallback, \fBvoid\fP * userData)"
Opens a stream for either input, output or both\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP The address of a PaStream pointer which will receive a pointer to the newly opened stream\&.
.br
\fIinputParameters\fP A structure that describes the input parameters used by the opened stream\&. See \fBPaStreamParameters\fP for a description of these parameters\&. inputParameters must be NULL for output-only streams\&.
.br
\fIoutputParameters\fP A structure that describes the output parameters used by the opened stream\&. See \fBPaStreamParameters\fP for a description of these parameters\&. outputParameters must be NULL for input-only streams\&.
.br
\fIsampleRate\fP The desired sampleRate\&. For full-duplex streams it is the sample rate for both input and output
.br
\fIframesPerBuffer\fP The number of frames passed to the stream callback function, or the preferred block granularity for a blocking read/write stream\&. The special value paFramesPerBufferUnspecified (0) may be used to request that the stream callback will receive an optimal (and possibly varying) number of frames based on host requirements and the requested latency settings\&. Note: With some host APIs, the use of non-zero framesPerBuffer for a callback stream may introduce an additional layer of buffering which could introduce additional latency\&. PortAudio guarantees that the additional latency will be kept to the theoretical minimum however, it is strongly recommended that a non-zero framesPerBuffer value only be used when your algorithm requires a fixed number of frames per stream callback\&.
.br
\fIstreamFlags\fP Flags which modify the behavior of the streaming process\&. This parameter may contain a combination of flags ORed together\&. Some flags may only be relevant to certain buffer formats\&.
.br
\fIstreamCallback\fP A pointer to a client supplied function that is responsible for processing and filling input and output buffers\&. If this parameter is NULL the stream will be opened in 'blocking read/write' mode\&. In blocking mode, the client can receive sample data using Pa_ReadStream and write sample data using Pa_WriteStream, the number of samples that may be read or written without blocking is returned by Pa_GetStreamReadAvailable and Pa_GetStreamWriteAvailable respectively\&.
.br
\fIuserData\fP A client supplied pointer which is passed to the stream callback function\&. It could for example, contain a pointer to instance data necessary for processing the audio buffers\&. This parameter is ignored if streamCallback is NULL\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Upon success \fBPa_OpenStream()\fP returns paNoError and places a pointer to a valid PaStream in the stream argument\&. The stream is inactive (stopped)\&. If a call to \fBPa_OpenStream()\fP fails, a non-zero error code is returned (see PaError for possible error codes) and the value of stream is invalid\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamParameters\fP, \fBPaStreamCallback\fP, \fBPa_ReadStream\fP, \fBPa_WriteStream\fP, \fBPa_GetStreamReadAvailable\fP, \fBPa_GetStreamWriteAvailable\fP 
.RE
.PP

.PP
Definition at line 1136 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_ReadStream (\fBPaStream\fP * stream, \fBvoid\fP * buffer, unsigned long frames)"
Read samples from an input stream\&. The function doesn't return until the entire buffer has been filled - this may involve waiting for the operating system to supply the data\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP A pointer to an open stream previously created with Pa_OpenStream\&.
.br
\fIbuffer\fP A pointer to a buffer of sample frames\&. The buffer contains samples in the format specified by the inputParameters->sampleFormat field used to open the stream, and the number of channels specified by inputParameters->numChannels\&. If non-interleaved samples were requested using the paNonInterleaved sample format flag, buffer is a pointer to the first element of an array of buffer pointers, one non-interleaved buffer for each channel\&.
.br
\fIframes\fP The number of frames to be read into buffer\&. This parameter is not constrained to a specific range, however high performance applications will want to match this parameter to the framesPerBuffer parameter used when opening the stream\&.
.RE
.PP
\fBReturns:\fP
.RS 4
On success PaNoError will be returned, or PaInputOverflowed if input data was discarded by PortAudio after the previous call and before this call\&. 
.RE
.PP

.PP
Definition at line 1637 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_SetStreamFinishedCallback (\fBPaStream\fP * stream, \fBPaStreamFinishedCallback\fP * streamFinishedCallback)"
Register a stream finished callback function which will be called when the stream becomes inactive\&. See the description of PaStreamFinishedCallback for further details about when the callback will be called\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP a pointer to a PaStream that is in the stopped state - if the stream is not stopped, the stream's finished callback will remain unchanged and an error code will be returned\&.
.br
\fIstreamFinishedCallback\fP a pointer to a function with the same signature as PaStreamFinishedCallback, that will be called when the stream becomes inactive\&. Passing NULL for this parameter will un-register a previously registered stream finished callback function\&.
.RE
.PP
\fBReturns:\fP
.RS 4
on success returns paNoError, otherwise an error code indicating the cause of the error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFinishedCallback\fP 
.RE
.PP

.PP
Definition at line 1402 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_StartStream (\fBPaStream\fP * stream)"
Commences audio processing\&. 
.PP
Definition at line 1431 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_StopStream (\fBPaStream\fP * stream)"
Terminates audio processing\&. It waits until all pending audio buffers have been played before it returns\&. 
.PP
Definition at line 1457 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_Terminate (\fBvoid\fP)"
Library termination function - call this when finished using PortAudio\&. This function deallocates all resources allocated by PortAudio since it was initialized by a call to \fBPa_Initialize()\fP\&. In cases where Pa_Initialise() has been called multiple times, each call must be matched with a corresponding call to \fBPa_Terminate()\fP\&. The final matching call to \fBPa_Terminate()\fP will automatically close any PortAudio streams that are still open\&.
.PP
\fBPa_Terminate()\fP MUST be called before exiting a program which uses PortAudio\&. Failure to do so may result in serious resource leaks, such as audio devices not being available until the next reboot\&.
.PP
\fBReturns:\fP
.RS 4
paNoError if successful, otherwise an error code indicating the cause of failure\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_Initialize\fP 
.RE
.PP

.PP
Definition at line 385 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_WriteStream (\fBPaStream\fP * stream, \fBconst\fP \fBvoid\fP * buffer, unsigned long frames)"
Write samples to an output stream\&. This function doesn't return until the entire buffer has been consumed - this may involve waiting for the operating system to consume the data\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP A pointer to an open stream previously created with Pa_OpenStream\&.
.br
\fIbuffer\fP A pointer to a buffer of sample frames\&. The buffer contains samples in the format specified by the outputParameters->sampleFormat field used to open the stream, and the number of channels specified by outputParameters->numChannels\&. If non-interleaved samples were requested using the paNonInterleaved sample format flag, buffer is a pointer to the first element of an array of buffer pointers, one non-interleaved buffer for each channel\&.
.br
\fIframes\fP The number of frames to be written from buffer\&. This parameter is not constrained to a specific range, however high performance applications will want to match this parameter to the framesPerBuffer parameter used when opening the stream\&.
.RE
.PP
\fBReturns:\fP
.RS 4
On success PaNoError will be returned, or paOutputUnderflowed if additional output data was inserted after the previous call and before this call\&. 
.RE
.PP

.PP
Definition at line 1677 of file pa_front\&.c\&.
.SS "\fBPaError\fP PaUtil_DeviceIndexToHostApiDeviceIndex (\fBPaDeviceIndex\fP * hostApiDevice, \fBPaDeviceIndex\fP device, struct \fBPaUtilHostApiRepresentation\fP * hostApi)"
Convert a PortAudio device index into a host API specific device index\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhostApiDevice\fP Pointer to a device index, on success this will recieve the converted device index value\&. 
.br
\fIdevice\fP The PortAudio device index to convert\&. 
.br
\fIhostApi\fP The host api which the index should be converted for\&.
.RE
.PP
\fBReturns:\fP
.RS 4
On success returns PaNoError and places the converted index in the hostApiDevice parameter\&. 
.RE
.PP

.PP
Definition at line 529 of file pa_front\&.c\&.
.SS "\fBPaError\fP PaUtil_GetHostApiRepresentation (struct \fBPaUtilHostApiRepresentation\fP ** hostApi, \fBPaHostApiTypeId\fP type)"
Retrieve a specific host API representation\&. This function can be used by implementations to retrieve a pointer to their representation in host api specific extension functions which aren't passed a rep pointer by pa_front\&.c\&.
.PP
\fBParameters:\fP
.RS 4
\fIhostApi\fP A pointer to a host API represenation pointer\&. Apon success this will receive the requested representation pointer\&.
.br
\fItype\fP A valid host API type identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
An error code\&. If the result is PaNoError then a pointer to the requested host API representation will be stored in *hostApi\&. If the host API specified by type is not found, this function returns paHostApiNotFound\&. 
.RE
.PP

.PP
Definition at line 500 of file pa_front\&.c\&.
.SS "\fBvoid\fP PaUtil_SetLastHostErrorInfo (\fBPaHostApiTypeId\fP hostApiType, long errorCode, \fBconst\fP char * errorText)"
Set the host error information returned by Pa_GetLastHostErrorInfo\&. This function and the paUnanticipatedHostError error code should be used as a last resort\&. Implementors should use existing PA error codes where possible, or nominate new ones\&. Note that at it is always better to use \fBPaUtil_SetLastHostErrorInfo()\fP and paUnanticipatedHostError than to return an ambiguous or inaccurate PaError code\&.
.PP
\fBParameters:\fP
.RS 4
\fIhostApiType\fP The host API which encountered the error (ie of the caller)
.br
\fIerrorCode\fP The error code returned by the native API function\&.
.br
\fIerrorText\fP A string describing the error\&. PaUtil_SetLastHostErrorInfo makes a copy of the string, so it is not necessary for the pointer to remain valid after the call to \fBPaUtil_SetLastHostErrorInfo()\fP returns\&. 
.RE
.PP

.PP
Definition at line 145 of file pa_front\&.c\&.
.SS "\fBPaError\fP PaUtil_ValidateStreamPointer (\fBPaStream\fP * stream)"
Check that the stream pointer is valid\&.
.PP
\fBReturns:\fP
.RS 4
Returns paNoError if the stream pointer appears to be OK, otherwise returns an error indicating the cause of failure\&. 
.RE
.PP

.PP
Definition at line 1355 of file pa_front\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBPaUtilStreamRepresentation\fP* firstOpenStream_ = \fBNULL\fP"

.PP
Definition at line 162 of file pa_front\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
