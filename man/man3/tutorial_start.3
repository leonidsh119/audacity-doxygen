.TH "tutorial_start" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tutorial_start \- PortAudio Tutorials 
These tutorials takes you through a hands-on example of using PortAudio to make sound\&. If you'd prefer to start with a top-down overview of the PortAudio API, check out the \fBPortAudio API Overview\fP\&.
.SH "Downloading"
.PP
First thing you need to do is download the PortAudio source code either \fCas a tarball from the website\fP, or \fCfrom the Subversion Repository\fP\&.
.SH "Compiling"
.PP
Once you've downloaded PortAudio you'll need to compile it, which of course, depends on your environment:
.PP
.IP "\(bu" 2
Windows
.IP "  \(bu" 4
\fBBuilding PortAudio for Windows using Microsoft Visual Studio\fP
.IP "  \(bu" 4
\fBBuilding Portaudio for Windows with MinGW\fP
.IP "  \(bu" 4
\fBBuilding Portaudio for Windows with ASIO support using MSVC\fP
.IP "  \(bu" 4
\fBCreating MSVC Build Files via CMake\fP
.PP

.IP "\(bu" 2
Mac OS X
.IP "  \(bu" 4
\fBBuilding Portaudio for Mac OS X\fP
.PP

.IP "\(bu" 2
POSIX
.IP "  \(bu" 4
\fBBuilding Portaudio for Linux\fP
.PP

.PP
.PP
Many platforms with GCC/make can use the simple \&./configure && make combination and simply use the resulting libraries in their code\&.
.SH "Programming with PortAudio"
.PP
Below are the steps to writing a PortAudio application using the callback technique:
.PP
.IP "\(bu" 2
Write a callback function that will be called by PortAudio when audio processing is needed\&.
.IP "\(bu" 2
Initialize the PA library and open a stream for audio I/O\&.
.IP "\(bu" 2
Start the stream\&. Your callback function will be now be called repeatedly by PA in the background\&.
.IP "\(bu" 2
In your callback you can read audio data from the inputBuffer and/or write data to the outputBuffer\&.
.IP "\(bu" 2
Stop the stream by returning 1 from your callback, or by calling a stop function\&.
.IP "\(bu" 2
Close the stream and terminate the library\&.
.PP
.PP
In addition to this 'Callback' architecture, V19 also supports a 'Blocking I/O' model which uses read and write calls which may be more familiar to non-audio programmers\&. Note that at this time, not all APIs support this functionality\&.
.PP
In this tutorial, we'll show how to use the callback architecture to play a sawtooth wave\&. Much of the tutorial is taken from the file paex_saw\&.c, which is part of the PortAudio distribution\&. When you're done with this tutorial, you'll be armed with the basic knowledge you need to write an audio program\&. If you need more sample code, look in the 'examples' and 'test' directory of the PortAudio distribution\&. Another great source of info is the \fBportaudio\&.h\fP Doxygen page, which documents the entire V19 API\&. Also see the page for \fCtips on programming PortAudio\fP on the PortAudio wiki\&.
.SH "Programming Tutorial Contents"
.PP
.IP "\(bu" 2
\fBWriting a Callback Function\fP
.IP "\(bu" 2
\fBInitializing PortAudio\fP
.IP "\(bu" 2
\fBOpening a Stream Using Defaults\fP
.IP "\(bu" 2
\fBStarting, Stopping and Aborting a Stream\fP
.IP "\(bu" 2
\fBClosing a Stream and Terminating PortAudio\fP
.IP "\(bu" 2
\fBUtility Functions\fP
.IP "\(bu" 2
\fBEnumerating and Querying PortAudio Devices\fP
.IP "\(bu" 2
\fBBlocking Read/Write Functions\fP
.PP
.PP
If you are upgrading from V18, you may want to look at the \fCProposed Enhancements to PortAudio\fP, which describes the differences between V18 and V19\&.
.PP
Once you have a basic understanding of how to use PortAudio, you might be interested in \fBExploring PortAudio\fP\&.
.PP
Next: \fBWriting a Callback Function\fP 
