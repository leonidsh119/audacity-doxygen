.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavcodec/avcodec.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavcodec/avcodec.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <errno\&.h>\fP
.br
\fC#include 'libavutil/samplefmt\&.h'\fP
.br
\fC#include 'libavutil/attributes\&.h'\fP
.br
\fC#include 'libavutil/avutil\&.h'\fP
.br
\fC#include 'libavutil/buffer\&.h'\fP
.br
\fC#include 'libavutil/cpu\&.h'\fP
.br
\fC#include 'libavutil/channel_layout\&.h'\fP
.br
\fC#include 'libavutil/dict\&.h'\fP
.br
\fC#include 'libavutil/frame\&.h'\fP
.br
\fC#include 'libavutil/log\&.h'\fP
.br
\fC#include 'libavutil/pixfmt\&.h'\fP
.br
\fC#include 'libavutil/rational\&.h'\fP
.br
\fC#include 'version\&.h'\fP
.br
\fC#include 'libavutil/mem\&.h'\fP
.br
\fC#include 'old_codec_ids\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAVCodecDescriptor\fP"
.br
.ti -1c
.RI "struct \fBRcOverride\fP"
.br
.ti -1c
.RI "struct \fBAVPanScan\fP"
.br
.ti -1c
.RI "struct \fBAVPacket\fP"
.br
.ti -1c
.RI "struct \fBAVCodecContext\fP"
.br
.ti -1c
.RI "struct \fBAVProfile\fP"
.br
.ti -1c
.RI "struct \fBAVCodec\fP"
.br
.ti -1c
.RI "struct \fBAVHWAccel\fP"
.br
.ti -1c
.RI "struct \fBAVPicture\fP"
.br
.ti -1c
.RI "struct \fBAVSubtitleRect\fP"
.br
.ti -1c
.RI "struct \fBAVSubtitle\fP"
.br
.ti -1c
.RI "struct \fBAVCodecParserContext\fP"
.br
.ti -1c
.RI "struct \fBAVCodecParser\fP"
.br
.ti -1c
.RI "struct \fBAVBitStreamFilterContext\fP"
.br
.ti -1c
.RI "struct \fBAVBitStreamFilter\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAV_CODEC_ID_H265\fP   \fBAV_CODEC_ID_HEVC\fP"
.br
.ti -1c
.RI "#define \fBAV_CODEC_PROP_INTRA_ONLY\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBAV_CODEC_PROP_LOSSY\fP   (1 << 1)"
.br
.ti -1c
.RI "#define \fBAV_CODEC_PROP_LOSSLESS\fP   (1 << 2)"
.br
.ti -1c
.RI "#define \fBAV_CODEC_PROP_BITMAP_SUB\fP   (1 << 16)"
.br
.ti -1c
.RI "#define \fBAV_CODEC_PROP_TEXT_SUB\fP   (1 << 17)"
.br
.ti -1c
.RI "#define \fBFF_INPUT_BUFFER_PADDING_SIZE\fP   16"
.br
.ti -1c
.RI "#define \fBFF_MIN_BUFFER_SIZE\fP   16384"
.br
.ti -1c
.RI "#define \fBFF_MAX_B_FRAMES\fP   16"
.br
.ti -1c
.RI "#define \fBCODEC_FLAG_UNALIGNED\fP   0x0001"
.br
.ti -1c
.RI "#define \fBCODEC_FLAG_QSCALE\fP   0x0002"
.br
.RI "\fIUse fixed qscale\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_4MV\fP   0x0004"
.br
.RI "\fI4 MV per MB allowed / advanced prediction for H\&.263\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_OUTPUT_CORRUPT\fP   0x0008"
.br
.RI "\fIOutput even those frames that might be corrupted\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_QPEL\fP   0x0010"
.br
.RI "\fIUse qpel MC\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_GMC\fP   0x0020"
.br
.RI "\fIUse GMC\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_MV0\fP   0x0040"
.br
.RI "\fIAlways try a MB with MV=<0,0>\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_INPUT_PRESERVED\fP   0x0100"
.br
.ti -1c
.RI "#define \fBCODEC_FLAG_PASS1\fP   0x0200"
.br
.RI "\fIUse internal 2pass ratecontrol in first pass mode\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_PASS2\fP   0x0400"
.br
.RI "\fIUse internal 2pass ratecontrol in second pass mode\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_GRAY\fP   0x2000"
.br
.RI "\fIOnly decode/encode grayscale\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_EMU_EDGE\fP   0x4000"
.br
.ti -1c
.RI "#define \fBCODEC_FLAG_PSNR\fP   0x8000"
.br
.RI "\fIerror[?] variables will be set during encoding\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_TRUNCATED\fP"
.br
.ti -1c
.RI "#define \fBCODEC_FLAG_NORMALIZE_AQP\fP   0x00020000"
.br
.RI "\fINormalize adaptive quantization\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_INTERLACED_DCT\fP   0x00040000"
.br
.RI "\fIUse interlaced DCT\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_LOW_DELAY\fP   0x00080000"
.br
.RI "\fIForce low delay\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_GLOBAL_HEADER\fP   0x00400000"
.br
.RI "\fIPlace global headers in extradata instead of every keyframe\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_BITEXACT\fP   0x00800000"
.br
.RI "\fIUse only bitexact stuff (except (I)DCT)\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_AC_PRED\fP   0x01000000"
.br
.RI "\fIH\&.263 advanced intra coding / MPEG-4 AC prediction\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_LOOP_FILTER\fP   0x00000800"
.br
.RI "\fIloop filter \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_INTERLACED_ME\fP   0x20000000"
.br
.RI "\fIinterlaced motion estimation \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG_CLOSED_GOP\fP   0x80000000"
.br
.ti -1c
.RI "#define \fBCODEC_FLAG2_FAST\fP   0x00000001"
.br
.RI "\fIAllow non spec compliant speedup tricks\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG2_NO_OUTPUT\fP   0x00000004"
.br
.RI "\fISkip bitstream encoding\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG2_LOCAL_HEADER\fP   0x00000008"
.br
.RI "\fIPlace global headers at every keyframe instead of in extradata\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG2_DROP_FRAME_TIMECODE\fP   0x00002000"
.br
.RI "\fItimecode is in drop frame format\&. DEPRECATED!!!! \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG2_IGNORE_CROP\fP   0x00010000"
.br
.RI "\fIDiscard cropping information from SPS\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG2_CHUNKS\fP   0x00008000"
.br
.RI "\fIInput bitstream might be truncated at a packet boundaries instead of only at frame boundaries\&. \fP"
.ti -1c
.RI "#define \fBCODEC_FLAG2_SHOW_ALL\fP   0x00400000"
.br
.RI "\fIShow all frames before the first keyframe\&. \fP"
.ti -1c
.RI "#define \fBCODEC_CAP_DRAW_HORIZ_BAND\fP   0x0001"
.br
.RI "\fI\fBDecoder\fP can use draw_horiz_band callback\&. \fP"
.ti -1c
.RI "#define \fBCODEC_CAP_DR1\fP   0x0002"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_TRUNCATED\fP   0x0008"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_HWACCEL\fP   0x0010"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_DELAY\fP   0x0020"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_SMALL_LAST_FRAME\fP   0x0040"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_HWACCEL_VDPAU\fP   0x0080"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_SUBFRAMES\fP   0x0100"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_EXPERIMENTAL\fP   0x0200"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_CHANNEL_CONF\fP   0x0400"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_NEG_LINESIZES\fP   0x0800"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_FRAME_THREADS\fP   0x1000"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_SLICE_THREADS\fP   0x2000"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_PARAM_CHANGE\fP   0x4000"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_AUTO_THREADS\fP   0x8000"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_VARIABLE_FRAME_SIZE\fP   0x10000"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_INTRA_ONLY\fP   0x40000000"
.br
.ti -1c
.RI "#define \fBCODEC_CAP_LOSSLESS\fP   0x80000000"
.br
.ti -1c
.RI "#define \fBMB_TYPE_INTRA4x4\fP   0x0001"
.br
.ti -1c
.RI "#define \fBMB_TYPE_INTRA16x16\fP   0x0002"
.br
.ti -1c
.RI "#define \fBMB_TYPE_INTRA_PCM\fP   0x0004"
.br
.ti -1c
.RI "#define \fBMB_TYPE_16x16\fP   0x0008"
.br
.ti -1c
.RI "#define \fBMB_TYPE_16x8\fP   0x0010"
.br
.ti -1c
.RI "#define \fBMB_TYPE_8x16\fP   0x0020"
.br
.ti -1c
.RI "#define \fBMB_TYPE_8x8\fP   0x0040"
.br
.ti -1c
.RI "#define \fBMB_TYPE_INTERLACED\fP   0x0080"
.br
.ti -1c
.RI "#define \fBMB_TYPE_DIRECT2\fP   0x0100"
.br
.ti -1c
.RI "#define \fBMB_TYPE_ACPRED\fP   0x0200"
.br
.ti -1c
.RI "#define \fBMB_TYPE_GMC\fP   0x0400"
.br
.ti -1c
.RI "#define \fBMB_TYPE_SKIP\fP   0x0800"
.br
.ti -1c
.RI "#define \fBMB_TYPE_P0L0\fP   0x1000"
.br
.ti -1c
.RI "#define \fBMB_TYPE_P1L0\fP   0x2000"
.br
.ti -1c
.RI "#define \fBMB_TYPE_P0L1\fP   0x4000"
.br
.ti -1c
.RI "#define \fBMB_TYPE_P1L1\fP   0x8000"
.br
.ti -1c
.RI "#define \fBMB_TYPE_L0\fP   (\fBMB_TYPE_P0L0\fP | \fBMB_TYPE_P1L0\fP)"
.br
.ti -1c
.RI "#define \fBMB_TYPE_L1\fP   (\fBMB_TYPE_P0L1\fP | \fBMB_TYPE_P1L1\fP)"
.br
.ti -1c
.RI "#define \fBMB_TYPE_L0L1\fP   (\fBMB_TYPE_L0\fP   | \fBMB_TYPE_L1\fP)"
.br
.ti -1c
.RI "#define \fBMB_TYPE_QUANT\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBMB_TYPE_CBP\fP   0x00020000"
.br
.ti -1c
.RI "#define \fBFF_QSCALE_TYPE_MPEG1\fP   0"
.br
.ti -1c
.RI "#define \fBFF_QSCALE_TYPE_MPEG2\fP   1"
.br
.ti -1c
.RI "#define \fBFF_QSCALE_TYPE_H264\fP   2"
.br
.ti -1c
.RI "#define \fBFF_QSCALE_TYPE_VP56\fP   3"
.br
.ti -1c
.RI "#define \fBFF_BUFFER_TYPE_INTERNAL\fP   1"
.br
.ti -1c
.RI "#define \fBFF_BUFFER_TYPE_USER\fP   2"
.br
.RI "\fIdirect rendering buffers (image is (de)allocated by user) \fP"
.ti -1c
.RI "#define \fBFF_BUFFER_TYPE_SHARED\fP   4"
.br
.RI "\fIBuffer from somewhere else; don't deallocate image (data/base), all other tables are not shared\&. \fP"
.ti -1c
.RI "#define \fBFF_BUFFER_TYPE_COPY\fP   8"
.br
.RI "\fIJust a (modified) copy of some other buffer, don't deallocate anything\&. \fP"
.ti -1c
.RI "#define \fBFF_BUFFER_HINTS_VALID\fP   0x01"
.br
.ti -1c
.RI "#define \fBFF_BUFFER_HINTS_READABLE\fP   0x02"
.br
.ti -1c
.RI "#define \fBFF_BUFFER_HINTS_PRESERVE\fP   0x04"
.br
.ti -1c
.RI "#define \fBFF_BUFFER_HINTS_REUSABLE\fP   0x08"
.br
.ti -1c
.RI "#define \fBAV_GET_BUFFER_FLAG_REF\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBAV_PKT_FLAG_KEY\fP   0x0001"
.br
.RI "\fIThe packet contains a keyframe\&. \fP"
.ti -1c
.RI "#define \fBAV_PKT_FLAG_CORRUPT\fP   0x0002"
.br
.RI "\fIThe packet content is corrupted\&. \fP"
.ti -1c
.RI "#define \fBFF_COMPRESSION_DEFAULT\fP   \-1"
.br
.ti -1c
.RI "#define \fBFF_ASPECT_EXTENDED\fP   15"
.br
.ti -1c
.RI "#define \fBFF_RC_STRATEGY_XVID\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PRED_LEFT\fP   0"
.br
.ti -1c
.RI "#define \fBFF_PRED_PLANE\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PRED_MEDIAN\fP   2"
.br
.ti -1c
.RI "#define \fBFF_CMP_SAD\fP   0"
.br
.ti -1c
.RI "#define \fBFF_CMP_SSE\fP   1"
.br
.ti -1c
.RI "#define \fBFF_CMP_SATD\fP   2"
.br
.ti -1c
.RI "#define \fBFF_CMP_DCT\fP   3"
.br
.ti -1c
.RI "#define \fBFF_CMP_PSNR\fP   4"
.br
.ti -1c
.RI "#define \fBFF_CMP_BIT\fP   5"
.br
.ti -1c
.RI "#define \fBFF_CMP_RD\fP   6"
.br
.ti -1c
.RI "#define \fBFF_CMP_ZERO\fP   7"
.br
.ti -1c
.RI "#define \fBFF_CMP_VSAD\fP   8"
.br
.ti -1c
.RI "#define \fBFF_CMP_VSSE\fP   9"
.br
.ti -1c
.RI "#define \fBFF_CMP_NSSE\fP   10"
.br
.ti -1c
.RI "#define \fBFF_CMP_W53\fP   11"
.br
.ti -1c
.RI "#define \fBFF_CMP_W97\fP   12"
.br
.ti -1c
.RI "#define \fBFF_CMP_DCTMAX\fP   13"
.br
.ti -1c
.RI "#define \fBFF_CMP_DCT264\fP   14"
.br
.ti -1c
.RI "#define \fBFF_CMP_CHROMA\fP   256"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_SAME\fP   8"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_4_3\fP   9"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_16_9\fP   10"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_14_9\fP   11"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_4_3_SP_14_9\fP   13"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_16_9_SP_14_9\fP   14"
.br
.ti -1c
.RI "#define \fBFF_DTG_AFD_SP_4_3\fP   15"
.br
.ti -1c
.RI "#define \fBFF_DEFAULT_QUANT_BIAS\fP   999999"
.br
.ti -1c
.RI "#define \fBSLICE_FLAG_CODED_ORDER\fP   0x0001"
.br
.RI "\fIdraw_horiz_band() is called in coded order instead of display \fP"
.ti -1c
.RI "#define \fBSLICE_FLAG_ALLOW_FIELD\fP   0x0002"
.br
.RI "\fIallow draw_horiz_band() with field slices (MPEG2 field pics) \fP"
.ti -1c
.RI "#define \fBSLICE_FLAG_ALLOW_PLANE\fP   0x0004"
.br
.RI "\fIallow draw_horiz_band() with 1 component at a time (SVQ1) \fP"
.ti -1c
.RI "#define \fBFF_MB_DECISION_SIMPLE\fP   0"
.br
.RI "\fIuses mb_cmp \fP"
.ti -1c
.RI "#define \fBFF_MB_DECISION_BITS\fP   1"
.br
.RI "\fIchooses the one which needs the fewest bits \fP"
.ti -1c
.RI "#define \fBFF_MB_DECISION_RD\fP   2"
.br
.RI "\fIrate distortion \fP"
.ti -1c
.RI "#define \fBFF_CODER_TYPE_VLC\fP   0"
.br
.ti -1c
.RI "#define \fBFF_CODER_TYPE_AC\fP   1"
.br
.ti -1c
.RI "#define \fBFF_CODER_TYPE_RAW\fP   2"
.br
.ti -1c
.RI "#define \fBFF_CODER_TYPE_RLE\fP   3"
.br
.ti -1c
.RI "#define \fBFF_CODER_TYPE_DEFLATE\fP   4"
.br
.ti -1c
.RI "#define \fBFF_BUG_AUTODETECT\fP   1"
.br
.RI "\fIautodetection \fP"
.ti -1c
.RI "#define \fBFF_BUG_OLD_MSMPEG4\fP   2"
.br
.ti -1c
.RI "#define \fBFF_BUG_XVID_ILACE\fP   4"
.br
.ti -1c
.RI "#define \fBFF_BUG_UMP4\fP   8"
.br
.ti -1c
.RI "#define \fBFF_BUG_NO_PADDING\fP   16"
.br
.ti -1c
.RI "#define \fBFF_BUG_AMV\fP   32"
.br
.ti -1c
.RI "#define \fBFF_BUG_AC_VLC\fP   0"
.br
.RI "\fIWill be removed, libavcodec can now handle these non-compliant files by default\&. \fP"
.ti -1c
.RI "#define \fBFF_BUG_QPEL_CHROMA\fP   64"
.br
.ti -1c
.RI "#define \fBFF_BUG_STD_QPEL\fP   128"
.br
.ti -1c
.RI "#define \fBFF_BUG_QPEL_CHROMA2\fP   256"
.br
.ti -1c
.RI "#define \fBFF_BUG_DIRECT_BLOCKSIZE\fP   512"
.br
.ti -1c
.RI "#define \fBFF_BUG_EDGE\fP   1024"
.br
.ti -1c
.RI "#define \fBFF_BUG_HPEL_CHROMA\fP   2048"
.br
.ti -1c
.RI "#define \fBFF_BUG_DC_CLIP\fP   4096"
.br
.ti -1c
.RI "#define \fBFF_BUG_MS\fP   8192"
.br
.RI "\fIWork around various bugs in Microsoft's broken decoders\&. \fP"
.ti -1c
.RI "#define \fBFF_BUG_TRUNCATED\fP   16384"
.br
.ti -1c
.RI "#define \fBFF_COMPLIANCE_VERY_STRICT\fP   2"
.br
.RI "\fIStrictly conform to an older more strict version of the spec or reference software\&. \fP"
.ti -1c
.RI "#define \fBFF_COMPLIANCE_STRICT\fP   1"
.br
.RI "\fIStrictly conform to all the things in the spec no matter what consequences\&. \fP"
.ti -1c
.RI "#define \fBFF_COMPLIANCE_NORMAL\fP   0"
.br
.ti -1c
.RI "#define \fBFF_COMPLIANCE_UNOFFICIAL\fP   \-1"
.br
.RI "\fIAllow unofficial extensions\&. \fP"
.ti -1c
.RI "#define \fBFF_COMPLIANCE_EXPERIMENTAL\fP   \-2"
.br
.RI "\fIAllow nonstandardized experimental things\&. \fP"
.ti -1c
.RI "#define \fBFF_EC_GUESS_MVS\fP   1"
.br
.ti -1c
.RI "#define \fBFF_EC_DEBLOCK\fP   2"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_PICT_INFO\fP   1"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_RC\fP   2"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_BITSTREAM\fP   4"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_MB_TYPE\fP   8"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_QP\fP   16"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_MV\fP   32"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_DCT_COEFF\fP   0x00000040"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_SKIP\fP   0x00000080"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_STARTCODE\fP   0x00000100"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_PTS\fP   0x00000200"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_ER\fP   0x00000400"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_MMCO\fP   0x00000800"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_BUGS\fP   0x00001000"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_VIS_QP\fP   0x00002000"
.br
.RI "\fIonly access through AVOptions from outside libavcodec \fP"
.ti -1c
.RI "#define \fBFF_DEBUG_VIS_MB_TYPE\fP   0x00004000"
.br
.RI "\fIonly access through AVOptions from outside libavcodec \fP"
.ti -1c
.RI "#define \fBFF_DEBUG_BUFFERS\fP   0x00008000"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_THREADS\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_VIS_MV_P_FOR\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_VIS_MV_B_FOR\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBFF_DEBUG_VIS_MV_B_BACK\fP   0x00000004"
.br
.ti -1c
.RI "#define \fBAV_EF_CRCCHECK\fP   (1<<0)"
.br
.ti -1c
.RI "#define \fBAV_EF_BITSTREAM\fP   (1<<1)"
.br
.RI "\fIdetect bitstream specification deviations \fP"
.ti -1c
.RI "#define \fBAV_EF_BUFFER\fP   (1<<2)"
.br
.RI "\fIdetect improper bitstream length \fP"
.ti -1c
.RI "#define \fBAV_EF_EXPLODE\fP   (1<<3)"
.br
.RI "\fIabort decoding on minor error detection \fP"
.ti -1c
.RI "#define \fBAV_EF_CAREFUL\fP   (1<<16)"
.br
.RI "\fIconsider things that violate the spec, are fast to calculate and have not been seen in the wild as errors \fP"
.ti -1c
.RI "#define \fBAV_EF_COMPLIANT\fP   (1<<17)"
.br
.RI "\fIconsider all spec non compliancies as errors \fP"
.ti -1c
.RI "#define \fBAV_EF_AGGRESSIVE\fP   (1<<18)"
.br
.RI "\fIconsider things that a sane encoder should not do as an error \fP"
.ti -1c
.RI "#define \fBFF_DCT_AUTO\fP   0"
.br
.ti -1c
.RI "#define \fBFF_DCT_FASTINT\fP   1"
.br
.ti -1c
.RI "#define \fBFF_DCT_INT\fP   2"
.br
.ti -1c
.RI "#define \fBFF_DCT_MMX\fP   3"
.br
.ti -1c
.RI "#define \fBFF_DCT_ALTIVEC\fP   5"
.br
.ti -1c
.RI "#define \fBFF_DCT_FAAN\fP   6"
.br
.ti -1c
.RI "#define \fBFF_IDCT_AUTO\fP   0"
.br
.ti -1c
.RI "#define \fBFF_IDCT_INT\fP   1"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLE\fP   2"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLEMMX\fP   3"
.br
.ti -1c
.RI "#define \fBFF_IDCT_ARM\fP   7"
.br
.ti -1c
.RI "#define \fBFF_IDCT_ALTIVEC\fP   8"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SH4\fP   9"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLEARM\fP   10"
.br
.ti -1c
.RI "#define \fBFF_IDCT_IPP\fP   13"
.br
.ti -1c
.RI "#define \fBFF_IDCT_XVIDMMX\fP   14"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLEARMV5TE\fP   16"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLEARMV6\fP   17"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLEVIS\fP   18"
.br
.ti -1c
.RI "#define \fBFF_IDCT_FAAN\fP   20"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLENEON\fP   22"
.br
.ti -1c
.RI "#define \fBFF_IDCT_SIMPLEALPHA\fP   23"
.br
.ti -1c
.RI "#define \fBFF_THREAD_FRAME\fP   1"
.br
.RI "\fIDecode more than one frame at once\&. \fP"
.ti -1c
.RI "#define \fBFF_THREAD_SLICE\fP   2"
.br
.RI "\fIDecode more than one part of a single frame at once\&. \fP"
.ti -1c
.RI "#define \fBFF_PROFILE_UNKNOWN\fP   \-99"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_RESERVED\fP   \-100"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_MAIN\fP   0"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_LOW\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_SSR\fP   2"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_LTP\fP   3"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_HE\fP   4"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_HE_V2\fP   28"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_LD\fP   22"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_AAC_ELD\fP   38"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_AAC_LOW\fP   128"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_AAC_HE\fP   131"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_DTS\fP   20"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_DTS_ES\fP   30"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_DTS_96_24\fP   40"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_DTS_HD_HRA\fP   50"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_DTS_HD_MA\fP   60"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_422\fP   0"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_HIGH\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_SS\fP   2"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_SNR_SCALABLE\fP   3"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_MAIN\fP   4"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG2_SIMPLE\fP   5"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_CONSTRAINED\fP   (1<<9)"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_INTRA\fP   (1<<11)"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_BASELINE\fP   66"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_CONSTRAINED_BASELINE\fP   (66|\fBFF_PROFILE_H264_CONSTRAINED\fP)"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_MAIN\fP   77"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_EXTENDED\fP   88"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH\fP   100"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_10\fP   110"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_10_INTRA\fP   (110|\fBFF_PROFILE_H264_INTRA\fP)"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_422\fP   122"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_422_INTRA\fP   (122|\fBFF_PROFILE_H264_INTRA\fP)"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_444\fP   144"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_444_PREDICTIVE\fP   244"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_HIGH_444_INTRA\fP   (244|\fBFF_PROFILE_H264_INTRA\fP)"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_H264_CAVLC_444\fP   44"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_VC1_SIMPLE\fP   0"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_VC1_MAIN\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_VC1_COMPLEX\fP   2"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_VC1_ADVANCED\fP   3"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_SIMPLE\fP   0"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_SIMPLE_SCALABLE\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_CORE\fP   2"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_MAIN\fP   3"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_N_BIT\fP   4"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_SCALABLE_TEXTURE\fP   5"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION\fP   6"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE\fP   7"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_HYBRID\fP   8"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_ADVANCED_REAL_TIME\fP   9"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_CORE_SCALABLE\fP   10"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_ADVANCED_CODING\fP   11"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_ADVANCED_CORE\fP   12"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE\fP   13"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_SIMPLE_STUDIO\fP   14"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_MPEG4_ADVANCED_SIMPLE\fP   15"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0\fP   0"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION\fP   2"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_JPEG2000_DCINEMA_2K\fP   3"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_JPEG2000_DCINEMA_4K\fP   4"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_HEVC_MAIN\fP   1"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_HEVC_MAIN_10\fP   2"
.br
.ti -1c
.RI "#define \fBFF_PROFILE_HEVC_MAIN_STILL_PICTURE\fP   3"
.br
.ti -1c
.RI "#define \fBFF_LEVEL_UNKNOWN\fP   \-99"
.br
.ti -1c
.RI "#define \fBFF_SUB_CHARENC_MODE_DO_NOTHING\fP   \-1"
.br
.RI "\fIdo nothing (demuxer outputs a stream supposed to be already in UTF-8, or the codec is bitmap for instance) \fP"
.ti -1c
.RI "#define \fBFF_SUB_CHARENC_MODE_AUTOMATIC\fP   0"
.br
.RI "\fIlibavcodec will select the mode itself \fP"
.ti -1c
.RI "#define \fBFF_SUB_CHARENC_MODE_PRE_DECODER\fP   1"
.br
.RI "\fIthe \fBAVPacket\fP data needs to be recoded to UTF-8 before being fed to the decoder, requires iconv \fP"
.ti -1c
.RI "#define \fBAV_SUBTITLE_FLAG_FORCED\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBAV_PARSER_PTS_NB\fP   4"
.br
.ti -1c
.RI "#define \fBPARSER_FLAG_COMPLETE_FRAMES\fP   0x0001"
.br
.ti -1c
.RI "#define \fBPARSER_FLAG_ONCE\fP   0x0002"
.br
.ti -1c
.RI "#define \fBPARSER_FLAG_FETCHED_OFFSET\fP   0x0004"
.br
.RI "\fISet if the parser has a valid file offset\&. \fP"
.ti -1c
.RI "#define \fBPARSER_FLAG_USE_CODEC_TS\fP   0x1000"
.br
.ti -1c
.RI "#define \fBFF_LOSS_RESOLUTION\fP   0x0001"
.br
.ti -1c
.RI "#define \fBFF_LOSS_DEPTH\fP   0x0002"
.br
.ti -1c
.RI "#define \fBFF_LOSS_COLORSPACE\fP   0x0004"
.br
.ti -1c
.RI "#define \fBFF_LOSS_ALPHA\fP   0x0008"
.br
.ti -1c
.RI "#define \fBFF_LOSS_COLORQUANT\fP   0x0010"
.br
.ti -1c
.RI "#define \fBFF_LOSS_CHROMA\fP   0x0020"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBAVCodecDescriptor\fP \fBAVCodecDescriptor\fP"
.br
.ti -1c
.RI "typedef struct \fBRcOverride\fP \fBRcOverride\fP"
.br
.ti -1c
.RI "typedef struct \fBAVPanScan\fP \fBAVPanScan\fP"
.br
.ti -1c
.RI "typedef struct \fBAVPacket\fP \fBAVPacket\fP"
.br
.ti -1c
.RI "typedef struct \fBAVCodecContext\fP \fBAVCodecContext\fP"
.br
.ti -1c
.RI "typedef struct \fBAVProfile\fP \fBAVProfile\fP"
.br
.ti -1c
.RI "typedef struct \fBAVCodecDefault\fP \fBAVCodecDefault\fP"
.br
.ti -1c
.RI "typedef struct \fBAVCodec\fP \fBAVCodec\fP"
.br
.ti -1c
.RI "typedef struct \fBAVHWAccel\fP \fBAVHWAccel\fP"
.br
.ti -1c
.RI "typedef struct \fBAVPicture\fP \fBAVPicture\fP"
.br
.ti -1c
.RI "typedef struct \fBAVSubtitleRect\fP \fBAVSubtitleRect\fP"
.br
.ti -1c
.RI "typedef struct \fBAVSubtitle\fP \fBAVSubtitle\fP"
.br
.ti -1c
.RI "typedef struct \fBAVCodecParserContext\fP \fBAVCodecParserContext\fP"
.br
.ti -1c
.RI "typedef struct \fBAVCodecParser\fP \fBAVCodecParser\fP"
.br
.ti -1c
.RI "typedef struct \fBReSampleContext\fP \fBReSampleContext\fP"
.br
.ti -1c
.RI "typedef struct \fBAVBitStreamFilterContext\fP \fBAVBitStreamFilterContext\fP"
.br
.ti -1c
.RI "typedef struct \fBAVBitStreamFilter\fP \fBAVBitStreamFilter\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBAVCodecID\fP { \fBAV_CODEC_ID_NONE\fP, \fBAV_CODEC_ID_MPEG1VIDEO\fP, \fBAV_CODEC_ID_MPEG2VIDEO\fP, \fBAV_CODEC_ID_MPEG2VIDEO_XVMC\fP, \fBAV_CODEC_ID_H261\fP, \fBAV_CODEC_ID_H263\fP, \fBAV_CODEC_ID_RV10\fP, \fBAV_CODEC_ID_RV20\fP, \fBAV_CODEC_ID_MJPEG\fP, \fBAV_CODEC_ID_MJPEGB\fP, \fBAV_CODEC_ID_LJPEG\fP, \fBAV_CODEC_ID_SP5X\fP, \fBAV_CODEC_ID_JPEGLS\fP, \fBAV_CODEC_ID_MPEG4\fP, \fBAV_CODEC_ID_RAWVIDEO\fP, \fBAV_CODEC_ID_MSMPEG4V1\fP, \fBAV_CODEC_ID_MSMPEG4V2\fP, \fBAV_CODEC_ID_MSMPEG4V3\fP, \fBAV_CODEC_ID_WMV1\fP, \fBAV_CODEC_ID_WMV2\fP, \fBAV_CODEC_ID_H263P\fP, \fBAV_CODEC_ID_H263I\fP, \fBAV_CODEC_ID_FLV1\fP, \fBAV_CODEC_ID_SVQ1\fP, \fBAV_CODEC_ID_SVQ3\fP, \fBAV_CODEC_ID_DVVIDEO\fP, \fBAV_CODEC_ID_HUFFYUV\fP, \fBAV_CODEC_ID_CYUV\fP, \fBAV_CODEC_ID_H264\fP, \fBAV_CODEC_ID_INDEO3\fP, \fBAV_CODEC_ID_VP3\fP, \fBAV_CODEC_ID_THEORA\fP, \fBAV_CODEC_ID_ASV1\fP, \fBAV_CODEC_ID_ASV2\fP, \fBAV_CODEC_ID_FFV1\fP, \fBAV_CODEC_ID_4XM\fP, \fBAV_CODEC_ID_VCR1\fP, \fBAV_CODEC_ID_CLJR\fP, \fBAV_CODEC_ID_MDEC\fP, \fBAV_CODEC_ID_ROQ\fP, \fBAV_CODEC_ID_INTERPLAY_VIDEO\fP, \fBAV_CODEC_ID_XAN_WC3\fP, \fBAV_CODEC_ID_XAN_WC4\fP, \fBAV_CODEC_ID_RPZA\fP, \fBAV_CODEC_ID_CINEPAK\fP, \fBAV_CODEC_ID_WS_VQA\fP, \fBAV_CODEC_ID_MSRLE\fP, \fBAV_CODEC_ID_MSVIDEO1\fP, \fBAV_CODEC_ID_IDCIN\fP, \fBAV_CODEC_ID_8BPS\fP, \fBAV_CODEC_ID_SMC\fP, \fBAV_CODEC_ID_FLIC\fP, \fBAV_CODEC_ID_TRUEMOTION1\fP, \fBAV_CODEC_ID_VMDVIDEO\fP, \fBAV_CODEC_ID_MSZH\fP, \fBAV_CODEC_ID_ZLIB\fP, \fBAV_CODEC_ID_QTRLE\fP, \fBAV_CODEC_ID_TSCC\fP, \fBAV_CODEC_ID_ULTI\fP, \fBAV_CODEC_ID_QDRAW\fP, \fBAV_CODEC_ID_VIXL\fP, \fBAV_CODEC_ID_QPEG\fP, \fBAV_CODEC_ID_PNG\fP, \fBAV_CODEC_ID_PPM\fP, \fBAV_CODEC_ID_PBM\fP, \fBAV_CODEC_ID_PGM\fP, \fBAV_CODEC_ID_PGMYUV\fP, \fBAV_CODEC_ID_PAM\fP, \fBAV_CODEC_ID_FFVHUFF\fP, \fBAV_CODEC_ID_RV30\fP, \fBAV_CODEC_ID_RV40\fP, \fBAV_CODEC_ID_VC1\fP, \fBAV_CODEC_ID_WMV3\fP, \fBAV_CODEC_ID_LOCO\fP, \fBAV_CODEC_ID_WNV1\fP, \fBAV_CODEC_ID_AASC\fP, \fBAV_CODEC_ID_INDEO2\fP, \fBAV_CODEC_ID_FRAPS\fP, \fBAV_CODEC_ID_TRUEMOTION2\fP, \fBAV_CODEC_ID_BMP\fP, \fBAV_CODEC_ID_CSCD\fP, \fBAV_CODEC_ID_MMVIDEO\fP, \fBAV_CODEC_ID_ZMBV\fP, \fBAV_CODEC_ID_AVS\fP, \fBAV_CODEC_ID_SMACKVIDEO\fP, \fBAV_CODEC_ID_NUV\fP, \fBAV_CODEC_ID_KMVC\fP, \fBAV_CODEC_ID_FLASHSV\fP, \fBAV_CODEC_ID_CAVS\fP, \fBAV_CODEC_ID_JPEG2000\fP, \fBAV_CODEC_ID_VMNC\fP, \fBAV_CODEC_ID_VP5\fP, \fBAV_CODEC_ID_VP6\fP, \fBAV_CODEC_ID_VP6F\fP, \fBAV_CODEC_ID_TARGA\fP, \fBAV_CODEC_ID_DSICINVIDEO\fP, \fBAV_CODEC_ID_TIERTEXSEQVIDEO\fP, \fBAV_CODEC_ID_TIFF\fP, \fBAV_CODEC_ID_GIF\fP, \fBAV_CODEC_ID_DXA\fP, \fBAV_CODEC_ID_DNXHD\fP, \fBAV_CODEC_ID_THP\fP, \fBAV_CODEC_ID_SGI\fP, \fBAV_CODEC_ID_C93\fP, \fBAV_CODEC_ID_BETHSOFTVID\fP, \fBAV_CODEC_ID_PTX\fP, \fBAV_CODEC_ID_TXD\fP, \fBAV_CODEC_ID_VP6A\fP, \fBAV_CODEC_ID_AMV\fP, \fBAV_CODEC_ID_VB\fP, \fBAV_CODEC_ID_PCX\fP, \fBAV_CODEC_ID_SUNRAST\fP, \fBAV_CODEC_ID_INDEO4\fP, \fBAV_CODEC_ID_INDEO5\fP, \fBAV_CODEC_ID_MIMIC\fP, \fBAV_CODEC_ID_RL2\fP, \fBAV_CODEC_ID_ESCAPE124\fP, \fBAV_CODEC_ID_DIRAC\fP, \fBAV_CODEC_ID_BFI\fP, \fBAV_CODEC_ID_CMV\fP, \fBAV_CODEC_ID_MOTIONPIXELS\fP, \fBAV_CODEC_ID_TGV\fP, \fBAV_CODEC_ID_TGQ\fP, \fBAV_CODEC_ID_TQI\fP, \fBAV_CODEC_ID_AURA\fP, \fBAV_CODEC_ID_AURA2\fP, \fBAV_CODEC_ID_V210X\fP, \fBAV_CODEC_ID_TMV\fP, \fBAV_CODEC_ID_V210\fP, \fBAV_CODEC_ID_DPX\fP, \fBAV_CODEC_ID_MAD\fP, \fBAV_CODEC_ID_FRWU\fP, \fBAV_CODEC_ID_FLASHSV2\fP, \fBAV_CODEC_ID_CDGRAPHICS\fP, \fBAV_CODEC_ID_R210\fP, \fBAV_CODEC_ID_ANM\fP, \fBAV_CODEC_ID_BINKVIDEO\fP, \fBAV_CODEC_ID_IFF_ILBM\fP, \fBAV_CODEC_ID_IFF_BYTERUN1\fP, \fBAV_CODEC_ID_KGV1\fP, \fBAV_CODEC_ID_YOP\fP, \fBAV_CODEC_ID_VP8\fP, \fBAV_CODEC_ID_PICTOR\fP, \fBAV_CODEC_ID_ANSI\fP, \fBAV_CODEC_ID_A64_MULTI\fP, \fBAV_CODEC_ID_A64_MULTI5\fP, \fBAV_CODEC_ID_R10K\fP, \fBAV_CODEC_ID_MXPEG\fP, \fBAV_CODEC_ID_LAGARITH\fP, \fBAV_CODEC_ID_PRORES\fP, \fBAV_CODEC_ID_JV\fP, \fBAV_CODEC_ID_DFA\fP, \fBAV_CODEC_ID_WMV3IMAGE\fP, \fBAV_CODEC_ID_VC1IMAGE\fP, \fBAV_CODEC_ID_UTVIDEO\fP, \fBAV_CODEC_ID_BMV_VIDEO\fP, \fBAV_CODEC_ID_VBLE\fP, \fBAV_CODEC_ID_DXTORY\fP, \fBAV_CODEC_ID_V410\fP, \fBAV_CODEC_ID_XWD\fP, \fBAV_CODEC_ID_CDXL\fP, \fBAV_CODEC_ID_XBM\fP, \fBAV_CODEC_ID_ZEROCODEC\fP, \fBAV_CODEC_ID_MSS1\fP, \fBAV_CODEC_ID_MSA1\fP, \fBAV_CODEC_ID_TSCC2\fP, \fBAV_CODEC_ID_MTS2\fP, \fBAV_CODEC_ID_CLLC\fP, \fBAV_CODEC_ID_MSS2\fP, \fBAV_CODEC_ID_VP9\fP, \fBAV_CODEC_ID_AIC\fP, \fBAV_CODEC_ID_ESCAPE130_DEPRECATED\fP, \fBAV_CODEC_ID_G2M_DEPRECATED\fP, \fBAV_CODEC_ID_WEBP_DEPRECATED\fP, \fBAV_CODEC_ID_HNM4_VIDEO\fP, \fBAV_CODEC_ID_HEVC_DEPRECATED\fP, \fBAV_CODEC_ID_FIC\fP, \fBAV_CODEC_ID_BRENDER_PIX\fP = MKBETAG('B','P','I','X'), \fBAV_CODEC_ID_Y41P\fP = MKBETAG('Y','4','1','P'), \fBAV_CODEC_ID_ESCAPE130\fP = MKBETAG('E','1','3','0'), \fBAV_CODEC_ID_EXR\fP = MKBETAG('0','E','X','R'), \fBAV_CODEC_ID_AVRP\fP = MKBETAG('A','V','R','P'), \fBAV_CODEC_ID_012V\fP = MKBETAG('0','1','2','V'), \fBAV_CODEC_ID_G2M\fP = MKBETAG( 0 ,'G','2','M'), \fBAV_CODEC_ID_AVUI\fP = MKBETAG('A','V','U','I'), \fBAV_CODEC_ID_AYUV\fP = MKBETAG('A','Y','U','V'), \fBAV_CODEC_ID_TARGA_Y216\fP = MKBETAG('T','2','1','6'), \fBAV_CODEC_ID_V308\fP = MKBETAG('V','3','0','8'), \fBAV_CODEC_ID_V408\fP = MKBETAG('V','4','0','8'), \fBAV_CODEC_ID_YUV4\fP = MKBETAG('Y','U','V','4'), \fBAV_CODEC_ID_SANM\fP = MKBETAG('S','A','N','M'), \fBAV_CODEC_ID_PAF_VIDEO\fP = MKBETAG('P','A','F','V'), \fBAV_CODEC_ID_AVRN\fP = MKBETAG('A','V','R','n'), \fBAV_CODEC_ID_CPIA\fP = MKBETAG('C','P','I','A'), \fBAV_CODEC_ID_XFACE\fP = MKBETAG('X','F','A','C'), \fBAV_CODEC_ID_SGIRLE\fP = MKBETAG('S','G','I','R'), \fBAV_CODEC_ID_MVC1\fP = MKBETAG('M','V','C','1'), \fBAV_CODEC_ID_MVC2\fP = MKBETAG('M','V','C','2'), \fBAV_CODEC_ID_SNOW\fP = MKBETAG('S','N','O','W'), \fBAV_CODEC_ID_WEBP\fP = MKBETAG('W','E','B','P'), \fBAV_CODEC_ID_SMVJPEG\fP = MKBETAG('S','M','V','J'), \fBAV_CODEC_ID_HEVC\fP = MKBETAG('H','2','6','5'), \fBAV_CODEC_ID_FIRST_AUDIO\fP = 0x10000, \fBAV_CODEC_ID_PCM_S16LE\fP = 0x10000, \fBAV_CODEC_ID_PCM_S16BE\fP, \fBAV_CODEC_ID_PCM_U16LE\fP, \fBAV_CODEC_ID_PCM_U16BE\fP, \fBAV_CODEC_ID_PCM_S8\fP, \fBAV_CODEC_ID_PCM_U8\fP, \fBAV_CODEC_ID_PCM_MULAW\fP, \fBAV_CODEC_ID_PCM_ALAW\fP, \fBAV_CODEC_ID_PCM_S32LE\fP, \fBAV_CODEC_ID_PCM_S32BE\fP, \fBAV_CODEC_ID_PCM_U32LE\fP, \fBAV_CODEC_ID_PCM_U32BE\fP, \fBAV_CODEC_ID_PCM_S24LE\fP, \fBAV_CODEC_ID_PCM_S24BE\fP, \fBAV_CODEC_ID_PCM_U24LE\fP, \fBAV_CODEC_ID_PCM_U24BE\fP, \fBAV_CODEC_ID_PCM_S24DAUD\fP, \fBAV_CODEC_ID_PCM_ZORK\fP, \fBAV_CODEC_ID_PCM_S16LE_PLANAR\fP, \fBAV_CODEC_ID_PCM_DVD\fP, \fBAV_CODEC_ID_PCM_F32BE\fP, \fBAV_CODEC_ID_PCM_F32LE\fP, \fBAV_CODEC_ID_PCM_F64BE\fP, \fBAV_CODEC_ID_PCM_F64LE\fP, \fBAV_CODEC_ID_PCM_BLURAY\fP, \fBAV_CODEC_ID_PCM_LXF\fP, \fBAV_CODEC_ID_S302M\fP, \fBAV_CODEC_ID_PCM_S8_PLANAR\fP, \fBAV_CODEC_ID_PCM_S24LE_PLANAR_DEPRECATED\fP, \fBAV_CODEC_ID_PCM_S32LE_PLANAR_DEPRECATED\fP, \fBAV_CODEC_ID_PCM_S24LE_PLANAR\fP = MKBETAG(24,'P','S','P'), \fBAV_CODEC_ID_PCM_S32LE_PLANAR\fP = MKBETAG(32,'P','S','P'), \fBAV_CODEC_ID_PCM_S16BE_PLANAR\fP = MKBETAG('P','S','P',16), \fBAV_CODEC_ID_ADPCM_IMA_QT\fP = 0x11000, \fBAV_CODEC_ID_ADPCM_IMA_WAV\fP, \fBAV_CODEC_ID_ADPCM_IMA_DK3\fP, \fBAV_CODEC_ID_ADPCM_IMA_DK4\fP, \fBAV_CODEC_ID_ADPCM_IMA_WS\fP, \fBAV_CODEC_ID_ADPCM_IMA_SMJPEG\fP, \fBAV_CODEC_ID_ADPCM_MS\fP, \fBAV_CODEC_ID_ADPCM_4XM\fP, \fBAV_CODEC_ID_ADPCM_XA\fP, \fBAV_CODEC_ID_ADPCM_ADX\fP, \fBAV_CODEC_ID_ADPCM_EA\fP, \fBAV_CODEC_ID_ADPCM_G726\fP, \fBAV_CODEC_ID_ADPCM_CT\fP, \fBAV_CODEC_ID_ADPCM_SWF\fP, \fBAV_CODEC_ID_ADPCM_YAMAHA\fP, \fBAV_CODEC_ID_ADPCM_SBPRO_4\fP, \fBAV_CODEC_ID_ADPCM_SBPRO_3\fP, \fBAV_CODEC_ID_ADPCM_SBPRO_2\fP, \fBAV_CODEC_ID_ADPCM_THP\fP, \fBAV_CODEC_ID_ADPCM_IMA_AMV\fP, \fBAV_CODEC_ID_ADPCM_EA_R1\fP, \fBAV_CODEC_ID_ADPCM_EA_R3\fP, \fBAV_CODEC_ID_ADPCM_EA_R2\fP, \fBAV_CODEC_ID_ADPCM_IMA_EA_SEAD\fP, \fBAV_CODEC_ID_ADPCM_IMA_EA_EACS\fP, \fBAV_CODEC_ID_ADPCM_EA_XAS\fP, \fBAV_CODEC_ID_ADPCM_EA_MAXIS_XA\fP, \fBAV_CODEC_ID_ADPCM_IMA_ISS\fP, \fBAV_CODEC_ID_ADPCM_G722\fP, \fBAV_CODEC_ID_ADPCM_IMA_APC\fP, \fBAV_CODEC_ID_VIMA\fP = MKBETAG('V','I','M','A'), \fBAV_CODEC_ID_ADPCM_AFC\fP = MKBETAG('A','F','C',' '), \fBAV_CODEC_ID_ADPCM_IMA_OKI\fP = MKBETAG('O','K','I',' '), \fBAV_CODEC_ID_ADPCM_DTK\fP = MKBETAG('D','T','K',' '), \fBAV_CODEC_ID_ADPCM_IMA_RAD\fP = MKBETAG('R','A','D',' '), \fBAV_CODEC_ID_ADPCM_G726LE\fP = MKBETAG('6','2','7','G'), \fBAV_CODEC_ID_AMR_NB\fP = 0x12000, \fBAV_CODEC_ID_AMR_WB\fP, \fBAV_CODEC_ID_RA_144\fP = 0x13000, \fBAV_CODEC_ID_RA_288\fP, \fBAV_CODEC_ID_ROQ_DPCM\fP = 0x14000, \fBAV_CODEC_ID_INTERPLAY_DPCM\fP, \fBAV_CODEC_ID_XAN_DPCM\fP, \fBAV_CODEC_ID_SOL_DPCM\fP, \fBAV_CODEC_ID_MP2\fP = 0x15000, \fBAV_CODEC_ID_MP3\fP, \fBAV_CODEC_ID_AAC\fP, \fBAV_CODEC_ID_AC3\fP, \fBAV_CODEC_ID_DTS\fP, \fBAV_CODEC_ID_VORBIS\fP, \fBAV_CODEC_ID_DVAUDIO\fP, \fBAV_CODEC_ID_WMAV1\fP, \fBAV_CODEC_ID_WMAV2\fP, \fBAV_CODEC_ID_MACE3\fP, \fBAV_CODEC_ID_MACE6\fP, \fBAV_CODEC_ID_VMDAUDIO\fP, \fBAV_CODEC_ID_FLAC\fP, \fBAV_CODEC_ID_MP3ADU\fP, \fBAV_CODEC_ID_MP3ON4\fP, \fBAV_CODEC_ID_SHORTEN\fP, \fBAV_CODEC_ID_ALAC\fP, \fBAV_CODEC_ID_WESTWOOD_SND1\fP, \fBAV_CODEC_ID_GSM\fP, \fBAV_CODEC_ID_QDM2\fP, \fBAV_CODEC_ID_COOK\fP, \fBAV_CODEC_ID_TRUESPEECH\fP, \fBAV_CODEC_ID_TTA\fP, \fBAV_CODEC_ID_SMACKAUDIO\fP, \fBAV_CODEC_ID_QCELP\fP, \fBAV_CODEC_ID_WAVPACK\fP, \fBAV_CODEC_ID_DSICINAUDIO\fP, \fBAV_CODEC_ID_IMC\fP, \fBAV_CODEC_ID_MUSEPACK7\fP, \fBAV_CODEC_ID_MLP\fP, \fBAV_CODEC_ID_GSM_MS\fP, \fBAV_CODEC_ID_ATRAC3\fP, \fBAV_CODEC_ID_VOXWARE\fP, \fBAV_CODEC_ID_APE\fP, \fBAV_CODEC_ID_NELLYMOSER\fP, \fBAV_CODEC_ID_MUSEPACK8\fP, \fBAV_CODEC_ID_SPEEX\fP, \fBAV_CODEC_ID_WMAVOICE\fP, \fBAV_CODEC_ID_WMAPRO\fP, \fBAV_CODEC_ID_WMALOSSLESS\fP, \fBAV_CODEC_ID_ATRAC3P\fP, \fBAV_CODEC_ID_EAC3\fP, \fBAV_CODEC_ID_SIPR\fP, \fBAV_CODEC_ID_MP1\fP, \fBAV_CODEC_ID_TWINVQ\fP, \fBAV_CODEC_ID_TRUEHD\fP, \fBAV_CODEC_ID_MP4ALS\fP, \fBAV_CODEC_ID_ATRAC1\fP, \fBAV_CODEC_ID_BINKAUDIO_RDFT\fP, \fBAV_CODEC_ID_BINKAUDIO_DCT\fP, \fBAV_CODEC_ID_AAC_LATM\fP, \fBAV_CODEC_ID_QDMC\fP, \fBAV_CODEC_ID_CELT\fP, \fBAV_CODEC_ID_G723_1\fP, \fBAV_CODEC_ID_G729\fP, \fBAV_CODEC_ID_8SVX_EXP\fP, \fBAV_CODEC_ID_8SVX_FIB\fP, \fBAV_CODEC_ID_BMV_AUDIO\fP, \fBAV_CODEC_ID_RALF\fP, \fBAV_CODEC_ID_IAC\fP, \fBAV_CODEC_ID_ILBC\fP, \fBAV_CODEC_ID_OPUS_DEPRECATED\fP, \fBAV_CODEC_ID_COMFORT_NOISE\fP, \fBAV_CODEC_ID_TAK_DEPRECATED\fP, \fBAV_CODEC_ID_METASOUND\fP, \fBAV_CODEC_ID_FFWAVESYNTH\fP = MKBETAG('F','F','W','S'), \fBAV_CODEC_ID_SONIC\fP = MKBETAG('S','O','N','C'), \fBAV_CODEC_ID_SONIC_LS\fP = MKBETAG('S','O','N','L'), \fBAV_CODEC_ID_PAF_AUDIO\fP = MKBETAG('P','A','F','A'), \fBAV_CODEC_ID_OPUS\fP = MKBETAG('O','P','U','S'), \fBAV_CODEC_ID_TAK\fP = MKBETAG('t','B','a','K'), \fBAV_CODEC_ID_EVRC\fP = MKBETAG('s','e','v','c'), \fBAV_CODEC_ID_SMV\fP = MKBETAG('s','s','m','v'), \fBAV_CODEC_ID_FIRST_SUBTITLE\fP = 0x17000, \fBAV_CODEC_ID_DVD_SUBTITLE\fP = 0x17000, \fBAV_CODEC_ID_DVB_SUBTITLE\fP, \fBAV_CODEC_ID_TEXT\fP, \fBAV_CODEC_ID_XSUB\fP, \fBAV_CODEC_ID_SSA\fP, \fBAV_CODEC_ID_MOV_TEXT\fP, \fBAV_CODEC_ID_HDMV_PGS_SUBTITLE\fP, \fBAV_CODEC_ID_DVB_TELETEXT\fP, \fBAV_CODEC_ID_SRT\fP, \fBAV_CODEC_ID_MICRODVD\fP = MKBETAG('m','D','V','D'), \fBAV_CODEC_ID_EIA_608\fP = MKBETAG('c','6','0','8'), \fBAV_CODEC_ID_JACOSUB\fP = MKBETAG('J','S','U','B'), \fBAV_CODEC_ID_SAMI\fP = MKBETAG('S','A','M','I'), \fBAV_CODEC_ID_REALTEXT\fP = MKBETAG('R','T','X','T'), \fBAV_CODEC_ID_SUBVIEWER1\fP = MKBETAG('S','b','V','1'), \fBAV_CODEC_ID_SUBVIEWER\fP = MKBETAG('S','u','b','V'), \fBAV_CODEC_ID_SUBRIP\fP = MKBETAG('S','R','i','p'), \fBAV_CODEC_ID_WEBVTT\fP = MKBETAG('W','V','T','T'), \fBAV_CODEC_ID_MPL2\fP = MKBETAG('M','P','L','2'), \fBAV_CODEC_ID_VPLAYER\fP = MKBETAG('V','P','l','r'), \fBAV_CODEC_ID_PJS\fP = MKBETAG('P','h','J','S'), \fBAV_CODEC_ID_ASS\fP = MKBETAG('A','S','S',' '), \fBAV_CODEC_ID_FIRST_UNKNOWN\fP = 0x18000, \fBAV_CODEC_ID_TTF\fP = 0x18000, \fBAV_CODEC_ID_BINTEXT\fP = MKBETAG('B','T','X','T'), \fBAV_CODEC_ID_XBIN\fP = MKBETAG('X','B','I','N'), \fBAV_CODEC_ID_IDF\fP = MKBETAG( 0 ,'I','D','F'), \fBAV_CODEC_ID_OTF\fP = MKBETAG( 0 ,'O','T','F'), \fBAV_CODEC_ID_SMPTE_KLV\fP = MKBETAG('K','L','V','A'), \fBAV_CODEC_ID_DVD_NAV\fP = MKBETAG('D','N','A','V'), \fBAV_CODEC_ID_TIMED_ID3\fP = MKBETAG('T','I','D','3'), \fBAV_CODEC_ID_PROBE\fP = 0x19000, \fBAV_CODEC_ID_MPEG2TS\fP = 0x20000, \fBAV_CODEC_ID_MPEG4SYSTEMS\fP = 0x20001, \fBAV_CODEC_ID_FFMETADATA\fP = 0x21000, \fBCODEC_ID_NONE\fP = AV_CODEC_ID_NONE, \fBCODEC_ID_MPEG1VIDEO\fP, \fBCODEC_ID_MPEG2VIDEO\fP, \fBCODEC_ID_MPEG2VIDEO_XVMC\fP, \fBCODEC_ID_H261\fP, \fBCODEC_ID_H263\fP, \fBCODEC_ID_RV10\fP, \fBCODEC_ID_RV20\fP, \fBCODEC_ID_MJPEG\fP, \fBCODEC_ID_MJPEGB\fP, \fBCODEC_ID_LJPEG\fP, \fBCODEC_ID_SP5X\fP, \fBCODEC_ID_JPEGLS\fP, \fBCODEC_ID_MPEG4\fP, \fBCODEC_ID_RAWVIDEO\fP, \fBCODEC_ID_MSMPEG4V1\fP, \fBCODEC_ID_MSMPEG4V2\fP, \fBCODEC_ID_MSMPEG4V3\fP, \fBCODEC_ID_WMV1\fP, \fBCODEC_ID_WMV2\fP, \fBCODEC_ID_H263P\fP, \fBCODEC_ID_H263I\fP, \fBCODEC_ID_FLV1\fP, \fBCODEC_ID_SVQ1\fP, \fBCODEC_ID_SVQ3\fP, \fBCODEC_ID_DVVIDEO\fP, \fBCODEC_ID_HUFFYUV\fP, \fBCODEC_ID_CYUV\fP, \fBCODEC_ID_H264\fP, \fBCODEC_ID_INDEO3\fP, \fBCODEC_ID_VP3\fP, \fBCODEC_ID_THEORA\fP, \fBCODEC_ID_ASV1\fP, \fBCODEC_ID_ASV2\fP, \fBCODEC_ID_FFV1\fP, \fBCODEC_ID_4XM\fP, \fBCODEC_ID_VCR1\fP, \fBCODEC_ID_CLJR\fP, \fBCODEC_ID_MDEC\fP, \fBCODEC_ID_ROQ\fP, \fBCODEC_ID_INTERPLAY_VIDEO\fP, \fBCODEC_ID_XAN_WC3\fP, \fBCODEC_ID_XAN_WC4\fP, \fBCODEC_ID_RPZA\fP, \fBCODEC_ID_CINEPAK\fP, \fBCODEC_ID_WS_VQA\fP, \fBCODEC_ID_MSRLE\fP, \fBCODEC_ID_MSVIDEO1\fP, \fBCODEC_ID_IDCIN\fP, \fBCODEC_ID_8BPS\fP, \fBCODEC_ID_SMC\fP, \fBCODEC_ID_FLIC\fP, \fBCODEC_ID_TRUEMOTION1\fP, \fBCODEC_ID_VMDVIDEO\fP, \fBCODEC_ID_MSZH\fP, \fBCODEC_ID_ZLIB\fP, \fBCODEC_ID_QTRLE\fP, \fBCODEC_ID_TSCC\fP, \fBCODEC_ID_ULTI\fP, \fBCODEC_ID_QDRAW\fP, \fBCODEC_ID_VIXL\fP, \fBCODEC_ID_QPEG\fP, \fBCODEC_ID_PNG\fP, \fBCODEC_ID_PPM\fP, \fBCODEC_ID_PBM\fP, \fBCODEC_ID_PGM\fP, \fBCODEC_ID_PGMYUV\fP, \fBCODEC_ID_PAM\fP, \fBCODEC_ID_FFVHUFF\fP, \fBCODEC_ID_RV30\fP, \fBCODEC_ID_RV40\fP, \fBCODEC_ID_VC1\fP, \fBCODEC_ID_WMV3\fP, \fBCODEC_ID_LOCO\fP, \fBCODEC_ID_WNV1\fP, \fBCODEC_ID_AASC\fP, \fBCODEC_ID_INDEO2\fP, \fBCODEC_ID_FRAPS\fP, \fBCODEC_ID_TRUEMOTION2\fP, \fBCODEC_ID_BMP\fP, \fBCODEC_ID_CSCD\fP, \fBCODEC_ID_MMVIDEO\fP, \fBCODEC_ID_ZMBV\fP, \fBCODEC_ID_AVS\fP, \fBCODEC_ID_SMACKVIDEO\fP, \fBCODEC_ID_NUV\fP, \fBCODEC_ID_KMVC\fP, \fBCODEC_ID_FLASHSV\fP, \fBCODEC_ID_CAVS\fP, \fBCODEC_ID_JPEG2000\fP, \fBCODEC_ID_VMNC\fP, \fBCODEC_ID_VP5\fP, \fBCODEC_ID_VP6\fP, \fBCODEC_ID_VP6F\fP, \fBCODEC_ID_TARGA\fP, \fBCODEC_ID_DSICINVIDEO\fP, \fBCODEC_ID_TIERTEXSEQVIDEO\fP, \fBCODEC_ID_TIFF\fP, \fBCODEC_ID_GIF\fP, \fBCODEC_ID_DXA\fP, \fBCODEC_ID_DNXHD\fP, \fBCODEC_ID_THP\fP, \fBCODEC_ID_SGI\fP, \fBCODEC_ID_C93\fP, \fBCODEC_ID_BETHSOFTVID\fP, \fBCODEC_ID_PTX\fP, \fBCODEC_ID_TXD\fP, \fBCODEC_ID_VP6A\fP, \fBCODEC_ID_AMV\fP, \fBCODEC_ID_VB\fP, \fBCODEC_ID_PCX\fP, \fBCODEC_ID_SUNRAST\fP, \fBCODEC_ID_INDEO4\fP, \fBCODEC_ID_INDEO5\fP, \fBCODEC_ID_MIMIC\fP, \fBCODEC_ID_RL2\fP, \fBCODEC_ID_ESCAPE124\fP, \fBCODEC_ID_DIRAC\fP, \fBCODEC_ID_BFI\fP, \fBCODEC_ID_CMV\fP, \fBCODEC_ID_MOTIONPIXELS\fP, \fBCODEC_ID_TGV\fP, \fBCODEC_ID_TGQ\fP, \fBCODEC_ID_TQI\fP, \fBCODEC_ID_AURA\fP, \fBCODEC_ID_AURA2\fP, \fBCODEC_ID_V210X\fP, \fBCODEC_ID_TMV\fP, \fBCODEC_ID_V210\fP, \fBCODEC_ID_DPX\fP, \fBCODEC_ID_MAD\fP, \fBCODEC_ID_FRWU\fP, \fBCODEC_ID_FLASHSV2\fP, \fBCODEC_ID_CDGRAPHICS\fP, \fBCODEC_ID_R210\fP, \fBCODEC_ID_ANM\fP, \fBCODEC_ID_BINKVIDEO\fP, \fBCODEC_ID_IFF_ILBM\fP, \fBCODEC_ID_IFF_BYTERUN1\fP, \fBCODEC_ID_KGV1\fP, \fBCODEC_ID_YOP\fP, \fBCODEC_ID_VP8\fP, \fBCODEC_ID_PICTOR\fP, \fBCODEC_ID_ANSI\fP, \fBCODEC_ID_A64_MULTI\fP, \fBCODEC_ID_A64_MULTI5\fP, \fBCODEC_ID_R10K\fP, \fBCODEC_ID_MXPEG\fP, \fBCODEC_ID_LAGARITH\fP, \fBCODEC_ID_PRORES\fP, \fBCODEC_ID_JV\fP, \fBCODEC_ID_DFA\fP, \fBCODEC_ID_WMV3IMAGE\fP, \fBCODEC_ID_VC1IMAGE\fP, \fBCODEC_ID_UTVIDEO\fP, \fBCODEC_ID_BMV_VIDEO\fP, \fBCODEC_ID_VBLE\fP, \fBCODEC_ID_DXTORY\fP, \fBCODEC_ID_V410\fP, \fBCODEC_ID_XWD\fP, \fBCODEC_ID_CDXL\fP, \fBCODEC_ID_XBM\fP, \fBCODEC_ID_ZEROCODEC\fP, \fBCODEC_ID_MSS1\fP, \fBCODEC_ID_MSA1\fP, \fBCODEC_ID_TSCC2\fP, \fBCODEC_ID_MTS2\fP, \fBCODEC_ID_CLLC\fP, \fBCODEC_ID_Y41P\fP = MKBETAG('Y','4','1','P'), \fBCODEC_ID_ESCAPE130\fP = MKBETAG('E','1','3','0'), \fBCODEC_ID_EXR\fP = MKBETAG('0','E','X','R'), \fBCODEC_ID_AVRP\fP = MKBETAG('A','V','R','P'), \fBCODEC_ID_G2M\fP = MKBETAG( 0 ,'G','2','M'), \fBCODEC_ID_AVUI\fP = MKBETAG('A','V','U','I'), \fBCODEC_ID_AYUV\fP = MKBETAG('A','Y','U','V'), \fBCODEC_ID_V308\fP = MKBETAG('V','3','0','8'), \fBCODEC_ID_V408\fP = MKBETAG('V','4','0','8'), \fBCODEC_ID_YUV4\fP = MKBETAG('Y','U','V','4'), \fBCODEC_ID_SANM\fP = MKBETAG('S','A','N','M'), \fBCODEC_ID_PAF_VIDEO\fP = MKBETAG('P','A','F','V'), \fBCODEC_ID_SNOW\fP = AV_CODEC_ID_SNOW, \fBCODEC_ID_FIRST_AUDIO\fP = 0x10000, \fBCODEC_ID_PCM_S16LE\fP = 0x10000, \fBCODEC_ID_PCM_S16BE\fP, \fBCODEC_ID_PCM_U16LE\fP, \fBCODEC_ID_PCM_U16BE\fP, \fBCODEC_ID_PCM_S8\fP, \fBCODEC_ID_PCM_U8\fP, \fBCODEC_ID_PCM_MULAW\fP, \fBCODEC_ID_PCM_ALAW\fP, \fBCODEC_ID_PCM_S32LE\fP, \fBCODEC_ID_PCM_S32BE\fP, \fBCODEC_ID_PCM_U32LE\fP, \fBCODEC_ID_PCM_U32BE\fP, \fBCODEC_ID_PCM_S24LE\fP, \fBCODEC_ID_PCM_S24BE\fP, \fBCODEC_ID_PCM_U24LE\fP, \fBCODEC_ID_PCM_U24BE\fP, \fBCODEC_ID_PCM_S24DAUD\fP, \fBCODEC_ID_PCM_ZORK\fP, \fBCODEC_ID_PCM_S16LE_PLANAR\fP, \fBCODEC_ID_PCM_DVD\fP, \fBCODEC_ID_PCM_F32BE\fP, \fBCODEC_ID_PCM_F32LE\fP, \fBCODEC_ID_PCM_F64BE\fP, \fBCODEC_ID_PCM_F64LE\fP, \fBCODEC_ID_PCM_BLURAY\fP, \fBCODEC_ID_PCM_LXF\fP, \fBCODEC_ID_S302M\fP, \fBCODEC_ID_PCM_S8_PLANAR\fP, \fBCODEC_ID_ADPCM_IMA_QT\fP = 0x11000, \fBCODEC_ID_ADPCM_IMA_WAV\fP, \fBCODEC_ID_ADPCM_IMA_DK3\fP, \fBCODEC_ID_ADPCM_IMA_DK4\fP, \fBCODEC_ID_ADPCM_IMA_WS\fP, \fBCODEC_ID_ADPCM_IMA_SMJPEG\fP, \fBCODEC_ID_ADPCM_MS\fP, \fBCODEC_ID_ADPCM_4XM\fP, \fBCODEC_ID_ADPCM_XA\fP, \fBCODEC_ID_ADPCM_ADX\fP, \fBCODEC_ID_ADPCM_EA\fP, \fBCODEC_ID_ADPCM_G726\fP, \fBCODEC_ID_ADPCM_CT\fP, \fBCODEC_ID_ADPCM_SWF\fP, \fBCODEC_ID_ADPCM_YAMAHA\fP, \fBCODEC_ID_ADPCM_SBPRO_4\fP, \fBCODEC_ID_ADPCM_SBPRO_3\fP, \fBCODEC_ID_ADPCM_SBPRO_2\fP, \fBCODEC_ID_ADPCM_THP\fP, \fBCODEC_ID_ADPCM_IMA_AMV\fP, \fBCODEC_ID_ADPCM_EA_R1\fP, \fBCODEC_ID_ADPCM_EA_R3\fP, \fBCODEC_ID_ADPCM_EA_R2\fP, \fBCODEC_ID_ADPCM_IMA_EA_SEAD\fP, \fBCODEC_ID_ADPCM_IMA_EA_EACS\fP, \fBCODEC_ID_ADPCM_EA_XAS\fP, \fBCODEC_ID_ADPCM_EA_MAXIS_XA\fP, \fBCODEC_ID_ADPCM_IMA_ISS\fP, \fBCODEC_ID_ADPCM_G722\fP, \fBCODEC_ID_ADPCM_IMA_APC\fP, \fBCODEC_ID_VIMA\fP = MKBETAG('V','I','M','A'), \fBCODEC_ID_AMR_NB\fP = 0x12000, \fBCODEC_ID_AMR_WB\fP, \fBCODEC_ID_RA_144\fP = 0x13000, \fBCODEC_ID_RA_288\fP, \fBCODEC_ID_ROQ_DPCM\fP = 0x14000, \fBCODEC_ID_INTERPLAY_DPCM\fP, \fBCODEC_ID_XAN_DPCM\fP, \fBCODEC_ID_SOL_DPCM\fP, \fBCODEC_ID_MP2\fP = 0x15000, \fBCODEC_ID_MP3\fP, \fBCODEC_ID_AAC\fP, \fBCODEC_ID_AC3\fP, \fBCODEC_ID_DTS\fP, \fBCODEC_ID_VORBIS\fP, \fBCODEC_ID_DVAUDIO\fP, \fBCODEC_ID_WMAV1\fP, \fBCODEC_ID_WMAV2\fP, \fBCODEC_ID_MACE3\fP, \fBCODEC_ID_MACE6\fP, \fBCODEC_ID_VMDAUDIO\fP, \fBCODEC_ID_FLAC\fP, \fBCODEC_ID_MP3ADU\fP, \fBCODEC_ID_MP3ON4\fP, \fBCODEC_ID_SHORTEN\fP, \fBCODEC_ID_ALAC\fP, \fBCODEC_ID_WESTWOOD_SND1\fP, \fBCODEC_ID_GSM\fP, \fBCODEC_ID_QDM2\fP, \fBCODEC_ID_COOK\fP, \fBCODEC_ID_TRUESPEECH\fP, \fBCODEC_ID_TTA\fP, \fBCODEC_ID_SMACKAUDIO\fP, \fBCODEC_ID_QCELP\fP, \fBCODEC_ID_WAVPACK\fP, \fBCODEC_ID_DSICINAUDIO\fP, \fBCODEC_ID_IMC\fP, \fBCODEC_ID_MUSEPACK7\fP, \fBCODEC_ID_MLP\fP, \fBCODEC_ID_GSM_MS\fP, \fBCODEC_ID_ATRAC3\fP, \fBCODEC_ID_VOXWARE\fP, \fBCODEC_ID_APE\fP, \fBCODEC_ID_NELLYMOSER\fP, \fBCODEC_ID_MUSEPACK8\fP, \fBCODEC_ID_SPEEX\fP, \fBCODEC_ID_WMAVOICE\fP, \fBCODEC_ID_WMAPRO\fP, \fBCODEC_ID_WMALOSSLESS\fP, \fBCODEC_ID_ATRAC3P\fP, \fBCODEC_ID_EAC3\fP, \fBCODEC_ID_SIPR\fP, \fBCODEC_ID_MP1\fP, \fBCODEC_ID_TWINVQ\fP, \fBCODEC_ID_TRUEHD\fP, \fBCODEC_ID_MP4ALS\fP, \fBCODEC_ID_ATRAC1\fP, \fBCODEC_ID_BINKAUDIO_RDFT\fP, \fBCODEC_ID_BINKAUDIO_DCT\fP, \fBCODEC_ID_AAC_LATM\fP, \fBCODEC_ID_QDMC\fP, \fBCODEC_ID_CELT\fP, \fBCODEC_ID_G723_1\fP, \fBCODEC_ID_G729\fP, \fBCODEC_ID_8SVX_EXP\fP, \fBCODEC_ID_8SVX_FIB\fP, \fBCODEC_ID_BMV_AUDIO\fP, \fBCODEC_ID_RALF\fP, \fBCODEC_ID_IAC\fP, \fBCODEC_ID_ILBC\fP, \fBCODEC_ID_FFWAVESYNTH\fP = MKBETAG('F','F','W','S'), \fBCODEC_ID_SONIC\fP = MKBETAG('S','O','N','C'), \fBCODEC_ID_SONIC_LS\fP = MKBETAG('S','O','N','L'), \fBCODEC_ID_PAF_AUDIO\fP = MKBETAG('P','A','F','A'), \fBCODEC_ID_OPUS\fP = MKBETAG('O','P','U','S'), \fBCODEC_ID_FIRST_SUBTITLE\fP = 0x17000, \fBCODEC_ID_DVD_SUBTITLE\fP = 0x17000, \fBCODEC_ID_DVB_SUBTITLE\fP, \fBCODEC_ID_TEXT\fP, \fBCODEC_ID_XSUB\fP, \fBCODEC_ID_SSA\fP, \fBCODEC_ID_MOV_TEXT\fP, \fBCODEC_ID_HDMV_PGS_SUBTITLE\fP, \fBCODEC_ID_DVB_TELETEXT\fP, \fBCODEC_ID_SRT\fP, \fBCODEC_ID_MICRODVD\fP = MKBETAG('m','D','V','D'), \fBCODEC_ID_EIA_608\fP = MKBETAG('c','6','0','8'), \fBCODEC_ID_JACOSUB\fP = MKBETAG('J','S','U','B'), \fBCODEC_ID_SAMI\fP = MKBETAG('S','A','M','I'), \fBCODEC_ID_REALTEXT\fP = MKBETAG('R','T','X','T'), \fBCODEC_ID_SUBVIEWER\fP = MKBETAG('S','u','b','V'), \fBCODEC_ID_FIRST_UNKNOWN\fP = 0x18000, \fBCODEC_ID_TTF\fP = 0x18000, \fBCODEC_ID_BINTEXT\fP = MKBETAG('B','T','X','T'), \fBCODEC_ID_XBIN\fP = MKBETAG('X','B','I','N'), \fBCODEC_ID_IDF\fP = MKBETAG( 0 ,'I','D','F'), \fBCODEC_ID_OTF\fP = MKBETAG( 0 ,'O','T','F'), \fBCODEC_ID_PROBE\fP = 0x19000, \fBCODEC_ID_MPEG2TS\fP = 0x20000, \fBCODEC_ID_MPEG4SYSTEMS\fP = 0x20001, \fBCODEC_ID_FFMETADATA\fP = 0x21000 }"
.br
.ti -1c
.RI "enum \fBMotion_Est_ID\fP { \fBME_ZERO\fP = 1, \fBME_FULL\fP, \fBME_LOG\fP, \fBME_PHODS\fP, \fBME_EPZS\fP, \fBME_X1\fP, \fBME_HEX\fP, \fBME_UMH\fP, \fBME_TESA\fP, \fBME_ITER\fP =50 }"
.br
.ti -1c
.RI "enum \fBAVDiscard\fP { \fBAVDISCARD_NONE\fP =-16, \fBAVDISCARD_DEFAULT\fP = 0, \fBAVDISCARD_NONREF\fP = 8, \fBAVDISCARD_BIDIR\fP = 16, \fBAVDISCARD_NONKEY\fP = 32, \fBAVDISCARD_ALL\fP = 48 }"
.br
.ti -1c
.RI "enum \fBAVColorPrimaries\fP { \fBAVCOL_PRI_BT709\fP = 1, \fBAVCOL_PRI_UNSPECIFIED\fP = 2, \fBAVCOL_PRI_BT470M\fP = 4, \fBAVCOL_PRI_BT470BG\fP = 5, \fBAVCOL_PRI_SMPTE170M\fP = 6, \fBAVCOL_PRI_SMPTE240M\fP = 7, \fBAVCOL_PRI_FILM\fP = 8, \fBAVCOL_PRI_BT2020\fP = 9, \fBAVCOL_PRI_NB\fP }"
.br
.ti -1c
.RI "enum \fBAVColorTransferCharacteristic\fP { \fBAVCOL_TRC_BT709\fP = 1, \fBAVCOL_TRC_UNSPECIFIED\fP = 2, \fBAVCOL_TRC_GAMMA22\fP = 4, \fBAVCOL_TRC_GAMMA28\fP = 5, \fBAVCOL_TRC_SMPTE170M\fP = 6, \fBAVCOL_TRC_SMPTE240M\fP = 7, \fBAVCOL_TRC_LINEAR\fP = 8, \fBAVCOL_TRC_LOG\fP = 9, \fBAVCOL_TRC_LOG_SQRT\fP = 10, \fBAVCOL_TRC_IEC61966_2_4\fP = 11, \fBAVCOL_TRC_BT1361_ECG\fP = 12, \fBAVCOL_TRC_IEC61966_2_1\fP = 13, \fBAVCOL_TRC_BT2020_10\fP = 14, \fBAVCOL_TRC_BT2020_12\fP = 15, \fBAVCOL_TRC_NB\fP }"
.br
.ti -1c
.RI "enum \fBAVChromaLocation\fP { \fBAVCHROMA_LOC_UNSPECIFIED\fP = 0, \fBAVCHROMA_LOC_LEFT\fP = 1, \fBAVCHROMA_LOC_CENTER\fP = 2, \fBAVCHROMA_LOC_TOPLEFT\fP = 3, \fBAVCHROMA_LOC_TOP\fP = 4, \fBAVCHROMA_LOC_BOTTOMLEFT\fP = 5, \fBAVCHROMA_LOC_BOTTOM\fP = 6, \fBAVCHROMA_LOC_NB\fP }"
.br
.ti -1c
.RI "enum \fBAVAudioServiceType\fP { \fBAV_AUDIO_SERVICE_TYPE_MAIN\fP = 0, \fBAV_AUDIO_SERVICE_TYPE_EFFECTS\fP = 1, \fBAV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED\fP = 2, \fBAV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED\fP = 3, \fBAV_AUDIO_SERVICE_TYPE_DIALOGUE\fP = 4, \fBAV_AUDIO_SERVICE_TYPE_COMMENTARY\fP = 5, \fBAV_AUDIO_SERVICE_TYPE_EMERGENCY\fP = 6, \fBAV_AUDIO_SERVICE_TYPE_VOICE_OVER\fP = 7, \fBAV_AUDIO_SERVICE_TYPE_KARAOKE\fP = 8, \fBAV_AUDIO_SERVICE_TYPE_NB\fP }"
.br
.ti -1c
.RI "enum \fBAVPacketSideDataType\fP { \fBAV_PKT_DATA_PALETTE\fP, \fBAV_PKT_DATA_NEW_EXTRADATA\fP, \fBAV_PKT_DATA_PARAM_CHANGE\fP, \fBAV_PKT_DATA_H263_MB_INFO\fP, \fBAV_PKT_DATA_SKIP_SAMPLES\fP =70, \fBAV_PKT_DATA_JP_DUALMONO\fP, \fBAV_PKT_DATA_STRINGS_METADATA\fP, \fBAV_PKT_DATA_SUBTITLE_POSITION\fP, \fBAV_PKT_DATA_MATROSKA_BLOCKADDITIONAL\fP, \fBAV_PKT_DATA_WEBVTT_IDENTIFIER\fP, \fBAV_PKT_DATA_WEBVTT_SETTINGS\fP, \fBAV_PKT_DATA_METADATA_UPDATE\fP }"
.br
.ti -1c
.RI "enum \fBAVSideDataParamChangeFlags\fP { \fBAV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT\fP = 0x0001, \fBAV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT\fP = 0x0002, \fBAV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE\fP = 0x0004, \fBAV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS\fP = 0x0008 }"
.br
.ti -1c
.RI "enum \fBAVFieldOrder\fP { \fBAV_FIELD_UNKNOWN\fP, \fBAV_FIELD_PROGRESSIVE\fP, \fBAV_FIELD_TT\fP, \fBAV_FIELD_BB\fP, \fBAV_FIELD_TB\fP, \fBAV_FIELD_BT\fP }"
.br
.ti -1c
.RI "enum \fBAVSubtitleType\fP { \fBSUBTITLE_NONE\fP, \fBSUBTITLE_BITMAP\fP, \fBSUBTITLE_TEXT\fP, \fBSUBTITLE_ASS\fP }"
.br
.ti -1c
.RI "enum \fBAVPictureStructure\fP { \fBAV_PICTURE_STRUCTURE_UNKNOWN\fP, \fBAV_PICTURE_STRUCTURE_TOP_FIELD\fP, \fBAV_PICTURE_STRUCTURE_BOTTOM_FIELD\fP, \fBAV_PICTURE_STRUCTURE_FRAME\fP }"
.br
.ti -1c
.RI "enum \fBAVLockOp\fP { \fBAV_LOCK_CREATE\fP, \fBAV_LOCK_OBTAIN\fP, \fBAV_LOCK_RELEASE\fP, \fBAV_LOCK_DESTROY\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBAVRational\fP \fBav_codec_get_pkt_timebase\fP (\fBconst\fP \fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_codec_set_pkt_timebase\fP (\fBAVCodecContext\fP *avctx, \fBAVRational\fP val)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVCodecDescriptor\fP * \fBav_codec_get_codec_descriptor\fP (\fBconst\fP \fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_codec_set_codec_descriptor\fP (\fBAVCodecContext\fP *avctx, \fBconst\fP \fBAVCodecDescriptor\fP *\fBdesc\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_codec_get_lowres\fP (\fBconst\fP \fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_codec_set_lowres\fP (\fBAVCodecContext\fP *avctx, \fBint\fP val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_codec_get_seek_preroll\fP (\fBconst\fP \fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_codec_set_seek_preroll\fP (\fBAVCodecContext\fP *avctx, \fBint\fP val)"
.br
.ti -1c
.RI "\fBuint16_t\fP * \fBav_codec_get_chroma_intra_matrix\fP (\fBconst\fP \fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_codec_set_chroma_intra_matrix\fP (\fBAVCodecContext\fP *avctx, \fBuint16_t\fP *val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_codec_get_max_lowres\fP (\fBconst\fP \fBAVCodec\fP *codec)"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBav_codec_next\fP (\fBconst\fP \fBAVCodec\fP *\fBc\fP)"
.br
.ti -1c
.RI "unsigned \fBavcodec_version\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBavcodec_configuration\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBavcodec_license\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_register\fP (\fBAVCodec\fP *codec)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_register_all\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBAVCodecContext\fP * \fBavcodec_alloc_context3\fP (\fBconst\fP \fBAVCodec\fP *codec)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_get_context_defaults3\fP (\fBAVCodecContext\fP *\fBs\fP, \fBconst\fP \fBAVCodec\fP *codec)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBavcodec_get_class\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBavcodec_get_frame_class\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBavcodec_get_subtitle_rect_class\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_copy_context\fP (\fBAVCodecContext\fP *dest, \fBconst\fP \fBAVCodecContext\fP *src)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_open2\fP (\fBAVCodecContext\fP *avctx, \fBconst\fP \fBAVCodec\fP *codec, \fBAVDictionary\fP **options)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_close\fP (\fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavsubtitle_free\fP (\fBAVSubtitle\fP *sub)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_destruct_packet\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_init_packet\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBint\fP \fBav_new_packet\fP (\fBAVPacket\fP *pkt, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_shrink_packet\fP (\fBAVPacket\fP *pkt, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_grow_packet\fP (\fBAVPacket\fP *pkt, \fBint\fP grow_by)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_from_data\fP (\fBAVPacket\fP *pkt, \fBuint8_t\fP *\fBdata\fP, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_dup_packet\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBint\fP \fBav_copy_packet\fP (\fBAVPacket\fP *dst, \fBAVPacket\fP *src)"
.br
.ti -1c
.RI "\fBint\fP \fBav_copy_packet_side_data\fP (\fBAVPacket\fP *dst, \fBAVPacket\fP *src)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_free_packet\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBuint8_t\fP * \fBav_packet_new_side_data\fP (\fBAVPacket\fP *pkt, enum \fBAVPacketSideDataType\fP type, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_shrink_side_data\fP (\fBAVPacket\fP *pkt, enum \fBAVPacketSideDataType\fP type, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBuint8_t\fP * \fBav_packet_get_side_data\fP (\fBAVPacket\fP *pkt, enum \fBAVPacketSideDataType\fP type, \fBint\fP *\fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_merge_side_data\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_split_side_data\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBuint8_t\fP * \fBav_packet_pack_dictionary\fP (\fBAVDictionary\fP *dict, \fBint\fP *\fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_unpack_dictionary\fP (\fBconst\fP \fBuint8_t\fP *\fBdata\fP, \fBint\fP \fBsize\fP, \fBAVDictionary\fP **dict)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_packet_free_side_data\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_ref\fP (\fBAVPacket\fP *dst, \fBAVPacket\fP *src)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_packet_unref\fP (\fBAVPacket\fP *pkt)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_packet_move_ref\fP (\fBAVPacket\fP *dst, \fBAVPacket\fP *src)"
.br
.ti -1c
.RI "\fBint\fP \fBav_packet_copy_props\fP (\fBAVPacket\fP *dst, \fBconst\fP \fBAVPacket\fP *src)"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBavcodec_find_decoder\fP (enum \fBAVCodecID\fP id)"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBavcodec_find_decoder_by_name\fP (\fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBavcodec_default_get_buffer\fP (\fBAVCodecContext\fP *\fBs\fP, \fBAVFrame\fP *pic)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBavcodec_default_release_buffer\fP (\fBAVCodecContext\fP *\fBs\fP, \fBAVFrame\fP *pic)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBavcodec_default_reget_buffer\fP (\fBAVCodecContext\fP *\fBs\fP, \fBAVFrame\fP *pic)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_default_get_buffer2\fP (\fBAVCodecContext\fP *\fBs\fP, \fBAVFrame\fP *frame, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP unsigned \fBavcodec_get_edge_width\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_align_dimensions\fP (\fBAVCodecContext\fP *\fBs\fP, \fBint\fP *width, \fBint\fP *height)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_align_dimensions2\fP (\fBAVCodecContext\fP *\fBs\fP, \fBint\fP *width, \fBint\fP *height, \fBint\fP linesize_align[\fBAV_NUM_DATA_POINTERS\fP])"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_enum_to_chroma_pos\fP (\fBint\fP *xpos, \fBint\fP *ypos, enum \fBAVChromaLocation\fP pos)"
.br
.ti -1c
.RI "enum \fBAVChromaLocation\fP \fBavcodec_chroma_pos_to_enum\fP (\fBint\fP xpos, \fBint\fP ypos)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBavcodec_decode_audio3\fP (\fBAVCodecContext\fP *avctx, \fBint16_t\fP *\fBsamples\fP, \fBint\fP *frame_size_ptr, \fBAVPacket\fP *avpkt)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_decode_audio4\fP (\fBAVCodecContext\fP *avctx, \fBAVFrame\fP *frame, \fBint\fP *got_frame_ptr, \fBconst\fP \fBAVPacket\fP *avpkt)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_decode_video2\fP (\fBAVCodecContext\fP *avctx, \fBAVFrame\fP *picture, \fBint\fP *got_picture_ptr, \fBconst\fP \fBAVPacket\fP *avpkt)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_decode_subtitle2\fP (\fBAVCodecContext\fP *avctx, \fBAVSubtitle\fP *sub, \fBint\fP *got_sub_ptr, \fBAVPacket\fP *avpkt)"
.br
.ti -1c
.RI "\fBAVCodecParser\fP * \fBav_parser_next\fP (\fBAVCodecParser\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_register_codec_parser\fP (\fBAVCodecParser\fP *parser)"
.br
.ti -1c
.RI "\fBAVCodecParserContext\fP * \fBav_parser_init\fP (\fBint\fP codec_id)"
.br
.ti -1c
.RI "\fBint\fP \fBav_parser_parse2\fP (\fBAVCodecParserContext\fP *\fBs\fP, \fBAVCodecContext\fP *avctx, \fBuint8_t\fP **poutbuf, \fBint\fP *poutbuf_size, \fBconst\fP \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBint64_t\fP pts, \fBint64_t\fP dts, \fBint64_t\fP pos)"
.br
.ti -1c
.RI "\fBint\fP \fBav_parser_change\fP (\fBAVCodecParserContext\fP *\fBs\fP, \fBAVCodecContext\fP *avctx, \fBuint8_t\fP **poutbuf, \fBint\fP *poutbuf_size, \fBconst\fP \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBint\fP keyframe)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_parser_close\fP (\fBAVCodecParserContext\fP *\fBs\fP)"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBavcodec_find_encoder\fP (enum \fBAVCodecID\fP id)"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBavcodec_find_encoder_by_name\fP (\fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBattribute_deprecated\fP \fBavcodec_encode_audio\fP (\fBAVCodecContext\fP *avctx, \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBconst\fP short *\fBsamples\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_encode_audio2\fP (\fBAVCodecContext\fP *avctx, \fBAVPacket\fP *avpkt, \fBconst\fP \fBAVFrame\fP *frame, \fBint\fP *got_packet_ptr)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBavcodec_encode_video\fP (\fBAVCodecContext\fP *avctx, \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBconst\fP \fBAVFrame\fP *pict)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_encode_video2\fP (\fBAVCodecContext\fP *avctx, \fBAVPacket\fP *avpkt, \fBconst\fP \fBAVFrame\fP *frame, \fBint\fP *got_packet_ptr)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_encode_subtitle\fP (\fBAVCodecContext\fP *avctx, \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBconst\fP \fBAVSubtitle\fP *sub)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBReSampleContext\fP * \fBav_audio_resample_init\fP (\fBint\fP output_channels, \fBint\fP input_channels, \fBint\fP output_rate, \fBint\fP input_rate, enum \fBAVSampleFormat\fP sample_fmt_out, enum \fBAVSampleFormat\fP sample_fmt_in, \fBint\fP filter_length, \fBint\fP log2_phase_count, \fBint\fP linear, double cutoff)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBaudio_resample\fP (\fBReSampleContext\fP *\fBs\fP, short *\fBoutput\fP, short *input, \fBint\fP nb_samples)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBaudio_resample_close\fP (\fBReSampleContext\fP *\fBs\fP)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP struct AVResampleContext * \fBav_resample_init\fP (\fBint\fP out_rate, \fBint\fP in_rate, \fBint\fP filter_length, \fBint\fP log2_phase_count, \fBint\fP linear, double cutoff)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBav_resample\fP (struct AVResampleContext *\fBc\fP, short *dst, short *src, \fBint\fP *consumed, \fBint\fP src_size, \fBint\fP dst_size, \fBint\fP update_ctx)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_resample_compensate\fP (struct AVResampleContext *\fBc\fP, \fBint\fP sample_delta, \fBint\fP compensation_distance)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_resample_close\fP (struct AVResampleContext *\fBc\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBavpicture_alloc\fP (\fBAVPicture\fP *picture, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP width, \fBint\fP height)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavpicture_free\fP (\fBAVPicture\fP *picture)"
.br
.ti -1c
.RI "\fBint\fP \fBavpicture_fill\fP (\fBAVPicture\fP *picture, \fBconst\fP \fBuint8_t\fP *ptr, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP width, \fBint\fP height)"
.br
.ti -1c
.RI "\fBint\fP \fBavpicture_layout\fP (\fBconst\fP \fBAVPicture\fP *src, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP width, \fBint\fP height, unsigned char *dest, \fBint\fP dest_size)"
.br
.ti -1c
.RI "\fBint\fP \fBavpicture_get_size\fP (enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP width, \fBint\fP height)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBavpicture_deinterlace\fP (\fBAVPicture\fP *dst, \fBconst\fP \fBAVPicture\fP *src, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP width, \fBint\fP height)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_picture_copy\fP (\fBAVPicture\fP *dst, \fBconst\fP \fBAVPicture\fP *src, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP width, \fBint\fP height)"
.br
.ti -1c
.RI "\fBint\fP \fBav_picture_crop\fP (\fBAVPicture\fP *dst, \fBconst\fP \fBAVPicture\fP *src, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP top_band, \fBint\fP left_band)"
.br
.ti -1c
.RI "\fBint\fP \fBav_picture_pad\fP (\fBAVPicture\fP *dst, \fBconst\fP \fBAVPicture\fP *src, \fBint\fP height, \fBint\fP width, enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP padtop, \fBint\fP padbottom, \fBint\fP padleft, \fBint\fP padright, \fBint\fP *color)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_get_chroma_sub_sample\fP (enum \fBAVPixelFormat\fP pix_fmt, \fBint\fP *h_shift, \fBint\fP *v_shift)"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBavcodec_pix_fmt_to_codec_tag\fP (enum \fBAVPixelFormat\fP pix_fmt)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_get_pix_fmt_loss\fP (enum \fBAVPixelFormat\fP dst_pix_fmt, enum \fBAVPixelFormat\fP src_pix_fmt, \fBint\fP has_alpha)"
.br
.ti -1c
.RI "enum \fBAVPixelFormat\fP \fBavcodec_find_best_pix_fmt_of_list\fP (\fBconst\fP enum \fBAVPixelFormat\fP *pix_fmt_list, enum \fBAVPixelFormat\fP src_pix_fmt, \fBint\fP has_alpha, \fBint\fP *loss_ptr)"
.br
.ti -1c
.RI "enum \fBAVPixelFormat\fP \fBavcodec_find_best_pix_fmt_of_2\fP (enum \fBAVPixelFormat\fP dst_pix_fmt1, enum \fBAVPixelFormat\fP dst_pix_fmt2, enum \fBAVPixelFormat\fP src_pix_fmt, \fBint\fP has_alpha, \fBint\fP *loss_ptr)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP enum \fBAVPixelFormat\fP \fBavcodec_find_best_pix_fmt2\fP (enum \fBAVPixelFormat\fP dst_pix_fmt1, enum \fBAVPixelFormat\fP dst_pix_fmt2, enum \fBAVPixelFormat\fP src_pix_fmt, \fBint\fP has_alpha, \fBint\fP *loss_ptr)"
.br
.ti -1c
.RI "enum \fBAVPixelFormat\fP \fBavcodec_default_get_format\fP (struct \fBAVCodecContext\fP *\fBs\fP, \fBconst\fP enum \fBAVPixelFormat\fP *fmt)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBavcodec_set_dimensions\fP (\fBAVCodecContext\fP *\fBs\fP, \fBint\fP width, \fBint\fP height)"
.br
.ti -1c
.RI "size_t \fBav_get_codec_tag_string\fP (char *\fBbuf\fP, size_t buf_size, unsigned \fBint\fP codec_tag)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_string\fP (char *\fBbuf\fP, \fBint\fP buf_size, \fBAVCodecContext\fP *enc, \fBint\fP encode)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBav_get_profile_name\fP (\fBconst\fP \fBAVCodec\fP *codec, \fBint\fP profile)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_default_execute\fP (\fBAVCodecContext\fP *\fBc\fP, \fBint\fP(*func)(\fBAVCodecContext\fP *\fBc2\fP, \fBvoid\fP *arg2), \fBvoid\fP *arg, \fBint\fP *ret, \fBint\fP \fBcount\fP, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_default_execute2\fP (\fBAVCodecContext\fP *\fBc\fP, \fBint\fP(*func)(\fBAVCodecContext\fP *\fBc2\fP, \fBvoid\fP *arg2, \fBint\fP, \fBint\fP), \fBvoid\fP *arg, \fBint\fP *ret, \fBint\fP \fBcount\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_fill_audio_frame\fP (\fBAVFrame\fP *frame, \fBint\fP nb_channels, enum \fBAVSampleFormat\fP sample_fmt, \fBconst\fP \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBint\fP align)"
.br
.ti -1c
.RI "\fBvoid\fP \fBavcodec_flush_buffers\fP (\fBAVCodecContext\fP *avctx)"
.br
.ti -1c
.RI "\fBint\fP \fBav_get_bits_per_sample\fP (enum \fBAVCodecID\fP codec_id)"
.br
.ti -1c
.RI "enum \fBAVCodecID\fP \fBav_get_pcm_codec\fP (enum \fBAVSampleFormat\fP fmt, \fBint\fP be)"
.br
.ti -1c
.RI "\fBint\fP \fBav_get_exact_bits_per_sample\fP (enum \fBAVCodecID\fP codec_id)"
.br
.ti -1c
.RI "\fBint\fP \fBav_get_audio_frame_duration\fP (\fBAVCodecContext\fP *avctx, \fBint\fP frame_bytes)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_register_bitstream_filter\fP (\fBAVBitStreamFilter\fP *bsf)"
.br
.ti -1c
.RI "\fBAVBitStreamFilterContext\fP * \fBav_bitstream_filter_init\fP (\fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_bitstream_filter_filter\fP (\fBAVBitStreamFilterContext\fP *bsfc, \fBAVCodecContext\fP *avctx, \fBconst\fP char *args, \fBuint8_t\fP **poutbuf, \fBint\fP *poutbuf_size, \fBconst\fP \fBuint8_t\fP *\fBbuf\fP, \fBint\fP buf_size, \fBint\fP keyframe)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_bitstream_filter_close\fP (\fBAVBitStreamFilterContext\fP *bsf)"
.br
.ti -1c
.RI "\fBAVBitStreamFilter\fP * \fBav_bitstream_filter_next\fP (\fBAVBitStreamFilter\fP *\fBf\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_fast_padded_malloc\fP (\fBvoid\fP *ptr, unsigned \fBint\fP *\fBsize\fP, size_t min_size)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_fast_padded_mallocz\fP (\fBvoid\fP *ptr, unsigned \fBint\fP *\fBsize\fP, size_t min_size)"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBav_xiphlacing\fP (unsigned char *\fBs\fP, unsigned \fBint\fP v)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_log_missing_feature\fP (\fBvoid\fP *avc, \fBconst\fP char *feature, \fBint\fP want_sample)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_log_ask_for_sample\fP (\fBvoid\fP *avc, \fBconst\fP char *msg,\&.\&.\&.) \fBav_printf_format\fP(2"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBvoid\fP \fBav_register_hwaccel\fP (\fBAVHWAccel\fP *hwaccel)"
.br
.ti -1c
.RI "\fBAVHWAccel\fP * \fBav_hwaccel_next\fP (\fBAVHWAccel\fP *hwaccel)"
.br
.ti -1c
.RI "\fBint\fP \fBav_lockmgr_register\fP (\fBint\fP(*cb)(\fBvoid\fP **mutex, enum \fBAVLockOp\fP op))"
.br
.ti -1c
.RI "enum \fBAVMediaType\fP \fBavcodec_get_type\fP (enum \fBAVCodecID\fP codec_id)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBavcodec_get_name\fP (enum \fBAVCodecID\fP id)"
.br
.ti -1c
.RI "\fBint\fP \fBavcodec_is_open\fP (\fBAVCodecContext\fP *\fBs\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_codec_is_encoder\fP (\fBconst\fP \fBAVCodec\fP *codec)"
.br
.ti -1c
.RI "\fBint\fP \fBav_codec_is_decoder\fP (\fBconst\fP \fBAVCodec\fP *codec)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVCodecDescriptor\fP * \fBavcodec_descriptor_get\fP (enum \fBAVCodecID\fP id)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVCodecDescriptor\fP * \fBavcodec_descriptor_next\fP (\fBconst\fP \fBAVCodecDescriptor\fP *prev)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVCodecDescriptor\fP * \fBavcodec_descriptor_get_by_name\fP (\fBconst\fP char *\fBname\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Libavcodec external API header 
.PP
Definition in file \fBavcodec\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define AV_CODEC_ID_H265   \fBAV_CODEC_ID_HEVC\fP"

.PP
Definition at line 316 of file avcodec\&.h\&.
.SS "#define AV_EF_AGGRESSIVE   (1<<18)"

.PP
consider things that a sane encoder should not do as an error 
.PP
Definition at line 2561 of file avcodec\&.h\&.
.SS "#define AV_EF_BITSTREAM   (1<<1)"

.PP
detect bitstream specification deviations 
.PP
Definition at line 2555 of file avcodec\&.h\&.
.SS "#define AV_EF_BUFFER   (1<<2)"

.PP
detect improper bitstream length 
.PP
Definition at line 2556 of file avcodec\&.h\&.
.SS "#define AV_EF_CAREFUL   (1<<16)"

.PP
consider things that violate the spec, are fast to calculate and have not been seen in the wild as errors 
.PP
Definition at line 2559 of file avcodec\&.h\&.
.SS "#define AV_EF_COMPLIANT   (1<<17)"

.PP
consider all spec non compliancies as errors 
.PP
Definition at line 2560 of file avcodec\&.h\&.
.SS "#define AV_EF_CRCCHECK   (1<<0)"
Verify checksums embedded in the bitstream (could be of either encoded or decoded data, depending on the codec) and print an error message on mismatch\&. If AV_EF_EXPLODE is also set, a mismatching checksum will result in the decoder returning an error\&. 
.PP
Definition at line 2554 of file avcodec\&.h\&.
.SS "#define AV_EF_EXPLODE   (1<<3)"

.PP
abort decoding on minor error detection 
.PP
Definition at line 2557 of file avcodec\&.h\&.
.SS "#define AV_PARSER_PTS_NB   4"

.PP
Definition at line 4034 of file avcodec\&.h\&.
.SS "#define FF_ASPECT_EXTENDED   15"

.PP
Definition at line 1379 of file avcodec\&.h\&.
.SS "#define FF_BUG_AC_VLC   0"

.PP
Will be removed, libavcodec can now handle these non-compliant files by default\&. 
.PP
Definition at line 2457 of file avcodec\&.h\&.
.SS "#define FF_BUG_AMV   32"

.PP
Definition at line 2455 of file avcodec\&.h\&.
.SS "#define FF_BUG_AUTODETECT   1"

.PP
autodetection 
.PP
Definition at line 2448 of file avcodec\&.h\&.
.SS "#define FF_BUG_DC_CLIP   4096"

.PP
Definition at line 2465 of file avcodec\&.h\&.
.SS "#define FF_BUG_DIRECT_BLOCKSIZE   512"

.PP
Definition at line 2462 of file avcodec\&.h\&.
.SS "#define FF_BUG_EDGE   1024"

.PP
Definition at line 2463 of file avcodec\&.h\&.
.SS "#define FF_BUG_HPEL_CHROMA   2048"

.PP
Definition at line 2464 of file avcodec\&.h\&.
.SS "#define FF_BUG_MS   8192"

.PP
Work around various bugs in Microsoft's broken decoders\&. 
.PP
Definition at line 2466 of file avcodec\&.h\&.
.SS "#define FF_BUG_NO_PADDING   16"

.PP
Definition at line 2454 of file avcodec\&.h\&.
.SS "#define FF_BUG_OLD_MSMPEG4   2"

.PP
Definition at line 2450 of file avcodec\&.h\&.
.SS "#define FF_BUG_QPEL_CHROMA   64"

.PP
Definition at line 2459 of file avcodec\&.h\&.
.SS "#define FF_BUG_QPEL_CHROMA2   256"

.PP
Definition at line 2461 of file avcodec\&.h\&.
.SS "#define FF_BUG_STD_QPEL   128"

.PP
Definition at line 2460 of file avcodec\&.h\&.
.SS "#define FF_BUG_TRUNCATED   16384"

.PP
Definition at line 2467 of file avcodec\&.h\&.
.SS "#define FF_BUG_UMP4   8"

.PP
Definition at line 2453 of file avcodec\&.h\&.
.SS "#define FF_BUG_XVID_ILACE   4"

.PP
Definition at line 2452 of file avcodec\&.h\&.
.SS "#define FF_CMP_BIT   5"

.PP
Definition at line 1602 of file avcodec\&.h\&.
.SS "#define FF_CMP_CHROMA   256"

.PP
Definition at line 1612 of file avcodec\&.h\&.
.SS "#define FF_CMP_DCT   3"

.PP
Definition at line 1600 of file avcodec\&.h\&.
.SS "#define FF_CMP_DCT264   14"

.PP
Definition at line 1611 of file avcodec\&.h\&.
.SS "#define FF_CMP_DCTMAX   13"

.PP
Definition at line 1610 of file avcodec\&.h\&.
.SS "#define FF_CMP_NSSE   10"

.PP
Definition at line 1607 of file avcodec\&.h\&.
.SS "#define FF_CMP_PSNR   4"

.PP
Definition at line 1601 of file avcodec\&.h\&.
.SS "#define FF_CMP_RD   6"

.PP
Definition at line 1603 of file avcodec\&.h\&.
.SS "#define FF_CMP_SAD   0"

.PP
Definition at line 1597 of file avcodec\&.h\&.
.SS "#define FF_CMP_SATD   2"

.PP
Definition at line 1599 of file avcodec\&.h\&.
.SS "#define FF_CMP_SSE   1"

.PP
Definition at line 1598 of file avcodec\&.h\&.
.SS "#define FF_CMP_VSAD   8"

.PP
Definition at line 1605 of file avcodec\&.h\&.
.SS "#define FF_CMP_VSSE   9"

.PP
Definition at line 1606 of file avcodec\&.h\&.
.SS "#define FF_CMP_W53   11"

.PP
Definition at line 1608 of file avcodec\&.h\&.
.SS "#define FF_CMP_W97   12"

.PP
Definition at line 1609 of file avcodec\&.h\&.
.SS "#define FF_CMP_ZERO   7"

.PP
Definition at line 1604 of file avcodec\&.h\&.
.SS "#define FF_CODER_TYPE_AC   1"

.PP
Definition at line 2309 of file avcodec\&.h\&.
.SS "#define FF_CODER_TYPE_DEFLATE   4"

.PP
Definition at line 2312 of file avcodec\&.h\&.
.SS "#define FF_CODER_TYPE_RAW   2"

.PP
Definition at line 2310 of file avcodec\&.h\&.
.SS "#define FF_CODER_TYPE_RLE   3"

.PP
Definition at line 2311 of file avcodec\&.h\&.
.SS "#define FF_CODER_TYPE_VLC   0"

.PP
Definition at line 2308 of file avcodec\&.h\&.
.SS "#define FF_COMPLIANCE_EXPERIMENTAL   \-2"

.PP
Allow nonstandardized experimental things\&. 
.PP
Definition at line 2486 of file avcodec\&.h\&.
.SS "#define FF_COMPLIANCE_NORMAL   0"

.PP
Definition at line 2484 of file avcodec\&.h\&.
.SS "#define FF_COMPLIANCE_STRICT   1"

.PP
Strictly conform to all the things in the spec no matter what consequences\&. 
.PP
Definition at line 2483 of file avcodec\&.h\&.
.SS "#define FF_COMPLIANCE_UNOFFICIAL   \-1"

.PP
Allow unofficial extensions\&. 
.PP
Definition at line 2485 of file avcodec\&.h\&.
.SS "#define FF_COMPLIANCE_VERY_STRICT   2"

.PP
Strictly conform to an older more strict version of the spec or reference software\&. 
.PP
Definition at line 2482 of file avcodec\&.h\&.
.SS "#define FF_COMPRESSION_DEFAULT   \-1"

.PP
Definition at line 1279 of file avcodec\&.h\&.
.SS "#define FF_DCT_ALTIVEC   5"

.PP
Definition at line 2609 of file avcodec\&.h\&.
.SS "#define FF_DCT_AUTO   0"

.PP
Definition at line 2605 of file avcodec\&.h\&.
.SS "#define FF_DCT_FAAN   6"

.PP
Definition at line 2610 of file avcodec\&.h\&.
.SS "#define FF_DCT_FASTINT   1"

.PP
Definition at line 2606 of file avcodec\&.h\&.
.SS "#define FF_DCT_INT   2"

.PP
Definition at line 2607 of file avcodec\&.h\&.
.SS "#define FF_DCT_MMX   3"

.PP
Definition at line 2608 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_BITSTREAM   4"

.PP
Definition at line 2505 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_BUFFERS   0x00008000"

.PP
Definition at line 2525 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_BUGS   0x00001000"

.PP
Definition at line 2520 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_DCT_COEFF   0x00000040"

.PP
Definition at line 2514 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_ER   0x00000400"

.PP
Definition at line 2518 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_MB_TYPE   8"

.PP
Definition at line 2506 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_MMCO   0x00000800"

.PP
Definition at line 2519 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_MV   32"

.PP
\fBDeprecated\fP
.RS 4
this option does nothing 
.RE
.PP

.PP
Definition at line 2512 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_PICT_INFO   1"

.PP
Definition at line 2503 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_PTS   0x00000200"

.PP
Definition at line 2517 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_QP   16"

.PP
Definition at line 2507 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_RC   2"

.PP
Definition at line 2504 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_SKIP   0x00000080"

.PP
Definition at line 2515 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_STARTCODE   0x00000100"

.PP
Definition at line 2516 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_THREADS   0x00010000"

.PP
Definition at line 2526 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_VIS_MB_TYPE   0x00004000"

.PP
only access through AVOptions from outside libavcodec 
.PP
Definition at line 2523 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_VIS_MV_B_BACK   0x00000004"

.PP
Definition at line 2538 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_VIS_MV_B_FOR   0x00000002"

.PP
Definition at line 2537 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_VIS_MV_P_FOR   0x00000001"

.PP
Definition at line 2536 of file avcodec\&.h\&.
.SS "#define FF_DEBUG_VIS_QP   0x00002000"

.PP
only access through AVOptions from outside libavcodec 
.PP
Definition at line 2522 of file avcodec\&.h\&.
.SS "#define FF_DEFAULT_QUANT_BIAS   999999"

.PP
Definition at line 1688 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_14_9   11"

.PP
Definition at line 1668 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_16_9   10"

.PP
Definition at line 1667 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_16_9_SP_14_9   14"

.PP
Definition at line 1670 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_4_3   9"

.PP
Definition at line 1666 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_4_3_SP_14_9   13"

.PP
Definition at line 1669 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_SAME   8"

.PP
Definition at line 1665 of file avcodec\&.h\&.
.SS "#define FF_DTG_AFD_SP_4_3   15"

.PP
Definition at line 1671 of file avcodec\&.h\&.
.SS "#define FF_EC_DEBLOCK   2"

.PP
Definition at line 2495 of file avcodec\&.h\&.
.SS "#define FF_EC_GUESS_MVS   1"

.PP
Definition at line 2494 of file avcodec\&.h\&.
.SS "#define FF_IDCT_ALTIVEC   8"

.PP
Definition at line 2623 of file avcodec\&.h\&.
.SS "#define FF_IDCT_ARM   7"

.PP
Definition at line 2622 of file avcodec\&.h\&.
.SS "#define FF_IDCT_AUTO   0"

.PP
Definition at line 2618 of file avcodec\&.h\&.
.SS "#define FF_IDCT_FAAN   20"

.PP
Definition at line 2631 of file avcodec\&.h\&.
.SS "#define FF_IDCT_INT   1"

.PP
Definition at line 2619 of file avcodec\&.h\&.
.SS "#define FF_IDCT_IPP   13"

.PP
Definition at line 2626 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SH4   9"

.PP
Definition at line 2624 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLE   2"

.PP
Definition at line 2620 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLEALPHA   23"

.PP
Definition at line 2634 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLEARM   10"

.PP
Definition at line 2625 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLEARMV5TE   16"

.PP
Definition at line 2628 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLEARMV6   17"

.PP
Definition at line 2629 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLEMMX   3"

.PP
Definition at line 2621 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLENEON   22"

.PP
Definition at line 2632 of file avcodec\&.h\&.
.SS "#define FF_IDCT_SIMPLEVIS   18"

.PP
Definition at line 2630 of file avcodec\&.h\&.
.SS "#define FF_IDCT_XVIDMMX   14"

.PP
Definition at line 2627 of file avcodec\&.h\&.
.SS "#define FF_LEVEL_UNKNOWN   \-99"

.PP
Definition at line 2841 of file avcodec\&.h\&.
.SS "#define FF_MB_DECISION_BITS   1"

.PP
chooses the one which needs the fewest bits 
.PP
Definition at line 1724 of file avcodec\&.h\&.
.SS "#define FF_MB_DECISION_RD   2"

.PP
rate distortion 
.PP
Definition at line 1725 of file avcodec\&.h\&.
.SS "#define FF_MB_DECISION_SIMPLE   0"

.PP
uses mb_cmp 
.PP
Definition at line 1723 of file avcodec\&.h\&.
.SS "#define FF_PRED_LEFT   0"

.PP
Definition at line 1553 of file avcodec\&.h\&.
.SS "#define FF_PRED_MEDIAN   2"

.PP
Definition at line 1555 of file avcodec\&.h\&.
.SS "#define FF_PRED_PLANE   1"

.PP
Definition at line 1554 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_ELD   38"

.PP
Definition at line 2768 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_HE   4"

.PP
Definition at line 2765 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_HE_V2   28"

.PP
Definition at line 2766 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_LD   22"

.PP
Definition at line 2767 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_LOW   1"

.PP
Definition at line 2762 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_LTP   3"

.PP
Definition at line 2764 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_MAIN   0"

.PP
Definition at line 2761 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_AAC_SSR   2"

.PP
Definition at line 2763 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_DTS   20"

.PP
Definition at line 2772 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_DTS_96_24   40"

.PP
Definition at line 2774 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_DTS_ES   30"

.PP
Definition at line 2773 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_DTS_HD_HRA   50"

.PP
Definition at line 2775 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_DTS_HD_MA   60"

.PP
Definition at line 2776 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_BASELINE   66"

.PP
Definition at line 2788 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_CAVLC_444   44"

.PP
Definition at line 2800 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_CONSTRAINED   (1<<9)"

.PP
Definition at line 2785 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_CONSTRAINED_BASELINE   (66|\fBFF_PROFILE_H264_CONSTRAINED\fP)"

.PP
Definition at line 2789 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_EXTENDED   88"

.PP
Definition at line 2791 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH   100"

.PP
Definition at line 2792 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_10   110"

.PP
Definition at line 2793 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_10_INTRA   (110|\fBFF_PROFILE_H264_INTRA\fP)"

.PP
Definition at line 2794 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_422   122"

.PP
Definition at line 2795 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_422_INTRA   (122|\fBFF_PROFILE_H264_INTRA\fP)"

.PP
Definition at line 2796 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_444   144"

.PP
Definition at line 2797 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_444_INTRA   (244|\fBFF_PROFILE_H264_INTRA\fP)"

.PP
Definition at line 2799 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_HIGH_444_PREDICTIVE   244"

.PP
Definition at line 2798 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_INTRA   (1<<11)"

.PP
Definition at line 2786 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_H264_MAIN   77"

.PP
Definition at line 2790 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_HEVC_MAIN   1"

.PP
Definition at line 2831 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_HEVC_MAIN_10   2"

.PP
Definition at line 2832 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_HEVC_MAIN_STILL_PICTURE   3"

.PP
Definition at line 2833 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION   2"

.PP
Definition at line 2826 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0   0"

.PP
Definition at line 2824 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1   1"

.PP
Definition at line 2825 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_JPEG2000_DCINEMA_2K   3"

.PP
Definition at line 2827 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_JPEG2000_DCINEMA_4K   4"

.PP
Definition at line 2828 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_422   0"

.PP
Definition at line 2778 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_AAC_HE   131"

.PP
Definition at line 2770 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_AAC_LOW   128"

.PP
Definition at line 2769 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_HIGH   1"

.PP
Definition at line 2779 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_MAIN   4"

.PP
Definition at line 2782 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_SIMPLE   5"

.PP
Definition at line 2783 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_SNR_SCALABLE   3"

.PP
Definition at line 2781 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG2_SS   2"

.PP
Definition at line 2780 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_ADVANCED_CODING   11"

.PP
Definition at line 2818 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_ADVANCED_CORE   12"

.PP
Definition at line 2819 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_ADVANCED_REAL_TIME   9"

.PP
Definition at line 2816 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE   13"

.PP
Definition at line 2820 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_ADVANCED_SIMPLE   15"

.PP
Definition at line 2822 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE   7"

.PP
Definition at line 2814 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_CORE   2"

.PP
Definition at line 2809 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_CORE_SCALABLE   10"

.PP
Definition at line 2817 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_HYBRID   8"

.PP
Definition at line 2815 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_MAIN   3"

.PP
Definition at line 2810 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_N_BIT   4"

.PP
Definition at line 2811 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_SCALABLE_TEXTURE   5"

.PP
Definition at line 2812 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_SIMPLE   0"

.PP
Definition at line 2807 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION   6"

.PP
Definition at line 2813 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_SIMPLE_SCALABLE   1"

.PP
Definition at line 2808 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_MPEG4_SIMPLE_STUDIO   14"

.PP
Definition at line 2821 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_RESERVED   \-100"

.PP
Definition at line 2759 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_UNKNOWN   \-99"

.PP
Definition at line 2758 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_VC1_ADVANCED   3"

.PP
Definition at line 2805 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_VC1_COMPLEX   2"

.PP
Definition at line 2804 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_VC1_MAIN   1"

.PP
Definition at line 2803 of file avcodec\&.h\&.
.SS "#define FF_PROFILE_VC1_SIMPLE   0"

.PP
Definition at line 2802 of file avcodec\&.h\&.
.SS "#define FF_RC_STRATEGY_XVID   1"

.PP
Definition at line 1464 of file avcodec\&.h\&.
.SS "#define FF_SUB_CHARENC_MODE_AUTOMATIC   0"

.PP
libavcodec will select the mode itself 
.PP
Definition at line 2954 of file avcodec\&.h\&.
.SS "#define FF_SUB_CHARENC_MODE_DO_NOTHING   \-1"

.PP
do nothing (demuxer outputs a stream supposed to be already in UTF-8, or the codec is bitmap for instance) 
.PP
Definition at line 2953 of file avcodec\&.h\&.
.SS "#define FF_SUB_CHARENC_MODE_PRE_DECODER   1"

.PP
the \fBAVPacket\fP data needs to be recoded to UTF-8 before being fed to the decoder, requires iconv 
.PP
Definition at line 2955 of file avcodec\&.h\&.
.SS "#define FF_THREAD_FRAME   1"

.PP
Decode more than one frame at once\&. 
.PP
Definition at line 2686 of file avcodec\&.h\&.
.SS "#define FF_THREAD_SLICE   2"

.PP
Decode more than one part of a single frame at once\&. 
.PP
Definition at line 2687 of file avcodec\&.h\&.
.SS "#define PARSER_FLAG_COMPLETE_FRAMES   0x0001"

.PP
Definition at line 4041 of file avcodec\&.h\&.
.SS "#define PARSER_FLAG_FETCHED_OFFSET   0x0004"

.PP
Set if the parser has a valid file offset\&. 
.PP
Definition at line 4044 of file avcodec\&.h\&.
.SS "#define PARSER_FLAG_ONCE   0x0002"

.PP
Definition at line 4042 of file avcodec\&.h\&.
.SS "#define PARSER_FLAG_USE_CODEC_TS   0x1000"

.PP
Definition at line 4045 of file avcodec\&.h\&.
.SS "#define SLICE_FLAG_ALLOW_FIELD   0x0002"

.PP
allow draw_horiz_band() with field slices (MPEG2 field pics) 
.PP
Definition at line 1704 of file avcodec\&.h\&.
.SS "#define SLICE_FLAG_ALLOW_PLANE   0x0004"

.PP
allow draw_horiz_band() with 1 component at a time (SVQ1) 
.PP
Definition at line 1705 of file avcodec\&.h\&.
.SS "#define SLICE_FLAG_CODED_ORDER   0x0001"

.PP
draw_horiz_band() is called in coded order instead of display 
.PP
Definition at line 1703 of file avcodec\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
