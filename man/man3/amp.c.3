.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-amp.lv2/amp.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-amp.lv2/amp.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <math\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/lv2core/lv2\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAmp\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAMP_URI\fP   'http://\fBlv2plug\&.in\fP/plugins/eg\-amp'"
.br
.ti -1c
.RI "#define \fBDB_CO\fP(g)   ((g) > \-90\&.0f ? powf(10\&.0f, (g) * 0\&.05f) : 0\&.0f)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBPortIndex\fP { \fBTEST_CONTROL_IN\fP = 0, \fBTEST_CONTROL_OUT\fP = 1, \fBTEST_AUDIO_IN\fP = 2, \fBTEST_AUDIO_OUT\fP = 3, \fBAMP_GAIN\fP = 0, \fBAMP_INPUT\fP = 1, \fBAMP_OUTPUT\fP = 2, \fBMIDIGATE_CONTROL\fP = 0, \fBMIDIGATE_IN\fP = 1, \fBMIDIGATE_OUT\fP = 2, \fBSCO_CONTROL\fP = 0, \fBSCO_NOTIFY\fP = 1, \fBSCO_INPUT0\fP = 2, \fBSCO_OUTPUT0\fP = 3, \fBSCO_INPUT1\fP = 4, \fBSCO_OUTPUT1\fP = 5 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLV2_SYMBOL_EXPORT\fP \fBconst\fP \fBLV2_Descriptor\fP * \fBlv2_descriptor\fP (\fBuint32_t\fP index)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define AMP_URI   'http://\fBlv2plug\&.in\fP/plugins/eg\-amp'"
Include standard C headers LV2 headers are based on the URI of the specification they come from, so a consistent convention can be used even for unofficial extensions\&. The URI of the core LV2 specification is http://lv2plug.in/ns/lv2core, by replacing \fChttp:/\fP with \fClv2\fP any header in the specification bundle can be included, in this case \fC\fBlv2\&.h\fP\fP\&. The URI is the identifier for a plugin, and how the host associates this implementation in code with its description in data\&. In this plugin it is only used once in the code, but defining the plugin URI at the top of the file is a good convention to follow\&. If this URI does not match that used in the data files, the host will fail to load the plugin\&. 
.PP
Definition at line 38 of file amp\&.c\&.
.SS "#define DB_CO(g)   ((g) > \-90\&.0f ? powf(10\&.0f, (g) * 0\&.05f) : 0\&.0f)"
Define a macro for converting a gain in dB to a coefficient\&. 
.PP
Definition at line 127 of file amp\&.c\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBPortIndex\fP"
In code, ports are referred to by index\&. An enumeration of port indices should be defined for readability\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITEST_CONTROL_IN \fP\fP
.TP
\fB\fITEST_CONTROL_OUT \fP\fP
.TP
\fB\fITEST_AUDIO_IN \fP\fP
.TP
\fB\fITEST_AUDIO_OUT \fP\fP
.TP
\fB\fIAMP_GAIN \fP\fP
.TP
\fB\fIAMP_INPUT \fP\fP
.TP
\fB\fIAMP_OUTPUT \fP\fP
.TP
\fB\fIMIDIGATE_CONTROL \fP\fP
.TP
\fB\fIMIDIGATE_IN \fP\fP
.TP
\fB\fIMIDIGATE_OUT \fP\fP
.TP
\fB\fISCO_CONTROL \fP\fP
.TP
\fB\fISCO_NOTIFY \fP\fP
.TP
\fB\fISCO_INPUT0 \fP\fP
.TP
\fB\fISCO_OUTPUT0 \fP\fP
.TP
\fB\fISCO_INPUT1 \fP\fP
.TP
\fB\fISCO_OUTPUT1 \fP\fP
.PP
Definition at line 44 of file amp\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBLV2_SYMBOL_EXPORT\fP \fBconst\fP \fBLV2_Descriptor\fP* lv2_descriptor (\fBuint32_t\fP index)"
The \fC\fBlv2_descriptor()\fP\fP function is the entry point to the plugin library\&. The host will load the library and call this function repeatedly with increasing indices to find all the plugins defined in the library\&. The index is not an indentifier, the URI of the returned descriptor is used to determine the identify of the plugin\&.
.PP
This method is in the ``discovery'' threading class, so no other functions or methods in this plugin library will be called concurrently with it\&. 
.PP
Definition at line 223 of file amp\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
