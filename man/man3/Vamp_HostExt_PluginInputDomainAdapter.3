.TH "Vamp::HostExt::PluginInputDomainAdapter" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vamp::HostExt::PluginInputDomainAdapter \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vamp\-hostsdk/PluginInputDomainAdapter\&.h>\fP
.PP
Inherits \fBVamp::HostExt::PluginWrapper\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBImpl\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBProcessTimestampMethod\fP { \fBShiftTimestamp\fP, \fBShiftData\fP, \fBNoShift\fP }"
.br
.ti -1c
.RI "enum \fBWindowType\fP { \fBRectangularWindow\fP = 0, \fBBartlettWindow\fP = 1, \fBTriangularWindow\fP = 1, \fBHammingWindow\fP = 2, \fBHanningWindow\fP = 3, \fBHannWindow\fP = 3, \fBBlackmanWindow\fP = 4, \fBNuttallWindow\fP = 7, \fBBlackmanHarrisWindow\fP = 8 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPluginInputDomainAdapter\fP (\fBPlugin\fP *plugin)"
.br
.ti -1c
.RI "virtual \fB~PluginInputDomainAdapter\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBinitialise\fP (size_t channels, size_t stepSize, size_t blockSize)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset\fP ()"
.br
.ti -1c
.RI "\fBInputDomain\fP \fBgetInputDomain\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetPreferredStepSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetPreferredBlockSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBFeatureSet\fP \fBprocess\fP (\fBconst\fP float *\fBconst\fP *inputBuffers, \fBRealTime\fP timestamp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsetProcessTimestampMethod\fP (\fBProcessTimestampMethod\fP)"
.br
.ti -1c
.RI "\fBProcessTimestampMethod\fP \fBgetProcessTimestampMethod\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBRealTime\fP \fBgetTimestampAdjustment\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBWindowType\fP \fBgetWindowType\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBsetWindowType\fP (\fBWindowType\fP type)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBImpl\fP * \fBm_impl\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBPluginInputDomainAdapter\fP is a \fBVamp\fP plugin adapter that converts time-domain input into frequency-domain input for plugins that need it\&. This permits a host to use time- and frequency-domain plugins interchangeably without needing to handle the conversion itself\&.
.PP
This adapter uses a basic windowed \fBFFT\fP (using Hann window by default) that supports power-of-two block sizes only\&. If a frequency domain plugin requests a non-power-of-two blocksize, the adapter will adjust it to a nearby power of two instead\&. Thus, \fBgetPreferredBlockSize()\fP will always return a power of two if the wrapped plugin is a frequency domain one\&. If the plugin doesn't accept the adjusted power of two block size, \fBinitialise()\fP will fail\&.
.PP
The adapter provides no way for the host to discover whether the underlying plugin is actually a time or frequency domain plugin (except that if the preferred block size is not a power of two, it must be a time domain plugin)\&.
.PP
The \fBFFT\fP implementation is simple and self-contained, but unlikely to be the fastest available: a host can usually do better if it cares enough\&.
.PP
The window shape for the \fBFFT\fP frame can be set using setWindowType and the current shape retrieved using getWindowType\&. (This was added in v2\&.3 of the SDK\&.)
.PP
In every respect other than its input domain handling, the \fBPluginInputDomainAdapter\fP behaves identically to the plugin that it wraps\&. The wrapped plugin will be deleted when the wrapper is deleted\&.
.PP
\fBNote:\fP
.RS 4
This class was introduced in version 1\&.1 of the \fBVamp\fP plugin SDK\&. 
.RE
.PP

.PP
Definition at line 87 of file PluginInputDomainAdapter\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBVamp::HostExt::PluginInputDomainAdapter::ProcessTimestampMethod\fP"
ProcessTimestampMethod determines how the \fBPluginInputDomainAdapter\fP handles timestamps for the data passed to the \fBprocess()\fP function of the plugin it wraps, in the case where the plugin is expecting frequency-domain data\&.
.PP
The \fBVamp\fP specification requires that the timestamp passed to the plugin for frequency-domain input should be that of the centre of the processing block, rather than the start as is the case for time-domain input\&.
.PP
Since \fBPluginInputDomainAdapter\fP aims to be transparent in use, it needs to handle this timestamp adjustment itself\&. However, some control is available over the method used for adjustment, by means of the ProcessTimestampMethod setting\&.
.PP
If ProcessTimestampMethod is set to ShiftTimestamp (the default), then the data passed to the wrapped plugin will be calculated from the same input data block as passed to the wrapper, but the timestamp passed to the plugin will be advanced by half of the window size\&.
.PP
If ProcessTimestampMethod is set to ShiftData, then the timestamp passed to the wrapped plugin will be the same as that passed to the process call of the wrapper, but the data block used to calculate the input will be shifted back (earlier) by half of the window size, with half a block of zero padding at the start of the first process call\&. This has the advantage of preserving the first half block of audio without any deterioration from window shaping\&.
.PP
If ProcessTimestampMethod is set to NoShift, then no adjustment will be made and the timestamps will be incorrect\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIShiftTimestamp \fP\fP
.TP
\fB\fIShiftData \fP\fP
.TP
\fB\fINoShift \fP\fP
.PP
Definition at line 142 of file PluginInputDomainAdapter\&.h\&.
.SS "enum \fBVamp::HostExt::PluginInputDomainAdapter::WindowType\fP"
The set of supported window shapes\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRectangularWindow \fP\fP
.TP
\fB\fIBartlettWindow \fP\fP
.TP
\fB\fITriangularWindow \fP\fP
synonym for RectangularWindow 
.TP
\fB\fIHammingWindow \fP\fP
synonym for BartlettWindow 
.TP
\fB\fIHanningWindow \fP\fP
.TP
\fB\fIHannWindow \fP\fP
synonym for HannWindow 
.TP
\fB\fIBlackmanWindow \fP\fP
synonym for HanningWindow 
.TP
\fB\fINuttallWindow \fP\fP
.TP
\fB\fIBlackmanHarrisWindow \fP\fP
.PP
Definition at line 195 of file PluginInputDomainAdapter\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Vamp::HostExt::PluginInputDomainAdapter::PluginInputDomainAdapter (\fBPlugin\fP * plugin)"
Construct a \fBPluginInputDomainAdapter\fP wrapping the given plugin\&. The adapter takes ownership of the plugin, which will be deleted when the adapter is deleted\&. 
.PP
Definition at line 139 of file PluginInputDomainAdapter\&.cpp\&.
.SS "Vamp::HostExt::PluginInputDomainAdapter::~PluginInputDomainAdapter ()\fC [virtual]\fP"

.PP
Definition at line 145 of file PluginInputDomainAdapter\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBPlugin::InputDomain\fP Vamp::HostExt::PluginInputDomainAdapter::getInputDomain () const\fC [virtual]\fP"
Get the plugin's required input domain\&.
.PP
If this is TimeDomain, the samples provided to the \fBprocess()\fP function (below) will be in the time domain, as for a traditional audio processing plugin\&.
.PP
If this is FrequencyDomain, the host will carry out a windowed \fBFFT\fP of size equal to the negotiated block size on the data before passing the frequency bin data in to \fBprocess()\fP\&. The input data for the \fBFFT\fP will be rotated so as to place the origin in the centre of the block\&. The plugin does not get to choose the window type -- the host will either let the user do so, or will use a Hanning window\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 163 of file PluginInputDomainAdapter\&.cpp\&.
.SS "size_t Vamp::HostExt::PluginInputDomainAdapter::getPreferredBlockSize () const\fC [virtual]\fP"
Get the preferred block size (window size -- the number of sample frames passed in each block to the \fBprocess()\fP function)\&. This should be called before \fBinitialise()\fP\&.
.PP
A plugin that can handle any block size may return 0\&. The final block size will be set in the \fBinitialise()\fP call\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 175 of file PluginInputDomainAdapter\&.cpp\&.
.SS "size_t Vamp::HostExt::PluginInputDomainAdapter::getPreferredStepSize () const\fC [virtual]\fP"
Get the preferred step size (window increment -- the distance in sample frames between the start frames of consecutive blocks passed to the \fBprocess()\fP function) for the plugin\&. This should be called before \fBinitialise()\fP\&.
.PP
A plugin may return 0 if it has no particular interest in the step size\&. In this case, the host should make the step size equal to the block size if the plugin is accepting input in the time domain\&. If the plugin is accepting input in the frequency domain, the host may use any step size\&. The final step size will be set in the \fBinitialise()\fP call\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 169 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBPluginInputDomainAdapter::ProcessTimestampMethod\fP Vamp::HostExt::PluginInputDomainAdapter::getProcessTimestampMethod () const"
Retrieve the method used for timestamp adjustment in plugins taking frequency-domain input\&. See the ProcessTimestampMethod documentation for details\&. 
.PP
Definition at line 193 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBRealTime\fP Vamp::HostExt::PluginInputDomainAdapter::getTimestampAdjustment () const"
Return the amount by which the timestamps supplied to \fBprocess()\fP are being incremented when they are passed to the plugin's own \fBprocess()\fP implementation\&.
.PP
The \fBVamp\fP API mandates that the timestamp passed to the plugin for time-domain input should be the time of the first sample in the block, but the timestamp passed for frequency-domain input should be the timestamp of the centre of the block\&.
.PP
The \fBPluginInputDomainAdapter\fP adjusts its timestamps properly so that the plugin receives correct times, but in some circumstances (such as for establishing the correct timing of implicitly-timed features, i\&.e\&. features without their own timestamps) the host may need to be aware that this adjustment is taking place\&.
.PP
If the plugin requires time-domain input or the \fBPluginInputDomainAdapter\fP is configured with its ProcessTimestampMethod set to ShiftData instead of ShiftTimestamp, then this function will return zero\&.
.PP
The result of calling this function before \fBinitialise()\fP has been called is undefined\&. 
.PP
Definition at line 199 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBPluginInputDomainAdapter::WindowType\fP Vamp::HostExt::PluginInputDomainAdapter::getWindowType () const"
Return the current window shape\&. The default is HanningWindow\&. 
.PP
Definition at line 205 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBbool\fP Vamp::HostExt::PluginInputDomainAdapter::initialise (size_t inputChannels, size_t stepSize, size_t blockSize)\fC [virtual]\fP"
Initialise a plugin to prepare it for use with the given number of input channels, step size (window increment, in sample frames) and block size (window size, in sample frames)\&.
.PP
The input sample rate should have been already specified at construction time\&.
.PP
Return true for successful initialisation, false if the number of input channels, step size and/or block size cannot be supported\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 151 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBPlugin::FeatureSet\fP Vamp::HostExt::PluginInputDomainAdapter::process (\fBconst\fP float *\fBconst\fP * inputBuffers, \fBRealTime\fP timestamp)\fC [virtual]\fP"
Process a single block of input data\&.
.PP
If the plugin's inputDomain is TimeDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize consecutive audio samples (the host will zero-pad as necessary)\&. The timestamp in this case will be the real time in seconds of the start of the supplied block of samples\&.
.PP
If the plugin's inputDomain is FrequencyDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize/2+1 consecutive pairs of real and imaginary component floats corresponding to bins 0\&.\&.(blockSize/2) of the \fBFFT\fP output\&. That is, bin 0 (the first pair of floats) contains the DC output, up to bin blockSize/2 which contains the Nyquist-frequency output\&. There will therefore be blockSize+2 floats per channel in total\&. The timestamp will be the real time in seconds of the centre of the \fBFFT\fP input window (i\&.e\&. the very first block passed to process might contain the \fBFFT\fP of half a block of zero samples and the first half-block of the actual data, with a timestamp of zero)\&.
.PP
Return any features that have become available after this process call\&. (These do not necessarily have to fall within the process block, except for OneSamplePerStep outputs\&.) 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 181 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBvoid\fP Vamp::HostExt::PluginInputDomainAdapter::reset ()\fC [virtual]\fP"
Reset the plugin after use, to prepare it for another clean run\&. Not called for the first initialisation (i\&.e\&. initialise must also do a reset)\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 157 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBvoid\fP Vamp::HostExt::PluginInputDomainAdapter::setProcessTimestampMethod (\fBProcessTimestampMethod\fP m)"
Set the method used for timestamp adjustment in plugins taking frequency-domain input\&. See the ProcessTimestampMethod documentation for details\&.
.PP
This function must be called before the first call to \fBprocess()\fP\&. 
.PP
Definition at line 187 of file PluginInputDomainAdapter\&.cpp\&.
.SS "\fBvoid\fP Vamp::HostExt::PluginInputDomainAdapter::setWindowType (\fBWindowType\fP type)"
Set the current window shape\&. 
.PP
Definition at line 211 of file PluginInputDomainAdapter\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBImpl\fP* Vamp::HostExt::PluginInputDomainAdapter::m_impl\fC [protected]\fP"

.PP
Definition at line 226 of file PluginInputDomainAdapter\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
