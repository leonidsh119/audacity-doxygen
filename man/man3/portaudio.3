.TH "portaudio" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
portaudio \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBimpl\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAsioDeviceAdapter\fP"
.br
.RI "\fIAdapts the given \fBDevice\fP to an ASIO specific extension\&. \fP"
.ti -1c
.RI "class \fBAutoSystem\fP"
.br
.RI "\fIA RAII idiom class to ensure automatic clean-up when an exception is raised\&. \fP"
.ti -1c
.RI "class \fBBlockingStream\fP"
.br
.RI "\fI\fBStream\fP class for blocking read/write-style input and output\&. ///\&. \fP"
.ti -1c
.RI "class \fBCallbackInterface\fP"
.br
.RI "\fIInterface for an object that's callable as a PortAudioCpp callback object (ie that implements the paCallbackFun method)\&. \fP"
.ti -1c
.RI "class \fBCallbackStream\fP"
.br
.RI "\fIBase class for all Streams which use a callback-based mechanism\&. ///\&. \fP"
.ti -1c
.RI "class \fBCFunCallbackStream\fP"
.br
.RI "\fI\fBCallback\fP stream using a free function with C linkage\&. It's important that the function the passed function pointer points to is declared ``extern 'C'''\&. \fP"
.ti -1c
.RI "class \fBDevice\fP"
.br
.RI "\fIClass which represents a PortAudio device in the \fBSystem\fP\&. \fP"
.ti -1c
.RI "class \fBDirectionSpecificStreamParameters\fP"
.br
.RI "\fIAll parameters for one direction (either in or out) of a \fBStream\fP\&. Together with parameters common to both directions, two \fBDirectionSpecificStreamParameters\fP can make up a \fBStreamParameters\fP object which contains all parameters for a \fBStream\fP\&. \fP"
.ti -1c
.RI "class \fBException\fP"
.br
.RI "\fIBase class for all exceptions PortAudioCpp can throw\&. \fP"
.ti -1c
.RI "class \fBFunCallbackStream\fP"
.br
.RI "\fI\fBCallback\fP stream using a C++ function (either a free function or a static function) callback\&. \fP"
.ti -1c
.RI "class \fBHostApi\fP"
.br
.RI "\fI\fBHostApi\fP represents a host API (usually type of driver) in the \fBSystem\fP\&. \fP"
.ti -1c
.RI "class \fBInterfaceCallbackStream\fP"
.br
.RI "\fI\fBCallback\fP stream using an instance of an object that's derived from the \fBCallbackInterface\fP interface\&. \fP"
.ti -1c
.RI "class \fBMemFunCallbackStream\fP"
.br
.RI "\fI\fBCallback\fP stream using a class's member function as a callback\&. Template argument T is the type of the class of which a member function is going to be used\&. \fP"
.ti -1c
.RI "class \fBPaCppException\fP"
.br
.RI "\fIExceptions specific to PortAudioCpp (ie\&. exceptions which do not have an equivalent PortAudio error code)\&. \fP"
.ti -1c
.RI "class \fBPaException\fP"
.br
.RI "\fIWrapper for PortAudio error codes to C++ exceptions\&. \fP"
.ti -1c
.RI "class \fBStream\fP"
.br
.RI "\fIA \fBStream\fP represents an active or inactive input and/or output data stream in the \fBSystem\fP\&. \fP"
.ti -1c
.RI "class \fBStreamParameters\fP"
.br
.RI "\fIThe entire set of parameters needed to configure and open a \fBStream\fP\&. \fP"
.ti -1c
.RI "class \fBSystem\fP"
.br
.RI "\fI\fBSystem\fP singleton which represents the PortAudio system\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSampleDataFormat\fP { \fBINVALID_FORMAT\fP = 0, \fBFLOAT32\fP = paFloat32, \fBINT32\fP = paInt32, \fBINT24\fP = paInt24, \fBINT16\fP = paInt16, \fBINT8\fP = paInt8, \fBUINT8\fP = paUInt8 }
.RI "\fIPortAudio sample data formats\&. \fP""
.br
.in -1c
.SH "Detailed Description"
.PP 
To avoid name collision, everything in PortAudioCpp is in the portaudio namespace\&. If this name is too long it's usually pretty safe to use an alias like ``namespace pa = portaudio;''\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBportaudio::SampleDataFormat\fP"

.PP
PortAudio sample data formats\&. Small helper enum to wrap the PortAudio defines\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINVALID_FORMAT \fP\fP
.TP
\fB\fIFLOAT32 \fP\fP
.TP
\fB\fIINT32 \fP\fP
.TP
\fB\fIINT24 \fP\fP
.TP
\fB\fIINT16 \fP\fP
.TP
\fB\fIINT8 \fP\fP
.TP
\fB\fIUINT8 \fP\fP
.PP
Definition at line 19 of file SampleDataFormat\&.hxx\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
