.TH "ShuttleGuiBase" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ShuttleGuiBase \- Base class for shuttling data to and from a GUI\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ShuttleGui\&.h>\fP
.PP
Inherited by \fBShuttleGui\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBShuttleGuiBase\fP (wxWindow *pParent, \fBteShuttleMode\fP ShuttleMode)"
.br
.ti -1c
.RI "\fB~ShuttleGuiBase\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBInit\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBAddPrompt\fP (\fBconst\fP wxString &Prompt)"
.br
.RI "\fIRight aligned text string\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBAddUnits\fP (\fBconst\fP wxString &Prompt)"
.br
.RI "\fILeft aligned text string\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBAddTitle\fP (\fBconst\fP wxString &Prompt)"
.br
.RI "\fICentred text string\&. \fP"
.ti -1c
.RI "wxWindow * \fBAddWindow\fP (wxWindow *pWindow, \fBint\fP Flags=wxALIGN_CENTRE|wxALL)"
.br
.ti -1c
.RI "wxSlider * \fBAddSlider\fP (\fBconst\fP wxString &Prompt, \fBint\fP pos, \fBint\fP Max, \fBint\fP Min=0)"
.br
.ti -1c
.RI "wxSlider * \fBAddVSlider\fP (\fBconst\fP wxString &Prompt, \fBint\fP pos, \fBint\fP Max)"
.br
.ti -1c
.RI "wxSpinCtrl * \fBAddSpinCtrl\fP (\fBconst\fP wxString &Prompt, \fBint\fP Value, \fBint\fP Max, \fBint\fP Min)"
.br
.ti -1c
.RI "wxTreeCtrl * \fBAddTree\fP ()"
.br
.ti -1c
.RI "wxRadioButton * \fBAddRadioButton\fP (\fBconst\fP wxString &Prompt)"
.br
.ti -1c
.RI "wxRadioButton * \fBAddRadioButtonToGroup\fP (\fBconst\fP wxString &Prompt)"
.br
.ti -1c
.RI "wxButton * \fBAddButton\fP (\fBconst\fP wxString &Text, \fBint\fP PositionFlags=wxALIGN_CENTRE)"
.br
.ti -1c
.RI "wxBitmapButton * \fBAddBitmapButton\fP (\fBconst\fP wxBitmap &Bitmap, \fBint\fP PositionFlags=wxALIGN_CENTRE)"
.br
.ti -1c
.RI "wxStaticText * \fBAddVariableText\fP (\fBconst\fP wxString &Str, \fBbool\fP bCenter=\fBfalse\fP, \fBint\fP PositionFlags=0)"
.br
.ti -1c
.RI "wxTextCtrl * \fBAddTextBox\fP (\fBconst\fP wxString &Caption, \fBconst\fP wxString &Value, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBAddNumericTextBox\fP (\fBconst\fP wxString &Caption, \fBconst\fP wxString &Value, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBAddTextWindow\fP (\fBconst\fP wxString &Value)"
.br
.RI "\fIMultiline text box that grows\&. \fP"
.ti -1c
.RI "wxListBox * \fBAddListBox\fP (\fBconst\fP wxArrayString *pChoices, long style=0)"
.br
.ti -1c
.RI "wxListCtrl * \fBAddListControl\fP ()"
.br
.ti -1c
.RI "wxListCtrl * \fBAddListControlReportMode\fP ()"
.br
.ti -1c
.RI "wxGrid * \fBAddGrid\fP ()"
.br
.ti -1c
.RI "wxCheckBox * \fBAddCheckBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &Selected)"
.br
.ti -1c
.RI "wxCheckBox * \fBAddCheckBoxOnRight\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &Selected)"
.br
.ti -1c
.RI "wxComboBox * \fBAddCombo\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &Selected, \fBconst\fP wxArrayString *pChoices, long style=0)"
.br
.ti -1c
.RI "wxChoice * \fBAddChoice\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &Selected, \fBconst\fP wxArrayString *pChoices)"
.br
.ti -1c
.RI "wxMenuBar * \fBAddMenuBar\fP ()"
.br
.ti -1c
.RI "wxMenu * \fBAddMenu\fP (\fBconst\fP wxString &Title)"
.br
.ti -1c
.RI "\fBvoid\fP \fBAddIcon\fP (wxBitmap *pBmp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBAddIconButton\fP (\fBconst\fP wxString &\fBCommand\fP, \fBconst\fP wxString &Params, wxBitmap *pBmp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBAddFixedText\fP (\fBconst\fP wxString &Str, \fBbool\fP bCenter=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBAddConstTextBox\fP (\fBconst\fP wxString &Caption, \fBconst\fP wxString &Value)"
.br
.RI "\fISingle line text box of fixed size\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBStartHorizontalLay\fP (\fBint\fP PositionFlags=wxALIGN_CENTRE, \fBint\fP iProp=1)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndHorizontalLay\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartVerticalLay\fP (\fBint\fP iProp=1)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndVerticalLay\fP ()"
.br
.ti -1c
.RI "wxScrolledWindow * \fBStartScroller\fP (\fBint\fP iStyle=0)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndScroller\fP ()"
.br
.ti -1c
.RI "wxPanel * \fBStartPanel\fP (\fBint\fP iStyle=0)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndPanel\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartMultiColumn\fP (\fBint\fP nCols, \fBint\fP PositionFlags=wxALIGN_LEFT)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndMultiColumn\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartTwoColumn\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndTwoColumn\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartThreeColumn\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndThreeColumn\fP ()"
.br
.ti -1c
.RI "wxStaticBox * \fBStartStatic\fP (\fBconst\fP wxString &Str, \fBint\fP iProp=0)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndStatic\fP ()"
.br
.ti -1c
.RI "wxNotebook * \fBStartNotebook\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndNotebook\fP ()"
.br
.ti -1c
.RI "\fBwxNotebookPage\fP * \fBStartNotebookPage\fP (\fBconst\fP wxString &Name)"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartNotebookPage\fP (\fBconst\fP wxString &Name, \fBwxNotebookPage\fP *pPage)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndNotebookPage\fP ()"
.br
.ti -1c
.RI "wxPanel * \fBStartInvisiblePanel\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndInvisiblePanel\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartRadioButtonGroup\fP (\fBconst\fP wxString &SettingName)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEndRadioButtonGroup\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartRadioButtonGroup\fP (\fBconst\fP wxString &SettingName, \fBconst\fP \fBint\fP iDefaultValue)"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartRadioButtonGroup\fP (\fBconst\fP wxString &SettingName, \fBconst\fP wxString &DefaultValue)"
.br
.ti -1c
.RI "\fBvoid\fP \fBDoDataShuttle\fP (\fBconst\fP wxString &Name, \fBWrappedType\fP &WrappedRef)"
.br
.ti -1c
.RI "\fBbool\fP \fBDoStep\fP (\fBint\fP iStep)"
.br
.ti -1c
.RI "\fBint\fP \fBTranslateToIndex\fP (\fBconst\fP wxString &Value, \fBconst\fP wxArrayString &Choices)"
.br
.RI "\fIString-to-Index\&. \fP"
.ti -1c
.RI "wxString \fBTranslateFromIndex\fP (\fBconst\fP \fBint\fP nIn, \fBconst\fP wxArrayString &Choices)"
.br
.RI "\fIIndex-to-String\&. \fP"
.ti -1c
.RI "\fBint\fP \fBTranslateToIndex\fP (\fBconst\fP \fBint\fP Value, \fBconst\fP wxArrayInt &Choices)"
.br
.RI "\fIInt-to-Index (choices can be items like e\&.g 0x400120 ) \fP"
.ti -1c
.RI "\fBint\fP \fBTranslateFromIndex\fP (\fBconst\fP \fBint\fP nIn, \fBconst\fP wxArrayInt &Choices)"
.br
.RI "\fIIndex-to-int (choices can be items like e\&.g 0x400120 ) \fP"
.ti -1c
.RI "wxTextCtrl * \fBTieTextBox\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieTextBox\fP (\fBconst\fP wxString &Caption, wxString &Value, \fBconst\fP \fBint\fP nChars=0)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieTextBox\fP (\fBconst\fP wxString &Prompt, \fBint\fP &Selected, \fBconst\fP \fBint\fP nChars=0)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieTextBox\fP (\fBconst\fP wxString &Prompt, double &Value, \fBconst\fP \fBint\fP nChars=0)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieNumericTextBox\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieNumericTextBox\fP (\fBconst\fP wxString &Caption, wxString &Value, \fBconst\fP \fBint\fP nChars=0)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieNumericTextBox\fP (\fBconst\fP wxString &Prompt, \fBint\fP &Selected, \fBconst\fP \fBint\fP nChars=0)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieNumericTextBox\fP (\fBconst\fP wxString &Prompt, double &Value, \fBconst\fP \fBint\fP nChars=0)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBox\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &Selected)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBox\fP (\fBconst\fP wxString &Prompt, \fBbool\fP &Var)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBoxOnRight\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBoxOnRight\fP (\fBconst\fP wxString &Prompt, \fBbool\fP &Var)"
.br
.ti -1c
.RI "wxChoice * \fBTieChoice\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef, \fBconst\fP wxArrayString *pChoices)"
.br
.ti -1c
.RI "wxChoice * \fBTieChoice\fP (\fBconst\fP wxString &Prompt, wxString &Selected, \fBconst\fP wxArrayString *pChoices)"
.br
.ti -1c
.RI "wxChoice * \fBTieChoice\fP (\fBconst\fP wxString &Prompt, \fBint\fP &Selected, \fBconst\fP wxArrayString *pChoices)"
.br
.ti -1c
.RI "wxSlider * \fBTieSlider\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef, \fBconst\fP \fBint\fP \fBmax\fP, \fBconst\fP \fBint\fP \fBmin\fP=0)"
.br
.ti -1c
.RI "wxSlider * \fBTieSlider\fP (\fBconst\fP wxString &Prompt, \fBint\fP &pos, \fBconst\fP \fBint\fP \fBmax\fP, \fBconst\fP \fBint\fP \fBmin\fP=0)"
.br
.ti -1c
.RI "wxSlider * \fBTieSlider\fP (\fBconst\fP wxString &Prompt, double &pos, \fBconst\fP double \fBmax\fP, \fBconst\fP double \fBmin\fP=0\&.0)"
.br
.ti -1c
.RI "wxSlider * \fBTieSlider\fP (\fBconst\fP wxString &Prompt, float &pos, \fBconst\fP float fMin, \fBconst\fP float fMax)"
.br
.ti -1c
.RI "wxSlider * \fBTieVSlider\fP (\fBconst\fP wxString &Prompt, float &pos, \fBconst\fP float fMin, \fBconst\fP float fMax)"
.br
.ti -1c
.RI "wxRadioButton * \fBTieRadioButton\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef)"
.br
.ti -1c
.RI "wxRadioButton * \fBTieRadioButton\fP (\fBconst\fP wxString &Prompt, \fBconst\fP \fBint\fP iValue)"
.br
.RI "\fIThis function must be within a StartRadioButtonGroup - EndRadioButtonGroup pair\&. \fP"
.ti -1c
.RI "wxRadioButton * \fBTieRadioButton\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &Value)"
.br
.RI "\fIThis function must be within a StartRadioButtonGroup - EndRadioButtonGroup pair\&. \fP"
.ti -1c
.RI "wxSpinCtrl * \fBTieSpinCtrl\fP (\fBconst\fP wxString &Prompt, \fBWrappedType\fP &WrappedRef, \fBconst\fP \fBint\fP \fBmax\fP, \fBconst\fP \fBint\fP \fBmin\fP=0)"
.br
.ti -1c
.RI "wxSpinCtrl * \fBTieSpinCtrl\fP (\fBconst\fP wxString &Prompt, \fBint\fP &Value, \fBconst\fP \fBint\fP \fBmax\fP, \fBconst\fP \fBint\fP \fBmin\fP=0)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP \fBbool\fP bDefault)"
.br
.ti -1c
.RI "wxCheckBox * \fBTieCheckBoxOnRight\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP \fBbool\fP bDefault)"
.br
.ti -1c
.RI "wxChoice * \fBTieChoice\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP wxString &Default, \fBconst\fP wxArrayString &Choices, \fBconst\fP wxArrayString &TranslatedChoices)"
.br
.ti -1c
.RI "wxChoice * \fBTieChoice\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP \fBint\fP Default, \fBconst\fP wxArrayString &Choices, \fBconst\fP wxArrayInt &TranslatedChoices)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieTextBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP wxString &Default, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieTextBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP double &Default, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieNumericTextBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP wxString &Default, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxTextCtrl * \fBTieNumericTextBox\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP double &Default, \fBconst\fP \fBint\fP nChars)"
.br
.ti -1c
.RI "wxSlider * \fBTieSlider\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP \fBint\fP iDefault, \fBconst\fP \fBint\fP \fBmax\fP, \fBconst\fP \fBint\fP \fBmin\fP=0)"
.br
.ti -1c
.RI "wxSpinCtrl * \fBTieSpinCtrl\fP (\fBconst\fP wxString &Prompt, \fBconst\fP wxString &SettingName, \fBconst\fP \fBint\fP Value, \fBconst\fP \fBint\fP \fBmax\fP, \fBconst\fP \fBint\fP \fBmin\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEnableCtrl\fP (\fBbool\fP bEnable)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetSizeHints\fP (\fBint\fP minX, \fBint\fP minY)"
.br
.RI "\fIUsed to modify an already placed \fBWindow\fP\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBSetBorder\fP (\fBint\fP Border)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetStyle\fP (\fBint\fP \fBStyle\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetNoMatchSelector\fP (\fBint\fP iSelector)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetSizerProportion\fP (\fBint\fP iProp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetStretchyCol\fP (\fBint\fP \fBi\fP)"
.br
.RI "\fIUsed to modify an already placed FlexGridSizer to make a column stretchy\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBSetStretchyRow\fP (\fBint\fP \fBi\fP)"
.br
.RI "\fIUsed to modify an already placed FlexGridSizer to make a row stretchy\&. \fP"
.ti -1c
.RI "wxWindow * \fBGetParent\fP ()"
.br
.ti -1c
.RI "\fBShuttleGuiBase\fP & \fBProp\fP (\fBint\fP iProp)"
.br
.ti -1c
.RI "\fBint\fP \fBGetId\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBUseUpId\fP ()"
.br
.ti -1c
.RI "wxSizer * \fBGetSizer\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBSetProportions\fP (\fBint\fP Default)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPushSizer\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBPopSizer\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdateSizersCore\fP (\fBbool\fP bPrepend, \fBint\fP Flags)"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdateSizers\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdateSizersC\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdateSizersAtStart\fP ()"
.br
.ti -1c
.RI "long \fBStyle\fP (long Style)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "wxWindow * \fBmpLastWind\fP"
.br
.ti -1c
.RI "wxWindow * \fBmpDlg\fP"
.br
.ti -1c
.RI "wxSizer * \fBpSizerStack\fP [\fBnMaxNestedSizers\fP]"
.br
.ti -1c
.RI "wxString \fBmBoxName\fP"
.br
.ti -1c
.RI "\fBShuttle\fP * \fBmpShuttle\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiNoMatchSelector\fP"
.br
.ti -1c
.RI "\fBteShuttleMode\fP \fBmShuttleMode\fP"
.br
.RI "\fIUsed in choices to determine which item to use on no match\&. \fP"
.ti -1c
.RI "wxString \fBmSettingName\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmRadioCount\fP"
.br
.RI "\fIThe setting controlled by a group\&. \fP"
.ti -1c
.RI "\fBWrappedType\fP \fBmRadioValue\fP"
.br
.RI "\fIThe index of this radio item\&. -1 for none\&. \fP"
.ti -1c
.RI "wxString \fBmRadioValueString\fP"
.br
.RI "\fIThe wrapped value associated with the active radio button\&. \fP"
.ti -1c
.RI "\fBint\fP \fBmRadioValueInt\fP"
.br
.RI "\fIUnwrapped string value\&. \fP"
.ti -1c
.RI "\fBint\fP \fBmiSizerProp\fP"
.br
.RI "\fIUnwrapped integer value\&. \fP"
.ti -1c
.RI "\fBint\fP \fBmSizerDepth\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiBorder\fP"
.br
.ti -1c
.RI "long \fBmiStyle\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiProp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiId\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiIdNext\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiIdSetByUser\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmiPropSetByUser\fP"
.br
.ti -1c
.RI "std::unique_ptr< wxSizer > \fBmpSubSizer\fP"
.br
.ti -1c
.RI "wxSizer * \fBmpSizer\fP"
.br
.ti -1c
.RI "wxWindow * \fBmpParent\fP"
.br
.ti -1c
.RI "wxWindow * \fBmpWind\fP"
.br
.ti -1c
.RI "wxMenuBar * \fBmpMenuBar\fP"
.br
.ti -1c
.RI "wxMenu * \fBmpMenu\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class for shuttling data to and from a GUI\&. 

see also \fBShuttleGui\fP
.PP
Use the:
.IP "\(bu" 2
\fCStart\fP / \fCEnd\fP methods for containers, like two-column-layout\&.
.IP "\(bu" 2
\fCAdd\fP methods if you are only interested in creating the controls\&.
.IP "\(bu" 2
\fCTie\fP methods if you also want to exchange data using \fBShuttleGui\fP\&.
.PP
.PP
The code in this file is fairly repetitive\&. We are dealing with
.IP "\(bu" 2
Many different types of Widget\&.
.IP "\(bu" 2
Creation / Reading / Writing / Exporting / Importing
.IP "\(bu" 2
int, float, string variants (for example of TextCtrl contents)\&.
.PP
.PP
A technique used to reduce the size of the \fCTie\fP functions is to have one generic \fCTie\fP function that uses \fBWrappedType\fP for its data type\&. Type specific \fCTie\fP functions themselves call the generic variant\&.
.PP
A second technique used to reduce the size of \fCTie\fP functions only comes into play for two-step \fCTie\fP functions\&. (A two step \fCTie\fP function is one that transfers data between the registry and the GUI via an intermediate temporary variable)\&. In the two step style, a function \fBShuttleGuiBase::DoStep()\fP determines which transfers in the function are to be done, reducing repetitive if-then-else's\&.
.PP
Although unusual, these two techniques make the code easier to add to and much easier to check for correctness\&. The alternative 'more obvious' code that just repeats code as needed is considerably longer\&.
.PP
You would rarely use \fBShuttleGuiBase\fP directly, instead you'd use \fBShuttleGui\fP\&.
.PP
There is DOxygen documentation on how to use the \fBShuttleGui\fP class in \fBShuttleSystem\fP \&. 
.PP
Definition at line 74 of file ShuttleGui\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ShuttleGuiBase::ShuttleGuiBase (wxWindow * pParent, \fBteShuttleMode\fP ShuttleMode)"

.PP
Definition at line 111 of file ShuttleGui\&.cpp\&.
.SS "ShuttleGuiBase::~ShuttleGuiBase (\fBvoid\fP)"

.PP
Definition at line 121 of file ShuttleGui\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "wxBitmapButton * ShuttleGuiBase::AddBitmapButton (\fBconst\fP wxBitmap & Bitmap, \fBint\fP PositionFlags = \fCwxALIGN_CENTRE\fP)"

.PP
Definition at line 312 of file ShuttleGui\&.cpp\&.
.SS "wxButton * ShuttleGuiBase::AddButton (\fBconst\fP wxString & Text, \fBint\fP PositionFlags = \fCwxALIGN_CENTRE\fP)"

.PP
Definition at line 298 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::AddCheckBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & Selected)"

.PP
Definition at line 264 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::AddCheckBoxOnRight (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & Selected)"
For a consistant two-column layout we want labels on the left and controls on the right\&. CheckBoxes break that rule, so we fake it by placing a static text label and then a tick box with an empty label\&. 
.PP
Definition at line 282 of file ShuttleGui\&.cpp\&.
.SS "wxChoice * ShuttleGuiBase::AddChoice (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & Selected, \fBconst\fP wxArrayString * pChoices)"

.PP
Definition at line 328 of file ShuttleGui\&.cpp\&.
.SS "wxComboBox * ShuttleGuiBase::AddCombo (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & Selected, \fBconst\fP wxArrayString * pChoices, long style = \fC0\fP)"

.PP
Definition at line 396 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddConstTextBox (\fBconst\fP wxString & Caption, \fBconst\fP wxString & Value)"

.PP
Single line text box of fixed size\&. 
.PP
Definition at line 566 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddFixedText (\fBconst\fP wxString & Str, \fBbool\fP bCenter = \fC\fBfalse\fP\fP)"

.PP
Definition at line 353 of file ShuttleGui\&.cpp\&.
.SS "wxGrid * ShuttleGuiBase::AddGrid ()"

.PP
Definition at line 611 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddIcon (wxBitmap * pBmp)"

.PP
Definition at line 654 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddIconButton (\fBconst\fP wxString & Command, \fBconst\fP wxString & Params, wxBitmap * pBmp)"

.SS "wxListBox * ShuttleGuiBase::AddListBox (\fBconst\fP wxArrayString * pChoices, long style = \fC0\fP)"

.PP
Definition at line 582 of file ShuttleGui\&.cpp\&.
.SS "wxListCtrl * ShuttleGuiBase::AddListControl ()"

.PP
Definition at line 597 of file ShuttleGui\&.cpp\&.
.SS "wxListCtrl * ShuttleGuiBase::AddListControlReportMode ()"

.PP
Definition at line 625 of file ShuttleGui\&.cpp\&.
.SS "wxMenu * ShuttleGuiBase::AddMenu (\fBconst\fP wxString & Title)"

.PP
Definition at line 686 of file ShuttleGui\&.cpp\&.
.SS "wxMenuBar * ShuttleGuiBase::AddMenuBar ()"

.PP
Definition at line 673 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::AddNumericTextBox (\fBconst\fP wxString & Caption, \fBconst\fP wxString & Value, \fBconst\fP \fBint\fP nChars)"

.PP
Definition at line 518 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddPrompt (\fBconst\fP wxString & Prompt)"

.PP
Right aligned text string\&. 
.PP
Definition at line 212 of file ShuttleGui\&.cpp\&.
.SS "wxRadioButton * ShuttleGuiBase::AddRadioButton (\fBconst\fP wxString & Prompt)"

.PP
\fBTodo\fP
.RS 4
This function and the next one, suitably adapted, could be used by TieRadioButton\&. 
.RE
.PP

.PP
Definition at line 424 of file ShuttleGui\&.cpp\&.
.SS "wxRadioButton * ShuttleGuiBase::AddRadioButtonToGroup (\fBconst\fP wxString & Prompt)"

.PP
Definition at line 440 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::AddSlider (\fBconst\fP wxString & Prompt, \fBint\fP pos, \fBint\fP Max, \fBint\fP Min = \fC0\fP)"

.PP
Definition at line 453 of file ShuttleGui\&.cpp\&.
.SS "wxSpinCtrl * ShuttleGuiBase::AddSpinCtrl (\fBconst\fP wxString & Prompt, \fBint\fP Value, \fBint\fP Max, \fBint\fP Min)"

.PP
Definition at line 471 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::AddTextBox (\fBconst\fP wxString & Caption, \fBconst\fP wxString & Value, \fBconst\fP \fBint\fP nChars)"

.PP
Definition at line 491 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::AddTextWindow (\fBconst\fP wxString & Value)"

.PP
Multiline text box that grows\&. 
.PP
Definition at line 549 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddTitle (\fBconst\fP wxString & Prompt)"

.PP
Centred text string\&. 
.PP
Definition at line 240 of file ShuttleGui\&.cpp\&.
.SS "wxTreeCtrl * ShuttleGuiBase::AddTree ()"

.PP
Definition at line 640 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::AddUnits (\fBconst\fP wxString & Prompt)"

.PP
Left aligned text string\&. 
.PP
Definition at line 226 of file ShuttleGui\&.cpp\&.
.SS "wxStaticText * ShuttleGuiBase::AddVariableText (\fBconst\fP wxString & Str, \fBbool\fP bCenter = \fC\fBfalse\fP\fP, \fBint\fP PositionFlags = \fC0\fP)"

.PP
Definition at line 370 of file ShuttleGui\&.cpp\&.
.SS "wxSlider* ShuttleGuiBase::AddVSlider (\fBconst\fP wxString & Prompt, \fBint\fP pos, \fBint\fP Max)"

.SS "wxWindow * ShuttleGuiBase::AddWindow (wxWindow * pWindow, \fBint\fP Flags = \fCwxALIGN_CENTRE | wxALL\fP)"
Very generic 'Add' function\&. We can add anything we like\&. Useful for unique controls 
.PP
Definition at line 254 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::DoDataShuttle (\fBconst\fP wxString & Name, \fBWrappedType\fP & WrappedRef)"
When we're exchanging with the configured shuttle rather than with the GUI We use this function\&. 
.PP
Definition at line 1014 of file ShuttleGui\&.cpp\&.
.SS "\fBbool\fP ShuttleGuiBase::DoStep (\fBint\fP iStep)"
Code-Condenser function\&.
.PP
We have functions which need to do:
.PP
.PP
.nf
// Either: Values are coming in:
DoDataShuttle( SettingName, WrappedRef );
TieMyControl( Prompt, WrappedRef );

// Or: Values are going out:
TieMyControl( Prompt, WrappedRef );
DoDataShuttle( SettingName, WrappedRef );
.fi
.PP
.PP
So we make a list of all the possible steps, and have DoStep choose which ones are actually done, like this:
.PP
.PP
.nf
if( DoStep(1) ) DoFirstThing();
if( DoStep(2) ) DoSecondThing();
if( DoStep(3) ) DoThirdThing();
.fi
.PP
.PP
The repeated choice logic can then be taken out of those functions\&.
.PP
JKC: This paves the way for doing data validation too, though when we add that we wil need to renumber the steps\&. 
.PP
Definition at line 1603 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EnableCtrl (\fBbool\fP bEnable)"

.PP
Definition at line 172 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndHorizontalLay ()"

.PP
Definition at line 974 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndInvisiblePanel ()"

.PP
Definition at line 953 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndMultiColumn ()"

.PP
Definition at line 1005 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndNotebook ()"

.PP
Definition at line 838 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndNotebookPage ()"

.PP
Definition at line 889 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndPanel ()"

.PP
Definition at line 816 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndRadioButtonGroup ()"
Call this after any TieRadioButton calls\&. It's generic too\&. We don't need type-specific ones\&. 
.PP
Definition at line 1381 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndScroller ()"

.PP
Definition at line 769 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndStatic ()"

.PP
Definition at line 717 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndThreeColumn ()\fC [inline]\fP"

.PP
Definition at line 129 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndTwoColumn ()\fC [inline]\fP"

.PP
Definition at line 127 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::EndVerticalLay ()"

.PP
Definition at line 990 of file ShuttleGui\&.cpp\&.
.SS "\fBint\fP ShuttleGuiBase::GetId ()\fC [inline]\fP"

.PP
Definition at line 268 of file ShuttleGui\&.h\&.
.SS "wxWindow* ShuttleGuiBase::GetParent ()\fC [inline]\fP"

.PP
Definition at line 260 of file ShuttleGui\&.h\&.
.SS "wxSizer* ShuttleGuiBase::GetSizer ()\fC [inline]\fP"

.PP
Definition at line 271 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::Init ()"

.PP
Definition at line 125 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::PopSizer ()\fC [protected]\fP"

.PP
Definition at line 1963 of file ShuttleGui\&.cpp\&.
.SS "\fBShuttleGuiBase\fP & ShuttleGuiBase::Prop (\fBint\fP iProp)"

.PP
Definition at line 667 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::PushSizer ()\fC [protected]\fP"

.PP
Definition at line 1970 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetBorder (\fBint\fP Border)\fC [inline]\fP"

.PP
Definition at line 252 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetNoMatchSelector (\fBint\fP iSelector)\fC [inline]\fP"

.PP
Definition at line 254 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetProportions (\fBint\fP Default)\fC [protected]\fP"

.PP
Definition at line 1900 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetSizeHints (\fBint\fP minX, \fBint\fP minY)"

.PP
Used to modify an already placed \fBWindow\fP\&. 
.PP
Definition at line 180 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetSizerProportion (\fBint\fP iProp)\fC [inline]\fP"

.PP
Definition at line 255 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetStretchyCol (\fBint\fP i)"

.PP
Used to modify an already placed FlexGridSizer to make a column stretchy\&. 
.PP
Definition at line 189 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetStretchyRow (\fBint\fP i)"

.PP
Used to modify an already placed FlexGridSizer to make a row stretchy\&. 
.PP
Definition at line 199 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::SetStyle (\fBint\fP Style)\fC [inline]\fP"

.PP
Definition at line 253 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartHorizontalLay (\fBint\fP PositionFlags = \fCwxALIGN_CENTRE\fP, \fBint\fP iProp = \fC1\fP)"
Starts a Horizontal Layout\&.
.IP "\(bu" 2
Use wxEXPAND and 0 to expand horizontally but not vertically\&.
.IP "\(bu" 2
Use wxEXPAND and 1 to expand horizontally and vertically\&.
.IP "\(bu" 2
Use wxCENTRE and 1 for no expansion\&. 
.PP
\fBParameters:\fP
.RS 4
\fIPositionFlag\fP Typically wxEXPAND or wxALIGN_CENTER\&. 
.br
\fIiProp\fP Proportionality for resizing\&. 
.RE
.PP

.PP

.PP
Definition at line 965 of file ShuttleGui\&.cpp\&.
.SS "wxPanel * ShuttleGuiBase::StartInvisiblePanel ()"

.PP
Definition at line 930 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartMultiColumn (\fBint\fP nCols, \fBint\fP PositionFlags = \fCwxALIGN_LEFT\fP)"

.PP
Definition at line 997 of file ShuttleGui\&.cpp\&.
.SS "wxNotebook * ShuttleGuiBase::StartNotebook ()"

.PP
Definition at line 824 of file ShuttleGui\&.cpp\&.
.SS "\fBwxNotebookPage\fP * ShuttleGuiBase::StartNotebookPage (\fBconst\fP wxString & Name)"

.PP
Definition at line 845 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartNotebookPage (\fBconst\fP wxString & Name, \fBwxNotebookPage\fP * pPage)"

.PP
Definition at line 867 of file ShuttleGui\&.cpp\&.
.SS "wxPanel * ShuttleGuiBase::StartPanel (\fBint\fP iStyle = \fC0\fP)"

.PP
Definition at line 788 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartRadioButtonGroup (\fBconst\fP wxString & SettingName)"
Call this before any TieRadioButton calls\&. This is the generic version and requires mRadioValue already initialised\&. Versions for specific types must do that initialisation\&. 
.PP
Definition at line 1370 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartRadioButtonGroup (\fBconst\fP wxString & SettingName, \fBconst\fP \fBint\fP iDefaultValue)"
Integer specific version of StartRadioButtonGroup\&. All '\fBTieRadioButton()\fP' enclosed must be ints\&. 
.PP
Definition at line 1836 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartRadioButtonGroup (\fBconst\fP wxString & SettingName, \fBconst\fP wxString & DefaultValue)"
String specific version of StartRadioButtonGroup\&. All '\fBTieRadioButton()\fP' enclosed must be strings\&. 
.PP
Definition at line 1847 of file ShuttleGui\&.cpp\&.
.SS "wxScrolledWindow * ShuttleGuiBase::StartScroller (\fBint\fP iStyle = \fC0\fP)"
This allows subsequent controls and static boxes to be in a scrolled panel\&. Very handy if you are running out of space on a dialog\&.
.PP
The iStyle parameter is used in some very hacky code that dynamically repopulates a dialog\&. It also controls the background colour\&. Look at the code for details\&. 
.PP
\fBParameters:\fP
.RS 4
\fIistyle\fP deprecated parameter, but has been used for hacking\&. 
.RE
.PP

.PP
Definition at line 732 of file ShuttleGui\&.cpp\&.
.SS "wxStaticBox * ShuttleGuiBase::StartStatic (\fBconst\fP wxString & Str, \fBint\fP iProp = \fC0\fP)"
Starts a static box around a number of controls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIStr\fP The text of the title for the box\&. 
.br
\fIiProp\fP The resizing proportion value\&. Use iProp == 0 for a minimum sized static box\&. Use iProp == 1 for a box that grows if there is space to spare\&. 
.RE
.PP

.PP
Definition at line 699 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartThreeColumn ()\fC [inline]\fP"

.PP
Definition at line 128 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartTwoColumn ()\fC [inline]\fP"

.PP
Definition at line 126 of file ShuttleGui\&.h\&.
.SS "\fBvoid\fP ShuttleGuiBase::StartVerticalLay (\fBint\fP iProp = \fC1\fP)"

.PP
Definition at line 981 of file ShuttleGui\&.cpp\&.
.SS "long ShuttleGuiBase::Style (long Style)\fC [protected]\fP"

.PP
Definition at line 1977 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::TieCheckBox (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef)"

.PP
Definition at line 1026 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox* ShuttleGuiBase::TieCheckBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & Selected)"

.SS "wxCheckBox * ShuttleGuiBase::TieCheckBox (\fBconst\fP wxString & Prompt, \fBbool\fP & Var)"

.PP
Definition at line 1394 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::TieCheckBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP \fBbool\fP bDefault)"
Variant of the standard TieCheckBox which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
Definition at line 1626 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::TieCheckBoxOnRight (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef)"

.PP
Definition at line 1065 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::TieCheckBoxOnRight (\fBconst\fP wxString & Prompt, \fBbool\fP & Var)"

.PP
Definition at line 1401 of file ShuttleGui\&.cpp\&.
.SS "wxCheckBox * ShuttleGuiBase::TieCheckBoxOnRight (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP \fBbool\fP bDefault)"
Variant of the standard TieCheckBox which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
Definition at line 1644 of file ShuttleGui\&.cpp\&.
.SS "wxChoice * ShuttleGuiBase::TieChoice (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef, \fBconst\fP wxArrayString * pChoices)"

.PP
Definition at line 1268 of file ShuttleGui\&.cpp\&.
.SS "wxChoice * ShuttleGuiBase::TieChoice (\fBconst\fP wxString & Prompt, wxString & Selected, \fBconst\fP wxArrayString * pChoices)"

.PP
Definition at line 1485 of file ShuttleGui\&.cpp\&.
.SS "wxChoice * ShuttleGuiBase::TieChoice (\fBconst\fP wxString & Prompt, \fBint\fP & Selected, \fBconst\fP wxArrayString * pChoices)"

.PP
Definition at line 1494 of file ShuttleGui\&.cpp\&.
.SS "wxChoice * ShuttleGuiBase::TieChoice (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP wxString & Default, \fBconst\fP wxArrayString & Choices, \fBconst\fP wxArrayString & TranslatedChoices)"
Variant of the standard TieChoice which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIPrompt\fP The prompt shown beside the control\&. 
.br
\fISettingName\fP The setting name as stored in gPrefs 
.br
\fIDefault\fP The default value for this control (translated) 
.br
\fIChoices\fP An array of choices that appear on screen\&. 
.br
\fITranslatedChoices\fP The corresponding values (as a string array) 
.RE
.PP

.PP
Definition at line 1780 of file ShuttleGui\&.cpp\&.
.SS "wxChoice * ShuttleGuiBase::TieChoice (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP \fBint\fP Default, \fBconst\fP wxArrayString & Choices, \fBconst\fP wxArrayInt & TranslatedChoices)"
Variant of the standard TieChoice which does the two step exchange between gui and stack variable and stack variable and shuttle\&. Difference to previous one is that the Translated choices and default are integers, not Strings\&. 
.PP
\fBParameters:\fP
.RS 4
\fIPrompt\fP The prompt shown beside the control\&. 
.br
\fISettingName\fP The setting name as stored in gPrefs 
.br
\fIDefault\fP The default value for this control (translated) 
.br
\fIChoices\fP An array of choices that appear on screen\&. 
.br
\fITranslatedChoices\fP The correcponding values (as an integer array) 
.RE
.PP

.PP
Definition at line 1812 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieNumericTextBox (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef, \fBconst\fP \fBint\fP nChars)"

.PP
Definition at line 1184 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieNumericTextBox (\fBconst\fP wxString & Caption, wxString & Value, \fBconst\fP \fBint\fP nChars = \fC0\fP)"

.PP
Definition at line 1434 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieNumericTextBox (\fBconst\fP wxString & Prompt, \fBint\fP & Selected, \fBconst\fP \fBint\fP nChars = \fC0\fP)"

.PP
Definition at line 1440 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieNumericTextBox (\fBconst\fP wxString & Prompt, double & Value, \fBconst\fP \fBint\fP nChars = \fC0\fP)"

.PP
Definition at line 1446 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieNumericTextBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP wxString & Default, \fBconst\fP \fBint\fP nChars)"
Variant of the standard TieTextBox which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
Definition at line 1720 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieNumericTextBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP double & Default, \fBconst\fP \fBint\fP nChars)"
Variant of the standard TieTextBox which does the two step exchange between gui and stack variable and stack variable and shuttle\&. This one does it for double values\&.\&.\&. 
.PP
Definition at line 1757 of file ShuttleGui\&.cpp\&.
.SS "wxRadioButton * ShuttleGuiBase::TieRadioButton (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef)"

.PP
Definition at line 1330 of file ShuttleGui\&.cpp\&.
.SS "wxRadioButton * ShuttleGuiBase::TieRadioButton (\fBconst\fP wxString & Prompt, \fBconst\fP \fBint\fP iValue)"

.PP
This function must be within a StartRadioButtonGroup - EndRadioButtonGroup pair\&. 
.PP
Definition at line 1858 of file ShuttleGui\&.cpp\&.
.SS "wxRadioButton * ShuttleGuiBase::TieRadioButton (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & Value)"

.PP
This function must be within a StartRadioButtonGroup - EndRadioButtonGroup pair\&. 
.PP
Definition at line 1868 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::TieSlider (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef, \fBconst\fP \fBint\fP max, \fBconst\fP \fBint\fP min = \fC0\fP)"

.PP
Definition at line 1224 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::TieSlider (\fBconst\fP wxString & Prompt, \fBint\fP & pos, \fBconst\fP \fBint\fP max, \fBconst\fP \fBint\fP min = \fC0\fP)"

.PP
Definition at line 1452 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::TieSlider (\fBconst\fP wxString & Prompt, double & pos, \fBconst\fP double max, \fBconst\fP double min = \fC0\&.0\fP)"

.PP
Definition at line 1458 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::TieSlider (\fBconst\fP wxString & Prompt, float & pos, \fBconst\fP float fMin, \fBconst\fP float fMax)"

.PP
Definition at line 1464 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::TieSlider (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP \fBint\fP iDefault, \fBconst\fP \fBint\fP max, \fBconst\fP \fBint\fP min = \fC0\fP)"
Variant of the standard TieSlider which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
Definition at line 1662 of file ShuttleGui\&.cpp\&.
.SS "wxSpinCtrl * ShuttleGuiBase::TieSpinCtrl (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef, \fBconst\fP \fBint\fP max, \fBconst\fP \fBint\fP min = \fC0\fP)"

.PP
Definition at line 1104 of file ShuttleGui\&.cpp\&.
.SS "wxSpinCtrl * ShuttleGuiBase::TieSpinCtrl (\fBconst\fP wxString & Prompt, \fBint\fP & Value, \fBconst\fP \fBint\fP max, \fBconst\fP \fBint\fP min = \fC0\fP)"

.PP
Definition at line 1410 of file ShuttleGui\&.cpp\&.
.SS "wxSpinCtrl * ShuttleGuiBase::TieSpinCtrl (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP \fBint\fP Value, \fBconst\fP \fBint\fP max, \fBconst\fP \fBint\fP min)"
Variant of the standard TieSpinCtrl which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
Definition at line 1682 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieTextBox (\fBconst\fP wxString & Prompt, \fBWrappedType\fP & WrappedRef, \fBconst\fP \fBint\fP nChars)"

.PP
Definition at line 1144 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieTextBox (\fBconst\fP wxString & Caption, wxString & Value, \fBconst\fP \fBint\fP nChars = \fC0\fP)"

.PP
Definition at line 1416 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieTextBox (\fBconst\fP wxString & Prompt, \fBint\fP & Selected, \fBconst\fP \fBint\fP nChars = \fC0\fP)"

.PP
Definition at line 1422 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieTextBox (\fBconst\fP wxString & Prompt, double & Value, \fBconst\fP \fBint\fP nChars = \fC0\fP)"

.PP
Definition at line 1428 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieTextBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP wxString & Default, \fBconst\fP \fBint\fP nChars)"
Variant of the standard TieTextBox which does the two step exchange between gui and stack variable and stack variable and shuttle\&. 
.PP
Definition at line 1702 of file ShuttleGui\&.cpp\&.
.SS "wxTextCtrl * ShuttleGuiBase::TieTextBox (\fBconst\fP wxString & Prompt, \fBconst\fP wxString & SettingName, \fBconst\fP double & Default, \fBconst\fP \fBint\fP nChars)"
Variant of the standard TieTextBox which does the two step exchange between gui and stack variable and stack variable and shuttle\&. This one does it for double values\&.\&.\&. 
.PP
Definition at line 1738 of file ShuttleGui\&.cpp\&.
.SS "wxSlider * ShuttleGuiBase::TieVSlider (\fBconst\fP wxString & Prompt, float & pos, \fBconst\fP float fMin, \fBconst\fP float fMax)"

.PP
Definition at line 1473 of file ShuttleGui\&.cpp\&.
.SS "wxString ShuttleGuiBase::TranslateFromIndex (\fBconst\fP \fBint\fP nIn, \fBconst\fP wxArrayString & Choices)"

.PP
Index-to-String\&. 
.PP
Definition at line 1521 of file ShuttleGui\&.cpp\&.
.SS "\fBint\fP ShuttleGuiBase::TranslateFromIndex (\fBconst\fP \fBint\fP nIn, \fBconst\fP wxArrayInt & Choices)"

.PP
Index-to-int (choices can be items like e\&.g 0x400120 ) 
.PP
Definition at line 1545 of file ShuttleGui\&.cpp\&.
.SS "\fBint\fP ShuttleGuiBase::TranslateToIndex (\fBconst\fP wxString & Value, \fBconst\fP wxArrayString & Choices)"

.PP
String-to-Index\&. 
.PP
Definition at line 1511 of file ShuttleGui\&.cpp\&.
.SS "\fBint\fP ShuttleGuiBase::TranslateToIndex (\fBconst\fP \fBint\fP Value, \fBconst\fP wxArrayInt & Choices)"

.PP
Int-to-Index (choices can be items like e\&.g 0x400120 ) 
.PP
Definition at line 1535 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::UpdateSizers ()\fC [protected]\fP"

.PP
Definition at line 1951 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::UpdateSizersAtStart ()\fC [protected]\fP"

.PP
Definition at line 1960 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::UpdateSizersC ()\fC [protected]\fP"

.PP
Definition at line 1955 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::UpdateSizersCore (\fBbool\fP bPrepend, \fBint\fP Flags)\fC [protected]\fP"

.PP
Definition at line 1912 of file ShuttleGui\&.cpp\&.
.SS "\fBvoid\fP ShuttleGuiBase::UseUpId ()"
The Ids increment as we add NEW controls\&. However, the user can force the id manually, for example if they need a specific Id for a button, and then let it resume normal numbering later\&. \fBUseUpId()\fP sets miId to the next Id, either using the user specicfied one, or resuming the sequence\&. 
.PP
Definition at line 1889 of file ShuttleGui\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "wxString ShuttleGuiBase::mBoxName\fC [protected]\fP"

.PP
Definition at line 288 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miBorder\fC [protected]\fP"

.PP
Definition at line 306 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miId\fC [protected]\fP"

.PP
Definition at line 311 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miIdNext\fC [protected]\fP"

.PP
Definition at line 312 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miIdSetByUser\fC [protected]\fP"

.PP
Definition at line 313 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miNoMatchSelector\fC [protected]\fP"
Controls source/destination of shuttled data\&. You can leave this NULL if you are shuttling to variables 
.PP
Definition at line 292 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miProp\fC [protected]\fP"

.PP
Definition at line 308 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miPropSetByUser\fC [protected]\fP"

.PP
Definition at line 315 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::miSizerProp\fC [protected]\fP"

.PP
Unwrapped integer value\&. 
.PP
Definition at line 304 of file ShuttleGui\&.h\&.
.SS "long ShuttleGuiBase::miStyle\fC [protected]\fP"

.PP
Definition at line 307 of file ShuttleGui\&.h\&.
.SS "wxWindow* ShuttleGuiBase::mpDlg\fC [protected]\fP"

.PP
Definition at line 286 of file ShuttleGui\&.h\&.
.SS "wxWindow* ShuttleGuiBase::mpLastWind\fC [protected]\fP"

.PP
Definition at line 285 of file ShuttleGui\&.h\&.
.SS "wxMenu* ShuttleGuiBase::mpMenu\fC [protected]\fP"

.PP
Definition at line 322 of file ShuttleGui\&.h\&.
.SS "wxMenuBar* ShuttleGuiBase::mpMenuBar\fC [protected]\fP"

.PP
Definition at line 321 of file ShuttleGui\&.h\&.
.SS "wxWindow* ShuttleGuiBase::mpParent\fC [protected]\fP"

.PP
Definition at line 319 of file ShuttleGui\&.h\&.
.SS "\fBShuttle\fP* ShuttleGuiBase::mpShuttle\fC [protected]\fP"

.PP
Definition at line 290 of file ShuttleGui\&.h\&.
.SS "wxSizer* ShuttleGuiBase::mpSizer\fC [protected]\fP"

.PP
Definition at line 318 of file ShuttleGui\&.h\&.
.SS "std::unique_ptr<wxSizer> ShuttleGuiBase::mpSubSizer\fC [protected]\fP"

.PP
Definition at line 317 of file ShuttleGui\&.h\&.
.SS "wxWindow* ShuttleGuiBase::mpWind\fC [protected]\fP"

.PP
Definition at line 320 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::mRadioCount\fC [protected]\fP"

.PP
The setting controlled by a group\&. 
.PP
Definition at line 298 of file ShuttleGui\&.h\&.
.SS "\fBWrappedType\fP ShuttleGuiBase::mRadioValue\fC [protected]\fP"

.PP
The index of this radio item\&. -1 for none\&. 
.PP
Definition at line 300 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::mRadioValueInt\fC [protected]\fP"

.PP
Unwrapped string value\&. 
.PP
Definition at line 302 of file ShuttleGui\&.h\&.
.SS "wxString ShuttleGuiBase::mRadioValueString\fC [protected]\fP"

.PP
The wrapped value associated with the active radio button\&. 
.PP
Definition at line 301 of file ShuttleGui\&.h\&.
.SS "wxString ShuttleGuiBase::mSettingName\fC [protected]\fP"

.PP
Definition at line 297 of file ShuttleGui\&.h\&.
.SS "\fBteShuttleMode\fP ShuttleGuiBase::mShuttleMode\fC [protected]\fP"

.PP
Used in choices to determine which item to use on no match\&. 
.PP
Definition at line 294 of file ShuttleGui\&.h\&.
.SS "\fBint\fP ShuttleGuiBase::mSizerDepth\fC [protected]\fP"

.PP
Definition at line 305 of file ShuttleGui\&.h\&.
.SS "wxSizer* ShuttleGuiBase::pSizerStack[\fBnMaxNestedSizers\fP]\fC [protected]\fP"

.PP
Definition at line 287 of file ShuttleGui\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
