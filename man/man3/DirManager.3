.TH "DirManager" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DirManager \- Creates and manages \fBBlockFile\fP objects\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DirManager\&.h>\fP
.PP
Inherits \fBXMLTagHandler\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDirManager\fP ()"
.br
.ti -1c
.RI "virtual \fB~DirManager\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBRef\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBDeref\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBSetProject\fP (wxString &newProjPath, wxString &newProjName, \fBconst\fP \fBbool\fP bCreate)"
.br
.ti -1c
.RI "wxString \fBGetProjectDataDir\fP ()"
.br
.ti -1c
.RI "wxString \fBGetProjectName\fP ()"
.br
.ti -1c
.RI "wxLongLong \fBGetFreeDiskSpace\fP ()"
.br
.ti -1c
.RI "\fBBlockFile\fP * \fBNewSimpleBlockFile\fP (\fBsamplePtr\fP sampleData, \fBsampleCount\fP sampleLen, \fBsampleFormat\fP \fBformat\fP, \fBbool\fP allowDeferredWrite=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBBlockFile\fP * \fBNewAliasBlockFile\fP (\fBconst\fP wxString &aliasedFile, \fBsampleCount\fP aliasStart, \fBsampleCount\fP aliasLen, \fBint\fP aliasChannel)"
.br
.ti -1c
.RI "\fBBlockFile\fP * \fBNewODAliasBlockFile\fP (\fBconst\fP wxString &aliasedFile, \fBsampleCount\fP aliasStart, \fBsampleCount\fP aliasLen, \fBint\fP aliasChannel)"
.br
.ti -1c
.RI "\fBBlockFile\fP * \fBNewODDecodeBlockFile\fP (\fBconst\fP wxString &aliasedFile, \fBsampleCount\fP aliasStart, \fBsampleCount\fP aliasLen, \fBint\fP aliasChannel, \fBint\fP decodeType)"
.br
.ti -1c
.RI "\fBbool\fP \fBContainsBlockFile\fP (\fBBlockFile\fP *\fBb\fP) \fBconst\fP "
.br
.RI "\fIReturns true if the blockfile pointed to by b is contained by the \fBDirManager\fP\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBContainsBlockFile\fP (\fBconst\fP wxString &filepath) \fBconst\fP "
.br
.RI "\fICheck for existing using filename using complete filename\&. \fP"
.ti -1c
.RI "\fBBlockFile\fP * \fBCopyBlockFile\fP (\fBBlockFile\fP *\fBb\fP)"
.br
.ti -1c
.RI "\fBBlockFile\fP * \fBLoadBlockFile\fP (\fBconst\fP wxChar **attrs, \fBsampleFormat\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSaveBlockFile\fP (\fBBlockFile\fP *\fBf\fP, \fBint\fP depth, FILE *fp)"
.br
.ti -1c
.RI "\fBbool\fP \fBMoveToNewProjectDirectory\fP (\fBBlockFile\fP *\fBf\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBCopyToNewProjectDirectory\fP (\fBBlockFile\fP *\fBf\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBEnsureSafeFilename\fP (wxFileName fName)"
.br
.ti -1c
.RI "\fBvoid\fP \fBRef\fP (\fBBlockFile\fP *\fBf\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBDeref\fP (\fBBlockFile\fP *\fBf\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBGetRefCount\fP (\fBBlockFile\fP *\fBf\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLoadingTarget\fP (\fBBlockArray\fP *pArray, unsigned idx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLoadingFormat\fP (\fBsampleFormat\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLoadingBlockLength\fP (\fBsampleCount\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLoadingMaxSamples\fP (\fBsampleCount\fP \fBmax\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBHandleXMLTag\fP (\fBconst\fP wxChar *\fBtag\fP, \fBconst\fP wxChar **attrs)"
.br
.ti -1c
.RI "\fBXMLTagHandler\fP * \fBHandleXMLChild\fP (\fBconst\fP wxChar *WXUNUSED(\fBtag\fP))"
.br
.ti -1c
.RI "\fBvoid\fP \fBWriteXML\fP (\fBXMLWriter\fP &WXUNUSED(xmlFile))"
.br
.ti -1c
.RI "\fBbool\fP \fBAssignFile\fP (wxFileName &\fBfilename\fP, \fBconst\fP wxString &\fBvalue\fP, \fBbool\fP check)"
.br
.ti -1c
.RI "\fBint\fP \fBProjectFSCK\fP (\fBconst\fP \fBbool\fP bForceError, \fBconst\fP \fBbool\fP bAutoRecoverMode)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFindMissingAliasedFiles\fP (BlockHash &missingAliasedFileAUFHash, BlockHash &missingAliasedFilePathHash)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFindMissingAUFs\fP (BlockHash &missingAUFHash)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFindMissingAUs\fP (BlockHash &missingAUHash)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFindOrphanBlockFiles\fP (\fBconst\fP wxArrayString &filePathArray, wxArrayString &orphanFilePathArray)"
.br
.ti -1c
.RI "\fBvoid\fP \fBRemoveOrphanBlockfiles\fP ()"
.br
.ti -1c
.RI "wxString \fBGetDataFilesDir\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetLocalTempDir\fP (\fBconst\fP wxString &path)"
.br
.ti -1c
.RI "\fBvoid\fP \fBWriteCacheToDisk\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBFillBlockfilesCache\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBvoid\fP \fBSetTempDir\fP (\fBconst\fP wxString &_temp)"
.br
.ti -1c
.RI "static \fBvoid\fP \fBCleanTempDir\fP ()"
.br
.ti -1c
.RI "static \fBvoid\fP \fBSetDontDeleteTempFiles\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSequenceTest\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Creates and manages \fBBlockFile\fP objects\&. 

This class manages the files that a project uses to store most of its data\&. It creates NEW \fBBlockFile\fP objects, which can be used to store any type of data\&. BlockFiles support all of the common file operations, but they also support reference counting, so two different parts of a project can point to the same block of data\&.
.PP
For example, a track might contain 10 blocks of data representing its audio\&. If you copy the last 5 blocks and paste at the end of the file, no NEW blocks need to be created - we just store pointers to NEW ones\&. When part of a track is deleted, the affected blocks decrement their reference counts, and when they reach zero they are deleted\&. This same mechanism is also used to implement Undo\&.
.PP
The \fBDirManager\fP, besides mapping filenames to absolute paths, also hashes all of the block names used in a project, so that when reading a project from disk, multiple copies of the same block still get mapped to the same \fBBlockFile\fP object\&.
.PP
The blockfile/directory scheme is rather complicated with two different schemes\&. The current scheme uses two levels of subdirectories - up to 256 'eXX' and up to 256 'dYY' directories within each of the 'eXX' dirs, where XX and YY are hex chars\&. In each of the dXX directories there are up to 256 audio files (e\&.g\&. \&.au or \&.auf)\&. They have a filename scheme of 'eXXYYZZZZ', where XX and YY refers to the subdirectories as above\&. The 'ZZZZ' component is generated randomly for some reason\&. The XX and YY components are sequential\&. \fBDirManager\fP fills up the current dYY subdir until 256 are created, and moves on to the next one\&.
.PP
So for example, the first blockfile created may be 'e00/d00/e0000a23b\&.au' and the next 'e00/d00/e000015e8\&.au', and the 257th may be 'e00/d01/e0001f02a\&.au'\&. On close the blockfiles that are no longer referenced by the project (edited or deleted) are removed, along with the consequent empty directories\&. 
.PP
Definition at line 37 of file DirManager\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DirManager::DirManager ()"

.PP
Definition at line 318 of file DirManager\&.cpp\&.
.SS "DirManager::~DirManager ()\fC [virtual]\fP"

.PP
Definition at line 366 of file DirManager\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBbool\fP DirManager::AssignFile (wxFileName & filename, \fBconst\fP wxString & value, \fBbool\fP check)"

.PP
Definition at line 594 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::CleanTempDir ()\fC [static]\fP"

.PP
Definition at line 379 of file DirManager\&.cpp\&.
.SS "\fBbool\fP DirManager::ContainsBlockFile (\fBBlockFile\fP * b) const"

.PP
Returns true if the blockfile pointed to by b is contained by the \fBDirManager\fP\&. 
.PP
Definition at line 934 of file DirManager\&.cpp\&.
.SS "\fBbool\fP DirManager::ContainsBlockFile (\fBconst\fP wxString & filepath) const"

.PP
Check for existing using filename using complete filename\&. 
.PP
Definition at line 942 of file DirManager\&.cpp\&.
.SS "\fBBlockFile\fP * DirManager::CopyBlockFile (\fBBlockFile\fP * b)"

.PP
Definition at line 952 of file DirManager\&.cpp\&.
.SS "\fBbool\fP DirManager::CopyToNewProjectDirectory (\fBBlockFile\fP * f)"

.PP
Definition at line 1160 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::Deref ()"

.PP
Definition at line 1353 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::Deref (\fBBlockFile\fP * f)"

.PP
Definition at line 1178 of file DirManager\&.cpp\&.
.SS "\fBbool\fP DirManager::EnsureSafeFilename (wxFileName fName)"

.PP
Definition at line 1197 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::FillBlockfilesCache ()"

.PP
Definition at line 1830 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::FindMissingAliasedFiles (BlockHash & missingAliasedFileAUFHash, BlockHash & missingAliasedFilePathHash)"

.PP
Definition at line 1684 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::FindMissingAUFs (BlockHash & missingAUFHash)"

.PP
Definition at line 1720 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::FindMissingAUs (BlockHash & missingAUHash)"

.PP
Definition at line 1746 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::FindOrphanBlockFiles (\fBconst\fP wxArrayString & filePathArray, wxArrayString & orphanFilePathArray)"

.PP
Definition at line 1771 of file DirManager\&.cpp\&.
.SS "wxString DirManager::GetDataFilesDir () const"

.PP
Definition at line 553 of file DirManager\&.cpp\&.
.SS "wxLongLong DirManager::GetFreeDiskSpace ()"

.PP
Definition at line 532 of file DirManager\&.cpp\&.
.SS "wxString DirManager::GetProjectDataDir ()"

.PP
Definition at line 522 of file DirManager\&.cpp\&.
.SS "wxString DirManager::GetProjectName ()"

.PP
Definition at line 527 of file DirManager\&.cpp\&.
.SS "\fBint\fP DirManager::GetRefCount (\fBBlockFile\fP * f)"

.PP
Definition at line 1173 of file DirManager\&.cpp\&.
.SS "\fBXMLTagHandler\fP* DirManager::HandleXMLChild (\fBconst\fP wxChar * WXUNUSEDtag)\fC [inline]\fP"

.PP
Definition at line 117 of file DirManager\&.h\&.
.SS "\fBbool\fP DirManager::HandleXMLTag (\fBconst\fP wxChar * tag, \fBconst\fP wxChar ** attrs)\fC [virtual]\fP"

.PP
Implements \fBXMLTagHandler\fP\&.
.PP
Definition at line 1001 of file DirManager\&.cpp\&.
.SS "\fBBlockFile\fP* DirManager::LoadBlockFile (\fBconst\fP wxChar ** attrs, \fBsampleFormat\fP format)"

.SS "\fBbool\fP DirManager::MoveToNewProjectDirectory (\fBBlockFile\fP * f)"

.PP
Definition at line 1155 of file DirManager\&.cpp\&.
.SS "\fBBlockFile\fP * DirManager::NewAliasBlockFile (\fBconst\fP wxString & aliasedFile, \fBsampleCount\fP aliasStart, \fBsampleCount\fP aliasLen, \fBint\fP aliasChannel)"

.PP
Definition at line 885 of file DirManager\&.cpp\&.
.SS "\fBBlockFile\fP * DirManager::NewODAliasBlockFile (\fBconst\fP wxString & aliasedFile, \fBsampleCount\fP aliasStart, \fBsampleCount\fP aliasLen, \fBint\fP aliasChannel)"

.PP
Definition at line 901 of file DirManager\&.cpp\&.
.SS "\fBBlockFile\fP * DirManager::NewODDecodeBlockFile (\fBconst\fP wxString & aliasedFile, \fBsampleCount\fP aliasStart, \fBsampleCount\fP aliasLen, \fBint\fP aliasChannel, \fBint\fP decodeType)"

.PP
Definition at line 917 of file DirManager\&.cpp\&.
.SS "\fBBlockFile\fP * DirManager::NewSimpleBlockFile (\fBsamplePtr\fP sampleData, \fBsampleCount\fP sampleLen, \fBsampleFormat\fP format, \fBbool\fP allowDeferredWrite = \fC\fBfalse\fP\fP)"

.PP
Definition at line 869 of file DirManager\&.cpp\&.
.SS "\fBint\fP DirManager::ProjectFSCK (\fBconst\fP \fBbool\fP bForceError, \fBconst\fP \fBbool\fP bAutoRecoverMode)"

.PP
Definition at line 1371 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::Ref ()"

.PP
Definition at line 1347 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::Ref (\fBBlockFile\fP * f)"

.PP
Definition at line 1165 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::RemoveOrphanBlockfiles ()"

.PP
Definition at line 1808 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::SaveBlockFile (\fBBlockFile\fP * f, \fBint\fP depth, FILE * fp)"

.SS "static \fBvoid\fP DirManager::SetDontDeleteTempFiles ()\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 161 of file DirManager\&.h\&.
.SS "\fBvoid\fP DirManager::SetLoadingBlockLength (\fBsampleCount\fP len)\fC [inline]\fP"

.PP
Definition at line 111 of file DirManager\&.h\&.
.SS "\fBvoid\fP DirManager::SetLoadingFormat (\fBsampleFormat\fP format)\fC [inline]\fP"

.PP
Definition at line 110 of file DirManager\&.h\&.
.SS "\fBvoid\fP DirManager::SetLoadingMaxSamples (\fBsampleCount\fP max)\fC [inline]\fP"

.PP
Definition at line 114 of file DirManager\&.h\&.
.SS "\fBvoid\fP DirManager::SetLoadingTarget (\fBBlockArray\fP * pArray, unsigned idx)\fC [inline]\fP"

.PP
Definition at line 105 of file DirManager\&.h\&.
.SS "\fBvoid\fP DirManager::SetLocalTempDir (\fBconst\fP wxString & path)"

.PP
Definition at line 558 of file DirManager\&.cpp\&.
.SS "\fBbool\fP DirManager::SetProject (wxString & newProjPath, wxString & newProjName, \fBconst\fP \fBbool\fP bCreate)"

.PP
Definition at line 396 of file DirManager\&.cpp\&.
.SS "static \fBvoid\fP DirManager::SetTempDir (\fBconst\fP wxString & _temp)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 46 of file DirManager\&.h\&.
.SS "\fBvoid\fP DirManager::WriteCacheToDisk ()"

.PP
Definition at line 1881 of file DirManager\&.cpp\&.
.SS "\fBvoid\fP DirManager::WriteXML (\fBXMLWriter\fP & WXUNUSEDxmlFile)\fC [inline]\fP"

.PP
Definition at line 118 of file DirManager\&.h\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBSequenceTest\fP\fC [friend]\fP"

.PP
Definition at line 209 of file DirManager\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
