.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/qa/loopback/src/qa_tools.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/qa/loopback/src/qa_tools.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBQA_ASSERT_TRUE\fP(message,  flag)"
.br
.ti -1c
.RI "#define \fBQA_ASSERT_EQUALS\fP(message,  expected,  actual)"
.br
.ti -1c
.RI "#define \fBQA_ASSERT_CLOSE\fP(message,  expected,  actual,  tolerance)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBint\fP \fBg_testsPassed\fP"
.br
.ti -1c
.RI "\fBint\fP \fBg_testsFailed\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define QA_ASSERT_CLOSE(message, expected, actual, tolerance)"
\fBValue:\fP
.PP
.nf
if (fabs((expected)-(actual))>(tolerance)) \
    { \\
		printf( "%s:%d - ERROR - %s, expected %f, got %f, tol=%f\n", __FILE__, __LINE__, message, ((double)(expected)), ((double)(actual)), ((double)(tolerance)) ); \\
		g_testsFailed++; \
        goto error; \
    } \
    else g_testsPassed++;
.fi
.PP
Definition at line 64 of file qa_tools\&.h\&.
.SS "#define QA_ASSERT_EQUALS(message, expected, actual)"
\fBValue:\fP
.PP
.nf
if( ((expected) != (actual)) ) \
    { \\
		printf( "%s:%d - ERROR - %s, expected %d, got %d\n", __FILE__, __LINE__, message, expected, actual ); \\
		g_testsFailed++; \
        goto error; \
    } \
    else g_testsPassed++;
.fi
.PP
Definition at line 55 of file qa_tools\&.h\&.
.SS "#define QA_ASSERT_TRUE(message, flag)"
\fBValue:\fP
.PP
.nf
if( !(flag) ) \
    { \\
		printf( "%s:%d - ERROR - %s\n", __FILE__, __LINE__, message ); \\
		g_testsFailed++; \
        goto error; \
    } \
    else g_testsPassed++;
.fi
.PP
Definition at line 45 of file qa_tools\&.h\&.
.SH "Variable Documentation"
.PP 
.SS "\fBint\fP g_testsFailed"

.PP
Definition at line 55 of file paqa\&.c\&.
.SS "\fBint\fP g_testsPassed"
Accumulate counts for how many tests pass or fail\&. 
.PP
Definition at line 54 of file paqa\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
