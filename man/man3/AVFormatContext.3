.TH "AVFormatContext" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AVFormatContext \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <avformat\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBav_class\fP"
.br
.ti -1c
.RI "struct \fBAVInputFormat\fP * \fBiformat\fP"
.br
.ti -1c
.RI "struct \fBAVOutputFormat\fP * \fBoformat\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBpriv_data\fP"
.br
.ti -1c
.RI "\fBAVIOContext\fP * \fBpb\fP"
.br
.ti -1c
.RI "\fBint\fP \fBctx_flags\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBnb_streams\fP"
.br
.ti -1c
.RI "\fBAVStream\fP ** \fBstreams\fP"
.br
.ti -1c
.RI "char \fBfilename\fP [1024]"
.br
.ti -1c
.RI "\fBint64_t\fP \fBstart_time\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBduration\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbit_rate\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBpacket_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmax_delay\fP"
.br
.ti -1c
.RI "\fBint\fP \fBflags\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBprobesize\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmax_analyze_duration\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBuint8_t\fP * \fBkey\fP"
.br
.ti -1c
.RI "\fBint\fP \fBkeylen\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBnb_programs\fP"
.br
.ti -1c
.RI "\fBAVProgram\fP ** \fBprograms\fP"
.br
.ti -1c
.RI "enum \fBAVCodecID\fP \fBvideo_codec_id\fP"
.br
.ti -1c
.RI "enum \fBAVCodecID\fP \fBaudio_codec_id\fP"
.br
.ti -1c
.RI "enum \fBAVCodecID\fP \fBsubtitle_codec_id\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBmax_index_size\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBmax_picture_buffer\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBnb_chapters\fP"
.br
.ti -1c
.RI "\fBAVChapter\fP ** \fBchapters\fP"
.br
.ti -1c
.RI "\fBAVDictionary\fP * \fBmetadata\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBstart_time_realtime\fP"
.br
.ti -1c
.RI "\fBint\fP \fBfps_probe_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBerror_recognition\fP"
.br
.ti -1c
.RI "\fBAVIOInterruptCB\fP \fBinterrupt_callback\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdebug\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBmax_interleave_delta\fP"
.br
.ti -1c
.RI "\fBint\fP \fBts_id\fP"
.br
.ti -1c
.RI "\fBint\fP \fBaudio_preload\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmax_chunk_duration\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmax_chunk_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBuse_wallclock_as_timestamps\fP"
.br
.ti -1c
.RI "\fBint\fP \fBavoid_negative_ts\fP"
.br
.ti -1c
.RI "\fBint\fP \fBavio_flags\fP"
.br
.ti -1c
.RI "enum \fBAVDurationEstimationMethod\fP \fBduration_estimation_method\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBskip_initial_bytes\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBcorrect_ts_overflow\fP"
.br
.ti -1c
.RI "\fBint\fP \fBseek2any\fP"
.br
.ti -1c
.RI "\fBint\fP \fBflush_packets\fP"
.br
.ti -1c
.RI "\fBint\fP \fBprobe_score\fP"
.br
.ti -1c
.RI "struct \fBAVPacketList\fP * \fBpacket_buffer\fP"
.br
.ti -1c
.RI "struct \fBAVPacketList\fP * \fBpacket_buffer_end\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBdata_offset\fP"
.br
.ti -1c
.RI "struct \fBAVPacketList\fP * \fBraw_packet_buffer\fP"
.br
.ti -1c
.RI "struct \fBAVPacketList\fP * \fBraw_packet_buffer_end\fP"
.br
.ti -1c
.RI "struct \fBAVPacketList\fP * \fBparse_queue\fP"
.br
.ti -1c
.RI "struct \fBAVPacketList\fP * \fBparse_queue_end\fP"
.br
.ti -1c
.RI "\fBint\fP \fBraw_packet_buffer_remaining_size\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBoffset\fP"
.br
.ti -1c
.RI "\fBAVRational\fP \fBoffset_timebase\fP"
.br
.ti -1c
.RI "\fBAVFormatInternal\fP * \fBinternal\fP"
.br
.ti -1c
.RI "\fBint\fP \fBio_repositioned\fP"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBvideo_codec\fP"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBaudio_codec\fP"
.br
.ti -1c
.RI "\fBAVCodec\fP * \fBsubtitle_codec\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmetadata_header_padding\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBopaque\fP"
.br
.ti -1c
.RI "\fBav_format_control_message\fP \fBcontrol_message_cb\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBoutput_ts_offset\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBFormat\fP I/O context\&. New fields can be added to the end with minor version bumps\&. Removal, reordering and changes to existing fields require a major version bump\&. sizeof(AVFormatContext) must not be used outside libav*, use \fBavformat_alloc_context()\fP to create an \fBAVFormatContext\fP\&. 
.PP
Definition at line 1090 of file avformat\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBAVCodec\fP* AVFormatContext::audio_codec"
Forced audio codec\&. This allows forcing a specific decoder, even when there are multiple with the same codec_id\&. Demuxing: Set by user via av_format_set_audio_codec (NO direct access)\&. 
.PP
Definition at line 1525 of file avformat\&.h\&.
.SS "enum \fBAVCodecID\fP AVFormatContext::audio_codec_id"
Forced audio codec_id\&. Demuxing: Set by user\&. 
.PP
Definition at line 1239 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::audio_preload"
Audio preload in microseconds\&. Note, not all formats support this and unpredictable things may happen if it is used when not supported\&.
.IP "\(bu" 2
encoding: Set by user via AVOptions (NO direct access)
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1358 of file avformat\&.h\&.
.SS "\fBconst\fP \fBAVClass\fP* AVFormatContext::av_class"
A class for logging and \fBAVOptions\fP\&. Set by \fBavformat_alloc_context()\fP\&. Exports (de)muxer private options if they exist\&. 
.PP
Definition at line 1095 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::avio_flags"
avio flags, used to force AVIO_FLAG_DIRECT\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user via AVOptions (NO direct access) 
.PP

.PP
Definition at line 1400 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::avoid_negative_ts"
Avoid negative timestamps during muxing\&. 0 -> allow negative timestamps 1 -> avoid negative timestamps -1 -> choose automatically (default) Note, this only works when interleave_packet_per_dts is in use\&.
.IP "\(bu" 2
encoding: Set by user via AVOptions (NO direct access)
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1393 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::bit_rate"
Total stream bitrate in bit/s, 0 if not available\&. Never set it directly if the file_size and the duration are known as FFmpeg can compute it automatically\&. 
.PP
Definition at line 1188 of file avformat\&.h\&.
.SS "\fBAVChapter\fP** AVFormatContext::chapters"

.PP
Definition at line 1277 of file avformat\&.h\&.
.SS "\fBav_format_control_message\fP AVFormatContext::control_message_cb"
\fBCallback\fP used by devices to communicate with application\&. 
.PP
Definition at line 1552 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::correct_ts_overflow"
Correct single timestamp overflows
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user via AVOptions (NO direct access) 
.PP

.PP
Definition at line 1422 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::ctx_flags"
Format-specific flags, see AVFMTCTX_xx 
.PP
Definition at line 1135 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::data_offset"
offset of the first packet 
.PP
Definition at line 1464 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::debug"
Flags to enable debugging\&. 
.PP
Definition at line 1325 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::duration"
Duration of the stream, in AV_TIME_BASE fractional seconds\&. Only set this value if you know none of the individual stream durations and also do not set any of them\&. This is deduced from the \fBAVStream\fP values if not set\&.
.PP
Demuxing only, set by libavformat\&. 
.PP
Definition at line 1181 of file avformat\&.h\&.
.SS "enum \fBAVDurationEstimationMethod\fP AVFormatContext::duration_estimation_method"
The duration field can be estimated through various ways, and this field can be used to know how the duration was estimated\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Read by user via AVOptions (NO direct access) 
.PP

.PP
Definition at line 1408 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::error_recognition"
Error recognition; higher values will detect more errors but may misdetect some more or less valid parts as errors\&. Demuxing only, set by the caller before \fBavformat_open_input()\fP\&. 
.PP
Definition at line 1309 of file avformat\&.h\&.
.SS "char AVFormatContext::filename[1024]"
input or output filename
.PP
.IP "\(bu" 2
demuxing: set by \fBavformat_open_input()\fP
.IP "\(bu" 2
muxing: may be set by the caller before \fBavformat_write_header()\fP 
.PP

.PP
Definition at line 1162 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::flags"

.PP
Definition at line 1193 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::flush_packets"
Flush the I/O context after each packet\&.
.IP "\(bu" 2
encoding: Set by user via AVOptions (NO direct access)
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1436 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::fps_probe_size"
The number of frames used for determining the framerate in \fBavformat_find_stream_info()\fP\&. Demuxing only, set by the caller before \fBavformat_find_stream_info()\fP\&. 
.PP
Definition at line 1302 of file avformat\&.h\&.
.SS "struct \fBAVInputFormat\fP* AVFormatContext::iformat"
The input container format\&.
.PP
Demuxing only, set by \fBavformat_open_input()\fP\&. 
.PP
Definition at line 1102 of file avformat\&.h\&.
.SS "\fBAVFormatInternal\fP* AVFormatContext::internal"
An opaque field for libavformat internal usage\&. Must not be accessed in any way by callers\&. 
.PP
Definition at line 1501 of file avformat\&.h\&.
.SS "\fBAVIOInterruptCB\fP AVFormatContext::interrupt_callback"
Custom interrupt callbacks for the I/O layer\&.
.PP
demuxing: set by the user before \fBavformat_open_input()\fP\&. muxing: set by the user before \fBavformat_write_header()\fP (mainly useful for AVFMT_NOFILE formats)\&. The callback should also be passed to \fBavio_open2()\fP if it's used to open the file\&. 
.PP
Definition at line 1320 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::io_repositioned"
IO repositioned flag\&. This is set by avformat when the underlaying IO context read pointer is repositioned, for example when doing byte based seeking\&. Demuxers can use the flag to detect such changes\&. 
.PP
Definition at line 1509 of file avformat\&.h\&.
.SS "\fBconst\fP \fBuint8_t\fP* AVFormatContext::key"

.PP
Definition at line 1223 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::keylen"

.PP
Definition at line 1224 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::max_analyze_duration"
Maximum duration (in AV_TIME_BASE units) of the data read from input in \fBavformat_find_stream_info()\fP\&. Demuxing only, set by the caller before \fBavformat_find_stream_info()\fP\&. 
.PP
Definition at line 1221 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::max_chunk_duration"
Max chunk time in microseconds\&. Note, not all formats support this and unpredictable things may happen if it is used when not supported\&.
.IP "\(bu" 2
encoding: Set by user via AVOptions (NO direct access)
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1366 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::max_chunk_size"
Max chunk size in bytes Note, not all formats support this and unpredictable things may happen if it is used when not supported\&.
.IP "\(bu" 2
encoding: Set by user via AVOptions (NO direct access)
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1374 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::max_delay"

.PP
Definition at line 1191 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::max_index_size"
Maximum amount of memory in bytes to use for the index of each stream\&. If the index exceeds this size, entries will be discarded as needed to maintain a smaller size\&. This can lead to slower or less accurate seeking (depends on demuxer)\&. Demuxers for which a full in-memory index is mandatory will ignore this\&.
.IP "\(bu" 2
muxing: unused
.IP "\(bu" 2
demuxing: set by user 
.PP

.PP
Definition at line 1257 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::max_interleave_delta"
Maximum buffering duration for interleaving\&.
.PP
To ensure all the streams are interleaved correctly, \fBav_interleaved_write_frame()\fP will wait until it has at least one packet for each stream before actually writing any packets to the output file\&. When some streams are 'sparse' (i\&.e\&. there are large gaps between successive packets), this can result in excessive buffering\&.
.PP
This field specifies the maximum difference between the timestamps of the first and the last packet in the muxing queue, above which libavformat will output a packet regardless of whether it has queued a packet for all the streams\&.
.PP
Muxing only, set by the caller before \fBavformat_write_header()\fP\&. 
.PP
Definition at line 1344 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::max_picture_buffer"
Maximum amount of memory in bytes to use for buffering frames obtained from realtime capture devices\&. 
.PP
Definition at line 1263 of file avformat\&.h\&.
.SS "\fBAVDictionary\fP* AVFormatContext::metadata"
Metadata that applies to the whole file\&.
.PP
.IP "\(bu" 2
demuxing: set by libavformat in \fBavformat_open_input()\fP
.IP "\(bu" 2
muxing: may be set by the caller before \fBavformat_write_header()\fP
.PP
.PP
Freed by libavformat in \fBavformat_free_context()\fP\&. 
.PP
Definition at line 1287 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::metadata_header_padding"
Number of bytes to be written as padding in a metadata header\&. Demuxing: Unused\&. Muxing: Set by user via av_format_set_metadata_header_padding\&. 
.PP
Definition at line 1540 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::nb_chapters"
Number of chapters in \fBAVChapter\fP array\&. When muxing, chapters are normally written in the file header, so nb_chapters should normally be initialized before write_header is called\&. Some muxers (e\&.g\&. mov and mkv) can also write chapters in the trailer\&. To write chapters in the trailer, nb_chapters must be zero when write_header is called and non-zero when write_trailer is called\&.
.IP "\(bu" 2
muxing: set by user
.IP "\(bu" 2
demuxing: set by libavformat 
.PP

.PP
Definition at line 1276 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::nb_programs"

.PP
Definition at line 1226 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::nb_streams"
Number of elements in \fBAVFormatContext\&.streams\fP\&.
.PP
Set by \fBavformat_new_stream()\fP, must not be modified by any other code\&. 
.PP
Definition at line 1142 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::offset"
Offset to remap timestamps to be non-negative\&. Expressed in timebase units\&. 
.PP
\fBSee also:\fP
.RS 4
\fBAVStream\&.mux_ts_offset\fP 
.RE
.PP

.PP
Definition at line 1490 of file avformat\&.h\&.
.SS "\fBAVRational\fP AVFormatContext::offset_timebase"
Timebase for the timestamp offset\&. 
.PP
Definition at line 1495 of file avformat\&.h\&.
.SS "struct \fBAVOutputFormat\fP* AVFormatContext::oformat"
The output container format\&.
.PP
Muxing only, must be set by the caller before \fBavformat_write_header()\fP\&. 
.PP
Definition at line 1109 of file avformat\&.h\&.
.SS "\fBvoid\fP* AVFormatContext::opaque"
User data\&. This is a place for some private data of the user\&. Mostly usable with control_message_cb or any future callbacks in device's context\&. 
.PP
Definition at line 1547 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::output_ts_offset"
Output timestamp offset, in microseconds\&. Muxing: set by user via AVOptions (NO direct access) 
.PP
Definition at line 1558 of file avformat\&.h\&.
.SS "struct \fBAVPacketList\fP* AVFormatContext::packet_buffer"
This buffer is only needed when packets were already buffered but not decoded, for example to get the codec parameters in MPEG streams\&. 
.PP
Definition at line 1460 of file avformat\&.h\&.
.SS "struct \fBAVPacketList\fP* AVFormatContext::packet_buffer_end"

.PP
Definition at line 1461 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::packet_size"

.PP
Definition at line 1190 of file avformat\&.h\&.
.SS "struct \fBAVPacketList\fP* AVFormatContext::parse_queue"
Packets split by the parser get queued here\&. 
.PP
Definition at line 1477 of file avformat\&.h\&.
.SS "struct \fBAVPacketList\fP* AVFormatContext::parse_queue_end"

.PP
Definition at line 1478 of file avformat\&.h\&.
.SS "\fBAVIOContext\fP* AVFormatContext::pb"
I/O context\&.
.PP
.IP "\(bu" 2
demuxing: either set by the user before \fBavformat_open_input()\fP (then the user must close it manually) or set by \fBavformat_open_input()\fP\&.
.IP "\(bu" 2
muxing: set by the user before \fBavformat_write_header()\fP\&. The caller must take care of closing / freeing the IO context\&.
.PP
.PP
Do NOT set this field if AVFMT_NOFILE flag is set in iformat/oformat\&.flags\&. In such a case, the (de)muxer will handle I/O in some other way and this field will be NULL\&. 
.PP
Definition at line 1132 of file avformat\&.h\&.
.SS "\fBvoid\fP* AVFormatContext::priv_data"
\fBFormat\fP private data\&. This is an AVOptions-enabled struct if and only if iformat/oformat\&.priv_class is not NULL\&.
.PP
.IP "\(bu" 2
muxing: set by \fBavformat_write_header()\fP
.IP "\(bu" 2
demuxing: set by \fBavformat_open_input()\fP 
.PP

.PP
Definition at line 1118 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::probe_score"
format probing score\&. The maximal score is AVPROBE_SCORE_MAX, its set when the demuxer probes the format\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: set by avformat, read by user via \fBav_format_get_probe_score()\fP (NO direct access) 
.PP

.PP
Definition at line 1445 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::probesize"
Maximum size of the data read from input for determining the input container format\&. Demuxing only, set by the caller before \fBavformat_open_input()\fP\&. 
.PP
Definition at line 1214 of file avformat\&.h\&.
.SS "\fBAVProgram\fP** AVFormatContext::programs"

.PP
Definition at line 1227 of file avformat\&.h\&.
.SS "struct \fBAVPacketList\fP* AVFormatContext::raw_packet_buffer"
Raw packets from the demuxer, prior to parsing and decoding\&. This buffer is used for buffering packets until the codec can be identified, as parsing cannot be done without knowing the codec\&. 
.PP
Definition at line 1472 of file avformat\&.h\&.
.SS "struct \fBAVPacketList\fP* AVFormatContext::raw_packet_buffer_end"

.PP
Definition at line 1473 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::raw_packet_buffer_remaining_size"

.PP
Definition at line 1483 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::seek2any"
Force seeking to any (also non key) frames\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user via AVOptions (NO direct access) 
.PP

.PP
Definition at line 1429 of file avformat\&.h\&.
.SS "unsigned \fBint\fP AVFormatContext::skip_initial_bytes"
Skip initial bytes when opening stream
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user via AVOptions (NO direct access) 
.PP

.PP
Definition at line 1415 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::start_time"
Position of the first frame of the component, in AV_TIME_BASE fractional seconds\&. NEVER set this value directly: It is deduced from the \fBAVStream\fP values\&.
.PP
Demuxing only, set by libavformat\&. 
.PP
Definition at line 1171 of file avformat\&.h\&.
.SS "\fBint64_t\fP AVFormatContext::start_time_realtime"
Start time of the stream in real world time, in microseconds since the Unix epoch (00:00 1st January 1970)\&. That is, pts=0 in the stream was captured at this real world time\&. Muxing only, set by the caller before \fBavformat_write_header()\fP\&. 
.PP
Definition at line 1295 of file avformat\&.h\&.
.SS "\fBAVStream\fP** AVFormatContext::streams"
A list of all streams in the file\&. New streams are created with \fBavformat_new_stream()\fP\&.
.PP
.IP "\(bu" 2
demuxing: streams are created by libavformat in \fBavformat_open_input()\fP\&. If AVFMTCTX_NOHEADER is set in ctx_flags, then new streams may also appear in \fBav_read_frame()\fP\&.
.IP "\(bu" 2
muxing: streams are created by the user before \fBavformat_write_header()\fP\&.
.PP
.PP
Freed by libavformat in \fBavformat_free_context()\fP\&. 
.PP
Definition at line 1154 of file avformat\&.h\&.
.SS "\fBAVCodec\fP* AVFormatContext::subtitle_codec"
Forced subtitle codec\&. This allows forcing a specific decoder, even when there are multiple with the same codec_id\&. Demuxing: Set by user via av_format_set_subtitle_codec (NO direct access)\&. 
.PP
Definition at line 1533 of file avformat\&.h\&.
.SS "enum \fBAVCodecID\fP AVFormatContext::subtitle_codec_id"
Forced subtitle codec_id\&. Demuxing: Set by user\&. 
.PP
Definition at line 1245 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::ts_id"
Transport stream id\&. This will be moved into demuxer private options\&. Thus no API/ABI compatibility 
.PP
Definition at line 1350 of file avformat\&.h\&.
.SS "\fBint\fP AVFormatContext::use_wallclock_as_timestamps"
forces the use of wallclock timestamps as pts/dts of packets This has undefined results in the presence of B frames\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user via AVOptions (NO direct access) 
.PP

.PP
Definition at line 1382 of file avformat\&.h\&.
.SS "\fBAVCodec\fP* AVFormatContext::video_codec"
Forced video codec\&. This allows forcing a specific decoder, even when there are multiple with the same codec_id\&. Demuxing: Set by user via av_format_set_video_codec (NO direct access)\&. 
.PP
Definition at line 1517 of file avformat\&.h\&.
.SS "enum \fBAVCodecID\fP AVFormatContext::video_codec_id"
Forced video codec_id\&. Demuxing: Set by user\&. 
.PP
Definition at line 1233 of file avformat\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
