.TH "NumericConverter" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NumericConverter \- \fBNumericConverter\fP provides the advanced formatting control used in the selection bar of Audacity\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <NumericTextCtrl\&.h>\fP
.PP
Inherited by \fBNumericTextCtrl\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBTIME\fP, \fBFREQUENCY\fP, \fBBANDWIDTH\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNumericConverter\fP (\fBType\fP type, \fBconst\fP wxString &formatName=wxEmptyString, double \fBvalue\fP=0\&.0f, double sampleRate=1\&.0f)"
.br
.ti -1c
.RI "virtual \fB~NumericConverter\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBValueToControls\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBValueToControls\fP (double rawValue, \fBbool\fP nearest=\fBtrue\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBControlsToValue\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBParseFormatString\fP (\fBconst\fP wxString &\fBformat\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPrintDebugInfo\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetFormatName\fP (\fBconst\fP wxString &formatName)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetFormatString\fP (\fBconst\fP wxString &formatString)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetSampleRate\fP (double sampleRate)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetValue\fP (double newValue)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetMinValue\fP (double minValue)"
.br
.ti -1c
.RI "\fBvoid\fP \fBResetMinValue\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetMaxValue\fP (double maxValue)"
.br
.ti -1c
.RI "\fBvoid\fP \fBResetMaxValue\fP ()"
.br
.ti -1c
.RI "double \fBGetValue\fP ()"
.br
.ti -1c
.RI "wxString \fBGetString\fP ()"
.br
.ti -1c
.RI "wxString \fBGetFormatString\fP ()"
.br
.ti -1c
.RI "\fBint\fP \fBGetFormatIndex\fP ()"
.br
.ti -1c
.RI "\fBint\fP \fBGetNumBuiltins\fP ()"
.br
.ti -1c
.RI "wxString \fBGetBuiltinName\fP (\fBconst\fP \fBint\fP index)"
.br
.ti -1c
.RI "wxString \fBGetBuiltinFormat\fP (\fBconst\fP \fBint\fP index)"
.br
.ti -1c
.RI "wxString \fBGetBuiltinFormat\fP (\fBconst\fP wxString &\fBname\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBAdjust\fP (\fBint\fP steps, \fBint\fP dir)"
.br
.ti -1c
.RI "\fBvoid\fP \fBIncrement\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBDecrement\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBType\fP \fBmType\fP"
.br
.ti -1c
.RI "double \fBmValue\fP"
.br
.ti -1c
.RI "double \fBmMinValue\fP"
.br
.ti -1c
.RI "double \fBmMaxValue\fP"
.br
.ti -1c
.RI "double \fBmInvalidValue\fP"
.br
.ti -1c
.RI "wxString \fBmFormatString\fP"
.br
.ti -1c
.RI "NumericFieldArray \fBmFields\fP"
.br
.ti -1c
.RI "wxString \fBmPrefix\fP"
.br
.ti -1c
.RI "wxString \fBmValueTemplate\fP"
.br
.ti -1c
.RI "wxString \fBmValueMask\fP"
.br
.ti -1c
.RI "wxString \fBmValueString\fP"
.br
.ti -1c
.RI "double \fBmScalingFactor\fP"
.br
.ti -1c
.RI "double \fBmSampleRate\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmNtscDrop\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmFocusedDigit\fP"
.br
.ti -1c
.RI "DigitInfoArray \fBmDigits\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBBuiltinFormatString\fP * \fBmBuiltinFormatStrings\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmNBuiltins\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmDefaultNdx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBNumericConverter\fP provides the advanced formatting control used in the selection bar of Audacity\&. 

\fBNumericConverter\fP has all the time conversion and snapping functionality that used to live in \fBNumericTextCtrl\fP\&. The idea is to have a GUI-less class which can do the conversions, so that we can use it in sanpping without having a window created each time\&.
.PP
\fBNumericConverter\fP
.PP
Any negative value given to the converter is considered invalid and all digit positions of the resulting string will be filled with hyphens\&. Otherwise:
.PP
The \fBNumericConverter\fP makes use of a format string to specify the exact way that a single value is split into several fields, such as the hh:mm:ss format\&. The advantage of this format string is that it is very small and compact, but human-readable and somewhat intuitive, so that it's easy to add NEW layouts in the future\&. It's also designed to make it easier to add i18n support, since the way that numbers are displayed in different languages could conceivably vary a lot\&.
.PP
The number to be formatted may be expressed in seconds, so the format string can specify the relationship of each field to the number of seconds\&.
.PP
The class is also reused to format some non-time values such as frequency and log of frequency\&.
.PP
Let's start by considering an example: here's the format string that prints an integer number of seconds in the hour minute second h:m:s format:
.PP
:60:60
.PP
The '*' is a wildcard, saying that the leftmost field can contain numbers of arbitrary magnitude\&. The next character, ':', since it is not a digit or a wildcard, is interpreted as a delimiter, and will be displayed between those fields\&. The next number, 60, indicates that the range of the next field (minutes) is 60\&. Then there's another ':' delimiter, and finally the last field (seconds) is 60\&. So, if you give it a number like 3758 it is formatted as:
.PP
3758 seconds, '*:60:60' -> '1:2:38'
.PP
Note that 3758 = 1*60*60 + 2*60 + 38\&.
.PP
When \fBNumericConverter\fP formats an integer, you can think of its process as working from right to left\&. Given the value '3758', it fills in the seconds by dividing by 60, sticking the remainder in the seconds field and then passing the quotient to the next field to the left\&.
.PP
In order to format a field with leading zeros, simply add a leading zero to that field, like this:
.PP
3758 seconds, '*:060:060' -> '1:02:38'
.PP
In order to format fractions, simply include a field delimiter ending with a decimal point\&. If the delimiter is simply '\&.' with nothing else, then the '\&.' is actually displayed\&. Otherwise the '\&.' is dropped, and the other characters in the delimiter are displayed instead\&.
.PP
Here's how we'd display hours, minutes, and seconds with three decimal places after the seconds:
.PP
3758\&.5 seconds, '*:060:060\&.01000' -> '1:02:38\&.500'
.PP
Similarly, here's how we'd display the fractional part of seconds as film frames (24 per second) instead of milliseconds:
.PP
3758\&.5 seconds, '*:060:060 and \&.24 frames' -> '1:02:38 and 12 frames'
.PP
Note that the decimal '\&.' is associated with the delimeter, not with the 24\&.
.PP
Additionally, the special character '#' can be used in place of a number to represent the current sample rate\&. Use '0#' to add leading zeros to that field\&. For example:
.PP
3758\&.5 seconds, '*:060:060+\&.#samples' -> '1:02:38+22050samples'
.PP
(Almost) Finally, there is a rule that allows you to change the units into something other than seconds\&. To do this, put a '|' character on the far right, followed by a number specifying the scaling factor\&. As an exception to previous rules, decimal points are allowed in the final scaling factor - the period is not interpreted as it would be before the '|' character\&. (This is fine, because all previous fields must be integers to make sense\&.) Anyway, if you include a scaling factor after a '|', the number will be multiplied by this factor before it is formatted\&. For example, to express the current time in NTSC frames (~29\&.97 fps), you could use the following formatting:
.PP
3758\&.5 seconds, '*\&.01000 frames|29\&.97002997' -> '112642\&.358 frames'
.PP
Finally there is a further special character that can be used after a '|' and that is 'N'\&. This applies special rule for NTSC drop-frame timecode\&.
.PP
Summary of format string rules:
.PP
.IP "\(bu" 2
The characters '0-9', '*', and '#' are numeric\&. Any sequence of these characters is treated as defining a NEW field by specifying its range\&. All other characters become delimiters between fields\&. (The one exception is that '\&.' is treated as numeric after the optional '|'\&.)
.IP "\(bu" 2
A field with a range of '*', which only makes sense as the leftmost field, means the field should display as large a number as necessary\&. (Note: this no longer makes sense here and applies to a previous version)\&.
.IP "\(bu" 2
The character '#' represents the current sample rate\&.
.IP "\(bu" 2
If a field specifier beings with a leading zero, it will be formatted with leading zeros, too - enough to display the maximum value that field can display\&. So the number 7 in a field specified as '01000' would be formatted as '007'\&. Bond\&. James Bond\&.
.IP "\(bu" 2
Any non-numeric characters before the first field are treated as a prefix, and will be displayed to the left of the first field\&.
.IP "\(bu" 2
A delimiter ending in '\&.' is treated specially\&. All fields after this delimeter are fractional fields, after the decimal point\&.
.IP "\(bu" 2
The '|' character is treated as a special delimiter\&. The number to the right of this character (which is allowed to contain a decimal point) is treated as a scaling factor\&. The number is multiplied by this factor before converting\&.
.IP "\(bu" 2
The special character 'N' after '|' is only used for NTSC drop-frame\&. 
.PP

.PP
Definition at line 51 of file NumericTextCtrl\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBNumericConverter::Type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITIME \fP\fP
.TP
\fB\fIFREQUENCY \fP\fP
.TP
\fB\fIBANDWIDTH \fP\fP
.PP
Definition at line 55 of file NumericTextCtrl\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "NumericConverter::NumericConverter (\fBType\fP type, \fBconst\fP wxString & formatName = \fCwxEmptyString\fP, double value = \fC0\&.0f\fP, double sampleRate = \fC1\&.0f\fP)"

.PP
Definition at line 531 of file NumericTextCtrl\&.cpp\&.
.SS "NumericConverter::~NumericConverter ()\fC [virtual]\fP"

.PP
Definition at line 756 of file NumericTextCtrl\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP NumericConverter::Adjust (\fBint\fP steps, \fBint\fP dir)"

.PP
Definition at line 1059 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::ControlsToValue ()\fC [virtual]\fP"

.PP
Definition at line 869 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::Decrement ()"

.PP
Definition at line 1053 of file NumericTextCtrl\&.cpp\&.
.SS "wxString NumericConverter::GetBuiltinFormat (\fBconst\fP \fBint\fP index)"

.PP
Definition at line 1017 of file NumericTextCtrl\&.cpp\&.
.SS "wxString NumericConverter::GetBuiltinFormat (\fBconst\fP wxString & name)"

.PP
Definition at line 1025 of file NumericTextCtrl\&.cpp\&.
.SS "wxString NumericConverter::GetBuiltinName (\fBconst\fP \fBint\fP index)"

.PP
Definition at line 1009 of file NumericTextCtrl\&.cpp\&.
.SS "\fBint\fP NumericConverter::GetFormatIndex ()"

.PP
Definition at line 988 of file NumericTextCtrl\&.cpp\&.
.SS "wxString NumericConverter::GetFormatString ()"

.PP
Definition at line 983 of file NumericTextCtrl\&.cpp\&.
.SS "\fBint\fP NumericConverter::GetNumBuiltins ()"

.PP
Definition at line 1004 of file NumericTextCtrl\&.cpp\&.
.SS "wxString NumericConverter::GetString ()"

.PP
Definition at line 1040 of file NumericTextCtrl\&.cpp\&.
.SS "double NumericConverter::GetValue ()"

.PP
Definition at line 977 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::Increment ()"

.PP
Definition at line 1047 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::ParseFormatString (\fBconst\fP wxString & format)\fC [virtual]\fP"

.PP
Definition at line 581 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::PrintDebugInfo ()"

.PP
Definition at line 731 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::ResetMaxValue ()"

.PP
Definition at line 972 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::ResetMinValue ()"

.PP
Definition at line 957 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::SetFormatName (\fBconst\fP wxString & formatName)"

.PP
Definition at line 920 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::SetFormatString (\fBconst\fP wxString & formatString)"

.PP
Definition at line 925 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::SetMaxValue (double maxValue)"

.PP
Definition at line 962 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::SetMinValue (double minValue)"

.PP
Definition at line 948 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::SetSampleRate (double sampleRate)"

.PP
Definition at line 933 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::SetValue (double newValue)"

.PP
Definition at line 941 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::ValueToControls ()\fC [virtual]\fP"

.PP
Definition at line 760 of file NumericTextCtrl\&.cpp\&.
.SS "\fBvoid\fP NumericConverter::ValueToControls (double rawValue, \fBbool\fP nearest = \fC\fBtrue\fP\fP)\fC [virtual]\fP"

.PP
Definition at line 765 of file NumericTextCtrl\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBconst\fP \fBBuiltinFormatString\fP* NumericConverter::mBuiltinFormatStrings\fC [protected]\fP"

.PP
Definition at line 126 of file NumericTextCtrl\&.h\&.
.SS "\fBint\fP NumericConverter::mDefaultNdx\fC [protected]\fP"

.PP
Definition at line 128 of file NumericTextCtrl\&.h\&.
.SS "DigitInfoArray NumericConverter::mDigits\fC [protected]\fP"

.PP
Definition at line 124 of file NumericTextCtrl\&.h\&.
.SS "NumericFieldArray NumericConverter::mFields\fC [protected]\fP"

.PP
Definition at line 113 of file NumericTextCtrl\&.h\&.
.SS "\fBint\fP NumericConverter::mFocusedDigit\fC [protected]\fP"

.PP
Definition at line 123 of file NumericTextCtrl\&.h\&.
.SS "wxString NumericConverter::mFormatString\fC [protected]\fP"

.PP
Definition at line 111 of file NumericTextCtrl\&.h\&.
.SS "double NumericConverter::mInvalidValue\fC [protected]\fP"

.PP
Definition at line 109 of file NumericTextCtrl\&.h\&.
.SS "double NumericConverter::mMaxValue\fC [protected]\fP"

.PP
Definition at line 108 of file NumericTextCtrl\&.h\&.
.SS "double NumericConverter::mMinValue\fC [protected]\fP"

.PP
Definition at line 107 of file NumericTextCtrl\&.h\&.
.SS "\fBint\fP NumericConverter::mNBuiltins\fC [protected]\fP"

.PP
Definition at line 127 of file NumericTextCtrl\&.h\&.
.SS "\fBbool\fP NumericConverter::mNtscDrop\fC [protected]\fP"

.PP
Definition at line 121 of file NumericTextCtrl\&.h\&.
.SS "wxString NumericConverter::mPrefix\fC [protected]\fP"

.PP
Definition at line 114 of file NumericTextCtrl\&.h\&.
.SS "double NumericConverter::mSampleRate\fC [protected]\fP"

.PP
Definition at line 120 of file NumericTextCtrl\&.h\&.
.SS "double NumericConverter::mScalingFactor\fC [protected]\fP"

.PP
Definition at line 119 of file NumericTextCtrl\&.h\&.
.SS "\fBType\fP NumericConverter::mType\fC [protected]\fP"

.PP
Definition at line 103 of file NumericTextCtrl\&.h\&.
.SS "double NumericConverter::mValue\fC [protected]\fP"

.PP
Definition at line 105 of file NumericTextCtrl\&.h\&.
.SS "wxString NumericConverter::mValueMask\fC [protected]\fP"

.PP
Definition at line 116 of file NumericTextCtrl\&.h\&.
.SS "wxString NumericConverter::mValueString\fC [protected]\fP"

.PP
Definition at line 117 of file NumericTextCtrl\&.h\&.
.SS "wxString NumericConverter::mValueTemplate\fC [protected]\fP"

.PP
Definition at line 115 of file NumericTextCtrl\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
