.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avassert.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avassert.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include 'avutil\&.h'\fP
.br
\fC#include 'log\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBav_assert0\fP(cond)"
.br
.ti -1c
.RI "#define \fBav_assert1\fP(cond)   ((\fBvoid\fP)0)"
.br
.ti -1c
.RI "#define \fBav_assert2\fP(cond)   ((\fBvoid\fP)0)"
.br
.in -1c
.SH "Detailed Description"
.PP 
simple \fBassert()\fP macros that are a bit more flexible than ISO C \fBassert()\fP\&. 
.PP
\fBAuthor:\fP
.RS 4
Michael Niedermayer michaelni@gmx.at 
.RE
.PP

.PP
Definition in file \fBavassert\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define av_assert0(cond)"
\fBValue:\fP
.PP
.nf
do {                                           \
    if (!(cond)) {                                                      \
        av_log(NULL, AV_LOG_PANIC, "Assertion %s failed at %s:%d\n",    \
               AV_STRINGIFY(cond), __FILE__, __LINE__);                 \
        abort();                                                        \
    }                                                                   \
} while (0)
.fi
\fBassert()\fP equivalent, that is always enabled\&. 
.PP
Definition at line 37 of file avassert\&.h\&.
.SS "#define av_assert1(cond)   ((\fBvoid\fP)0)"
\fBassert()\fP equivalent, that does not lie in speed critical code\&. These asserts() thus can be enabled without fearing speedloss\&. 
.PP
Definition at line 53 of file avassert\&.h\&.
.SS "#define av_assert2(cond)   ((\fBvoid\fP)0)"
\fBassert()\fP equivalent, that does lie in speed critical code\&. 
.PP
Definition at line 63 of file avassert\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
