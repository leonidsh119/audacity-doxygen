.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/state/state.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/state/state.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/lv2core/lv2\&.h'\fP
.br
\fC#include <stdbool\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fB_LV2_State_Interface\fP"
.br
.ti -1c
.RI "struct \fBLV2_State_Map_Path\fP"
.br
.ti -1c
.RI "struct \fBLV2_State_Make_Path\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLV2_STATE_URI\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/state'"
.br
.ti -1c
.RI "#define \fBLV2_STATE_PREFIX\fP   \fBLV2_STATE_URI\fP '#'"
.br
.ti -1c
.RI "#define \fBLV2_STATE__State\fP   \fBLV2_STATE_PREFIX\fP 'State'"
.br
.ti -1c
.RI "#define \fBLV2_STATE__interface\fP   \fBLV2_STATE_PREFIX\fP 'interface'"
.br
.ti -1c
.RI "#define \fBLV2_STATE__loadDefaultState\fP   \fBLV2_STATE_PREFIX\fP 'loadDefaultState'"
.br
.ti -1c
.RI "#define \fBLV2_STATE__makePath\fP   \fBLV2_STATE_PREFIX\fP 'makePath'"
.br
.ti -1c
.RI "#define \fBLV2_STATE__mapPath\fP   \fBLV2_STATE_PREFIX\fP 'mapPath'"
.br
.ti -1c
.RI "#define \fBLV2_STATE__state\fP   \fBLV2_STATE_PREFIX\fP 'state'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBvoid\fP * \fBLV2_State_Handle\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP * \fBLV2_State_Map_Path_Handle\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP * \fBLV2_State_Make_Path_Handle\fP"
.br
.ti -1c
.RI "typedef \fBLV2_State_Status\fP(* \fBLV2_State_Store_Function\fP) (\fBLV2_State_Handle\fP handle, \fBuint32_t\fP key, \fBconst\fP \fBvoid\fP *\fBvalue\fP, size_t \fBsize\fP, \fBuint32_t\fP type, \fBuint32_t\fP flags)"
.br
.ti -1c
.RI "typedef \fBconst\fP \fBvoid\fP *(* \fBLV2_State_Retrieve_Function\fP) (\fBLV2_State_Handle\fP handle, \fBuint32_t\fP key, size_t *\fBsize\fP, \fBuint32_t\fP *type, \fBuint32_t\fP *flags)"
.br
.ti -1c
.RI "typedef struct \fB_LV2_State_Interface\fP \fBLV2_State_Interface\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLV2_State_Flags\fP { \fBLV2_STATE_IS_POD\fP = 1, \fBLV2_STATE_IS_PORTABLE\fP = 1 << 1, \fBLV2_STATE_IS_NATIVE\fP = 1 << 2 }"
.br
.ti -1c
.RI "enum \fBLV2_State_Status\fP { \fBLV2_STATE_SUCCESS\fP = 0, \fBLV2_STATE_ERR_UNKNOWN\fP = 1, \fBLV2_STATE_ERR_BAD_TYPE\fP = 2, \fBLV2_STATE_ERR_BAD_FLAGS\fP = 3, \fBLV2_STATE_ERR_NO_FEATURE\fP = 4, \fBLV2_STATE_ERR_NO_PROPERTY\fP = 5 }"
.br
.in -1c
.SH "Detailed Description"
.PP 
C API for the LV2 \fBState\fP extension http://lv2plug.in/ns/ext/state\&. 
.PP
Definition in file \fBstate\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define LV2_STATE__interface   \fBLV2_STATE_PREFIX\fP 'interface'"

.PP
Definition at line 35 of file state\&.h\&.
.SS "#define LV2_STATE__loadDefaultState   \fBLV2_STATE_PREFIX\fP 'loadDefaultState'"

.PP
Definition at line 36 of file state\&.h\&.
.SS "#define LV2_STATE__makePath   \fBLV2_STATE_PREFIX\fP 'makePath'"

.PP
Definition at line 37 of file state\&.h\&.
.SS "#define LV2_STATE__mapPath   \fBLV2_STATE_PREFIX\fP 'mapPath'"

.PP
Definition at line 38 of file state\&.h\&.
.SS "#define LV2_STATE__State   \fBLV2_STATE_PREFIX\fP 'State'"

.PP
Definition at line 34 of file state\&.h\&.
.SS "#define LV2_STATE__state   \fBLV2_STATE_PREFIX\fP 'state'"

.PP
Definition at line 39 of file state\&.h\&.
.SS "#define LV2_STATE_PREFIX   \fBLV2_STATE_URI\fP '#'"

.PP
Definition at line 32 of file state\&.h\&.
.SS "#define LV2_STATE_URI   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/state'"

.PP
Definition at line 31 of file state\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBvoid\fP* \fBLV2_State_Handle\fP"

.PP
Definition at line 47 of file state\&.h\&.
.SS "typedef struct \fB_LV2_State_Interface\fP  \fBLV2_State_Interface\fP"
LV2 Plugin \fBState\fP Interface\&.
.PP
When the plugin's extension_data is called with argument LV2_STATE__interface, the plugin MUST return an LV2_State_Interface structure, which remains valid for the lifetime of the plugin\&.
.PP
The host can use the contained function pointers to save and restore the state of a plugin instance at any time, provided the threading restrictions of the functions are met\&.
.PP
Stored data is only guaranteed to be compatible between instances of plugins with the same URI (i\&.e\&. if a change to a plugin would cause a fatal error when restoring state saved by a previous version of that plugin, the plugin URI MUST change just as it must when ports change incompatibly)\&. Plugin authors should consider this possibility, and always store sensible data with meaningful types to avoid such problems in the future\&. 
.SS "typedef \fBvoid\fP* \fBLV2_State_Make_Path_Handle\fP"

.PP
Definition at line 49 of file state\&.h\&.
.SS "typedef \fBvoid\fP* \fBLV2_State_Map_Path_Handle\fP"

.PP
Definition at line 48 of file state\&.h\&.
.SS "typedef \fBconst\fP \fBvoid\fP*(* LV2_State_Retrieve_Function) (\fBLV2_State_Handle\fP handle, \fBuint32_t\fP key, size_t *\fBsize\fP, \fBuint32_t\fP *type, \fBuint32_t\fP *flags)"
A host-provided function to retrieve a property\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP Must be the handle passed to \fBLV2_State_Interface\&.restore()\fP\&. 
.br
\fIkey\fP The key of the property to retrieve (URID)\&. 
.br
\fIsize\fP (Output) If non-NULL, set to the size of the restored value\&. 
.br
\fItype\fP (Output) If non-NULL, set to the type of the restored value\&. 
.br
\fIflags\fP (Output) If non-NULL, set to the flags for the restored value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the restored value (object), or NULL if no value has been stored under \fCkey\fP\&.
.RE
.PP
A callback of this type is passed by the host to \fBLV2_State_Interface\&.restore()\fP\&. This callback is called repeatedly by the plugin to retrieve any properties it requires to restore its state\&.
.PP
The returned value MUST remain valid until \fBLV2_State_Interface\&.restore()\fP returns\&. The plugin MUST NOT attempt to use this function, or any value returned from it, outside of the \fBLV2_State_Interface\&.restore()\fP context\&. 
.PP
Definition at line 164 of file state\&.h\&.
.SS "typedef \fBLV2_State_Status\fP(* LV2_State_Store_Function) (\fBLV2_State_Handle\fP handle, \fBuint32_t\fP key, \fBconst\fP \fBvoid\fP *\fBvalue\fP, size_t \fBsize\fP, \fBuint32_t\fP type, \fBuint32_t\fP flags)"
A host-provided function to store a property\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP Must be the handle passed to \fBLV2_State_Interface\&.save()\fP\&. 
.br
\fIkey\fP The key to store \fCvalue\fP under (URID)\&. 
.br
\fIvalue\fP Pointer to the value to be stored\&. 
.br
\fIsize\fP The size of \fCvalue\fP in bytes\&. 
.br
\fItype\fP The type of \fCvalue\fP (URID)\&. 
.br
\fIflags\fP LV2_State_Flags for \fCvalue\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, otherwise a non-zero error code\&.
.RE
.PP
The host passes a callback of this type to \fBLV2_State_Interface\&.save()\fP\&. This callback is called repeatedly by the plugin to store all the properties that describe its current state\&.
.PP
DO NOT INVENT NONSENSE URI SCHEMES FOR THE KEY\&. Best is to use keys from existing vocabularies\&. If nothing appropriate is available, use http \fBURIs\fP that point to somewhere you can host documents so documentation can be made resolvable (e\&.g\&. a child of the plugin or project URI)\&. If this is not possible, invent a URN scheme, e\&.g\&. urn:myproj:whatever\&. The plugin MUST NOT pass an invalid URI key\&.
.PP
The host MAY fail to store a property for whatever reason, but SHOULD store any property that is LV2_STATE_IS_POD and LV2_STATE_IS_PORTABLE\&. Implementations SHOULD use the types from the LV2 Atom extension (http://lv2plug.in/ns/ext/atom) wherever possible\&. The plugin SHOULD attempt to fall-back and avoid the error if possible\&.
.PP
Note that \fCsize\fP MUST be > 0, and \fCvalue\fP MUST point to a valid region of memory \fCsize\fP bytes long (this is required to make restore unambiguous)\&.
.PP
The plugin MUST NOT attempt to use this function outside of the \fBLV2_State_Interface\&.restore()\fP context\&. 
.PP
Definition at line 138 of file state\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBLV2_State_Flags\fP"
Flags describing value characteristics\&.
.PP
These flags are used along with the value's type URI to determine how to (de-)serialise the value data, or whether it is even possible to do so\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILV2_STATE_IS_POD \fP\fP
Plain Old Data\&.
.PP
Values with this flag contain no pointers or references to other areas of memory\&. It is safe to copy POD values with a simple memcpy and store them for the duration of the process\&. A POD value is not necessarily safe to trasmit between processes or machines (e\&.g\&. filenames are POD), see LV2_STATE_IS_PORTABLE for details\&.
.PP
Implementations MUST NOT attempt to copy or serialise a non-POD value if they do not understand its type (and thus know how to correctly do so)\&. 
.TP
\fB\fILV2_STATE_IS_PORTABLE \fP\fP
Portable (architecture independent) data\&.
.PP
Values with this flag are in a format that is usable on any architecture\&. A portable value saved on one machine can be restored on another machine regardless of architecture\&. The format of portable values MUST NOT depend on architecture-specific properties like endianness or alignment\&. Portable values MUST NOT contain filenames\&. 
.TP
\fB\fILV2_STATE_IS_NATIVE \fP\fP
Native data\&.
.PP
This flag is used by the host to indicate that the saved data is only going to be used locally in the currently running process (e\&.g\&. for instance duplication or snapshots), so the plugin should use the most efficient representation possible and not worry about serialisation and portability\&. 
.PP
Definition at line 57 of file state\&.h\&.
.SS "enum \fBLV2_State_Status\fP"
A status code for state functions\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILV2_STATE_SUCCESS \fP\fP
Completed successfully\&. 
.TP
\fB\fILV2_STATE_ERR_UNKNOWN \fP\fP
Unknown error\&. 
.TP
\fB\fILV2_STATE_ERR_BAD_TYPE \fP\fP
Failed due to unsupported type\&. 
.TP
\fB\fILV2_STATE_ERR_BAD_FLAGS \fP\fP
Failed due to unsupported flags\&. 
.TP
\fB\fILV2_STATE_ERR_NO_FEATURE \fP\fP
Failed due to missing features\&. 
.TP
\fB\fILV2_STATE_ERR_NO_PROPERTY \fP\fP
Failed due to missing property\&. 
.PP
Definition at line 96 of file state\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
