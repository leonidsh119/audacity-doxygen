.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdarg\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/lv2core/lv2\&.h'\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/ext/urid/urid\&.h'\fP
.br
\fC#include <stdbool\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLILV_API\fP"
.br
.ti -1c
.RI "#define \fBLILV_NS_DOAP\fP   'http://usefulinc\&.com/\fBns\fP/doap#'"
.br
.ti -1c
.RI "#define \fBLILV_NS_FOAF\fP   'http://xmlns\&.com/foaf/0\&.1/'"
.br
.ti -1c
.RI "#define \fBLILV_NS_LILV\fP   'http://drobilla\&.net/\fBns\fP/lilv#'"
.br
.ti -1c
.RI "#define \fBLILV_NS_LV2\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#'"
.br
.ti -1c
.RI "#define \fBLILV_NS_OWL\fP   'http://www\&.w3\&.org/2002/07/owl#'"
.br
.ti -1c
.RI "#define \fBLILV_NS_RDF\fP   'http://www\&.w3\&.org/1999/02/22\-rdf\-\fBsyntax\fP\-\fBns\fP#'"
.br
.ti -1c
.RI "#define \fBLILV_NS_RDFS\fP   'http://www\&.w3\&.org/2000/01/rdf\-schema#'"
.br
.ti -1c
.RI "#define \fBLILV_NS_XSD\fP   'http://www\&.w3\&.org/2001/XMLSchema#'"
.br
.ti -1c
.RI "#define \fBLILV_URI_AUDIO_PORT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#AudioPort'"
.br
.ti -1c
.RI "#define \fBLILV_URI_CONTROL_PORT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#ControlPort'"
.br
.ti -1c
.RI "#define \fBLILV_URI_EVENT_PORT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/event#EventPort'"
.br
.ti -1c
.RI "#define \fBLILV_URI_INPUT_PORT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#InputPort'"
.br
.ti -1c
.RI "#define \fBLILV_URI_MIDI_EVENT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/\fBmidi\fP#MidiEvent'"
.br
.ti -1c
.RI "#define \fBLILV_URI_OUTPUT_PORT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#OutputPort'"
.br
.ti -1c
.RI "#define \fBLILV_URI_PORT\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#Port'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBLilvPluginImpl\fP \fBLilvPlugin\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvPluginClassImpl\fP \fBLilvPluginClass\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvPortImpl\fP \fBLilvPort\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvScalePointImpl\fP \fBLilvScalePoint\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvUIImpl\fP \fBLilvUI\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvNodeImpl\fP \fBLilvNode\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvWorldImpl\fP \fBLilvWorld\fP"
.br
.ti -1c
.RI "typedef struct LilvInstanceImpl \fBLilvInstance\fP"
.br
.ti -1c
.RI "typedef struct \fBLilvStateImpl\fP \fBLilvState\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBLilvIter\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBLilvPluginClasses\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBLilvPlugins\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBLilvScalePoints\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBLilvUIs\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBLilvNodes\fP"
.br
.in -1c
.SS "Functions"

.PP
.RI "\fBNode\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP char * \fBlilv_uri_to_path\fP (\fBconst\fP char *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_new_uri\fP (\fBLilvWorld\fP *world, \fBconst\fP char *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_new_file_uri\fP (\fBLilvWorld\fP *world, \fBconst\fP char *host, \fBconst\fP char *path)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_new_string\fP (\fBLilvWorld\fP *world, \fBconst\fP char *\fBstr\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_new_int\fP (\fBLilvWorld\fP *world, \fBint\fP val)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_new_float\fP (\fBLilvWorld\fP *world, float val)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_new_bool\fP (\fBLilvWorld\fP *world, \fBbool\fP val)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_node_free\fP (\fBLilvNode\fP *val)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_node_duplicate\fP (\fBconst\fP \fBLilvNode\fP *val)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_equals\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP, \fBconst\fP \fBLilvNode\fP *other)"
.br
.ti -1c
.RI "\fBLILV_API\fP char * \fBlilv_node_get_turtle_token\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_uri\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP char * \fBlilv_node_as_uri\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_blank\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP char * \fBlilv_node_as_blank\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_literal\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_string\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP char * \fBlilv_node_as_string\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_float\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP float \fBlilv_node_as_float\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_int\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_node_as_int\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_is_bool\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_node_as_bool\fP (\fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPlugin\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugin_verify\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_plugin_get_uri\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_plugin_get_bundle_uri\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNodes\fP * \fBlilv_plugin_get_data_uris\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_plugin_get_library_uri\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_plugin_get_name\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClass\fP * \fBlilv_plugin_get_class\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_plugin_get_value\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugin_has_feature\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvNode\fP *feature_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_plugin_get_supported_features\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_plugin_get_required_features\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_plugin_get_optional_features\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugin_has_extension_data\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_plugin_get_extension_data\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBuint32_t\fP \fBlilv_plugin_get_num_ports\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_plugin_get_port_ranges_float\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, float *min_values, float *max_values, float *def_values)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBuint32_t\fP \fBlilv_plugin_get_num_ports_of_class\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvNode\fP *class_1,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBuint32_t\fP \fBlilv_plugin_get_num_ports_of_class_va\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvNode\fP *class_1, va_list args)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugin_has_latency\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBuint32_t\fP \fBlilv_plugin_get_latency_port_index\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPort\fP * \fBlilv_plugin_get_port_by_index\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBuint32_t\fP index)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPort\fP * \fBlilv_plugin_get_port_by_symbol\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvNode\fP *symbol)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPort\fP * \fBlilv_plugin_get_port_by_designation\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvNode\fP *port_class, \fBconst\fP \fBLilvNode\fP *designation)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_plugin_get_project\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_plugin_get_author_name\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_plugin_get_author_email\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_plugin_get_author_homepage\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugin_is_replaced\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_plugin_write_description\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvNode\fP *base_uri, FILE *plugin_file)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_plugin_write_manifest_entry\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvNode\fP *base_uri, FILE *manifest_file, \fBconst\fP char *plugin_file_path)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_plugin_get_related\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvNode\fP *type)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPort\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_port_get_node\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_port_get_value\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_port_get\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_port_get_properties\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_port_has_property\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvPort\fP *port, \fBconst\fP \fBLilvNode\fP *property_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_port_supports_event\fP (\fBconst\fP \fBLilvPlugin\fP *\fBp\fP, \fBconst\fP \fBLilvPort\fP *port, \fBconst\fP \fBLilvNode\fP *\fBevent_type\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBuint32_t\fP \fBlilv_port_get_index\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_port_get_symbol\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_port_get_name\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNodes\fP * \fBlilv_port_get_classes\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_port_is_a\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port, \fBconst\fP \fBLilvNode\fP *port_class)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_port_get_range\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port, \fBLilvNode\fP **deflt, \fBLilvNode\fP **\fBmin\fP, \fBLilvNode\fP **\fBmax\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvScalePoints\fP * \fBlilv_port_get_scale_points\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBconst\fP \fBLilvPort\fP *port)"
.br
.in -1c
.in -1c
.PP
.RI "\fBScale Point\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_scale_point_get_label\fP (\fBconst\fP \fBLilvScalePoint\fP *point)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_scale_point_get_value\fP (\fBconst\fP \fBLilvScalePoint\fP *point)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPlugin Class\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_plugin_class_get_parent_uri\fP (\fBconst\fP \fBLilvPluginClass\fP *plugin_class)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_plugin_class_get_uri\fP (\fBconst\fP \fBLilvPluginClass\fP *plugin_class)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_plugin_class_get_label\fP (\fBconst\fP \fBLilvPluginClass\fP *plugin_class)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvPluginClasses\fP * \fBlilv_plugin_class_get_children\fP (\fBconst\fP \fBLilvPluginClass\fP *plugin_class)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPlugin Instance\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBLilvInstance\fP * \fBlilv_plugin_instantiate\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, double sample_rate, \fBconst\fP \fBLV2_Feature\fP *\fBconst\fP *features)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_instance_free\fP (\fBLilvInstance\fP *instance)"
.br
.in -1c
.in -1c
.SS "Collections"
\fBLilv\fP has several collection types for holding various types of value: 
.PD 0

.IP "\(bu" 2
LilvPlugins (function prefix 'lilv_plugins_') 
.IP "\(bu" 2
LilvPluginClasses (function prefix 'lilv_plugin_classes_') 
.IP "\(bu" 2
LilvScalePoints (function prefix 'lilv_scale_points_') 
.IP "\(bu" 2
LilvNodes (function prefix 'lilv_nodes_') 
.IP "\(bu" 2
LilvUIs (function prefix 'lilv_uis_') 
.PP
.PP
Each collection type supports a similar basic API (except LilvPlugins which is internal and thus lacks a free function): 
.PD 0

.IP "\(bu" 2
void PREFIX_free (coll) 
.IP "\(bu" 2
unsigned PREFIX_size (coll) 
.IP "\(bu" 2
LilvIter* PREFIX_begin (coll) 
.PP

.in +1c
.ti -1c
.RI "#define \fBLILV_FOREACH\fP(colltype,  iter,  collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_plugin_classes_free\fP (\fBLilvPluginClasses\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_plugin_classes_size\fP (\fBconst\fP \fBLilvPluginClasses\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_plugin_classes_begin\fP (\fBconst\fP \fBLilvPluginClasses\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClass\fP * \fBlilv_plugin_classes_get\fP (\fBconst\fP \fBLilvPluginClasses\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_plugin_classes_next\fP (\fBconst\fP \fBLilvPluginClasses\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugin_classes_is_end\fP (\fBconst\fP \fBLilvPluginClasses\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClass\fP * \fBlilv_plugin_classes_get_by_uri\fP (\fBconst\fP \fBLilvPluginClasses\fP *classes, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_scale_points_free\fP (\fBLilvScalePoints\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_scale_points_size\fP (\fBconst\fP \fBLilvScalePoints\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_scale_points_begin\fP (\fBconst\fP \fBLilvScalePoints\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvScalePoint\fP * \fBlilv_scale_points_get\fP (\fBconst\fP \fBLilvScalePoints\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_scale_points_next\fP (\fBconst\fP \fBLilvScalePoints\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_scale_points_is_end\fP (\fBconst\fP \fBLilvScalePoints\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_uis_free\fP (\fBLilvUIs\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_uis_size\fP (\fBconst\fP \fBLilvUIs\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_uis_begin\fP (\fBconst\fP \fBLilvUIs\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvUI\fP * \fBlilv_uis_get\fP (\fBconst\fP \fBLilvUIs\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_uis_next\fP (\fBconst\fP \fBLilvUIs\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_uis_is_end\fP (\fBconst\fP \fBLilvUIs\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvUI\fP * \fBlilv_uis_get_by_uri\fP (\fBconst\fP \fBLilvUIs\fP *uis, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_nodes_free\fP (\fBLilvNodes\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_nodes_size\fP (\fBconst\fP \fBLilvNodes\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_nodes_begin\fP (\fBconst\fP \fBLilvNodes\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_nodes_get\fP (\fBconst\fP \fBLilvNodes\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_nodes_next\fP (\fBconst\fP \fBLilvNodes\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_nodes_is_end\fP (\fBconst\fP \fBLilvNodes\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_nodes_get_first\fP (\fBconst\fP \fBLilvNodes\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_nodes_contains\fP (\fBconst\fP \fBLilvNodes\fP *values, \fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_nodes_merge\fP (\fBconst\fP \fBLilvNodes\fP *\fBa\fP, \fBconst\fP \fBLilvNodes\fP *\fBb\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_plugins_size\fP (\fBconst\fP \fBLilvPlugins\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_plugins_begin\fP (\fBconst\fP \fBLilvPlugins\fP *collection)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPlugin\fP * \fBlilv_plugins_get\fP (\fBconst\fP \fBLilvPlugins\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvIter\fP * \fBlilv_plugins_next\fP (\fBconst\fP \fBLilvPlugins\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_plugins_is_end\fP (\fBconst\fP \fBLilvPlugins\fP *collection, \fBLilvIter\fP *\fBi\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPlugin\fP * \fBlilv_plugins_get_by_uri\fP (\fBconst\fP \fBLilvPlugins\fP *plugins, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.in -1c
.SS "World"
The 'world' represents all \fBLilv\fP state, and is used to discover/load/cache LV2 data (plugins, UIs, and extensions)\&. Normal hosts which just need to load plugins by URI should simply use \fBlilv_world_load_all()\fP to discover/load the system's LV2 resources\&. 
.in +1c
.ti -1c
.RI "#define \fBLILV_OPTION_FILTER_LANG\fP   'http://drobilla\&.net/\fBns\fP/lilv#\fBfilter\fP\-lang'"
.br
.ti -1c
.RI "#define \fBLILV_OPTION_DYN_MANIFEST\fP   'http://drobilla\&.net/\fBns\fP/lilv#dyn\-manifest'"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvWorld\fP * \fBlilv_world_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_set_option\fP (\fBLilvWorld\fP *world, \fBconst\fP char *\fBuri\fP, \fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_free\fP (\fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_load_all\fP (\fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_load_bundle\fP (\fBLilvWorld\fP *world, \fBLilvNode\fP *bundle_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_world_unload_bundle\fP (\fBLilvWorld\fP *world, \fBLilvNode\fP *bundle_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_world_load_resource\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *resource)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_world_unload_resource\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *resource)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClass\fP * \fBlilv_world_get_plugin_class\fP (\fBconst\fP \fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClasses\fP * \fBlilv_world_get_plugin_classes\fP (\fBconst\fP \fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPlugins\fP * \fBlilv_world_get_all_plugins\fP (\fBconst\fP \fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_world_find_nodes\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP, \fBconst\fP \fBLilvNode\fP *object)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_world_get\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP, \fBconst\fP \fBLilvNode\fP *object)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_world_ask\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP, \fBconst\fP \fBLilvNode\fP *object)"
.br
.in -1c
.SS "Plugin State"

.in +1c
.ti -1c
.RI "typedef \fBconst\fP \fBvoid\fP *(* \fBLilvGetPortValueFunc\fP) (\fBconst\fP char *port_symbol, \fBvoid\fP *user_data, \fBuint32_t\fP *\fBsize\fP, \fBuint32_t\fP *type)"
.br
.ti -1c
.RI "typedef \fBvoid\fP(* \fBLilvSetPortValueFunc\fP) (\fBconst\fP char *port_symbol, \fBvoid\fP *user_data, \fBconst\fP \fBvoid\fP *\fBvalue\fP, \fBuint32_t\fP \fBsize\fP, \fBuint32_t\fP type)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvState\fP * \fBlilv_state_new_from_world\fP (\fBLilvWorld\fP *world, \fBLV2_URID_Map\fP *\fBmap\fP, \fBconst\fP \fBLilvNode\fP *subject)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvState\fP * \fBlilv_state_new_from_file\fP (\fBLilvWorld\fP *world, \fBLV2_URID_Map\fP *\fBmap\fP, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP char *path)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvState\fP * \fBlilv_state_new_from_string\fP (\fBLilvWorld\fP *world, \fBLV2_URID_Map\fP *\fBmap\fP, \fBconst\fP char *\fBstr\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvState\fP * \fBlilv_state_new_from_instance\fP (\fBconst\fP \fBLilvPlugin\fP *plugin, \fBLilvInstance\fP *instance, \fBLV2_URID_Map\fP *\fBmap\fP, \fBconst\fP char *file_dir, \fBconst\fP char *copy_dir, \fBconst\fP char *link_dir, \fBconst\fP char *save_dir, \fBLilvGetPortValueFunc\fP get_value, \fBvoid\fP *user_data, \fBuint32_t\fP flags, \fBconst\fP \fBLV2_Feature\fP *\fBconst\fP *features)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_state_free\fP (\fBLilvState\fP *state)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_state_equals\fP (\fBconst\fP \fBLilvState\fP *\fBa\fP, \fBconst\fP \fBLilvState\fP *\fBb\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_state_get_num_properties\fP (\fBconst\fP \fBLilvState\fP *state)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_state_get_plugin_uri\fP (\fBconst\fP \fBLilvState\fP *state)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP char * \fBlilv_state_get_label\fP (\fBconst\fP \fBLilvState\fP *state)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_state_set_label\fP (\fBLilvState\fP *state, \fBconst\fP char *\fBlabel\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_state_restore\fP (\fBconst\fP \fBLilvState\fP *state, \fBLilvInstance\fP *instance, \fBLilvSetPortValueFunc\fP set_value, \fBvoid\fP *user_data, \fBuint32_t\fP flags, \fBconst\fP \fBLV2_Feature\fP *\fBconst\fP *features)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_state_save\fP (\fBLilvWorld\fP *world, \fBLV2_URID_Map\fP *\fBmap\fP, \fBLV2_URID_Unmap\fP *unmap, \fBconst\fP \fBLilvState\fP *state, \fBconst\fP char *\fBuri\fP, \fBconst\fP char *dir, \fBconst\fP char *\fBfilename\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP char * \fBlilv_state_to_string\fP (\fBLilvWorld\fP *world, \fBLV2_URID_Map\fP *\fBmap\fP, \fBLV2_URID_Unmap\fP *unmap, \fBconst\fP \fBLilvState\fP *state, \fBconst\fP char *\fBuri\fP, \fBconst\fP char *base_uri)"
.br
.in -1c
.SS "Plugin UI"

.in +1c
.ti -1c
.RI "typedef unsigned(* \fBLilvUISupportedFunc\fP) (\fBconst\fP char *container_type_uri, \fBconst\fP char *ui_type_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvUIs\fP * \fBlilv_plugin_get_uis\fP (\fBconst\fP \fBLilvPlugin\fP *plugin)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_ui_get_uri\fP (\fBconst\fP \fBLilvUI\fP *ui)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNodes\fP * \fBlilv_ui_get_classes\fP (\fBconst\fP \fBLilvUI\fP *ui)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_ui_is_a\fP (\fBconst\fP \fBLilvUI\fP *ui, \fBconst\fP \fBLilvNode\fP *class_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP unsigned \fBlilv_ui_is_supported\fP (\fBconst\fP \fBLilvUI\fP *ui, \fBLilvUISupportedFunc\fP supported_func, \fBconst\fP \fBLilvNode\fP *container_type, \fBconst\fP \fBLilvNode\fP **ui_type)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_ui_get_bundle_uri\fP (\fBconst\fP \fBLilvUI\fP *ui)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvNode\fP * \fBlilv_ui_get_binary_uri\fP (\fBconst\fP \fBLilvUI\fP *ui)"
.br
.in -1c
.SH "Detailed Description"
.PP 
API for \fBLilv\fP, a lightweight LV2 host library\&. 
.PP
Definition in file \fBlilv\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define LILV_API"

.PP
Definition at line 46 of file lilv\&.h\&.
.SS "#define LILV_NS_DOAP   'http://usefulinc\&.com/\fBns\fP/doap#'"

.PP
Definition at line 55 of file lilv\&.h\&.
.SS "#define LILV_NS_FOAF   'http://xmlns\&.com/foaf/0\&.1/'"

.PP
Definition at line 56 of file lilv\&.h\&.
.SS "#define LILV_NS_LILV   'http://drobilla\&.net/\fBns\fP/lilv#'"

.PP
Definition at line 57 of file lilv\&.h\&.
.SS "#define LILV_NS_LV2   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#'"

.PP
Definition at line 58 of file lilv\&.h\&.
.SS "#define LILV_NS_OWL   'http://www\&.w3\&.org/2002/07/owl#'"

.PP
Definition at line 59 of file lilv\&.h\&.
.SS "#define LILV_NS_RDF   'http://www\&.w3\&.org/1999/02/22\-rdf\-\fBsyntax\fP\-\fBns\fP#'"

.PP
Definition at line 60 of file lilv\&.h\&.
.SS "#define LILV_NS_RDFS   'http://www\&.w3\&.org/2000/01/rdf\-schema#'"

.PP
Definition at line 61 of file lilv\&.h\&.
.SS "#define LILV_NS_XSD   'http://www\&.w3\&.org/2001/XMLSchema#'"

.PP
Definition at line 62 of file lilv\&.h\&.
.SS "#define LILV_URI_AUDIO_PORT   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#AudioPort'"

.PP
Definition at line 64 of file lilv\&.h\&.
.SS "#define LILV_URI_CONTROL_PORT   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#ControlPort'"

.PP
Definition at line 65 of file lilv\&.h\&.
.SS "#define LILV_URI_EVENT_PORT   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/event#EventPort'"

.PP
Definition at line 66 of file lilv\&.h\&.
.SS "#define LILV_URI_INPUT_PORT   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#InputPort'"

.PP
Definition at line 67 of file lilv\&.h\&.
.SS "#define LILV_URI_MIDI_EVENT   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/\fBmidi\fP#MidiEvent'"

.PP
Definition at line 68 of file lilv\&.h\&.
.SS "#define LILV_URI_OUTPUT_PORT   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#OutputPort'"

.PP
Definition at line 69 of file lilv\&.h\&.
.SS "#define LILV_URI_PORT   'http://\fBlv2plug\&.in\fP/\fBns\fP/lv2core#Port'"

.PP
Definition at line 70 of file lilv\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct LilvInstanceImpl \fBLilvInstance\fP"
Plugin instance\&. 
.PP
Definition at line 79 of file lilv\&.h\&.
.SS "typedef \fBvoid\fP \fBLilvIter\fP"
Collection iterator 
.PP
Definition at line 82 of file lilv\&.h\&.
.SS "typedef struct \fBLilvNodeImpl\fP \fBLilvNode\fP"
Typed Value\&. 
.PP
Definition at line 77 of file lilv\&.h\&.
.SS "typedef \fBvoid\fP \fBLilvNodes\fP"
set<Node>\&. 
.PP
Definition at line 87 of file lilv\&.h\&.
.SS "typedef struct \fBLilvPluginImpl\fP \fBLilvPlugin\fP"
LV2 Plugin\&. 
.PP
Definition at line 72 of file lilv\&.h\&.
.SS "typedef struct \fBLilvPluginClassImpl\fP \fBLilvPluginClass\fP"
Plugin Class\&. 
.PP
Definition at line 73 of file lilv\&.h\&.
.SS "typedef \fBvoid\fP \fBLilvPluginClasses\fP"
set<PluginClass>\&. 
.PP
Definition at line 83 of file lilv\&.h\&.
.SS "typedef \fBvoid\fP \fBLilvPlugins\fP"
set<Plugin>\&. 
.PP
Definition at line 84 of file lilv\&.h\&.
.SS "typedef struct \fBLilvPortImpl\fP \fBLilvPort\fP"
Port\&. 
.PP
Definition at line 74 of file lilv\&.h\&.
.SS "typedef struct \fBLilvScalePointImpl\fP \fBLilvScalePoint\fP"
Scale Point\&. 
.PP
Definition at line 75 of file lilv\&.h\&.
.SS "typedef \fBvoid\fP \fBLilvScalePoints\fP"
set<ScalePoint>\&. 
.PP
Definition at line 85 of file lilv\&.h\&.
.SS "typedef struct \fBLilvStateImpl\fP \fBLilvState\fP"
Plugin state\&. 
.PP
Definition at line 80 of file lilv\&.h\&.
.SS "typedef struct \fBLilvUIImpl\fP \fBLilvUI\fP"
Plugin UI\&. 
.PP
Definition at line 76 of file lilv\&.h\&.
.SS "typedef \fBvoid\fP \fBLilvUIs\fP"
set<UI>\&. 
.PP
Definition at line 86 of file lilv\&.h\&.
.SS "typedef struct \fBLilvWorldImpl\fP \fBLilvWorld\fP"
\fBLilv\fP World\&. 
.PP
Definition at line 78 of file lilv\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
