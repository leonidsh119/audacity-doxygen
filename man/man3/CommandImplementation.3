.TH "CommandImplementation" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CommandImplementation \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Command\&.h>\fP
.PP
Inherits \fBCommand\fP\&.
.PP
Inherited by \fBBatchEvalCommand\fP, \fBCompareAudioCommand\fP, \fBExecMenuCommand\fP, \fBExportCommand\fP, \fBGetAllMenuCommands\fP, \fBGetPreferenceCommand\fP, \fBGetProjectInfoCommand\fP, \fBGetTrackInfoCommand\fP, \fBHelpCommand\fP, \fBImportCommand\fP, \fBMessageCommand\fP, \fBOpenProjectCommand\fP, \fBSaveProjectCommand\fP, \fBScreenshotCommand\fP, \fBSelectCommand\fP, \fBSetPreferenceCommand\fP, \fBSetProjectInfoCommand\fP, and \fBSetTrackInfoCommand\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBProgress\fP (double completed)"
.br
.ti -1c
.RI "\fBvoid\fP \fBStatus\fP (\fBconst\fP wxString &\fBstatus\fP) override"
.br
.ti -1c
.RI "\fBvoid\fP \fBError\fP (\fBconst\fP wxString &message) override"
.br
.ti -1c
.RI "\fBCommandImplementation\fP (\fBCommandType\fP &type, \fBCommandOutputTarget\fP *\fBoutput\fP)"
.br
.ti -1c
.RI "virtual \fB~CommandImplementation\fP ()"
.br
.ti -1c
.RI "wxString \fBGetName\fP ()"
.br
.RI "\fIAn instance method for getting the command name (for consistency) \fP"
.ti -1c
.RI "\fBCommandSignature\fP & \fBGetSignature\fP ()"
.br
.RI "\fIGet the signature of the command\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBSetParameter\fP (\fBconst\fP wxString &paramName, \fBconst\fP wxVariant &paramValue)"
.br
.ti -1c
.RI "\fBbool\fP \fBApply\fP (\fBCommandExecutionContext\fP \fBcontext\fP) override"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBTypeCheck\fP (\fBconst\fP wxString &typeName, \fBconst\fP wxString &paramName, \fBconst\fP wxVariant &param)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCheckParam\fP (\fBconst\fP wxString &paramName)"
.br
.ti -1c
.RI "\fBbool\fP \fBGetBool\fP (\fBconst\fP wxString &paramName)"
.br
.ti -1c
.RI "long \fBGetLong\fP (\fBconst\fP wxString &paramName)"
.br
.ti -1c
.RI "double \fBGetDouble\fP (\fBconst\fP wxString &paramName)"
.br
.ti -1c
.RI "wxString \fBGetString\fP (\fBconst\fP wxString &paramName)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBCommandOutputTarget\fP * \fBmOutput\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 106 of file Command\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CommandImplementation::CommandImplementation (\fBCommandType\fP & type, \fBCommandOutputTarget\fP * output)"
Constructor should not be called directly; only by a factory which ensures name and params are set appropriately for the command\&. 
.PP
Definition at line 91 of file Command\&.cpp\&.
.SS "CommandImplementation::~CommandImplementation ()\fC [virtual]\fP"

.PP
Definition at line 100 of file Command\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBbool\fP CommandImplementation::Apply (\fBCommandExecutionContext\fP context)\fC [override]\fP, \fC [virtual]\fP"
Actually carry out the command\&. Return true if successful and false otherwise\&. 
.PP
Implements \fBCommand\fP\&.
.PP
Reimplemented in \fBSetPreferenceCommand\fP, \fBExportCommand\fP, \fBSaveProjectCommand\fP, \fBScreenshotCommand\fP, \fBCompareAudioCommand\fP, \fBGetAllMenuCommands\fP, \fBGetPreferenceCommand\fP, \fBSetProjectInfoCommand\fP, \fBExecMenuCommand\fP, \fBImportCommand\fP, \fBOpenProjectCommand\fP, \fBMessageCommand\fP, \fBGetProjectInfoCommand\fP, \fBGetTrackInfoCommand\fP, \fBSetTrackInfoCommand\fP, \fBHelpCommand\fP, and \fBSelectCommand\fP\&.
.PP
Definition at line 214 of file Command\&.cpp\&.
.SS "\fBvoid\fP CommandImplementation::CheckParam (\fBconst\fP wxString & paramName)\fC [protected]\fP"

.PP
Definition at line 118 of file Command\&.cpp\&.
.SS "\fBvoid\fP CommandImplementation::Error (\fBconst\fP wxString & message)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBCommand\fP\&.
.PP
Definition at line 170 of file Command\&.cpp\&.
.SS "\fBbool\fP CommandImplementation::GetBool (\fBconst\fP wxString & paramName)\fC [protected]\fP"

.PP
Definition at line 127 of file Command\&.cpp\&.
.SS "double CommandImplementation::GetDouble (\fBconst\fP wxString & paramName)\fC [protected]\fP"

.PP
Definition at line 143 of file Command\&.cpp\&.
.SS "long CommandImplementation::GetLong (\fBconst\fP wxString & paramName)\fC [protected]\fP"

.PP
Definition at line 135 of file Command\&.cpp\&.
.SS "wxString CommandImplementation::GetName ()\fC [virtual]\fP"

.PP
An instance method for getting the command name (for consistency) Get the name of the command\&. 
.PP
Implements \fBCommand\fP\&.
.PP
Definition at line 176 of file Command\&.cpp\&.
.SS "\fBCommandSignature\fP & CommandImplementation::GetSignature ()\fC [virtual]\fP"

.PP
Get the signature of the command\&. 
.PP
Implements \fBCommand\fP\&.
.PP
Definition at line 182 of file Command\&.cpp\&.
.SS "wxString CommandImplementation::GetString (\fBconst\fP wxString & paramName)\fC [protected]\fP"

.PP
Definition at line 151 of file Command\&.cpp\&.
.SS "\fBvoid\fP CommandImplementation::Progress (double completed)\fC [virtual]\fP"

.PP
Implements \fBCommand\fP\&.
.PP
Definition at line 160 of file Command\&.cpp\&.
.SS "\fBbool\fP CommandImplementation::SetParameter (\fBconst\fP wxString & paramName, \fBconst\fP wxVariant & paramValue)\fC [virtual]\fP"
Attempt to one of the command's parameters to a particular value\&. (Note: wxVariant is reference counted) 
.PP
Reimplemented from \fBCommand\fP\&.
.PP
Definition at line 187 of file Command\&.cpp\&.
.SS "\fBvoid\fP CommandImplementation::Status (\fBconst\fP wxString & status)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBCommand\fP\&.
.PP
Definition at line 165 of file Command\&.cpp\&.
.SS "\fBvoid\fP CommandImplementation::TypeCheck (\fBconst\fP wxString & typeName, \fBconst\fP wxString & paramName, \fBconst\fP wxVariant & param)\fC [protected]\fP"

.PP
Definition at line 105 of file Command\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBCommandOutputTarget\fP* CommandImplementation::mOutput\fC [protected]\fP"

.PP
Definition at line 117 of file Command\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
