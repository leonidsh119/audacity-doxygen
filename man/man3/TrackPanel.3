.TH "TrackPanel" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TrackPanel \- The \fBTrackPanel\fP class coordinates updates and operations on the main part of the screen which contains multiple tracks\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TrackPanel\&.h>\fP
.PP
Inherits wxPanel\&.
.PP
Inherited by \fBTrackPanel2\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAudacityTimer\fP"
.br
.RI "\fITimer class dedicated to infomring the \fBTrackPanel\fP that it is time to refresh some aspect of the screen\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTrackPanel\fP (wxWindow *parent, wxWindowID id, \fBconst\fP wxPoint &pos, \fBconst\fP wxSize &\fBsize\fP, \fBTrackList\fP *tracks, \fBViewInfo\fP *viewInfo, \fBTrackPanelListener\fP *listener, \fBAdornedRulerPanel\fP *ruler)"
.br
.ti -1c
.RI "virtual \fB~TrackPanel\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBBuildMenus\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDeleteMenus\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdatePrefs\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSize\fP (wxSizeEvent &event)"
.br
.RI "\fI\fBOnSize()\fP is called when the panel is resized\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnPaint\fP (wxPaintEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnMouseEvent\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnCaptureLost\fP (wxMouseCaptureLostEvent &event)"
.br
.RI "\fIShould handle the case when the mouse capture is lost\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnCaptureKey\fP (wxCommandEvent &event)"
.br
.RI "\fI\fBFilter\fP captured keys typed into LabelTracks\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnKeyDown\fP (wxKeyEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnChar\fP (wxKeyEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnKeyUp\fP (wxKeyEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSetFocus\fP (wxFocusEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnKillFocus\fP (wxFocusEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnActivateOrDeactivateApp\fP (wxActivateEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnContextMenu\fP (wxContextMenuEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTrackListResized\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTrackListUpdated\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateViewIfNoTracks\fP ()"
.br
.ti -1c
.RI "virtual double \fBGetMostRecentXPos\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTimer\fP (wxTimerEvent &event)"
.br
.RI "\fIAS: This gets called on our wx timer events\&. \fP"
.ti -1c
.RI "virtual \fBint\fP \fBGetLeftOffset\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBGetTracksUsableArea\fP (\fBint\fP *width, \fBint\fP *height) \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSelectNone\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBRefresh\fP (\fBbool\fP eraseBackground=\fBtrue\fP, \fBconst\fP wxRect *rect=(\fBconst\fP wxRect *) \fBNULL\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBRefreshTrack\fP (\fBTrack\fP *trk, \fBbool\fP refreshbacking=\fBtrue\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDisplaySelection\fP ()"
.br
.RI "\fIDisplays the bounds of the selection in the status bar\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleEscapeKey\fP (\fBbool\fP down)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleAltKey\fP (\fBbool\fP down)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleShiftKey\fP (\fBbool\fP down)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleControlKey\fP (\fBbool\fP down)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandlePageUpKey\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandlePageDownKey\fP ()"
.br
.ti -1c
.RI "virtual \fBAudacityProject\fP * \fBGetProject\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnPrevTrack\fP (\fBbool\fP shift=\fBfalse\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnNextTrack\fP (\fBbool\fP shift=\fBfalse\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnFirstTrack\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnLastTrack\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnToggle\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBScrollIntoView\fP (double pos)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBScrollIntoView\fP (\fBint\fP x)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTrackMenu\fP (\fBTrack\fP *\fBt\fP=\fBNULL\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnVRulerMenu\fP (\fBTrack\fP *\fBt\fP, wxMouseEvent *pEvent=\fBNULL\fP)"
.br
.ti -1c
.RI "virtual \fBTrack\fP * \fBGetFirstSelectedTrack\fP ()"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBIsMouseCaptured\fP ()"
.br
.RI "\fIDetermines if the a modal tool is active\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBEnsureVisible\fP (\fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual \fBTrack\fP * \fBGetFocusedTrack\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetFocusedTrack\fP (\fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleCursorForLastMouseEvent\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateVRulers\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateVRuler\fP (\fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateTrackVRuler\fP (\fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateVRulerSize\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawQuickPlayIndicator\fP (\fBint\fP x, \fBbool\fP snapped=\fBfalse\fP)"
.br
.ti -1c
.RI "virtual double \fBGetScreenEndTime\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBStopScrubbing\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateAccessibility\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBSnapCenterOnce\fP (\fBconst\fP \fBWaveTrack\fP *pTrack, \fBbool\fP up)"
.br
.ti -1c
.RI "\fBTrackList\fP * \fBGetTracks\fP ()"
.br
.ti -1c
.RI "\fBViewInfo\fP * \fBGetViewInfo\fP ()"
.br
.ti -1c
.RI "\fBTrackPanelListener\fP * \fBGetListener\fP ()"
.br
.ti -1c
.RI "\fBAdornedRulerPanel\fP * \fBGetRuler\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawOverlays\fP (\fBbool\fP repaint)"
.br
.ti -1c
.RI "\fBTrackInfo\fP * \fBGetTrackInfo\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBToggleSpectralSelection\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "wxSize \fBvrulerSize\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBTrackPanel\fP *(* \fBFactoryFunction\fP )(wxWindow *parent, wxWindowID id, \fBconst\fP wxPoint &pos, \fBconst\fP wxSize &\fBsize\fP, \fBTrackList\fP *tracks, \fBViewInfo\fP *viewInfo, \fBTrackPanelListener\fP *listener, \fBAdornedRulerPanel\fP *ruler) = TrackPanelFactory"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBeFreqSelMode\fP { \fBFREQ_SEL_INVALID\fP, \fBFREQ_SEL_SNAPPING_CENTER\fP, \fBFREQ_SEL_PINNED_CENTER\fP, \fBFREQ_SEL_DRAG_CENTER\fP, \fBFREQ_SEL_FREE\fP, \fBFREQ_SEL_TOP_FREE\fP, \fBFREQ_SEL_BOTTOM_FREE\fP }"
.br
.ti -1c
.RI "enum \fBSelectionBoundary\fP { \fBSBNone\fP, \fBSBLeft\fP, \fBSBRight\fP, \fBSBBottom\fP, \fBSBTop\fP, \fBSBCenter\fP, \fBSBWidth\fP }"
.br
.ti -1c
.RI "enum \fBMouseCaptureEnum\fP { \fBIsUncaptured\fP =0, \fBIsVZooming\fP, \fBIsClosing\fP, \fBIsSelecting\fP, \fBIsAdjustingLabel\fP, \fBIsSelectingLabelText\fP, \fBIsAdjustingSample\fP, \fBIsResizing\fP, \fBIsResizingBetweenLinkedTracks\fP, \fBIsResizingBelowLinkedTracks\fP, \fBIsRearranging\fP, \fBIsSliding\fP, \fBIsEnveloping\fP, \fBIsMuting\fP, \fBIsSoloing\fP, \fBIsGainSliding\fP, \fBIsPanSliding\fP, \fBIsMinimizing\fP, \fBWasOverCutLine\fP, \fBIsPopping\fP, \fBIsZooming\fP }"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBMixerBoard\fP * \fBGetMixerBoard\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBBuildCommonDropMenuItems\fP (wxMenu *menu)"
.br
.RI "\fIPopulates the track pop-down menu with the common set of initial items\&. \fP"
.ti -1c
.RI "virtual \fBbool\fP \fBIsAudioActive\fP ()"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBIsUnsafe\fP ()"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBHandleLabelTrackClick\fP (\fBLabelTrack\fP *lTrack, wxRect &rect, wxMouseEvent &event)"
.br
.RI "\fIEvent has happened on a track and it has been determined to be a label track\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleGlyphDragRelease\fP (\fBLabelTrack\fP *lTrack, wxMouseEvent &event)"
.br
.RI "\fIEvent has happened on a track and it has been determined to be a label track\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleTextDragRelease\fP (\fBLabelTrack\fP *lTrack, wxMouseEvent &event)"
.br
.RI "\fIEvent has happened on a track and it has been determined to be a label track\&. \fP"
.ti -1c
.RI "virtual \fBbool\fP \fBHandleTrackLocationMouseEvent\fP (\fBWaveTrack\fP *track, wxRect &rect, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBIsOverCutline\fP (\fBWaveTrack\fP *track, wxRect &rect, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleTrackSpecificMouseEvent\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBTimerUpdateIndicator\fP (double playPos)"
.br
.ti -1c
.RI "virtual std::pair< wxRect, \fBbool\fP > \fBGetIndicatorRectangle\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUndrawIndicator\fP (wxDC &dc)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDoDrawIndicator\fP (wxDC &dc)"
.br
.RI "\fIdraws the green line on the tracks to show playback position \fP"
.ti -1c
.RI "virtual std::pair< wxRect, \fBbool\fP > \fBGetCursorRectangle\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUndrawCursor\fP (wxDC &dc)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDoDrawCursor\fP (wxDC &dc)"
.br
.ti -1c
.RI "\fBbool\fP \fBShouldDrawScrubSpeed\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBTimerUpdateScrubbing\fP (double playPos)"
.br
.ti -1c
.RI "virtual std::pair< wxRect, \fBbool\fP > \fBGetScrubSpeedRectangle\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBUndrawScrubSpeed\fP (wxDC &dc)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDoDrawScrubSpeed\fP (wxDC &dc)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBScrollDuringDrag\fP ()"
.br
.ti -1c
.RI "virtual \fBint\fP \fBDetermineToolToUse\fP (\fBToolsToolBar\fP *pTtb, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBHitTestEnvelope\fP (\fBTrack\fP *track, wxRect &rect, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBHitTestSamples\fP (\fBTrack\fP *track, wxRect &rect, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBHitTestSlide\fP (\fBTrack\fP *track, wxRect &rect, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSelect\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSelectionHandleDrag\fP (wxMouseEvent &event, \fBTrack\fP *pTrack)"
.br
.ti -1c
.RI "double \fBFindScrubSpeed\fP (double timeAtMouse) \fBconst\fP "
.br
.ti -1c
.RI "double \fBFindSeekSpeed\fP (double timeAtMouse) \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBIsScrubbing\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBMarkScrubStart\fP (wxCoord xx, \fBbool\fP smoothScrolling)"
.br
.ti -1c
.RI "\fBbool\fP \fBMaybeStartScrubbing\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "\fBbool\fP \fBContinueScrubbing\fP (wxCoord \fBposition\fP, \fBbool\fP hasFocus, \fBbool\fP seek)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSelectionHandleClick\fP (wxMouseEvent &event, \fBTrack\fP *pTrack, wxRect rect)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBStartSelection\fP (\fBint\fP mouseXCoordinate, \fBint\fP trackLeftEdge)"
.br
.RI "\fIReset our selection markers\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBExtendSelection\fP (\fBint\fP mouseXCoordinate, \fBint\fP trackLeftEdge, \fBTrack\fP *pTrack)"
.br
.RI "\fIExtend the existing selection\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBUpdateSelectionDisplay\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartSnappingFreqSelection\fP (\fBconst\fP \fBWaveTrack\fP *pTrack)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMoveSnappingFreqSelection\fP (\fBint\fP mouseYCoordinate, \fBint\fP trackTopEdge, \fBint\fP trackHeight, \fBTrack\fP *pTrack)"
.br
.ti -1c
.RI "\fBvoid\fP \fBStartFreqSelection\fP (\fBint\fP mouseYCoordinate, \fBint\fP trackTopEdge, \fBint\fP trackHeight, \fBTrack\fP *pTrack)"
.br
.ti -1c
.RI "\fBvoid\fP \fBExtendFreqSelection\fP (\fBint\fP mouseYCoordinate, \fBint\fP trackTopEdge, \fBint\fP trackHeight)"
.br
.ti -1c
.RI "\fBvoid\fP \fBResetFreqSelectionPin\fP (double hintFrequency, \fBbool\fP logF)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSelectTracksByLabel\fP (\fBLabelTrack\fP *\fBt\fP)"
.br
.RI "\fISelect all tracks marked by the label track lt\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBSelectTrackLength\fP (\fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBSetCursorByActivity\fP ()"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBSetCursorForCutline\fP (\fBWaveTrack\fP *track, wxRect &rect, wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetCursorAndTipWhenInLabel\fP (\fBTrack\fP *\fBt\fP, wxMouseEvent &event, wxString &tip)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetCursorAndTipWhenInVResizeArea\fP (\fBbool\fP blinked, wxString &tip)"
.br
.RI "\fIWhen in the resize area we can adjust size or relative size\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBSetCursorAndTipWhenInLabelTrack\fP (\fBLabelTrack\fP *pLT, wxMouseEvent &event, wxString &tip)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetCursorAndTipWhenSelectTool\fP (\fBTrack\fP *\fBt\fP, wxMouseEvent &event, wxRect &rect, \fBbool\fP bMultiToolMode, wxString &tip, \fBconst\fP wxCursor **ppCursor)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetCursorAndTipByTool\fP (\fBint\fP tool, wxMouseEvent &event, wxString &tip)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleCursor\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBMaySetOnDemandTip\fP (\fBTrack\fP *\fBt\fP, wxString &tip)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleEnvelope\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBForwardEventToTimeTrackEnvelope\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBForwardEventToWaveTrackEnvelope\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBForwardEventToEnvelope\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSlide\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBStartSlide\fP (wxMouseEvent &event)"
.br
.RI "\fIPrepare for sliding\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBDoSlide\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBAddClipsToCaptured\fP (\fBTrack\fP *\fBt\fP, \fBbool\fP withinSelection)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBAddClipsToCaptured\fP (\fBTrack\fP *\fBt\fP, double t0, double t1)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleZoom\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleZoomClick\fP (wxMouseEvent &event)"
.br
.RI "\fIZoom button down, record the position\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleZoomDrag\fP (wxMouseEvent &event)"
.br
.RI "\fIZoom drag\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleZoomButtonUp\fP (wxMouseEvent &event)"
.br
.RI "\fIZoom button up\&. \fP"
.ti -1c
.RI "virtual \fBbool\fP \fBIsDragZooming\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDragZoom\fP (wxMouseEvent &event, \fBint\fP x)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDoZoomInOut\fP (wxMouseEvent &event, \fBint\fP x)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleVZoom\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleVZoomClick\fP (wxMouseEvent &event)"
.br
.RI "\fIVZoom click\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleVZoomDrag\fP (wxMouseEvent &event)"
.br
.RI "\fIVZoom drag\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleVZoomButtonUp\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleWaveTrackVZoom\fP (\fBWaveTrack\fP *track, \fBbool\fP shiftDown, \fBbool\fP rightUp)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBIsSampleEditingPossible\fP (wxMouseEvent &event, \fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSampleEditing\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "float \fBFindSampleEditingLevel\fP (wxMouseEvent &event, double dBRange, double t0)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSampleEditingClick\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSampleEditingDrag\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSampleEditingButtonUp\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleWheelRotation\fP (wxMouseEvent &event)"
.br
.RI "\fIHandle mouse wheel rotation (for zoom in/out, vertical and horizontal scrolling) \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleWheelRotationInVRuler\fP (wxMouseEvent &event, \fBTrack\fP *pTrack, \fBconst\fP wxRect &rect)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleResizeClick\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleResizeDrag\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleResizeButtonUp\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleResize\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleLabelClick\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleRearrange\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBCalculateRearrangingThresholds\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleClosing\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandlePopping\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleMutingSoloing\fP (wxMouseEvent &event, \fBbool\fP solo)"
.br
.RI "\fIHandle when the mute or solo button is pressed for some track\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleMinimizing\fP (wxMouseEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHandleSliders\fP (wxMouseEvent &event, \fBbool\fP pan)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCloseFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, \fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBPopupFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, \fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBTrackSelFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, \fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBMuteSoloFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, \fBint\fP x, \fBint\fP \fBf\fP, \fBbool\fP solo)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBMinimizeFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, \fBint\fP x, \fBint\fP \fBf\fP)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBGainFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, wxMouseEvent &event, \fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBPanFunc\fP (\fBTrack\fP *\fBt\fP, wxRect rect, wxMouseEvent &event, \fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBMakeParentRedrawScrollbars\fP ()"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBMakeParentPushState\fP (\fBconst\fP wxString &\fBdesc\fP, \fBconst\fP wxString &shortDesc)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBMakeParentPushState\fP (\fBconst\fP wxString &\fBdesc\fP, \fBconst\fP wxString &shortDesc, \fBUndoPush\fP flags)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBMakeParentModifyState\fP (\fBbool\fP bWantsAutoSave)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSetName\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSetFont\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnMoveTrack\fP (wxCommandEvent &event)"
.br
.RI "\fIMove a track up, down, to top or to bottom\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnChangeOctave\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnChannelChange\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSpectrogramSettings\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSetDisplay\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSetTimeTrackRange\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTimeTrackLin\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTimeTrackLog\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnTimeTrackLogInt\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnWaveformScaleType\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSpectrumScaleType\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnZoomInVertical\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnZoomOutVertical\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnZoomFitVertical\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetMenuCheck\fP (wxMenu &menu, \fBint\fP newId)"
.br
.RI "\fIPuts a check mark at a given position in a menu\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBSetRate\fP (\fBTrack\fP *pTrack, double \fBrate\fP)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnRateChange\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnRateOther\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnFormatChange\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSwapChannels\fP (wxCommandEvent &event)"
.br
.RI "\fISwap the left and right channels of a stero track\&.\&.\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSplitStereo\fP (wxCommandEvent &event)"
.br
.RI "\fISplit a stereo track into two tracks\&.\&.\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnSplitStereoMono\fP (wxCommandEvent &event)"
.br
.RI "\fISplit a stereo track into two mono tracks\&.\&.\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBSplitStereo\fP (\fBbool\fP stereo)"
.br
.RI "\fISplit a stereo track into two tracks\&.\&.\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBOnMergeStereo\fP (wxCommandEvent &event)"
.br
.RI "\fIMerge two tracks into one stereo track ?? \fP"
.ti -1c
.RI "virtual \fBTrack\fP * \fBFindTrack\fP (\fBint\fP mouseX, \fBint\fP mouseY, \fBbool\fP \fBlabel\fP, \fBbool\fP link, wxRect *trackRect=\fBNULL\fP)"
.br
.ti -1c
.RI "virtual wxRect \fBFindTrackRect\fP (\fBTrack\fP *\fBtarget\fP, \fBbool\fP \fBlabel\fP)"
.br
.ti -1c
.RI "virtual \fBint\fP \fBGetVRulerWidth\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBint\fP \fBGetVRulerOffset\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBint\fP \fBGetLabelWidth\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawTracks\fP (wxDC *dc)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawEverythingElse\fP (wxDC *dc, \fBconst\fP wxRegion &region, \fBconst\fP wxRect &clip)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawOutside\fP (\fBTrack\fP *\fBt\fP, wxDC *dc, \fBconst\fP wxRect &rec, \fBconst\fP wxRect &trackRect)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawZooming\fP (wxDC *dc, \fBconst\fP wxRect &clip)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBHighlightFocusedTrack\fP (wxDC *dc, \fBconst\fP wxRect &rect)"
.br
.RI "\fIDraw a three-level highlight gradient around the focused track\&. \fP"
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawShadow\fP (\fBTrack\fP *\fBt\fP, wxDC *dc, \fBconst\fP wxRect &rect)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawBordersAroundTrack\fP (\fBTrack\fP *\fBt\fP, wxDC *dc, \fBconst\fP wxRect &rect, \fBconst\fP \fBint\fP labelw, \fBconst\fP \fBint\fP vrul)"
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBDrawOutsideOfTrack\fP (\fBTrack\fP *\fBt\fP, wxDC *dc, \fBconst\fP wxRect &rect)"
.br
.ti -1c
.RI "virtual \fBint\fP \fBIdOfRate\fP (\fBint\fP \fBrate\fP)"
.br
.RI "\fIConverts a sampling rate to a wxWidgets menu item id\&. \fP"
.ti -1c
.RI "virtual \fBint\fP \fBIdOfFormat\fP (\fBint\fP \fBformat\fP)"
.br
.RI "\fIConverts a format enumeration to a wxWidgets menu item Id\&. \fP"
.ti -1c
.RI "virtual \fBbool\fP \fBHasSoloButton\fP ()"
.br
.ti -1c
.RI "virtual wxString \fBTrackSubText\fP (\fBTrack\fP *\fBt\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBHandleCenterFrequencyCursor\fP (\fBbool\fP shiftDown, wxString &tip, \fBconst\fP wxCursor **ppCursor)"
.br
.ti -1c
.RI "\fBvoid\fP \fBHandleCenterFrequencyClick\fP (\fBbool\fP shiftDown, \fBTrack\fP *pTrack, double \fBvalue\fP)"
.br
.ti -1c
.RI "double \fBPositionToFrequency\fP (\fBconst\fP \fBWaveTrack\fP *wt, \fBbool\fP maySnap, wxInt64 mouseYCoordinate, wxInt64 trackTopEdge, \fBint\fP trackHeight) \fBconst\fP "
.br
.ti -1c
.RI "wxInt64 \fBFrequencyToPosition\fP (\fBconst\fP \fBWaveTrack\fP *wt, double frequency, wxInt64 trackTopEdge, \fBint\fP trackHeight) \fBconst\fP "
.br
.RI "\fIConverts a frequency to screen y position\&. \fP"
.ti -1c
.RI "\fBSelectionBoundary\fP \fBChooseTimeBoundary\fP (double selend, \fBbool\fP onlyWithinSnapDistance, wxInt64 *pPixelDist=\fBNULL\fP, double *pPinValue=\fBNULL\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBSelectionBoundary\fP \fBChooseBoundary\fP (wxMouseEvent &event, \fBconst\fP \fBTrack\fP *pTrack, \fBconst\fP wxRect &rect, \fBbool\fP mayDragWidth, \fBbool\fP onlyWithinSnapDistance, double *pPinValue=\fBNULL\fP) \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBSetCapturedTrack\fP (\fBTrack\fP *\fBt\fP, enum \fBMouseCaptureEnum\fP MouseCapture=\fBIsUncaptured\fP)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static \fBvoid\fP \fBBuildVRulerMenuItems\fP (wxMenu *menu, \fBint\fP firstId, \fBconst\fP wxArrayString &names)"
.br
.ti -1c
.RI "static \fBbool\fP \fBPollIsSeeking\fP ()"
.br
.ti -1c
.RI "static \fBbool\fP \fBIsDragZooming\fP (\fBint\fP zoomStart, \fBint\fP zoomEnd)"
.br
.RI "\fIDetermines if drag zooming is active\&. \fP"
.ti -1c
.RI "static \fBvoid\fP \fBHandleWaveTrackVZoom\fP (\fBTrackList\fP *tracks, \fBconst\fP wxRect &rect, \fBint\fP zoomStart, \fBint\fP zoomEnd, \fBWaveTrack\fP *track, \fBbool\fP shiftDown, \fBbool\fP rightUp, \fBbool\fP fixedMousePoint)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBint\fP \fBmLabelTrackStartXPos\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmLabelTrackStartYPos\fP"
.br
.ti -1c
.RI "\fBTrackInfo\fP \fBmTrackInfo\fP"
.br
.ti -1c
.RI "\fBTrackPanelListener\fP * \fBmListener\fP"
.br
.ti -1c
.RI "\fBTrackList\fP * \fBmTracks\fP"
.br
.ti -1c
.RI "\fBViewInfo\fP * \fBmViewInfo\fP"
.br
.ti -1c
.RI "\fBAdornedRulerPanel\fP * \fBmRuler\fP"
.br
.ti -1c
.RI "\fBTrackArtist\fP * \fBmTrackArtist\fP"
.br
.ti -1c
.RI "\fBTrackPanel::AudacityTimer\fP \fBmTimer\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmLastIndicatorX\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmNewIndicatorX\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmLastCursorX\fP"
.br
.ti -1c
.RI "double \fBmCursorTime\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmNewCursorX\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmOldQPIndicatorPos\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmTimeCount\fP"
.br
.ti -1c
.RI "wxMemoryDC \fBmBackingDC\fP"
.br
.ti -1c
.RI "wxBitmap * \fBmBacking\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmResizeBacking\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmRefreshBacking\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmPrevWidth\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmPrevHeight\fP"
.br
.ti -1c
.RI "\fBSelectedRegion\fP \fBmInitialSelection\fP"
.br
.ti -1c
.RI "std::vector< \fBbool\fP > * \fBmInitialTrackSelection\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmSelStartValid\fP"
.br
.ti -1c
.RI "double \fBmSelStart\fP"
.br
.ti -1c
.RI "enum \fBTrackPanel::eFreqSelMode\fP \fBmFreqSelMode\fP"
.br
.ti -1c
.RI "double \fBmFreqSelPin\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBWaveTrack\fP * \fBmFreqSelTrack\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBSpectrumAnalyst\fP > \fBmFrequencySnapper\fP"
.br
.ti -1c
.RI "double \fBmLastF0\fP"
.br
.ti -1c
.RI "double \fBmLastF1\fP"
.br
.ti -1c
.RI "\fBTrack\fP * \fBmCapturedTrack\fP"
.br
.ti -1c
.RI "\fBEnvelope\fP * \fBmCapturedEnvelope\fP"
.br
.ti -1c
.RI "\fBWaveClip\fP * \fBmCapturedClip\fP"
.br
.ti -1c
.RI "TrackClipArray \fBmCapturedClipArray\fP"
.br
.ti -1c
.RI "TrackArray \fBmTrackExclusions\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmCapturedClipIsSelection\fP"
.br
.ti -1c
.RI "\fBWaveTrackLocation\fP \fBmCapturedTrackLocation\fP"
.br
.ti -1c
.RI "wxRect \fBmCapturedTrackLocationRect\fP"
.br
.ti -1c
.RI "wxRect \fBmCapturedRect\fP"
.br
.ti -1c
.RI "wxBaseArrayDouble \fBmSlideSnapFromPoints\fP"
.br
.ti -1c
.RI "wxBaseArrayDouble \fBmSlideSnapToPoints\fP"
.br
.ti -1c
.RI "wxArrayInt \fBmSlideSnapLinePixels\fP"
.br
.ti -1c
.RI "double \fBmHSlideAmount\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmDidSlideVertically\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmRedrawAfterStop\fP"
.br
.ti -1c
.RI "wxMouseEvent \fBmLastMouseEvent\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmMouseClickX\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmMouseClickY\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmMouseMostRecentX\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmMouseMostRecentY\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmZoomStart\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmZoomEnd\fP"
.br
.ti -1c
.RI "\fBSnapManager\fP * \fBmSnapManager\fP"
.br
.ti -1c
.RI "wxInt64 \fBmSnapLeft\fP"
.br
.ti -1c
.RI "wxInt64 \fBmSnapRight\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmSnapPreferRightEdge\fP"
.br
.ti -1c
.RI "\fBNumericConverter\fP \fBmConverter\fP"
.br
.ti -1c
.RI "\fBWaveTrack\fP * \fBmDrawingTrack\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmDrawingTrackTop\fP"
.br
.ti -1c
.RI "\fBsampleCount\fP \fBmDrawingStartSample\fP"
.br
.ti -1c
.RI "\fBsampleCount\fP \fBmDrawingLastDragSample\fP"
.br
.ti -1c
.RI "float \fBmDrawingLastDragSampleValue\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmInitialMinimized\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmInitialTrackHeight\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmInitialActualHeight\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmInitialUpperTrackHeight\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmInitialUpperActualHeight\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmAutoScrolling\fP"
.br
.ti -1c
.RI "enum \fBMouseCaptureEnum\fP \fBmMouseCapture\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmAdjustSelectionEdges\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmSlideUpDownOnly\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmCircularTrackNavigation\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmMoveUpThreshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmMoveDownThreshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmRearrangeCount\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmScrubToken\fP"
.br
.ti -1c
.RI "wxLongLong \fBmScrubStartClockTimeMillis\fP"
.br
.ti -1c
.RI "wxCoord \fBmScrubStartPosition\fP"
.br
.ti -1c
.RI "double \fBmMaxScrubSpeed\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmScrubSpeedDisplayCountdown\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmScrubHasFocus\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmScrubSeekPress\fP"
.br
.ti -1c
.RI "wxRect \fBmLastScrubRect\fP"
.br
.ti -1c
.RI "wxRect \fBmNextScrubRect\fP"
.br
.ti -1c
.RI "wxString \fBmLastScrubSpeedText\fP"
.br
.ti -1c
.RI "wxString \fBmNextScrubSpeedText\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBmSmoothScrollingScrub\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmLogMaxScrubSpeed\fP"
.br
.ti -1c
.RI "wxCursor * \fBmArrowCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmPencilCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmSelectCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmResizeCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmSlideCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmEnvelopeCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmSmoothCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmZoomInCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmZoomOutCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmLabelCursorLeft\fP"
.br
.ti -1c
.RI "wxCursor * \fBmLabelCursorRight\fP"
.br
.ti -1c
.RI "wxCursor * \fBmRearrangeCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmDisabledCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmAdjustLeftSelectionCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmAdjustRightSelectionCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmBottomFrequencyCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmTopFrequencyCursor\fP"
.br
.ti -1c
.RI "wxCursor * \fBmBandWidthCursor\fP"
.br
.ti -1c
.RI "wxMenu * \fBmWaveTrackMenu\fP"
.br
.ti -1c
.RI "size_t \fBmChannelItemsInsertionPoint\fP"
.br
.ti -1c
.RI "wxMenu * \fBmNoteTrackMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmTimeTrackMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmLabelTrackMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmRateMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmFormatMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmLabelTrackInfoMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmRulerWaveformMenu\fP"
.br
.ti -1c
.RI "wxMenu * \fBmRulerSpectrumMenu\fP"
.br
.ti -1c
.RI "\fBTrack\fP * \fBmPopupMenuTarget\fP"
.br
.ti -1c
.RI "\fBTrackPanelAx\fP * \fBmAx\fP"
.br
.ti -1c
.RI "wxString \fBmSoloPref\fP"
.br
.ti -1c
.RI "double \fBmVertScrollRemainder\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBTrackPanelAx\fP"
.br
.ti -1c
.RI "class \fBScreenshotCommand\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBTrackPanel\fP class coordinates updates and operations on the main part of the screen which contains multiple tracks\&. 

It uses many other classes, but in particular it uses the \fBTrackInfo\fP class to draw the controls area on the left of a track, and the \fBTrackArtist\fP class to draw the actual waveforms\&.
.PP
Note that in some of the older code here, e\&.g\&., \fBGetLabelWidth()\fP, 'Label' means the \fBTrackInfo\fP plus the vertical ruler\&. Confusing relative to \fBLabelTrack\fP labels\&.
.PP
The \fBTrackPanel\fP manages multiple tracks and their TrackInfos\&.
.PP
Note that with stereo tracks there will be one \fBTrackInfo\fP being used by two wavetracks\&. 
.PP
Definition at line 128 of file TrackPanel\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBTrackPanel::eFreqSelMode\fP\fC [protected]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFREQ_SEL_INVALID \fP\fP
.TP
\fB\fIFREQ_SEL_SNAPPING_CENTER \fP\fP
.TP
\fB\fIFREQ_SEL_PINNED_CENTER \fP\fP
.TP
\fB\fIFREQ_SEL_DRAG_CENTER \fP\fP
.TP
\fB\fIFREQ_SEL_FREE \fP\fP
.TP
\fB\fIFREQ_SEL_TOP_FREE \fP\fP
.TP
\fB\fIFREQ_SEL_BOTTOM_FREE \fP\fP
.PP
Definition at line 624 of file TrackPanel\&.h\&.
.SS "enum \fBTrackPanel::MouseCaptureEnum\fP\fC [protected]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIIsUncaptured \fP\fP
.TP
\fB\fIIsVZooming \fP\fP
.TP
\fB\fIIsClosing \fP\fP
.TP
\fB\fIIsSelecting \fP\fP
.TP
\fB\fIIsAdjustingLabel \fP\fP
.TP
\fB\fIIsSelectingLabelText \fP\fP
.TP
\fB\fIIsAdjustingSample \fP\fP
.TP
\fB\fIIsResizing \fP\fP
.TP
\fB\fIIsResizingBetweenLinkedTracks \fP\fP
.TP
\fB\fIIsResizingBelowLinkedTracks \fP\fP
.TP
\fB\fIIsRearranging \fP\fP
.TP
\fB\fIIsSliding \fP\fP
.TP
\fB\fIIsEnveloping \fP\fP
.TP
\fB\fIIsMuting \fP\fP
.TP
\fB\fIIsSoloing \fP\fP
.TP
\fB\fIIsGainSliding \fP\fP
.TP
\fB\fIIsPanSliding \fP\fP
.TP
\fB\fIIsMinimizing \fP\fP
.TP
\fB\fIWasOverCutLine \fP\fP
.TP
\fB\fIIsPopping \fP\fP
.TP
\fB\fIIsZooming \fP\fP
.PP
Definition at line 755 of file TrackPanel\&.h\&.
.SS "enum \fBTrackPanel::SelectionBoundary\fP\fC [protected]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISBNone \fP\fP
.TP
\fB\fISBLeft \fP\fP
.TP
\fB\fISBRight \fP\fP
.TP
\fB\fISBBottom \fP\fP
.TP
\fB\fISBTop \fP\fP
.TP
\fB\fISBCenter \fP\fP
.TP
\fB\fISBWidth \fP\fP
.PP
Definition at line 731 of file TrackPanel\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "TrackPanel::TrackPanel (wxWindow * parent, wxWindowID id, \fBconst\fP wxPoint & pos, \fBconst\fP wxSize & size, \fBTrackList\fP * tracks, \fBViewInfo\fP * viewInfo, \fBTrackPanelListener\fP * listener, \fBAdornedRulerPanel\fP * ruler)"

.PP
Definition at line 448 of file TrackPanel\&.cpp\&.
.SS "TrackPanel::~TrackPanel ()\fC [virtual]\fP"

.PP
Definition at line 623 of file TrackPanel\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP TrackPanel::AddClipsToCaptured (\fBTrack\fP * t, \fBbool\fP withinSelection)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 4041 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::AddClipsToCaptured (\fBTrack\fP * t, double t0, double t1)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 4051 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::BuildCommonDropMenuItems (wxMenu * menu)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Populates the track pop-down menu with the common set of initial items\&. Ensures that all pop-down menus start with Name, and the commands for moving the track around, via a single set of c ode\&. 
.PP
\fBParameters:\fP
.RS 4
\fImenu\fP the menu to add the commands to\&. 
.RE
.PP

.PP
Definition at line 775 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::BuildMenus (\fBvoid\fP)\fC [virtual]\fP"

.PP
Definition at line 691 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::BuildVRulerMenuItems (wxMenu * menu, \fBint\fP firstId, \fBconst\fP wxArrayString & names)\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 793 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::CalculateRearrangingThresholds (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
Figure out how far the user must drag the mouse up or down before the track will swap with the one above or below 
.PP
Definition at line 5665 of file TrackPanel\&.cpp\&.
.SS "\fBTrackPanel::SelectionBoundary\fP TrackPanel::ChooseBoundary (wxMouseEvent & event, \fBconst\fP \fBTrack\fP * pTrack, \fBconst\fP wxRect & rect, \fBbool\fP mayDragWidth, \fBbool\fP onlyWithinSnapDistance, double * pPinValue = \fC\fBNULL\fP\fP) const\fC [protected]\fP"

.PP
Definition at line 3521 of file TrackPanel\&.cpp\&.
.SS "\fBTrackPanel::SelectionBoundary\fP TrackPanel::ChooseTimeBoundary (double selend, \fBbool\fP onlyWithinSnapDistance, wxInt64 * pPixelDist = \fC\fBNULL\fP\fP, double * pPinValue = \fC\fBNULL\fP\fP) const\fC [protected]\fP"

.PP
Definition at line 3481 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::CloseFunc (\fBTrack\fP * t, wxRect rect, \fBint\fP x, \fBint\fP y)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5767 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::ContinueScrubbing (wxCoord position, \fBbool\fP hasFocus, \fBbool\fP seek)\fC [protected]\fP"

.PP
Definition at line 2416 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DeleteMenus (\fBvoid\fP)\fC [virtual]\fP"

.PP
Definition at line 804 of file TrackPanel\&.cpp\&.
.SS "\fBint\fP TrackPanel::DetermineToolToUse (\fBToolsToolBar\fP * pTtb, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
If we are in multimode, looks at the type of track and where we are on it to determine what object we are hovering over and hence what tool to use\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpTtb\fP - A pointer to the tools tool bar 
.br
\fIevent\fP - Mouse event, with info about position and what mouse buttons are down\&. 
.RE
.PP

.PP
Definition at line 7064 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DisplaySelection ()\fC [virtual]\fP"

.PP
Displays the bounds of the selection in the status bar\&. 
.PP
Definition at line 9568 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DoDrawCursor (wxDC & dc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1367 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DoDrawIndicator (wxDC & dc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
draws the green line on the tracks to show playback position 
.PP
Definition at line 1263 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DoDrawScrubSpeed (wxDC & dc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 7685 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DoSlide (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
Slide tracks horizontally, or slide clips horizontally or vertically (e\&.g\&. moving clips between tracks)\&. 
.PP
Definition at line 4110 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DoZoomInOut (wxMouseEvent & event, \fBint\fP trackLeftEdge)\fC [protected]\fP, \fC [virtual]\fP"
This handles normal Zoom In/Out, if you just clicked; IOW, if you were NOT dragging to zoom an area\&. 
.PP
\fBTodo\fP
.RS 4
MAGIC NUMBER: We've got several in this method\&. 
.RE
.PP

.PP
Definition at line 4522 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DragZoom (wxMouseEvent & event, \fBint\fP trackLeftEdge)\fC [protected]\fP, \fC [virtual]\fP"
This actually sets the Zoom value when you're done doing a drag zoom\&. 
.PP
Definition at line 4506 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawBordersAroundTrack (\fBTrack\fP * t, wxDC * dc, \fBconst\fP wxRect & rect, \fBconst\fP \fBint\fP labelw, \fBconst\fP \fBint\fP vrul)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 8598 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawEverythingElse (wxDC * dc, \fBconst\fP wxRegion & region, \fBconst\fP wxRect & clip)\fC [protected]\fP, \fC [virtual]\fP"
Draws 'Everything else'\&. In particular it draws:
.IP "\(bu" 2
Drop shadow for tracks and vertical rulers\&.
.IP "\(bu" 2
Zooming Indicators\&.
.IP "\(bu" 2
Fills in space below the tracks\&. 
.PP

.PP
Definition at line 7389 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawOutside (\fBTrack\fP * t, wxDC * dc, \fBconst\fP wxRect & rec, \fBconst\fP wxRect & trackRect)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 7752 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawOutsideOfTrack (\fBTrack\fP * t, wxDC * dc, \fBconst\fP wxRect & rect)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 7880 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawOverlays (\fBbool\fP repaint)\fC [virtual]\fP"

.PP
Definition at line 7922 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawQuickPlayIndicator (\fBint\fP x, \fBbool\fP snapped = \fC\fBfalse\fP\fP)\fC [virtual]\fP"

.PP
Definition at line 1124 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawShadow (\fBTrack\fP * t, wxDC * dc, \fBconst\fP wxRect & rect)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 8629 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawTracks (wxDC * dc)\fC [protected]\fP, \fC [virtual]\fP"
Draw the actual track areas\&. We only draw the borders and the little buttons and menues and whatnot here, the actual contents of each track are drawn by the \fBTrackArtist\fP\&. 
.PP
Definition at line 7357 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::DrawZooming (wxDC * dc, \fBconst\fP wxRect & clip)\fC [protected]\fP, \fC [virtual]\fP"
Draw zooming indicator that shows the region that will be zoomed into when the user clicks and drags with a zoom cursor\&. Handles both vertical and horizontal zooming\&. 
.PP
Definition at line 7726 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::EnsureVisible (\fBTrack\fP * t)\fC [virtual]\fP"

.PP
Definition at line 8545 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ExtendFreqSelection (\fBint\fP mouseYCoordinate, \fBint\fP trackTopEdge, \fBint\fP trackHeight)\fC [protected]\fP"

.PP
Definition at line 3041 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ExtendSelection (\fBint\fP mouseXCoordinate, \fBint\fP trackLeftEdge, \fBTrack\fP * pTrack)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Extend the existing selection\&. 
.PP
Definition at line 2807 of file TrackPanel\&.cpp\&.
.SS "float TrackPanel::FindSampleEditingLevel (wxMouseEvent & event, double dBRange, double t0)\fC [protected]\fP"

.PP
Definition at line 4938 of file TrackPanel\&.cpp\&.
.SS "double TrackPanel::FindScrubSpeed (double timeAtMouse) const\fC [protected]\fP"

.PP
Definition at line 2230 of file TrackPanel\&.cpp\&.
.SS "double TrackPanel::FindSeekSpeed (double timeAtMouse) const\fC [protected]\fP"

.PP
Definition at line 2270 of file TrackPanel\&.cpp\&.
.SS "\fBTrack\fP * TrackPanel::FindTrack (\fBint\fP mouseX, \fBint\fP mouseY, \fBbool\fP label, \fBbool\fP link, wxRect * trackRect = \fC\fBNULL\fP\fP)\fC [protected]\fP, \fC [virtual]\fP"
Determines which track is under the mouse 
.PP
\fBParameters:\fP
.RS 4
\fImouseX\fP - mouse X position\&. 
.br
\fImouseY\fP - mouse Y position\&. 
.br
\fIlabel\fP - true iff the X Y position is relative to side-panel with the labels in it\&. 
.br
\fIlink\fP - true iff we should consider a hit in any linked track as a hit\&. 
.br
\fI*trackRect\fP - returns track rectangle\&. 
.RE
.PP

.PP
Definition at line 9447 of file TrackPanel\&.cpp\&.
.SS "wxRect TrackPanel::FindTrackRect (\fBTrack\fP * target, \fBbool\fP label)\fC [protected]\fP, \fC [virtual]\fP"
This finds the rectangle of a given track, either the of the label 'adornment' or the track itself 
.PP
Definition at line 9533 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ForwardEventToEnvelope (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
The \fBEnvelope\fP class actually handles things at the mouse event level, so we have to forward the events over\&. \fBEnvelope\fP will then tell us whether or not we need to redraw\&. 
.PP
Definition at line 3762 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ForwardEventToTimeTrackEnvelope (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
We've established we're a time track\&. send events for its envelope\&. 
.PP
Definition at line 3663 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ForwardEventToWaveTrackEnvelope (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
We've established we're a wave track\&. send events for its envelope\&. 
.PP
Definition at line 3688 of file TrackPanel\&.cpp\&.
.SS "wxInt64 TrackPanel::FrequencyToPosition (\fBconst\fP \fBWaveTrack\fP * wt, double frequency, wxInt64 trackTopEdge, \fBint\fP trackHeight) const\fC [protected]\fP"

.PP
Converts a frequency to screen y position\&. 
.PP
Definition at line 3455 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::GainFunc (\fBTrack\fP * t, wxRect rect, wxMouseEvent & event, \fBint\fP x, \fBint\fP y)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5685 of file TrackPanel\&.cpp\&.
.SS "std::pair< wxRect, \fBbool\fP > TrackPanel::GetCursorRectangle ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1322 of file TrackPanel\&.cpp\&.
.SS "\fBTrack\fP * TrackPanel::GetFirstSelectedTrack ()\fC [virtual]\fP"

.PP
Definition at line 8521 of file TrackPanel\&.cpp\&.
.SS "\fBTrack\fP * TrackPanel::GetFocusedTrack ()\fC [virtual]\fP"

.PP
Definition at line 9578 of file TrackPanel\&.cpp\&.
.SS "std::pair< wxRect, \fBbool\fP > TrackPanel::GetIndicatorRectangle ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1210 of file TrackPanel\&.cpp\&.
.SS "virtual \fBint\fP TrackPanel::GetLabelWidth () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 511 of file TrackPanel\&.h\&.
.SS "virtual \fBint\fP TrackPanel::GetLeftOffset () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Definition at line 171 of file TrackPanel\&.h\&.
.SS "\fBTrackPanelListener\fP* TrackPanel::GetListener ()\fC [inline]\fP"

.PP
Definition at line 518 of file TrackPanel\&.h\&.
.SS "\fBMixerBoard\fP * TrackPanel::GetMixerBoard ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1608 of file TrackPanel\&.cpp\&.
.SS "double TrackPanel::GetMostRecentXPos ()\fC [virtual]\fP"

.PP
Definition at line 7290 of file TrackPanel\&.cpp\&.
.SS "\fBAudacityProject\fP * TrackPanel::GetProject () const\fC [virtual]\fP"
Gets the pointer to the \fBAudacityProject\fP that goes with this track panel\&. 
.PP
Definition at line 992 of file TrackPanel\&.cpp\&.
.SS "\fBAdornedRulerPanel\fP* TrackPanel::GetRuler ()\fC [inline]\fP"

.PP
Definition at line 519 of file TrackPanel\&.h\&.
.SS "double TrackPanel::GetScreenEndTime () const\fC [virtual]\fP"

.PP
Definition at line 1165 of file TrackPanel\&.cpp\&.
.SS "std::pair< wxRect, \fBbool\fP > TrackPanel::GetScrubSpeedRectangle ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 7647 of file TrackPanel\&.cpp\&.
.SS "\fBTrackInfo\fP* TrackPanel::GetTrackInfo ()\fC [inline]\fP"

.PP
Definition at line 568 of file TrackPanel\&.h\&.
.SS "\fBTrackList\fP* TrackPanel::GetTracks ()\fC [inline]\fP"

.PP
Definition at line 516 of file TrackPanel\&.h\&.
.SS "\fBvoid\fP TrackPanel::GetTracksUsableArea (\fBint\fP * width, \fBint\fP * height) const\fC [virtual]\fP"

.PP
Definition at line 980 of file TrackPanel\&.cpp\&.
.SS "\fBViewInfo\fP* TrackPanel::GetViewInfo ()\fC [inline]\fP"

.PP
Definition at line 517 of file TrackPanel\&.h\&.
.SS "virtual \fBint\fP TrackPanel::GetVRulerOffset () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 509 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::GetVRulerWidth () const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9562 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleAltKey (\fBbool\fP down)\fC [virtual]\fP"

.PP
Definition at line 1575 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleCenterFrequencyClick (\fBbool\fP shiftDown, \fBTrack\fP * pTrack, double value)\fC [protected]\fP"

.PP
Definition at line 1803 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleCenterFrequencyCursor (\fBbool\fP shiftDown, wxString & tip, \fBconst\fP wxCursor ** ppCursor)\fC [protected]\fP"

.PP
Definition at line 1783 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleClosing (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5206 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleControlKey (\fBbool\fP down)\fC [virtual]\fP"

.PP
Definition at line 1587 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleCursor (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
\fBTrackPanel::HandleCursor( )\fP sets the cursor drawn at the mouse location\&. As this procedure checks which region the mouse is over, it is appropriate to establish the message in the status bar\&. 
.PP
Definition at line 1996 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleCursorForLastMouseEvent ()\fC [virtual]\fP"

.PP
Definition at line 1603 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleEnvelope (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
HandleEnvelope gets called when the user is changing the amplitude envelope on a track\&. 
.PP
Definition at line 3622 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleEscapeKey (\fBbool\fP down)\fC [virtual]\fP"

.PP
Definition at line 1516 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleGlyphDragRelease (\fBLabelTrack\fP * lTrack, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Event has happened on a track and it has been determined to be a label track\&. 
.PP
\fBTodo\fP
.RS 4
This method is one of a large number of methods in \fBTrackPanel\fP which suitably modified belong in other classes\&. 
.RE
.PP

.PP
Definition at line 6871 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleLabelClick (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This handles when the user clicks on the 'Label' area of a track, ie the part with all the buttons and the drop down menu, etc\&. 
.PP
Definition at line 5476 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::HandleLabelTrackClick (\fBLabelTrack\fP * lTrack, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Event has happened on a track and it has been determined to be a label track\&. 
.PP
\fBTodo\fP
.RS 4
This method is one of a large number of methods in \fBTrackPanel\fP which suitably modified belong in other classes\&. 
.RE
.PP

.PP
Definition at line 6798 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleMinimizing (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5319 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleMutingSoloing (wxMouseEvent & event, \fBbool\fP solo)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Handle when the mute or solo button is pressed for some track\&. 
.PP
Definition at line 5283 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandlePageDownKey ()\fC [virtual]\fP"

.PP
Definition at line 1598 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandlePageUpKey ()\fC [virtual]\fP"

.PP
Definition at line 1593 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandlePopping (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5252 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleRearrange (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
The user is dragging one of the tracks: change the track order accordingly 
.PP
Definition at line 5603 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleResize (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
HandleResize gets called when:
.IP "\(bu" 2
A mouse-down event occurs in the 'resize region' of a track, i\&.e\&. to change its vertical height\&.
.IP "\(bu" 2
A mouse event occurs and mIsResizing==true (i\&.e\&. while the resize is going on) 
.PP

.PP
Definition at line 6128 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleResizeButtonUp (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This happens when the button is released from a drag\&. Since we actually took care of resizing the track when we got drag events, all we have to do here is clean up\&. We also modify the undo state (the action doesn't become undo-able, but it gets merged with the previous undo-able event)\&. 
.PP
Definition at line 5906 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleResizeClick (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
ButtonDown means they just clicked and haven't released yet\&. We use this opportunity to save which track they clicked on, and the initial height of the track, so as they drag we can update the track size\&. 
.PP
Definition at line 5802 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleResizeDrag (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
Resize dragging means that the mouse button IS down and has moved from its initial location\&. By the time we get here, we have already received a ButtonDown() event and saved the track being resized in mCapturedTrack\&. 
.PP
Definition at line 5917 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSampleEditing (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This handles adjusting individual samples by hand using the draw tool(s)
.PP
There are several member data structure for handling drawing:
.IP "\(bu" 2
mDrawingTrack: keeps track of which track you clicked down on, so drawing doesn't jump to a NEW track
.IP "\(bu" 2
mDrawingTrackTop: The top position of the drawing track--makes drawing easier\&.
.IP "\(bu" 2
mDrawingStartSample: The sample you clicked down on, so that you can hold it steady
.IP "\(bu" 2
mDrawingLastDragSample: When drag-drawing, this keeps track of the last sample you dragged over, so it can smoothly redraw samples that got skipped over
.IP "\(bu" 2
mDrawingLastDragSampleValue: The value of the last 
.PP

.PP
Definition at line 5193 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSampleEditingButtonUp (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5169 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSampleEditingClick (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
We're in a track view and zoomed enough to see the samples\&. Someone has just clicked the mouse\&. What do we do? 
.PP
\fBTodo\fP
.RS 4
Should mCapturedTrack take the place of mDrawingTrack?? 
.RE
.PP

.PP
Definition at line 4969 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSampleEditingDrag (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5094 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSelect (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This method handles various ways of starting and extending selections\&. These are the selections you make by clicking and dragging over a waveform\&. 
.PP
Definition at line 2098 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleShiftKey (\fBbool\fP down)\fC [virtual]\fP"

.PP
Definition at line 1581 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSlide (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 3774 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleSliders (wxMouseEvent & event, \fBbool\fP pan)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5354 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleTextDragRelease (\fBLabelTrack\fP * lTrack, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Event has happened on a track and it has been determined to be a label track\&. 
.PP
\fBTodo\fP
.RS 4
This method is one of a large number of methods in \fBTrackPanel\fP which suitably modified belong in other classes\&. 
.RE
.PP

.PP
Definition at line 6898 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::HandleTrackLocationMouseEvent (\fBWaveTrack\fP * track, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 6669 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleTrackSpecificMouseEvent (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 6947 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleVZoom (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
Vertical zooming (triggered by clicking in the vertical ruler) 
.PP
Definition at line 4541 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleVZoomButtonUp (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
VZoom Button up\&. There are three cases:
.IP "\(bu" 2
Drag-zooming; we already have a min and max
.IP "\(bu" 2
Zoom out; ensure we don't go too small\&.
.IP "\(bu" 2
Zoom in; ensure we don't go too large\&. 
.PP

.PP
Definition at line 4603 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleVZoomClick (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
VZoom click\&. 
.PP
Definition at line 4556 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleVZoomDrag (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
VZoom drag\&. 
.PP
Definition at line 4584 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleWaveTrackVZoom (\fBWaveTrack\fP * track, \fBbool\fP shiftDown, \fBbool\fP rightUp)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 4649 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleWaveTrackVZoom (\fBTrackList\fP * tracks, \fBconst\fP wxRect & rect, \fBint\fP zoomStart, \fBint\fP zoomEnd, \fBWaveTrack\fP * track, \fBbool\fP shiftDown, \fBbool\fP rightUp, \fBbool\fP fixedMousePoint)\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 4661 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleWheelRotation (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Handle mouse wheel rotation (for zoom in/out, vertical and horizontal scrolling) 
.PP
Definition at line 6143 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleWheelRotationInVRuler (wxMouseEvent & event, \fBTrack\fP * pTrack, \fBconst\fP wxRect & rect)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 6265 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleZoom (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This method takes care of our different zoom possibilities\&. It is possible for a user to just 'zoom in' or 'zoom out,' but it is also possible for a user to drag and select an area that he or she wants to be zoomed in on\&. We use mZoomStart and mZoomEnd to track the beggining and end of such a zoom area\&. Note that the \fBViewInfo\fP member mViewInfo actually keeps track of our zoom constant, so we achieve zooming by altering the zoom constant and forcing a refresh\&. 
.PP
Definition at line 4420 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleZoomButtonUp (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Zoom button up\&. 
.PP
Definition at line 4473 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleZoomClick (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Zoom button down, record the position\&. 
.PP
Definition at line 4436 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::HandleZoomDrag (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Zoom drag\&. 
.PP
Definition at line 4453 of file TrackPanel\&.cpp\&.
.SS "virtual \fBbool\fP TrackPanel::HasSoloButton ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 558 of file TrackPanel\&.h\&.
.SS "\fBvoid\fP TrackPanel::HighlightFocusedTrack (wxDC * dc, \fBconst\fP wxRect & rect)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Draw a three-level highlight gradient around the focused track\&. 
.PP
Definition at line 7999 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::HitTestEnvelope (\fBTrack\fP * track, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
method that tells us if the mouse event landed on an envelope boundary\&. 
.PP
Definition at line 7151 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::HitTestSamples (\fBTrack\fP * track, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
method that tells us if the mouse event landed on an editable sample 
.PP
Definition at line 7219 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::HitTestSlide (\fBTrack\fP * track, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
method that tells us if the mouse event landed on a time-slider that allows us to time shift the sequence\&. 
.PP
Definition at line 7270 of file TrackPanel\&.cpp\&.
.SS "\fBint\fP TrackPanel::IdOfFormat (\fBint\fP format)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Converts a format enumeration to a wxWidgets menu item Id\&. 
.PP
Definition at line 9015 of file TrackPanel\&.cpp\&.
.SS "\fBint\fP TrackPanel::IdOfRate (\fBint\fP rate)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Converts a sampling rate to a wxWidgets menu item id\&. 
.PP
Definition at line 9074 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::IsAudioActive ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1623 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::IsDragZooming (\fBint\fP zoomStart, \fBint\fP zoomEnd)\fC [static]\fP, \fC [protected]\fP"

.PP
Determines if drag zooming is active\&. 
.PP
Definition at line 4492 of file TrackPanel\&.cpp\&.
.SS "virtual \fBbool\fP TrackPanel::IsDragZooming ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 396 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::IsMouseCaptured ()\fC [virtual]\fP"

.PP
Determines if the a modal tool is active\&. 
.PP
Definition at line 4498 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::IsOverCutline (\fBWaveTrack\fP * track, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 6772 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::IsSampleEditingPossible (wxMouseEvent & event, \fBTrack\fP * t)\fC [protected]\fP, \fC [virtual]\fP"
Determines if we can edit samples in a wave track\&. Also pops up warning messages in certain cases where we can't\&. 
.PP
\fBReturns:\fP
.RS 4
true if we can edit the samples, false otherwise\&. 
.RE
.PP

.PP
Definition at line 4896 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::IsScrubbing ()\fC [protected]\fP"

.PP
Definition at line 2309 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::IsUnsafe ()\fC [protected]\fP, \fC [virtual]\fP"
Used to determine whether it is safe or not to perform certain edits at the moment\&. 
.PP
\fBReturns:\fP
.RS 4
true if audio is being recorded or is playing\&. 
.RE
.PP

.PP
Definition at line 1618 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MakeParentModifyState (\fBbool\fP bWantsAutoSave)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1506 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MakeParentPushState (\fBconst\fP wxString & desc, \fBconst\fP wxString & shortDesc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1501 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MakeParentPushState (\fBconst\fP wxString & desc, \fBconst\fP wxString & shortDesc, \fBUndoPush\fP flags)\fC [protected]\fP, \fC [virtual]\fP"
Makes our Parent (well, whoever is listening to us) push their state\&. this causes application state to be preserved on a stack for undo ops\&. 
.PP
Definition at line 1495 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MakeParentRedrawScrollbars ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1511 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MarkScrubStart (wxCoord xx, \fBbool\fP smoothScrolling)\fC [protected]\fP"

.PP
Definition at line 2325 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::MaybeStartScrubbing (wxMouseEvent & event)\fC [protected]\fP"

.PP
Definition at line 2342 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MaySetOnDemandTip (\fBTrack\fP * t, wxString & tip)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1766 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::MinimizeFunc (\fBTrack\fP * t, wxRect rect, \fBint\fP x, \fBint\fP f)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5751 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::MoveSnappingFreqSelection (\fBint\fP mouseYCoordinate, \fBint\fP trackTopEdge, \fBint\fP trackHeight, \fBTrack\fP * pTrack)\fC [protected]\fP"

.PP
Definition at line 2982 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::MuteSoloFunc (\fBTrack\fP * t, wxRect rect, \fBint\fP x, \fBint\fP y, \fBbool\fP solo)\fC [protected]\fP, \fC [virtual]\fP"
Mute or solo the given track (t)\&. If solo is true, we're soloing, otherwise we're muting\&. Basically, check and see whether x and y fall within the area of the appropriate button\&. 
.PP
Definition at line 5718 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnActivateOrDeactivateApp (wxActivateEvent & event)\fC [virtual]\fP"

.PP
Definition at line 9616 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnCaptureKey (wxCommandEvent & event)\fC [virtual]\fP"

.PP
\fBFilter\fP captured keys typed into LabelTracks\&. 
.PP
Definition at line 6383 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnCaptureLost (wxMouseCaptureLostEvent & event)\fC [virtual]\fP"

.PP
Should handle the case when the mouse capture is lost\&. 
.PP
Definition at line 6523 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnChangeOctave (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This only applies to MIDI tracks\&. Presumably, it shifts the whole sequence by an octave\&. 
.PP
Definition at line 9308 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnChannelChange (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 8688 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnChar (wxKeyEvent & event)\fC [virtual]\fP"

.PP
Definition at line 6461 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnContextMenu (wxContextMenuEvent & event)\fC [virtual]\fP"

.PP
Definition at line 5467 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnFirstTrack ()\fC [virtual]\fP"

.PP
Definition at line 8295 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnFormatChange (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
Handles the selection from the \fBFormat\fP submenu of the track menu\&. 
.PP
Definition at line 8967 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnKeyDown (wxKeyEvent & event)\fC [virtual]\fP"

.PP
Definition at line 6396 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnKeyUp (wxKeyEvent & event)\fC [virtual]\fP"

.PP
Definition at line 6499 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnKillFocus (wxFocusEvent & event)\fC [virtual]\fP"

.PP
Definition at line 9607 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnLastTrack ()\fC [virtual]\fP"

.PP
Definition at line 8311 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnMergeStereo (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Merge two tracks into one stereo track ?? 
.PP
Definition at line 8797 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnMouseEvent (wxMouseEvent & event)\fC [virtual]\fP"
This handles just generic mouse events\&. Then, based on our current state, we forward the mouse events to various interested parties\&. 
.PP
Definition at line 6536 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnMoveTrack (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Move a track up, down, to top or to bottom\&. 
.PP
Definition at line 9287 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnNextTrack (\fBbool\fP shift = \fC\fBfalse\fP\fP)\fC [virtual]\fP"
The following method moves to the next track, selecting and unselecting depending if you are on the start of a block or not\&. 
.PP
Definition at line 8195 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnPaint (wxPaintEvent & event)\fC [virtual]\fP"
AS: \fBOnPaint( )\fP is called during the normal course of completing a repaint operation\&. 
.PP
Reimplemented in \fBTrackPanel2\fP\&.
.PP
Definition at line 1428 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnPrevTrack (\fBbool\fP shift = \fC\fBfalse\fP\fP)\fC [virtual]\fP"
The following method moves to the previous track selecting and unselecting depending if you are on the start of a block or not\&. 
.PP
\fBTodo\fP
.RS 4
Merge related methods, \fBTrackPanel::OnPrevTrack\fP and \fBTrackPanel::OnNextTrack\fP\&. 
.RE
.PP

.PP
Definition at line 8087 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnRateChange (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
This method handles the selection from the Rate submenu of the track menu, except for 'Other' (/see OnRateOther)\&. 
.PP
Definition at line 9058 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnRateOther (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
\fBTodo\fP
.RS 4
Remove artificial constants!! 
.RE
.PP
\fBTodo\fP
.RS 4
Make a real dialog box out of this!! 
.RE
.PP

.PP
Definition at line 9083 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSetDisplay (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"
Set the Display mode based on the menu choice in the \fBTrack\fP Menu\&. Note that gModes MUST BE IN THE SAME ORDER AS THE MENU CHOICES!! const wxChar *gModes[] = { wxT('waveform'), wxT('waveformDB'), wxT('spectrum'), wxT('pitch') }; 
.PP
Definition at line 8896 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSetFocus (wxFocusEvent & event)\fC [virtual]\fP"

.PP
Definition at line 9601 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSetFont (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9374 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSetName (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9324 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSetTimeTrackRange (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9161 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSize (wxSizeEvent & event)\fC [virtual]\fP"

.PP
\fBOnSize()\fP is called when the panel is resized\&. 
.PP
Definition at line 1416 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSpectrogramSettings (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 8872 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSpectrumScaleType (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9250 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSplitStereo (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Split a stereo track into two tracks\&.\&.\&. 
.PP
Definition at line 8731 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSplitStereoMono (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Split a stereo track into two mono tracks\&.\&.\&. 
.PP
Definition at line 8740 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnSwapChannels (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Swap the left and right channels of a stero track\&.\&.\&. 
.PP
Definition at line 8702 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTimer (wxTimerEvent & event)\fC [virtual]\fP"

.PP
AS: This gets called on our wx timer events\&. 
.PP
Definition at line 1013 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTimeTrackLin (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9199 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTimeTrackLog (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9208 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTimeTrackLogInt (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9217 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnToggle ()\fC [virtual]\fP"

.PP
Definition at line 8327 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTrackListResized (wxCommandEvent & event)\fC [virtual]\fP"

.PP
Definition at line 5441 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTrackListUpdated (wxCommandEvent & event)\fC [virtual]\fP"

.PP
Definition at line 5452 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnTrackMenu (\fBTrack\fP * t = \fC\fBNULL\fP\fP)\fC [virtual]\fP"

.PP
Definition at line 8364 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnVRulerMenu (\fBTrack\fP * t, wxMouseEvent * pEvent = \fC\fBNULL\fP\fP)\fC [virtual]\fP"

.PP
Definition at line 8471 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnWaveformScaleType (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9230 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnZoomFitVertical (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9280 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnZoomInVertical (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9270 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::OnZoomOutVertical (wxCommandEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 9275 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::PanFunc (\fBTrack\fP * t, wxRect rect, wxMouseEvent & event, \fBint\fP x, \fBint\fP y)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5700 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::PollIsSeeking ()\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2304 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::PopupFunc (\fBTrack\fP * t, wxRect rect, \fBint\fP x, \fBint\fP y)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5783 of file TrackPanel\&.cpp\&.
.SS "double TrackPanel::PositionToFrequency (\fBconst\fP \fBWaveTrack\fP * wt, \fBbool\fP maySnap, wxInt64 mouseYCoordinate, wxInt64 trackTopEdge, \fBint\fP trackHeight) const\fC [protected]\fP"
Converts a position (mouse Y coordinate) to frequency, in Hz\&. 
.PP
Definition at line 3430 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::Refresh (\fBbool\fP eraseBackground = \fC\fBtrue\fP\fP, \fBconst\fP wxRect * rect = \fC(\fBconst\fP wxRect *) \fBNULL\fP\fP)\fC [virtual]\fP"
This method overrides \fBRefresh()\fP of wxWindow so that the boolean play indictaor can be set to false, so that an old play indicator that is no longer there won't get XORed (to erase it), thus redrawing it on the \fBTrackPanel\fP 
.PP
Definition at line 7334 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::RefreshTrack (\fBTrack\fP * trk, \fBbool\fP refreshbacking = \fC\fBtrue\fP\fP)\fC [virtual]\fP"

.PP
Definition at line 7295 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ResetFreqSelectionPin (double hintFrequency, \fBbool\fP logF)\fC [protected]\fP"

.PP
Definition at line 3145 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ScrollDuringDrag ()\fC [protected]\fP, \fC [virtual]\fP"
We check on each timer tick to see if we need to scroll\&. Scrolling is handled by mListener, which is an interface to the window \fBTrackPanel\fP is embedded in\&. 
.PP
Definition at line 1089 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ScrollIntoView (double pos)\fC [virtual]\fP"

.PP
Definition at line 8345 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ScrollIntoView (\fBint\fP x)\fC [virtual]\fP"

.PP
Definition at line 8359 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SelectionHandleClick (wxMouseEvent & event, \fBTrack\fP * pTrack, wxRect rect)\fC [protected]\fP, \fC [virtual]\fP"
This method gets called when we're handling selection and the mouse was just clicked\&. 
.PP
Definition at line 2460 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SelectionHandleDrag (wxMouseEvent & event, \fBTrack\fP * clickedTrack)\fC [protected]\fP, \fC [virtual]\fP"
AS: If we're dragging to extend a selection (or actually, if the screen is scrolling while you're selecting), we handle it here\&. 
.PP
Definition at line 3318 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SelectNone ()\fC [virtual]\fP"

.PP
Definition at line 907 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SelectTrackLength (\fBTrack\fP * t)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 942 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SelectTracksByLabel (\fBLabelTrack\fP * t)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Select all tracks marked by the label track lt\&. 
.PP
Definition at line 918 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetCapturedTrack (\fBTrack\fP * t, enum \fBMouseCaptureEnum\fP MouseCapture = \fC\fBIsUncaptured\fP\fP)\fC [protected]\fP, \fC [virtual]\fP"
Remembers the track we clicked on and why we captured it\&. We also use this method to clear the record of the captured track, passing NULL as the track\&. 
.PP
Definition at line 893 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetCursorAndTipByTool (\fBint\fP tool, wxMouseEvent & event, wxString & tip)\fC [protected]\fP, \fC [virtual]\fP"
In this method we know what tool we are using, so set the cursor accordingly\&. 
.PP
Definition at line 1963 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetCursorAndTipWhenInLabel (\fBTrack\fP * t, wxMouseEvent & event, wxString & tip)\fC [protected]\fP, \fC [virtual]\fP"
When in the 'label' (\fBTrackInfo\fP or vertical ruler), we can either vertical zoom or re-order tracks\&. Dont't change cursor/tip to zoom if display is not waveform (either linear of dB) or Spectrum 
.PP
Definition at line 1678 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetCursorAndTipWhenInLabelTrack (\fBLabelTrack\fP * pLT, wxMouseEvent & event, wxString & tip)\fC [protected]\fP, \fC [virtual]\fP"
When in a label track, find out if we've hit anything that would cause a cursor change\&. 
.PP
Definition at line 1718 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetCursorAndTipWhenInVResizeArea (\fBbool\fP blinked, wxString & tip)\fC [protected]\fP, \fC [virtual]\fP"

.PP
When in the resize area we can adjust size or relative size\&. 
.PP
Definition at line 1700 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetCursorAndTipWhenSelectTool (\fBTrack\fP * t, wxMouseEvent & event, wxRect & rect, \fBbool\fP bMultiToolMode, wxString & tip, \fBconst\fP wxCursor ** ppCursor)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1829 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::SetCursorByActivity ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1633 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::SetCursorForCutline (\fBWaveTrack\fP * track, wxRect & rect, wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1665 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetFocusedTrack (\fBTrack\fP * t)\fC [virtual]\fP"

.PP
Definition at line 9583 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetMenuCheck (wxMenu & menu, \fBint\fP newId)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Puts a check mark at a given position in a menu\&. 
.PP
Definition at line 9033 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SetRate (\fBTrack\fP * pTrack, double rate)\fC [protected]\fP, \fC [virtual]\fP"
Sets the sample rate for a track, and if it is linked to another track, that one as well\&. 
.PP
Definition at line 8952 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::ShouldDrawScrubSpeed ()\fC [protected]\fP"

.PP
Definition at line 7525 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SnapCenterOnce (\fBconst\fP \fBWaveTrack\fP * pTrack, \fBbool\fP up)"

.PP
Definition at line 2903 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::SplitStereo (\fBbool\fP stereo)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Split a stereo track into two tracks\&.\&.\&. 
.PP
Definition at line 8749 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::StartFreqSelection (\fBint\fP mouseYCoordinate, \fBint\fP trackTopEdge, \fBint\fP trackHeight, \fBTrack\fP * pTrack)\fC [protected]\fP"

.PP
Definition at line 3024 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::StartSelection (\fBint\fP mouseXCoordinate, \fBint\fP trackLeftEdge)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reset our selection markers\&. 
.PP
Definition at line 2781 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::StartSlide (wxMouseEvent & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Prepare for sliding\&. 
.PP
Definition at line 3890 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::StartSnappingFreqSelection (\fBconst\fP \fBWaveTrack\fP * pTrack)\fC [protected]\fP"

.PP
Definition at line 2943 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::StopScrubbing ()"

.PP
Definition at line 2439 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::TimerUpdateIndicator (double playPos)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1172 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::TimerUpdateScrubbing (double playPos)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 7537 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::ToggleSpectralSelection ()"

.PP
Definition at line 3126 of file TrackPanel\&.cpp\&.
.SS "\fBbool\fP TrackPanel::TrackSelFunc (\fBTrack\fP * t, wxRect rect, \fBint\fP x, \fBint\fP y)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 5734 of file TrackPanel\&.cpp\&.
.SS "wxString TrackPanel::TrackSubText (\fBTrack\fP * t)\fC [protected]\fP, \fC [virtual]\fP"
Returns the string to be displayed in the track label indicating whether the track is mono, left, right, or stereo and what sample rate it's using\&. 
.PP
Definition at line 8654 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UndrawCursor (wxDC & dc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1344 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UndrawIndicator (wxDC & dc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 1223 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UndrawScrubSpeed (wxDC & dc)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 7664 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateAccessibility ()\fC [virtual]\fP"

.PP
Definition at line 2881 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdatePrefs ()\fC [virtual]\fP"

.PP
Definition at line 859 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateSelectionDisplay ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 2868 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateTrackVRuler (\fBTrack\fP * t)\fC [virtual]\fP"

.PP
Definition at line 8036 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateViewIfNoTracks ()\fC [virtual]\fP"

.PP
Definition at line 5231 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateVRuler (\fBTrack\fP * t)\fC [virtual]\fP"

.PP
Definition at line 8029 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateVRulers ()\fC [virtual]\fP"

.PP
Definition at line 8019 of file TrackPanel\&.cpp\&.
.SS "\fBvoid\fP TrackPanel::UpdateVRulerSize ()\fC [virtual]\fP"

.PP
Definition at line 8062 of file TrackPanel\&.cpp\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBScreenshotCommand\fP\fC [friend]\fP"

.PP
Definition at line 872 of file TrackPanel\&.h\&.
.SS "friend class \fBTrackPanelAx\fP\fC [friend]\fP"

.PP
Definition at line 860 of file TrackPanel\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBTrackPanel\fP *(* TrackPanel::FactoryFunction)(wxWindow *parent, wxWindowID id, \fBconst\fP wxPoint &pos, \fBconst\fP wxSize &\fBsize\fP, \fBTrackList\fP *tracks, \fBViewInfo\fP *viewInfo, \fBTrackPanelListener\fP *listener, \fBAdornedRulerPanel\fP *ruler) = TrackPanelFactory\fC [static]\fP"

.PP
Definition at line 522 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mAdjustLeftSelectionCursor\fC [protected]\fP"

.PP
Definition at line 832 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mAdjustRightSelectionCursor\fC [protected]\fP"

.PP
Definition at line 833 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mAdjustSelectionEdges\fC [protected]\fP"

.PP
Definition at line 787 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mArrowCursor\fC [protected]\fP"

.PP
Definition at line 818 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mAutoScrolling\fC [protected]\fP"

.PP
Definition at line 753 of file TrackPanel\&.h\&.
.SS "\fBTrackPanelAx\fP* TrackPanel::mAx\fC [protected]\fP"

.PP
Definition at line 862 of file TrackPanel\&.h\&.
.SS "wxBitmap* TrackPanel::mBacking\fC [protected]\fP"

.PP
Definition at line 610 of file TrackPanel\&.h\&.
.SS "wxMemoryDC TrackPanel::mBackingDC\fC [protected]\fP"

.PP
Definition at line 609 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mBandWidthCursor\fC [protected]\fP"

.PP
Definition at line 837 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mBottomFrequencyCursor\fC [protected]\fP"

.PP
Definition at line 835 of file TrackPanel\&.h\&.
.SS "\fBWaveClip\fP* TrackPanel::mCapturedClip\fC [protected]\fP"

.PP
Definition at line 657 of file TrackPanel\&.h\&.
.SS "TrackClipArray TrackPanel::mCapturedClipArray\fC [protected]\fP"

.PP
Definition at line 658 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mCapturedClipIsSelection\fC [protected]\fP"

.PP
Definition at line 660 of file TrackPanel\&.h\&.
.SS "\fBEnvelope\fP* TrackPanel::mCapturedEnvelope\fC [protected]\fP"

.PP
Definition at line 656 of file TrackPanel\&.h\&.
.SS "wxRect TrackPanel::mCapturedRect\fC [protected]\fP"

.PP
Definition at line 663 of file TrackPanel\&.h\&.
.SS "\fBTrack\fP* TrackPanel::mCapturedTrack\fC [protected]\fP"

.PP
Definition at line 655 of file TrackPanel\&.h\&.
.SS "\fBWaveTrackLocation\fP TrackPanel::mCapturedTrackLocation\fC [protected]\fP"

.PP
Definition at line 661 of file TrackPanel\&.h\&.
.SS "wxRect TrackPanel::mCapturedTrackLocationRect\fC [protected]\fP"

.PP
Definition at line 662 of file TrackPanel\&.h\&.
.SS "size_t TrackPanel::mChannelItemsInsertionPoint\fC [protected]\fP"

.PP
Definition at line 846 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mCircularTrackNavigation\fC [protected]\fP"

.PP
Definition at line 789 of file TrackPanel\&.h\&.
.SS "\fBNumericConverter\fP TrackPanel::mConverter\fC [protected]\fP"

.PP
Definition at line 705 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mCursorTime\fC [protected]\fP"

.PP
Definition at line 601 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mDidSlideVertically\fC [protected]\fP"

.PP
Definition at line 681 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mDisabledCursor\fC [protected]\fP"

.PP
Definition at line 831 of file TrackPanel\&.h\&.
.SS "\fBsampleCount\fP TrackPanel::mDrawingLastDragSample\fC [protected]\fP"

.PP
Definition at line 710 of file TrackPanel\&.h\&.
.SS "float TrackPanel::mDrawingLastDragSampleValue\fC [protected]\fP"

.PP
Definition at line 711 of file TrackPanel\&.h\&.
.SS "\fBsampleCount\fP TrackPanel::mDrawingStartSample\fC [protected]\fP"

.PP
Definition at line 709 of file TrackPanel\&.h\&.
.SS "\fBWaveTrack\fP* TrackPanel::mDrawingTrack\fC [protected]\fP"

.PP
Definition at line 707 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mDrawingTrackTop\fC [protected]\fP"

.PP
Definition at line 708 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mEnvelopeCursor\fC [protected]\fP"

.PP
Definition at line 823 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mFormatMenu\fC [protected]\fP"

.PP
Definition at line 852 of file TrackPanel\&.h\&.
.SS "enum \fBTrackPanel::eFreqSelMode\fP   TrackPanel::mFreqSelMode\fC [protected]\fP"

.SS "double TrackPanel::mFreqSelPin\fC [protected]\fP"

.PP
Definition at line 641 of file TrackPanel\&.h\&.
.SS "\fBconst\fP \fBWaveTrack\fP* TrackPanel::mFreqSelTrack\fC [protected]\fP"

.PP
Definition at line 642 of file TrackPanel\&.h\&.
.SS "std::unique_ptr<\fBSpectrumAnalyst\fP> TrackPanel::mFrequencySnapper\fC [protected]\fP"

.PP
Definition at line 643 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mHSlideAmount\fC [protected]\fP"

.PP
Definition at line 679 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mInitialActualHeight\fC [protected]\fP"

.PP
Definition at line 750 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mInitialMinimized\fC [protected]\fP"

.PP
Definition at line 748 of file TrackPanel\&.h\&.
.SS "\fBSelectedRegion\fP TrackPanel::mInitialSelection\fC [protected]\fP"

.PP
Definition at line 616 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mInitialTrackHeight\fC [protected]\fP"

.PP
Definition at line 749 of file TrackPanel\&.h\&.
.SS "std::vector<\fBbool\fP>* TrackPanel::mInitialTrackSelection\fC [protected]\fP"

.PP
Definition at line 618 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mInitialUpperActualHeight\fC [protected]\fP"

.PP
Definition at line 752 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mInitialUpperTrackHeight\fC [protected]\fP"

.PP
Definition at line 751 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mLabelCursorLeft\fC [protected]\fP"

.PP
Definition at line 828 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mLabelCursorRight\fC [protected]\fP"

.PP
Definition at line 829 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mLabelTrackInfoMenu\fC [protected]\fP"

.PP
Definition at line 853 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mLabelTrackMenu\fC [protected]\fP"

.PP
Definition at line 850 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mLabelTrackStartXPos\fC [protected]\fP"

.PP
Definition at line 561 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mLabelTrackStartYPos\fC [protected]\fP"

.PP
Definition at line 562 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mLastCursorX\fC [protected]\fP"

.PP
Definition at line 600 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mLastF0\fC [protected]\fP"

.PP
Definition at line 646 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mLastF1\fC [protected]\fP"

.PP
Definition at line 647 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mLastIndicatorX\fC [protected]\fP"

.PP
Definition at line 598 of file TrackPanel\&.h\&.
.SS "wxMouseEvent TrackPanel::mLastMouseEvent\fC [protected]\fP"

.PP
Definition at line 685 of file TrackPanel\&.h\&.
.SS "wxRect TrackPanel::mLastScrubRect\fC [protected]\fP"

.PP
Definition at line 806 of file TrackPanel\&.h\&.
.SS "wxString TrackPanel::mLastScrubSpeedText\fC [protected]\fP"

.PP
Definition at line 807 of file TrackPanel\&.h\&.
.SS "\fBTrackPanelListener\fP* TrackPanel::mListener\fC [protected]\fP"

.PP
Definition at line 571 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mLogMaxScrubSpeed\fC [protected]\fP"

.PP
Definition at line 815 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mMaxScrubSpeed\fC [protected]\fP"

.PP
Definition at line 801 of file TrackPanel\&.h\&.
.SS "enum \fBMouseCaptureEnum\fP TrackPanel::mMouseCapture\fC [protected]\fP"

.PP
Definition at line 784 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mMouseClickX\fC [protected]\fP"

.PP
Definition at line 687 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mMouseClickY\fC [protected]\fP"

.PP
Definition at line 688 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mMouseMostRecentX\fC [protected]\fP"

.PP
Definition at line 690 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mMouseMostRecentY\fC [protected]\fP"

.PP
Definition at line 691 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mMoveDownThreshold\fC [protected]\fP"

.PP
Definition at line 794 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mMoveUpThreshold\fC [protected]\fP"

.PP
Definition at line 793 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mNewCursorX\fC [protected]\fP"

.PP
Definition at line 602 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mNewIndicatorX\fC [protected]\fP"

.PP
Definition at line 599 of file TrackPanel\&.h\&.
.SS "wxRect TrackPanel::mNextScrubRect\fC [protected]\fP"

.PP
Definition at line 806 of file TrackPanel\&.h\&.
.SS "wxString TrackPanel::mNextScrubSpeedText\fC [protected]\fP"

.PP
Definition at line 807 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mNoteTrackMenu\fC [protected]\fP"

.PP
Definition at line 848 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mOldQPIndicatorPos\fC [protected]\fP"

.PP
Definition at line 605 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mPencilCursor\fC [protected]\fP"

.PP
Definition at line 819 of file TrackPanel\&.h\&.
.SS "\fBTrack\fP* TrackPanel::mPopupMenuTarget\fC [protected]\fP"

.PP
Definition at line 858 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mPrevHeight\fC [protected]\fP"

.PP
Definition at line 614 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mPrevWidth\fC [protected]\fP"

.PP
Definition at line 613 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mRateMenu\fC [protected]\fP"

.PP
Definition at line 851 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mRearrangeCount\fC [protected]\fP"

.PP
Definition at line 795 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mRearrangeCursor\fC [protected]\fP"

.PP
Definition at line 830 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mRedrawAfterStop\fC [protected]\fP"

.PP
Definition at line 683 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mRefreshBacking\fC [protected]\fP"

.PP
Definition at line 612 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mResizeBacking\fC [protected]\fP"

.PP
Definition at line 611 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mResizeCursor\fC [protected]\fP"

.PP
Definition at line 821 of file TrackPanel\&.h\&.
.SS "\fBAdornedRulerPanel\fP* TrackPanel::mRuler\fC [protected]\fP"

.PP
Definition at line 576 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mRulerSpectrumMenu\fC [protected]\fP"

.PP
Definition at line 856 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mRulerWaveformMenu\fC [protected]\fP"

.PP
Definition at line 855 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mScrubHasFocus\fC [protected]\fP"

.PP
Definition at line 803 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mScrubSeekPress\fC [protected]\fP"

.PP
Definition at line 804 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mScrubSpeedDisplayCountdown\fC [protected]\fP"

.PP
Definition at line 802 of file TrackPanel\&.h\&.
.SS "wxLongLong TrackPanel::mScrubStartClockTimeMillis\fC [protected]\fP"

.PP
Definition at line 799 of file TrackPanel\&.h\&.
.SS "wxCoord TrackPanel::mScrubStartPosition\fC [protected]\fP"

.PP
Definition at line 800 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mScrubToken\fC [protected]\fP"

.PP
Definition at line 798 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mSelectCursor\fC [protected]\fP"

.PP
Definition at line 820 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mSelStart\fC [protected]\fP"

.PP
Definition at line 621 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mSelStartValid\fC [protected]\fP"

.PP
Definition at line 620 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mSlideCursor\fC [protected]\fP"

.PP
Definition at line 822 of file TrackPanel\&.h\&.
.SS "wxBaseArrayDouble TrackPanel::mSlideSnapFromPoints\fC [protected]\fP"

.PP
Definition at line 673 of file TrackPanel\&.h\&.
.SS "wxArrayInt TrackPanel::mSlideSnapLinePixels\fC [protected]\fP"

.PP
Definition at line 675 of file TrackPanel\&.h\&.
.SS "wxBaseArrayDouble TrackPanel::mSlideSnapToPoints\fC [protected]\fP"

.PP
Definition at line 674 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mSlideUpDownOnly\fC [protected]\fP"

.PP
Definition at line 788 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mSmoothCursor\fC [protected]\fP"

.PP
Definition at line 825 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mSmoothScrollingScrub\fC [protected]\fP"

.PP
Definition at line 811 of file TrackPanel\&.h\&.
.SS "wxInt64 TrackPanel::mSnapLeft\fC [protected]\fP"

.PP
Definition at line 701 of file TrackPanel\&.h\&.
.SS "\fBSnapManager\fP* TrackPanel::mSnapManager\fC [protected]\fP"

.PP
Definition at line 700 of file TrackPanel\&.h\&.
.SS "\fBbool\fP TrackPanel::mSnapPreferRightEdge\fC [protected]\fP"

.PP
Definition at line 703 of file TrackPanel\&.h\&.
.SS "wxInt64 TrackPanel::mSnapRight\fC [protected]\fP"

.PP
Definition at line 702 of file TrackPanel\&.h\&.
.SS "wxString TrackPanel::mSoloPref\fC [protected]\fP"

.PP
Definition at line 864 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mTimeCount\fC [protected]\fP"

.PP
Definition at line 607 of file TrackPanel\&.h\&.
.SS " \fBTrackPanel::AudacityTimer\fP  TrackPanel::mTimer\fC [protected]\fP"

.SS "wxMenu* TrackPanel::mTimeTrackMenu\fC [protected]\fP"

.PP
Definition at line 849 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mTopFrequencyCursor\fC [protected]\fP"

.PP
Definition at line 836 of file TrackPanel\&.h\&.
.SS "\fBTrackArtist\fP* TrackPanel::mTrackArtist\fC [protected]\fP"

.PP
Definition at line 578 of file TrackPanel\&.h\&.
.SS "TrackArray TrackPanel::mTrackExclusions\fC [protected]\fP"

.PP
Definition at line 659 of file TrackPanel\&.h\&.
.SS "\fBTrackInfo\fP TrackPanel::mTrackInfo\fC [protected]\fP"

.PP
Definition at line 566 of file TrackPanel\&.h\&.
.SS "\fBTrackList\fP* TrackPanel::mTracks\fC [protected]\fP"

.PP
Definition at line 573 of file TrackPanel\&.h\&.
.SS "double TrackPanel::mVertScrollRemainder\fC [protected]\fP"

.PP
Definition at line 867 of file TrackPanel\&.h\&.
.SS "\fBViewInfo\fP* TrackPanel::mViewInfo\fC [protected]\fP"

.PP
Definition at line 574 of file TrackPanel\&.h\&.
.SS "wxMenu* TrackPanel::mWaveTrackMenu\fC [protected]\fP"

.PP
Definition at line 845 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mZoomEnd\fC [protected]\fP"

.PP
Definition at line 694 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mZoomInCursor\fC [protected]\fP"

.PP
Definition at line 826 of file TrackPanel\&.h\&.
.SS "wxCursor* TrackPanel::mZoomOutCursor\fC [protected]\fP"

.PP
Definition at line 827 of file TrackPanel\&.h\&.
.SS "\fBint\fP TrackPanel::mZoomStart\fC [protected]\fP"

.PP
Definition at line 693 of file TrackPanel\&.h\&.
.SS "wxSize TrackPanel::vrulerSize"

.PP
Definition at line 875 of file TrackPanel\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
