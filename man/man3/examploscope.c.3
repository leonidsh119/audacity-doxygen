.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/ext/log/log\&.h'\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/ext/log/logger\&.h'\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/ext/state/state\&.h'\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/lv2core/lv2\&.h'\fP
.br
\fC#include '\&./uris\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBEgScope\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBPortIndex\fP { \fBTEST_CONTROL_IN\fP = 0, \fBTEST_CONTROL_OUT\fP = 1, \fBTEST_AUDIO_IN\fP = 2, \fBTEST_AUDIO_OUT\fP = 3, \fBAMP_GAIN\fP = 0, \fBAMP_INPUT\fP = 1, \fBAMP_OUTPUT\fP = 2, \fBMIDIGATE_CONTROL\fP = 0, \fBMIDIGATE_IN\fP = 1, \fBMIDIGATE_OUT\fP = 2, \fBSCO_CONTROL\fP = 0, \fBSCO_NOTIFY\fP = 1, \fBSCO_INPUT0\fP = 2, \fBSCO_OUTPUT0\fP = 3, \fBSCO_INPUT1\fP = 4, \fBSCO_OUTPUT1\fP = 5 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLV2_SYMBOL_EXPORT\fP \fBconst\fP \fBLV2_Descriptor\fP * \fBlv2_descriptor\fP (\fBuint32_t\fP index)"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBPortIndex\fP"
==== Port Indices ==== 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITEST_CONTROL_IN \fP\fP
.TP
\fB\fITEST_CONTROL_OUT \fP\fP
.TP
\fB\fITEST_AUDIO_IN \fP\fP
.TP
\fB\fITEST_AUDIO_OUT \fP\fP
.TP
\fB\fIAMP_GAIN \fP\fP
.TP
\fB\fIAMP_INPUT \fP\fP
.TP
\fB\fIAMP_OUTPUT \fP\fP
.TP
\fB\fIMIDIGATE_CONTROL \fP\fP
.TP
\fB\fIMIDIGATE_IN \fP\fP
.TP
\fB\fIMIDIGATE_OUT \fP\fP
.TP
\fB\fISCO_CONTROL \fP\fP
.TP
\fB\fISCO_NOTIFY \fP\fP
.TP
\fB\fISCO_INPUT0 \fP\fP
.TP
\fB\fISCO_OUTPUT0 \fP\fP
.TP
\fB\fISCO_INPUT1 \fP\fP
.TP
\fB\fISCO_OUTPUT1 \fP\fP
.PP
Definition at line 65 of file examploscope\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBLV2_SYMBOL_EXPORT\fP \fBconst\fP \fBLV2_Descriptor\fP* lv2_descriptor (\fBuint32_t\fP index)"
Prototype for plugin accessor function\&.
.PP
Plugins are discovered by hosts using RDF data (not by loading libraries)\&. See http://lv2plug.in for details on the discovery process, though most hosts should use an existing library to implement this functionality\&.
.PP
This is the simple plugin discovery API, suitable for most statically defined plugins\&. Advanced plugins that need access to their bundle during discovery can use \fBlv2_lib_descriptor()\fP instead\&. Plugin libraries MUST include a function called 'lv2_descriptor' or 'lv2_lib_descriptor' with C-style linkage, but SHOULD provide 'lv2_descriptor' wherever possible\&.
.PP
When it is time to load a plugin (designated by its URI), the host loads the plugin's library, gets the \fBlv2_descriptor()\fP function from it, and uses this function to find the LV2_Descriptor for the desired plugin\&. Plugins are accessed by index using values from 0 upwards\&. This function MUST return NULL for out of range indices, so the host can enumerate plugins by increasing \fCindex\fP until NULL is returned\&.
.PP
Note that \fCindex\fP has no meaning, hosts MUST NOT depend on it remaining consistent between loads of the plugin library\&.
.PP
The \fBlv2_descriptor()\fP function is the entry point to the plugin library\&. The host will load the library and call this function repeatedly with increasing indices to find all the plugins defined in the library\&. The index is not an indentifier, the URI of the returned descriptor is used to determine the identify of the plugin\&.
.PP
This method is in the ``discovery'' threading class, so no other functions or methods in this plugin library will be called concurrently with it\&.
.PP
The \fC\fBlv2_descriptor()\fP\fP function is the entry point to the plugin library\&. The host will load the library and call this function repeatedly with increasing indices to find all the plugins defined in the library\&. The index is not an indentifier, the URI of the returned descriptor is used to determine the identify of the plugin\&.
.PP
This method is in the ``discovery'' threading class, so no other functions or methods in this plugin library will be called concurrently with it\&. 
.PP
Definition at line 413 of file examploscope\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
