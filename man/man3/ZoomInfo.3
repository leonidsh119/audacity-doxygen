.TH "ZoomInfo" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ZoomInfo \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ViewInfo\&.h>\fP
.PP
Inherited by \fBViewInfo\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBInterval\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBFisheyeState\fP { \fBHIDDEN\fP, \fBPINNED\fP, \fBNUM_STATES\fP }"
.br
.ti -1c
.RI "typedef std::vector< \fBInterval\fP > \fBIntervals\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBZoomInfo\fP (double \fBstart\fP, double pixelsPerSecond)"
.br
.ti -1c
.RI "\fB~ZoomInfo\fP ()"
.br
.ti -1c
.RI "\fBZoomInfo\fP (\fBconst\fP \fBZoomInfo\fP &) \fBPROHIBITED\fP"
.br
.ti -1c
.RI "\fBZoomInfo\fP & \fBoperator=\fP (\fBconst\fP \fBZoomInfo\fP &) \fBPROHIBITED\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdatePrefs\fP ()"
.br
.ti -1c
.RI "double \fBPositionToTime\fP (wxInt64 \fBposition\fP, wxInt64 origin=0, \fBbool\fP ignoreFisheye=\fBfalse\fP) \fBconst\fP "
.br
.ti -1c
.RI "wxInt64 \fBTimeToPosition\fP (double time, wxInt64 origin=0, \fBbool\fP ignoreFisheye=\fBfalse\fP) \fBconst\fP "
.br
.RI "\fISTM: Converts a project time to screen x position\&. \fP"
.ti -1c
.RI "double \fBTimeRangeToPixelWidth\fP (double timeRange) \fBconst\fP "
.br
.ti -1c
.RI "double \fBOffsetTimeByPixels\fP (double time, wxInt64 \fBoffset\fP, \fBbool\fP ignoreFisheye=\fBfalse\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBZoomInAvailable\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBZoomOutAvailable\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetZoom\fP (double pixelsPerSecond)"
.br
.ti -1c
.RI "\fBvoid\fP \fBZoomBy\fP (double multiplier)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFindIntervals\fP (double \fBrate\fP, \fBIntervals\fP &results, wxInt64 width, wxInt64 origin=0) \fBconst\fP "
.br
.ti -1c
.RI "\fBFisheyeState\fP \fBGetFisheyeState\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBInFisheye\fP (wxInt64, wxInt64 WXUNUSED(origin=0)) \fBconst\fP "
.br
.ti -1c
.RI "wxInt64 \fBGetFisheyeLeftBoundary\fP (wxInt64 WXUNUSED(origin=0)) \fBconst\fP "
.br
.ti -1c
.RI "wxInt64 \fBGetFisheyeRightBoundary\fP (wxInt64 WXUNUSED(origin=0)) \fBconst\fP "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static double \fBGetDefaultZoom\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBint\fP \fBvpos\fP"
.br
.ti -1c
.RI "double \fBh\fP"
.br
.ti -1c
.RI "float \fBdBr\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "double \fBzoom\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 29 of file ViewInfo\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::vector<\fBInterval\fP> \fBZoomInfo::Intervals\fP"

.PP
Definition at line 101 of file ViewInfo\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBZoomInfo::FisheyeState\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHIDDEN \fP\fP
.TP
\fB\fIPINNED \fP\fP
.TP
\fB\fINUM_STATES \fP\fP
.PP
Definition at line 113 of file ViewInfo\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ZoomInfo::ZoomInfo (double start, double pixelsPerSecond)"

.PP
Definition at line 26 of file ViewInfo\&.cpp\&.
.SS "ZoomInfo::~ZoomInfo ()"

.PP
Definition at line 34 of file ViewInfo\&.cpp\&.
.SS "ZoomInfo::ZoomInfo (\fBconst\fP \fBZoomInfo\fP &)"

.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP ZoomInfo::FindIntervals (double rate, \fBIntervals\fP & results, wxInt64 width, wxInt64 origin = \fC0\fP) const"

.PP
Definition at line 98 of file ViewInfo\&.cpp\&.
.SS "static double ZoomInfo::GetDefaultZoom ()\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 83 of file ViewInfo\&.h\&.
.SS "wxInt64 ZoomInfo::GetFisheyeLeftBoundary (wxInt64  WXUNUSEDorigin=0) const\fC [inline]\fP"

.PP
Definition at line 129 of file ViewInfo\&.h\&.
.SS "wxInt64 ZoomInfo::GetFisheyeRightBoundary (wxInt64  WXUNUSEDorigin=0) const\fC [inline]\fP"

.PP
Definition at line 132 of file ViewInfo\&.h\&.
.SS "\fBFisheyeState\fP ZoomInfo::GetFisheyeState () const\fC [inline]\fP"

.PP
Definition at line 119 of file ViewInfo\&.h\&.
.SS "\fBbool\fP ZoomInfo::InFisheye (wxInt64, wxInt64  WXUNUSEDorigin=0) const\fC [inline]\fP"

.PP
Definition at line 124 of file ViewInfo\&.h\&.
.SS "double ZoomInfo::OffsetTimeByPixels (double time, wxInt64 offset, \fBbool\fP ignoreFisheye = \fC\fBfalse\fP\fP) const\fC [inline]\fP"

.PP
Definition at line 75 of file ViewInfo\&.h\&.
.SS "\fBZoomInfo\fP& ZoomInfo::operator= (\fBconst\fP \fBZoomInfo\fP &)"

.SS "double ZoomInfo::PositionToTime (wxInt64 position, wxInt64 origin = \fC0\fP, \fBbool\fP ignoreFisheye = \fC\fBfalse\fP\fP) const"
Converts a position (mouse X coordinate) to project time, in seconds\&. Needs the left edge of the track as an additional parameter\&. 
.PP
Definition at line 46 of file ViewInfo\&.cpp\&.
.SS "\fBvoid\fP ZoomInfo::SetZoom (double pixelsPerSecond)"

.PP
Definition at line 87 of file ViewInfo\&.cpp\&.
.SS "double ZoomInfo::TimeRangeToPixelWidth (double timeRange) const"

.PP
Definition at line 72 of file ViewInfo\&.cpp\&.
.SS "wxInt64 ZoomInfo::TimeToPosition (double time, wxInt64 origin = \fC0\fP, \fBbool\fP ignoreFisheye = \fC\fBfalse\fP\fP) const"

.PP
STM: Converts a project time to screen x position\&. 
.PP
Definition at line 56 of file ViewInfo\&.cpp\&.
.SS "\fBvoid\fP ZoomInfo::UpdatePrefs ()"

.PP
Definition at line 38 of file ViewInfo\&.cpp\&.
.SS "\fBvoid\fP ZoomInfo::ZoomBy (double multiplier)"

.PP
Definition at line 92 of file ViewInfo\&.cpp\&.
.SS "\fBbool\fP ZoomInfo::ZoomInAvailable () const"

.PP
Definition at line 77 of file ViewInfo\&.cpp\&.
.SS "\fBbool\fP ZoomInfo::ZoomOutAvailable () const"

.PP
Definition at line 82 of file ViewInfo\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "float ZoomInfo::dBr"

.PP
Definition at line 51 of file ViewInfo\&.h\&.
.SS "double ZoomInfo::h"

.PP
Definition at line 45 of file ViewInfo\&.h\&.
.SS "\fBint\fP ZoomInfo::vpos"

.PP
Definition at line 43 of file ViewInfo\&.h\&.
.SS "double ZoomInfo::zoom\fC [protected]\fP"

.PP
Definition at line 48 of file ViewInfo\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
