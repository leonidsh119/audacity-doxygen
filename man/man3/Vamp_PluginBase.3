.TH "Vamp::PluginBase" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vamp::PluginBase \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PluginBase\&.h>\fP
.PP
Inherited by \fBVamp::Plugin\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBParameterDescriptor\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::vector< \fBParameterDescriptor\fP > \fBParameterList\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBstd::string\fP > \fBProgramList\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~PluginBase\fP ()"
.br
.ti -1c
.RI "virtual unsigned \fBint\fP \fBgetVampApiVersion\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetIdentifier\fP () \fBconst\fP  =0"
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetName\fP () \fBconst\fP  =0"
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetDescription\fP () \fBconst\fP  =0"
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetMaker\fP () \fBconst\fP  =0"
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetCopyright\fP () \fBconst\fP  =0"
.br
.ti -1c
.RI "virtual \fBint\fP \fBgetPluginVersion\fP () \fBconst\fP  =0"
.br
.ti -1c
.RI "virtual \fBParameterList\fP \fBgetParameterDescriptors\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual float \fBgetParameter\fP (\fBstd::string\fP) \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBsetParameter\fP (\fBstd::string\fP, float)"
.br
.ti -1c
.RI "virtual \fBProgramList\fP \fBgetPrograms\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetCurrentProgram\fP () \fBconst\fP "
.br
.ti -1c
.RI "virtual \fBvoid\fP \fBselectProgram\fP (\fBstd::string\fP)"
.br
.ti -1c
.RI "virtual \fBstd::string\fP \fBgetType\fP () \fBconst\fP  =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
A base class for plugins with optional configurable parameters, programs, etc\&. The \fBVamp::Plugin\fP is derived from this, and individual \fBVamp\fP plugins should derive from that\&.
.PP
This class does not provide the necessary interfaces to instantiate or run a plugin\&. It only specifies an interface for retrieving those controls that the host may wish to show to the user for editing\&. It could meaningfully be subclassed by real-time plugins or other sorts of plugin as well as \fBVamp\fP plugins\&. 
.PP
Definition at line 60 of file PluginBase\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::vector<\fBParameterDescriptor\fP> \fBVamp::PluginBase::ParameterList\fP"

.PP
Definition at line 199 of file PluginBase\&.h\&.
.SS "typedef std::vector<\fBstd::string\fP> \fBVamp::PluginBase::ProgramList\fP"

.PP
Definition at line 221 of file PluginBase\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual Vamp::PluginBase::~PluginBase ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Definition at line 63 of file PluginBase\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getCopyright () const\fC [pure virtual]\fP"
Get the copyright statement or licensing summary for the plugin\&. This can be an informative text, without the same presentation constraints as mentioned for getMaker above\&. 
.PP
Implemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBPowerSpectrum\fP, \fBAmplitudeFollower\fP, \fBSpectralCentroid\fP, \fBZeroCrossing\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getCurrentProgram () const\fC [inline]\fP, \fC [virtual]\fP"
Get the current program\&. 
.PP
Reimplemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, and \fBMyPlugin\fP\&.
.PP
Definition at line 238 of file PluginBase\&.h\&.
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getDescription () const\fC [pure virtual]\fP"
Get a human-readable description for the plugin, typically a line of text that may optionally be displayed in addition to the plugin's 'name'\&. May be empty if the name has said it all already\&.
.PP
Example: 'Detect and count zero crossing points' 
.PP
Implemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBPowerSpectrum\fP, \fBAmplitudeFollower\fP, \fBSpectralCentroid\fP, \fBZeroCrossing\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getIdentifier () const\fC [pure virtual]\fP"
Get the computer-usable name of the plugin\&. This should be reasonably short and contain no whitespace or punctuation characters\&. It may only contain the characters [a-zA-Z0-9_-]\&. This is the authoritative way for a program to identify a plugin within a given library\&.
.PP
This text may be visible to the user, but it should not be the main text used to identify a plugin to the user (that will be the name, below)\&.
.PP
Example: 'zero_crossings' 
.PP
Implemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBPowerSpectrum\fP, \fBAmplitudeFollower\fP, \fBSpectralCentroid\fP, \fBZeroCrossing\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getMaker () const\fC [pure virtual]\fP"
Get the name of the author or vendor of the plugin in human-readable form\&. This should be a short identifying text, as it may be used to label plugins from the same source in a menu or similar\&. 
.PP
Implemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBPowerSpectrum\fP, \fBAmplitudeFollower\fP, \fBSpectralCentroid\fP, \fBZeroCrossing\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getName () const\fC [pure virtual]\fP"
Get a human-readable name or title of the plugin\&. This should be brief and self-contained, as it may be used to identify the plugin to the user in isolation (i\&.e\&. without also showing the plugin's 'identifier')\&.
.PP
Example: 'Zero Crossings' 
.PP
Implemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBPowerSpectrum\fP, \fBAmplitudeFollower\fP, \fBSpectralCentroid\fP, \fBZeroCrossing\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.SS "virtual float Vamp::PluginBase::getParameter (\fBstd::string\fP) const\fC [inline]\fP, \fC [virtual]\fP"
Get the value of a named parameter\&. The argument is the identifier field from that parameter's descriptor\&. 
.PP
Reimplemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBAmplitudeFollower\fP, \fBFixedTempoEstimator\fP, and \fBPercussionOnsetDetector\fP\&.
.PP
Definition at line 212 of file PluginBase\&.h\&.
.SS "virtual \fBParameterList\fP Vamp::PluginBase::getParameterDescriptors () const\fC [inline]\fP, \fC [virtual]\fP"
Get the controllable parameters of this plugin\&. 
.PP
Reimplemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBAmplitudeFollower\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.PP
Definition at line 204 of file PluginBase\&.h\&.
.SS "virtual \fBint\fP Vamp::PluginBase::getPluginVersion () const\fC [pure virtual]\fP"
Get the version number of the plugin\&. 
.PP
Implemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBPowerSpectrum\fP, \fBAmplitudeFollower\fP, \fBSpectralCentroid\fP, \fBZeroCrossing\fP, \fBFixedTempoEstimator\fP, \fBPercussionOnsetDetector\fP, and \fBMyPlugin\fP\&.
.SS "virtual \fBProgramList\fP Vamp::PluginBase::getPrograms () const\fC [inline]\fP, \fC [virtual]\fP"
Get the program settings available in this plugin\&. A program is a named shorthand for a set of parameter values; changing the program may cause the plugin to alter the values of its published parameters (and/or non-public internal processing parameters)\&. The host should re-read the plugin's parameter values after setting a new program\&.
.PP
The programs must have unique names\&. 
.PP
Reimplemented in \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, and \fBMyPlugin\fP\&.
.PP
Definition at line 233 of file PluginBase\&.h\&.
.SS "virtual \fBstd::string\fP Vamp::PluginBase::getType () const\fC [pure virtual]\fP"
Get the type of plugin\&. This is to be implemented by the immediate subclass, not by actual plugins\&. Do not attempt to implement this in plugin code\&. 
.PP
Implemented in \fBVamp::Plugin\fP\&.
.SS "virtual unsigned \fBint\fP Vamp::PluginBase::getVampApiVersion () const\fC [inline]\fP, \fC [virtual]\fP"
Get the \fBVamp\fP API compatibility level of the plugin\&. 
.PP
Reimplemented in \fBVamp::PluginHostAdapter\fP, and \fBVamp::HostExt::PluginWrapper\fP\&.
.PP
Definition at line 68 of file PluginBase\&.h\&.
.SS "virtual \fBvoid\fP Vamp::PluginBase::selectProgram (\fBstd::string\fP)\fC [inline]\fP, \fC [virtual]\fP"
Select a program\&. (If the given program name is not one of the available programs, do nothing\&.) 
.PP
Reimplemented in \fBVamp::HostExt::PluginBufferingAdapter\fP, \fBVamp::PluginHostAdapter\fP, and \fBVamp::HostExt::PluginWrapper\fP\&.
.PP
Definition at line 244 of file PluginBase\&.h\&.
.SS "virtual \fBvoid\fP Vamp::PluginBase::setParameter (\fBstd::string\fP, float)\fC [inline]\fP, \fC [virtual]\fP"
Set a named parameter\&. The first argument is the identifier field from that parameter's descriptor\&. 
.PP
Reimplemented in \fBVamp::HostExt::PluginBufferingAdapter\fP, \fBVamp::PluginHostAdapter\fP, \fBVamp::HostExt::PluginWrapper\fP, \fBAmplitudeFollower\fP, \fBFixedTempoEstimator\fP, and \fBPercussionOnsetDetector\fP\&.
.PP
Definition at line 218 of file PluginBase\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
