.TH "AVCodecContext" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AVCodecContext \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <avcodec\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBav_class\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlog_level_offset\fP"
.br
.ti -1c
.RI "enum \fBAVMediaType\fP \fBcodec_type\fP"
.br
.ti -1c
.RI "\fBconst\fP struct \fBAVCodec\fP * \fBcodec\fP"
.br
.ti -1c
.RI "char \fBcodec_name\fP [32]"
.br
.ti -1c
.RI "enum \fBAVCodecID\fP \fBcodec_id\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBcodec_tag\fP"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBstream_codec_tag\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBpriv_data\fP"
.br
.ti -1c
.RI "struct AVCodecInternal * \fBinternal\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBopaque\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbit_rate\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbit_rate_tolerance\fP"
.br
.ti -1c
.RI "\fBint\fP \fBglobal_quality\fP"
.br
.ti -1c
.RI "\fBint\fP \fBcompression_level\fP"
.br
.ti -1c
.RI "\fBint\fP \fBflags\fP"
.br
.ti -1c
.RI "\fBint\fP \fBflags2\fP"
.br
.ti -1c
.RI "\fBuint8_t\fP * \fBextradata\fP"
.br
.ti -1c
.RI "\fBint\fP \fBextradata_size\fP"
.br
.ti -1c
.RI "\fBAVRational\fP \fBtime_base\fP"
.br
.ti -1c
.RI "\fBint\fP \fBticks_per_frame\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdelay\fP"
.br
.ti -1c
.RI "\fBint\fP \fBwidth\fP"
.br
.ti -1c
.RI "\fBint\fP \fBheight\fP"
.br
.ti -1c
.RI "\fBint\fP \fBcoded_width\fP"
.br
.ti -1c
.RI "\fBint\fP \fBcoded_height\fP"
.br
.ti -1c
.RI "\fBint\fP \fBgop_size\fP"
.br
.ti -1c
.RI "enum \fBAVPixelFormat\fP \fBpix_fmt\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_method\fP"
.br
.ti -1c
.RI "\fBvoid\fP(* \fBdraw_horiz_band\fP )(struct \fBAVCodecContext\fP *\fBs\fP, \fBconst\fP \fBAVFrame\fP *src, \fBint\fP \fBoffset\fP[\fBAV_NUM_DATA_POINTERS\fP], \fBint\fP y, \fBint\fP type, \fBint\fP \fBheight\fP)"
.br
.ti -1c
.RI "enum \fBAVPixelFormat\fP(* \fBget_format\fP )(struct \fBAVCodecContext\fP *\fBs\fP, \fBconst\fP enum \fBAVPixelFormat\fP *fmt)"
.br
.ti -1c
.RI "\fBint\fP \fBmax_b_frames\fP"
.br
.ti -1c
.RI "float \fBb_quant_factor\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_strategy\fP"
.br
.ti -1c
.RI "\fBint\fP \fBb_frame_strategy\fP"
.br
.ti -1c
.RI "float \fBb_quant_offset\fP"
.br
.ti -1c
.RI "\fBint\fP \fBhas_b_frames\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmpeg_quant\fP"
.br
.ti -1c
.RI "float \fBi_quant_factor\fP"
.br
.ti -1c
.RI "float \fBi_quant_offset\fP"
.br
.ti -1c
.RI "float \fBlumi_masking\fP"
.br
.ti -1c
.RI "float \fBtemporal_cplx_masking\fP"
.br
.ti -1c
.RI "float \fBspatial_cplx_masking\fP"
.br
.ti -1c
.RI "float \fBp_masking\fP"
.br
.ti -1c
.RI "float \fBdark_masking\fP"
.br
.ti -1c
.RI "\fBint\fP \fBslice_count\fP"
.br
.ti -1c
.RI "\fBint\fP \fBprediction_method\fP"
.br
.ti -1c
.RI "\fBint\fP * \fBslice_offset\fP"
.br
.ti -1c
.RI "\fBAVRational\fP \fBsample_aspect_ratio\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_cmp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_sub_cmp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmb_cmp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBildct_cmp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdia_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlast_predictor_count\fP"
.br
.ti -1c
.RI "\fBint\fP \fBpre_me\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_pre_cmp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBpre_dia_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_subpel_quality\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdtg_active_format\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_range\fP"
.br
.ti -1c
.RI "\fBint\fP \fBintra_quant_bias\fP"
.br
.ti -1c
.RI "\fBint\fP \fBinter_quant_bias\fP"
.br
.ti -1c
.RI "\fBint\fP \fBslice_flags\fP"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBxvmc_acceleration\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmb_decision\fP"
.br
.ti -1c
.RI "\fBuint16_t\fP * \fBintra_matrix\fP"
.br
.ti -1c
.RI "\fBuint16_t\fP * \fBinter_matrix\fP"
.br
.ti -1c
.RI "\fBint\fP \fBscenechange_threshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBnoise_reduction\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_threshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmb_threshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBintra_dc_precision\fP"
.br
.ti -1c
.RI "\fBint\fP \fBskip_top\fP"
.br
.ti -1c
.RI "\fBint\fP \fBskip_bottom\fP"
.br
.ti -1c
.RI "float \fBborder_masking\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmb_lmin\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmb_lmax\fP"
.br
.ti -1c
.RI "\fBint\fP \fBme_penalty_compensation\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbidir_refine\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbrd_scale\fP"
.br
.ti -1c
.RI "\fBint\fP \fBkeyint_min\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrefs\fP"
.br
.ti -1c
.RI "\fBint\fP \fBchromaoffset\fP"
.br
.ti -1c
.RI "\fBint\fP \fBscenechange_factor\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmv0_threshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBb_sensitivity\fP"
.br
.ti -1c
.RI "enum \fBAVColorPrimaries\fP \fBcolor_primaries\fP"
.br
.ti -1c
.RI "enum \fBAVColorTransferCharacteristic\fP \fBcolor_trc\fP"
.br
.ti -1c
.RI "enum \fBAVColorSpace\fP \fBcolorspace\fP"
.br
.ti -1c
.RI "enum \fBAVColorRange\fP \fBcolor_range\fP"
.br
.ti -1c
.RI "enum \fBAVChromaLocation\fP \fBchroma_sample_location\fP"
.br
.ti -1c
.RI "\fBint\fP \fBslices\fP"
.br
.ti -1c
.RI "enum \fBAVFieldOrder\fP \fBfield_order\fP"
.br
.ti -1c
.RI "\fBint\fP \fBsample_rate\fP"
.br
.RI "\fIsamples per second \fP"
.ti -1c
.RI "\fBint\fP \fBchannels\fP"
.br
.RI "\fInumber of audio channels \fP"
.ti -1c
.RI "enum \fBAVSampleFormat\fP \fBsample_fmt\fP"
.br
.RI "\fIsample format \fP"
.ti -1c
.RI "\fBint\fP \fBframe_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBframe_number\fP"
.br
.ti -1c
.RI "\fBint\fP \fBblock_align\fP"
.br
.ti -1c
.RI "\fBint\fP \fBcutoff\fP"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBrequest_channels\fP"
.br
.ti -1c
.RI "\fBuint64_t\fP \fBchannel_layout\fP"
.br
.ti -1c
.RI "\fBuint64_t\fP \fBrequest_channel_layout\fP"
.br
.ti -1c
.RI "enum \fBAVAudioServiceType\fP \fBaudio_service_type\fP"
.br
.ti -1c
.RI "enum \fBAVSampleFormat\fP \fBrequest_sample_fmt\fP"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP(* \fBget_buffer\fP )(struct \fBAVCodecContext\fP *\fBc\fP, \fBAVFrame\fP *pic)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP(* \fBrelease_buffer\fP )(struct \fBAVCodecContext\fP *\fBc\fP, \fBAVFrame\fP *pic)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP(* \fBreget_buffer\fP )(struct \fBAVCodecContext\fP *\fBc\fP, \fBAVFrame\fP *pic)"
.br
.ti -1c
.RI "\fBint\fP(* \fBget_buffer2\fP )(struct \fBAVCodecContext\fP *\fBs\fP, \fBAVFrame\fP *frame, \fBint\fP \fBflags\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBrefcounted_frames\fP"
.br
.ti -1c
.RI "float \fBqcompress\fP"
.br
.RI "\fIamount of qscale change between easy & hard scenes (0\&.0-1\&.0) \fP"
.ti -1c
.RI "float \fBqblur\fP"
.br
.RI "\fIamount of qscale smoothing over time (0\&.0-1\&.0) \fP"
.ti -1c
.RI "\fBint\fP \fBqmin\fP"
.br
.ti -1c
.RI "\fBint\fP \fBqmax\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmax_qdiff\fP"
.br
.ti -1c
.RI "float \fBrc_qsquish\fP"
.br
.ti -1c
.RI "float \fBrc_qmod_amp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_qmod_freq\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_buffer_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_override_count\fP"
.br
.ti -1c
.RI "\fBRcOverride\fP * \fBrc_override\fP"
.br
.ti -1c
.RI "\fBconst\fP char * \fBrc_eq\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_max_rate\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_min_rate\fP"
.br
.ti -1c
.RI "float \fBrc_buffer_aggressivity\fP"
.br
.ti -1c
.RI "float \fBrc_initial_cplx\fP"
.br
.ti -1c
.RI "float \fBrc_max_available_vbv_use\fP"
.br
.ti -1c
.RI "float \fBrc_min_vbv_overflow_use\fP"
.br
.ti -1c
.RI "\fBint\fP \fBrc_initial_buffer_occupancy\fP"
.br
.ti -1c
.RI "\fBint\fP \fBcoder_type\fP"
.br
.ti -1c
.RI "\fBint\fP \fBcontext_model\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlmin\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlmax\fP"
.br
.ti -1c
.RI "\fBint\fP \fBframe_skip_threshold\fP"
.br
.ti -1c
.RI "\fBint\fP \fBframe_skip_factor\fP"
.br
.ti -1c
.RI "\fBint\fP \fBframe_skip_exp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBframe_skip_cmp\fP"
.br
.ti -1c
.RI "\fBint\fP \fBtrellis\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmin_prediction_order\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmax_prediction_order\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBtimecode_frame_start\fP"
.br
.ti -1c
.RI "\fBvoid\fP(* \fBrtp_callback\fP )(struct \fBAVCodecContext\fP *avctx, \fBvoid\fP *\fBdata\fP, \fBint\fP \fBsize\fP, \fBint\fP mb_nb)"
.br
.ti -1c
.RI "\fBint\fP \fBrtp_payload_size\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmv_bits\fP"
.br
.ti -1c
.RI "\fBint\fP \fBheader_bits\fP"
.br
.ti -1c
.RI "\fBint\fP \fBi_tex_bits\fP"
.br
.ti -1c
.RI "\fBint\fP \fBp_tex_bits\fP"
.br
.ti -1c
.RI "\fBint\fP \fBi_count\fP"
.br
.ti -1c
.RI "\fBint\fP \fBp_count\fP"
.br
.ti -1c
.RI "\fBint\fP \fBskip_count\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmisc_bits\fP"
.br
.ti -1c
.RI "\fBint\fP \fBframe_bits\fP"
.br
.ti -1c
.RI "char * \fBstats_out\fP"
.br
.ti -1c
.RI "char * \fBstats_in\fP"
.br
.ti -1c
.RI "\fBint\fP \fBworkaround_bugs\fP"
.br
.ti -1c
.RI "\fBint\fP \fBstrict_std_compliance\fP"
.br
.ti -1c
.RI "\fBint\fP \fBerror_concealment\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdebug\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdebug_mv\fP"
.br
.ti -1c
.RI "\fBint\fP \fBerr_recognition\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBreordered_opaque\fP"
.br
.ti -1c
.RI "struct \fBAVHWAccel\fP * \fBhwaccel\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBhwaccel_context\fP"
.br
.ti -1c
.RI "\fBuint64_t\fP \fBerror\fP [\fBAV_NUM_DATA_POINTERS\fP]"
.br
.ti -1c
.RI "\fBint\fP \fBdct_algo\fP"
.br
.ti -1c
.RI "\fBint\fP \fBidct_algo\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbits_per_coded_sample\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbits_per_raw_sample\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlowres\fP"
.br
.ti -1c
.RI "\fBAVFrame\fP * \fBcoded_frame\fP"
.br
.ti -1c
.RI "\fBint\fP \fBthread_count\fP"
.br
.ti -1c
.RI "\fBint\fP \fBthread_type\fP"
.br
.ti -1c
.RI "\fBint\fP \fBactive_thread_type\fP"
.br
.ti -1c
.RI "\fBint\fP \fBthread_safe_callbacks\fP"
.br
.ti -1c
.RI "\fBint\fP(* \fBexecute\fP )(struct \fBAVCodecContext\fP *\fBc\fP, \fBint\fP(*func)(struct \fBAVCodecContext\fP *\fBc2\fP, \fBvoid\fP *arg), \fBvoid\fP *arg2, \fBint\fP *ret, \fBint\fP \fBcount\fP, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP(* \fBexecute2\fP )(struct \fBAVCodecContext\fP *\fBc\fP, \fBint\fP(*func)(struct \fBAVCodecContext\fP *\fBc2\fP, \fBvoid\fP *arg, \fBint\fP jobnr, \fBint\fP threadnr), \fBvoid\fP *arg2, \fBint\fP *ret, \fBint\fP \fBcount\fP)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP * \fBthread_opaque\fP"
.br
.ti -1c
.RI "\fBint\fP \fBnsse_weight\fP"
.br
.ti -1c
.RI "\fBint\fP \fBprofile\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlevel\fP"
.br
.ti -1c
.RI "enum \fBAVDiscard\fP \fBskip_loop_filter\fP"
.br
.ti -1c
.RI "enum \fBAVDiscard\fP \fBskip_idct\fP"
.br
.ti -1c
.RI "enum \fBAVDiscard\fP \fBskip_frame\fP"
.br
.ti -1c
.RI "\fBuint8_t\fP * \fBsubtitle_header\fP"
.br
.ti -1c
.RI "\fBint\fP \fBsubtitle_header_size\fP"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBerror_rate\fP"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBAVPacket\fP * \fBpkt\fP"
.br
.ti -1c
.RI "\fBuint64_t\fP \fBvbv_delay\fP"
.br
.ti -1c
.RI "\fBAVRational\fP \fBpkt_timebase\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBAVCodecDescriptor\fP * \fBcodec_descriptor\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBpts_correction_num_faulty_pts\fP"
.br
.ti -1c
.RI "\fBint64_t\fP \fBpts_correction_num_faulty_dts\fP"
.br
.RI "\fINumber of incorrect PTS values so far\&. \fP"
.ti -1c
.RI "\fBint64_t\fP \fBpts_correction_last_pts\fP"
.br
.RI "\fINumber of incorrect DTS values so far\&. \fP"
.ti -1c
.RI "\fBint64_t\fP \fBpts_correction_last_dts\fP"
.br
.RI "\fIPTS of the last frame\&. \fP"
.ti -1c
.RI "char * \fBsub_charenc\fP"
.br
.RI "\fIDTS of the last frame\&. \fP"
.ti -1c
.RI "\fBint\fP \fBsub_charenc_mode\fP"
.br
.ti -1c
.RI "\fBint\fP \fBskip_alpha\fP"
.br
.ti -1c
.RI "\fBint\fP \fBseek_preroll\fP"
.br
.ti -1c
.RI "\fBuint16_t\fP * \fBchroma_intra_matrix\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
main external API structure\&. New fields can be added to the end with minor version bumps\&. Removal, reordering and changes to existing fields require a major version bump\&. Please use AVOptions (av_opt* / av_set/get*()) to access these fields from user applications\&. sizeof(AVCodecContext) must not be used outside libav*\&. 
.PP
Definition at line 1198 of file avcodec\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBint\fP AVCodecContext::active_thread_type"
Which multithreading methods are in use by the codec\&.
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 2694 of file avcodec\&.h\&.
.SS "enum \fBAVAudioServiceType\fP AVCodecContext::audio_service_type"
Type of service that the audio stream conveys\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 2005 of file avcodec\&.h\&.
.SS "\fBconst\fP \fBAVClass\fP* AVCodecContext::av_class"
information on struct for av_log
.IP "\(bu" 2
set by avcodec_alloc_context3 
.PP

.PP
Definition at line 1203 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::b_frame_strategy"

.PP
Definition at line 1466 of file avcodec\&.h\&.
.SS "float AVCodecContext::b_quant_factor"
qscale factor between IP and B-frames If > 0 then the last P-frame quantizer will be used (q= lastp_q*factor+offset)\&. If < 0 then normal ratecontrol will be done (q= -normal_q*factor+offset)\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1460 of file avcodec\&.h\&.
.SS "float AVCodecContext::b_quant_offset"
qscale offset between IP and B-frames
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1473 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::b_sensitivity"
Adjust sensitivity of b_frame_strategy 1\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1877 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::bidir_refine"

.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1827 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::bit_rate"
the average bitrate
.IP "\(bu" 2
encoding: Set by user; unused for constant quantizer encoding\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 0 or some bitrate if this info is available in the stream\&. 
.PP

.PP
Definition at line 1256 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::bit_rate_tolerance"
number of bits the bitstream is allowed to diverge from the reference\&. the reference can be CBR (for CBR pass1) or VBR (for pass2)
.IP "\(bu" 2
encoding: Set by user; unused for constant quantizer encoding\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1264 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::bits_per_coded_sample"
bits per sample/pixel from the demuxer (needed for huffyuv)\&.
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2642 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::bits_per_raw_sample"
Bits per sample/pixel of internal libavcodec pixel/sample format\&.
.IP "\(bu" 2
encoding: set by user\&.
.IP "\(bu" 2
decoding: set by libavcodec\&. 
.PP

.PP
Definition at line 2649 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::block_align"
number of bytes per packet if constant and known or 0 Used by some WAV based audio codecs\&. 
.PP
Definition at line 1967 of file avcodec\&.h\&.
.SS "float AVCodecContext::border_masking"
Border processing masking, raises the quantizer for mbs on the borders of the picture\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1799 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::brd_scale"

.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1834 of file avcodec\&.h\&.
.SS "\fBuint64_t\fP AVCodecContext::channel_layout"
Audio channel layout\&.
.IP "\(bu" 2
encoding: set by user\&.
.IP "\(bu" 2
decoding: set by user, may be overwritten by libavcodec\&. 
.PP

.PP
Definition at line 1991 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::channels"

.PP
number of audio channels 
.PP
Definition at line 1931 of file avcodec\&.h\&.
.SS "\fBuint16_t\fP* AVCodecContext::chroma_intra_matrix"
custom intra quantization matrix Code outside libavcodec should access this field using av_codec_g/set_chroma_intra_matrix()
.IP "\(bu" 2
encoding: Set by user, can be NULL\&.
.IP "\(bu" 2
decoding: unused\&. 
.PP

.PP
Definition at line 2998 of file avcodec\&.h\&.
.SS "enum \fBAVChromaLocation\fP AVCodecContext::chroma_sample_location"
This defines the location of chroma samples\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: Set by libavcodec 
.PP

.PP
Definition at line 1912 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::chromaoffset"
chroma qp offset from luma
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1855 of file avcodec\&.h\&.
.SS "\fBconst\fP struct \fBAVCodec\fP* AVCodecContext::codec"

.PP
Definition at line 1207 of file avcodec\&.h\&.
.SS "\fBconst\fP \fBAVCodecDescriptor\fP* AVCodecContext::codec_descriptor"
\fBAVCodecDescriptor\fP Code outside libavcodec should access this field using: av_codec_{get,set}_codec_descriptor(avctx)
.IP "\(bu" 2
encoding: unused\&.
.IP "\(bu" 2
decoding: set by libavcodec\&. 
.PP

.PP
Definition at line 2916 of file avcodec\&.h\&.
.SS "enum \fBAVCodecID\fP AVCodecContext::codec_id"

.PP
Definition at line 1209 of file avcodec\&.h\&.
.SS "char AVCodecContext::codec_name[32]"

.PP
Definition at line 1208 of file avcodec\&.h\&.
.SS "unsigned \fBint\fP AVCodecContext::codec_tag"
fourcc (LSB first, so 'ABCD' -> ('D'<<24) + ('C'<<16) + ('B'<<8) + 'A')\&. This is used to work around some encoder bugs\&. A demuxer should set this to what is stored in the field used to identify the codec\&. If there are multiple such fields in a container then the demuxer should choose the one which maximizes the information about the used codec\&. If the codec tag field in a container is larger than 32 bits then the demuxer should remap the longer ID to 32 bits with a table or other structure\&. Alternatively a new extra_codec_tag + size could be added but for this a clear advantage must be demonstrated first\&.
.IP "\(bu" 2
encoding: Set by user, if not then the default based on codec_id will be used\&.
.IP "\(bu" 2
decoding: Set by user, will be converted to uppercase by libavcodec during init\&. 
.PP

.PP
Definition at line 1224 of file avcodec\&.h\&.
.SS "enum \fBAVMediaType\fP AVCodecContext::codec_type"

.PP
Definition at line 1206 of file avcodec\&.h\&.
.SS "\fBAVFrame\fP* AVCodecContext::coded_frame"
the picture in the bitstream
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2667 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::coded_height"

.PP
Definition at line 1376 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::coded_width"
Bitstream width / height, may be different from width/height e\&.g\&. when the decoded frame is cropped before being output or lowres is enabled\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: May be set by the user before opening the decoder if known e\&.g\&. from the container\&. During decoding, the decoder may overwrite those values as required\&. 
.PP

.PP
Definition at line 1376 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::coder_type"
coder type
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2318 of file avcodec\&.h\&.
.SS "enum \fBAVColorPrimaries\fP AVCodecContext::color_primaries"
Chromaticity coordinates of the source primaries\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: Set by libavcodec 
.PP

.PP
Definition at line 1884 of file avcodec\&.h\&.
.SS "enum \fBAVColorRange\fP AVCodecContext::color_range"
MPEG vs JPEG YUV range\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: Set by libavcodec 
.PP

.PP
Definition at line 1905 of file avcodec\&.h\&.
.SS "enum \fBAVColorTransferCharacteristic\fP AVCodecContext::color_trc"
Color Transfer Characteristic\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: Set by libavcodec 
.PP

.PP
Definition at line 1891 of file avcodec\&.h\&.
.SS "enum \fBAVColorSpace\fP AVCodecContext::colorspace"
YUV colorspace type\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: Set by libavcodec 
.PP

.PP
Definition at line 1898 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::compression_level"

.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1278 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::context_model"
context model
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2325 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::cutoff"
Audio cutoff bandwidth (0 means 'automatic')
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1974 of file avcodec\&.h\&.
.SS "float AVCodecContext::dark_masking"
darkness masking (0-> disabled)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1539 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::dct_algo"
DCT algorithm, see FF_DCT_* below
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2604 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::debug"
debug
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2502 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::debug_mv"
debug Code outside libavcodec should access this field using AVOptions
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2535 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::delay"
Codec delay\&.
.PP
Encoding: Number of frames delay there will be from the encoder input to the decoder output\&. (we assume the decoder matches the spec) Decoding: Number of frames delay in addition to what a standard decoder as specified in the spec would produce\&.
.PP
Video: Number of frames the decoded output will be delayed relative to the encoded input\&.
.PP
Audio: For encoding, this is the number of 'priming' samples added to the beginning of the stream\&. The decoded output will be delayed by this many samples relative to the input to the encoder\&. Note that this field is purely informational and does not directly affect the pts output by the encoder, which should always be based on the actual presentation time, including any delay\&. For decoding, this is the number of samples the decoder needs to output before the decoder's output is valid\&. When seeking, you should start decoding this many samples prior to your desired seek point\&.
.PP
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1354 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::dia_size"
ME diamond size & shape
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1619 of file avcodec\&.h\&.
.SS "\fBvoid\fP(* AVCodecContext::draw_horiz_band) (struct \fBAVCodecContext\fP *\fBs\fP, \fBconst\fP \fBAVFrame\fP *src, \fBint\fP \fBoffset\fP[\fBAV_NUM_DATA_POINTERS\fP], \fBint\fP y, \fBint\fP type, \fBint\fP \fBheight\fP)"
If non NULL, 'draw_horiz_band' is called by the libavcodec decoder to draw a horizontal band\&. It improves cache usage\&. Not all codecs can do that\&. You must check the codec capabilities beforehand\&. When multithreading is used, it may be called from multiple threads at the same time; threads might draw different parts of the same \fBAVFrame\fP, or multiple AVFrames, and there is no guarantee that slices will be drawn in order\&. The function is also used by hardware acceleration APIs\&. It is called at least once during frame decoding to pass the data needed for hardware render\&. In that mode instead of pixel data, \fBAVFrame\fP points to a structure specific to the acceleration API\&. The application reads the structure and can change some fields to indicate progress or mark state\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIheight\fP the height of the slice 
.br
\fIy\fP the y position of the slice 
.br
\fItype\fP 1->top field, 2->bottom field, 3->frame 
.br
\fIoffset\fP offset into the \fBAVFrame\&.data\fP from which the slice should be read 
.RE
.PP

.PP

.PP
Definition at line 1430 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::dtg_active_format"
DTG active format information (additional aspect ratio information only used in DVB MPEG-2 transport streams) 0 if not set\&.
.PP
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by decoder\&. 
.PP

.PP
Definition at line 1664 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::err_recognition"
Error recognition; may misdetect some more or less valid parts as errors\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2546 of file avcodec\&.h\&.
.SS "\fBuint64_t\fP AVCodecContext::error[\fBAV_NUM_DATA_POINTERS\fP]"
error
.IP "\(bu" 2
encoding: Set by libavcodec if flags&CODEC_FLAG_PSNR\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2597 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::error_concealment"
error concealment flags
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2493 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBint\fP AVCodecContext::error_rate"

.PP
\fBDeprecated\fP
.RS 4
use the 'error_rate' private \fBAVOption\fP of the mpegvideo encoders 
.RE
.PP

.PP
Definition at line 2881 of file avcodec\&.h\&.
.SS "\fBint\fP(* AVCodecContext::execute) (struct \fBAVCodecContext\fP *\fBc\fP, \fBint\fP(*func)(struct \fBAVCodecContext\fP *\fBc2\fP, \fBvoid\fP *arg), \fBvoid\fP *arg2, \fBint\fP *ret, \fBint\fP \fBcount\fP, \fBint\fP \fBsize\fP)"
The codec may call this to execute several independent things\&. It will return only after finishing all tasks\&. The user may replace this with some multithreaded implementation, the default implementation will execute the parts serially\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP the number of things to execute
.IP "\(bu" 2
encoding: Set by libavcodec, user can override\&.
.IP "\(bu" 2
decoding: Set by libavcodec, user can override\&. 
.PP
.RE
.PP

.PP
Definition at line 2715 of file avcodec\&.h\&.
.SS "\fBint\fP(* AVCodecContext::execute2) (struct \fBAVCodecContext\fP *\fBc\fP, \fBint\fP(*func)(struct \fBAVCodecContext\fP *\fBc2\fP, \fBvoid\fP *arg, \fBint\fP jobnr, \fBint\fP threadnr), \fBvoid\fP *arg2, \fBint\fP *ret, \fBint\fP \fBcount\fP)"
The codec may call this to execute several independent things\&. It will return only after finishing all tasks\&. The user may replace this with some multithreaded implementation, the default implementation will execute the parts serially\&. Also see avcodec_thread_init and e\&.g\&. the --enable-pthread configure option\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP context passed also to func 
.br
\fIcount\fP the number of things to execute 
.br
\fIarg2\fP argument passed unchanged to func 
.br
\fIret\fP return values of executed functions, must have space for 'count' values\&. May be NULL\&. 
.br
\fIfunc\fP function that will be called count times, with jobnr from 0 to count-1\&. threadnr will be in the range 0 to c->thread_count-1 < MAX_THREADS and so that no two instances of func executing at the same time will have the same threadnr\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
always 0 currently, but code should handle a future improvement where when any call to func returns < 0 no further calls to func may be done and < 0 is returned\&.
.IP "\(bu" 2
encoding: Set by libavcodec, user can override\&.
.IP "\(bu" 2
decoding: Set by libavcodec, user can override\&. 
.PP
.RE
.PP

.PP
Definition at line 2735 of file avcodec\&.h\&.
.SS "\fBuint8_t\fP* AVCodecContext::extradata"
some codecs need / can use extradata like Huffman tables\&. mjpeg: Huffman tables rv10: additional flags mpeg4: global headers (they can be in the bitstream or here) The allocated memory should be FF_INPUT_BUFFER_PADDING_SIZE bytes larger than extradata_size to avoid problems if it is read with the bitstream reader\&. The bytewise contents of extradata must not depend on the architecture or CPU endianness\&.
.IP "\(bu" 2
encoding: Set/allocated/freed by libavcodec\&.
.IP "\(bu" 2
decoding: Set/allocated/freed by user\&. 
.PP

.PP
Definition at line 1306 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::extradata_size"

.PP
Definition at line 1307 of file avcodec\&.h\&.
.SS "enum \fBAVFieldOrder\fP AVCodecContext::field_order"
Field order
.IP "\(bu" 2
encoding: set by libavcodec
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1927 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::flags"
CODEC_FLAG_*\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1286 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::flags2"
CODEC_FLAG2_*
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1293 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_bits"
number of bits used for the previously encoded frame
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2425 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_number"
Frame counter, set by libavcodec\&.
.PP
.IP "\(bu" 2
decoding: total number of frames returned from the decoder so far\&.
.IP "\(bu" 2
encoding: total number of frames passed to the encoder so far\&.
.PP
\fBNote:\fP
.RS 4
the counter is not incremented if encoding/decoding resulted in an error\&. 
.RE
.PP

.PP

.PP
Definition at line 1961 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_size"
Number of samples per channel in an audio frame\&.
.PP
.IP "\(bu" 2
encoding: set by libavcodec in \fBavcodec_open2()\fP\&. Each submitted frame except the last must contain exactly frame_size samples per channel\&. May be 0 when the codec has CODEC_CAP_VARIABLE_FRAME_SIZE set, then the frame size is not restricted\&.
.IP "\(bu" 2
decoding: may be set by some decoders to indicate constant frame size 
.PP

.PP
Definition at line 1950 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_skip_cmp"
frame skip comparison function
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2367 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_skip_exp"
frame skip exponent
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2360 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_skip_factor"
frame skip factor
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2353 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::frame_skip_threshold"
frame skip threshold
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2346 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBint\fP(* AVCodecContext::get_buffer) (struct \fBAVCodecContext\fP *\fBc\fP, \fBAVFrame\fP *pic)"
Called at the beginning of each frame to get a buffer for it\&.
.PP
The function will set \fBAVFrame\&.data\fP[], \fBAVFrame\&.linesize\fP[]\&. \fBAVFrame\&.extended_data\fP[] must also be set, but it should be the same as \fBAVFrame\&.data\fP[] except for planar audio with more channels than can fit in \fBAVFrame\&.data\fP[]\&. In that case, \fBAVFrame\&.data\fP[] shall still contain as many data pointers as it can hold\&.
.PP
if CODEC_CAP_DR1 is not set then \fBget_buffer()\fP must call \fBavcodec_default_get_buffer()\fP instead of providing buffers allocated by some other means\&.
.PP
\fBAVFrame\&.data\fP[] should be 32- or 16-byte-aligned unless the CPU doesn't need it\&. \fBavcodec_default_get_buffer()\fP aligns the output buffer properly, but if \fBget_buffer()\fP is overridden then alignment considerations should be taken into account\&.
.PP
\fBSee also:\fP
.RS 4
\fBavcodec_default_get_buffer()\fP
.RE
.PP
Video:
.PP
If pic\&.reference is set then the frame will be read later by libavcodec\&. \fBavcodec_align_dimensions2()\fP should be used to find the required width and height, as they normally need to be rounded up to the next multiple of 16\&.
.PP
If frame multithreading is used and thread_safe_callbacks is set, it may be called from a different thread, but not from more than one at once\&. Does not need to be reentrant\&.
.PP
\fBSee also:\fP
.RS 4
\fBrelease_buffer()\fP, \fBreget_buffer()\fP 
.PP
\fBavcodec_align_dimensions2()\fP
.RE
.PP
Audio:
.PP
Decoders request a buffer of a particular size by setting \fBAVFrame\&.nb_samples\fP prior to calling \fBget_buffer()\fP\&. The decoder may, however, utilize only part of the buffer by setting \fBAVFrame\&.nb_samples\fP to a smaller value in the output frame\&.
.PP
Decoders cannot use the buffer after returning from \fBavcodec_decode_audio4()\fP, so they will not call \fBrelease_buffer()\fP, as it is assumed to be released immediately upon return\&. In some rare cases, a decoder may need to call \fBget_buffer()\fP more than once in a single call to \fBavcodec_decode_audio4()\fP\&. In that case, when \fBget_buffer()\fP is called again after it has already been called once, the previously acquired buffer is assumed to be released at that time and may not be reused by the decoder\&.
.PP
As a convenience, \fBav_samples_get_buffer_size()\fP and \fBav_samples_fill_arrays()\fP in libavutil may be used by custom \fBget_buffer()\fP functions to find the required data size and to fill data pointers and linesize\&. In \fBAVFrame\&.linesize\fP, only linesize[0] may be set for audio since all planes must be the same size\&.
.PP
\fBSee also:\fP
.RS 4
\fBav_samples_get_buffer_size()\fP, \fBav_samples_fill_arrays()\fP
.RE
.PP
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by libavcodec, user can override\&.
.PP
.PP
\fBDeprecated\fP
.RS 4
use \fBget_buffer2()\fP 
.RE
.PP

.PP
Definition at line 2079 of file avcodec\&.h\&.
.SS "\fBint\fP(* AVCodecContext::get_buffer2) (struct \fBAVCodecContext\fP *\fBs\fP, \fBAVFrame\fP *frame, \fBint\fP \fBflags\fP)"
This callback is called at the beginning of each frame to get data \fBbuffer(s)\fP for it\&. There may be one contiguous buffer for all the data or there may be a buffer per each data plane or anything in between\&. What this means is, you may set however many entries in buf[] you feel necessary\&. Each buffer must be reference-counted using the AVBuffer API (see description of buf[] below)\&.
.PP
The following fields will be set in the frame before this callback is called:
.IP "\(bu" 2
format
.IP "\(bu" 2
width, height (video only)
.IP "\(bu" 2
sample_rate, channel_layout, nb_samples (audio only) Their values may differ from the corresponding values in \fBAVCodecContext\fP\&. This callback must use the frame values, not the codec context values, to calculate the required buffer size\&.
.PP
.PP
This callback must fill the following fields in the frame:
.IP "\(bu" 2
data[]
.IP "\(bu" 2
linesize[]
.IP "\(bu" 2
extended_data:
.IP "  \(bu" 4
if the data is planar audio with more than 8 channels, then this callback must allocate and fill extended_data to contain all pointers to all data planes\&. data[] must hold as many pointers as it can\&. extended_data must be allocated with \fBav_malloc()\fP and will be freed in \fBav_frame_unref()\fP\&.
.IP "  \(bu" 4
otherwise exended_data must point to data
.PP

.IP "\(bu" 2
buf[] must contain one or more pointers to \fBAVBufferRef\fP structures\&. Each of the frame's data and extended_data pointers must be contained in these\&. That is, one \fBAVBufferRef\fP for each allocated chunk of memory, not necessarily one \fBAVBufferRef\fP per data[] entry\&. See: \fBav_buffer_create()\fP, \fBav_buffer_alloc()\fP, and \fBav_buffer_ref()\fP\&.
.IP "\(bu" 2
extended_buf and nb_extended_buf must be allocated with \fBav_malloc()\fP by this callback and filled with the extra buffers if there are more buffers than buf[] can hold\&. extended_buf will be freed in \fBav_frame_unref()\fP\&.
.PP
.PP
If CODEC_CAP_DR1 is not set then \fBget_buffer2()\fP must call \fBavcodec_default_get_buffer2()\fP instead of providing buffers allocated by some other means\&.
.PP
Each data plane must be aligned to the maximum required by the target CPU\&.
.PP
\fBSee also:\fP
.RS 4
\fBavcodec_default_get_buffer2()\fP
.RE
.PP
Video:
.PP
If AV_GET_BUFFER_FLAG_REF is set in flags then the frame may be reused (read and/or written to if it is writable) later by libavcodec\&.
.PP
\fBavcodec_align_dimensions2()\fP should be used to find the required width and height, as they normally need to be rounded up to the next multiple of 16\&.
.PP
Some decoders do not support linesizes changing between frames\&.
.PP
If frame multithreading is used and thread_safe_callbacks is set, this callback may be called from a different thread, but not from more than one at once\&. Does not need to be reentrant\&.
.PP
\fBSee also:\fP
.RS 4
\fBavcodec_align_dimensions2()\fP
.RE
.PP
Audio:
.PP
Decoders request a buffer of a particular size by setting \fBAVFrame\&.nb_samples\fP prior to calling \fBget_buffer2()\fP\&. The decoder may, however, utilize only part of the buffer by setting \fBAVFrame\&.nb_samples\fP to a smaller value in the output frame\&.
.PP
As a convenience, \fBav_samples_get_buffer_size()\fP and \fBav_samples_fill_arrays()\fP in libavutil may be used by custom \fBget_buffer2()\fP functions to find the required data size and to fill data pointers and linesize\&. In \fBAVFrame\&.linesize\fP, only linesize[0] may be set for audio since all planes must be the same size\&.
.PP
\fBSee also:\fP
.RS 4
\fBav_samples_get_buffer_size()\fP, \fBav_samples_fill_arrays()\fP
.RE
.PP
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by libavcodec, user can override\&. 
.PP

.PP
Definition at line 2191 of file avcodec\&.h\&.
.SS "enum \fBAVPixelFormat\fP(* AVCodecContext::get_format) (struct \fBAVCodecContext\fP *\fBs\fP, \fBconst\fP enum \fBAVPixelFormat\fP *fmt)"
callback to negotiate the pixelFormat 
.PP
\fBParameters:\fP
.RS 4
\fIfmt\fP is the list of formats which are supported by the codec, it is terminated by -1 as 0 is a valid format, the formats are ordered by quality\&. The first is always the native one\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the chosen format
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user, if not set the native format will be chosen\&. 
.PP
.RE
.PP

.PP
Definition at line 1443 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::global_quality"
Global quality for codecs which cannot change it per frame\&. This should be proportional to MPEG-1/2/4 qscale\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1272 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::gop_size"
the number of pictures in a group of pictures, or 0 for intra_only
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1387 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::has_b_frames"
Size of the frame reordering buffer in the decoder\&. For MPEG-2 it is 1 IPB or 0 low delay IP\&.
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1481 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::header_bits"

.PP
Definition at line 2412 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::height"

.PP
Definition at line 1366 of file avcodec\&.h\&.
.SS "struct \fBAVHWAccel\fP* AVCodecContext::hwaccel"
Hardware accelerator in use
.IP "\(bu" 2
encoding: unused\&.
.IP "\(bu" 2
decoding: Set by libavcodec 
.PP

.PP
Definition at line 2578 of file avcodec\&.h\&.
.SS "\fBvoid\fP* AVCodecContext::hwaccel_context"
Hardware accelerator context\&. For some hardware accelerators, a global context needs to be provided by the user\&. In that case, this holds display-dependent data FFmpeg cannot instantiate itself\&. Please refer to the FFmpeg HW accelerator documentation to know how to fill this is\&. e\&.g\&. for VA API, this is a struct \fBvaapi_context\fP\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user 
.PP

.PP
Definition at line 2590 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::i_count"

.PP
Definition at line 2415 of file avcodec\&.h\&.
.SS "float AVCodecContext::i_quant_factor"
qscale factor between P and I-frames If > 0 then the last p frame quantizer will be used (q= lastp_q*factor+offset)\&. If < 0 then normal ratecontrol will be done (q= -normal_q*factor+offset)\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1497 of file avcodec\&.h\&.
.SS "float AVCodecContext::i_quant_offset"
qscale offset between P and I-frames
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1504 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::i_tex_bits"

.PP
Definition at line 2413 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::idct_algo"
IDCT algorithm, see FF_IDCT_* below\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2617 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::ildct_cmp"
interlaced DCT comparison function
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1596 of file avcodec\&.h\&.
.SS "\fBuint16_t\fP* AVCodecContext::inter_matrix"
custom inter quantization matrix
.IP "\(bu" 2
encoding: Set by user, can be NULL\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1739 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::inter_quant_bias"
inter quantizer bias
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1695 of file avcodec\&.h\&.
.SS "struct AVCodecInternal* AVCodecContext::internal"
Private context used for internal data\&.
.PP
Unlike priv_data, this is not codec-specific\&. It is used in general libavcodec functions\&. 
.PP
Definition at line 1242 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::intra_dc_precision"
precision of the intra DC coefficient - 8
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1777 of file avcodec\&.h\&.
.SS "\fBuint16_t\fP* AVCodecContext::intra_matrix"
custom intra quantization matrix
.IP "\(bu" 2
encoding: Set by user, can be NULL\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1732 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::intra_quant_bias"
intra quantizer bias
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1687 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::keyint_min"
minimum GOP size
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1841 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::last_predictor_count"
amount of previous MV predictors (2a+1 x 2a+1 square)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1626 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::level"
level
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 2840 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::lmax"
maximum Lagrange multipler
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2339 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::lmin"
minimum Lagrange multipler
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2332 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::log_level_offset"

.PP
Definition at line 1204 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::lowres"
low resolution decoding, 1-> 1/2 size, 2->1/4 size
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. Code outside libavcodec should access this field using: av_codec_{get,set}_lowres(avctx) 
.PP

.PP
Definition at line 2659 of file avcodec\&.h\&.
.SS "float AVCodecContext::lumi_masking"
luminance masking (0-> disabled)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1511 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::max_b_frames"
maximum number of B-frames between non-B-frames Note: The output will be delayed by max_b_frames+1 relative to the input\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1451 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::max_prediction_order"

.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2386 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::max_qdiff"
maximum quantizer difference between frames
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2229 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mb_cmp"
macroblock comparison function (not supported yet)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1590 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mb_decision"
macroblock decision mode
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1722 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mb_lmax"
maximum MB lagrange multipler
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1813 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mb_lmin"
minimum MB lagrange multipler
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1806 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mb_threshold"
Macroblock threshold below which the user specified macroblock types will be used\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1770 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_cmp"
motion estimation comparison function
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1578 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_method"
Motion estimation algorithm used for video coding\&. 1 (zero), 2 (full), 3 (log), 4 (phods), 5 (epzs), 6 (x1), 7 (hex), 8 (umh), 9 (iter), 10 (tesa) [7, 8, 10 are x264 specific, 9 is snow specific]
.IP "\(bu" 2
encoding: MUST be set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1405 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_penalty_compensation"

.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1820 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_pre_cmp"
motion estimation prepass comparison function
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1640 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_range"
maximum motion estimation search range in subpel units If 0 then no limit\&.
.PP
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1680 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_sub_cmp"
subpixel motion estimation comparison function
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1584 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_subpel_quality"
subpel ME quality
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1654 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::me_threshold"
Motion estimation threshold below which no motion estimation is performed, but instead the user specified motion vectors are used\&.
.PP
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1763 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::min_prediction_order"

.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2380 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::misc_bits"

.PP
Definition at line 2418 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mpeg_quant"
0-> h263 quant 1-> mpeg quant
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1488 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mv0_threshold"
Note: Value depends upon the compare function used for fullpel ME\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1870 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::mv_bits"

.PP
Definition at line 2411 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::noise_reduction"
noise reduction strength
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1754 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::nsse_weight"
noise vs\&. sse weight for the nsse comparsion function
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2750 of file avcodec\&.h\&.
.SS "\fBvoid\fP* AVCodecContext::opaque"
Private data of the user, can be used to carry app specific stuff\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1249 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::p_count"

.PP
Definition at line 2416 of file avcodec\&.h\&.
.SS "float AVCodecContext::p_masking"
p block masking (0-> disabled)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1532 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::p_tex_bits"

.PP
Definition at line 2414 of file avcodec\&.h\&.
.SS "enum \fBAVPixelFormat\fP AVCodecContext::pix_fmt"
Pixel format, see AV_PIX_FMT_xxx\&. May be set by the demuxer if known from headers\&. May be overridden by the decoder if it knows better\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user if known, overridden by libavcodec if known 
.PP

.PP
Definition at line 1396 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBAVPacket\fP* AVCodecContext::pkt"

.PP
\fBDeprecated\fP
.RS 4
this field is not supposed to be accessed from outside lavc 
.RE
.PP

.PP
Definition at line 2889 of file avcodec\&.h\&.
.SS "\fBAVRational\fP AVCodecContext::pkt_timebase"
Timebase in which pkt_dts/pts and \fBAVPacket\&.dts\fP/pts are\&. Code outside libavcodec should access this field using: av_codec_{get,set}_pkt_timebase(avctx)
.IP "\(bu" 2
encoding unused\&.
.IP "\(bu" 2
decoding set by user\&. 
.PP

.PP
Definition at line 2907 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::pre_dia_size"
ME prepass diamond size & shape
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1647 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::pre_me"
prepass for motion estimation
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1633 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::prediction_method"
prediction method (needed for huffyuv)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1552 of file avcodec\&.h\&.
.SS "\fBvoid\fP* AVCodecContext::priv_data"

.PP
Definition at line 1234 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::profile"
profile
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 2757 of file avcodec\&.h\&.
.SS "\fBint64_t\fP AVCodecContext::pts_correction_last_dts"

.PP
PTS of the last frame\&. 
.PP
Definition at line 2937 of file avcodec\&.h\&.
.SS "\fBint64_t\fP AVCodecContext::pts_correction_last_pts"

.PP
Number of incorrect DTS values so far\&. 
.PP
Definition at line 2936 of file avcodec\&.h\&.
.SS "\fBint64_t\fP AVCodecContext::pts_correction_num_faulty_dts"

.PP
Number of incorrect PTS values so far\&. 
.PP
Definition at line 2935 of file avcodec\&.h\&.
.SS "\fBint64_t\fP AVCodecContext::pts_correction_num_faulty_pts"
Current statistics for PTS correction\&.
.IP "\(bu" 2
decoding: maintained and used by libavcodec, not intended to be used by user apps
.IP "\(bu" 2
encoding: unused 
.PP

.PP
Definition at line 2934 of file avcodec\&.h\&.
.SS "float AVCodecContext::qblur"

.PP
amount of qscale smoothing over time (0\&.0-1\&.0) 
.PP
Definition at line 2208 of file avcodec\&.h\&.
.SS "float AVCodecContext::qcompress"

.PP
amount of qscale change between easy & hard scenes (0\&.0-1\&.0) 
.PP
Definition at line 2207 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::qmax"
maximum quantizer
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2222 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::qmin"
minimum quantizer
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2215 of file avcodec\&.h\&.
.SS "float AVCodecContext::rc_buffer_aggressivity"

.PP
Definition at line 2278 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_buffer_size"
decoder bitstream buffer size
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2247 of file avcodec\&.h\&.
.SS "\fBconst\fP char* AVCodecContext::rc_eq"
rate control equation
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2262 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_initial_buffer_occupancy"
Number of bits which should be loaded into the rc buffer before decoding starts\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2306 of file avcodec\&.h\&.
.SS "float AVCodecContext::rc_initial_cplx"
initial complexity for pass1 ratecontrol
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2285 of file avcodec\&.h\&.
.SS "float AVCodecContext::rc_max_available_vbv_use"
Ratecontrol attempt to use, at maximum, 
.PP
of what can be used without an underflow\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused\&. 
.PP

.PP
Definition at line 2292 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_max_rate"
maximum bitrate
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2269 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_min_rate"
minimum bitrate
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2276 of file avcodec\&.h\&.
.SS "float AVCodecContext::rc_min_vbv_overflow_use"
Ratecontrol attempt to use, at least, 
.PP
times the amount needed to prevent a vbv overflow\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused\&. 
.PP

.PP
Definition at line 2299 of file avcodec\&.h\&.
.SS "\fBRcOverride\fP* AVCodecContext::rc_override"

.PP
Definition at line 2255 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_override_count"
ratecontrol override, see \fBRcOverride\fP
.IP "\(bu" 2
encoding: Allocated/set/freed by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2254 of file avcodec\&.h\&.
.SS "float AVCodecContext::rc_qmod_amp"

.PP
Definition at line 2239 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_qmod_freq"

.PP
Definition at line 2240 of file avcodec\&.h\&.
.SS "float AVCodecContext::rc_qsquish"
ratecontrol qmin qmax limiting method 0-> clipping, 1-> use a nice continuous function to limit qscale wthin qmin/qmax\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2237 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rc_strategy"
obsolete FIXME remove 
.PP
Definition at line 1463 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::refcounted_frames"
If non-zero, the decoded audio and video frames returned from \fBavcodec_decode_video2()\fP and \fBavcodec_decode_audio4()\fP are reference-counted and are valid indefinitely\&. The caller must free them with \fBav_frame_unref()\fP when they are not needed anymore\&. Otherwise, the decoded frames must not be freed by the caller and are only valid until the next decode call\&.
.PP
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: set by the caller before \fBavcodec_open2()\fP\&. 
.PP

.PP
Definition at line 2204 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::refs"
number of reference frames
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by lavc\&. 
.PP

.PP
Definition at line 1848 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBint\fP(* AVCodecContext::reget_buffer) (struct \fBAVCodecContext\fP *\fBc\fP, \fBAVFrame\fP *pic)"
Called at the beginning of a frame to get cr buffer for it\&. Buffer type (size, hints) must be the same\&. libavcodec won't check it\&. libavcodec will pass previous buffer in pic, function should return same buffer or new buffer with old frame 'painted' into it\&. If pic\&.data[0] == NULL must behave like \fBget_buffer()\fP\&. if CODEC_CAP_DR1 is not set then \fBreget_buffer()\fP must call \fBavcodec_default_reget_buffer()\fP instead of providing buffers allocated by some other means\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by libavcodec, user can override\&. 
.PP

.PP
Definition at line 2108 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBvoid\fP(* AVCodecContext::release_buffer) (struct \fBAVCodecContext\fP *\fBc\fP, \fBAVFrame\fP *pic)"
Called to release buffers which were allocated with get_buffer\&. A released buffer can be reused in \fBget_buffer()\fP\&. pic\&.data[*] must be set to NULL\&. May be called from a different thread if frame multithreading is used, but not by more than one thread at once, so does not need to be reentrant\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by libavcodec, user can override\&.
.PP
.PP
\fBDeprecated\fP
.RS 4
custom freeing callbacks should be set from \fBget_buffer2()\fP 
.RE
.PP

.PP
Definition at line 2093 of file avcodec\&.h\&.
.SS "\fBint64_t\fP AVCodecContext::reordered_opaque"
opaque 64bit number (generally a PTS) that will be reordered and output in \fBAVFrame\&.reordered_opaque\fP 
.PP
\fBDeprecated\fP
.RS 4
in favor of pkt_pts
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP
.RE
.PP

.PP
Definition at line 2571 of file avcodec\&.h\&.
.SS "\fBuint64_t\fP AVCodecContext::request_channel_layout"
Request decoder to use this channel layout if it can (0 for default)
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1998 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBint\fP AVCodecContext::request_channels"
\fBDecoder\fP should decode to this many channels if it can (0 for default)
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP
\fBDeprecated\fP
.RS 4
Deprecated in favor of request_channel_layout\&. 
.RE
.PP

.PP

.PP
Definition at line 1983 of file avcodec\&.h\&.
.SS "enum \fBAVSampleFormat\fP AVCodecContext::request_sample_fmt"
desired sample format
.IP "\(bu" 2
encoding: Not used\&.
.IP "\(bu" 2
decoding: Set by user\&. \fBDecoder\fP will decode to this format if it can\&. 
.PP

.PP
Definition at line 2013 of file avcodec\&.h\&.
.SS "\fBvoid\fP(* AVCodecContext::rtp_callback) (struct \fBAVCodecContext\fP *avctx, \fBvoid\fP *\fBdata\fP, \fBint\fP \fBsize\fP, \fBint\fP mb_nb)"

.PP
Definition at line 2401 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::rtp_payload_size"

.PP
Definition at line 2403 of file avcodec\&.h\&.
.SS "\fBAVRational\fP AVCodecContext::sample_aspect_ratio"
sample aspect ratio (0 if unknown) That is the width of a pixel divided by the height of the pixel\&. Numerator and denominator must be relatively prime and smaller than 256 for some video standards\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1571 of file avcodec\&.h\&.
.SS "enum \fBAVSampleFormat\fP AVCodecContext::sample_fmt"

.PP
sample format audio sample format
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1938 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::sample_rate"

.PP
samples per second 
.PP
Definition at line 1930 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::scenechange_factor"
Multiplied by qscale for each frame and added to scene_change_score\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1862 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::scenechange_threshold"
scene change detection threshold 0 is default, larger means fewer detected scene changes\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1747 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::seek_preroll"
Number of samples to skip after a discontinuity
.IP "\(bu" 2
decoding: unused
.IP "\(bu" 2
encoding: set by libavcodec 
.PP

.PP
Definition at line 2977 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::skip_alpha"
Skip processing alpha if supported by codec\&. Note that if the format uses pre-multiplied alpha (common with VP6, and recommended due to better video quality/compression) the image will look as if alpha-blended onto a black background\&. However for formats that do not use pre-multiplied alpha there might be serious artefacts (though e\&.g\&. libswscale currently assumes pre-multiplied alpha anyway)\&. Code outside libavcodec should access this field using AVOptions
.PP
.IP "\(bu" 2
decoding: set by user
.IP "\(bu" 2
encoding: unused 
.PP

.PP
Definition at line 2970 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::skip_bottom"
Number of macroblock rows at the bottom which are skipped\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1791 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::skip_count"

.PP
Definition at line 2417 of file avcodec\&.h\&.
.SS "enum \fBAVDiscard\fP AVCodecContext::skip_frame"
Skip decoding for selected frames\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2862 of file avcodec\&.h\&.
.SS "enum \fBAVDiscard\fP AVCodecContext::skip_idct"
Skip IDCT/dequantization for selected frames\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2855 of file avcodec\&.h\&.
.SS "enum \fBAVDiscard\fP AVCodecContext::skip_loop_filter"
Skip loop filtering for selected frames\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2848 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::skip_top"
Number of macroblock rows at the top which are skipped\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1784 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::slice_count"
slice count
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: Set by user (or 0)\&. 
.PP

.PP
Definition at line 1546 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::slice_flags"
slice flags
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 1702 of file avcodec\&.h\&.
.SS "\fBint\fP* AVCodecContext::slice_offset"
slice offsets in the frame in bytes
.IP "\(bu" 2
encoding: Set/allocated by libavcodec\&.
.IP "\(bu" 2
decoding: Set/allocated by user (or NULL)\&. 
.PP

.PP
Definition at line 1562 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::slices"
Number of slices\&. Indicates number of picture subdivisions\&. Used for parallelized decoding\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1921 of file avcodec\&.h\&.
.SS "float AVCodecContext::spatial_cplx_masking"
spatial complexity masking (0-> disabled)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1525 of file avcodec\&.h\&.
.SS "char* AVCodecContext::stats_in"
pass2 encoding statistics input buffer Concatenated stuff from stats_out of pass1 should be placed here\&.
.IP "\(bu" 2
encoding: Allocated/set/freed by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2440 of file avcodec\&.h\&.
.SS "char* AVCodecContext::stats_out"
pass1 encoding statistics output buffer
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2432 of file avcodec\&.h\&.
.SS "unsigned \fBint\fP AVCodecContext::stream_codec_tag"
fourcc from the AVI stream header (LSB first, so 'ABCD' -> ('D'<<24) + ('C'<<16) + ('B'<<8) + 'A')\&. This is used to work around some encoder bugs\&.
.IP "\(bu" 2
encoding: unused
.IP "\(bu" 2
decoding: Set by user, will be converted to uppercase by libavcodec during init\&. 
.PP

.PP
Definition at line 1232 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::strict_std_compliance"
strictly follow the standard (MPEG4, \&.\&.\&.)\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. Setting this to STRICT or higher means the encoder and decoder will generally do stupid things, whereas setting it to unofficial or lower will mean the encoder might produce output that is not supported by all spec-compliant decoders\&. Decoders don't differentiate between normal, unofficial and experimental (that is, they always try to decode things when they can) unless they are explicitly asked to behave stupidly (=strictly conform to the specs) 
.PP

.PP
Definition at line 2481 of file avcodec\&.h\&.
.SS "char* AVCodecContext::sub_charenc"

.PP
DTS of the last frame\&. Character encoding of the input subtitles file\&.
.IP "\(bu" 2
decoding: set by user
.IP "\(bu" 2
encoding: unused 
.PP

.PP
Definition at line 2944 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::sub_charenc_mode"
Subtitles character encoding mode\&. Formats or codecs might be adjusting this setting (if they are doing the conversion themselves for instance)\&.
.IP "\(bu" 2
decoding: set by libavcodec
.IP "\(bu" 2
encoding: unused 
.PP

.PP
Definition at line 2952 of file avcodec\&.h\&.
.SS "\fBuint8_t\fP* AVCodecContext::subtitle_header"
Header containing style information for text subtitles\&. For SUBTITLE_ASS subtitle type, it should contain the whole ASS [Script Info] and [V4+ Styles] section, plus the [Events] line and the \fBFormat\fP line following\&. It shouldn't include any Dialogue line\&.
.IP "\(bu" 2
encoding: Set/allocated/freed by user (before \fBavcodec_open2()\fP)
.IP "\(bu" 2
decoding: Set/allocated/freed by libavcodec (by \fBavcodec_open2()\fP) 
.PP

.PP
Definition at line 2872 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::subtitle_header_size"

.PP
Definition at line 2873 of file avcodec\&.h\&.
.SS "float AVCodecContext::temporal_cplx_masking"
temporary complexity masking (0-> disabled)
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 1518 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::thread_count"
thread count is used to decide how many independent tasks should be passed to \fBexecute()\fP
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2675 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBvoid\fP* AVCodecContext::thread_opaque"

.PP
\fBDeprecated\fP
.RS 4
this field should not be used from outside of lavc 
.RE
.PP

.PP
Definition at line 2742 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::thread_safe_callbacks"
Set by the client if its custom \fBget_buffer()\fP callback can be called synchronously from another thread, which allows faster multithreaded decoding\&. \fBdraw_horiz_band()\fP will be called from other threads regardless of this setting\&. Ignored if the default \fBget_buffer()\fP is used\&.
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: Set by user\&. 
.PP

.PP
Definition at line 2704 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::thread_type"
Which multithreading methods to use\&. Use of FF_THREAD_FRAME will increase decoding delay by one frame per thread, so clients which cannot provide future frames should not use it\&.
.PP
.IP "\(bu" 2
encoding: Set by user, otherwise the default is used\&.
.IP "\(bu" 2
decoding: Set by user, otherwise the default is used\&. 
.PP

.PP
Definition at line 2685 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::ticks_per_frame"
For some codecs, the time base is closer to the field rate than the frame rate\&. Most notably, H\&.264 and MPEG-2 specify time_base as half of frame duration if no telecine is used \&.\&.\&.
.PP
Set to time_base ticks per frame\&. Default 1, e\&.g\&., H\&.264/MPEG-2 set it to 2\&. 
.PP
Definition at line 1326 of file avcodec\&.h\&.
.SS "\fBAVRational\fP AVCodecContext::time_base"
This is the fundamental unit of time (in seconds) in terms of which frame timestamps are represented\&. For fixed-fps content, timebase should be 1/framerate and timestamp increments should be identically 1\&.
.IP "\(bu" 2
encoding: MUST be set by user\&.
.IP "\(bu" 2
decoding: Set by libavcodec\&. 
.PP

.PP
Definition at line 1317 of file avcodec\&.h\&.
.SS "\fBint64_t\fP AVCodecContext::timecode_frame_start"
GOP timecode frame start number
.IP "\(bu" 2
encoding: Set by user, in non drop frame format
.IP "\(bu" 2
decoding: Set by libavcodec (timecode in the 25 bits format, -1 if unset) 
.PP

.PP
Definition at line 2393 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::trellis"
trellis RD quantization
.IP "\(bu" 2
encoding: Set by user\&.
.IP "\(bu" 2
decoding: unused 
.PP

.PP
Definition at line 2374 of file avcodec\&.h\&.
.SS "\fBuint64_t\fP AVCodecContext::vbv_delay"
VBV delay coded in the last frame (in periods of a 27 MHz clock)\&. Used for compliant TS muxing\&.
.IP "\(bu" 2
encoding: Set by libavcodec\&.
.IP "\(bu" 2
decoding: unused\&. 
.PP

.PP
Definition at line 2898 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::width"
picture width / height\&.
.IP "\(bu" 2
encoding: MUST be set by user\&.
.IP "\(bu" 2
decoding: May be set by the user before opening the decoder if known e\&.g\&. from the container\&. Some decoders will require the dimensions to be set by the caller\&. During decoding, the decoder may overwrite those values as required\&. 
.PP

.PP
Definition at line 1366 of file avcodec\&.h\&.
.SS "\fBint\fP AVCodecContext::workaround_bugs"
Work around bugs in encoders which sometimes cannot be detected automatically\&.
.IP "\(bu" 2
encoding: Set by user
.IP "\(bu" 2
decoding: Set by user 
.PP

.PP
Definition at line 2447 of file avcodec\&.h\&.
.SS "\fBattribute_deprecated\fP \fBint\fP AVCodecContext::xvmc_acceleration"
XVideo Motion Acceleration
.IP "\(bu" 2
encoding: forbidden
.IP "\(bu" 2
decoding: set by decoder 
.PP
\fBDeprecated\fP
.RS 4
XvMC doesn't need it anymore\&. 
.RE
.PP

.PP

.PP
Definition at line 1714 of file avcodec\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
