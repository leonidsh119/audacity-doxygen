.TH "flac_stream_encoder" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
flac_stream_encoder \- FLAC/stream_encoder\&.h: stream encoder interface
.PP
This module contains the functions which implement the stream encoder\&.  

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBFLAC__StreamEncoder\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBFLAC__StreamEncoderReadStatus\fP(* \fBFLAC__StreamEncoderReadCallback\fP) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__byte\fP \fBbuffer\fP[], size_t *bytes, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "typedef \fBFLAC__StreamEncoderWriteStatus\fP(* \fBFLAC__StreamEncoderWriteCallback\fP) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP \fBFLAC__byte\fP \fBbuffer\fP[], size_t bytes, unsigned \fBsamples\fP, unsigned current_frame, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "typedef \fBFLAC__StreamEncoderSeekStatus\fP(* \fBFLAC__StreamEncoderSeekCallback\fP) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP absolute_byte_offset, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "typedef \fBFLAC__StreamEncoderTellStatus\fP(* \fBFLAC__StreamEncoderTellCallback\fP) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP *absolute_byte_offset, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "typedef \fBvoid\fP(* \fBFLAC__StreamEncoderMetadataCallback\fP) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP \fBFLAC__StreamMetadata\fP *metadata, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "typedef \fBvoid\fP(* \fBFLAC__StreamEncoderProgressCallback\fP) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP bytes_written, \fBFLAC__uint64\fP samples_written, unsigned frames_written, unsigned total_frames_estimate, \fBvoid\fP *client_data)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBFLAC__StreamEncoderState\fP { \fBFLAC__STREAM_ENCODER_OK\fP = 0, \fBFLAC__STREAM_ENCODER_UNINITIALIZED\fP, \fBFLAC__STREAM_ENCODER_OGG_ERROR\fP, \fBFLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR\fP, \fBFLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA\fP, \fBFLAC__STREAM_ENCODER_CLIENT_ERROR\fP, \fBFLAC__STREAM_ENCODER_IO_ERROR\fP, \fBFLAC__STREAM_ENCODER_FRAMING_ERROR\fP, \fBFLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR\fP }"
.br
.ti -1c
.RI "enum \fBFLAC__StreamEncoderInitStatus\fP { \fBFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP = 0, \fBFLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA\fP, \fBFLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED\fP }"
.br
.ti -1c
.RI "enum \fBFLAC__StreamEncoderReadStatus\fP { \fBFLAC__STREAM_ENCODER_READ_STATUS_CONTINUE\fP, \fBFLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM\fP, \fBFLAC__STREAM_ENCODER_READ_STATUS_ABORT\fP, \fBFLAC__STREAM_ENCODER_READ_STATUS_UNSUPPORTED\fP }"
.br
.ti -1c
.RI "enum \fBFLAC__StreamEncoderWriteStatus\fP { \fBFLAC__STREAM_ENCODER_WRITE_STATUS_OK\fP = 0, \fBFLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR\fP }"
.br
.ti -1c
.RI "enum \fBFLAC__StreamEncoderSeekStatus\fP { \fBFLAC__STREAM_ENCODER_SEEK_STATUS_OK\fP, \fBFLAC__STREAM_ENCODER_SEEK_STATUS_ERROR\fP, \fBFLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED\fP }"
.br
.ti -1c
.RI "enum \fBFLAC__StreamEncoderTellStatus\fP { \fBFLAC__STREAM_ENCODER_TELL_STATUS_OK\fP, \fBFLAC__STREAM_ENCODER_TELL_STATUS_ERROR\fP, \fBFLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoder\fP * \fBFLAC__stream_encoder_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBvoid\fP \fBFLAC__stream_encoder_delete\fP (\fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_ogg_serial_number\fP (\fBFLAC__StreamEncoder\fP *encoder, long \fBserial_number\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_verify\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_streamable_subset\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_channels\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_bits_per_sample\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_sample_rate\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_compression_level\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_blocksize\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_do_mid_side_stereo\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_loose_mid_side_stereo\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_apodization\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP char *specification)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_max_lpc_order\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_qlp_coeff_precision\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_do_qlp_coeff_prec_search\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_do_escape_coding\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_do_exhaustive_model_search\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__bool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_min_residual_partition_order\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_max_residual_partition_order\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_rice_parameter_search_dist\fP (\fBFLAC__StreamEncoder\fP *encoder, unsigned \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_total_samples_estimate\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_set_metadata\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__StreamMetadata\fP **metadata, unsigned num_blocks)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderState\fP \fBFLAC__stream_encoder_get_state\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamDecoderState\fP \fBFLAC__stream_encoder_get_verify_decoder_state\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char * \fBFLAC__stream_encoder_get_resolved_state_string\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBvoid\fP \fBFLAC__stream_encoder_get_verify_decoder_error_stats\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP *absolute_sample, unsigned *frame_number, unsigned *channel, unsigned *sample, \fBFLAC__int32\fP *expected, \fBFLAC__int32\fP *got)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_verify\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_streamable_subset\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_channels\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_bits_per_sample\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_sample_rate\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_blocksize\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_do_mid_side_stereo\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_loose_mid_side_stereo\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_max_lpc_order\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_qlp_coeff_precision\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_do_qlp_coeff_prec_search\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_do_escape_coding\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_get_do_exhaustive_model_search\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_min_residual_partition_order\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_max_residual_partition_order\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP unsigned \fBFLAC__stream_encoder_get_rice_parameter_search_dist\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__uint64\fP \fBFLAC__stream_encoder_get_total_samples_estimate\fP (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP \fBFLAC__stream_encoder_init_stream\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__StreamEncoderWriteCallback\fP write_callback, \fBFLAC__StreamEncoderSeekCallback\fP seek_callback, \fBFLAC__StreamEncoderTellCallback\fP tell_callback, \fBFLAC__StreamEncoderMetadataCallback\fP metadata_callback, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP \fBFLAC__stream_encoder_init_ogg_stream\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__StreamEncoderReadCallback\fP read_callback, \fBFLAC__StreamEncoderWriteCallback\fP write_callback, \fBFLAC__StreamEncoderSeekCallback\fP seek_callback, \fBFLAC__StreamEncoderTellCallback\fP tell_callback, \fBFLAC__StreamEncoderMetadataCallback\fP metadata_callback, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP \fBFLAC__stream_encoder_init_FILE\fP (\fBFLAC__StreamEncoder\fP *encoder, FILE *file, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP \fBFLAC__stream_encoder_init_ogg_FILE\fP (\fBFLAC__StreamEncoder\fP *encoder, FILE *file, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP \fBFLAC__stream_encoder_init_file\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP char *\fBfilename\fP, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP \fBFLAC__stream_encoder_init_ogg_file\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP char *\fBfilename\fP, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP *client_data)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_finish\fP (\fBFLAC__StreamEncoder\fP *encoder)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_process\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP \fBFLAC__int32\fP *\fBconst\fP \fBbuffer\fP[], unsigned \fBsamples\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__stream_encoder_process_interleaved\fP (\fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP \fBFLAC__int32\fP \fBbuffer\fP[], unsigned \fBsamples\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char *\fBconst\fP \fBFLAC__StreamEncoderStateString\fP []"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char *\fBconst\fP \fBFLAC__StreamEncoderInitStatusString\fP []"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char *\fBconst\fP \fBFLAC__StreamEncoderReadStatusString\fP []"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char *\fBconst\fP \fBFLAC__StreamEncoderWriteStatusString\fP []"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char *\fBconst\fP \fBFLAC__StreamEncoderSeekStatusString\fP []"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBconst\fP char *\fBconst\fP \fBFLAC__StreamEncoderTellStatusString\fP []"
.br
.in -1c
.SH "Detailed Description"
.PP 
This module contains the functions which implement the stream encoder\&. 

The stream encoder can encode to native \fBFLAC\fP, and optionally Ogg \fBFLAC\fP (check FLAC_API_SUPPORTS_OGG_FLAC) streams and files\&.
.PP
The basic usage of this encoder is as follows:
.IP "\(bu" 2
The program creates an instance of an encoder using \fBFLAC__stream_encoder_new()\fP\&.
.IP "\(bu" 2
The program overrides the default settings using FLAC__stream_encoder_set_*() functions\&. At a minimum, the following functions should be called:
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_channels()\fP
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_bits_per_sample()\fP
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_sample_rate()\fP
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_ogg_serial_number()\fP (if encoding to Ogg \fBFLAC\fP)
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_total_samples_estimate()\fP (if known)
.PP

.IP "\(bu" 2
If the application wants to control the compression level or set its own metadata, then the following should also be called:
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_compression_level()\fP
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_verify()\fP
.IP "  \(bu" 4
\fBFLAC__stream_encoder_set_metadata()\fP
.PP

.IP "\(bu" 2
The rest of the set functions should only be called if the client needs exact control over how the audio is compressed; thorough understanding of the \fBFLAC\fP format is necessary to achieve good results\&.
.IP "\(bu" 2
The program initializes the instance to validate the settings and prepare for encoding using
.IP "  \(bu" 4
\fBFLAC__stream_encoder_init_stream()\fP or \fBFLAC__stream_encoder_init_FILE()\fP or \fBFLAC__stream_encoder_init_file()\fP for native \fBFLAC\fP
.IP "  \(bu" 4
\fBFLAC__stream_encoder_init_ogg_stream()\fP or \fBFLAC__stream_encoder_init_ogg_FILE()\fP or \fBFLAC__stream_encoder_init_ogg_file()\fP for Ogg \fBFLAC\fP
.PP

.IP "\(bu" 2
The program calls \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP to encode data, which subsequently calls the callbacks when there is encoder data ready to be written\&.
.IP "\(bu" 2
The program finishes the encoding with \fBFLAC__stream_encoder_finish()\fP, which causes the encoder to encode any data still in its input pipe, update the metadata with the final encoding statistics if output seeking is possible, and finally reset the encoder to the uninitialized state\&.
.IP "\(bu" 2
The instance may be used again or deleted with \fBFLAC__stream_encoder_delete()\fP\&.
.PP
.PP
In more detail, the stream encoder functions similarly to the \fBstream decoder \fP, but has fewer callbacks and more options\&. Typically the client will create a new instance by calling \fBFLAC__stream_encoder_new()\fP, then set the necessary parameters with FLAC__stream_encoder_set_*(), and initialize it by calling one of the FLAC__stream_encoder_init_*() functions\&.
.PP
Unlike the decoders, the stream encoder has many options that can affect the speed and compression ratio\&. When setting these parameters you should have some basic knowledge of the format (see the \fCuser-level documentation\fP or the \fCformal description\fP)\&. The FLAC__stream_encoder_set_*() functions themselves do not validate the values as many are interdependent\&. The FLAC__stream_encoder_init_*() functions will do this, so make sure to pay attention to the state returned by FLAC__stream_encoder_init_*() to make sure that it is FLAC__STREAM_ENCODER_INIT_STATUS_OK\&. Any parameters that are not set before FLAC__stream_encoder_init_*() will take on the defaults from the constructor\&.
.PP
There are three initialization functions for native \fBFLAC\fP, one for setting up the encoder to encode \fBFLAC\fP data to the client via callbacks, and two for encoding directly to a file\&.
.PP
For encoding via callbacks, use \fBFLAC__stream_encoder_init_stream()\fP\&. You must also supply a write callback which will be called anytime there is raw encoded data to write\&. If the client can seek the output it is best to also supply seek and tell callbacks, as this allows the encoder to go back after encoding is finished to write back information that was collected while encoding, like seek point offsets, frame sizes, etc\&.
.PP
For encoding directly to a file, use \fBFLAC__stream_encoder_init_FILE()\fP or \fBFLAC__stream_encoder_init_file()\fP\&. Then you must only supply a filename or open \fCFILE*\fP; the encoder will handle all the callbacks internally\&. You may also supply a progress callback for periodic notification of the encoding progress\&.
.PP
There are three similarly-named init functions for encoding to Ogg \fBFLAC\fP streams\&. Check \fCFLAC_API_SUPPORTS_OGG_FLAC\fP to find out if the library has been built with Ogg support\&.
.PP
The call to FLAC__stream_encoder_init_*() currently will also immediately call the write callback several times, once with the \fCfLaC\fP signature, and once for each encoded metadata block\&. Note that for Ogg \fBFLAC\fP encoding you will usually get at least twice the number of callbacks than with native \fBFLAC\fP, one for the Ogg page header and one for the page body\&.
.PP
After initializing the instance, the client may feed audio data to the encoder in one of two ways:
.PP
.IP "\(bu" 2
Channel separate, through \fBFLAC__stream_encoder_process()\fP - The client will pass an array of pointers to buffers, one for each channel, to the encoder, each of the same length\&. The samples need not be block-aligned, but each channel should have the same number of samples\&.
.IP "\(bu" 2
Channel interleaved, through \fBFLAC__stream_encoder_process_interleaved()\fP - The client will pass a single pointer to data that is channel-interleaved (i\&.e\&. channel0_sample0, channel1_sample0, \&.\&.\&. , channelN_sample0, channel0_sample1, \&.\&.\&.)\&. Again, the samples need not be block-aligned but they must be sample-aligned, i\&.e\&. the first value should be channel0_sample0 and the last value channelN_sampleM\&.
.PP
.PP
Note that for either process call, each sample in the buffers should be a signed integer, right-justified to the resolution set by \fBFLAC__stream_encoder_set_bits_per_sample()\fP\&. For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767]\&.
.PP
When the client is finished encoding data, it calls \fBFLAC__stream_encoder_finish()\fP, which causes the encoder to encode any data still in its input pipe, and call the metadata callback with the final encoding statistics\&. Then the instance may be deleted with \fBFLAC__stream_encoder_delete()\fP or initialized again to encode another stream\&.
.PP
For programs that write their own metadata, but that do not know the actual metadata until after encoding, it is advantageous to instruct the encoder to write a PADDING block of the correct size, so that instead of rewriting the whole stream after encoding, the program can just overwrite the PADDING block\&. If only the maximum size of the metadata is known, the program can write a slightly larger padding block, then split it after encoding\&.
.PP
Make sure you understand how lengths are calculated\&. All \fBFLAC\fP metadata blocks have a 4 byte header which contains the type and length\&. This length does not include the 4 bytes of the header\&. See the format page for the specification of metadata blocks and their lengths\&.
.PP
\fBNote:\fP
.RS 4
If you are writing the \fBFLAC\fP data to a file via callbacks, make sure it is open for update (e\&.g\&. mode 'w+' for stdio streams)\&. This is because after the first encoding pass, the encoder will try to seek back to the beginning of the stream, to the STREAMINFO block, to write some data there\&. (If using FLAC__stream_encoder_init*_file() or FLAC__stream_encoder_init*_FILE(), the file is managed internally\&.)
.PP
The 'set' functions may only be called when the encoder is in the state FLAC__STREAM_ENCODER_UNINITIALIZED, i\&.e\&. after \fBFLAC__stream_encoder_new()\fP or \fBFLAC__stream_encoder_finish()\fP, but before FLAC__stream_encoder_init_*()\&. If this is the case they will return \fCtrue\fP, otherwise \fCfalse\fP\&.
.PP
\fBFLAC__stream_encoder_finish()\fP resets all settings to the constructor defaults\&. 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef \fBvoid\fP(* FLAC__StreamEncoderMetadataCallback) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP \fBFLAC__StreamMetadata\fP *metadata, \fBvoid\fP *client_data)"
Signature for the metadata callback\&.
.PP
A function pointer matching this signature may be passed to FLAC__stream_encoder_init*_stream()\&. The supplied function will be called once at the end of encoding with the populated STREAMINFO structure\&. This is so the client can seek back to the beginning of the file and write the STREAMINFO block with the correct statistics after encoding (like minimum/maximum frame size and total samples)\&.
.PP
\fBNote:\fP
.RS 4
In general, \fBFLAC__StreamEncoder\fP functions which change the state should not be called on the \fIencoder\fP while in the callback\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP The encoder instance calling the callback\&. 
.br
\fImetadata\fP The final populated STREAMINFO block\&. 
.br
\fIclient_data\fP The callee's client data set through FLAC__stream_encoder_init_*()\&. 
.RE
.PP

.PP
Definition at line 655 of file stream_encoder\&.h\&.
.SS "typedef \fBvoid\fP(* FLAC__StreamEncoderProgressCallback) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP bytes_written, \fBFLAC__uint64\fP samples_written, unsigned frames_written, unsigned total_frames_estimate, \fBvoid\fP *client_data)"
Signature for the progress callback\&.
.PP
A function pointer matching this signature may be passed to FLAC__stream_encoder_init*_file() or FLAC__stream_encoder_init*_FILE()\&. The supplied function will be called when the encoder has finished writing a frame\&. The \fCtotal_frames_estimate\fP argument to the callback will be based on the value from \fBFLAC__stream_encoder_set_total_samples_estimate()\fP\&.
.PP
\fBNote:\fP
.RS 4
In general, \fBFLAC__StreamEncoder\fP functions which change the state should not be called on the \fIencoder\fP while in the callback\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP The encoder instance calling the callback\&. 
.br
\fIbytes_written\fP Bytes written so far\&. 
.br
\fIsamples_written\fP Samples written so far\&. 
.br
\fIframes_written\fP Frames written so far\&. 
.br
\fItotal_frames_estimate\fP The estimate of the total number of frames to be written\&. 
.br
\fIclient_data\fP The callee's client data set through FLAC__stream_encoder_init_*()\&. 
.RE
.PP

.PP
Definition at line 678 of file stream_encoder\&.h\&.
.SS "typedef \fBFLAC__StreamEncoderReadStatus\fP(* FLAC__StreamEncoderReadCallback) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__byte\fP \fBbuffer\fP[], size_t *bytes, \fBvoid\fP *client_data)"
Signature for the read callback\&.
.PP
A function pointer matching this signature must be passed to \fBFLAC__stream_encoder_init_ogg_stream()\fP if seeking is supported\&. The supplied function will be called when the encoder needs to read back encoded data\&. This happens during the metadata callback, when the encoder has to read, modify, and rewrite the metadata (e\&.g\&. seekpoints) gathered while encoding\&. The address of the buffer to be filled is supplied, along with the number of bytes the buffer can hold\&. The callback may choose to supply less data and modify the byte count but must be careful not to overflow the buffer\&. The callback then returns a status code chosen from FLAC__StreamEncoderReadStatus\&.
.PP
Here is an example of a read callback for stdio streams: 
.PP
.nf
1 FLAC__StreamEncoderReadStatus read_cb(const FLAC__StreamEncoder *encoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
2 {
3   FILE *file = ((MyClientData*)client_data)->file;
4   if(*bytes > 0) {
5     *bytes = fread(buffer, sizeof(FLAC__byte), *bytes, file);
6     if(ferror(file))
7       return FLAC__STREAM_ENCODER_READ_STATUS_ABORT;
8     else if(*bytes == 0)
9       return FLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM;
10     else
11       return FLAC__STREAM_ENCODER_READ_STATUS_CONTINUE;
12   }
13   else
14     return FLAC__STREAM_ENCODER_READ_STATUS_ABORT;
15 }

.fi
.PP
.PP
\fBNote:\fP
.RS 4
In general, \fBFLAC__StreamEncoder\fP functions which change the state should not be called on the \fIencoder\fP while in the callback\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP The encoder instance calling the callback\&. 
.br
\fIbuffer\fP A pointer to a location for the callee to store data to be encoded\&. 
.br
\fIbytes\fP A pointer to the size of the buffer\&. On entry to the callback, it contains the maximum number of bytes that may be stored in \fIbuffer\fP\&. The callee must set it to the actual number of bytes stored (0 in case of error or end-of-stream) before returning\&. 
.br
\fIclient_data\fP The callee's client data set through FLAC__stream_encoder_set_client_data()\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderReadStatus\fP The callee's return status\&. 
.RE
.PP

.PP
Definition at line 519 of file stream_encoder\&.h\&.
.SS "typedef \fBFLAC__StreamEncoderSeekStatus\fP(* FLAC__StreamEncoderSeekCallback) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP absolute_byte_offset, \fBvoid\fP *client_data)"
Signature for the seek callback\&.
.PP
A function pointer matching this signature may be passed to FLAC__stream_encoder_init*_stream()\&. The supplied function will be called when the encoder needs to seek the output stream\&. The encoder will pass the absolute byte offset to seek to, 0 meaning the beginning of the stream\&.
.PP
Here is an example of a seek callback for stdio streams: 
.PP
.nf
1 FLAC__StreamEncoderSeekStatus seek_cb(const FLAC__StreamEncoder *encoder, FLAC__uint64 absolute_byte_offset, void *client_data)
2 {
3   FILE *file = ((MyClientData*)client_data)->file;
4   if(file == stdin)
5     return FLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED;
6   else if(fseeko(file, (off_t)absolute_byte_offset, SEEK_SET) < 0)
7     return FLAC__STREAM_ENCODER_SEEK_STATUS_ERROR;
8   else
9     return FLAC__STREAM_ENCODER_SEEK_STATUS_OK;
10 }

.fi
.PP
.PP
\fBNote:\fP
.RS 4
In general, \fBFLAC__StreamEncoder\fP functions which change the state should not be called on the \fIencoder\fP while in the callback\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP The encoder instance calling the callback\&. 
.br
\fIabsolute_byte_offset\fP The offset from the beginning of the stream to seek to\&. 
.br
\fIclient_data\fP The callee's client data set through FLAC__stream_encoder_init_*()\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderSeekStatus\fP The callee's return status\&. 
.RE
.PP

.PP
Definition at line 591 of file stream_encoder\&.h\&.
.SS "typedef \fBFLAC__StreamEncoderTellStatus\fP(* FLAC__StreamEncoderTellCallback) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBFLAC__uint64\fP *absolute_byte_offset, \fBvoid\fP *client_data)"
Signature for the tell callback\&.
.PP
A function pointer matching this signature may be passed to FLAC__stream_encoder_init*_stream()\&. The supplied function will be called when the encoder needs to know the current position of the output stream\&.
.PP
\fBWarning:\fP
.RS 4
The callback must return the true current byte offset of the output to which the encoder is writing\&. If you are buffering the output, make sure and take this into account\&. If you are writing directly to a FILE* from your write callback, ftell() is sufficient\&. If you are writing directly to a file descriptor from your write callback, you can use lseek(fd, SEEK_CUR, 0)\&. The encoder may later seek back to these points to rewrite metadata after encoding\&.
.RE
.PP
Here is an example of a tell callback for stdio streams: 
.PP
.nf
1 FLAC__StreamEncoderTellStatus tell_cb(const FLAC__StreamEncoder *encoder, FLAC__uint64 *absolute_byte_offset, void *client_data)
2 {
3   FILE *file = ((MyClientData*)client_data)->file;
4   off_t pos;
5   if(file == stdin)
6     return FLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED;
7   else if((pos = ftello(file)) < 0)
8     return FLAC__STREAM_ENCODER_TELL_STATUS_ERROR;
9   else {
10     *absolute_byte_offset = (FLAC__uint64)pos;
11     return FLAC__STREAM_ENCODER_TELL_STATUS_OK;
12   }
13 }

.fi
.PP
.PP
\fBNote:\fP
.RS 4
In general, \fBFLAC__StreamEncoder\fP functions which change the state should not be called on the \fIencoder\fP while in the callback\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP The encoder instance calling the callback\&. 
.br
\fIabsolute_byte_offset\fP The address at which to store the current position of the output\&. 
.br
\fIclient_data\fP The callee's client data set through FLAC__stream_encoder_init_*()\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderTellStatus\fP The callee's return status\&. 
.RE
.PP

.PP
Definition at line 636 of file stream_encoder\&.h\&.
.SS "typedef \fBFLAC__StreamEncoderWriteStatus\fP(* FLAC__StreamEncoderWriteCallback) (\fBconst\fP \fBFLAC__StreamEncoder\fP *encoder, \fBconst\fP \fBFLAC__byte\fP \fBbuffer\fP[], size_t bytes, unsigned \fBsamples\fP, unsigned current_frame, \fBvoid\fP *client_data)"
Signature for the write callback\&.
.PP
A function pointer matching this signature must be passed to FLAC__stream_encoder_init*_stream()\&. The supplied function will be called by the encoder anytime there is raw encoded data ready to write\&. It may include metadata mixed with encoded audio frames and the data is not guaranteed to be aligned on frame or metadata block boundaries\&.
.PP
The only duty of the callback is to write out the \fIbytes\fP worth of data in \fIbuffer\fP to the current position in the output stream\&. The arguments \fIsamples\fP and \fIcurrent_frame\fP are purely informational\&. If \fIsamples\fP is greater than \fC0\fP, then \fIcurrent_frame\fP will hold the current frame number that is being written; otherwise it indicates that the write callback is being called to write metadata\&.
.PP
\fBNote:\fP
.RS 4
Unlike when writing to native \fBFLAC\fP, when writing to Ogg \fBFLAC\fP the write callback will be called twice when writing each audio frame; once for the page header, and once for the page body\&. When writing the page header, the \fIsamples\fP argument to the write callback will be \fC0\fP\&.
.PP
In general, \fBFLAC__StreamEncoder\fP functions which change the state should not be called on the \fIencoder\fP while in the callback\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP The encoder instance calling the callback\&. 
.br
\fIbuffer\fP An array of encoded data of length \fIbytes\fP\&. 
.br
\fIbytes\fP The byte length of \fIbuffer\fP\&. 
.br
\fIsamples\fP The number of samples encoded by \fIbuffer\fP\&. \fC0\fP has a special meaning; see above\&. 
.br
\fIcurrent_frame\fP The number of the current frame being encoded\&. 
.br
\fIclient_data\fP The callee's client data set through FLAC__stream_encoder_init_*()\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderWriteStatus\fP The callee's return status\&. 
.RE
.PP

.PP
Definition at line 557 of file stream_encoder\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBFLAC__StreamEncoderInitStatus\fP"
Possible return values for the FLAC__stream_encoder_init_*() functions\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_OK \fP\fP
Initialization was successful\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR \fP\fP
General failure to set up encoder; call \fBFLAC__stream_encoder_get_state()\fP for cause\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER \fP\fP
The library was not compiled with support for the given container format\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS \fP\fP
A required callback was not supplied\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS \fP\fP
The encoder has an invalid setting for number of channels\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE \fP\fP
The encoder has an invalid setting for bits-per-sample\&. \fBFLAC\fP supports 4-32 bps but the reference encoder currently supports only up to 24 bps\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE \fP\fP
The encoder has an invalid setting for the input sample rate\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE \fP\fP
The encoder has an invalid setting for the block size\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER \fP\fP
The encoder has an invalid setting for the maximum LPC order\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION \fP\fP
The encoder has an invalid setting for the precision of the quantized linear predictor coefficients\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER \fP\fP
The specified block size is less than the maximum LPC order\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE \fP\fP
The encoder is bound to the \fCSubset\fP but other settings violate it\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA \fP\fP
The metadata input to the encoder is invalid, in one of the following ways:
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_metadata()\fP was called with a null pointer but a block count > 0
.IP "\(bu" 2
One of the metadata blocks contains an undefined type
.IP "\(bu" 2
It contains an illegal CUESHEET as checked by \fBFLAC__format_cuesheet_is_legal()\fP
.IP "\(bu" 2
It contains an illegal SEEKTABLE as checked by \fBFLAC__format_seektable_is_legal()\fP
.IP "\(bu" 2
It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block 
.PP

.TP
\fB\fIFLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED \fP\fP
FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because \fBFLAC__stream_encoder_finish()\fP was not called\&. 
.PP
Definition at line 293 of file stream_encoder\&.h\&.
.SS "enum \fBFLAC__StreamEncoderReadStatus\fP"
Return values for the \fBFLAC__StreamEncoder\fP read callback\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAC__STREAM_ENCODER_READ_STATUS_CONTINUE \fP\fP
The read was OK and decoding can continue\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM \fP\fP
The read was attempted at the end of the stream\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_READ_STATUS_ABORT \fP\fP
An unrecoverable error occurred\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_READ_STATUS_UNSUPPORTED \fP\fP
Client does not support reading back from the output\&. 
.PP
Definition at line 363 of file stream_encoder\&.h\&.
.SS "enum \fBFLAC__StreamEncoderSeekStatus\fP"
Return values for the \fBFLAC__StreamEncoder\fP seek callback\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAC__STREAM_ENCODER_SEEK_STATUS_OK \fP\fP
The seek was OK and encoding can continue\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_SEEK_STATUS_ERROR \fP\fP
An unrecoverable error occurred\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED \fP\fP
Client does not support seeking\&. 
.PP
Definition at line 409 of file stream_encoder\&.h\&.
.SS "enum \fBFLAC__StreamEncoderState\fP"
\fBState\fP values for a \fBFLAC__StreamEncoder\fP\&.
.PP
The encoder's state can be obtained by calling \fBFLAC__stream_encoder_get_state()\fP\&.
.PP
If the encoder gets into any other state besides \fCFLAC__STREAM_ENCODER_OK\fP or \fCFLAC__STREAM_ENCODER_UNINITIALIZED\fP, it becomes invalid for encoding and must be deleted with \fBFLAC__stream_encoder_delete()\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAC__STREAM_ENCODER_OK \fP\fP
The encoder is in the normal OK state and samples can be processed\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_UNINITIALIZED \fP\fP
The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_OGG_ERROR \fP\fP
An error occurred in the underlying Ogg layer\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR \fP\fP
An error occurred in the underlying verify stream decoder; check \fBFLAC__stream_encoder_get_verify_decoder_state()\fP\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA \fP\fP
The verify decoder detected a mismatch between the original audio signal and the decoded audio signal\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_CLIENT_ERROR \fP\fP
One of the callbacks returned a fatal error\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_IO_ERROR \fP\fP
An I/O error occurred while opening/reading/writing a file\&. Check \fCerrno\fP\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_FRAMING_ERROR \fP\fP
An error occurred while writing the stream; usually, the write_callback returned an error\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR \fP\fP
Memory allocation failed\&. 
.PP
Definition at line 241 of file stream_encoder\&.h\&.
.SS "enum \fBFLAC__StreamEncoderTellStatus\fP"
Return values for the \fBFLAC__StreamEncoder\fP tell callback\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAC__STREAM_ENCODER_TELL_STATUS_OK \fP\fP
The tell was OK and encoding can continue\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_TELL_STATUS_ERROR \fP\fP
An unrecoverable error occurred\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED \fP\fP
Client does not support seeking\&. 
.PP
Definition at line 432 of file stream_encoder\&.h\&.
.SS "enum \fBFLAC__StreamEncoderWriteStatus\fP"
Return values for the \fBFLAC__StreamEncoder\fP write callback\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAC__STREAM_ENCODER_WRITE_STATUS_OK \fP\fP
The write was OK and encoding can continue\&. 
.TP
\fB\fIFLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR \fP\fP
An unrecoverable error occurred\&. The encoder will return from the process call\&. 
.PP
Definition at line 389 of file stream_encoder\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBFLAC_API\fP \fBvoid\fP FLAC__stream_encoder_delete (\fBFLAC__StreamEncoder\fP * encoder)"
Free an encoder instance\&. Deletes the object pointed to by \fIencoder\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP A pointer to an existing encoder\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP

.PP
Definition at line 577 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_finish (\fBFLAC__StreamEncoder\fP * encoder)"
Finish the encoding process\&. Flushes the encoding buffer, releases resources, resets the encoder settings to their defaults, and returns the encoder state to FLAC__STREAM_ENCODER_UNINITIALIZED\&. Note that this can generate one or more write callbacks before returning, and will generate a metadata callback\&.
.PP
Note that in the course of processing the last frame, errors can occur, so the caller should be sure to check the return value to ensure the file was encoded properly\&.
.PP
In the event of a prematurely-terminated encode, it is not strictly necessary to call this immediately before \fBFLAC__stream_encoder_delete()\fP but it is good practice to match every FLAC__stream_encoder_init_*() with a \fBFLAC__stream_encoder_finish()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if an error occurred processing the last frame; or if verify mode is set (see \fBFLAC__stream_encoder_set_verify()\fP), there was a verify mismatch; else \fCtrue\fP\&. If \fCfalse\fP, caller should check the state with \fBFLAC__stream_encoder_get_state()\fP for more information about the error\&. 
.RE
.PP

.PP
Definition at line 1422 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_bits_per_sample (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the input sample resolution setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_bits_per_sample()\fP\&. 
.RE
.PP

.PP
Definition at line 2014 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_blocksize (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the blocksize setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_blocksize()\fP\&. 
.RE
.PP

.PP
Definition at line 2030 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_channels (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the number of input channels being processed\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_channels()\fP\&. 
.RE
.PP

.PP
Definition at line 2006 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_do_escape_coding (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the 'escape coding' flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_set_do_escape_coding()\fP\&. 
.RE
.PP

.PP
Definition at line 2078 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_do_exhaustive_model_search (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the exhaustive model search flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_set_do_exhaustive_model_search()\fP\&. 
.RE
.PP

.PP
Definition at line 2086 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_do_mid_side_stereo (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the 'mid/side stereo coding' flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_get_do_mid_side_stereo()\fP\&. 
.RE
.PP

.PP
Definition at line 2038 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_do_qlp_coeff_prec_search (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the qlp coefficient precision search flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_set_do_qlp_coeff_prec_search()\fP\&. 
.RE
.PP

.PP
Definition at line 2070 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_loose_mid_side_stereo (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the 'adaptive mid/side switching' flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_set_loose_mid_side_stereo()\fP\&. 
.RE
.PP

.PP
Definition at line 2046 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_max_lpc_order (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the maximum LPC order setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_max_lpc_order()\fP\&. 
.RE
.PP

.PP
Definition at line 2054 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_max_residual_partition_order (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get maximum residual partition order setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_max_residual_partition_order()\fP\&. 
.RE
.PP

.PP
Definition at line 2102 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_min_residual_partition_order (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the minimum residual partition order setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_min_residual_partition_order()\fP\&. 
.RE
.PP

.PP
Definition at line 2094 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_qlp_coeff_precision (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the quantized linear predictor coefficient precision setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_qlp_coeff_precision()\fP\&. 
.RE
.PP

.PP
Definition at line 2062 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBconst\fP char* FLAC__stream_encoder_get_resolved_state_string (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the current encoder state as a C string\&. This version automatically resolves \fCFLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR\fP by getting the verify decoder's state\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP A encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIconst\fP char * The encoder state as a C string\&. Do not modify the contents\&. 
.RE
.PP

.PP
Definition at line 1952 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_rice_parameter_search_dist (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the Rice parameter search distance setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_rice_parameter_search_dist()\fP\&. 
.RE
.PP

.PP
Definition at line 2110 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP unsigned FLAC__stream_encoder_get_sample_rate (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the input sample rate setting\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIunsigned\fP See \fBFLAC__stream_encoder_set_sample_rate()\fP\&. 
.RE
.PP

.PP
Definition at line 2022 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderState\fP FLAC__stream_encoder_get_state (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the current encoder state\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderState\fP The current encoder state\&. 
.RE
.PP

.PP
Definition at line 1933 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_streamable_subset (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the <A HREF="\&.\&./format\&.html::subset>Subset flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_set_streamable_subset()\fP\&. 
.RE
.PP

.PP
Definition at line 1990 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__uint64\fP FLAC__stream_encoder_get_total_samples_estimate (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the previously set estimate of the total samples to be encoded\&. The encoder merely mimics back the value given to \fBFLAC__stream_encoder_set_total_samples_estimate()\fP since it has no other way of knowing how many samples the client will encode\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__uint64\fP See \fBFLAC__stream_encoder_get_total_samples_estimate()\fP\&. 
.RE
.PP

.PP
Definition at line 2118 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_get_verify (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the 'verify' flag\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP See \fBFLAC__stream_encoder_set_verify()\fP\&. 
.RE
.PP

.PP
Definition at line 1982 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBvoid\fP FLAC__stream_encoder_get_verify_decoder_error_stats (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__uint64\fP * absolute_sample, unsigned * frame_number, unsigned * channel, unsigned * sample, \fBFLAC__int32\fP * expected, \fBFLAC__int32\fP * got)"
Get relevant values about the nature of a verify decoder error\&. Useful when the stream encoder state is \fCFLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR\fP\&. The arguments should be addresses in which the stats will be returned, or NULL if value is not desired\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&. 
.br
\fIabsolute_sample\fP The absolute sample number of the mismatch\&. 
.br
\fIframe_number\fP The number of the frame in which the mismatch occurred\&. 
.br
\fIchannel\fP The channel in which the mismatch occurred\&. 
.br
\fIsample\fP The number of the sample (relative to the frame) in which the mismatch occurred\&. 
.br
\fIexpected\fP The expected value for the sample in question\&. 
.br
\fIgot\fP The actual value returned by the decoder\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP

.PP
Definition at line 1963 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamDecoderState\fP FLAC__stream_encoder_get_verify_decoder_state (\fBconst\fP \fBFLAC__StreamEncoder\fP * encoder)"
Get the state of the verify stream decoder\&. Useful when the stream encoder state is \fCFLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to query\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamDecoderState\fP The verify stream decoder state\&. 
.RE
.PP

.PP
Definition at line 1941 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP FLAC__stream_encoder_init_FILE (\fBFLAC__StreamEncoder\fP * encoder, FILE * file, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP * client_data)"
Initialize the encoder instance to encode native \fBFLAC\fP files\&.
.PP
This flavor of initialization sets up the encoder to encode to a plain native \fBFLAC\fP file\&. For non-stdio streams, you must use \fBFLAC__stream_encoder_init_stream()\fP and provide callbacks for the I/O\&.
.PP
This function should be called after \fBFLAC__stream_encoder_new()\fP and FLAC__stream_encoder_set_*() but before \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP\&. initialization succeeded\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&. 
.br
\fIfile\fP An open file\&. The file should have been opened with mode \fC'w+b'\fP and rewound\&. The file becomes owned by the encoder and should not be manipulated by the client while encoding\&. Unless \fIfile\fP is \fCstdout\fP, it will be closed when \fBFLAC__stream_encoder_finish()\fP is called\&. Note however that a proper SEEKTABLE cannot be created when encoding to \fCstdout\fP since it is not seekable\&. 
.br
\fIprogress_callback\fP See FLAC__StreamEncoderProgressCallback\&. This pointer may be \fCNULL\fP if the callback is not desired\&. 
.br
\fIclient_data\fP This value will be supplied to callbacks in their \fIclient_data\fP argument\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.PP
.nf
1 file != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderInitStatus\fP \fCFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP if initialization was successful; see FLAC__StreamEncoderInitStatus for the meanings of other return values\&. 
.RE
.PP

.PP
Definition at line 1352 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP FLAC__stream_encoder_init_file (\fBFLAC__StreamEncoder\fP * encoder, \fBconst\fP char * filename, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP * client_data)"
Initialize the encoder instance to encode native \fBFLAC\fP files\&.
.PP
This flavor of initialization sets up the encoder to encode to a plain \fBFLAC\fP file\&. If POSIX fopen() semantics are not sufficient (for example, with Unicode filenames on Windows), you must use \fBFLAC__stream_encoder_init_FILE()\fP, or \fBFLAC__stream_encoder_init_stream()\fP and provide callbacks for the I/O\&.
.PP
This function should be called after \fBFLAC__stream_encoder_new()\fP and FLAC__stream_encoder_set_*() but before \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP\&. initialization succeeded\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&. 
.br
\fIfilename\fP The name of the file to encode to\&. The file will be opened with fopen()\&. Use \fCNULL\fP to encode to \fCstdout\fP\&. Note however that a proper SEEKTABLE cannot be created when encoding to \fCstdout\fP since it is not seekable\&. 
.br
\fIprogress_callback\fP See FLAC__StreamEncoderProgressCallback\&. This pointer may be \fCNULL\fP if the callback is not desired\&. 
.br
\fIclient_data\fP This value will be supplied to callbacks in their \fIclient_data\fP argument\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderInitStatus\fP \fCFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP if initialization was successful; see FLAC__StreamEncoderInitStatus for the meanings of other return values\&. 
.RE
.PP

.PP
Definition at line 1402 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP FLAC__stream_encoder_init_ogg_FILE (\fBFLAC__StreamEncoder\fP * encoder, FILE * file, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP * client_data)"
Initialize the encoder instance to encode Ogg \fBFLAC\fP files\&.
.PP
This flavor of initialization sets up the encoder to encode to a plain Ogg \fBFLAC\fP file\&. For non-stdio streams, you must use \fBFLAC__stream_encoder_init_ogg_stream()\fP and provide callbacks for the I/O\&.
.PP
This function should be called after \fBFLAC__stream_encoder_new()\fP and FLAC__stream_encoder_set_*() but before \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP\&. initialization succeeded\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&. 
.br
\fIfile\fP An open file\&. The file should have been opened with mode \fC'w+b'\fP and rewound\&. The file becomes owned by the encoder and should not be manipulated by the client while encoding\&. Unless \fIfile\fP is \fCstdout\fP, it will be closed when \fBFLAC__stream_encoder_finish()\fP is called\&. Note however that a proper SEEKTABLE cannot be created when encoding to \fCstdout\fP since it is not seekable\&. 
.br
\fIprogress_callback\fP See FLAC__StreamEncoderProgressCallback\&. This pointer may be \fCNULL\fP if the callback is not desired\&. 
.br
\fIclient_data\fP This value will be supplied to callbacks in their \fIclient_data\fP argument\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.PP
.nf
1 file != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderInitStatus\fP \fCFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP if initialization was successful; see FLAC__StreamEncoderInitStatus for the meanings of other return values\&. 
.RE
.PP

.PP
Definition at line 1362 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP FLAC__stream_encoder_init_ogg_file (\fBFLAC__StreamEncoder\fP * encoder, \fBconst\fP char * filename, \fBFLAC__StreamEncoderProgressCallback\fP progress_callback, \fBvoid\fP * client_data)"
Initialize the encoder instance to encode Ogg \fBFLAC\fP files\&.
.PP
This flavor of initialization sets up the encoder to encode to a plain Ogg \fBFLAC\fP file\&. If POSIX fopen() semantics are not sufficient (for example, with Unicode filenames on Windows), you must use \fBFLAC__stream_encoder_init_ogg_FILE()\fP, or \fBFLAC__stream_encoder_init_ogg_stream()\fP and provide callbacks for the I/O\&.
.PP
This function should be called after \fBFLAC__stream_encoder_new()\fP and FLAC__stream_encoder_set_*() but before \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP\&. initialization succeeded\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&. 
.br
\fIfilename\fP The name of the file to encode to\&. The file will be opened with fopen()\&. Use \fCNULL\fP to encode to \fCstdout\fP\&. Note however that a proper SEEKTABLE cannot be created when encoding to \fCstdout\fP since it is not seekable\&. 
.br
\fIprogress_callback\fP See FLAC__StreamEncoderProgressCallback\&. This pointer may be \fCNULL\fP if the callback is not desired\&. 
.br
\fIclient_data\fP This value will be supplied to callbacks in their \fIclient_data\fP argument\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderInitStatus\fP \fCFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP if initialization was successful; see FLAC__StreamEncoderInitStatus for the meanings of other return values\&. 
.RE
.PP

.PP
Definition at line 1412 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP FLAC__stream_encoder_init_ogg_stream (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__StreamEncoderReadCallback\fP read_callback, \fBFLAC__StreamEncoderWriteCallback\fP write_callback, \fBFLAC__StreamEncoderSeekCallback\fP seek_callback, \fBFLAC__StreamEncoderTellCallback\fP tell_callback, \fBFLAC__StreamEncoderMetadataCallback\fP metadata_callback, \fBvoid\fP * client_data)"
Initialize the encoder instance to encode Ogg \fBFLAC\fP streams\&.
.PP
This flavor of initialization sets up the encoder to encode to a \fBFLAC\fP stream in an Ogg container\&. I/O is performed via callbacks to the client\&. For encoding to a plain file via filename or open \fCFILE*\fP, \fBFLAC__stream_encoder_init_ogg_file()\fP and \fBFLAC__stream_encoder_init_ogg_FILE()\fP provide a simpler interface\&.
.PP
This function should be called after \fBFLAC__stream_encoder_new()\fP and FLAC__stream_encoder_set_*() but before \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP\&. initialization succeeded\&.
.PP
The call to \fBFLAC__stream_encoder_init_ogg_stream()\fP currently will also immediately call the write callback several times to write the metadata packets\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&. 
.br
\fIread_callback\fP See FLAC__StreamEncoderReadCallback\&. This pointer must not be \fCNULL\fP if \fIseek_callback\fP is non-NULL since they are both needed to be able to write data back to the Ogg \fBFLAC\fP stream in the post-encode phase\&. 
.br
\fIwrite_callback\fP See FLAC__StreamEncoderWriteCallback\&. This pointer must not be \fCNULL\fP\&. 
.br
\fIseek_callback\fP See FLAC__StreamEncoderSeekCallback\&. This pointer may be \fCNULL\fP if seeking is not supported\&. The encoder uses seeking to go back and write some some stream statistics to the STREAMINFO block; this is recommended but not necessary to create a valid \fBFLAC\fP stream\&. If \fIseek_callback\fP is not \fCNULL\fP then a \fItell_callback\fP must also be supplied\&. Alternatively, a dummy seek callback that just returns \fCFLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED\fP may also be supplied, all though this is slightly less efficient for the encoder\&. 
.br
\fItell_callback\fP See FLAC__StreamEncoderTellCallback\&. This pointer may be \fCNULL\fP if seeking is not supported\&. If \fIseek_callback\fP is \fCNULL\fP then this argument will be ignored\&. If \fIseek_callback\fP is not \fCNULL\fP then a \fItell_callback\fP must also be supplied\&. Alternatively, a dummy tell callback that just returns \fCFLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED\fP may also be supplied, all though this is slightly less efficient for the encoder\&. 
.br
\fImetadata_callback\fP See FLAC__StreamEncoderMetadataCallback\&. This pointer may be \fCNULL\fP if the callback is not desired\&. If the client provides a seek callback, this function is not necessary as the encoder will automatically seek back and update the STREAMINFO block\&. It may also be \fCNULL\fP if the client does not support seeking, since it will have no way of going back to update the STREAMINFO\&. However the client can still supply a callback if it would like to know the details from the STREAMINFO\&. 
.br
\fIclient_data\fP This value will be supplied to callbacks in their \fIclient_data\fP argument\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderInitStatus\fP \fCFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP if initialization was successful; see FLAC__StreamEncoderInitStatus for the meanings of other return values\&. 
.RE
.PP

.PP
Definition at line 1261 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoderInitStatus\fP FLAC__stream_encoder_init_stream (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__StreamEncoderWriteCallback\fP write_callback, \fBFLAC__StreamEncoderSeekCallback\fP seek_callback, \fBFLAC__StreamEncoderTellCallback\fP tell_callback, \fBFLAC__StreamEncoderMetadataCallback\fP metadata_callback, \fBvoid\fP * client_data)"
Initialize the encoder instance to encode native \fBFLAC\fP streams\&.
.PP
This flavor of initialization sets up the encoder to encode to a native \fBFLAC\fP stream\&. I/O is performed via callbacks to the client\&. For encoding to a plain file via filename or open \fCFILE*\fP, \fBFLAC__stream_encoder_init_file()\fP and \fBFLAC__stream_encoder_init_FILE()\fP provide a simpler interface\&.
.PP
This function should be called after \fBFLAC__stream_encoder_new()\fP and FLAC__stream_encoder_set_*() but before \fBFLAC__stream_encoder_process()\fP or \fBFLAC__stream_encoder_process_interleaved()\fP\&. initialization succeeded\&.
.PP
The call to \fBFLAC__stream_encoder_init_stream()\fP currently will also immediately call the write callback several times, once with the \fCfLaC\fP signature, and once for each encoded metadata block\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An uninitialized encoder instance\&. 
.br
\fIwrite_callback\fP See FLAC__StreamEncoderWriteCallback\&. This pointer must not be \fCNULL\fP\&. 
.br
\fIseek_callback\fP See FLAC__StreamEncoderSeekCallback\&. This pointer may be \fCNULL\fP if seeking is not supported\&. The encoder uses seeking to go back and write some some stream statistics to the STREAMINFO block; this is recommended but not necessary to create a valid \fBFLAC\fP stream\&. If \fIseek_callback\fP is not \fCNULL\fP then a \fItell_callback\fP must also be supplied\&. Alternatively, a dummy seek callback that just returns \fCFLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED\fP may also be supplied, all though this is slightly less efficient for the encoder\&. 
.br
\fItell_callback\fP See FLAC__StreamEncoderTellCallback\&. This pointer may be \fCNULL\fP if seeking is not supported\&. If \fIseek_callback\fP is \fCNULL\fP then this argument will be ignored\&. If \fIseek_callback\fP is not \fCNULL\fP then a \fItell_callback\fP must also be supplied\&. Alternatively, a dummy tell callback that just returns \fCFLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED\fP may also be supplied, all though this is slightly less efficient for the encoder\&. 
.br
\fImetadata_callback\fP See FLAC__StreamEncoderMetadataCallback\&. This pointer may be \fCNULL\fP if the callback is not desired\&. If the client provides a seek callback, this function is not necessary as the encoder will automatically seek back and update the STREAMINFO block\&. It may also be \fCNULL\fP if the client does not support seeking, since it will have no way of going back to update the STREAMINFO\&. However the client can still supply a callback if it would like to know the details from the STREAMINFO\&. 
.br
\fIclient_data\fP This value will be supplied to callbacks in their \fIclient_data\fP argument\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoderInitStatus\fP \fCFLAC__STREAM_ENCODER_INIT_STATUS_OK\fP if initialization was successful; see FLAC__StreamEncoderInitStatus for the meanings of other return values\&. 
.RE
.PP

.PP
Definition at line 1240 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamEncoder\fP* FLAC__stream_encoder_new (\fBvoid\fP)"
Create a new stream encoder instance\&. The instance is created with default settings; see the individual FLAC__stream_encoder_set_*() functions for each setting's default\&.
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamEncoder*\fP \fCNULL\fP if there was an error allocating memory, else the new instance\&. 
.RE
.PP

.PP
Definition at line 505 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_process (\fBFLAC__StreamEncoder\fP * encoder, \fBconst\fP \fBFLAC__int32\fP *\fBconst\fP buffer[], unsigned samples)"
Submit data for encoding\&. This version allows you to supply the input data via an array of pointers, each pointer pointing to an array of \fIsamples\fP samples representing one channel\&. The samples need not be block-aligned, but each channel should have the same number of samples\&. Each sample should be a signed integer, right-justified to the resolution set by \fBFLAC__stream_encoder_set_bits_per_sample()\fP\&. For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767]\&.
.PP
For applications where channel order is important, channels must follow the order as described in the \fCframe header\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An initialized encoder instance in the OK state\&. 
.br
\fIbuffer\fP An array of pointers to each channel's signal\&. 
.br
\fIsamples\fP The number of samples in one channel\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.PP
.nf
1 FLAC__stream_encoder_get_state(encoder) == FLAC__STREAM_ENCODER_OK 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCtrue\fP if successful, else \fCfalse\fP; in this case, check the encoder state with \fBFLAC__stream_encoder_get_state()\fP to see what went wrong\&. 
.RE
.PP

.PP
Definition at line 2126 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_process_interleaved (\fBFLAC__StreamEncoder\fP * encoder, \fBconst\fP \fBFLAC__int32\fP buffer[], unsigned samples)"
Submit data for encoding\&. This version allows you to supply the input data where the channels are interleaved into a single array (i\&.e\&. channel0_sample0, channel1_sample0, \&.\&.\&. , channelN_sample0, channel0_sample1, \&.\&.\&.)\&. The samples need not be block-aligned but they must be sample-aligned, i\&.e\&. the first value should be channel0_sample0 and the last value channelN_sampleM\&. Each sample should be a signed integer, right-justified to the resolution set by \fBFLAC__stream_encoder_set_bits_per_sample()\fP\&. For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767]\&.
.PP
For applications where channel order is important, channels must follow the order as described in the \fCframe header\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An initialized encoder instance in the OK state\&. 
.br
\fIbuffer\fP An array of channel-interleaved data (see above)\&. 
.br
\fIsamples\fP The number of samples in one channel, the same as for \fBFLAC__stream_encoder_process()\fP\&. For example, if encoding two channels, \fC1000\fP \fIsamples\fP corresponds to a \fIbuffer\fP of 2000 values\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.PP
.nf
1 FLAC__stream_encoder_get_state(encoder) == FLAC__STREAM_ENCODER_OK 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCtrue\fP if successful, else \fCfalse\fP; in this case, check the encoder state with \fBFLAC__stream_encoder_get_state()\fP to see what went wrong\&. 
.RE
.PP

.PP
Definition at line 2178 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_apodization (\fBFLAC__StreamEncoder\fP * encoder, \fBconst\fP char * specification)"
Sets the apodization function(s) the encoder will use when windowing audio data for LPC analysis\&.
.PP
The \fIspecification\fP is a plain ASCII string which specifies exactly which functions to use\&. There may be more than one (up to 32), separated by \fC'\fP;' characters\&. Some functions take one or more comma-separated arguments in parentheses\&.
.PP
The available functions are \fCbartlett\fP, \fCbartlett_hann\fP, \fCblackman\fP, \fCblackman_harris_4term_92db\fP, \fCconnes\fP, \fCflattop\fP, \fCgauss(STDDEV)\fP, \fChamming\fP, \fChann\fP, \fCkaiser_bessel\fP, \fCnuttall\fP, \fCrectangle\fP, \fCtriangle\fP, \fCtukey(P)\fP, \fCpartial_tukey\fP(n[/ov[/P]]), \fCpunchout_tukey\fP(n[/ov[/P]]), \fCwelch\fP\&.
.PP
For \fCgauss(STDDEV)\fP, STDDEV specifies the standard deviation (0<STDDEV<=0\&.5)\&.
.PP
For \fCtukey(P)\fP, P specifies the fraction of the window that is tapered (0<=P<=1)\&. P=0 corresponds to \fCrectangle\fP and P=1 corresponds to \fChann\fP\&.
.PP
Specifying \fCpartial_tukey\fP or \fCpunchout_tukey\fP works a little different\&. These do not specify a single apodization function, but a series of them with some overlap\&. partial_tukey specifies a series of small windows (all treated separately) while punchout_tukey specifies a series of windows that have a hole in them\&. In this way, the predictor is constructed with only a part of the block, which helps in case a block consists of dissimilar parts\&.
.PP
The three parameters that can be specified for the functions are n, ov and P\&. n is the number of functions to add, ov is the overlap of the windows in case of partial_tukey and the overlap in the gaps in case of punchout_tukey\&. P is the fraction of the window that is tapered, like with a regular tukey window\&. The function can be specified with only a number, a number and an overlap, or a number an overlap and a P, for example, partial_tukey(3), partial_tukey(3/0\&.3) and partial_tukey(3/0\&.3/0\&.5) are all valid\&. ov should be smaller than 1 and can be negative\&.
.PP
Example specifications are \fC'blackman'\fP or \fC'hann;triangle;tukey(0\&.5);tukey(0\&.25);tukey(0\&.125)'\fP 
.PP
Any function that is specified erroneously is silently dropped\&. Up to 32 functions are kept, the rest are dropped\&. If the specification is empty the encoder defaults to \fC'tukey(0\&.5)'\fP\&.
.PP
When more than one function is specified, then for every subframe the encoder will try each of them separately and choose the window that results in the smallest compressed subframe\&.
.PP
Note that each function specified causes the encoder to occupy a floating point array in which to store the window\&. Also note that the values of P, STDDEV and ov are locale-specific, so if the comma separator specified by the locale is a comma, a comma should be used\&.
.PP
\fC'tukey(0\&.5)'\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIspecification\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.PP
.nf
1 specification != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1642 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_bits_per_sample (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the sample resolution of the input to be encoded\&.
.PP
\fBWarning:\fP
.RS 4
Do not feed the encoder data that is wider than the value you set here or you will generate an invalid stream\&.
.RE
.PP
\fC16\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1553 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_blocksize (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the blocksize to use while encoding\&.
.PP
The number of samples to use per frame\&. Use \fC0\fP to let the encoder estimate a blocksize; this is usually best\&.
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1608 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_channels (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the number of channels to be encoded\&.
.PP
\fC2\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1542 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_compression_level (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the compression level
.PP
The compression level is roughly proportional to the amount of effort the encoder expends to compress the file\&. A higher level usually means more computation but higher compression\&. The default level is suitable for most applications\&.
.PP
Currently the levels range from \fC0\fP (fastest, least compression) to \fC8\fP (slowest, most compression)\&. A value larger than \fC8\fP will be treated as \fC8\fP\&.
.PP
This function automatically calls the following other \fC\fIset\fP\fP functions with appropriate values, so the client does not need to unless it specifically wants to override them:
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_do_mid_side_stereo()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_loose_mid_side_stereo()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_apodization()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_max_lpc_order()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_qlp_coeff_precision()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_do_qlp_coeff_prec_search()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_do_escape_coding()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_do_exhaustive_model_search()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_min_residual_partition_order()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_max_residual_partition_order()\fP
.IP "\(bu" 2
\fBFLAC__stream_encoder_set_rice_parameter_search_dist()\fP
.PP
.PP
The actual values set for each level are: \fBlevel\fP do mid-side stereo loose mid-side stereo apodization max lpc order qlp coeff precision qlp coeff prec search escape coding exhaustive model search min residual partition order max residual partition order rice parameter search dist  \fB0\fP false false tukey(0\&.5)0 0 false false false 0 3 0  \fB1\fP true true tukey(0\&.5)0 0 false false false 0 3 0  \fB2\fP true false tukey(0\&.5)0 0 false false false 0 3 0  \fB3\fP false false tukey(0\&.5)6 0 false false false 0 4 0  \fB4\fP true true tukey(0\&.5)8 0 false false false 0 4 0  \fB5\fP true false tukey(0\&.5)8 0 false false false 0 5 0  \fB6\fP true false tukey(0\&.5);partial_tukey(2)8 0 false false false 0 6 0  \fB7\fP true false tukey(0\&.5);partial_tukey(2)12 0 false false false 0 6 0  \fB8\fP true false tukey(0\&.5);partial_tukey(2);punchout_tukey(3) 12 0 false false false 0 6 0  
.PP
\fC5\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1575 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_do_escape_coding (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Deprecated\&. Setting this value has no effect\&.
.PP
\fCfalse\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1788 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_do_exhaustive_model_search (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Set to \fCfalse\fP to let the encoder estimate the best model order based on the residual signal energy, or \fCtrue\fP to force the encoder to evaluate all order models and select the best\&.
.PP
\fCfalse\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1804 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_do_mid_side_stereo (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Set to \fCtrue\fP to enable mid-side encoding on stereo input\&. The number of channels must be 2 for this to have any effect\&. Set to \fCfalse\fP to use only independent channel coding\&.
.PP
\fCfalse\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP Flag value (see above)\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1619 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_do_qlp_coeff_prec_search (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Set to \fCfalse\fP to use only the specified quantized linear predictor coefficient precision, or \fCtrue\fP to search neighboring precision values and use the best one\&.
.PP
\fCfalse\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1777 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_loose_mid_side_stereo (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Set to \fCtrue\fP to enable adaptive switching between mid-side and left-right encoding on stereo input\&. Set to \fCfalse\fP to use exhaustive searching\&. Setting this to \fCtrue\fP requires \fBFLAC__stream_encoder_set_do_mid_side_stereo()\fP to also be set to \fCtrue\fP in order to have any effect\&.
.PP
\fCfalse\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP Flag value (see above)\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1630 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_max_lpc_order (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the maximum LPC order, or \fC0\fP to use only the fixed predictors\&.
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1755 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_max_residual_partition_order (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the maximum partition order to search when coding the residual\&. This is used in tandem with \fBFLAC__stream_encoder_set_min_residual_partition_order()\fP\&.
.PP
The partition order determines the context size in the residual\&. The context size will be approximately \fCblocksize / (2 ^ order)\fP\&.
.PP
Set both min and max values to \fC0\fP to force a single context, whose Rice parameter is based on the residual signal variance\&. Otherwise, set a min and max order, and the encoder will search all orders, using the mean of each context for its Rice parameter, and use the best\&.
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1826 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_metadata (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__StreamMetadata\fP ** metadata, unsigned num_blocks)"
Set the metadata blocks to be emitted to the stream before encoding\&. A value of \fCNULL\fP, \fC0\fP implies no metadata; otherwise, supply an array of pointers to metadata blocks\&. The array is non-const since the encoder may need to change the \fIis_last\fP flag inside them, and in some cases update seek point offsets\&. Otherwise, the encoder will not modify or free the blocks\&. It is up to the caller to free the metadata blocks after encoding finishes\&.
.PP
\fBNote:\fP
.RS 4
The encoder stores only copies of the pointers in the \fImetadata\fP array; the metadata blocks themselves must survive at least until after \fBFLAC__stream_encoder_finish()\fP returns\&. Do not free the blocks until then\&.
.PP
The STREAMINFO block is always written and no STREAMINFO block may occur in the supplied array\&.
.PP
By default the encoder does not create a SEEKTABLE\&. If one is supplied in the \fImetadata\fP array, but the client has specified that it does not support seeking, then the SEEKTABLE will be written verbatim\&. However by itself this is not very useful as the client will not know the stream offsets for the seekpoints ahead of time\&. In order to get a proper seektable the client must support seeking\&. See next note\&.
.PP
SEEKTABLE blocks are handled specially\&. Since you will not know the values for the seek point stream offsets, you should pass in a SEEKTABLE 'template', that is, a SEEKTABLE object with the required sample numbers (or placeholder points), with \fC0\fP for the \fIframe_samples\fP and \fIstream_offset\fP fields for each point\&. If the client has specified that it supports seeking by providing a seek callback to \fBFLAC__stream_encoder_init_stream()\fP or both seek AND read callback to \fBFLAC__stream_encoder_init_ogg_stream()\fP (or by using FLAC__stream_encoder_init*_file() or FLAC__stream_encoder_init*_FILE()), then while it is encoding the encoder will fill the stream offsets in for you and when encoding is finished, it will seek back and write the real values into the SEEKTABLE block in the stream\&. There are helper routines for manipulating seektable template blocks; see metadata\&.h: FLAC__metadata_object_seektable_template_*()\&. If the client does not support seeking, the SEEKTABLE will have inaccurate offsets which will slow down or remove the ability to seek in the \fBFLAC\fP stream\&.
.PP
The encoder instance \fBwill\fP modify the first \fCSEEKTABLE\fP block as it transforms the template to a valid seektable while encoding, but it is still up to the caller to free all metadata blocks after encoding\&.
.PP
A VORBIS_COMMENT block may be supplied\&. The vendor string in it will be ignored\&. libFLAC will use it's own vendor string\&. libFLAC will not modify the passed-in VORBIS_COMMENT's vendor string, it will simply write it's own into the stream\&. If no VORBIS_COMMENT block is present in the \fImetadata\fP array, libFLAC will write an empty one, containing only the vendor string\&.
.PP
The Ogg \fBFLAC\fP mapping requires that the VORBIS_COMMENT block be the second metadata block of the stream\&. The encoder already supplies the STREAMINFO block automatically\&. If \fImetadata\fP does not contain a VORBIS_COMMENT block, the encoder will supply that too\&. Otherwise, if \fImetadata\fP does contain a VORBIS_COMMENT block and it is not the first, the init function will reorder \fImetadata\fP by moving the VORBIS_COMMENT block to the front; the relative ordering of the other blocks will remain as they were\&.
.PP
The Ogg \fBFLAC\fP mapping limits the number of metadata blocks per stream to \fC65535\fP\&. If \fInum_blocks\fP exceeds this the function will return \fCfalse\fP\&.
.RE
.PP
\fCNULL\fP, 0 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fImetadata\fP See above\&. 
.br
\fInum_blocks\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. \fCfalse\fP if the encoder is already initialized, or if \fInum_blocks\fP > 65535 if encoding to Ogg \fBFLAC\fP, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1864 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_min_residual_partition_order (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the minimum partition order to search when coding the residual\&. This is used in tandem with \fBFLAC__stream_encoder_set_max_residual_partition_order()\fP\&.
.PP
The partition order determines the context size in the residual\&. The context size will be approximately \fCblocksize / (2 ^ order)\fP\&.
.PP
Set both min and max values to \fC0\fP to force a single context, whose Rice parameter is based on the residual signal variance\&. Otherwise, set a min and max order, and the encoder will search all orders, using the mean of each context for its Rice parameter, and use the best\&.
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1815 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_ogg_serial_number (\fBFLAC__StreamEncoder\fP * encoder, long serial_number)"
Set the serial number for the \fBFLAC\fP stream to use in the Ogg container\&.
.PP
\fBNote:\fP
.RS 4
This does not need to be set for native \fBFLAC\fP encoding\&.
.PP
It is recommended to set a serial number explicitly as the default of '0' may collide with other streams\&.
.RE
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIserial_number\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1490 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_qlp_coeff_precision (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the precision, in bits, of the quantized linear predictor coefficients, or \fC0\fP to let the encoder select it based on the blocksize\&.
.PP
\fBNote:\fP
.RS 4
In the current implementation, qlp_coeff_precision + bits_per_sample must be less than 32\&.
.RE
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1766 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_rice_parameter_search_dist (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Deprecated\&. Setting this value has no effect\&.
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1837 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_sample_rate (\fBFLAC__StreamEncoder\fP * encoder, unsigned value)"
Set the sample rate (in Hz) of the input to be encoded\&.
.PP
\fC44100\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1564 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_streamable_subset (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Set the \fCSubset\fP flag\&. If \fCtrue\fP, the encoder will comply with the Subset and will check the settings during FLAC__stream_encoder_init_*() to see if all settings comply\&. If \fCfalse\fP, the settings may take advantage of the full range that the format allows\&.
.PP
Make sure you know what it entails before setting this to \fCfalse\fP\&.
.PP
\fCtrue\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP Flag value (see above)\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1520 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_total_samples_estimate (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__uint64\fP value)"
Set an estimate of the total samples that will be encoded\&. This is merely an estimate and may be set to \fC0\fP if unknown\&. This value will be written to the STREAMINFO block before encoding, and can remove the need for the caller to rewrite the value later if the value is known before encoding\&.
.PP
\fC0\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP See above\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1853 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__stream_encoder_set_verify (\fBFLAC__StreamEncoder\fP * encoder, \fBFLAC__bool\fP value)"
Set the 'verify' flag\&. If \fCtrue\fP, the encoder will verify it's own encoded output by feeding it through an internal decoder and comparing the original signal against the decoded signal\&. If a mismatch occurs, the process call will return \fCfalse\fP\&. Note that this will slow the encoding process by the extra time required for decoding and comparison\&.
.PP
\fCfalse\fP 
.PP
\fBParameters:\fP
.RS 4
\fIencoder\fP An encoder instance to set\&. 
.br
\fIvalue\fP Flag value (see above)\&.  
.PP
.nf
1 encoder != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if the encoder is already initialized, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1507 of file stream_encoder\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBFLAC_API\fP \fBconst\fP char* \fBconst\fP FLAC__StreamEncoderInitStatusString[]"
Maps a FLAC__StreamEncoderInitStatus to a C string\&.
.PP
Using a FLAC__StreamEncoderInitStatus as the index to this array will give the string equivalent\&. The contents should not be modified\&. 
.PP
Definition at line 446 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBconst\fP char* \fBconst\fP FLAC__StreamEncoderReadStatusString[]"
Maps a FLAC__StreamEncoderReadStatus to a C string\&.
.PP
Using a FLAC__StreamEncoderReadStatus as the index to this array will give the string equivalent\&. The contents should not be modified\&. 
.PP
Definition at line 463 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBconst\fP char* \fBconst\fP FLAC__StreamEncoderSeekStatusString[]"
Maps a FLAC__StreamEncoderSeekStatus to a C string\&.
.PP
Using a FLAC__StreamEncoderSeekStatus as the index to this array will give the string equivalent\&. The contents should not be modified\&. 
.PP
Definition at line 475 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBconst\fP char* \fBconst\fP FLAC__StreamEncoderStateString[]"
Maps a FLAC__StreamEncoderState to a C string\&.
.PP
Using a FLAC__StreamEncoderState as the index to this array will give the string equivalent\&. The contents should not be modified\&. 
.PP
Definition at line 434 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBconst\fP char* \fBconst\fP FLAC__StreamEncoderTellStatusString[]"
Maps a FLAC__StreamEncoderTellStatus to a C string\&.
.PP
Using a FLAC__StreamEncoderTellStatus as the index to this array will give the string equivalent\&. The contents should not be modified\&. 
.PP
Definition at line 481 of file stream_encoder\&.c\&.
.SS "\fBFLAC_API\fP \fBconst\fP char* \fBconst\fP FLAC__StreamEncoderWriteStatusString[]"
Maps a FLAC__StreamEncoderWriteStatus to a C string\&.
.PP
Using a FLAC__StreamEncoderWriteStatus as the index to this array will give the string equivalent\&. The contents should not be modified\&. 
.PP
Definition at line 470 of file stream_encoder\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
