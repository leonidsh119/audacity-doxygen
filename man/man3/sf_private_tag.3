.TH "sf_private_tag" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf_private_tag \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <common\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   double \fBd\fP [2]"
.br
.ti -1c
.RI "   char \fBc\fP [16]"
.br
.ti -1c
.RI "} \fBcanary\fP"
.br
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   double \fBdbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(double)]"
.br
.ti -1c
.RI "   long \fBlbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(double)]"
.br
.ti -1c
.RI "   float \fBfbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(float)]"
.br
.ti -1c
.RI "   \fBint\fP \fBibuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(\fBint\fP)]"
.br
.ti -1c
.RI "   short \fBsbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(short)]"
.br
.ti -1c
.RI "   char \fBcbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(char)]"
.br
.ti -1c
.RI "   signed char \fBscbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(signed char)]"
.br
.ti -1c
.RI "   unsigned char \fBucbuf\fP [\fBSF_BUFFER_LEN\fP/sizeof(signed char)]"
.br
.ti -1c
.RI "} \fBu\fP"
.br
.ti -1c
.RI "\fBPSF_FILE\fP \fBfile\fP"
.br
.ti -1c
.RI "\fBPSF_FILE\fP \fBrsrc\fP"
.br
.ti -1c
.RI "char \fBsyserr\fP [\fBSF_SYSERR_LEN\fP]"
.br
.ti -1c
.RI "char \fBlogbuffer\fP [\fBSF_BUFFER_LEN\fP]"
.br
.ti -1c
.RI "unsigned char \fBheader\fP [\fBSF_HEADER_LEN\fP]"
.br
.ti -1c
.RI "\fBint\fP \fBrwf_endian\fP"
.br
.ti -1c
.RI "\fBSTR_DATA\fP \fBstrings\fP [\fBSF_MAX_STRINGS\fP]"
.br
.ti -1c
.RI "char \fBstr_storage\fP [\fBSF_STR_BUFFER_LEN\fP]"
.br
.ti -1c
.RI "char * \fBstr_end\fP"
.br
.ti -1c
.RI "\fBint\fP \fBstr_flags\fP"
.br
.ti -1c
.RI "\fBint\fP \fBMagick\fP"
.br
.ti -1c
.RI "unsigned \fBunique_id\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlogindex\fP"
.br
.ti -1c
.RI "\fBint\fP \fBheadindex\fP"
.br
.ti -1c
.RI "\fBint\fP \fBheadend\fP"
.br
.ti -1c
.RI "\fBint\fP \fBhas_text\fP"
.br
.ti -1c
.RI "\fBint\fP \fBerror\fP"
.br
.ti -1c
.RI "\fBint\fP \fBendian\fP"
.br
.ti -1c
.RI "\fBint\fP \fBdata_endswap\fP"
.br
.ti -1c
.RI "\fBint\fP \fBfloat_int_mult\fP"
.br
.ti -1c
.RI "float \fBfloat_max\fP"
.br
.ti -1c
.RI "\fBint\fP \fBscale_int_float\fP"
.br
.ti -1c
.RI "\fBint\fP \fBis_pipe\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBpipeoffset\fP"
.br
.ti -1c
.RI "\fBint\fP \fBadd_clipping\fP"
.br
.ti -1c
.RI "\fBSF_INFO\fP \fBsf\fP"
.br
.ti -1c
.RI "\fBint\fP \fBhave_written\fP"
.br
.ti -1c
.RI "\fBPEAK_INFO\fP * \fBpeak_info\fP"
.br
.ti -1c
.RI "\fBSF_LOOP_INFO\fP * \fBloop_info\fP"
.br
.ti -1c
.RI "\fBSF_INSTRUMENT\fP * \fBinstrument\fP"
.br
.ti -1c
.RI "SF_BROADCAST_INFO_16K * \fBbroadcast_16k\fP"
.br
.ti -1c
.RI "\fBint\fP * \fBchannel_map\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBfilelength\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBfileoffset\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBrsrclength\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBdataoffset\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBdatalength\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBdataend\fP"
.br
.ti -1c
.RI "\fBint\fP \fBblockwidth\fP"
.br
.ti -1c
.RI "\fBint\fP \fBbytewidth\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBdither\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBinterleave\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlast_op\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBread_current\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBwrite_current\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBcontainer_data\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBcodec_data\fP"
.br
.ti -1c
.RI "\fBSF_DITHER_INFO\fP \fBwrite_dither\fP"
.br
.ti -1c
.RI "\fBSF_DITHER_INFO\fP \fBread_dither\fP"
.br
.ti -1c
.RI "\fBint\fP \fBnorm_double\fP"
.br
.ti -1c
.RI "\fBint\fP \fBnorm_float\fP"
.br
.ti -1c
.RI "\fBint\fP \fBauto_header\fP"
.br
.ti -1c
.RI "\fBint\fP \fBieee_replace\fP"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBread_short\fP )(struct \fBsf_private_tag\fP *, short *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBread_int\fP )(struct \fBsf_private_tag\fP *, \fBint\fP *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBread_float\fP )(struct \fBsf_private_tag\fP *, float *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBread_double\fP )(struct \fBsf_private_tag\fP *, double *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBwrite_short\fP )(struct \fBsf_private_tag\fP *, \fBconst\fP short *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBwrite_int\fP )(struct \fBsf_private_tag\fP *, \fBconst\fP \fBint\fP *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBwrite_float\fP )(struct \fBsf_private_tag\fP *, \fBconst\fP float *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBwrite_double\fP )(struct \fBsf_private_tag\fP *, \fBconst\fP double *ptr, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP(* \fBseek\fP )(struct \fBsf_private_tag\fP *, \fBint\fP mode, \fBsf_count_t\fP samples_from_start)"
.br
.ti -1c
.RI "\fBint\fP(* \fBwrite_header\fP )(struct \fBsf_private_tag\fP *, \fBint\fP calc_length)"
.br
.ti -1c
.RI "\fBint\fP(* \fBcommand\fP )(struct \fBsf_private_tag\fP *, \fBint\fP command, \fBvoid\fP *\fBdata\fP, \fBint\fP datasize)"
.br
.ti -1c
.RI "\fBint\fP(* \fBcodec_close\fP )(struct \fBsf_private_tag\fP *)"
.br
.ti -1c
.RI "\fBint\fP(* \fBcontainer_close\fP )(struct \fBsf_private_tag\fP *)"
.br
.ti -1c
.RI "char * \fBformat_desc\fP"
.br
.ti -1c
.RI "\fBint\fP \fBvirtual_io\fP"
.br
.ti -1c
.RI "\fBSF_VIRTUAL_IO\fP \fBvio\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBvio_user_data\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 290 of file common\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBint\fP sf_private_tag::add_clipping"

.PP
Definition at line 364 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::auto_header"

.PP
Definition at line 414 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::blockwidth"

.PP
Definition at line 390 of file common\&.h\&.
.SS "SF_BROADCAST_INFO_16K* sf_private_tag::broadcast_16k"

.PP
Definition at line 376 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::bytewidth"

.PP
Definition at line 391 of file common\&.h\&.
.SS "char sf_private_tag::c[16]"

.PP
Definition at line 296 of file common\&.h\&.
.SS "union { \&.\&.\&. }   sf_private_tag::canary"

.SS "char sf_private_tag::cbuf[\fBSF_BUFFER_LEN\fP/sizeof(char)]"

.PP
Definition at line 310 of file common\&.h\&.
.SS "\fBint\fP* sf_private_tag::channel_map"

.PP
Definition at line 379 of file common\&.h\&.
.SS "\fBint\fP(* sf_private_tag::codec_close) (struct \fBsf_private_tag\fP *)"

.PP
Definition at line 437 of file common\&.h\&.
.SS "\fBvoid\fP* sf_private_tag::codec_data"

.PP
Definition at line 404 of file common\&.h\&.
.SS "\fBint\fP(* sf_private_tag::command) (struct \fBsf_private_tag\fP *, \fBint\fP command, \fBvoid\fP *\fBdata\fP, \fBint\fP datasize)"

.PP
Definition at line 431 of file common\&.h\&.
.SS "\fBint\fP(* sf_private_tag::container_close) (struct \fBsf_private_tag\fP *)"

.PP
Definition at line 438 of file common\&.h\&.
.SS "\fBvoid\fP* sf_private_tag::container_data"

.PP
Definition at line 400 of file common\&.h\&.
.SS "double sf_private_tag::d[2]"

.PP
Definition at line 295 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::data_endswap"

.PP
Definition at line 348 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::dataend"

.PP
Definition at line 388 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::datalength"

.PP
Definition at line 387 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::dataoffset"

.PP
Definition at line 386 of file common\&.h\&.
.SS "double sf_private_tag::dbuf[\fBSF_BUFFER_LEN\fP/sizeof(double)]"

.PP
Definition at line 301 of file common\&.h\&.
.SS "\fBvoid\fP* sf_private_tag::dither"

.PP
Definition at line 393 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::endian"

.PP
Definition at line 347 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::error"

.PP
Definition at line 345 of file common\&.h\&.
.SS "float sf_private_tag::fbuf[\fBSF_BUFFER_LEN\fP/sizeof(float)]"

.PP
Definition at line 307 of file common\&.h\&.
.SS "\fBPSF_FILE\fP sf_private_tag::file"

.PP
Definition at line 316 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::filelength"

.PP
Definition at line 381 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::fileoffset"

.PP
Definition at line 382 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::float_int_mult"

.PP
Definition at line 354 of file common\&.h\&.
.SS "float sf_private_tag::float_max"

.PP
Definition at line 355 of file common\&.h\&.
.SS "char* sf_private_tag::format_desc"

.PP
Definition at line 440 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::has_text"

.PP
Definition at line 343 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::have_written"

.PP
Definition at line 368 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::headend"

.PP
Definition at line 342 of file common\&.h\&.
.SS "unsigned char sf_private_tag::header[\fBSF_HEADER_LEN\fP]"

.PP
Definition at line 324 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::headindex"

.PP
Definition at line 342 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::ibuf[\fBSF_BUFFER_LEN\fP/sizeof(\fBint\fP)]"

.PP
Definition at line 308 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::ieee_replace"

.PP
Definition at line 416 of file common\&.h\&.
.SS "\fBSF_INSTRUMENT\fP* sf_private_tag::instrument"

.PP
Definition at line 373 of file common\&.h\&.
.SS "\fBvoid\fP* sf_private_tag::interleave"

.PP
Definition at line 394 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::is_pipe"

.PP
Definition at line 360 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::last_op"

.PP
Definition at line 396 of file common\&.h\&.
.SS "long sf_private_tag::lbuf[\fBSF_BUFFER_LEN\fP/sizeof(double)]"

.PP
Definition at line 305 of file common\&.h\&.
.SS "char sf_private_tag::logbuffer[\fBSF_BUFFER_LEN\fP]"

.PP
Definition at line 323 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::logindex"

.PP
Definition at line 341 of file common\&.h\&.
.SS "\fBSF_LOOP_INFO\fP* sf_private_tag::loop_info"

.PP
Definition at line 372 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::Magick"

.PP
Definition at line 336 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::norm_double"

.PP
Definition at line 411 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::norm_float"

.PP
Definition at line 412 of file common\&.h\&.
.SS "\fBPEAK_INFO\fP* sf_private_tag::peak_info"

.PP
Definition at line 369 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::pipeoffset"

.PP
Definition at line 361 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::read_current"

.PP
Definition at line 397 of file common\&.h\&.
.SS "\fBSF_DITHER_INFO\fP sf_private_tag::read_dither"

.PP
Definition at line 409 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::read_double) (struct \fBsf_private_tag\fP *, double *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 422 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::read_float) (struct \fBsf_private_tag\fP *, float *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 421 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::read_int) (struct \fBsf_private_tag\fP *, \fBint\fP *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 420 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::read_short) (struct \fBsf_private_tag\fP *, short *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 419 of file common\&.h\&.
.SS "\fBPSF_FILE\fP sf_private_tag::rsrc"

.PP
Definition at line 316 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::rsrclength"

.PP
Definition at line 384 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::rwf_endian"

.PP
Definition at line 325 of file common\&.h\&.
.SS "short sf_private_tag::sbuf[\fBSF_BUFFER_LEN\fP/sizeof(short)]"

.PP
Definition at line 309 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::scale_int_float"

.PP
Definition at line 357 of file common\&.h\&.
.SS "signed char sf_private_tag::scbuf[\fBSF_BUFFER_LEN\fP/sizeof(signed char)]"

.PP
Definition at line 311 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::seek) (struct \fBsf_private_tag\fP *, \fBint\fP mode, \fBsf_count_t\fP samples_from_start)"

.PP
Definition at line 429 of file common\&.h\&.
.SS "\fBSF_INFO\fP sf_private_tag::sf"

.PP
Definition at line 366 of file common\&.h\&.
.SS "char* sf_private_tag::str_end"

.PP
Definition at line 332 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::str_flags"

.PP
Definition at line 333 of file common\&.h\&.
.SS "char sf_private_tag::str_storage[\fBSF_STR_BUFFER_LEN\fP]"

.PP
Definition at line 331 of file common\&.h\&.
.SS "\fBSTR_DATA\fP sf_private_tag::strings[\fBSF_MAX_STRINGS\fP]"

.PP
Definition at line 330 of file common\&.h\&.
.SS "char sf_private_tag::syserr[\fBSF_SYSERR_LEN\fP]"

.PP
Definition at line 318 of file common\&.h\&.
.SS "union { \&.\&.\&. }   sf_private_tag::u"

.SS "unsigned char sf_private_tag::ucbuf[\fBSF_BUFFER_LEN\fP/sizeof(signed char)]"

.PP
Definition at line 312 of file common\&.h\&.
.SS "unsigned sf_private_tag::unique_id"

.PP
Definition at line 338 of file common\&.h\&.
.SS "\fBSF_VIRTUAL_IO\fP sf_private_tag::vio"

.PP
Definition at line 444 of file common\&.h\&.
.SS "\fBvoid\fP* sf_private_tag::vio_user_data"

.PP
Definition at line 445 of file common\&.h\&.
.SS "\fBint\fP sf_private_tag::virtual_io"

.PP
Definition at line 443 of file common\&.h\&.
.SS "\fBsf_count_t\fP sf_private_tag::write_current"

.PP
Definition at line 398 of file common\&.h\&.
.SS "\fBSF_DITHER_INFO\fP sf_private_tag::write_dither"

.PP
Definition at line 408 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::write_double) (struct \fBsf_private_tag\fP *, \fBconst\fP double *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 427 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::write_float) (struct \fBsf_private_tag\fP *, \fBconst\fP float *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 426 of file common\&.h\&.
.SS "\fBint\fP(* sf_private_tag::write_header) (struct \fBsf_private_tag\fP *, \fBint\fP calc_length)"

.PP
Definition at line 430 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::write_int) (struct \fBsf_private_tag\fP *, \fBconst\fP \fBint\fP *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 425 of file common\&.h\&.
.SS "\fBsf_count_t\fP(* sf_private_tag::write_short) (struct \fBsf_private_tag\fP *, \fBconst\fP short *ptr, \fBsf_count_t\fP \fBlen\fP)"

.PP
Definition at line 424 of file common\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
