.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/twolame.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/twolame.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDLL_EXPORT\fP"
.br
.ti -1c
.RI "#define \fBTRUE\fP   (1)"
.br
.ti -1c
.RI "#define \fBFALSE\fP   (0)"
.br
.ti -1c
.RI "#define \fBTWOLAME_SAMPLES_PER_FRAME\fP   (1152)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBtwolame_options_struct\fP \fBtwolame_options\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBTWOLAME_MPEG_mode\fP { \fBTWOLAME_AUTO_MODE\fP = -1, \fBTWOLAME_STEREO\fP = 0, \fBTWOLAME_JOINT_STEREO\fP, \fBTWOLAME_DUAL_CHANNEL\fP, \fBTWOLAME_MONO\fP, \fBTWOLAME_NOT_SET\fP }"
.br
.ti -1c
.RI "enum \fBTWOLAME_MPEG_version\fP { \fBTWOLAME_MPEG2\fP = 0, \fBTWOLAME_MPEG1\fP }"
.br
.ti -1c
.RI "enum \fBTWOLAME_Padding\fP { \fBTWOLAME_PAD_NO\fP = 0, \fBTWOLAME_PAD_ALL\fP }"
.br
.ti -1c
.RI "enum \fBTWOLAME_Emphasis\fP { \fBTWOLAME_EMPHASIS_N\fP = 0, \fBTWOLAME_EMPHASIS_5\fP = 1, \fBTWOLAME_EMPHASIS_C\fP = 3 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBconst\fP char * \fBget_twolame_version\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBconst\fP char * \fBget_twolame_url\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBvoid\fP \fBtwolame_print_config\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBtwolame_options\fP * \fBtwolame_init\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_init_params\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_encode_buffer\fP (\fBtwolame_options\fP *glopts, \fBconst\fP short \fBint\fP leftpcm[], \fBconst\fP short \fBint\fP rightpcm[], \fBint\fP num_samples, unsigned char *mp2buffer, \fBint\fP mp2buffer_size)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_encode_buffer_interleaved\fP (\fBtwolame_options\fP *glopts, \fBconst\fP short \fBint\fP pcm[], \fBint\fP num_samples, unsigned char *mp2buffer, \fBint\fP mp2buffer_size)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_encode_buffer_float32\fP (\fBtwolame_options\fP *glopts, \fBconst\fP float leftpcm[], \fBconst\fP float rightpcm[], \fBint\fP num_samples, unsigned char *mp2buffer, \fBint\fP mp2buffer_size)"
.br
.ti -1c
.RI "\fBint\fP \fBtwolame_encode_buffer_float32_interleaved\fP (\fBtwolame_options\fP *glopts, \fBconst\fP float pcm[], \fBint\fP num_samples, unsigned char *mp2buffer, \fBint\fP mp2buffer_size)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_encode_flush\fP (\fBtwolame_options\fP *glopts, unsigned char *mp2buffer, \fBint\fP mp2buffer_size)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBvoid\fP \fBtwolame_close\fP (\fBtwolame_options\fP **glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_verbosity\fP (\fBtwolame_options\fP *glopts, \fBint\fP verbosity)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_verbosity\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_mode\fP (\fBtwolame_options\fP *glopts, \fBTWOLAME_MPEG_mode\fP mode)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBTWOLAME_MPEG_mode\fP \fBtwolame_get_mode\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBconst\fP char * \fBtwolame_get_mode_name\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_version\fP (\fBtwolame_options\fP *glopts, \fBTWOLAME_MPEG_version\fP \fBversion\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBTWOLAME_MPEG_version\fP \fBtwolame_get_version\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBconst\fP char * \fBtwolame_get_version_name\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_framelength\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_psymodel\fP (\fBtwolame_options\fP *glopts, \fBint\fP psymodel)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_psymodel\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_num_channels\fP (\fBtwolame_options\fP *glopts, \fBint\fP num_channels)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_num_channels\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_scale\fP (\fBtwolame_options\fP *glopts, float \fBscale\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP float \fBtwolame_get_scale\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_scale_left\fP (\fBtwolame_options\fP *glopts, float \fBscale\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP float \fBtwolame_get_scale_left\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_scale_right\fP (\fBtwolame_options\fP *glopts, float \fBscale\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP float \fBtwolame_get_scale_right\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_in_samplerate\fP (\fBtwolame_options\fP *glopts, \fBint\fP \fBsamplerate\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_in_samplerate\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_out_samplerate\fP (\fBtwolame_options\fP *glopts, \fBint\fP \fBsamplerate\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_out_samplerate\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_bitrate\fP (\fBtwolame_options\fP *glopts, \fBint\fP bitrate)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_bitrate\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_brate\fP (\fBtwolame_options\fP *glopts, \fBint\fP bitrate)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_brate\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_padding\fP (\fBtwolame_options\fP *glopts, \fBTWOLAME_Padding\fP \fBpadding\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBTWOLAME_Padding\fP \fBtwolame_get_padding\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_energy_levels\fP (\fBtwolame_options\fP *glopts, \fBint\fP energylevels)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_energy_levels\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_num_ancillary_bits\fP (\fBtwolame_options\fP *glopts, \fBint\fP num)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_num_ancillary_bits\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_emphasis\fP (\fBtwolame_options\fP *glopts, \fBTWOLAME_Emphasis\fP emphasis)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBTWOLAME_Emphasis\fP \fBtwolame_get_emphasis\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_error_protection\fP (\fBtwolame_options\fP *glopts, \fBint\fP err_protection)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_error_protection\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_copyright\fP (\fBtwolame_options\fP *glopts, \fBint\fP \fBcopyright\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_copyright\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_original\fP (\fBtwolame_options\fP *glopts, \fBint\fP original)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_original\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_VBR\fP (\fBtwolame_options\fP *glopts, \fBint\fP vbr)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_VBR\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_VBR_level\fP (\fBtwolame_options\fP *glopts, float level)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP float \fBtwolame_get_VBR_level\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_VBR_q\fP (\fBtwolame_options\fP *glopts, float level)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP float \fBtwolame_get_VBR_q\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_ATH_level\fP (\fBtwolame_options\fP *glopts, float level)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP float \fBtwolame_get_ATH_level\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_VBR_max_bitrate_kbps\fP (\fBtwolame_options\fP *glopts, \fBint\fP bitrate)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_VBR_max_bitrate_kbps\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_quick_mode\fP (\fBtwolame_options\fP *glopts, \fBint\fP quickmode)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_quick_mode\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_quick_count\fP (\fBtwolame_options\fP *glopts, \fBint\fP quickcount)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_quick_count\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_DAB\fP (\fBtwolame_options\fP *glopts, \fBint\fP dab)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_DAB\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_DAB_xpad_length\fP (\fBtwolame_options\fP *glopts, \fBint\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_DAB_xpad_length\fP (\fBtwolame_options\fP *glopts)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_set_DAB_crc_length\fP (\fBtwolame_options\fP *glopts, \fBint\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDLL_EXPORT\fP \fBint\fP \fBtwolame_get_DAB_crc_length\fP (\fBtwolame_options\fP *glopts)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DLL_EXPORT"

.PP
Definition at line 53 of file twolame\&.h\&.
.SS "#define FALSE   (0)"

.PP
Definition at line 62 of file twolame\&.h\&.
.SS "#define TRUE   (1)"

.PP
Definition at line 58 of file twolame\&.h\&.
.SS "#define TWOLAME_SAMPLES_PER_FRAME   (1152)"
Number of samples per frame of Layer 2 MPEG Audio 
.PP
Definition at line 111 of file twolame\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBtwolame_options_struct\fP \fBtwolame_options\fP"
Opaque data type for the twolame encoder options\&. 
.PP
Definition at line 118 of file twolame\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBTWOLAME_Emphasis\fP"
Emphasis types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITWOLAME_EMPHASIS_N \fP\fP
No Emphasis 
.TP
\fB\fITWOLAME_EMPHASIS_5 \fP\fP
50/15 ms 
.TP
\fB\fITWOLAME_EMPHASIS_C \fP\fP
CCIT J\&.17 
.PP
Definition at line 99 of file twolame\&.h\&.
.SS "enum \fBTWOLAME_MPEG_mode\fP"
MPEG modes 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITWOLAME_AUTO_MODE \fP\fP
Choose Mode Automatically 
.TP
\fB\fITWOLAME_STEREO \fP\fP
Stereo 
.TP
\fB\fITWOLAME_JOINT_STEREO \fP\fP
Joint Stereo 
.TP
\fB\fITWOLAME_DUAL_CHANNEL \fP\fP
Dual Channel 
.TP
\fB\fITWOLAME_MONO \fP\fP
Mono 
.TP
\fB\fITWOLAME_NOT_SET \fP\fP
.PP
Definition at line 67 of file twolame\&.h\&.
.SS "enum \fBTWOLAME_MPEG_version\fP"
MPEG Version\&.
.PP
MPEG2 is for Lower Sampling Frequencies - LSF < 32000\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITWOLAME_MPEG2 \fP\fP
MPEG-2 - for sample rates less than 32k 
.TP
\fB\fITWOLAME_MPEG1 \fP\fP
MPEG-1 
.PP
Definition at line 84 of file twolame\&.h\&.
.SS "enum \fBTWOLAME_Padding\fP"
Padding types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITWOLAME_PAD_NO \fP\fP
No Padding 
.TP
\fB\fITWOLAME_PAD_ALL \fP\fP
Pad all frames 
.PP
Definition at line 92 of file twolame\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBDLL_EXPORT\fP \fBconst\fP char* get_twolame_url (\fBvoid\fP)"
Get the URL of the TwoLAME homepage\&. eg 'http://www\&.twolame\&.org/'\&.
.PP
\fBReturns:\fP
.RS 4
The url as a C string 
.RE
.PP

.PP
Definition at line 47 of file util\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBconst\fP char* get_twolame_version (\fBvoid\fP)"
Get the version number of the TwoLAME library\&. eg '0\&.3\&.1'\&.
.PP
\fBReturns:\fP
.RS 4
The version number as a C string 
.RE
.PP

.PP
Definition at line 38 of file util\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBvoid\fP twolame_close (\fBtwolame_options\fP ** glopts)"
Shut down the twolame encoder\&.
.PP
Shuts down the twolame encoder and frees all memory that it previously allocated\&. You should call this once you have finished all your encoding\&. This function will set your glopts pointer to NULL for you\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP

.PP
Definition at line 908 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_encode_buffer (\fBtwolame_options\fP * glopts, \fBconst\fP short \fBint\fP leftpcm[], \fBconst\fP short \fBint\fP rightpcm[], \fBint\fP num_samples, unsigned char * mp2buffer, \fBint\fP mp2buffer_size)"
Encode some 16-bit PCM audio to MP2\&.
.PP
Takes 16-bit PCM audio samples from seperate left and right buffers and places encoded audio into mp2buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP twolame options pointer 
.br
\fIleftpcm\fP Left channel audio samples 
.br
\fIrightpcm\fP Right channel audio samples 
.br
\fInum_samples\fP Number of samples per channel 
.br
\fImp2buffer\fP Buffer to place encoded audio into 
.br
\fImp2buffer_size\fP Size of the output buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes put in output buffer or a negative value on error 
.RE
.PP

.PP
Definition at line 618 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_encode_buffer_float32 (\fBtwolame_options\fP * glopts, \fBconst\fP float leftpcm[], \fBconst\fP float rightpcm[], \fBint\fP num_samples, unsigned char * mp2buffer, \fBint\fP mp2buffer_size)"
Encode some 32-bit PCM audio to MP2\&.
.PP
Takes 32-bit floating point PCM audio samples from seperate left and right buffers and places encoded audio into mp2buffer\&.
.PP
Note: the 32-bit samples are currently scaled down to 16-bit samples internally\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP twolame options pointer 
.br
\fIleftpcm\fP Left channel audio samples 
.br
\fIrightpcm\fP Right channel audio samples 
.br
\fInum_samples\fP Number of samples per channel 
.br
\fImp2buffer\fP Buffer to place encoded audio into 
.br
\fImp2buffer_size\fP Size of the output buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes put in output buffer or a negative value on error 
.RE
.PP

.PP
Definition at line 760 of file twolame\&.c\&.
.SS "\fBint\fP twolame_encode_buffer_float32_interleaved (\fBtwolame_options\fP * glopts, \fBconst\fP float pcm[], \fBint\fP num_samples, unsigned char * mp2buffer, \fBint\fP mp2buffer_size)"
Encode some 32-bit PCM audio to MP2\&.
.PP
Takes 32-bit floating point PCM audio samples from a single buffer and places encoded audio into mp2buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP twolame options pointer 
.br
\fIpcm\fP Audio samples for left AND right channels 
.br
\fInum_samples\fP Number of samples per channel 
.br
\fImp2buffer\fP Buffer to place encoded audio into 
.br
\fImp2buffer_size\fP Size of the output buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes put in output buffer or a negative value on error 
.RE
.PP

.PP
Definition at line 818 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_encode_buffer_interleaved (\fBtwolame_options\fP * glopts, \fBconst\fP short \fBint\fP pcm[], \fBint\fP num_samples, unsigned char * mp2buffer, \fBint\fP mp2buffer_size)"
Encode some 16-bit PCM audio to MP2\&.
.PP
Takes interleaved 16-bit PCM audio samples from a single buffer and places encoded audio into mp2buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP twolame options pointer 
.br
\fIpcm\fP Audio samples for left AND right channels 
.br
\fInum_samples\fP Number of samples per channel 
.br
\fImp2buffer\fP Buffer to place encoded audio into 
.br
\fImp2buffer_size\fP Size of the output buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes put in output buffer or a negative value on error 
.RE
.PP

.PP
Definition at line 676 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_encode_flush (\fBtwolame_options\fP * glopts, unsigned char * mp2buffer, \fBint\fP mp2buffer_size)"
Encode any remains buffered PCM audio to MP2\&.
.PP
Encodes any remaining audio samples in the libtwolame internal sample buffer\&. This function will return at most a single frame of MPEG Audio, and at least 0 frames\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP twolame options pointer 
.br
\fImp2buffer\fP Buffer to place encoded audio into 
.br
\fImp2buffer_size\fP Size of the output buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes put in output buffer or a negative value on error 
.RE
.PP

.PP
Definition at line 877 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP float twolame_get_ATH_level (\fBtwolame_options\fP * glopts)"
Get the adjustment (in dB) applied to the ATH for Psycho models 3 and 4\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
adjustment level in db 
.RE
.PP

.PP
Definition at line 309 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_bitrate (\fBtwolame_options\fP * glopts)"
Get the bitrate of the MPEG audio output\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the output bitrate in kbps 
.RE
.PP

.PP
Definition at line 180 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_brate (\fBtwolame_options\fP * glopts)"
Get the bitrate of the MPEG audio output stream (LAME style)\&.
.PP
same as \fBtwolame_get_bitrate()\fP 
.PP
Definition at line 167 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_copyright (\fBtwolame_options\fP * glopts)"
Get the copright flag state
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
state of the copyright flag (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 223 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_DAB (\fBtwolame_options\fP * glopts)"
Get the state of the DAB extensions
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the state of DAB (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 433 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_DAB_crc_length (\fBtwolame_options\fP * glopts)"
Get the CRC error protection length for DAB\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
length of DAB CRC 
.RE
.PP

.PP
Definition at line 460 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_DAB_xpad_length (\fBtwolame_options\fP * glopts)"
Get the number of bytes reserved for DAB XPAD data\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
number of XPAD bytes 
.RE
.PP

.PP
Definition at line 446 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBTWOLAME_Emphasis\fP twolame_get_emphasis (\fBtwolame_options\fP * glopts)"
Get the type of pre-emphasis to be applied to the decoded audio\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the type of pre-emphasis 
.RE
.PP

.PP
Definition at line 195 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_energy_levels (\fBtwolame_options\fP * glopts)"
Get the Energy Level Extension state\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
state of the Energy Level Extension (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 391 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_error_protection (\fBtwolame_options\fP * glopts)"
Get the CRC Error Protection state\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
state of Error Protection (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 209 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_framelength (\fBtwolame_options\fP * glopts)"
Get the number of bytes per MPEG audio frame, for current settings\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of bytes per frame 
.RE
.PP

.PP
Definition at line 163 of file util\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_in_samplerate (\fBtwolame_options\fP * glopts)"
Get the samplerate of the PCM audio input\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the input samplerate 
.RE
.PP

.PP
Definition at line 145 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBTWOLAME_MPEG_mode\fP twolame_get_mode (\fBtwolame_options\fP * glopts)"
Get the MPEG Audio mode of the output stream\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the MPEG audio mode 
.RE
.PP

.PP
Definition at line 52 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBconst\fP char* twolame_get_mode_name (\fBtwolame_options\fP * glopts)"
Get a string name for the current MPEG Audio mode\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the name of the MPEG audio mode as a string 
.RE
.PP

.PP
Definition at line 57 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_num_ancillary_bits (\fBtwolame_options\fP * glopts)"
Get the number of Ancillary Bits at end of frame\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
number of Ancillary Bits at end of frame 
.RE
.PP

.PP
Definition at line 374 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_num_channels (\fBtwolame_options\fP * glopts)"
Get the number of channels in the input stream\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of channels 
.RE
.PP

.PP
Definition at line 88 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_original (\fBtwolame_options\fP * glopts)"
Get the origianl flag state\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
state of the original flag (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 237 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_out_samplerate (\fBtwolame_options\fP * glopts)"
Get the samplerate of the MPEG audio output\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the output samplerate 
.RE
.PP

.PP
Definition at line 156 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBTWOLAME_Padding\fP twolame_get_padding (\fBtwolame_options\fP * glopts)"
Get the padding type of the MPEG audio output\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the output bitrate in kbps 
.RE
.PP

.PP
Definition at line 252 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_psymodel (\fBtwolame_options\fP * glopts)"
Get the Psychoacoustic Model used to encode the audio\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the psychoacoustic model number 
.RE
.PP

.PP
Definition at line 75 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_quick_count (\fBtwolame_options\fP * glopts)"
Get the how often the psy model is calculated\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
number of frames between calculations 
.RE
.PP

.PP
Definition at line 334 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_quick_mode (\fBtwolame_options\fP * glopts)"
Get the state of quick mode\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the state of quick mode (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 323 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP float twolame_get_scale (\fBtwolame_options\fP * glopts)"
Get the scaling level for audio before encoding\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the amount to scale audio sample by 
.RE
.PP

.PP
Definition at line 103 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP float twolame_get_scale_left (\fBtwolame_options\fP * glopts)"
Get the scaling level for audio left channel before encoding\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the amount to scale left channel audio samples by 
.RE
.PP

.PP
Definition at line 118 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP float twolame_get_scale_right (\fBtwolame_options\fP * glopts)"
Get the scaling level for audio right channel before encoding\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the amount to scale right channel audio samples by 
.RE
.PP

.PP
Definition at line 133 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_VBR (\fBtwolame_options\fP * glopts)"
Get the VBR state\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
state of VBR (TRUE/FALSE) 
.RE
.PP

.PP
Definition at line 266 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP float twolame_get_VBR_level (\fBtwolame_options\fP * glopts)"
Get the level/quality of the VBR audio\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
quality value for VBR 
.RE
.PP

.PP
Definition at line 281 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_VBR_max_bitrate_kbps (\fBtwolame_options\fP * glopts)"
Get the upper bitrate for VBR\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the upper bitrate for VBR 
.RE
.PP

.PP
Definition at line 361 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP float twolame_get_VBR_q (\fBtwolame_options\fP * glopts)"

.PP
Definition at line 298 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_get_verbosity (\fBtwolame_options\fP * glopts)"
Get the verbosity of the encoder\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
integer indicating the verbosity of the encoder (0-10) 
.RE
.PP

.PP
Definition at line 350 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBTWOLAME_MPEG_version\fP twolame_get_version (\fBtwolame_options\fP * glopts)"
Get the MPEG version of the output stream\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the MPEG version 
.RE
.PP

.PP
Definition at line 404 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBconst\fP char* twolame_get_version_name (\fBtwolame_options\fP * glopts)"
Get a string name for the current MPEG version\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the name of the MPEG version as a string 
.RE
.PP

.PP
Definition at line 409 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBtwolame_options\fP* twolame_init (\fBvoid\fP)"
Initialise the twolame encoder\&.
.PP
Sets defaults for all parameters\&. Will return NULL if malloc() failed, otherwise returns a pointer which you then need to pass to all future API calls\&.
.PP
\fBReturns:\fP
.RS 4
a pointer to your new options data structure 
.RE
.PP

.PP
Definition at line 60 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_init_params (\fBtwolame_options\fP * glopts)"
Prepare to start encoding\&.
.PP
You must call \fBtwolame_init_params()\fP before you start encoding\&. It will check call your parameters to make sure they are valid, as well as allocating buffers and initising internally used variables\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP Options pointer created by \fBtwolame_init()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if all patameters are valid, non-zero if something is invalid
.RE
.PP
This function should actually \fIcheck\fP the parameters to see if they make sense\&. 
.PP
Definition at line 177 of file twolame\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBvoid\fP twolame_print_config (\fBtwolame_options\fP * glopts)"
Print the library version and encoder parameter settings to STDERR\&.
.PP
Will display differnent ammounts of information depending on the verbosity setting\&. If verbosity is set to 0 then no message will be displayed\&.
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP Options pointer created by \fBtwolame_init()\fP 
.RE
.PP

.PP
Definition at line 177 of file util\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_ATH_level (\fBtwolame_options\fP * glopts, float level)"
Set the adjustment (in dB) applied to the ATH for Psycho models 3 and 4\&.
.PP
Default: 0\&.0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIlevel\fP adjustment level in db 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 303 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_bitrate (\fBtwolame_options\fP * glopts, \fBint\fP bitrate)"
Set the bitrate of the MPEG audio output stream\&.
.PP
Default: 192
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIbitrate\fP the bitrate in kbps 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 174 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_brate (\fBtwolame_options\fP * glopts, \fBint\fP bitrate)"
Set the bitrate of the MPEG audio output stream (LAME style)\&.
.PP
same as \fBtwolame_set_bitrate()\fP 
.PP
Definition at line 161 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_copyright (\fBtwolame_options\fP * glopts, \fBint\fP copyright)"
Set the MPEG Audio Copyright flag\&.
.PP
Indicates that MPEG stream is copyrighted\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIcopyright\fP copyright flag state (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 214 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_DAB (\fBtwolame_options\fP * glopts, \fBint\fP dab)"
Enable/Disable the Eureka 147 DAB extensions for MP2\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIdab\fP state of DAB extensions (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 421 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_DAB_crc_length (\fBtwolame_options\fP * glopts, \fBint\fP length)"
Set the CRC error protection length for DAB\&.
.PP
Default: 2
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIlength\fP length of DAB CRC 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 451 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_DAB_xpad_length (\fBtwolame_options\fP * glopts, \fBint\fP length)"
Set the number of bytes to reserve for DAB XPAD data\&.
.PP
Default: 0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIlength\fP number of bytes to reserve 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 438 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_emphasis (\fBtwolame_options\fP * glopts, \fBTWOLAME_Emphasis\fP emphasis)"
Set the type of pre-emphasis to be applied to the decoded audio\&.
.PP
Default: TWOLAME_EMPHASIS_N
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIemphasis\fP the type of pre-emphasis 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 186 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_energy_levels (\fBtwolame_options\fP * glopts, \fBint\fP energylevels)"
Enable/Disable Energy Level Extension\&.
.PP
Enable writing the peak PCM level (energy level) at the end of each MPEG audio frame (in the ancillary bits)\&. This function will automatically call \fBtwolame_set_num_ancillary_bits()\fP to set the required number of ancillary bits for this feature\&.
.PP
The energy level extension is commonly used in the broadcast industry for visualising the audio in editing applications without decoding\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIenergylevels\fP energy level extension state (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 379 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_error_protection (\fBtwolame_options\fP * glopts, \fBint\fP err_protection)"
Enable/Disable CRC Error Protection\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIerr_protection\fP error protection state (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 200 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_in_samplerate (\fBtwolame_options\fP * glopts, \fBint\fP samplerate)"
Set the samplerate of the PCM audio input\&.
.PP
Default: 44100
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIsamplerate\fP the samplerate in Hz 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 139 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_mode (\fBtwolame_options\fP * glopts, \fBTWOLAME_MPEG_mode\fP mode)"
Set the MPEG Audio Mode (Mono, Stereo, etc) for the output stream\&.
.PP
Default: TWOLAME_AUTO_MODE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fImode\fP the mode to set to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 42 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_num_ancillary_bits (\fBtwolame_options\fP * glopts, \fBint\fP num)"
Set number of Ancillary Bits at end of frame\&.
.PP
Default: 0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fInum\fP number of bits to reserve 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 366 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_num_channels (\fBtwolame_options\fP * glopts, \fBint\fP num_channels)"
Set the number of channels in the input stream\&.
.PP
If this is different the number of channels in the output stream (set by mode) then the encoder will automatically downmix/upmix the audio\&.
.PP
Default: 2
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fInum_channels\fP the number of input channels 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 82 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_original (\fBtwolame_options\fP * glopts, \fBint\fP original)"
Set the MPEG Audio Original flag\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIoriginal\fP original flag state (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 228 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_out_samplerate (\fBtwolame_options\fP * glopts, \fBint\fP samplerate)"
Set the samplerate of the MPEG audio output\&.
.PP
Default: 44100
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIsamplerate\fP the samplerate in Hz 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 150 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_padding (\fBtwolame_options\fP * glopts, \fBTWOLAME_Padding\fP padding)"
Set frame padding for the MPEG audio output stream\&.
.PP
i\&.e\&. adjust frame sizes to achieve overall target bitrate
.PP
Default: TWOLAME_PAD_NO
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIpadding\fP the padding type 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 242 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_psymodel (\fBtwolame_options\fP * glopts, \fBint\fP psymodel)"
Set the Psychoacoustic Model used to encode the audio\&.
.PP
Default: 3
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIpsymodel\fP the psychoacoustic model number 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 69 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_quick_count (\fBtwolame_options\fP * glopts, \fBint\fP quickcount)"
Set how often the psy model is calculated\&.
.PP
Default: 10
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIquickcount\fP number of frames between calculations 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 328 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_quick_mode (\fBtwolame_options\fP * glopts, \fBint\fP quickmode)"
Enable/Disable the quick mode for psycho model calculation\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIquickmode\fP the state of quick mode (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 314 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_scale (\fBtwolame_options\fP * glopts, float scale)"
Set the scaling level for audio before encoding\&.
.PP
Set to 0 to disable\&.
.PP
Default: 0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIscale\fP the amount to scale by 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 93 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_scale_left (\fBtwolame_options\fP * glopts, float scale)"
Set the scaling level for left channel audio before encoding\&.
.PP
Set to 0 to disable\&.
.PP
Default: 0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIscale\fP the amount to scale by 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 108 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_scale_right (\fBtwolame_options\fP * glopts, float scale)"
Set the scaling level for right channel audio before encoding\&.
.PP
Set to 0 to disable\&.
.PP
Default: 0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIscale\fP the amount to scale by 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 123 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_VBR (\fBtwolame_options\fP * glopts, \fBint\fP vbr)"
Enable/Disable VBR (Variable Bit Rate) mode\&.
.PP
Default: FALSE
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIvbr\fP VBR state (TRUE/FALSE) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 257 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_VBR_level (\fBtwolame_options\fP * glopts, float level)"
Set the level/quality of the VBR audio\&.
.PP
The level value can is a measurement of quality - the higher the level the higher the average bitrate of the resultant file\&.
.PP
Default: 5\&.0
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIlevel\fP quality level (-10 to 10) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 271 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_VBR_max_bitrate_kbps (\fBtwolame_options\fP * glopts, \fBint\fP bitrate)"
Set the upper bitrate for VBR
.PP
Default: 0 (off)
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIbitrate\fP upper bitrate for VBR 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 355 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_VBR_q (\fBtwolame_options\fP * glopts, float level)"

.PP
Definition at line 287 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_verbosity (\fBtwolame_options\fP * glopts, \fBint\fP verbosity)"
Set the verbosity of the encoder\&.
.PP
Sets how verbose the encoder is with the debug and informational messages it displays\&. The higher the number, the more messages it will display\&. Set to 0 for no status messages to STDERR ( error messages will still be displayed )\&.
.PP
Default: 1
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIverbosity\fP integer between 0 and 10 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 340 of file get_set\&.c\&.
.SS "\fBDLL_EXPORT\fP \fBint\fP twolame_set_version (\fBtwolame_options\fP * glopts, \fBTWOLAME_MPEG_version\fP version)"
Set the MPEG version of the MPEG audio stream\&.
.PP
Default: TWOLAME_MPEG1
.PP
\fBParameters:\fP
.RS 4
\fIglopts\fP pointer to twolame options pointer 
.br
\fIversion\fP the version to set to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, non-zero on failure 
.RE
.PP

.PP
Definition at line 396 of file get_set\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
