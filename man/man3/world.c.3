.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <assert\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'lv2/lv2plug\&.in/ns/ext/presets/presets\&.h'\fP
.br
\fC#include 'lilv_internal\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNS_DCTERMS\fP   'http://purl\&.org/dc/terms/'"
.br
.ti -1c
.RI "#define \fBNS_DYNMAN\fP   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/dynmanifest#'"
.br
.ti -1c
.RI "#define \fBNEW_URI\fP(\fBuri\fP)   \fBsord_new_uri\fP(world\->world, (\fBconst\fP \fBuint8_t\fP*)\fBuri\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLILV_API\fP \fBLilvWorld\fP * \fBlilv_world_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_free\fP (\fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_set_option\fP (\fBLilvWorld\fP *world, \fBconst\fP char *option, \fBconst\fP \fBLilvNode\fP *\fBvalue\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNodes\fP * \fBlilv_world_find_nodes\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP, \fBconst\fP \fBLilvNode\fP *object)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBLilvNode\fP * \fBlilv_world_get\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP, \fBconst\fP \fBLilvNode\fP *object)"
.br
.ti -1c
.RI "\fBSordIter\fP * \fBlilv_world_query_internal\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBSordNode\fP *subject, \fBconst\fP \fBSordNode\fP *\fBpredicate\fP, \fBconst\fP \fBSordNode\fP *object)"
.br
.ti -1c
.RI "\fBbool\fP \fBlilv_world_ask_internal\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBSordNode\fP *subject, \fBconst\fP \fBSordNode\fP *\fBpredicate\fP, \fBconst\fP \fBSordNode\fP *object)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBbool\fP \fBlilv_world_ask\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *subject, \fBconst\fP \fBLilvNode\fP *\fBpredicate\fP, \fBconst\fP \fBLilvNode\fP *object)"
.br
.ti -1c
.RI "\fBLilvNodes\fP * \fBlilv_world_find_nodes_internal\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBSordNode\fP *subject, \fBconst\fP \fBSordNode\fP *\fBpredicate\fP, \fBconst\fP \fBSordNode\fP *object)"
.br
.ti -1c
.RI "\fBconst\fP \fBuint8_t\fP * \fBlilv_world_blank_node_prefix\fP (\fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBint\fP \fBlilv_header_compare_by_uri\fP (\fBconst\fP \fBvoid\fP *\fBa\fP, \fBconst\fP \fBvoid\fP *\fBb\fP, \fBvoid\fP *user_data)"
.br
.ti -1c
.RI "\fBint\fP \fBlilv_lib_compare\fP (\fBconst\fP \fBvoid\fP *\fBa\fP, \fBconst\fP \fBvoid\fP *\fBb\fP, \fBvoid\fP *user_data)"
.br
.ti -1c
.RI "struct \fBLilvHeader\fP * \fBlilv_collection_get_by_uri\fP (\fBconst\fP \fBZixTree\fP *const_seq, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.ti -1c
.RI "\fBSerdStatus\fP \fBlilv_world_load_graph\fP (\fBLilvWorld\fP *world, \fBSordNode\fP *graph, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_load_bundle\fP (\fBLilvWorld\fP *world, \fBLilvNode\fP *bundle_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_world_unload_bundle\fP (\fBLilvWorld\fP *world, \fBLilvNode\fP *bundle_uri)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBvoid\fP \fBlilv_world_load_all\fP (\fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBSerdStatus\fP \fBlilv_world_load_file\fP (\fBLilvWorld\fP *world, \fBSerdReader\fP *reader, \fBconst\fP \fBLilvNode\fP *\fBuri\fP)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_world_load_resource\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *resource)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBint\fP \fBlilv_world_unload_resource\fP (\fBLilvWorld\fP *world, \fBconst\fP \fBLilvNode\fP *resource)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClass\fP * \fBlilv_world_get_plugin_class\fP (\fBconst\fP \fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPluginClasses\fP * \fBlilv_world_get_plugin_classes\fP (\fBconst\fP \fBLilvWorld\fP *world)"
.br
.ti -1c
.RI "\fBLILV_API\fP \fBconst\fP \fBLilvPlugins\fP * \fBlilv_world_get_all_plugins\fP (\fBconst\fP \fBLilvWorld\fP *world)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define NEW_URI(\fBuri\fP)   \fBsord_new_uri\fP(world\->world, (\fBconst\fP \fBuint8_t\fP*)\fBuri\fP)"

.SS "#define NS_DCTERMS   'http://purl\&.org/dc/terms/'"

.SS "#define NS_DYNMAN   'http://\fBlv2plug\&.in\fP/\fBns\fP/ext/dynmanifest#'"

.SH "Function Documentation"
.PP 
.SS "struct \fBLilvHeader\fP* lilv_collection_get_by_uri (\fBconst\fP \fBZixTree\fP * const_seq, \fBconst\fP \fBLilvNode\fP * uri)"
Get an element of a collection of any object with an \fBLilvHeader\fP by URI\&. 
.PP
Definition at line 306 of file world\&.c\&.
.SS "\fBint\fP lilv_header_compare_by_uri (\fBconst\fP \fBvoid\fP * a, \fBconst\fP \fBvoid\fP * b, \fBvoid\fP * user_data)"
Comparator for sequences (e\&.g\&. world->plugins)\&. 
.PP
Definition at line 279 of file world\&.c\&.
.SS "\fBint\fP lilv_lib_compare (\fBconst\fP \fBvoid\fP * a, \fBconst\fP \fBvoid\fP * b, \fBvoid\fP * user_data)"
Comparator for libraries (world->libs)\&.
.PP
Libraries do have a \fBLilvHeader\fP, but we must also compare the bundle to handle the case where the same library is loaded with different bundles, and consequently different contents (mainly plugins)\&. 
.PP
Definition at line 295 of file world\&.c\&.
.SS "\fBbool\fP lilv_world_ask_internal (\fBLilvWorld\fP * world, \fBconst\fP \fBSordNode\fP * subject, \fBconst\fP \fBSordNode\fP * predicate, \fBconst\fP \fBSordNode\fP * object)"

.PP
Definition at line 226 of file world\&.c\&.
.SS "\fBconst\fP \fBuint8_t\fP* lilv_world_blank_node_prefix (\fBLilvWorld\fP * world)"

.PP
Definition at line 270 of file world\&.c\&.
.SS "\fBLilvNodes\fP* lilv_world_find_nodes_internal (\fBLilvWorld\fP * world, \fBconst\fP \fBSordNode\fP * subject, \fBconst\fP \fBSordNode\fP * predicate, \fBconst\fP \fBSordNode\fP * object)"

.PP
Definition at line 245 of file world\&.c\&.
.SS "\fBSerdStatus\fP lilv_world_load_file (\fBLilvWorld\fP * world, \fBSerdReader\fP * reader, \fBconst\fP \fBLilvNode\fP * uri)"

.PP
Definition at line 797 of file world\&.c\&.
.SS "\fBSerdStatus\fP lilv_world_load_graph (\fBLilvWorld\fP * world, \fBSordNode\fP * graph, \fBconst\fP \fBLilvNode\fP * uri)"

.PP
Definition at line 409 of file world\&.c\&.
.SS "\fBSordIter\fP* lilv_world_query_internal (\fBLilvWorld\fP * world, \fBconst\fP \fBSordNode\fP * subject, \fBconst\fP \fBSordNode\fP * predicate, \fBconst\fP \fBSordNode\fP * object)"

.PP
Definition at line 217 of file world\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
