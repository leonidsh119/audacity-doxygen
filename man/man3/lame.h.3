.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lame/lame/lame.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lame/lame/lame.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBlame_version_t\fP"
.br
.ti -1c
.RI "struct \fBmp3data_struct\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCDECL\fP"
.br
.ti -1c
.RI "#define \fBLAME_MAXMP3BUFFER\fP   16384"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBvbr_mode_e\fP \fBvbr_mode\fP"
.br
.ti -1c
.RI "typedef enum \fBMPEG_mode_e\fP \fBMPEG_mode\fP"
.br
.ti -1c
.RI "typedef enum \fBPadding_type_e\fP \fBPadding_type\fP"
.br
.ti -1c
.RI "typedef enum \fBpreset_mode_e\fP \fBpreset_mode\fP"
.br
.ti -1c
.RI "typedef enum \fBasm_optimizations_e\fP \fBasm_optimizations\fP"
.br
.ti -1c
.RI "typedef struct lame_global_struct \fBlame_global_flags\fP"
.br
.ti -1c
.RI "typedef \fBlame_global_flags\fP * \fBlame_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBvbr_mode_e\fP { \fBvbr_off\fP =0, \fBvbr_mt\fP, \fBvbr_rh\fP, \fBvbr_abr\fP, \fBvbr_mtrh\fP, \fBvbr_max_indicator\fP, \fBvbr_default\fP =vbr_rh }"
.br
.ti -1c
.RI "enum \fBMPEG_mode_e\fP { \fBSTEREO\fP = 0, \fBJOINT_STEREO\fP, \fBDUAL_CHANNEL\fP, \fBMONO\fP, \fBNOT_SET\fP, \fBMAX_INDICATOR\fP }"
.br
.ti -1c
.RI "enum \fBPadding_type_e\fP { \fBPAD_NO\fP = 0, \fBPAD_ALL\fP, \fBPAD_ADJUST\fP, \fBPAD_MAX_INDICATOR\fP }"
.br
.ti -1c
.RI "enum \fBpreset_mode_e\fP { \fBABR_8\fP = 8, \fBABR_320\fP = 320, \fBR3MIX\fP = 1000, \fBSTANDARD\fP = 1001, \fBEXTREME\fP = 1002, \fBINSANE\fP = 1003, \fBSTANDARD_FAST\fP = 1004, \fBEXTREME_FAST\fP = 1005 }"
.br
.ti -1c
.RI "enum \fBasm_optimizations_e\fP { \fBMMX\fP = 1, \fBAMD_3DNOW\fP = 2, \fBSSE\fP = 3 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBlame_global_flags\fP *\fBCDECL\fP \fBlame_init\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_init_old\fP (\fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_num_samples\fP (\fBlame_global_flags\fP *, unsigned long)"
.br
.ti -1c
.RI "unsigned long \fBCDECL\fP \fBlame_get_num_samples\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_in_samplerate\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_in_samplerate\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_num_channels\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_num_channels\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_scale\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "float \fBCDECL\fP \fBlame_get_scale\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_scale_left\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "float \fBCDECL\fP \fBlame_get_scale_left\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_scale_right\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "float \fBCDECL\fP \fBlame_get_scale_right\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_out_samplerate\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_out_samplerate\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_analysis\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_analysis\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_bWriteVbrTag\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_bWriteVbrTag\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_decode_only\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_decode_only\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_ogg\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_ogg\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_quality\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_quality\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_mode\fP (\fBlame_global_flags\fP *, \fBMPEG_mode\fP)"
.br
.ti -1c
.RI "\fBMPEG_mode\fP \fBCDECL\fP \fBlame_get_mode\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_mode_automs\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_mode_automs\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_force_ms\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_force_ms\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_free_format\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_free_format\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_errorf\fP (\fBlame_global_flags\fP *, \fBvoid\fP(*func)(\fBconst\fP char *, va_list))"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_debugf\fP (\fBlame_global_flags\fP *, \fBvoid\fP(*func)(\fBconst\fP char *, va_list))"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_msgf\fP (\fBlame_global_flags\fP *, \fBvoid\fP(*func)(\fBconst\fP char *, va_list))"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_brate\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_brate\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_compression_ratio\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "float \fBCDECL\fP \fBlame_get_compression_ratio\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_preset\fP (\fBlame_global_flags\fP *gfp, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_asm_optimizations\fP (\fBlame_global_flags\fP *gfp, \fBint\fP, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_copyright\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_copyright\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_original\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_original\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_error_protection\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_error_protection\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_padding_type\fP (\fBlame_global_flags\fP *, \fBPadding_type\fP)"
.br
.ti -1c
.RI "\fBPadding_type\fP \fBCDECL\fP \fBlame_get_padding_type\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_extension\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_extension\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_strict_ISO\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_strict_ISO\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_disable_reservoir\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_disable_reservoir\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_experimentalX\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_experimentalX\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_experimentalY\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_experimentalY\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_experimentalZ\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_experimentalZ\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_exp_nspsytune\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_exp_nspsytune\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBlame_set_exp_nspsytune2_int\fP (\fBlame_global_flags\fP *, \fBint\fP, \fBint\fP)"
.br
.ti -1c
.RI "float \fBlame_set_exp_nspsytune2_real\fP (\fBlame_global_flags\fP *, \fBint\fP, float)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBlame_set_exp_nspsytune2_pointer\fP (\fBlame_global_flags\fP *, \fBint\fP, \fBvoid\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_VBR\fP (\fBlame_global_flags\fP *, \fBvbr_mode\fP)"
.br
.ti -1c
.RI "\fBvbr_mode\fP \fBCDECL\fP \fBlame_get_VBR\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_VBR_q\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_VBR_q\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_VBR_mean_bitrate_kbps\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_VBR_mean_bitrate_kbps\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_VBR_min_bitrate_kbps\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_VBR_min_bitrate_kbps\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_VBR_max_bitrate_kbps\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_VBR_max_bitrate_kbps\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_VBR_hard_min\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_VBR_hard_min\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_lowpassfreq\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_lowpassfreq\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_lowpasswidth\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_lowpasswidth\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_highpassfreq\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_highpassfreq\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_highpasswidth\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_highpasswidth\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_ATHonly\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_ATHonly\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_ATHshort\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_ATHshort\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_noATH\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_noATH\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_ATHtype\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_ATHtype\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_ATHlower\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "float \fBCDECL\fP \fBlame_get_ATHlower\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_athaa_type\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_athaa_type\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_athaa_loudapprox\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_athaa_loudapprox\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_athaa_sensitivity\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "float \fBCDECL\fP \fBlame_get_athaa_sensitivity\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_cwlimit\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_cwlimit\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_allow_diff_short\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_allow_diff_short\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_useTemporal\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_useTemporal\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_interChRatio\fP (\fBlame_global_flags\fP *, float)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_interChRatio\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_no_short_blocks\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_no_short_blocks\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_force_short_blocks\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_force_short_blocks\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_set_emphasis\fP (\fBlame_global_flags\fP *, \fBint\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_emphasis\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_version\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_encoder_delay\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_encoder_padding\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_framesize\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_mf_samples_to_encode\fP (\fBconst\fP \fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_size_mp3buffer\fP (\fBconst\fP \fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_frameNum\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_get_totalframes\fP (\fBconst\fP \fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_init_params\fP (\fBlame_global_flags\fP *\fBconst\fP )"
.br
.ti -1c
.RI "\fBconst\fP char *\fBCDECL\fP \fBget_lame_version\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char *\fBCDECL\fP \fBget_lame_short_version\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char *\fBCDECL\fP \fBget_lame_very_short_version\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char *\fBCDECL\fP \fBget_psy_version\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char *\fBCDECL\fP \fBget_lame_url\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBget_lame_version_numerical\fP (\fBlame_version_t\fP *\fBconst\fP )"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_print_config\fP (\fBconst\fP \fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_print_internals\fP (\fBconst\fP \fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_buffer\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP short \fBint\fP buffer_l[], \fBconst\fP short \fBint\fP buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char *mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_buffer_interleaved\fP (\fBlame_global_flags\fP *gfp, short \fBint\fP pcm[], \fBint\fP num_samples, unsigned char *mp3buf, \fBint\fP mp3buf_size)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_buffer_float\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP float buffer_l[], \fBconst\fP float buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char *mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_buffer_long\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP long buffer_l[], \fBconst\fP long buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char *mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_buffer_long2\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP long buffer_l[], \fBconst\fP long buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char *mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_buffer_int\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP \fBint\fP buffer_l[], \fBconst\fP \fBint\fP buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char *mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_flush\fP (\fBlame_global_flags\fP *gfp, unsigned char *mp3buf, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_flush_nogap\fP (\fBlame_global_flags\fP *gfp, unsigned char *mp3buf, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_init_bitstream\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_bitrate_hist\fP (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP bitrate_count[14])"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_bitrate_kbps\fP (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP bitrate_kbps[14])"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_stereo_mode_hist\fP (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP stereo_mode_count[4])"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_bitrate_stereo_mode_hist\fP (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP bitrate_stmode_count[14][4])"
.br
.ti -1c
.RI "\fBvoid\fP \fBCDECL\fP \fBlame_mp3_tags_fid\fP (\fBlame_global_flags\fP *, FILE *fid)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_close\fP (\fBlame_global_flags\fP *)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_encode_finish\fP (\fBlame_global_flags\fP *gfp, unsigned char *mp3buf, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_decode_init\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_decode\fP (unsigned char *mp3buf, \fBint\fP \fBlen\fP, short pcm_l[], short pcm_r[])"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_decode_headers\fP (unsigned char *mp3buf, \fBint\fP \fBlen\fP, short pcm_l[], short pcm_r[], \fBmp3data_struct\fP *mp3data)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_decode1\fP (unsigned char *mp3buf, \fBint\fP \fBlen\fP, short pcm_l[], short pcm_r[])"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_decode1_headers\fP (unsigned char *mp3buf, \fBint\fP \fBlen\fP, short pcm_l[], short pcm_r[], \fBmp3data_struct\fP *mp3data)"
.br
.ti -1c
.RI "\fBint\fP \fBCDECL\fP \fBlame_decode1_headersB\fP (unsigned char *mp3buf, \fBint\fP \fBlen\fP, short pcm_l[], short pcm_r[], \fBmp3data_struct\fP *mp3data, \fBint\fP *enc_delay, \fBint\fP *enc_padding)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_genre_list\fP (\fBvoid\fP(*handler)(\fBint\fP, \fBconst\fP char *, \fBvoid\fP *), \fBvoid\fP *cookie)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_init\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_add_v2\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_v1_only\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_v2_only\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_space_v1\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_pad_v2\fP (\fBlame_global_flags\fP *gfp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_set_title\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *title)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_set_artist\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *artist)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_set_album\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *album)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_set_year\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *year)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_set_comment\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *comment)"
.br
.ti -1c
.RI "\fBvoid\fP \fBid3tag_set_track\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *track)"
.br
.ti -1c
.RI "\fBint\fP \fBid3tag_set_genre\fP (\fBlame_global_flags\fP *gfp, \fBconst\fP char *genre)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBint\fP \fBbitrate_table\fP [3][16]"
.br
.ti -1c
.RI "\fBconst\fP \fBint\fP \fBsamplerate_table\fP [3][4]"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CDECL"

.PP
Definition at line 37 of file lame\&.h\&.
.SS "#define LAME_MAXMP3BUFFER   16384"

.PP
Definition at line 931 of file lame\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBasm_optimizations_e\fP  \fBasm_optimizations\fP"

.SS "typedef struct lame_global_struct \fBlame_global_flags\fP"

.PP
Definition at line 96 of file lame\&.h\&.
.SS "typedef \fBlame_global_flags\fP* \fBlame_t\fP"

.PP
Definition at line 97 of file lame\&.h\&.
.SS "typedef enum \fBMPEG_mode_e\fP  \fBMPEG_mode\fP"

.SS "typedef enum \fBPadding_type_e\fP  \fBPadding_type\fP"

.SS "typedef enum \fBpreset_mode_e\fP  \fBpreset_mode\fP"

.SS "typedef enum \fBvbr_mode_e\fP  \fBvbr_mode\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBasm_optimizations_e\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMMX \fP\fP
.TP
\fB\fIAMD_3DNOW \fP\fP
.TP
\fB\fISSE \fP\fP
.PP
Definition at line 88 of file lame\&.h\&.
.SS "enum \fBMPEG_mode_e\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTEREO \fP\fP
.TP
\fB\fIJOINT_STEREO \fP\fP
.TP
\fB\fIDUAL_CHANNEL \fP\fP
.TP
\fB\fIMONO \fP\fP
.TP
\fB\fINOT_SET \fP\fP
.TP
\fB\fIMAX_INDICATOR \fP\fP
.PP
Definition at line 53 of file lame\&.h\&.
.SS "enum \fBPadding_type_e\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPAD_NO \fP\fP
.TP
\fB\fIPAD_ALL \fP\fP
.TP
\fB\fIPAD_ADJUST \fP\fP
.TP
\fB\fIPAD_MAX_INDICATOR \fP\fP
.PP
Definition at line 63 of file lame\&.h\&.
.SS "enum \fBpreset_mode_e\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIABR_8 \fP\fP
.TP
\fB\fIABR_320 \fP\fP
.TP
\fB\fIR3MIX \fP\fP
.TP
\fB\fISTANDARD \fP\fP
.TP
\fB\fIEXTREME \fP\fP
.TP
\fB\fIINSANE \fP\fP
.TP
\fB\fISTANDARD_FAST \fP\fP
.TP
\fB\fIEXTREME_FAST \fP\fP
.PP
Definition at line 73 of file lame\&.h\&.
.SS "enum \fBvbr_mode_e\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIvbr_off \fP\fP
.TP
\fB\fIvbr_mt \fP\fP
.TP
\fB\fIvbr_rh \fP\fP
.TP
\fB\fIvbr_abr \fP\fP
.TP
\fB\fIvbr_mtrh \fP\fP
.TP
\fB\fIvbr_max_indicator \fP\fP
.TP
\fB\fIvbr_default \fP\fP
.PP
Definition at line 41 of file lame\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBconst\fP char* \fBCDECL\fP get_lame_short_version (\fBvoid\fP)"

.SS "\fBconst\fP char* \fBCDECL\fP get_lame_url (\fBvoid\fP)"

.SS "\fBconst\fP char* \fBCDECL\fP get_lame_version (\fBvoid\fP)"

.SS "\fBvoid\fP \fBCDECL\fP get_lame_version_numerical (\fBlame_version_t\fP * const)"

.SS "\fBconst\fP char* \fBCDECL\fP get_lame_very_short_version (\fBvoid\fP)"

.SS "\fBconst\fP char* \fBCDECL\fP get_psy_version (\fBvoid\fP)"

.SS "\fBvoid\fP id3tag_add_v2 (\fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP id3tag_genre_list (\fBvoid\fP(*)(\fBint\fP, \fBconst\fP char *, \fBvoid\fP *) handler, \fBvoid\fP * cookie)"

.SS "\fBvoid\fP id3tag_init (\fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP id3tag_pad_v2 (\fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP id3tag_set_album (\fBlame_global_flags\fP * gfp, \fBconst\fP char * album)"

.SS "\fBvoid\fP id3tag_set_artist (\fBlame_global_flags\fP * gfp, \fBconst\fP char * artist)"

.SS "\fBvoid\fP id3tag_set_comment (\fBlame_global_flags\fP * gfp, \fBconst\fP char * comment)"

.SS "\fBint\fP id3tag_set_genre (\fBlame_global_flags\fP * gfp, \fBconst\fP char * genre)"

.SS "\fBvoid\fP id3tag_set_title (\fBlame_global_flags\fP * gfp, \fBconst\fP char * title)"

.SS "\fBvoid\fP id3tag_set_track (\fBlame_global_flags\fP * gfp, \fBconst\fP char * track)"

.SS "\fBvoid\fP id3tag_set_year (\fBlame_global_flags\fP * gfp, \fBconst\fP char * year)"

.SS "\fBvoid\fP id3tag_space_v1 (\fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP id3tag_v1_only (\fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP id3tag_v2_only (\fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP \fBCDECL\fP lame_bitrate_hist (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP bitrate_count[14])"

.SS "\fBvoid\fP \fBCDECL\fP lame_bitrate_kbps (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP bitrate_kbps[14])"

.SS "\fBvoid\fP \fBCDECL\fP lame_bitrate_stereo_mode_hist (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP bitrate_stmode_count[14][4])"

.SS "\fBint\fP \fBCDECL\fP lame_close (\fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_decode (unsigned char * mp3buf, \fBint\fP len, short pcm_l[], short pcm_r[])"

.SS "\fBint\fP \fBCDECL\fP lame_decode1 (unsigned char * mp3buf, \fBint\fP len, short pcm_l[], short pcm_r[])"

.SS "\fBint\fP \fBCDECL\fP lame_decode1_headers (unsigned char * mp3buf, \fBint\fP len, short pcm_l[], short pcm_r[], \fBmp3data_struct\fP * mp3data)"

.SS "\fBint\fP \fBCDECL\fP lame_decode1_headersB (unsigned char * mp3buf, \fBint\fP len, short pcm_l[], short pcm_r[], \fBmp3data_struct\fP * mp3data, \fBint\fP * enc_delay, \fBint\fP * enc_padding)"

.SS "\fBint\fP \fBCDECL\fP lame_decode_headers (unsigned char * mp3buf, \fBint\fP len, short pcm_l[], short pcm_r[], \fBmp3data_struct\fP * mp3data)"

.SS "\fBint\fP \fBCDECL\fP lame_decode_init (\fBvoid\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_buffer (\fBlame_global_flags\fP * gfp, \fBconst\fP short \fBint\fP buffer_l[], \fBconst\fP short \fBint\fP buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char * mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_buffer_float (\fBlame_global_flags\fP * gfp, \fBconst\fP float buffer_l[], \fBconst\fP float buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char * mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_buffer_int (\fBlame_global_flags\fP * gfp, \fBconst\fP \fBint\fP buffer_l[], \fBconst\fP \fBint\fP buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char * mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_buffer_interleaved (\fBlame_global_flags\fP * gfp, short \fBint\fP pcm[], \fBint\fP num_samples, unsigned char * mp3buf, \fBint\fP mp3buf_size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_buffer_long (\fBlame_global_flags\fP * gfp, \fBconst\fP long buffer_l[], \fBconst\fP long buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char * mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_buffer_long2 (\fBlame_global_flags\fP * gfp, \fBconst\fP long buffer_l[], \fBconst\fP long buffer_r[], \fBconst\fP \fBint\fP nsamples, unsigned char * mp3buf, \fBconst\fP \fBint\fP mp3buf_size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_finish (\fBlame_global_flags\fP * gfp, unsigned char * mp3buf, \fBint\fP size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_flush (\fBlame_global_flags\fP * gfp, unsigned char * mp3buf, \fBint\fP size)"

.SS "\fBint\fP \fBCDECL\fP lame_encode_flush_nogap (\fBlame_global_flags\fP * gfp, unsigned char * mp3buf, \fBint\fP size)"

.SS "\fBint\fP \fBCDECL\fP lame_get_allow_diff_short (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_analysis (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_athaa_loudapprox (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "float \fBCDECL\fP lame_get_athaa_sensitivity (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_athaa_type (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "float \fBCDECL\fP lame_get_ATHlower (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_ATHonly (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_ATHshort (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_ATHtype (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_brate (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_bWriteVbrTag (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "float \fBCDECL\fP lame_get_compression_ratio (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_copyright (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_cwlimit (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_decode_only (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_disable_reservoir (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_emphasis (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_encoder_delay (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_encoder_padding (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_error_protection (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_exp_nspsytune (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_experimentalX (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_experimentalY (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_experimentalZ (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_extension (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_force_ms (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_force_short_blocks (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_frameNum (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_framesize (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_free_format (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_highpassfreq (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_highpasswidth (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_in_samplerate (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_interChRatio (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_lowpassfreq (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_lowpasswidth (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_mf_samples_to_encode (\fBconst\fP \fBlame_global_flags\fP * gfp)"

.SS "\fBMPEG_mode\fP \fBCDECL\fP lame_get_mode (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_mode_automs (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_no_short_blocks (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_noATH (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_num_channels (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "unsigned long \fBCDECL\fP lame_get_num_samples (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_ogg (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_original (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_out_samplerate (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBPadding_type\fP \fBCDECL\fP lame_get_padding_type (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_quality (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "float \fBCDECL\fP lame_get_scale (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "float \fBCDECL\fP lame_get_scale_left (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "float \fBCDECL\fP lame_get_scale_right (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_size_mp3buffer (\fBconst\fP \fBlame_global_flags\fP * gfp)"

.SS "\fBint\fP \fBCDECL\fP lame_get_strict_ISO (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_totalframes (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_useTemporal (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBvbr_mode\fP \fBCDECL\fP lame_get_VBR (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_VBR_hard_min (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_VBR_max_bitrate_kbps (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_VBR_mean_bitrate_kbps (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_VBR_min_bitrate_kbps (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_VBR_q (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_get_version (\fBconst\fP \fBlame_global_flags\fP *)"

.SS "\fBlame_global_flags\fP* \fBCDECL\fP lame_init (\fBvoid\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_init_bitstream (\fBlame_global_flags\fP * gfp)"

.SS "\fBint\fP \fBCDECL\fP lame_init_old (\fBlame_global_flags\fP *)"

.SS "\fBint\fP \fBCDECL\fP lame_init_params (\fBlame_global_flags\fP * const)"

.SS "\fBvoid\fP \fBCDECL\fP lame_mp3_tags_fid (\fBlame_global_flags\fP *, FILE * fid)"

.SS "\fBvoid\fP \fBCDECL\fP lame_print_config (\fBconst\fP \fBlame_global_flags\fP * gfp)"

.SS "\fBvoid\fP \fBCDECL\fP lame_print_internals (\fBconst\fP \fBlame_global_flags\fP * gfp)"

.SS "\fBint\fP \fBCDECL\fP lame_set_allow_diff_short (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_analysis (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_asm_optimizations (\fBlame_global_flags\fP * gfp, \fBint\fP, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_athaa_loudapprox (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_athaa_sensitivity (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_athaa_type (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_ATHlower (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_ATHonly (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_ATHshort (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_ATHtype (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_brate (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_bWriteVbrTag (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_compression_ratio (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_copyright (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_cwlimit (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_debugf (\fBlame_global_flags\fP *, \fBvoid\fP(*)(\fBconst\fP char *, va_list) func)"

.SS "\fBint\fP \fBCDECL\fP lame_set_decode_only (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_disable_reservoir (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_emphasis (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_error_protection (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_errorf (\fBlame_global_flags\fP *, \fBvoid\fP(*)(\fBconst\fP char *, va_list) func)"

.SS "\fBint\fP \fBCDECL\fP lame_set_exp_nspsytune (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP lame_set_exp_nspsytune2_int (\fBlame_global_flags\fP *, \fBint\fP, \fBint\fP)"

.SS "\fBvoid\fP* lame_set_exp_nspsytune2_pointer (\fBlame_global_flags\fP *, \fBint\fP, \fBvoid\fP *)"

.SS "float lame_set_exp_nspsytune2_real (\fBlame_global_flags\fP *, \fBint\fP, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_experimentalX (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_experimentalY (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_experimentalZ (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_extension (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_force_ms (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_force_short_blocks (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_free_format (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_highpassfreq (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_highpasswidth (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_in_samplerate (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_interChRatio (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_lowpassfreq (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_lowpasswidth (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_mode (\fBlame_global_flags\fP *, \fBMPEG_mode\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_mode_automs (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_msgf (\fBlame_global_flags\fP *, \fBvoid\fP(*)(\fBconst\fP char *, va_list) func)"

.SS "\fBint\fP \fBCDECL\fP lame_set_no_short_blocks (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_noATH (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_num_channels (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_num_samples (\fBlame_global_flags\fP *, unsigned long)"

.SS "\fBint\fP \fBCDECL\fP lame_set_ogg (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_original (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_out_samplerate (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_padding_type (\fBlame_global_flags\fP *, \fBPadding_type\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_preset (\fBlame_global_flags\fP * gfp, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_quality (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_scale (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_scale_left (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_scale_right (\fBlame_global_flags\fP *, float)"

.SS "\fBint\fP \fBCDECL\fP lame_set_strict_ISO (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_useTemporal (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_VBR (\fBlame_global_flags\fP *, \fBvbr_mode\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_VBR_hard_min (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_VBR_max_bitrate_kbps (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_VBR_mean_bitrate_kbps (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_VBR_min_bitrate_kbps (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBint\fP \fBCDECL\fP lame_set_VBR_q (\fBlame_global_flags\fP *, \fBint\fP)"

.SS "\fBvoid\fP \fBCDECL\fP lame_stereo_mode_hist (\fBconst\fP \fBlame_global_flags\fP *\fBconst\fP gfp, \fBint\fP stereo_mode_count[4])"

.SH "Variable Documentation"
.PP 
.SS "\fBconst\fP \fBint\fP bitrate_table[3][16]"

.SS "\fBconst\fP \fBint\fP samplerate_table[3][4]"

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
