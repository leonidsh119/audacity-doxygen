.TH "FixedTempoEstimator" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FixedTempoEstimator \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <FixedTempoEstimator\&.h>\fP
.PP
Inherits \fBVamp::Plugin\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBD\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFixedTempoEstimator\fP (float inputSampleRate)"
.br
.ti -1c
.RI "virtual \fB~FixedTempoEstimator\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBinitialise\fP (size_t channels, size_t stepSize, size_t blockSize)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset\fP ()"
.br
.ti -1c
.RI "\fBInputDomain\fP \fBgetInputDomain\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetIdentifier\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetName\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetDescription\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetMaker\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBint\fP \fBgetPluginVersion\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetCopyright\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetPreferredStepSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetPreferredBlockSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBParameterList\fP \fBgetParameterDescriptors\fP () \fBconst\fP "
.br
.ti -1c
.RI "float \fBgetParameter\fP (\fBstd::string\fP id) \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBsetParameter\fP (\fBstd::string\fP id, float \fBvalue\fP)"
.br
.ti -1c
.RI "\fBOutputList\fP \fBgetOutputDescriptors\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBFeatureSet\fP \fBprocess\fP (\fBconst\fP float *\fBconst\fP *inputBuffers, \fBVamp::RealTime\fP timestamp)"
.br
.ti -1c
.RI "\fBFeatureSet\fP \fBgetRemainingFeatures\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBD\fP * \fBm_d\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Example plugin that estimates the tempo of a short fixed-tempo sample\&. 
.PP
Definition at line 46 of file FixedTempoEstimator\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "FixedTempoEstimator::FixedTempoEstimator (float inputSampleRate)"

.PP
Definition at line 617 of file FixedTempoEstimator\&.cpp\&.
.SS "FixedTempoEstimator::~FixedTempoEstimator ()\fC [virtual]\fP"

.PP
Definition at line 623 of file FixedTempoEstimator\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBstring\fP FixedTempoEstimator::getCopyright () const\fC [virtual]\fP"
Get the copyright statement or licensing summary for the plugin\&. This can be an informative text, without the same presentation constraints as mentioned for getMaker above\&. 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 659 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBstring\fP FixedTempoEstimator::getDescription () const\fC [virtual]\fP"
Get a human-readable description for the plugin, typically a line of text that may optionally be displayed in addition to the plugin's 'name'\&. May be empty if the name has said it all already\&.
.PP
Example: 'Detect and count zero crossing points' 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 641 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBstring\fP FixedTempoEstimator::getIdentifier () const\fC [virtual]\fP"
Get the computer-usable name of the plugin\&. This should be reasonably short and contain no whitespace or punctuation characters\&. It may only contain the characters [a-zA-Z0-9_-]\&. This is the authoritative way for a program to identify a plugin within a given library\&.
.PP
This text may be visible to the user, but it should not be the main text used to identify a plugin to the user (that will be the name, below)\&.
.PP
Example: 'zero_crossings' 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 629 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBInputDomain\fP FixedTempoEstimator::getInputDomain () const\fC [inline]\fP, \fC [virtual]\fP"
Get the plugin's required input domain\&.
.PP
If this is TimeDomain, the samples provided to the \fBprocess()\fP function (below) will be in the time domain, as for a traditional audio processing plugin\&.
.PP
If this is FrequencyDomain, the host will carry out a windowed FFT of size equal to the negotiated block size on the data before passing the frequency bin data in to \fBprocess()\fP\&. The input data for the FFT will be rotated so as to place the origin in the centre of the block\&. The plugin does not get to choose the window type -- the host will either let the user do so, or will use a Hanning window\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 55 of file FixedTempoEstimator\&.h\&.
.SS "\fBstring\fP FixedTempoEstimator::getMaker () const\fC [virtual]\fP"
Get the name of the author or vendor of the plugin in human-readable form\&. This should be a short identifying text, as it may be used to label plugins from the same source in a menu or similar\&. 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 647 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBstring\fP FixedTempoEstimator::getName () const\fC [virtual]\fP"
Get a human-readable name or title of the plugin\&. This should be brief and self-contained, as it may be used to identify the plugin to the user in isolation (i\&.e\&. without also showing the plugin's 'identifier')\&.
.PP
Example: 'Zero Crossings' 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 635 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBFixedTempoEstimator::OutputList\fP FixedTempoEstimator::getOutputDescriptors () const\fC [virtual]\fP"
Get the outputs of this plugin\&. An output's index in this list is used as its numeric index when looking it up in the FeatureSet returned from the \fBprocess()\fP call\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 710 of file FixedTempoEstimator\&.cpp\&.
.SS "float FixedTempoEstimator::getParameter (\fBstd::string\fP) const\fC [virtual]\fP"
Get the value of a named parameter\&. The argument is the identifier field from that parameter's descriptor\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 698 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBFixedTempoEstimator::ParameterList\fP FixedTempoEstimator::getParameterDescriptors () const\fC [virtual]\fP"
Get the controllable parameters of this plugin\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 692 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBint\fP FixedTempoEstimator::getPluginVersion () const\fC [virtual]\fP"
Get the version number of the plugin\&. 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 653 of file FixedTempoEstimator\&.cpp\&.
.SS "size_t FixedTempoEstimator::getPreferredBlockSize () const\fC [virtual]\fP"
Get the preferred block size (window size -- the number of sample frames passed in each block to the \fBprocess()\fP function)\&. This should be called before \fBinitialise()\fP\&.
.PP
A plugin that can handle any block size may return 0\&. The final block size will be set in the \fBinitialise()\fP call\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 671 of file FixedTempoEstimator\&.cpp\&.
.SS "size_t FixedTempoEstimator::getPreferredStepSize () const\fC [virtual]\fP"
Get the preferred step size (window increment -- the distance in sample frames between the start frames of consecutive blocks passed to the \fBprocess()\fP function) for the plugin\&. This should be called before \fBinitialise()\fP\&.
.PP
A plugin may return 0 if it has no particular interest in the step size\&. In this case, the host should make the step size equal to the block size if the plugin is accepting input in the time domain\&. If the plugin is accepting input in the frequency domain, the host may use any step size\&. The final step size will be set in the \fBinitialise()\fP call\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 665 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBFixedTempoEstimator::FeatureSet\fP FixedTempoEstimator::getRemainingFeatures ()\fC [virtual]\fP"
After all blocks have been processed, calculate and return any remaining features derived from the complete input\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 722 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBbool\fP FixedTempoEstimator::initialise (size_t inputChannels, size_t stepSize, size_t blockSize)\fC [virtual]\fP"
Initialise a plugin to prepare it for use with the given number of input channels, step size (window increment, in sample frames) and block size (window size, in sample frames)\&.
.PP
The input sample rate should have been already specified at construction time\&.
.PP
Return true for successful initialisation, false if the number of input channels, step size and/or block size cannot be supported\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 677 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBFixedTempoEstimator::FeatureSet\fP FixedTempoEstimator::process (\fBconst\fP float *\fBconst\fP * inputBuffers, \fBVamp::RealTime\fP timestamp)\fC [virtual]\fP"
Process a single block of input data\&.
.PP
If the plugin's inputDomain is TimeDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize consecutive audio samples (the host will zero-pad as necessary)\&. The timestamp in this case will be the real time in seconds of the start of the supplied block of samples\&.
.PP
If the plugin's inputDomain is FrequencyDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize/2+1 consecutive pairs of real and imaginary component floats corresponding to bins 0\&.\&.(blockSize/2) of the FFT output\&. That is, bin 0 (the first pair of floats) contains the DC output, up to bin blockSize/2 which contains the Nyquist-frequency output\&. There will therefore be blockSize+2 floats per channel in total\&. The timestamp will be the real time in seconds of the centre of the FFT input window (i\&.e\&. the very first block passed to process might contain the FFT of half a block of zero samples and the first half-block of the actual data, with a timestamp of zero)\&.
.PP
Return any features that have become available after this process call\&. (These do not necessarily have to fall within the process block, except for OneSamplePerStep outputs\&.) 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 716 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBvoid\fP FixedTempoEstimator::reset ()\fC [virtual]\fP"
Reset the plugin after use, to prepare it for another clean run\&. Not called for the first initialisation (i\&.e\&. initialise must also do a reset)\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 686 of file FixedTempoEstimator\&.cpp\&.
.SS "\fBvoid\fP FixedTempoEstimator::setParameter (\fBstd::string\fP, float)\fC [virtual]\fP"
Set a named parameter\&. The first argument is the identifier field from that parameter's descriptor\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 704 of file FixedTempoEstimator\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBD\fP* FixedTempoEstimator::m_d\fC [protected]\fP"

.PP
Definition at line 79 of file FixedTempoEstimator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
