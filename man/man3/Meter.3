.TH "Meter" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Meter \- VU \fBMeter\fP, for displaying recording/playback level\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Meter\&.h>\fP
.PP
Inherits wxPanel\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBStyle\fP { \fBAutomaticStereo\fP, \fBHorizontalStereo\fP, \fBVerticalStereo\fP, \fBMixerTrackCluster\fP, \fBHorizontalStereoCompact\fP, \fBVerticalStereoCompact\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMeter\fP (\fBAudacityProject\fP *, wxWindow *parent, wxWindowID id, \fBbool\fP isInput, \fBconst\fP wxPoint &pos=wxDefaultPosition, \fBconst\fP wxSize &\fBsize\fP=wxDefaultSize, \fBStyle\fP style=\fBHorizontalStereo\fP, float fDecayRate=60\&.0f)"
.br
.ti -1c
.RI "\fB~Meter\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBAcceptsFocus\fP () \fBconst\fP  override"
.br
.ti -1c
.RI "\fBbool\fP \fBAcceptsFocusFromKeyboard\fP () \fBconst\fP  override"
.br
.ti -1c
.RI "\fBvoid\fP \fBUpdatePrefs\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBClear\fP ()"
.br
.ti -1c
.RI "\fBStyle\fP \fBGetStyle\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBStyle\fP \fBGetDesiredStyle\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBSetStyle\fP (\fBStyle\fP newStyle)"
.br
.ti -1c
.RI "\fBvoid\fP \fBReset\fP (double sampleRate, \fBbool\fP resetClipping)"
.br
.RI "\fIThis method is thread-safe! Feel free to call from a different thread (like from an audio I/O callback)\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBUpdateDisplay\fP (\fBint\fP numChannels, \fBint\fP numFrames, float *sampleData)"
.br
.RI "\fIUpdate the meters with a block of audio data\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBIsMeterDisabled\fP () \fBconst\fP "
.br
.RI "\fIFind out if the level meter is disabled or not\&. \fP"
.ti -1c
.RI "float \fBGetMaxPeak\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBbool\fP \fBIsClipping\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBStartMonitoring\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP * \fBSaveState\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBRestoreState\fP (\fBvoid\fP *state)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBMeterAx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
VU \fBMeter\fP, for displaying recording/playback level\&. 

This is a bunch of common code that can display many different forms of VU meters and other displays\&.
.PP
But note that a lot of later code here assumes these are \fBMeterToolBar\fP meters, e\&.g\&., \fBMeter::StartMonitoring\fP, so these are not as generic/common as originally intended\&. 
.PP
Definition at line 89 of file Meter\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBMeter::Style\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAutomaticStereo \fP\fP
.TP
\fB\fIHorizontalStereo \fP\fP
.TP
\fB\fIVerticalStereo \fP\fP
.TP
\fB\fIMixerTrackCluster \fP\fP
.TP
\fB\fIHorizontalStereoCompact \fP\fP
.TP
\fB\fIVerticalStereoCompact \fP\fP
.PP
Definition at line 96 of file Meter\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Meter::Meter (\fBAudacityProject\fP * project, wxWindow * parent, wxWindowID id, \fBbool\fP isInput, \fBconst\fP wxPoint & pos = \fCwxDefaultPosition\fP, \fBconst\fP wxSize & size = \fCwxDefaultSize\fP, \fBStyle\fP style = \fC\fBHorizontalStereo\fP\fP, float fDecayRate = \fC60\&.0f\fP)"

.PP
Definition at line 208 of file Meter\&.cpp\&.
.SS "Meter::~Meter ()"

.PP
Definition at line 336 of file Meter\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBbool\fP Meter::AcceptsFocus () const\fC [inline]\fP, \fC [override]\fP"

.PP
Definition at line 116 of file Meter\&.h\&.
.SS "\fBbool\fP Meter::AcceptsFocusFromKeyboard () const\fC [inline]\fP, \fC [override]\fP"

.PP
Definition at line 117 of file Meter\&.h\&.
.SS "\fBvoid\fP Meter::Clear ()"

.PP
Definition at line 331 of file Meter\&.cpp\&.
.SS "\fBStyle\fP Meter::GetDesiredStyle () const\fC [inline]\fP"

.PP
Definition at line 123 of file Meter\&.h\&.
.SS "float Meter::GetMaxPeak () const"

.PP
Definition at line 1062 of file Meter\&.cpp\&.
.SS "\fBStyle\fP Meter::GetStyle () const\fC [inline]\fP"

.PP
Definition at line 122 of file Meter\&.h\&.
.SS "\fBbool\fP Meter::IsClipping () const"

.PP
Definition at line 1098 of file Meter\&.cpp\&.
.SS "\fBbool\fP Meter::IsMeterDisabled () const"

.PP
Find out if the level meter is disabled or not\&. This method is thread-safe! Feel free to call from a different thread (like from an audio I/O callback)\&. 
.PP
Definition at line 1771 of file Meter\&.cpp\&.
.SS "\fBvoid\fP Meter::Reset (double sampleRate, \fBbool\fP resetClipping)"

.PP
This method is thread-safe! Feel free to call from a different thread (like from an audio I/O callback)\&. 
.PP
Definition at line 825 of file Meter\&.cpp\&.
.SS "\fBvoid\fP Meter::RestoreState (\fBvoid\fP * state)"

.PP
Definition at line 1849 of file Meter\&.cpp\&.
.SS "\fBvoid\fP * Meter::SaveState ()"

.PP
Definition at line 1840 of file Meter\&.cpp\&.
.SS "\fBvoid\fP Meter::SetStyle (\fBStyle\fP newStyle)"

.PP
Definition at line 813 of file Meter\&.cpp\&.
.SS "\fBvoid\fP Meter::StartMonitoring ()"

.PP
Definition at line 1776 of file Meter\&.cpp\&.
.SS "\fBvoid\fP Meter::UpdateDisplay (\fBint\fP numChannels, \fBint\fP numFrames, float * sampleData)"

.PP
Update the meters with a block of audio data\&. Process the supplied block of audio data, extracting the peak and RMS levels to send to the meter\&. Also record runs of clipped samples to detect clipping that lies on block boundaries\&. This method is thread-safe! Feel free to call from a different thread (like from an audio I/O callback)\&.
.PP
First overload: 
.PP
\fBParameters:\fP
.RS 4
\fInumChannels\fP The number of channels of audio being played back or recorded\&. 
.br
\fInumFrames\fP The number of frames (samples) in this data block\&. It is assumed that there are the same number of frames in each channel\&. 
.br
\fIsampleData\fP The audio data itself, as interleaved samples\&. So indexing through the array we get the first sample of channel, first sample of channel 2 etc up to the first sample of channel (numChannels), then the second sample of channel 1, second sample of channel 2, and so to the second sample of channel (numChannels)\&. The last sample in the array will be the (numFrames) sample for channel (numChannels)\&.
.RE
.PP
The second overload is for ease of use in \fBMixerBoard\fP\&. 
.PP
Definition at line 883 of file Meter\&.cpp\&.
.SS "\fBvoid\fP Meter::UpdatePrefs ()"

.PP
Definition at line 374 of file Meter\&.cpp\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class MeterAx\fC [friend]\fP"

.PP
Definition at line 281 of file Meter\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
