.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp/vamp.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp/vamp.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fB_VampParameterDescriptor\fP"
.br
.ti -1c
.RI "struct \fB_VampOutputDescriptor\fP"
.br
.ti -1c
.RI "struct \fB_VampFeature\fP"
.br
.ti -1c
.RI "struct \fB_VampFeatureV2\fP"
.br
.ti -1c
.RI "union \fB_VampFeatureUnion\fP"
.br
.ti -1c
.RI "struct \fB_VampFeatureList\fP"
.br
.ti -1c
.RI "struct \fB_VampPluginDescriptor\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBVAMP_API_VERSION\fP   2"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_VampParameterDescriptor\fP \fBVampParameterDescriptor\fP"
.br
.ti -1c
.RI "typedef struct \fB_VampOutputDescriptor\fP \fBVampOutputDescriptor\fP"
.br
.ti -1c
.RI "typedef struct \fB_VampFeature\fP \fBVampFeature\fP"
.br
.ti -1c
.RI "typedef struct \fB_VampFeatureV2\fP \fBVampFeatureV2\fP"
.br
.ti -1c
.RI "typedef union \fB_VampFeatureUnion\fP \fBVampFeatureUnion\fP"
.br
.ti -1c
.RI "typedef struct \fB_VampFeatureList\fP \fBVampFeatureList\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP * \fBVampPluginHandle\fP"
.br
.ti -1c
.RI "typedef struct \fB_VampPluginDescriptor\fP \fBVampPluginDescriptor\fP"
.br
.ti -1c
.RI "typedef \fBconst\fP \fBVampPluginDescriptor\fP *(* \fBVampGetPluginDescriptorFunction\fP) (unsigned \fBint\fP, unsigned \fBint\fP)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBVampSampleType\fP { \fBvampOneSamplePerStep\fP, \fBvampFixedSampleRate\fP, \fBvampVariableSampleRate\fP }"
.br
.ti -1c
.RI "enum \fBVampInputDomain\fP { \fBvampTimeDomain\fP, \fBvampFrequencyDomain\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBVampPluginDescriptor\fP * \fBvampGetPluginDescriptor\fP (unsigned \fBint\fP hostApiVersion, unsigned \fBint\fP index)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define VAMP_API_VERSION   2"
Plugin API version\&. This is incremented when a change is made that changes the binary layout of the descriptor records\&. When this happens, there should be a mechanism for retaining compatibility with older hosts and/or plugins\&.
.PP
See also the vampApiVersion field in the plugin descriptor, and the hostApiVersion argument to the vampGetPluginDescriptor function\&. 
.PP
Definition at line 53 of file vamp\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_VampFeature\fP  \fBVampFeature\fP"

.SS "typedef struct \fB_VampFeatureList\fP  \fBVampFeatureList\fP"

.SS "typedef union \fB_VampFeatureUnion\fP  \fBVampFeatureUnion\fP"

.SS "typedef struct \fB_VampFeatureV2\fP  \fBVampFeatureV2\fP"

.SS "typedef \fBconst\fP \fBVampPluginDescriptor\fP*(* VampGetPluginDescriptorFunction) (unsigned \fBint\fP, unsigned \fBint\fP)"
\fBFunction\fP pointer type for vampGetPluginDescriptor\&. 
.PP
Definition at line 382 of file vamp\&.h\&.
.SS "typedef struct \fB_VampOutputDescriptor\fP  \fBVampOutputDescriptor\fP"

.SS "typedef struct \fB_VampParameterDescriptor\fP  \fBVampParameterDescriptor\fP"
C language API for \fBVamp\fP plugins\&.
.PP
This is the formal plugin API for \fBVamp\fP\&. Plugin authors may prefer to use the C++ classes provided in the \fBVamp\fP plugin SDK, instead of using this API directly\&. There is an adapter class provided that makes C++ plugins available using this C API with relatively little work, and the C++ headers are more thoroughly documented\&.
.PP
IMPORTANT: The comments in this file summarise the purpose of each of the declared fields and functions, but do not provide a complete guide to their permitted values and expected usage\&. Please refer to the C++ headers in the \fBVamp\fP plugin SDK for further details and plugin lifecycle documentation\&. 
.SS "typedef struct \fB_VampPluginDescriptor\fP  \fBVampPluginDescriptor\fP"

.SS "typedef \fBvoid\fP* \fBVampPluginHandle\fP"

.PP
Definition at line 246 of file vamp\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBVampInputDomain\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIvampTimeDomain \fP\fP
.TP
\fB\fIvampFrequencyDomain \fP\fP
.PP
Definition at line 239 of file vamp\&.h\&.
.SS "enum \fBVampSampleType\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIvampOneSamplePerStep \fP\fP
Each process call returns results aligned with call's block start\&. 
.TP
\fB\fIvampFixedSampleRate \fP\fP
Returned results are evenly spaced at samplerate specified below\&. 
.TP
\fB\fIvampVariableSampleRate \fP\fP
Returned results have their own individual timestamps\&. 
.PP
Definition at line 105 of file vamp\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBconst\fP \fBVampPluginDescriptor\fP* vampGetPluginDescriptor (unsigned \fBint\fP hostApiVersion, unsigned \fBint\fP index)"
Get the descriptor for a given plugin index in this library\&. Return NULL if the index is outside the range of valid indices for this plugin library\&.
.PP
The hostApiVersion argument tells the library code the highest \fBVamp\fP API version supported by the host\&. The function should return a plugin descriptor compatible with the highest API version supported by the library that is no higher than that supported by the host\&. Provided the descriptor has the correct vampApiVersion field for its actual compatibility level, the host should be able to do the right thing with it: use it if possible, discard it otherwise\&.
.PP
This is the only symbol that a \fBVamp\fP plugin actually needs to export from its shared object; all others can be hidden\&. See the accompanying documentation for notes on how to achieve this with certain compilers\&. 
.PP
Definition at line 54 of file plugins\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
