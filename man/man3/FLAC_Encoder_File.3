.TH "FLAC::Encoder::File" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FLAC::Encoder::File \- This class wraps the \fBFLAC__StreamEncoder\fP\&. If you are not encoding to a file, you may need to use \fBFLAC::Encoder::Stream\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <encoder\&.h>\fP
.PP
Inherits \fBFLAC::Encoder::Stream\fP\&.
.PP
Inherited by \fBFileEncoder\fP, and \fBOurEncoder\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFile\fP ()"
.br
.ti -1c
.RI "virtual \fB~File\fP ()"
.br
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderInitStatus\fP \fBinit\fP (FILE *file)"
.br
.RI "\fISee \fBFLAC__stream_encoder_init_FILE()\fP \fP"
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderInitStatus\fP \fBinit\fP (\fBconst\fP char *\fBfilename\fP)"
.br
.RI "\fISee \fBFLAC__stream_encoder_init_file()\fP \fP"
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderInitStatus\fP \fBinit\fP (\fBconst\fP \fBstd::string\fP &\fBfilename\fP)"
.br
.RI "\fISee \fBFLAC__stream_encoder_init_file()\fP \fP"
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderInitStatus\fP \fBinit_ogg\fP (FILE *file)"
.br
.RI "\fISee \fBFLAC__stream_encoder_init_ogg_FILE()\fP \fP"
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderInitStatus\fP \fBinit_ogg\fP (\fBconst\fP char *\fBfilename\fP)"
.br
.RI "\fISee \fBFLAC__stream_encoder_init_ogg_file()\fP \fP"
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderInitStatus\fP \fBinit_ogg\fP (\fBconst\fP \fBstd::string\fP &\fBfilename\fP)"
.br
.RI "\fISee \fBFLAC__stream_encoder_init_ogg_file()\fP \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBvoid\fP \fBprogress_callback\fP (\fBFLAC__uint64\fP bytes_written, \fBFLAC__uint64\fP samples_written, unsigned frames_written, unsigned total_frames_estimate)"
.br
.RI "\fISee FLAC__StreamEncoderProgressCallback\&. \fP"
.ti -1c
.RI "virtual ::\fBFLAC__StreamEncoderWriteStatus\fP \fBwrite_callback\fP (\fBconst\fP \fBFLAC__byte\fP \fBbuffer\fP[], size_t bytes, unsigned \fBsamples\fP, unsigned current_frame)"
.br
.RI "\fIThis is a dummy implementation to satisfy the pure virtual in \fBStream\fP that is actually supplied internally by the C layer\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class wraps the \fBFLAC__StreamEncoder\fP\&. If you are not encoding to a file, you may need to use \fBFLAC::Encoder::Stream\fP\&. 

The usage of this class is similar to \fBFLAC__StreamEncoder\fP, except instead of providing callbacks to FLAC__stream_encoder_init*_FILE() or FLAC__stream_encoder_init*_file(), you will inherit from this class and override the virtual callback functions with your own implementations, then call \fBinit()\fP or \fBinit_ogg()\fP\&. The rest of the calls work the same as in the C layer\&.
.PP
There are no mandatory callbacks; all the callbacks from \fBFLAC::Encoder::Stream\fP are implemented here fully and support full post-encode STREAMINFO and SEEKTABLE updating\&. There is only an optional progress callback which you may override to get periodic reports on the progress of the encode\&. 
.PP
Definition at line 233 of file encoder\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "FLAC::Encoder::File::File ()"

.PP
Definition at line 447 of file stream_encoder\&.cpp\&.
.SS "FLAC::Encoder::File::~File ()\fC [virtual]\fP"

.PP
Definition at line 451 of file stream_encoder\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBFLAC__StreamEncoderInitStatus\fP FLAC::Encoder::File::init (FILE * file)"

.PP
See \fBFLAC__stream_encoder_init_FILE()\fP 
.PP
Definition at line 455 of file stream_encoder\&.cpp\&.
.SS "\fBFLAC__StreamEncoderInitStatus\fP FLAC::Encoder::File::init (\fBconst\fP char * filename)"

.PP
See \fBFLAC__stream_encoder_init_file()\fP 
.PP
Definition at line 461 of file stream_encoder\&.cpp\&.
.SS "\fBFLAC__StreamEncoderInitStatus\fP FLAC::Encoder::File::init (\fBconst\fP \fBstd::string\fP & filename)"

.PP
See \fBFLAC__stream_encoder_init_file()\fP 
.PP
Definition at line 467 of file stream_encoder\&.cpp\&.
.SS "\fBFLAC__StreamEncoderInitStatus\fP FLAC::Encoder::File::init_ogg (FILE * file)"

.PP
See \fBFLAC__stream_encoder_init_ogg_FILE()\fP 
.PP
Definition at line 472 of file stream_encoder\&.cpp\&.
.SS "\fBFLAC__StreamEncoderInitStatus\fP FLAC::Encoder::File::init_ogg (\fBconst\fP char * filename)"

.PP
See \fBFLAC__stream_encoder_init_ogg_file()\fP 
.PP
Definition at line 478 of file stream_encoder\&.cpp\&.
.SS "\fBFLAC__StreamEncoderInitStatus\fP FLAC::Encoder::File::init_ogg (\fBconst\fP \fBstd::string\fP & filename)"

.PP
See \fBFLAC__stream_encoder_init_ogg_file()\fP 
.PP
Definition at line 484 of file stream_encoder\&.cpp\&.
.SS "\fBvoid\fP FLAC::Encoder::File::progress_callback (\fBFLAC__uint64\fP bytes_written, \fBFLAC__uint64\fP samples_written, unsigned frames_written, unsigned total_frames_estimate)\fC [protected]\fP, \fC [virtual]\fP"

.PP
See FLAC__StreamEncoderProgressCallback\&. 
.PP
Reimplemented in \fBFileEncoder\fP, and \fBOurEncoder\fP\&.
.PP
Definition at line 501 of file stream_encoder\&.cpp\&.
.SS "\fBFLAC__StreamEncoderWriteStatus\fP FLAC::Encoder::File::write_callback (\fBconst\fP \fBFLAC__byte\fP buffer[], size_t bytes, unsigned samples, unsigned current_frame)\fC [protected]\fP, \fC [virtual]\fP"

.PP
This is a dummy implementation to satisfy the pure virtual in \fBStream\fP that is actually supplied internally by the C layer\&. 
.PP
Implements \fBFLAC::Encoder::Stream\fP\&.
.PP
Definition at line 494 of file stream_encoder\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
