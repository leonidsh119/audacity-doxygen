.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilvmm.hpp" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilvmm.hpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'lilv/lilv\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBLilv::Node\fP"
.br
.ti -1c
.RI "struct \fBLilv::ScalePoint\fP"
.br
.ti -1c
.RI "struct \fBLilv::PluginClass\fP"
.br
.ti -1c
.RI "struct \fBLilv::PluginClasses\fP"
.br
.ti -1c
.RI "struct \fBLilv::ScalePoints\fP"
.br
.ti -1c
.RI "struct \fBLilv::Nodes\fP"
.br
.ti -1c
.RI "struct \fBLilv::UI\fP"
.br
.ti -1c
.RI "struct \fBLilv::UIs\fP"
.br
.ti -1c
.RI "struct \fBLilv::Port\fP"
.br
.ti -1c
.RI "struct \fBLilv::Plugin\fP"
.br
.ti -1c
.RI "struct \fBLilv::Plugins\fP"
.br
.ti -1c
.RI "struct \fBLilv::Instance\fP"
.br
.ti -1c
.RI "struct \fBLilv::World\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBLilv\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLILV_DEPRECATED\fP"
.br
.ti -1c
.RI "#define \fBLILV_WRAP0\fP(RT,  \fBprefix\fP,  \fBname\fP)   \fBinline\fP RT \fBname\fP() { \fBreturn\fP lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP (me); }"
.br
.ti -1c
.RI "#define \fBLILV_WRAP0_VOID\fP(\fBprefix\fP,  \fBname\fP)   \fBinline\fP \fBvoid\fP \fBname\fP() { lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP(me); }"
.br
.ti -1c
.RI "#define \fBLILV_WRAP1\fP(RT,  \fBprefix\fP,  \fBname\fP,  T1,  a1)   \fBinline\fP RT \fBname\fP(T1 a1) { \fBreturn\fP lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP (me, a1); }"
.br
.ti -1c
.RI "#define \fBLILV_WRAP1_VOID\fP(\fBprefix\fP,  \fBname\fP,  T1,  a1)   \fBinline\fP \fBvoid\fP \fBname\fP(T1 a1) { lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP(me, a1); }"
.br
.ti -1c
.RI "#define \fBLILV_WRAP2\fP(RT,  \fBprefix\fP,  \fBname\fP,  T1,  a1,  T2,  a2)"
.br
.ti -1c
.RI "#define \fBLILV_WRAP3\fP(RT,  \fBprefix\fP,  \fBname\fP,  T1,  a1,  T2,  a2,  T3,  a3)"
.br
.ti -1c
.RI "#define \fBLILV_WRAP2_VOID\fP(\fBprefix\fP,  \fBname\fP,  T1,  a1,  T2,  a2)   \fBinline\fP \fBvoid\fP \fBname\fP(T1 a1, T2 a2) { lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP(me, a1, a2); }"
.br
.ti -1c
.RI "#define \fBLILV_WRAP_CONVERSION\fP(CT)   \fBinline\fP operator CT*() \fBconst\fP { \fBreturn\fP me; }"
.br
.ti -1c
.RI "#define \fBLILV_WRAP_COLL\fP(CT,  ET,  \fBprefix\fP)"
.br
.ti -1c
.RI "#define \fBLILV_PORT_WRAP0\fP(RT,  \fBname\fP)   \fBinline\fP RT \fBname\fP () { \fBreturn\fP lilv_port_ ## \fBname\fP (parent, me); }"
.br
.ti -1c
.RI "#define \fBLILV_PORT_WRAP1\fP(RT,  \fBname\fP,  T1,  a1)   \fBinline\fP RT \fBname\fP (T1 a1) { \fBreturn\fP lilv_port_ ## \fBname\fP (parent, me, a1); }"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define LILV_DEPRECATED"

.PP
Definition at line 25 of file lilvmm\&.hpp\&.
.SS "#define LILV_PORT_WRAP0(RT, \fBname\fP)   \fBinline\fP RT \fBname\fP () { \fBreturn\fP lilv_port_ ## \fBname\fP (parent, me); }"

.PP
Definition at line 175 of file lilvmm\&.hpp\&.
.SS "#define LILV_PORT_WRAP1(RT, \fBname\fP, T1, a1)   \fBinline\fP RT \fBname\fP (T1 a1) { \fBreturn\fP lilv_port_ ## \fBname\fP (parent, me, a1); }"

.PP
Definition at line 178 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP0(RT, \fBprefix\fP, \fBname\fP)   \fBinline\fP RT \fBname\fP() { \fBreturn\fP lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP (me); }"

.PP
Definition at line 35 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP0_VOID(\fBprefix\fP, \fBname\fP)   \fBinline\fP \fBvoid\fP \fBname\fP() { lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP(me); }"

.PP
Definition at line 38 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP1(RT, \fBprefix\fP, \fBname\fP, T1, a1)   \fBinline\fP RT \fBname\fP(T1 a1) { \fBreturn\fP lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP (me, a1); }"

.PP
Definition at line 41 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP1_VOID(\fBprefix\fP, \fBname\fP, T1, a1)   \fBinline\fP \fBvoid\fP \fBname\fP(T1 a1) { lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP(me, a1); }"

.PP
Definition at line 44 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP2(RT, \fBprefix\fP, \fBname\fP, T1, a1, T2, a2)"
\fBValue:\fP
.PP
.nf
inline RT name(T1 a1, T2 a2) { \\
		return lilv_ ## prefix ## _ ## name(me, a1, a2); \
    }
.fi
.PP
Definition at line 47 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP2_VOID(\fBprefix\fP, \fBname\fP, T1, a1, T2, a2)   \fBinline\fP \fBvoid\fP \fBname\fP(T1 a1, T2 a2) { lilv_ ## \fBprefix\fP ## \fB_\fP ## \fBname\fP(me, a1, a2); }"

.PP
Definition at line 57 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP3(RT, \fBprefix\fP, \fBname\fP, T1, a1, T2, a2, T3, a3)"
\fBValue:\fP
.PP
.nf
inline RT name(T1 a1, T2 a2, T3 a3) { \\
		return lilv_ ## prefix ## _ ## name(me, a1, a2, a3); \
    }
.fi
.PP
Definition at line 52 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP_COLL(CT, ET, \fBprefix\fP)"
\fBValue:\fP
.PP
.nf
inline CT(const Lilv ## CT* c_obj) : me(c_obj) {} \\
	LILV_WRAP_CONVERSION(const Lilv ## CT); \\
	LILV_WRAP0(unsigned, prefix, size); \\
	LILV_WRAP1(const ET, prefix, get, LilvIter*, i); \\
	LILV_WRAP0(LilvIter*, prefix, begin); \\
	LILV_WRAP1(LilvIter*, prefix, next, LilvIter*, i); \\
	LILV_WRAP1(bool, prefix, is_end, LilvIter*, i); \\
	const Lilv ## CT* me; \
.fi
.PP
Definition at line 121 of file lilvmm\&.hpp\&.
.SS "#define LILV_WRAP_CONVERSION(CT)   \fBinline\fP operator CT*() \fBconst\fP { \fBreturn\fP me; }"

.PP
Definition at line 61 of file lilvmm\&.hpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
