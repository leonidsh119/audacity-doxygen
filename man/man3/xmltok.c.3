.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include 'expat_external\&.h'\fP
.br
\fC#include 'internal\&.h'\fP
.br
\fC#include 'xmltok\&.h'\fP
.br
\fC#include 'nametab\&.h'\fP
.br
\fC#include 'xmltok_impl\&.h'\fP
.br
\fC#include 'ascii\&.h'\fP
.br
\fC#include 'xmltok_impl\&.c'\fP
.br
\fC#include 'asciitab\&.h'\fP
.br
\fC#include 'utf8tab\&.h'\fP
.br
\fC#include 'iasciitab\&.h'\fP
.br
\fC#include 'latin1tab\&.h'\fP
.br
\fC#include 'xmltok_ns\&.c'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBnormal_encoding\fP"
.br
.ti -1c
.RI "struct \fBunknown_encoding\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIGNORE_SECTION_TOK_VTABLE\fP   /* as nothing */"
.br
.ti -1c
.RI "#define \fBVTABLE1\fP"
.br
.ti -1c
.RI "#define \fBVTABLE\fP   \fBVTABLE1\fP, \fBPREFIX\fP(toUtf8), \fBPREFIX\fP(toUtf16)"
.br
.ti -1c
.RI "#define \fBUCS2_GET_NAMING\fP(pages,  hi,  lo)   (namingBitmap[(pages[hi] << 3) + ((lo) >> 5)] & (1 << ((lo) & 0x1F)))"
.br
.ti -1c
.RI "#define \fBUTF8_GET_NAMING2\fP(pages,  byte)"
.br
.ti -1c
.RI "#define \fBUTF8_GET_NAMING3\fP(pages,  byte)"
.br
.ti -1c
.RI "#define \fBUTF8_GET_NAMING\fP(pages,  \fBp\fP,  n)"
.br
.ti -1c
.RI "#define \fBUTF8_INVALID2\fP(\fBp\fP)   ((*\fBp\fP) < 0xC2 || ((p)[1] & 0x80) == 0 || ((p)[1] & 0xC0) == 0xC0)"
.br
.ti -1c
.RI "#define \fBUTF8_INVALID3\fP(\fBp\fP)"
.br
.ti -1c
.RI "#define \fBUTF8_INVALID4\fP(\fBp\fP)"
.br
.ti -1c
.RI "#define \fButf8_isName4\fP   isNever"
.br
.ti -1c
.RI "#define \fButf8_isNmstrt4\fP   isNever"
.br
.ti -1c
.RI "#define \fBAS_NORMAL_ENCODING\fP(enc)     ((\fBconst\fP struct \fBnormal_encoding\fP *) (enc))"
.br
.ti -1c
.RI "#define \fBSTANDARD_VTABLE\fP(\fBE\fP)   /* as nothing */"
.br
.ti -1c
.RI "#define \fBNORMAL_VTABLE\fP(\fBE\fP)"
.br
.ti -1c
.RI "#define \fBMINBPC\fP(enc)   1"
.br
.ti -1c
.RI "#define \fBSB_BYTE_TYPE\fP(enc,  \fBp\fP)   (((struct \fBnormal_encoding\fP *)(enc))\->type[(unsigned char)*(\fBp\fP)])"
.br
.ti -1c
.RI "#define \fBBYTE_TYPE\fP(enc,  \fBp\fP)   \fBSB_BYTE_TYPE\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBBYTE_TO_ASCII\fP(enc,  \fBp\fP)   (*(\fBp\fP))"
.br
.ti -1c
.RI "#define \fBIS_NAME_CHAR\fP(enc,  \fBp\fP,  n)   (\fBAS_NORMAL_ENCODING\fP(enc)\->isName ## n(enc, \fBp\fP))"
.br
.ti -1c
.RI "#define \fBIS_NMSTRT_CHAR\fP(enc,  \fBp\fP,  n)   (\fBAS_NORMAL_ENCODING\fP(enc)\->isNmstrt ## n(enc, \fBp\fP))"
.br
.ti -1c
.RI "#define \fBIS_INVALID_CHAR\fP(enc,  \fBp\fP,  n)   (\fBAS_NORMAL_ENCODING\fP(enc)\->isInvalid ## n(enc, \fBp\fP))"
.br
.ti -1c
.RI "#define \fBIS_NAME_CHAR_MINBPC\fP(enc,  \fBp\fP)   (0)"
.br
.ti -1c
.RI "#define \fBIS_NMSTRT_CHAR_MINBPC\fP(enc,  \fBp\fP)   (0)"
.br
.ti -1c
.RI "#define \fBCHAR_MATCHES\fP(enc,  \fBp\fP,  \fBc\fP)   (*(\fBp\fP) == \fBc\fP)"
.br
.ti -1c
.RI "#define \fBPREFIX\fP(ident)   normal_ ## ident"
.br
.ti -1c
.RI "#define \fBXML_TOK_IMPL_C\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBDEFINE_UTF16_TO_UTF8\fP(\fBE\fP)"
.br
.ti -1c
.RI "#define \fBDEFINE_UTF16_TO_UTF16\fP(\fBE\fP)"
.br
.ti -1c
.RI "#define \fBSET2\fP(ptr,  ch)   (((ptr)[0] = ((ch) & 0xff)), ((ptr)[1] = ((ch) >> 8)))"
.br
.ti -1c
.RI "#define \fBGET_LO\fP(ptr)   ((unsigned char)(ptr)[0])"
.br
.ti -1c
.RI "#define \fBGET_HI\fP(ptr)   ((unsigned char)(ptr)[1])"
.br
.ti -1c
.RI "#define \fBSET2\fP(ptr,  ch)   (((ptr)[0] = ((ch) >> 8)), ((ptr)[1] = ((ch) & 0xFF)))"
.br
.ti -1c
.RI "#define \fBGET_LO\fP(ptr)   ((unsigned char)(ptr)[1])"
.br
.ti -1c
.RI "#define \fBGET_HI\fP(ptr)   ((unsigned char)(ptr)[0])"
.br
.ti -1c
.RI "#define \fBLITTLE2_BYTE_TYPE\fP(enc,  \fBp\fP)"
.br
.ti -1c
.RI "#define \fBLITTLE2_BYTE_TO_ASCII\fP(enc,  \fBp\fP)   ((\fBp\fP)[1] == 0 ? (\fBp\fP)[0] : \-1)"
.br
.ti -1c
.RI "#define \fBLITTLE2_CHAR_MATCHES\fP(enc,  \fBp\fP,  \fBc\fP)   ((\fBp\fP)[1] == 0 && (\fBp\fP)[0] == \fBc\fP)"
.br
.ti -1c
.RI "#define \fBLITTLE2_IS_NAME_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBUCS2_GET_NAMING\fP(namePages, (unsigned char)\fBp\fP[1], (unsigned char)\fBp\fP[0])"
.br
.ti -1c
.RI "#define \fBLITTLE2_IS_NMSTRT_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBUCS2_GET_NAMING\fP(nmstrtPages, (unsigned char)\fBp\fP[1], (unsigned char)\fBp\fP[0])"
.br
.ti -1c
.RI "#define \fBPREFIX\fP(ident)   little2_ ## ident"
.br
.ti -1c
.RI "#define \fBMINBPC\fP(enc)   2"
.br
.ti -1c
.RI "#define \fBBYTE_TYPE\fP(enc,  \fBp\fP)   \fBLITTLE2_BYTE_TYPE\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBBYTE_TO_ASCII\fP(enc,  \fBp\fP)   \fBLITTLE2_BYTE_TO_ASCII\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBCHAR_MATCHES\fP(enc,  \fBp\fP,  \fBc\fP)   \fBLITTLE2_CHAR_MATCHES\fP(enc, \fBp\fP, \fBc\fP)"
.br
.ti -1c
.RI "#define \fBIS_NAME_CHAR\fP(enc,  \fBp\fP,  n)   0"
.br
.ti -1c
.RI "#define \fBIS_NAME_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBLITTLE2_IS_NAME_CHAR_MINBPC\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBIS_NMSTRT_CHAR\fP(enc,  \fBp\fP,  n)   (0)"
.br
.ti -1c
.RI "#define \fBIS_NMSTRT_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBLITTLE2_IS_NMSTRT_CHAR_MINBPC\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBXML_TOK_IMPL_C\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBBIG2_BYTE_TYPE\fP(enc,  \fBp\fP)"
.br
.ti -1c
.RI "#define \fBBIG2_BYTE_TO_ASCII\fP(enc,  \fBp\fP)   ((\fBp\fP)[0] == 0 ? (\fBp\fP)[1] : \-1)"
.br
.ti -1c
.RI "#define \fBBIG2_CHAR_MATCHES\fP(enc,  \fBp\fP,  \fBc\fP)   ((\fBp\fP)[0] == 0 && (\fBp\fP)[1] == \fBc\fP)"
.br
.ti -1c
.RI "#define \fBBIG2_IS_NAME_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBUCS2_GET_NAMING\fP(namePages, (unsigned char)\fBp\fP[0], (unsigned char)\fBp\fP[1])"
.br
.ti -1c
.RI "#define \fBBIG2_IS_NMSTRT_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBUCS2_GET_NAMING\fP(nmstrtPages, (unsigned char)\fBp\fP[0], (unsigned char)\fBp\fP[1])"
.br
.ti -1c
.RI "#define \fBPREFIX\fP(ident)   big2_ ## ident"
.br
.ti -1c
.RI "#define \fBMINBPC\fP(enc)   2"
.br
.ti -1c
.RI "#define \fBBYTE_TYPE\fP(enc,  \fBp\fP)   \fBBIG2_BYTE_TYPE\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBBYTE_TO_ASCII\fP(enc,  \fBp\fP)   \fBBIG2_BYTE_TO_ASCII\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBCHAR_MATCHES\fP(enc,  \fBp\fP,  \fBc\fP)   \fBBIG2_CHAR_MATCHES\fP(enc, \fBp\fP, \fBc\fP)"
.br
.ti -1c
.RI "#define \fBIS_NAME_CHAR\fP(enc,  \fBp\fP,  n)   0"
.br
.ti -1c
.RI "#define \fBIS_NAME_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBBIG2_IS_NAME_CHAR_MINBPC\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBIS_NMSTRT_CHAR\fP(enc,  \fBp\fP,  n)   (0)"
.br
.ti -1c
.RI "#define \fBIS_NMSTRT_CHAR_MINBPC\fP(enc,  \fBp\fP)   \fBBIG2_IS_NMSTRT_CHAR_MINBPC\fP(enc, \fBp\fP)"
.br
.ti -1c
.RI "#define \fBXML_TOK_IMPL_C\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBBT_COLON\fP   \fBBT_NMSTRT\fP"
.br
.ti -1c
.RI "#define \fBAS_UNKNOWN_ENCODING\fP(enc)   ((\fBconst\fP struct \fBunknown_encoding\fP *) (enc))"
.br
.ti -1c
.RI "#define \fBINIT_ENC_INDEX\fP(enc)   ((\fBint\fP)(enc)\->initEnc\&.isUtf16)"
.br
.ti -1c
.RI "#define \fBSET_INIT_ENC_INDEX\fP(enc,  \fBi\fP)   ((enc)\->initEnc\&.isUtf16 = (char)\fBi\fP)"
.br
.ti -1c
.RI "#define \fBNS\fP(x)   x"
.br
.ti -1c
.RI "#define \fBns\fP(x)   x"
.br
.ti -1c
.RI "#define \fBXML_TOK_NS_C\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBUTF8_cval1\fP = 0x00, \fBUTF8_cval2\fP = 0xc0, \fBUTF8_cval3\fP = 0xe0, \fBUTF8_cval4\fP = 0xf0 }"
.br
.ti -1c
.RI "enum { \fBUNKNOWN_ENC\fP = -1, \fBISO_8859_1_ENC\fP = 0, \fBUS_ASCII_ENC\fP, \fBUTF_8_ENC\fP, \fBUTF_16_ENC\fP, \fBUTF_16BE_ENC\fP, \fBUTF_16LE_ENC\fP, \fBNO_ENC\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBint\fP \fBFASTCALL\fP \fBXmlUtf8Encode\fP (\fBint\fP \fBc\fP, char *\fBbuf\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBFASTCALL\fP \fBXmlUtf16Encode\fP (\fBint\fP charNum, unsigned short *\fBbuf\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBXmlSizeOfUnknownEncoding\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBENCODING\fP * \fBXmlInitUnknownEncoding\fP (\fBvoid\fP *mem, \fBint\fP *table, CONVERTER convert, \fBvoid\fP *\fBuserData\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define AS_NORMAL_ENCODING(enc)   ((\fBconst\fP struct \fBnormal_encoding\fP *) (enc))"

.PP
Definition at line 197 of file xmltok\&.c\&.
.SS "#define AS_UNKNOWN_ENCODING(enc)   ((\fBconst\fP struct \fBunknown_encoding\fP *) (enc))"

.PP
Definition at line 1255 of file xmltok\&.c\&.
.SS "#define BIG2_BYTE_TO_ASCII(enc, \fBp\fP)   ((\fBp\fP)[0] == 0 ? (\fBp\fP)[1] : \-1)"

.PP
Definition at line 784 of file xmltok\&.c\&.
.SS "#define BIG2_BYTE_TYPE(enc, \fBp\fP)"
\fBValue:\fP
.PP
.nf
((p)[0] == 0 \
  ? ((struct normal_encoding *)(enc))->type[(unsigned char)(p)[1]] \
  : unicode_byte_type((p)[0], (p)[1]))
.fi
.PP
Definition at line 780 of file xmltok\&.c\&.
.SS "#define BIG2_CHAR_MATCHES(enc, \fBp\fP, \fBc\fP)   ((\fBp\fP)[0] == 0 && (\fBp\fP)[1] == \fBc\fP)"

.PP
Definition at line 785 of file xmltok\&.c\&.
.SS "#define BIG2_IS_NAME_CHAR_MINBPC(enc, \fBp\fP)   \fBUCS2_GET_NAMING\fP(namePages, (unsigned char)\fBp\fP[0], (unsigned char)\fBp\fP[1])"

.PP
Definition at line 786 of file xmltok\&.c\&.
.SS "#define BIG2_IS_NMSTRT_CHAR_MINBPC(enc, \fBp\fP)   \fBUCS2_GET_NAMING\fP(nmstrtPages, (unsigned char)\fBp\fP[0], (unsigned char)\fBp\fP[1])"

.PP
Definition at line 788 of file xmltok\&.c\&.
.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BT_COLON   \fBBT_NMSTRT\fP"

.SS "#define BYTE_TO_ASCII(enc, \fBp\fP)   (*(\fBp\fP))"

.PP
Definition at line 833 of file xmltok\&.c\&.
.SS "#define BYTE_TO_ASCII(enc, \fBp\fP)   \fBLITTLE2_BYTE_TO_ASCII\fP(enc, \fBp\fP)"

.PP
Definition at line 833 of file xmltok\&.c\&.
.SS "#define BYTE_TO_ASCII(enc, \fBp\fP)   \fBBIG2_BYTE_TO_ASCII\fP(enc, \fBp\fP)"

.PP
Definition at line 833 of file xmltok\&.c\&.
.SS "#define BYTE_TYPE(enc, \fBp\fP)   \fBSB_BYTE_TYPE\fP(enc, \fBp\fP)"

.PP
Definition at line 832 of file xmltok\&.c\&.
.SS "#define BYTE_TYPE(enc, \fBp\fP)   \fBLITTLE2_BYTE_TYPE\fP(enc, \fBp\fP)"

.PP
Definition at line 832 of file xmltok\&.c\&.
.SS "#define BYTE_TYPE(enc, \fBp\fP)   \fBBIG2_BYTE_TYPE\fP(enc, \fBp\fP)"

.PP
Definition at line 832 of file xmltok\&.c\&.
.SS "#define CHAR_MATCHES(enc, \fBp\fP, \fBc\fP)   (*(\fBp\fP) == \fBc\fP)"

.PP
Definition at line 834 of file xmltok\&.c\&.
.SS "#define CHAR_MATCHES(enc, \fBp\fP, \fBc\fP)   \fBLITTLE2_CHAR_MATCHES\fP(enc, \fBp\fP, \fBc\fP)"

.PP
Definition at line 834 of file xmltok\&.c\&.
.SS "#define CHAR_MATCHES(enc, \fBp\fP, \fBc\fP)   \fBBIG2_CHAR_MATCHES\fP(enc, \fBp\fP, \fBc\fP)"

.PP
Definition at line 834 of file xmltok\&.c\&.
.SS "#define DEFINE_UTF16_TO_UTF16(\fBE\fP)"
\fBValue:\fP
.PP
.nf
static void  PTRCALL \\
E ## toUtf16(const ENCODING *enc, \
             const char **fromP, const char *fromLim, \
             unsigned short **toP, const unsigned short *toLim) \
{ \
  /* Avoid copying first half only of surrogate */ \\
  if (fromLim - *fromP > ((toLim - *toP) << 1) \
      && (GET_HI(fromLim - 2) & 0xF8) == 0xD8) \
    fromLim -= 2; \\
  for (; *fromP != fromLim && *toP != toLim; *fromP += 2) \
    *(*toP)++ = (GET_HI(*fromP) << 8) | GET_LO(*fromP); \
}
.fi
.PP
Definition at line 601 of file xmltok\&.c\&.
.SS "#define DEFINE_UTF16_TO_UTF8(\fBE\fP)"

.PP
Definition at line 538 of file xmltok\&.c\&.
.SS "#define GET_HI(ptr)   ((unsigned char)(ptr)[1])"

.PP
Definition at line 630 of file xmltok\&.c\&.
.SS "#define GET_HI(ptr)   ((unsigned char)(ptr)[0])"

.PP
Definition at line 630 of file xmltok\&.c\&.
.SS "#define GET_LO(ptr)   ((unsigned char)(ptr)[0])"

.PP
Definition at line 629 of file xmltok\&.c\&.
.SS "#define GET_LO(ptr)   ((unsigned char)(ptr)[1])"

.PP
Definition at line 629 of file xmltok\&.c\&.
.SS "#define IGNORE_SECTION_TOK_VTABLE   /* as nothing */"

.PP
Definition at line 29 of file xmltok\&.c\&.
.SS "#define INIT_ENC_INDEX(enc)   ((\fBint\fP)(enc)\->initEnc\&.isUtf16)"

.PP
Definition at line 1485 of file xmltok\&.c\&.
.SS "#define IS_INVALID_CHAR(enc, \fBp\fP, n)   (\fBAS_NORMAL_ENCODING\fP(enc)\->isInvalid ## n(enc, \fBp\fP))"

.PP
Definition at line 273 of file xmltok\&.c\&.
.SS "#define IS_NAME_CHAR(enc, \fBp\fP, n)   (\fBAS_NORMAL_ENCODING\fP(enc)\->isName ## n(enc, \fBp\fP))"

.PP
Definition at line 835 of file xmltok\&.c\&.
.SS "#define IS_NAME_CHAR(enc, \fBp\fP, n)   0"

.PP
Definition at line 835 of file xmltok\&.c\&.
.SS "#define IS_NAME_CHAR(enc, \fBp\fP, n)   0"

.PP
Definition at line 835 of file xmltok\&.c\&.
.SS "#define IS_NAME_CHAR_MINBPC(enc, \fBp\fP)   (0)"

.PP
Definition at line 836 of file xmltok\&.c\&.
.SS "#define IS_NAME_CHAR_MINBPC(enc, \fBp\fP)   \fBLITTLE2_IS_NAME_CHAR_MINBPC\fP(enc, \fBp\fP)"

.PP
Definition at line 836 of file xmltok\&.c\&.
.SS "#define IS_NAME_CHAR_MINBPC(enc, \fBp\fP)   \fBBIG2_IS_NAME_CHAR_MINBPC\fP(enc, \fBp\fP)"

.PP
Definition at line 836 of file xmltok\&.c\&.
.SS "#define IS_NMSTRT_CHAR(enc, \fBp\fP, n)   (\fBAS_NORMAL_ENCODING\fP(enc)\->isNmstrt ## n(enc, \fBp\fP))"

.PP
Definition at line 837 of file xmltok\&.c\&.
.SS "#define IS_NMSTRT_CHAR(enc, \fBp\fP, n)   (0)"

.PP
Definition at line 837 of file xmltok\&.c\&.
.SS "#define IS_NMSTRT_CHAR(enc, \fBp\fP, n)   (0)"

.PP
Definition at line 837 of file xmltok\&.c\&.
.SS "#define IS_NMSTRT_CHAR_MINBPC(enc, \fBp\fP)   (0)"

.PP
Definition at line 838 of file xmltok\&.c\&.
.SS "#define IS_NMSTRT_CHAR_MINBPC(enc, \fBp\fP)   \fBLITTLE2_IS_NMSTRT_CHAR_MINBPC\fP(enc, \fBp\fP)"

.PP
Definition at line 838 of file xmltok\&.c\&.
.SS "#define IS_NMSTRT_CHAR_MINBPC(enc, \fBp\fP)   \fBBIG2_IS_NMSTRT_CHAR_MINBPC\fP(enc, \fBp\fP)"

.PP
Definition at line 838 of file xmltok\&.c\&.
.SS "#define LITTLE2_BYTE_TO_ASCII(enc, \fBp\fP)   ((\fBp\fP)[1] == 0 ? (\fBp\fP)[0] : \-1)"

.PP
Definition at line 643 of file xmltok\&.c\&.
.SS "#define LITTLE2_BYTE_TYPE(enc, \fBp\fP)"
\fBValue:\fP
.PP
.nf
((p)[1] == 0 \
  ? ((struct normal_encoding *)(enc))->type[(unsigned char)*(p)] \
  : unicode_byte_type((p)[1], (p)[0]))
.fi
.PP
Definition at line 639 of file xmltok\&.c\&.
.SS "#define LITTLE2_CHAR_MATCHES(enc, \fBp\fP, \fBc\fP)   ((\fBp\fP)[1] == 0 && (\fBp\fP)[0] == \fBc\fP)"

.PP
Definition at line 644 of file xmltok\&.c\&.
.SS "#define LITTLE2_IS_NAME_CHAR_MINBPC(enc, \fBp\fP)   \fBUCS2_GET_NAMING\fP(namePages, (unsigned char)\fBp\fP[1], (unsigned char)\fBp\fP[0])"

.PP
Definition at line 645 of file xmltok\&.c\&.
.SS "#define LITTLE2_IS_NMSTRT_CHAR_MINBPC(enc, \fBp\fP)   \fBUCS2_GET_NAMING\fP(nmstrtPages, (unsigned char)\fBp\fP[1], (unsigned char)\fBp\fP[0])"

.PP
Definition at line 647 of file xmltok\&.c\&.
.SS "#define MINBPC(enc)   1"

.PP
Definition at line 830 of file xmltok\&.c\&.
.SS "#define MINBPC(enc)   2"

.PP
Definition at line 830 of file xmltok\&.c\&.
.SS "#define MINBPC(enc)   2"

.PP
Definition at line 830 of file xmltok\&.c\&.
.SS "#define NORMAL_VTABLE(\fBE\fP)"
\fBValue:\fP
.PP
.nf
E ## isName2, \\
 E ## isName3, \\
 E ## isName4, \\
 E ## isNmstrt2, \\
 E ## isNmstrt3, \\
 E ## isNmstrt4, \\
 E ## isInvalid2, \\
 E ## isInvalid3, \\
 E ## isInvalid4
.fi
.PP
Definition at line 214 of file xmltok\&.c\&.
.SS "#define NS(x)   x"

.PP
Definition at line 1619 of file xmltok\&.c\&.
.SS "#define ns(x)   x"

.PP
Definition at line 1620 of file xmltok\&.c\&.
.SS "#define \fBPREFIX\fP(ident)   normal_ ## ident"

.PP
Definition at line 829 of file xmltok\&.c\&.
.SS "#define \fBPREFIX\fP(ident)   little2_ ## ident"

.PP
Definition at line 829 of file xmltok\&.c\&.
.SS "#define \fBPREFIX\fP(ident)   big2_ ## ident"

.PP
Definition at line 829 of file xmltok\&.c\&.
.SS "#define SB_BYTE_TYPE(enc, \fBp\fP)   (((struct \fBnormal_encoding\fP *)(enc))\->type[(unsigned char)*(\fBp\fP)])"

.PP
Definition at line 242 of file xmltok\&.c\&.
.SS "#define SET2(ptr, ch)   (((ptr)[0] = ((ch) & 0xff)), ((ptr)[1] = ((ch) >> 8)))"

.PP
Definition at line 627 of file xmltok\&.c\&.
.SS "#define SET2(ptr, ch)   (((ptr)[0] = ((ch) >> 8)), ((ptr)[1] = ((ch) & 0xFF)))"

.PP
Definition at line 627 of file xmltok\&.c\&.
.SS "#define SET_INIT_ENC_INDEX(enc, \fBi\fP)   ((enc)\->initEnc\&.isUtf16 = (char)\fBi\fP)"

.PP
Definition at line 1486 of file xmltok\&.c\&.
.SS "#define STANDARD_VTABLE(\fBE\fP)   /* as nothing */"

.PP
Definition at line 210 of file xmltok\&.c\&.
.SS "#define UCS2_GET_NAMING(pages, hi, lo)   (namingBitmap[(pages[hi] << 3) + ((lo) >> 5)] & (1 << ((lo) & 0x1F)))"

.PP
Definition at line 48 of file xmltok\&.c\&.
.SS "#define UTF8_GET_NAMING(pages, \fBp\fP, n)"
\fBValue:\fP
.PP
.nf
((n) == 2 \
  ? UTF8_GET_NAMING2(pages, (const unsigned char *)(p)) \
  : ((n) == 3 \
     ? UTF8_GET_NAMING3(pages, (const unsigned char *)(p)) \
     : 0))
.fi
.PP
Definition at line 74 of file xmltok\&.c\&.
.SS "#define UTF8_GET_NAMING2(pages, byte)"
\fBValue:\fP
.PP
.nf
(namingBitmap[((pages)[(((byte)[0]) >> 2) & 7] << 3) \
                      + ((((byte)[0]) & 3) << 1) \
                      + ((((byte)[1]) >> 5) & 1)] \
         & (1 << (((byte)[1]) & 0x1F)))
.fi
.PP
Definition at line 55 of file xmltok\&.c\&.
.SS "#define UTF8_GET_NAMING3(pages, byte)"
\fBValue:\fP
.PP
.nf
(namingBitmap[((pages)[((((byte)[0]) & 0xF) << 4) \
                             + ((((byte)[1]) >> 2) & 0xF)] \
                       << 3) \
                      + ((((byte)[1]) & 3) << 1) \
                      + ((((byte)[2]) >> 5) & 1)] \
         & (1 << (((byte)[2]) & 0x1F)))
.fi
.PP
Definition at line 66 of file xmltok\&.c\&.
.SS "#define UTF8_INVALID2(\fBp\fP)   ((*\fBp\fP) < 0xC2 || ((p)[1] & 0x80) == 0 || ((p)[1] & 0xC0) == 0xC0)"

.PP
Definition at line 91 of file xmltok\&.c\&.
.SS "#define UTF8_INVALID3(\fBp\fP)"
\fBValue:\fP
.PP
.nf
(((p)[2] & 0x80) == 0 \
  || \
  ((*p) == 0xEF && (p)[1] == 0xBF \
    ? \
    (p)[2] > 0xBD \
    : \
    ((p)[2] & 0xC0) == 0xC0) \
  || \
  ((*p) == 0xE0 \
    ? \
    (p)[1] < 0xA0 || ((p)[1] & 0xC0) == 0xC0 \
    : \
    ((p)[1] & 0x80) == 0 \
    || \
    ((*p) == 0xED ? (p)[1] > 0x9F : ((p)[1] & 0xC0) == 0xC0)))
.fi
.PP
Definition at line 94 of file xmltok\&.c\&.
.SS "#define UTF8_INVALID4(\fBp\fP)"
\fBValue:\fP
.PP
.nf
(((p)[3] & 0x80) == 0 || ((p)[3] & 0xC0) == 0xC0 \
  || \
  ((p)[2] & 0x80) == 0 || ((p)[2] & 0xC0) == 0xC0 \
  || \
  ((*p) == 0xF0 \
    ? \
    (p)[1] < 0x90 || ((p)[1] & 0xC0) == 0xC0 \
    : \
    ((p)[1] & 0x80) == 0 \
    || \
    ((*p) == 0xF4 ? (p)[1] > 0x8F : ((p)[1] & 0xC0) == 0xC0)))
.fi
.PP
Definition at line 111 of file xmltok\&.c\&.
.SS "#define utf8_isName4   isNever"

.PP
Definition at line 142 of file xmltok\&.c\&.
.SS "#define utf8_isNmstrt4   isNever"

.PP
Definition at line 156 of file xmltok\&.c\&.
.SS "#define VTABLE   \fBVTABLE1\fP, \fBPREFIX\fP(toUtf8), \fBPREFIX\fP(toUtf16)"

.PP
Definition at line 46 of file xmltok\&.c\&.
.SS "#define VTABLE1"
\fBValue:\fP
.PP
.nf
{ PREFIX(prologTok), PREFIX(contentTok), \
    PREFIX(cdataSectionTok) IGNORE_SECTION_TOK_VTABLE }, \
  { PREFIX(attributeValueTok), PREFIX(entityValueTok) }, \\
  PREFIX(sameName), \\
  PREFIX(nameMatchesAscii), \\
  PREFIX(nameLength), \\
  PREFIX(skipS), \\
  PREFIX(getAtts), \\
  PREFIX(charRefNumber), \\
  PREFIX(predefinedEntityName), \\
  PREFIX(updatePosition), \\
  PREFIX(isPublicId)
.fi
.PP
Definition at line 32 of file xmltok\&.c\&.
.SS "#define XML_TOK_IMPL_C"

.PP
Definition at line 840 of file xmltok\&.c\&.
.SS "#define XML_TOK_IMPL_C"

.PP
Definition at line 840 of file xmltok\&.c\&.
.SS "#define XML_TOK_IMPL_C"

.PP
Definition at line 840 of file xmltok\&.c\&.
.SS "#define XML_TOK_NS_C"

.PP
Definition at line 1621 of file xmltok\&.c\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIUTF8_cval1 \fP\fP
.TP
\fB\fIUTF8_cval2 \fP\fP
.TP
\fB\fIUTF8_cval3 \fP\fP
.TP
\fB\fIUTF8_cval4 \fP\fP
.PP
Definition at line 314 of file xmltok\&.c\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIUNKNOWN_ENC \fP\fP
.TP
\fB\fIISO_8859_1_ENC \fP\fP
.TP
\fB\fIUS_ASCII_ENC \fP\fP
.TP
\fB\fIUTF_8_ENC \fP\fP
.TP
\fB\fIUTF_16_ENC \fP\fP
.TP
\fB\fIUTF_16BE_ENC \fP\fP
.TP
\fB\fIUTF_16LE_ENC \fP\fP
.TP
\fB\fINO_ENC \fP\fP
.PP
Definition at line 1426 of file xmltok\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBENCODING\fP* XmlInitUnknownEncoding (\fBvoid\fP * mem, \fBint\fP * table, CONVERTER convert, \fBvoid\fP * userData)"

.PP
Definition at line 1346 of file xmltok\&.c\&.
.SS "\fBint\fP XmlSizeOfUnknownEncoding (\fBvoid\fP)"

.PP
Definition at line 1258 of file xmltok\&.c\&.
.SS "\fBint\fP \fBFASTCALL\fP XmlUtf16Encode (\fBint\fP charNum, unsigned short * buf)"

.PP
Definition at line 1230 of file xmltok\&.c\&.
.SS "\fBint\fP \fBFASTCALL\fP XmlUtf8Encode (\fBint\fP c, char * buf)"

.PP
Definition at line 1193 of file xmltok\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
