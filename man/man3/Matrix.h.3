.TH "C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/src/Matrix.h \- General routine to interpolate (or even extrapolate small amounts) audio when a few of the samples are bad\&. Works great for a few dozen bad samples, but not so well with hundreds\&. Uses the least-squares autoregression (LSAR) algorithm, as described in:  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBVector\fP"
.br
.RI "\fIHolds a matrix of doubles and supports arithmetic operations, including Vector-Matrix operations\&. Used by InterpolateAudio\&. \fP"
.ti -1c
.RI "class \fBMatrix\fP"
.br
.RI "\fIHolds a matrix of doubles and supports arithmetic, subsetting, and matrix inversion\&. Used by InterpolateAudio\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBbool\fP \fBInvertMatrix\fP (\fBconst\fP \fBMatrix\fP &input, \fBMatrix\fP &Minv)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBTransposeMatrix\fP (\fBconst\fP \fBMatrix\fP &\fBM\fP)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBIdentityMatrix\fP (\fBint\fP \fBN\fP)"
.br
.ti -1c
.RI "\fBVector\fP \fBoperator+\fP (\fBconst\fP \fBVector\fP &left, \fBconst\fP \fBVector\fP &right)"
.br
.ti -1c
.RI "\fBVector\fP \fBoperator\-\fP (\fBconst\fP \fBVector\fP &left, \fBconst\fP \fBVector\fP &right)"
.br
.ti -1c
.RI "\fBVector\fP \fBoperator*\fP (\fBconst\fP \fBVector\fP &left, \fBconst\fP \fBVector\fP &right)"
.br
.ti -1c
.RI "\fBVector\fP \fBoperator*\fP (\fBconst\fP \fBVector\fP &left, double right)"
.br
.ti -1c
.RI "\fBVector\fP \fBVectorSubset\fP (\fBconst\fP \fBVector\fP &other, \fBint\fP \fBstart\fP, \fBint\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBVector\fP \fBVectorConcatenate\fP (\fBconst\fP \fBVector\fP &left, \fBconst\fP \fBVector\fP &right)"
.br
.ti -1c
.RI "\fBVector\fP \fBoperator*\fP (\fBconst\fP \fBVector\fP &left, \fBconst\fP \fBMatrix\fP &right)"
.br
.ti -1c
.RI "\fBVector\fP \fBoperator*\fP (\fBconst\fP \fBMatrix\fP &left, \fBconst\fP \fBVector\fP &right)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBoperator+\fP (\fBconst\fP \fBMatrix\fP &left, \fBconst\fP \fBMatrix\fP &right)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBoperator*\fP (\fBconst\fP \fBMatrix\fP &left, \fBconst\fP double right)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBScalarMultiply\fP (\fBconst\fP \fBMatrix\fP &left, \fBconst\fP \fBMatrix\fP &right)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBMatrixMultiply\fP (\fBconst\fP \fBMatrix\fP &left, \fBconst\fP \fBMatrix\fP &right)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBMatrixSubset\fP (\fBconst\fP \fBMatrix\fP &\fBM\fP, \fBint\fP startRow, \fBint\fP numRows, \fBint\fP startCol, \fBint\fP numCols)"
.br
.ti -1c
.RI "\fBMatrix\fP \fBMatrixConcatenateCols\fP (\fBconst\fP \fBMatrix\fP &left, \fBconst\fP \fBMatrix\fP &right)"
.br
.in -1c
.SH "Detailed Description"
.PP 
General routine to interpolate (or even extrapolate small amounts) audio when a few of the samples are bad\&. Works great for a few dozen bad samples, but not so well with hundreds\&. Uses the least-squares autoregression (LSAR) algorithm, as described in: 

Holds both the \fBMatrix\fP and \fBVector\fP classes, supporting linear algebra operations, including matrix inversion\&. Used by InterpolateAudio\&.
.PP
Simon Godsill, Peter Rayner, and Olivier Cappe\&. Digital Audio Restoration\&. Berlin: Springer, 1998\&.
.PP
This is the same work used by Gnome Wave Cleaner (GWC), however this implementation is original\&.
.PP
Definition in file \fBMatrix\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBMatrix\fP IdentityMatrix (\fBint\fP N)"

.PP
Definition at line 159 of file Matrix\&.cpp\&.
.SS "\fBbool\fP InvertMatrix (\fBconst\fP \fBMatrix\fP & input, \fBMatrix\fP & Minv)"

.PP
Definition at line 336 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP MatrixConcatenateCols (\fBconst\fP \fBMatrix\fP & left, \fBconst\fP \fBMatrix\fP & right)"

.PP
Definition at line 312 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP MatrixMultiply (\fBconst\fP \fBMatrix\fP & left, \fBconst\fP \fBMatrix\fP & right)"

.PP
Definition at line 287 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP MatrixSubset (\fBconst\fP \fBMatrix\fP & M, \fBint\fP startRow, \fBint\fP numRows, \fBint\fP startCol, \fBint\fP numCols)"

.PP
Definition at line 301 of file Matrix\&.cpp\&.
.SS "\fBVector\fP operator* (\fBconst\fP \fBVector\fP & left, \fBconst\fP \fBVector\fP & right)"

.PP
Definition at line 188 of file Matrix\&.cpp\&.
.SS "\fBVector\fP operator* (\fBconst\fP \fBVector\fP & left, double right)"

.PP
Definition at line 198 of file Matrix\&.cpp\&.
.SS "\fBVector\fP operator* (\fBconst\fP \fBVector\fP & left, \fBconst\fP \fBMatrix\fP & right)"

.PP
Definition at line 227 of file Matrix\&.cpp\&.
.SS "\fBVector\fP operator* (\fBconst\fP \fBMatrix\fP & left, \fBconst\fP \fBVector\fP & right)"

.PP
Definition at line 240 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP operator* (\fBconst\fP \fBMatrix\fP & left, \fBconst\fP double right)"

.PP
Definition at line 265 of file Matrix\&.cpp\&.
.SS "\fBVector\fP operator+ (\fBconst\fP \fBVector\fP & left, \fBconst\fP \fBVector\fP & right)"

.PP
Definition at line 168 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP operator+ (\fBconst\fP \fBMatrix\fP & left, \fBconst\fP \fBMatrix\fP & right)"

.PP
Definition at line 253 of file Matrix\&.cpp\&.
.SS "\fBVector\fP operator\- (\fBconst\fP \fBVector\fP & left, \fBconst\fP \fBVector\fP & right)"

.PP
Definition at line 178 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP ScalarMultiply (\fBconst\fP \fBMatrix\fP & left, \fBconst\fP \fBMatrix\fP & right)"

.PP
Definition at line 275 of file Matrix\&.cpp\&.
.SS "\fBMatrix\fP TransposeMatrix (\fBconst\fP \fBMatrix\fP & M)"

.PP
Definition at line 326 of file Matrix\&.cpp\&.
.SS "\fBVector\fP VectorConcatenate (\fBconst\fP \fBVector\fP & left, \fBconst\fP \fBVector\fP & right)"

.PP
Definition at line 216 of file Matrix\&.cpp\&.
.SS "\fBVector\fP VectorSubset (\fBconst\fP \fBVector\fP & other, \fBint\fP start, \fBint\fP len)"

.PP
Definition at line 207 of file Matrix\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
