.TH "sratom" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sratom \- Sratom
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBSratomImpl\fP \fBSratom\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSratomObjectMode\fP { \fBSRATOM_OBJECT_MODE_BLANK\fP, \fBSRATOM_OBJECT_MODE_BLANK_SUBJECT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBSRATOM_API\fP \fBSratom\fP * \fBsratom_new\fP (\fBLV2_URID_Map\fP *\fBmap\fP)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBvoid\fP \fBsratom_free\fP (\fBSratom\fP *sratom)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBvoid\fP \fBsratom_set_sink\fP (\fBSratom\fP *sratom, \fBconst\fP char *base_uri, \fBSerdStatementSink\fP sink, \fBSerdEndSink\fP end_sink, \fBvoid\fP *handle)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBvoid\fP \fBsratom_set_pretty_numbers\fP (\fBSratom\fP *sratom, \fBbool\fP pretty_numbers)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBvoid\fP \fBsratom_set_object_mode\fP (\fBSratom\fP *sratom, \fBSratomObjectMode\fP object_mode)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBint\fP \fBsratom_write\fP (\fBSratom\fP *sratom, \fBLV2_URID_Unmap\fP *unmap, \fBuint32_t\fP flags, \fBconst\fP \fBSerdNode\fP *subject, \fBconst\fP \fBSerdNode\fP *\fBpredicate\fP, \fBuint32_t\fP type, \fBuint32_t\fP \fBsize\fP, \fBconst\fP \fBvoid\fP *body)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBvoid\fP \fBsratom_read\fP (\fBSratom\fP *sratom, \fBLV2_Atom_Forge\fP *forge, \fBSordWorld\fP *world, \fBSordModel\fP *\fBmodel\fP, \fBconst\fP \fBSordNode\fP *subject)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP char * \fBsratom_to_turtle\fP (\fBSratom\fP *sratom, \fBLV2_URID_Unmap\fP *unmap, \fBconst\fP char *base_uri, \fBconst\fP \fBSerdNode\fP *subject, \fBconst\fP \fBSerdNode\fP *\fBpredicate\fP, \fBuint32_t\fP type, \fBuint32_t\fP \fBsize\fP, \fBconst\fP \fBvoid\fP *body)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBLV2_Atom\fP * \fBsratom_from_turtle\fP (\fBSratom\fP *sratom, \fBconst\fP char *base_uri, \fBconst\fP \fBSerdNode\fP *subject, \fBconst\fP \fBSerdNode\fP *\fBpredicate\fP, \fBconst\fP char *\fBstr\fP)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBLV2_Atom_Forge_Ref\fP \fBsratom_forge_sink\fP (\fBLV2_Atom_Forge_Sink_Handle\fP handle, \fBconst\fP \fBvoid\fP *\fBbuf\fP, \fBuint32_t\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBSRATOM_API\fP \fBLV2_Atom\fP * \fBsratom_forge_deref\fP (\fBLV2_Atom_Forge_Sink_Handle\fP handle, \fBLV2_Atom_Forge_Ref\fP ref)"
.br
.in -1c
.SH "Detailed Description"
.PP 
An LV2 Atom RDF serialisation library\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBSratomImpl\fP \fBSratom\fP"
Atom serialiser\&. 
.PP
Definition at line 62 of file sratom\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSratomObjectMode\fP"
Mode for reading resources to LV2 Objects\&.
.PP
This affects how resources (which are either blank nodes or have \fBURIs\fP) are read by \fBsratom_read()\fP, since they may be read as simple references (a URI or blank node ID) or a complete description (an atom 'Object')\&.
.PP
Currently, blank nodes are always read as Objects, but support for reading blank node IDs may be added in the future\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISRATOM_OBJECT_MODE_BLANK \fP\fP
Read blank nodes as Objects, and named resources as \fBURIs\fP\&. 
.TP
\fB\fISRATOM_OBJECT_MODE_BLANK_SUBJECT \fP\fP
Read blank nodes and the main subject as Objects, and any other named resources as \fBURIs\fP\&. The 'main subject' is the subject parameter passed to \fBsratom_read()\fP; if this is a resource it will be read as an Object, but all other named resources encountered will be read as \fBURIs\fP\&. 
.PP
Definition at line 74 of file sratom\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBSRATOM_API\fP \fBLV2_Atom\fP* sratom_forge_deref (\fBLV2_Atom_Forge_Sink_Handle\fP handle, \fBLV2_Atom_Forge_Ref\fP ref)"
The corresponding deref function for sratom_forge_sink\&. 
.PP
Definition at line 746 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBLV2_Atom_Forge_Ref\fP sratom_forge_sink (\fBLV2_Atom_Forge_Sink_Handle\fP handle, \fBconst\fP \fBvoid\fP * buf, \fBuint32_t\fP size)"
A convenient resizing sink for \fBLV2_Atom_Forge\fP\&. The handle must point to an initialized \fBSerdChunk\fP\&. 
.PP
Definition at line 734 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBvoid\fP sratom_free (\fBSratom\fP * sratom)"
Free an Atom serialisation\&. 
.PP
Definition at line 92 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBLV2_Atom\fP* sratom_from_turtle (\fBSratom\fP * sratom, \fBconst\fP char * base_uri, \fBconst\fP \fBSerdNode\fP * subject, \fBconst\fP \fBSerdNode\fP * predicate, \fBconst\fP char * str)"
Read an Atom from a Turtle string\&. The returned atom must be free()'d by the caller\&. 
.PP
Definition at line 754 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBSratom\fP* sratom_new (\fBLV2_URID_Map\fP * map)"
Create a new Atom serialiser\&. 
.PP
Definition at line 75 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBvoid\fP sratom_read (\fBSratom\fP * sratom, \fBLV2_Atom_Forge\fP * forge, \fBSordWorld\fP * world, \fBSordModel\fP * model, \fBconst\fP \fBSordNode\fP * subject)"
Read an Atom from RDF\&. The resulting atom will be written to \fCforge\fP\&. 
.PP
Definition at line 705 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBvoid\fP sratom_set_object_mode (\fBSratom\fP * sratom, \fBSratomObjectMode\fP object_mode)"
Configure how resources will be read to form LV2 Objects\&. 
.PP
Definition at line 126 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBvoid\fP sratom_set_pretty_numbers (\fBSratom\fP * sratom, \fBbool\fP pretty_numbers)"
Write pretty numeric literals\&.
.PP
If \fCpretty_numbers\fP is true, numbers will be written as pretty Turtle literals, rather than string literals with precise types\&. The cost of this is that the types might get fudged on a round-trip to RDF and back\&. 
.PP
Definition at line 118 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBvoid\fP sratom_set_sink (\fBSratom\fP * sratom, \fBconst\fP char * base_uri, \fBSerdStatementSink\fP sink, \fBSerdEndSink\fP end_sink, \fBvoid\fP * handle)"
Set the sink(s) where sratom will write its output\&.
.PP
This must be called before calling \fBsratom_write()\fP\&. 
.PP
Definition at line 100 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP char* sratom_to_turtle (\fBSratom\fP * sratom, \fBLV2_URID_Unmap\fP * unmap, \fBconst\fP char * base_uri, \fBconst\fP \fBSerdNode\fP * subject, \fBconst\fP \fBSerdNode\fP * predicate, \fBuint32_t\fP type, \fBuint32_t\fP size, \fBconst\fP \fBvoid\fP * body)"
Serialise an Atom to a Turtle string\&. The returned string must be free()'d by the caller\&. 
.PP
Definition at line 448 of file sratom\&.c\&.
.SS "\fBSRATOM_API\fP \fBint\fP sratom_write (\fBSratom\fP * sratom, \fBLV2_URID_Unmap\fP * unmap, \fBuint32_t\fP flags, \fBconst\fP \fBSerdNode\fP * subject, \fBconst\fP \fBSerdNode\fP * predicate, \fBuint32_t\fP type, \fBuint32_t\fP size, \fBconst\fP \fBvoid\fP * body)"
Write an Atom to RDF\&. The serialised atom is written to the sink set by \fBsratom_set_sink()\fP\&. 
.PP
\fBReturns:\fP
.RS 4
0 on success, or a non-zero error code otherwise\&. 
.RE
.PP

.PP
Definition at line 213 of file sratom\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
