.TH "compile_linux" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
compile_linux \- Building Portaudio for Linux 
\fINote: this page has not been reviewed, and may contain errors\&.\fP
.SH "Installing ALSA Development Kit"
.PP
The OSS sound API is very old and not well supported\&. It is recommended that you use the ALSA sound API\&. The PortAudio configure script will look for the ALSA SDK\&. You can install the ALSA SDK on Ubuntu using:
.PP
.PP
.nf
sudo apt-get install libasound-dev
.fi
.PP
.PP
You might need to use yum, or some other package manager, instead of apt-get on your machine\&. If you do not install ALSA then you might get a message when testing that says you have no audio devices\&.
.PP
You can find out more about ALSA here: http://www.alsa-project.org/
.SH "Configuring and Compiling PortAudio"
.PP
You can build PortAudio in Linux Environments using the standard configure/make tools:
.PP
.PP
.nf
\&./configure && make
.fi
.PP
.PP
That will build PortAudio using Jack, ALSA and OSS in whatever combination they are found on your system\&. For example, if you have Jack and OSS but not ALSA, it will build using Jack and OSS but not ALSA\&. This step also builds a number of tests, which can be found in the bin directory of PortAudio\&. It's a good idea to run some of these tests to make sure PortAudio is working correctly\&.
.SH "Using PortAudio in your Projects"
.PP
To use PortAudio in your apps, you can simply install the \&.so files:
.PP
.PP
.nf
sudo make install
.fi
.PP
.PP
Projects built this way will expect PortAudio to be installed on target systems in order to run\&. If you want to build a more self-contained binary, you may use the libportaudio\&.a file:
.PP
.PP
.nf
cp lib/\&.libs/libportaudio\&.a /YOUR/PROJECT/DIR
.fi
.PP
.PP
On some systems you may need to use:
.PP
.PP
.nf
cp /usr/local/lib/libportaudio\&.a /YOUR/PROJECT/DIR
.fi
.PP
.PP
You may also need to copy \fBportaudio\&.h\fP, located in the include/ directory of PortAudio into your project\&. Note that you will usually need to link with the approriate libraries that you used, such as ALSA and JACK, as well as with librt and libpthread\&. For example:
.PP
.PP
.nf
gcc main\&.c libportaudio\&.a -lrt -lm -lasound -ljack -pthread -o YOUR_BINARY
.fi
.PP
.SH "Linux Extensions"
.PP
Note that the ALSA PortAudio back-end adds a few extensions to the standard API that you may take advantage of\&. To use these functions be sure to include the \fBpa_linux_alsa\&.h\fP file found in the include file in the PortAudio folder\&. This file contains further documentation on the following functions:
.PP
PaAlsaStreamInfo/PaAlsa_InitializeStreamInfo:: Objects of the !PaAlsaStreamInfo type may be used for the !hostApiSpecificStreamInfo attribute of a !PaStreamParameters object, in order to specify the name of an ALSA device to open directly\&. Specify the device via !PaAlsaStreamInfo\&.deviceString, after initializing the object with PaAlsa_InitializeStreamInfo\&.
.PP
PaAlsa_EnableRealtimeScheduling:: PA ALSA supports real-time scheduling of the audio callback thread (using the FIFO pthread scheduling policy), via the extension PaAlsa_EnableRealtimeScheduling\&. Call this on the stream before starting it with the \fIenableScheduling\fP parameter set to true or false, to enable or disable this behaviour respectively\&.
.PP
PaAlsa_GetStreamInputCard:: Use this function to get the ALSA-lib card index of the stream's input device\&.
.PP
PaAlsa_GetStreamOutputCard:: Use this function to get the ALSA-lib card index of the stream's output device\&.
.PP
Of particular importance is PaAlsa_EnableRealtimeScheduling, which allows ALSA to run at a high priority to prevent ordinary processes on the system from preempting audio playback\&. Without this, low latency audio playback will be irregular and will contain frequent drop-outs\&.
.SH "Linux Debugging"
.PP
Eliot Blennerhassett writes:
.PP
On linux build, use e\&.g\&. 'libtool gdb bin/patest_sine8' to debug that program\&. This is because on linux bin/patest_sine8 is a libtool shell script that wraps bin/\&.libs/patest_sine8 and allows it to find the appropriate libraries within the build tree\&. 
