.TH "AVClass" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AVClass \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <log\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBconst\fP char * \fBclass_name\fP"
.br
.ti -1c
.RI "\fBconst\fP char *(* \fBitem_name\fP )(\fBvoid\fP *ctx)"
.br
.ti -1c
.RI "\fBconst\fP struct \fBAVOption\fP * \fBoption\fP"
.br
.ti -1c
.RI "\fBint\fP \fBversion\fP"
.br
.ti -1c
.RI "\fBint\fP \fBlog_level_offset_offset\fP"
.br
.ti -1c
.RI "\fBint\fP \fBparent_log_context_offset\fP"
.br
.ti -1c
.RI "\fBvoid\fP *(* \fBchild_next\fP )(\fBvoid\fP *obj, \fBvoid\fP *prev)"
.br
.ti -1c
.RI "\fBconst\fP struct \fBAVClass\fP *(* \fBchild_class_next\fP )(\fBconst\fP struct \fBAVClass\fP *prev)"
.br
.ti -1c
.RI "\fBAVClassCategory\fP \fBcategory\fP"
.br
.ti -1c
.RI "\fBAVClassCategory\fP(* \fBget_category\fP )(\fBvoid\fP *ctx)"
.br
.ti -1c
.RI "\fBint\fP(* \fBquery_ranges\fP )(struct \fBAVOptionRanges\fP **, \fBvoid\fP *obj, \fBconst\fP char *key, \fBint\fP flags)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Describe the class of an \fBAVClass\fP context structure\&. That is an arbitrary struct of which the first field is a pointer to an \fBAVClass\fP struct (e\&.g\&. \fBAVCodecContext\fP, \fBAVFormatContext\fP etc\&.)\&. 
.PP
Definition at line 50 of file log\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBAVClassCategory\fP AVClass::category"
Category used for visualization (like color) This is only set if the category is equal for all objects using this class\&. available since version (51 << 16 | 56 << 8 | 100) 
.PP
Definition at line 113 of file log\&.h\&.
.SS "\fBconst\fP struct \fBAVClass\fP*(* AVClass::child_class_next) (\fBconst\fP struct \fBAVClass\fP *prev)"
Return an \fBAVClass\fP corresponding to the next potential AVOptions-enabled child\&.
.PP
The difference between child_next and this is that child_next iterates over \fIalready existing\fP objects, while child_class_next iterates over \fIall possible\fP children\&. 
.PP
Definition at line 106 of file log\&.h\&.
.SS "\fBvoid\fP*(* AVClass::child_next) (\fBvoid\fP *obj, \fBvoid\fP *prev)"
Return next AVOptions-enabled child or NULL 
.PP
Definition at line 96 of file log\&.h\&.
.SS "\fBconst\fP char* AVClass::class_name"
The name of the class; usually it is the same name as the context structure type to which the \fBAVClass\fP is associated\&. 
.PP
Definition at line 55 of file log\&.h\&.
.SS "\fBAVClassCategory\fP(* AVClass::get_category) (\fBvoid\fP *ctx)"
\fBCallback\fP to return the category\&. available since version (51 << 16 | 59 << 8 | 100) 
.PP
Definition at line 119 of file log\&.h\&.
.SS "\fBconst\fP char*(* AVClass::item_name) (\fBvoid\fP *ctx)"
A pointer to a function which returns the name of a context instance ctx associated with the class\&. 
.PP
Definition at line 61 of file log\&.h\&.
.SS "\fBint\fP AVClass::log_level_offset_offset"
Offset in the structure where log_level_offset is stored\&. 0 means there is no such variable 
.PP
Definition at line 82 of file log\&.h\&.
.SS "\fBconst\fP struct \fBAVOption\fP* AVClass::option"
a pointer to the first option specified in the class if any or NULL
.PP
\fBSee also:\fP
.RS 4
av_set_default_options() 
.RE
.PP

.PP
Definition at line 68 of file log\&.h\&.
.SS "\fBint\fP AVClass::parent_log_context_offset"
Offset in the structure where a pointer to the parent context for logging is stored\&. For example a decoder could pass its \fBAVCodecContext\fP to eval as such a parent context, which an \fBav_log()\fP implementation could then leverage to display the parent context\&. The offset can be NULL\&. 
.PP
Definition at line 91 of file log\&.h\&.
.SS "\fBint\fP(* AVClass::query_ranges) (struct \fBAVOptionRanges\fP **, \fBvoid\fP *obj, \fBconst\fP char *key, \fBint\fP flags)"
\fBCallback\fP to return the supported/allowed ranges\&. available since version (52\&.12) 
.PP
Definition at line 125 of file log\&.h\&.
.SS "\fBint\fP AVClass::version"
LIBAVUTIL_VERSION with which this structure was created\&. This is used to allow fields to be added without requiring major version bumps everywhere\&. 
.PP
Definition at line 76 of file log\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
