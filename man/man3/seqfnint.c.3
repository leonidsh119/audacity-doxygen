.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/seqfnint.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/seqfnint.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'stdlib\&.h'\fP
.br
\fC#include 'xlisp\&.h'\fP
.br
\fC#include 'seqdecls\&.h'\fP
.br
\fC#include 'seqext\&.h'\fP
.br
\fC#include 'seq\&.h'\fP
.br
\fC#include 'seqinterf\&.h'\fP
.br
\fC#include 'seqread\&.h'\fP
.br
\fC#include 'seqmread\&.h'\fP
.br
\fC#include 'seqwrite\&.h'\fP
.br
\fC#include 'seqmwrite\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBcvboolean\fP(\fBi\fP)   ((\fBi\fP) ? \fBs_true\fP : \fBNIL\fP)"
.br
.ti -1c
.RI "#define \fBtestarg2\fP(e)   (\fBmoreargs\fP() ? (e) : (\fBgetflonum\fP(\fBxltoofew\fP())))"
.br
.ti -1c
.RI "#define \fBxlgaanynum\fP()"
.br
.ti -1c
.RI "#define \fBgetboolean\fP(lval)   ((lval) != \fBNIL\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_reset\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_insert_ctrl\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_insert_ramp\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_insert_macctrl\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_insert_note\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_copy\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_create\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_next\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_get\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_read\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_read_smf\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_write\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBLVAL\fP \fBxlc_seq_write_smf\fP (\fBvoid\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBLVAL\fP \fBs_true\fP"
.br
.ti -1c
.RI "\fBLVAL\fP \fBRSLT_sym\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define cvboolean(\fBi\fP)   ((\fBi\fP) ? \fBs_true\fP : \fBNIL\fP)"

.PP
Definition at line 12 of file seqfnint\&.c\&.
.SS "#define getboolean(lval)   ((lval) != \fBNIL\fP)"

.PP
Definition at line 17 of file seqfnint\&.c\&.
.SS "#define testarg2(e)   (\fBmoreargs\fP() ? (e) : (\fBgetflonum\fP(\fBxltoofew\fP())))"

.PP
Definition at line 13 of file seqfnint\&.c\&.
.SS "#define xlgaanynum()"
\fBValue:\fP
.PP
.nf
(floatp(*xlargv) ? getflonum(nextarg()) : \
    (fixp(*xlargv) ? (double) getfixnum(nextarg()) : \
        getflonum(xlbadtype(*xlargv))))
.fi
.PP
Definition at line 14 of file seqfnint\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBLVAL\fP xlc_seq_copy (\fBvoid\fP)"

.PP
Definition at line 114 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_create (\fBvoid\fP)"

.PP
Definition at line 127 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_get (\fBvoid\fP)"

.PP
Definition at line 154 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_insert_ctrl (\fBvoid\fP)"

.PP
Definition at line 42 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_insert_macctrl (\fBvoid\fP)"

.PP
Definition at line 79 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_insert_note (\fBvoid\fP)"

.PP
Definition at line 96 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_insert_ramp (\fBvoid\fP)"

.PP
Definition at line 59 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_next (\fBvoid\fP)"

.PP
Definition at line 141 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_read (\fBvoid\fP)"

.PP
Definition at line 193 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_read_smf (\fBvoid\fP)"

.PP
Definition at line 208 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_reset (\fBvoid\fP)"

.PP
Definition at line 30 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_write (\fBvoid\fP)"

.PP
Definition at line 223 of file seqfnint\&.c\&.
.SS "\fBLVAL\fP xlc_seq_write_smf (\fBvoid\fP)"

.PP
Definition at line 239 of file seqfnint\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBLVAL\fP RSLT_sym"

.PP
Definition at line 18 of file local\&.c\&.
.SS "\fBLVAL\fP s_true"

.PP
Definition at line 20 of file xlglob\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
