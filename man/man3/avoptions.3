.TH "avoptions" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
avoptions \- AVOptions
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBEvaluating option strings\fP"
.br
.ti -1c
.RI "\fBOption setting functions\fP"
.br
.ti -1c
.RI "\fBOption getting functions\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAVOption\fP"
.br
.ti -1c
.RI "struct \fBAVOptionRange\fP"
.br
.ti -1c
.RI "struct \fBAVOptionRanges\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAV_OPT_SEARCH_CHILDREN\fP   0x0001"
.br
.ti -1c
.RI "#define \fBAV_OPT_SEARCH_FAKE_OBJ\fP   0x0002"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBAVOption\fP \fBAVOption\fP"
.br
.ti -1c
.RI "typedef struct \fBAVOptionRange\fP \fBAVOptionRange\fP"
.br
.ti -1c
.RI "typedef struct \fBAVOptionRanges\fP \fBAVOptionRanges\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBAVOptionType\fP { \fBAV_OPT_TYPE_FLAGS\fP, \fBAV_OPT_TYPE_INT\fP, \fBAV_OPT_TYPE_INT64\fP, \fBAV_OPT_TYPE_DOUBLE\fP, \fBAV_OPT_TYPE_FLOAT\fP, \fBAV_OPT_TYPE_STRING\fP, \fBAV_OPT_TYPE_RATIONAL\fP, \fBAV_OPT_TYPE_BINARY\fP, \fBAV_OPT_TYPE_CONST\fP = 128, \fBAV_OPT_TYPE_IMAGE_SIZE\fP = MKBETAG('S','I','Z','E'), \fBAV_OPT_TYPE_PIXEL_FMT\fP = MKBETAG('P','F','M','T'), \fBAV_OPT_TYPE_SAMPLE_FMT\fP = MKBETAG('S','F','M','T'), \fBAV_OPT_TYPE_VIDEO_RATE\fP = MKBETAG('V','R','A','T'), \fBAV_OPT_TYPE_DURATION\fP = MKBETAG('D','U','R',' '), \fBAV_OPT_TYPE_COLOR\fP = MKBETAG('C','O','L','R'), \fBAV_OPT_TYPE_CHANNEL_LAYOUT\fP = MKBETAG('C','H','L','A'), \fBFF_OPT_TYPE_FLAGS\fP = 0, \fBFF_OPT_TYPE_INT\fP, \fBFF_OPT_TYPE_INT64\fP, \fBFF_OPT_TYPE_DOUBLE\fP, \fBFF_OPT_TYPE_FLOAT\fP, \fBFF_OPT_TYPE_STRING\fP, \fBFF_OPT_TYPE_RATIONAL\fP, \fBFF_OPT_TYPE_BINARY\fP, \fBFF_OPT_TYPE_CONST\fP =128 }"
.br
.ti -1c
.RI "enum { \fBAV_OPT_FLAG_IMPLICIT_KEY\fP = 1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_find_opt\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *unit, \fBint\fP \fBmask\fP, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBav_set_string3\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *val, \fBint\fP alloc, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_set_double\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, double n)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_set_q\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBAVRational\fP n)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_set_int\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint64_t\fP n)"
.br
.ti -1c
.RI "double \fBav_get_double\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBAVRational\fP \fBav_get_q\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBint64_t\fP \fBav_get_int\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP char * \fBav_get_string\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out, char *\fBbuf\fP, \fBint\fP buf_len)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_next_option\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *\fBlast\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_show2\fP (\fBvoid\fP *obj, \fBvoid\fP *av_log_obj, \fBint\fP req_flags, \fBint\fP rej_flags)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_opt_set_defaults\fP (\fBvoid\fP *\fBs\fP)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_opt_set_defaults2\fP (\fBvoid\fP *\fBs\fP, \fBint\fP \fBmask\fP, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_set_options_string\fP (\fBvoid\fP *ctx, \fBconst\fP char *opts, \fBconst\fP char *key_val_sep, \fBconst\fP char *pairs_sep)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_from_string\fP (\fBvoid\fP *ctx, \fBconst\fP char *opts, \fBconst\fP char *\fBconst\fP *shorthand, \fBconst\fP char *key_val_sep, \fBconst\fP char *pairs_sep)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_opt_free\fP (\fBvoid\fP *obj)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_flag_is_set\fP (\fBvoid\fP *obj, \fBconst\fP char *field_name, \fBconst\fP char *flag_name)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_dict\fP (\fBvoid\fP *obj, struct \fBAVDictionary\fP **options)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_key_value\fP (\fBconst\fP char **ropts, \fBconst\fP char *key_val_sep, \fBconst\fP char *pairs_sep, unsigned flags, char **rkey, char **rval)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVOption\fP * \fBav_opt_find\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *unit, \fBint\fP opt_flags, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVOption\fP * \fBav_opt_find2\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *unit, \fBint\fP opt_flags, \fBint\fP search_flags, \fBvoid\fP **target_obj)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVOption\fP * \fBav_opt_next\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *prev)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBav_opt_child_next\fP (\fBvoid\fP *obj, \fBvoid\fP *prev)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBav_opt_child_class_next\fP (\fBconst\fP \fBAVClass\fP *parent, \fBconst\fP \fBAVClass\fP *prev)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBav_opt_ptr\fP (\fBconst\fP \fBAVClass\fP *avclass, \fBvoid\fP *obj, \fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_opt_freep_ranges\fP (\fBAVOptionRanges\fP **ranges)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_query_ranges\fP (\fBAVOptionRanges\fP **, \fBvoid\fP *obj, \fBconst\fP char *key, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_query_ranges_default\fP (\fBAVOptionRanges\fP **, \fBvoid\fP *obj, \fBconst\fP char *key, \fBint\fP flags)"
.br
.in -1c
.SH "Detailed Description"
.PP 
AVOptions provide a generic system to declare options on arbitrary structs ('objects')\&. An option can have a help text, a type and a range of possible values\&. Options may then be enumerated, read and written to\&.
.SH "Implementing AVOptions"
.PP
This section describes how to add AVOptions capabilities to a struct\&.
.PP
All AVOptions-related information is stored in an \fBAVClass\fP\&. Therefore the first member of the struct should be a pointer to an \fBAVClass\fP describing it\&. The option field of the \fBAVClass\fP must be set to a NULL-terminated static array of AVOptions\&. Each \fBAVOption\fP must have a non-empty name, a type, a default value and for number-type AVOptions also a range of allowed values\&. It must also declare an offset in bytes from the start of the struct, where the field associated with this \fBAVOption\fP is located\&. Other fields in the \fBAVOption\fP struct should also be set when applicable, but are not required\&.
.PP
The following example illustrates an AVOptions-enabled struct: 
.PP
.nf
typedef struct test_struct {
    AVClass *class;
    int      int_opt;
    char    *str_opt;
    uint8_t *bin_opt;
    int      bin_len;
} test_struct;

static const AVOption test_options[] = {
  { "test_int", "This is a test option of int type\&.", offsetof(test_struct, int_opt),
    AV_OPT_TYPE_INT, { \&.i64 = -1 }, INT_MIN, INT_MAX },
  { "test_str", "This is a test option of string type\&.", offsetof(test_struct, str_opt),
    AV_OPT_TYPE_STRING },
  { "test_bin", "This is a test option of binary type\&.", offsetof(test_struct, bin_opt),
    AV_OPT_TYPE_BINARY },
  { NULL },
};

static const AVClass test_class = {
    \&.class_name = "test class",
    \&.item_name  = av_default_item_name,
    \&.option     = test_options,
    \&.version    = LIBAVUTIL_VERSION_INT,
};

.fi
.PP
.PP
Next, when allocating your struct, you must ensure that the \fBAVClass\fP pointer is set to the correct value\&. Then, \fBav_opt_set_defaults()\fP can be called to initialize defaults\&. After that the struct is ready to be used with the AVOptions API\&.
.PP
When cleaning up, you may use the \fBav_opt_free()\fP function to automatically free all the allocated string and binary options\&.
.PP
Continuing with the above example:
.PP
.PP
.nf
test_struct *alloc_test_struct(void)
{
    test_struct *ret = av_malloc(sizeof(*ret));
    ret->class = &test_class;
    av_opt_set_defaults(ret);
    return ret;
}
void free_test_struct(test_struct **foo)
{
    av_opt_free(*foo);
    av_freep(foo);
}
.fi
.PP
.SS "Nesting"
It may happen that an AVOptions-enabled struct contains another AVOptions-enabled struct as a member (e\&.g\&. \fBAVCodecContext\fP in libavcodec exports generic options, while its priv_data field exports codec-specific options)\&. In such a case, it is possible to set up the parent struct to export a child's options\&. To do that, simply implement \fBAVClass\&.child_next()\fP and \fBAVClass\&.child_class_next()\fP in the parent struct's \fBAVClass\fP\&. Assuming that the test_struct from above now also contains a child_struct field:
.PP
.PP
.nf
typedef struct child_struct {
    AVClass *class;
    int flags_opt;
} child_struct;
static const AVOption child_opts[] = {
    { "test_flags", "This is a test option of flags type\&.",
      offsetof(child_struct, flags_opt), AV_OPT_TYPE_FLAGS, { \&.i64 = 0 }, INT_MIN, INT_MAX },
    { NULL },
};
static const AVClass child_class = {
    \&.class_name = "child class",
    \&.item_name  = av_default_item_name,
    \&.option     = child_opts,
    \&.version    = LIBAVUTIL_VERSION_INT,
};

void *child_next(void *obj, void *prev)
{
    test_struct *t = obj;
    if (!prev && t->child_struct)
        return t->child_struct;
    return NULL
}
const AVClass child_class_next(const AVClass *prev)
{
    return prev ? NULL : &child_class;
}
.fi
.PP
 Putting child_next() and child_class_next() as defined above into test_class will now make child_struct's options accessible through test_struct (again, proper setup as described above needs to be done on child_struct right after it is created)\&.
.PP
From the above example it might not be clear why both child_next() and child_class_next() are needed\&. The distinction is that child_next() iterates over actually existing objects, while child_class_next() iterates over all possible child classes\&. E\&.g\&. if an \fBAVCodecContext\fP was initialized to use a codec which has private options, then its child_next() will return \fBAVCodecContext\&.priv_data\fP and finish iterating\&. OTOH child_class_next() on \fBAVCodecContext\&.av_class\fP will iterate over all available codecs with private options\&.
.SS "Named constants"
It is possible to create named constants for options\&. Simply set the unit field of the option the constants should apply to a string and create the constants themselves as options of type AV_OPT_TYPE_CONST with their unit field set to the same string\&. Their default_val field should contain the value of the named constant\&. For example, to add some named constants for the test_flags option above, put the following into the child_opts array: 
.PP
.nf
{ "test_flags", "This is a test option of flags type\&.",
  offsetof(child_struct, flags_opt), AV_OPT_TYPE_FLAGS, { \&.i64 = 0 }, INT_MIN, INT_MAX, "test_unit" },
{ "flag1", "This is a flag with value 16", 0, AV_OPT_TYPE_CONST, { \&.i64 = 16 }, 0, 0, "test_unit" },

.fi
.PP
.SH "Using AVOptions"
.PP
This section deals with accessing options in an AVOptions-enabled struct\&. Such structs in FFmpeg are e\&.g\&. \fBAVCodecContext\fP in libavcodec or \fBAVFormatContext\fP in libavformat\&.
.SS "Examining AVOptions"
The basic functions for examining options are \fBav_opt_next()\fP, which iterates over all options defined for one object, and \fBav_opt_find()\fP, which searches for an option with the given name\&.
.PP
The situation is more complicated with nesting\&. An AVOptions-enabled struct may have AVOptions-enabled children\&. Passing the AV_OPT_SEARCH_CHILDREN flag to \fBav_opt_find()\fP will make the function search children recursively\&.
.PP
For enumerating there are basically two cases\&. The first is when you want to get all options that may potentially exist on the struct and its children (e\&.g\&. when constructing documentation)\&. In that case you should call \fBav_opt_child_class_next()\fP recursively on the parent struct's \fBAVClass\fP\&. The second case is when you have an already initialized struct with all its children and you want to get all options that can be actually written or read from it\&. In that case you should call \fBav_opt_child_next()\fP recursively (and \fBav_opt_next()\fP on each result)\&.
.SS "Reading and writing AVOptions"
When setting options, you often have a string read directly from the user\&. In such a case, simply passing it to \fBav_opt_set()\fP is enough\&. For non-string type options, \fBav_opt_set()\fP will parse the string according to the option type\&.
.PP
Similarly \fBav_opt_get()\fP will read any option type and convert it to a string which will be returned\&. Do not forget that the string is allocated, so you have to free it with \fBav_free()\fP\&.
.PP
In some cases it may be more convenient to put all options into an AVDictionary and call \fBav_opt_set_dict()\fP on it\&. A specific case of this are the format/codec open functions in lavf/lavc which take a dictionary filled with option as a parameter\&. This allows to set some options that cannot be set otherwise, since e\&.g\&. the input file format is not known before the file is actually opened\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define AV_OPT_SEARCH_CHILDREN   0x0001"
Search in possible children of the given object first\&. 
.PP
Definition at line 551 of file opt\&.h\&.
.SS "#define AV_OPT_SEARCH_FAKE_OBJ   0x0002"
The obj passed to \fBav_opt_find()\fP is fake -- only a double pointer to \fBAVClass\fP instead of a required pointer to a struct containing \fBAVClass\fP\&. This is useful for searching for options without needing to allocate the corresponding object\&. 
.PP
Definition at line 560 of file opt\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBAVOption\fP  \fBAVOption\fP"
\fBAVOption\fP 
.SS "typedef struct \fBAVOptionRange\fP  \fBAVOptionRange\fP"
A single allowed range of values, or a single allowed value\&. 
.SS "typedef struct \fBAVOptionRanges\fP  \fBAVOptionRanges\fP"
List of \fBAVOptionRange\fP structs 
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAV_OPT_FLAG_IMPLICIT_KEY \fP\fP
Accept to parse a value without a key; the key will then be returned as NULL\&. 
.PP
Definition at line 518 of file opt\&.h\&.
.SS "enum \fBAVOptionType\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAV_OPT_TYPE_FLAGS \fP\fP
.TP
\fB\fIAV_OPT_TYPE_INT \fP\fP
.TP
\fB\fIAV_OPT_TYPE_INT64 \fP\fP
.TP
\fB\fIAV_OPT_TYPE_DOUBLE \fP\fP
.TP
\fB\fIAV_OPT_TYPE_FLOAT \fP\fP
.TP
\fB\fIAV_OPT_TYPE_STRING \fP\fP
.TP
\fB\fIAV_OPT_TYPE_RATIONAL \fP\fP
.TP
\fB\fIAV_OPT_TYPE_BINARY \fP\fP
offset must point to a pointer immediately followed by an int for the length 
.TP
\fB\fIAV_OPT_TYPE_CONST \fP\fP
.TP
\fB\fIAV_OPT_TYPE_IMAGE_SIZE \fP\fP
offset must point to two consecutive integers 
.TP
\fB\fIAV_OPT_TYPE_PIXEL_FMT \fP\fP
.TP
\fB\fIAV_OPT_TYPE_SAMPLE_FMT \fP\fP
.TP
\fB\fIAV_OPT_TYPE_VIDEO_RATE \fP\fP
offset must point to \fBAVRational\fP 
.TP
\fB\fIAV_OPT_TYPE_DURATION \fP\fP
.TP
\fB\fIAV_OPT_TYPE_COLOR \fP\fP
.TP
\fB\fIAV_OPT_TYPE_CHANNEL_LAYOUT \fP\fP
.TP
\fB\fIFF_OPT_TYPE_FLAGS \fP\fP
.TP
\fB\fIFF_OPT_TYPE_INT \fP\fP
.TP
\fB\fIFF_OPT_TYPE_INT64 \fP\fP
.TP
\fB\fIFF_OPT_TYPE_DOUBLE \fP\fP
.TP
\fB\fIFF_OPT_TYPE_FLOAT \fP\fP
.TP
\fB\fIFF_OPT_TYPE_STRING \fP\fP
.TP
\fB\fIFF_OPT_TYPE_RATIONAL \fP\fP
.TP
\fB\fIFF_OPT_TYPE_BINARY \fP\fP
offset must point to a pointer immediately followed by an int for the length 
.TP
\fB\fIFF_OPT_TYPE_CONST \fP\fP
.PP
Definition at line 220 of file opt\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP* av_find_opt (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP char * unit, \fBint\fP mask, \fBint\fP flags)"
Look for an option in obj\&. Look only for the options which have the flags set as specified in mask and flags (that is, for which it is the case that (opt->flags & mask) == flags)\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP a pointer to a struct whose first element is a pointer to an \fBAVClass\fP 
.br
\fIname\fP the name of the option to look for 
.br
\fIunit\fP the unit of the option to look for, or any if NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the option found, or NULL if no option has been found
.RE
.PP
\fBDeprecated\fP
.RS 4
use av_opt_find\&. 
.RE
.PP

.SS "double av_get_double (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP \fBAVOption\fP ** o_out)"

.SS "\fBint64_t\fP av_get_int (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP \fBAVOption\fP ** o_out)"

.SS "\fBAVRational\fP av_get_q (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP \fBAVOption\fP ** o_out)"

.SS "\fBattribute_deprecated\fP \fBconst\fP char* av_get_string (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP \fBAVOption\fP ** o_out, char * buf, \fBint\fP buf_len)"

.SS "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP* av_next_option (\fBvoid\fP * obj, \fBconst\fP \fBAVOption\fP * last)"

.SS "\fBconst\fP \fBAVClass\fP* av_opt_child_class_next (\fBconst\fP \fBAVClass\fP * parent, \fBconst\fP \fBAVClass\fP * prev)"
Iterate over potential AVOptions-enabled children of parent\&.
.PP
\fBParameters:\fP
.RS 4
\fIprev\fP result of a previous call to this function or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBAVClass\fP corresponding to next potential child or NULL 
.RE
.PP

.SS "\fBvoid\fP* av_opt_child_next (\fBvoid\fP * obj, \fBvoid\fP * prev)"
Iterate over AVOptions-enabled children of obj\&.
.PP
\fBParameters:\fP
.RS 4
\fIprev\fP result of a previous call to this function or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
next AVOptions-enabled child or NULL 
.RE
.PP

.SS "\fBconst\fP \fBAVOption\fP* av_opt_find (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP char * unit, \fBint\fP opt_flags, \fBint\fP search_flags)"
Look for an option in an object\&. Consider only options which have all the specified flags set\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A pointer to a struct whose first element is a pointer to an \fBAVClass\fP\&. Alternatively a double pointer to an \fBAVClass\fP, if AV_OPT_SEARCH_FAKE_OBJ search flag is set\&. 
.br
\fIname\fP The name of the option to look for\&. 
.br
\fIunit\fP When searching for named constants, name of the unit it belongs to\&. 
.br
\fIopt_flags\fP Find only options with all the specified flags set (AV_OPT_FLAG)\&. 
.br
\fIsearch_flags\fP A combination of AV_OPT_SEARCH_*\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the option found, or NULL if no option was found\&.
.RE
.PP
\fBNote:\fP
.RS 4
Options found with AV_OPT_SEARCH_CHILDREN flag may not be settable directly with \fBav_set_string3()\fP\&. Use special calls which take an options AVDictionary (e\&.g\&. \fBavformat_open_input()\fP) to set options found with this flag\&. 
.RE
.PP

.SS "\fBconst\fP \fBAVOption\fP* av_opt_find2 (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP char * unit, \fBint\fP opt_flags, \fBint\fP search_flags, \fBvoid\fP ** target_obj)"
Look for an option in an object\&. Consider only options which have all the specified flags set\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A pointer to a struct whose first element is a pointer to an \fBAVClass\fP\&. Alternatively a double pointer to an \fBAVClass\fP, if AV_OPT_SEARCH_FAKE_OBJ search flag is set\&. 
.br
\fIname\fP The name of the option to look for\&. 
.br
\fIunit\fP When searching for named constants, name of the unit it belongs to\&. 
.br
\fIopt_flags\fP Find only options with all the specified flags set (AV_OPT_FLAG)\&. 
.br
\fIsearch_flags\fP A combination of AV_OPT_SEARCH_*\&. 
.br
\fItarget_obj\fP if non-NULL, an object to which the option belongs will be written here\&. It may be different from obj if AV_OPT_SEARCH_CHILDREN is present in search_flags\&. This parameter is ignored if search_flags contain AV_OPT_SEARCH_FAKE_OBJ\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the option found, or NULL if no option was found\&. 
.RE
.PP

.SS "\fBint\fP av_opt_flag_is_set (\fBvoid\fP * obj, \fBconst\fP char * field_name, \fBconst\fP char * flag_name)"
Check whether a particular flag is set in a flags field\&.
.PP
\fBParameters:\fP
.RS 4
\fIfield_name\fP the name of the flag field option 
.br
\fIflag_name\fP the name of the flag to check 
.RE
.PP
\fBReturns:\fP
.RS 4
non-zero if the flag is set, zero if the flag isn't set, isn't of the right type, or the flags field doesn't exist\&. 
.RE
.PP

.SS "\fBvoid\fP av_opt_free (\fBvoid\fP * obj)"
Free all string and binary options in obj\&. 
.SS "\fBvoid\fP av_opt_freep_ranges (\fBAVOptionRanges\fP ** ranges)"
Free an \fBAVOptionRanges\fP struct and set it to NULL\&. 
.SS "\fBint\fP av_opt_get_key_value (\fBconst\fP char ** ropts, \fBconst\fP char * key_val_sep, \fBconst\fP char * pairs_sep, unsigned flags, char ** rkey, char ** rval)"
Extract a key-value pair from the beginning of a string\&.
.PP
\fBParameters:\fP
.RS 4
\fIropts\fP pointer to the options string, will be updated to point to the rest of the string (one of the pairs_sep or the final NUL) 
.br
\fIkey_val_sep\fP a 0-terminated list of characters used to separate key from value, for example '=' 
.br
\fIpairs_sep\fP a 0-terminated list of characters used to separate two pairs from each other, for example ':' or ',' 
.br
\fIflags\fP flags; see the AV_OPT_FLAG_* values below 
.br
\fIrkey\fP parsed key; must be freed using \fBav_free()\fP 
.br
\fIrval\fP parsed value; must be freed using \fBav_free()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
>=0 for success, or a negative value corresponding to an AVERROR code in case of error; in particular: \fBAVERROR(EINVAL)\fP if no key is present 
.RE
.PP

.SS "\fBconst\fP \fBAVOption\fP* av_opt_next (\fBvoid\fP * obj, \fBconst\fP \fBAVOption\fP * prev)"
Iterate over all AVOptions belonging to obj\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP an AVOptions-enabled struct or a double pointer to an \fBAVClass\fP describing it\&. 
.br
\fIprev\fP result of the previous call to \fBav_opt_next()\fP on this object or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
next \fBAVOption\fP or NULL 
.RE
.PP

.SS "\fBvoid\fP* av_opt_ptr (\fBconst\fP \fBAVClass\fP * avclass, \fBvoid\fP * obj, \fBconst\fP char * name)"
Gets a pointer to the requested field in a struct\&. This function allows accessing a struct even when its fields are moved or renamed since the application making the access has been compiled,
.PP
\fBReturns:\fP
.RS 4
a pointer to the field, it can be cast to the correct type and read or written to\&. 
.RE
.PP

.SS "\fBint\fP av_opt_query_ranges (\fBAVOptionRanges\fP **, \fBvoid\fP * obj, \fBconst\fP char * key, \fBint\fP flags)"
Get a list of allowed ranges for the given option\&.
.PP
The returned list may depend on other fields in obj like for example profile\&.
.PP
\fBParameters:\fP
.RS 4
\fIflags\fP is a bitmask of flags, undefined flags should not be set and should be ignored AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a \fBAVClass\fP instead of a full instance
.RE
.PP
The result must be freed with av_opt_freep_ranges\&.
.PP
\fBReturns:\fP
.RS 4
>= 0 on success, a negative errro code otherwise 
.RE
.PP

.SS "\fBint\fP av_opt_query_ranges_default (\fBAVOptionRanges\fP **, \fBvoid\fP * obj, \fBconst\fP char * key, \fBint\fP flags)"
Get a default list of allowed ranges for the given option\&.
.PP
This list is constructed without using the \fBAVClass\&.query_ranges()\fP callback and can be used as fallback from within the callback\&.
.PP
\fBParameters:\fP
.RS 4
\fIflags\fP is a bitmask of flags, undefined flags should not be set and should be ignored AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a \fBAVClass\fP instead of a full instance
.RE
.PP
The result must be freed with av_opt_free_ranges\&.
.PP
\fBReturns:\fP
.RS 4
>= 0 on success, a negative errro code otherwise 
.RE
.PP

.SS "\fBvoid\fP av_opt_set_defaults (\fBvoid\fP * s)"
Set the values of all \fBAVOption\fP fields to their default values\&.
.PP
\fBParameters:\fP
.RS 4
\fIs\fP an AVOption-enabled struct (its first member must be a pointer to \fBAVClass\fP) 
.RE
.PP

.SS "\fBattribute_deprecated\fP \fBvoid\fP av_opt_set_defaults2 (\fBvoid\fP * s, \fBint\fP mask, \fBint\fP flags)"

.SS "\fBint\fP av_opt_set_dict (\fBvoid\fP * obj, struct \fBAVDictionary\fP ** options)"
Set all the options from a given dictionary on an object\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP a struct whose first element is a pointer to \fBAVClass\fP 
.br
\fIoptions\fP options to process\&. This dictionary will be freed and replaced by a new one containing all options not found in obj\&. Of course this new dictionary needs to be freed by caller with \fBav_dict_free()\fP\&.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, a negative AVERROR if some option was found in obj, but could not be set\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBav_dict_copy()\fP 
.RE
.PP

.SS "\fBint\fP av_opt_set_from_string (\fBvoid\fP * ctx, \fBconst\fP char * opts, \fBconst\fP char *\fBconst\fP * shorthand, \fBconst\fP char * key_val_sep, \fBconst\fP char * pairs_sep)"
Parse the key-value pairs list in opts\&. For each key=value pair found, set the value of the corresponding option in ctx\&.
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fBAVClass\fP object to set options on 
.br
\fIopts\fP the options string, key-value pairs separated by a delimiter 
.br
\fIshorthand\fP a NULL-terminated array of options names for shorthand notation: if the first field in opts has no key part, the key is taken from the first element of shorthand; then again for the second, etc\&., until either opts is finished, shorthand is finished or a named option is found; after that, all options must be named 
.br
\fIkey_val_sep\fP a 0-terminated list of characters used to separate key from value, for example '=' 
.br
\fIpairs_sep\fP a 0-terminated list of characters used to separate two pairs from each other, for example ':' or ',' 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of successfully set key=value pairs, or a negative value corresponding to an AVERROR code in case of error: \fBAVERROR(EINVAL)\fP if opts cannot be parsed, the error code issued by \fBav_set_string3()\fP if a key/value pair cannot be set
.RE
.PP
Options names must use only the following characters: a-z A-Z 0-9 - \&. / _ Separators must use characters distinct from option names and from each other\&. 
.SS "\fBint\fP av_opt_show2 (\fBvoid\fP * obj, \fBvoid\fP * av_log_obj, \fBint\fP req_flags, \fBint\fP rej_flags)"
Show the obj options\&.
.PP
\fBParameters:\fP
.RS 4
\fIreq_flags\fP requested flags for the options to show\&. Show only the options for which it is opt->flags & req_flags\&. 
.br
\fIrej_flags\fP rejected flags for the options to show\&. Show only the options for which it is !(opt->flags & req_flags)\&. 
.br
\fIav_log_obj\fP log context to use for showing the options 
.RE
.PP

.SS "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP* av_set_double (\fBvoid\fP * obj, \fBconst\fP char * name, double n)"

.SS "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP* av_set_int (\fBvoid\fP * obj, \fBconst\fP char * name, \fBint64_t\fP n)"

.SS "\fBint\fP av_set_options_string (\fBvoid\fP * ctx, \fBconst\fP char * opts, \fBconst\fP char * key_val_sep, \fBconst\fP char * pairs_sep)"
Parse the key/value pairs list in opts\&. For each key/value pair found, stores the value in the field in ctx that is named like the key\&. ctx must be an \fBAVClass\fP context, storing is done using AVOptions\&.
.PP
\fBParameters:\fP
.RS 4
\fIopts\fP options string to parse, may be NULL 
.br
\fIkey_val_sep\fP a 0-terminated list of characters used to separate key from value 
.br
\fIpairs_sep\fP a 0-terminated list of characters used to separate two pairs from each other 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of successfully set key/value pairs, or a negative value corresponding to an AVERROR code in case of error: \fBAVERROR(EINVAL)\fP if opts cannot be parsed, the error code issued by \fBav_set_string3()\fP if a key/value pair cannot be set 
.RE
.PP

.SS "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP* av_set_q (\fBvoid\fP * obj, \fBconst\fP char * name, \fBAVRational\fP n)"

.SS "\fBattribute_deprecated\fP \fBint\fP av_set_string3 (\fBvoid\fP * obj, \fBconst\fP char * name, \fBconst\fP char * val, \fBint\fP alloc, \fBconst\fP \fBAVOption\fP ** o_out)"
Set the field of obj with the given name to value\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A struct whose first element is a pointer to an \fBAVClass\fP\&. 
.br
\fIname\fP the name of the field to set 
.br
\fIval\fP The value to set\&. If the field is not of a string type, then the given string is parsed\&. SI postfixes and some named scalars are supported\&. If the field is of a numeric type, it has to be a numeric or named scalar\&. Behavior with more than one scalar and +- infix operators is undefined\&. If the field is of a flags type, it has to be a sequence of numeric scalars or named flags separated by '+' or '-'\&. Prefixing a flag with '+' causes it to be set without affecting the other flags; similarly, '-' unsets a flag\&. 
.br
\fIo_out\fP if non-NULL put here a pointer to the \fBAVOption\fP found 
.br
\fIalloc\fP this parameter is currently ignored 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if the value has been set, or an AVERROR code in case of error: AVERROR_OPTION_NOT_FOUND if no matching option exists \fBAVERROR(ERANGE)\fP if the value is out of range \fBAVERROR(EINVAL)\fP if the value is not valid 
.RE
.PP
\fBDeprecated\fP
.RS 4
use \fBav_opt_set()\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
