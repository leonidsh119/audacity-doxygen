.TH "Vamp::PluginHostAdapter" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vamp::PluginHostAdapter \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vamp\-hostsdk/PluginHostAdapter\&.h>\fP
.PP
Inherits \fBVamp::Plugin\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPluginHostAdapter\fP (\fBconst\fP \fBVampPluginDescriptor\fP *descriptor, float inputSampleRate)"
.br
.ti -1c
.RI "virtual \fB~PluginHostAdapter\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBinitialise\fP (size_t channels, size_t stepSize, size_t blockSize)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset\fP ()"
.br
.ti -1c
.RI "\fBInputDomain\fP \fBgetInputDomain\fP () \fBconst\fP "
.br
.ti -1c
.RI "unsigned \fBint\fP \fBgetVampApiVersion\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetIdentifier\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetName\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetDescription\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetMaker\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBint\fP \fBgetPluginVersion\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetCopyright\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBParameterList\fP \fBgetParameterDescriptors\fP () \fBconst\fP "
.br
.ti -1c
.RI "float \fBgetParameter\fP (\fBstd::string\fP) \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBsetParameter\fP (\fBstd::string\fP, float)"
.br
.ti -1c
.RI "\fBProgramList\fP \fBgetPrograms\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBstd::string\fP \fBgetCurrentProgram\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBvoid\fP \fBselectProgram\fP (\fBstd::string\fP)"
.br
.ti -1c
.RI "size_t \fBgetPreferredStepSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetPreferredBlockSize\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetMinChannelCount\fP () \fBconst\fP "
.br
.ti -1c
.RI "size_t \fBgetMaxChannelCount\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBOutputList\fP \fBgetOutputDescriptors\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBFeatureSet\fP \fBprocess\fP (\fBconst\fP float *\fBconst\fP *inputBuffers, \fBRealTime\fP timestamp)"
.br
.ti -1c
.RI "\fBFeatureSet\fP \fBgetRemainingFeatures\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::vector< \fBstd::string\fP > \fBgetPluginPath\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBconvertFeatures\fP (\fBVampFeatureList\fP *, \fBFeatureSet\fP &)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBVampPluginDescriptor\fP * \fBm_descriptor\fP"
.br
.ti -1c
.RI "\fBVampPluginHandle\fP \fBm_handle\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBPluginHostAdapter\fP is a wrapper class that a \fBVamp\fP host can use to make the C-language VampPluginDescriptor object appear as a C++ \fBVamp::Plugin\fP object\&.
.PP
The \fBVamp\fP API is defined in \fBvamp/vamp\&.h\fP as a C API\&. The C++ objects used for convenience by plugins and hosts actually communicate using the C low-level API, but the details of this communication are handled seamlessly by the \fBVamp\fP SDK implementation provided the plugin and host use the proper C++ wrapper objects\&.
.PP
See also \fBPluginAdapter\fP, the plugin-side wrapper that makes a C++ plugin object available using the C query API\&. 
.PP
Definition at line 68 of file PluginHostAdapter\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Vamp::PluginHostAdapter::PluginHostAdapter (\fBconst\fP \fBVampPluginDescriptor\fP * descriptor, float inputSampleRate)"

.PP
Definition at line 49 of file PluginHostAdapter\&.cpp\&.
.SS "Vamp::PluginHostAdapter::~PluginHostAdapter ()\fC [virtual]\fP"

.PP
Definition at line 61 of file PluginHostAdapter\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP Vamp::PluginHostAdapter::convertFeatures (\fBVampFeatureList\fP * features, \fBFeatureSet\fP & fs)\fC [protected]\fP"

.PP
Definition at line 405 of file PluginHostAdapter\&.cpp\&.
.SS "\fBstd::string\fP Vamp::PluginHostAdapter::getCopyright () const\fC [virtual]\fP"
Get the copyright statement or licensing summary for the plugin\&. This can be an informative text, without the same presentation constraints as mentioned for getMaker above\&. 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 191 of file PluginHostAdapter\&.cpp\&.
.SS "\fBstd::string\fP Vamp::PluginHostAdapter::getCurrentProgram () const\fC [virtual]\fP"
Get the current program\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 263 of file PluginHostAdapter\&.cpp\&.
.SS "\fBstd::string\fP Vamp::PluginHostAdapter::getDescription () const\fC [virtual]\fP"
Get a human-readable description for the plugin, typically a line of text that may optionally be displayed in addition to the plugin's 'name'\&. May be empty if the name has said it all already\&.
.PP
Example: 'Detect and count zero crossing points' 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 173 of file PluginHostAdapter\&.cpp\&.
.SS "\fBstd::string\fP Vamp::PluginHostAdapter::getIdentifier () const\fC [virtual]\fP"
Get the computer-usable name of the plugin\&. This should be reasonably short and contain no whitespace or punctuation characters\&. It may only contain the characters [a-zA-Z0-9_-]\&. This is the authoritative way for a program to identify a plugin within a given library\&.
.PP
This text may be visible to the user, but it should not be the main text used to identify a plugin to the user (that will be the name, below)\&.
.PP
Example: 'zero_crossings' 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 161 of file PluginHostAdapter\&.cpp\&.
.SS "\fBPluginHostAdapter::InputDomain\fP Vamp::PluginHostAdapter::getInputDomain () const\fC [virtual]\fP"
Get the plugin's required input domain\&.
.PP
If this is TimeDomain, the samples provided to the \fBprocess()\fP function (below) will be in the time domain, as for a traditional audio processing plugin\&.
.PP
If this is FrequencyDomain, the host will carry out a windowed \fBFFT\fP of size equal to the negotiated block size on the data before passing the frequency bin data in to \fBprocess()\fP\&. The input data for the \fBFFT\fP will be rotated so as to place the origin in the centre of the block\&. The plugin does not get to choose the window type -- the host will either let the user do so, or will use a Hanning window\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 145 of file PluginHostAdapter\&.cpp\&.
.SS "\fBstd::string\fP Vamp::PluginHostAdapter::getMaker () const\fC [virtual]\fP"
Get the name of the author or vendor of the plugin in human-readable form\&. This should be a short identifying text, as it may be used to label plugins from the same source in a menu or similar\&. 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 179 of file PluginHostAdapter\&.cpp\&.
.SS "size_t Vamp::PluginHostAdapter::getMaxChannelCount () const\fC [virtual]\fP"
Get the maximum supported number of input channels\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 310 of file PluginHostAdapter\&.cpp\&.
.SS "size_t Vamp::PluginHostAdapter::getMinChannelCount () const\fC [virtual]\fP"
Get the minimum supported number of input channels\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 303 of file PluginHostAdapter\&.cpp\&.
.SS "\fBstd::string\fP Vamp::PluginHostAdapter::getName () const\fC [virtual]\fP"
Get a human-readable name or title of the plugin\&. This should be brief and self-contained, as it may be used to identify the plugin to the user in isolation (i\&.e\&. without also showing the plugin's 'identifier')\&.
.PP
Example: 'Zero Crossings' 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 167 of file PluginHostAdapter\&.cpp\&.
.SS "\fBPluginHostAdapter::OutputList\fP Vamp::PluginHostAdapter::getOutputDescriptors () const\fC [virtual]\fP"
Get the outputs of this plugin\&. An output's index in this list is used as its numeric index when looking it up in the FeatureSet returned from the \fBprocess()\fP call\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 317 of file PluginHostAdapter\&.cpp\&.
.SS "float Vamp::PluginHostAdapter::getParameter (\fBstd::string\fP) const\fC [virtual]\fP"
Get the value of a named parameter\&. The argument is the identifier field from that parameter's descriptor\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 223 of file PluginHostAdapter\&.cpp\&.
.SS "\fBPluginHostAdapter::ParameterList\fP Vamp::PluginHostAdapter::getParameterDescriptors () const\fC [virtual]\fP"
Get the controllable parameters of this plugin\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 197 of file PluginHostAdapter\&.cpp\&.
.SS "std::vector< \fBstd::string\fP > Vamp::PluginHostAdapter::getPluginPath ()\fC [static]\fP"

.PP
Definition at line 68 of file PluginHostAdapter\&.cpp\&.
.SS "\fBint\fP Vamp::PluginHostAdapter::getPluginVersion () const\fC [virtual]\fP"
Get the version number of the plugin\&. 
.PP
Implements \fBVamp::PluginBase\fP\&.
.PP
Definition at line 185 of file PluginHostAdapter\&.cpp\&.
.SS "size_t Vamp::PluginHostAdapter::getPreferredBlockSize () const\fC [virtual]\fP"
Get the preferred block size (window size -- the number of sample frames passed in each block to the \fBprocess()\fP function)\&. This should be called before \fBinitialise()\fP\&.
.PP
A plugin that can handle any block size may return 0\&. The final block size will be set in the \fBinitialise()\fP call\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 296 of file PluginHostAdapter\&.cpp\&.
.SS "size_t Vamp::PluginHostAdapter::getPreferredStepSize () const\fC [virtual]\fP"
Get the preferred step size (window increment -- the distance in sample frames between the start frames of consecutive blocks passed to the \fBprocess()\fP function) for the plugin\&. This should be called before \fBinitialise()\fP\&.
.PP
A plugin may return 0 if it has no particular interest in the step size\&. In this case, the host should make the step size equal to the block size if the plugin is accepting input in the time domain\&. If the plugin is accepting input in the frequency domain, the host may use any step size\&. The final step size will be set in the \fBinitialise()\fP call\&. 
.PP
Reimplemented from \fBVamp::Plugin\fP\&.
.PP
Definition at line 289 of file PluginHostAdapter\&.cpp\&.
.SS "\fBPluginHostAdapter::ProgramList\fP Vamp::PluginHostAdapter::getPrograms () const\fC [virtual]\fP"
Get the program settings available in this plugin\&. A program is a named shorthand for a set of parameter values; changing the program may cause the plugin to alter the values of its published parameters (and/or non-public internal processing parameters)\&. The host should re-read the plugin's parameter values after setting a new program\&.
.PP
The programs must have unique names\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 251 of file PluginHostAdapter\&.cpp\&.
.SS "\fBPluginHostAdapter::FeatureSet\fP Vamp::PluginHostAdapter::getRemainingFeatures ()\fC [virtual]\fP"
After all blocks have been processed, calculate and return any remaining features derived from the complete input\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 392 of file PluginHostAdapter\&.cpp\&.
.SS "unsigned \fBint\fP Vamp::PluginHostAdapter::getVampApiVersion () const\fC [virtual]\fP"
Get the \fBVamp\fP API compatibility level of the plugin\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 155 of file PluginHostAdapter\&.cpp\&.
.SS "\fBbool\fP Vamp::PluginHostAdapter::initialise (size_t inputChannels, size_t stepSize, size_t blockSize)\fC [virtual]\fP"
Initialise a plugin to prepare it for use with the given number of input channels, step size (window increment, in sample frames) and block size (window size, in sample frames)\&.
.PP
The input sample rate should have been already specified at construction time\&.
.PP
Return true for successful initialisation, false if the number of input channels, step size and/or block size cannot be supported\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 124 of file PluginHostAdapter\&.cpp\&.
.SS "\fBPluginHostAdapter::FeatureSet\fP Vamp::PluginHostAdapter::process (\fBconst\fP float *\fBconst\fP * inputBuffers, \fBRealTime\fP timestamp)\fC [virtual]\fP"
Process a single block of input data\&.
.PP
If the plugin's inputDomain is TimeDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize consecutive audio samples (the host will zero-pad as necessary)\&. The timestamp in this case will be the real time in seconds of the start of the supplied block of samples\&.
.PP
If the plugin's inputDomain is FrequencyDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize/2+1 consecutive pairs of real and imaginary component floats corresponding to bins 0\&.\&.(blockSize/2) of the \fBFFT\fP output\&. That is, bin 0 (the first pair of floats) contains the DC output, up to bin blockSize/2 which contains the Nyquist-frequency output\&. There will therefore be blockSize+2 floats per channel in total\&. The timestamp will be the real time in seconds of the centre of the \fBFFT\fP input window (i\&.e\&. the very first block passed to process might contain the \fBFFT\fP of half a block of zero samples and the first half-block of the actual data, with a timestamp of zero)\&.
.PP
Return any features that have become available after this process call\&. (These do not necessarily have to fall within the process block, except for OneSamplePerStep outputs\&.) 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 373 of file PluginHostAdapter\&.cpp\&.
.SS "\fBvoid\fP Vamp::PluginHostAdapter::reset ()\fC [virtual]\fP"
Reset the plugin after use, to prepare it for another clean run\&. Not called for the first initialisation (i\&.e\&. initialise must also do a reset)\&. 
.PP
Implements \fBVamp::Plugin\fP\&.
.PP
Definition at line 134 of file PluginHostAdapter\&.cpp\&.
.SS "\fBvoid\fP Vamp::PluginHostAdapter::selectProgram (\fBstd::string\fP)\fC [virtual]\fP"
Select a program\&. (If the given program name is not one of the available programs, do nothing\&.) 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 276 of file PluginHostAdapter\&.cpp\&.
.SS "\fBvoid\fP Vamp::PluginHostAdapter::setParameter (\fBstd::string\fP, float)\fC [virtual]\fP"
Set a named parameter\&. The first argument is the identifier field from that parameter's descriptor\&. 
.PP
Reimplemented from \fBVamp::PluginBase\fP\&.
.PP
Definition at line 237 of file PluginHostAdapter\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBconst\fP \fBVampPluginDescriptor\fP* Vamp::PluginHostAdapter::m_descriptor\fC [protected]\fP"

.PP
Definition at line 113 of file PluginHostAdapter\&.h\&.
.SS "\fBVampPluginHandle\fP Vamp::PluginHostAdapter::m_handle\fC [protected]\fP"

.PP
Definition at line 114 of file PluginHostAdapter\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
