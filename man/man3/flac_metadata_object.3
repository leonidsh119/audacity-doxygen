.TH "flac_metadata_object" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
flac_metadata_object \- FLAC/metadata\&.h: metadata object methods
.PP
This module contains methods for manipulating \fBFLAC\fP metadata objects\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamMetadata\fP * \fBFLAC__metadata_object_new\fP (\fBFLAC__MetadataType\fP type)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamMetadata\fP * \fBFLAC__metadata_object_clone\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *object)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBvoid\fP \fBFLAC__metadata_object_delete\fP (\fBFLAC__StreamMetadata\fP *object)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_is_equal\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *block1, \fBconst\fP \fBFLAC__StreamMetadata\fP *block2)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_application_set_data\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__byte\fP *\fBdata\fP, unsigned \fBlength\fP, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_resize_points\fP (\fBFLAC__StreamMetadata\fP *object, unsigned new_num_points)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBvoid\fP \fBFLAC__metadata_object_seektable_set_point\fP (\fBFLAC__StreamMetadata\fP *object, unsigned point_num, \fBFLAC__StreamMetadata_SeekPoint\fP point)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_insert_point\fP (\fBFLAC__StreamMetadata\fP *object, unsigned point_num, \fBFLAC__StreamMetadata_SeekPoint\fP point)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_delete_point\fP (\fBFLAC__StreamMetadata\fP *object, unsigned point_num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_is_legal\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *object)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_template_append_placeholders\fP (\fBFLAC__StreamMetadata\fP *object, unsigned num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_template_append_point\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__uint64\fP sample_number)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_template_append_points\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__uint64\fP sample_numbers[], unsigned num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_template_append_spaced_points\fP (\fBFLAC__StreamMetadata\fP *object, unsigned num, \fBFLAC__uint64\fP total_samples)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_template_append_spaced_points_by_samples\fP (\fBFLAC__StreamMetadata\fP *object, unsigned \fBsamples\fP, \fBFLAC__uint64\fP total_samples)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_seektable_template_sort\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__bool\fP compact)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_set_vendor_string\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_resize_comments\fP (\fBFLAC__StreamMetadata\fP *object, unsigned new_num_comments)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_set_comment\fP (\fBFLAC__StreamMetadata\fP *object, unsigned comment_num, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_insert_comment\fP (\fBFLAC__StreamMetadata\fP *object, unsigned comment_num, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_append_comment\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_replace_comment\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP all, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_delete_comment\fP (\fBFLAC__StreamMetadata\fP *object, unsigned comment_num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_entry_from_name_value_pair\fP (\fBFLAC__StreamMetadata_VorbisComment_Entry\fP *entry, \fBconst\fP char *field_name, \fBconst\fP char *field_value)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_entry_to_name_value_pair\fP (\fBconst\fP \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, char **field_name, char **field_value)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_vorbiscomment_entry_matches\fP (\fBconst\fP \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBconst\fP char *field_name, unsigned field_name_length)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBint\fP \fBFLAC__metadata_object_vorbiscomment_find_entry_from\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *object, unsigned \fBoffset\fP, \fBconst\fP char *field_name)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBint\fP \fBFLAC__metadata_object_vorbiscomment_remove_entry_matching\fP (\fBFLAC__StreamMetadata\fP *object, \fBconst\fP char *field_name)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBint\fP \fBFLAC__metadata_object_vorbiscomment_remove_entries_matching\fP (\fBFLAC__StreamMetadata\fP *object, \fBconst\fP char *field_name)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamMetadata_CueSheet_Track\fP * \fBFLAC__metadata_object_cuesheet_track_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__StreamMetadata_CueSheet_Track\fP * \fBFLAC__metadata_object_cuesheet_track_clone\fP (\fBconst\fP \fBFLAC__StreamMetadata_CueSheet_Track\fP *object)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBvoid\fP \fBFLAC__metadata_object_cuesheet_track_delete\fP (\fBFLAC__StreamMetadata_CueSheet_Track\fP *object)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_track_resize_indices\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num, unsigned new_num_indices)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_track_insert_index\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num, unsigned index_num, \fBFLAC__StreamMetadata_CueSheet_Index\fP index)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_track_insert_blank_index\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num, unsigned index_num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_track_delete_index\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num, unsigned index_num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_resize_tracks\fP (\fBFLAC__StreamMetadata\fP *object, unsigned new_num_tracks)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_set_track\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num, \fBFLAC__StreamMetadata_CueSheet_Track\fP *track, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_insert_track\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num, \fBFLAC__StreamMetadata_CueSheet_Track\fP *track, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_insert_blank_track\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_delete_track\fP (\fBFLAC__StreamMetadata\fP *object, unsigned track_num)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_cuesheet_is_legal\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *object, \fBFLAC__bool\fP check_cd_da_subset, \fBconst\fP char **violation)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__uint32\fP \fBFLAC__metadata_object_cuesheet_calculate_cddb_id\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *object)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_picture_set_mime_type\fP (\fBFLAC__StreamMetadata\fP *object, char *mime_type, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_picture_set_description\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__byte\fP *description, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_picture_set_data\fP (\fBFLAC__StreamMetadata\fP *object, \fBFLAC__byte\fP *\fBdata\fP, \fBFLAC__uint32\fP \fBlength\fP, \fBFLAC__bool\fP copy)"
.br
.ti -1c
.RI "\fBFLAC_API\fP \fBFLAC__bool\fP \fBFLAC__metadata_object_picture_is_legal\fP (\fBconst\fP \fBFLAC__StreamMetadata\fP *object, \fBconst\fP char **violation)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This module contains methods for manipulating \fBFLAC\fP metadata objects\&. 

Since many are variable length we have to be careful about the memory management\&. We decree that all pointers to data in the object are owned by the object and memory-managed by the object\&.
.PP
Use the \fBFLAC__metadata_object_new()\fP and \fBFLAC__metadata_object_delete()\fP functions to create all instances\&. When using the FLAC__metadata_object_set_*() functions to set pointers to data, set \fIcopy\fP to \fCtrue\fP to have the function make it's own copy of the data, or to \fCfalse\fP to give the object ownership of your data\&. In the latter case your pointer must be freeable by free() and will be free()d when the object is \fBFLAC__metadata_object_delete()\fPd\&. It is legal to pass a null pointer as the data pointer to a FLAC__metadata_object_set_*() function as long as the length argument is 0 and the \fIcopy\fP argument is \fCfalse\fP\&.
.PP
The \fBFLAC__metadata_object_new()\fP and \fBFLAC__metadata_object_clone()\fP function will return \fCNULL\fP in the case of a memory allocation error, otherwise a new object\&. The FLAC__metadata_object_set_*() functions return \fCfalse\fP in the case of a memory allocation error\&.
.PP
We don't have the convenience of C++ here, so note that the library relies on you to keep the types straight\&. In other words, if you pass, for example, a FLAC__StreamMetadata* that represents a STREAMINFO block to \fBFLAC__metadata_object_application_set_data()\fP, you will get an assertion failure\&.
.PP
For convenience the FLAC__metadata_object_vorbiscomment_*() functions maintain a trailing NUL on each Vorbis comment entry\&. This is not counted toward the length or stored in the stream, but it can make working with plain comments (those that don't contain embedded-NULs in the value) easier\&. Entries passed into these functions have trailing NULs added if missing, and returned entries are guaranteed to have a trailing NUL\&.
.PP
The FLAC__metadata_object_vorbiscomment_*() functions that take a Vorbis comment entry/name/value will first validate that it complies with the Vorbis comment specification and return false if it does not\&.
.PP
There is no need to recalculate the length field on metadata blocks you have modified\&. They will be calculated automatically before they are written back to a file\&. 
.SH "Function Documentation"
.PP 
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_application_set_data (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__byte\fP * data, unsigned length, \fBFLAC__bool\fP copy)"
Sets the application data of an APPLICATION block\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the data is stored; otherwise, the object takes ownership of the pointer\&. The existing data will be freed if this function is successful, otherwise the original data will remain if \fIcopy\fP is \fCtrue\fP and malloc() fails\&.
.PP
\fBNote:\fP
.RS 4
It is safe to pass a const pointer to \fIdata\fP if \fIcopy\fP is \fCtrue\fP\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing APPLICATION object\&. 
.br
\fIdata\fP A pointer to the data to set\&. 
.br
\fIlength\fP The length of \fIdata\fP in bytes\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_APPLICATION 

.fi
.PP
 
.PP
.nf
1  (data != NULL && length > 0) ||
2 (data == NULL && length == 0 && copy == false) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 909 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamMetadata\fP* FLAC__metadata_object_clone (\fBconst\fP \fBFLAC__StreamMetadata\fP * object)"
Create a copy of an existing metadata object\&.
.PP
The copy is a 'deep' copy, i\&.e\&. dynamically allocated data within the object is also copied\&. The caller takes ownership of the new block and is responsible for freeing it with \fBFLAC__metadata_object_delete()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP Pointer to object to copy\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamMetadata*\fP \fCNULL\fP if there was an error allocating memory, else the new instance\&. 
.RE
.PP

.PP
Definition at line 530 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__uint32\fP FLAC__metadata_object_cuesheet_calculate_cddb_id (\fBconst\fP \fBFLAC__StreamMetadata\fP * object)"
Calculate and return the CDDB/freedb ID for a cue sheet\&. The function assumes the cue sheet corresponds to a CD; the result is undefined if the cuesheet's is_cd bit is not set\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__uint32\fP The unsigned integer representation of the CDDB/freedb ID 
.RE
.PP

.PP
Definition at line 1704 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_delete_track (\fBFLAC__StreamMetadata\fP * object, unsigned track_num)"
Delete a track in a CUESHEET block at the given index\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index into the track array of the track to delete\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks > track_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if realloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1649 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_insert_blank_track (\fBFLAC__StreamMetadata\fP * object, unsigned track_num)"
Insert a blank track in a CUESHEET block at the given index\&.
.PP
A blank track is one in which all field values are zero\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index at which to insert the track\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. The tracks at and after \fItrack_num\fP move right one position\&. To append a track to the end, set \fItrack_num\fP to \fCobject->data\&.cue_sheet\&.num_tracks\fP \&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks >= track_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1642 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_insert_track (\fBFLAC__StreamMetadata\fP * object, unsigned track_num, \fBFLAC__StreamMetadata_CueSheet_Track\fP * track, \fBFLAC__bool\fP copy)"
Insert a track in a CUESHEET block at the given index\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the track is stored; otherwise, the object takes ownership of the \fItrack\fP pointer\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index at which to insert the track\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. The tracks at and after \fItrack_num\fP move right one position\&. To append a track to the end, set \fItrack_num\fP to \fCobject->data\&.cue_sheet\&.num_tracks\fP \&. 
.br
\fItrack\fP The track to insert\&. You may safely pass in a const pointer if \fIcopy\fP is \fCtrue\fP\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks >= track_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1621 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_is_legal (\fBconst\fP \fBFLAC__StreamMetadata\fP * object, \fBFLAC__bool\fP check_cd_da_subset, \fBconst\fP char ** violation)"
Check a cue sheet to see if it conforms to the \fBFLAC\fP specification\&. See the format specification for limits on the contents of the cue sheet\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fIcheck_cd_da_subset\fP If \fCtrue\fP, check CUESHEET against more stringent requirements for a CD-DA (audio) disc\&. 
.br
\fIviolation\fP Address of a pointer to a string\&. If there is a violation, a pointer to a string explanation of the violation will be returned here\&. \fIviolation\fP may be \fCNULL\fP if you don't need the returned string\&. Do not free the returned string; it will always point to static data\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if cue sheet is illegal, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1671 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_resize_tracks (\fBFLAC__StreamMetadata\fP * object, unsigned new_num_tracks)"
Resize the track array\&.
.PP
If the size shrinks, elements will truncated; if it grows, new blank tracks will be added to the end\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fInew_num_tracks\fP The desired length of the array; may be \fC0\fP\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1  (object->data\&.cue_sheet\&.tracks == NULL && object->data\&.cue_sheet\&.num_tracks == 0) ||
2 (object->data\&.cue_sheet\&.tracks != NULL && object->data\&.cue_sheet\&.num_tracks > 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation error, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1565 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_set_track (\fBFLAC__StreamMetadata\fP * object, unsigned track_num, \fBFLAC__StreamMetadata_CueSheet_Track\fP * track, \fBFLAC__bool\fP copy)"
Sets a track in a CUESHEET block\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the track is stored; otherwise, the object takes ownership of the \fItrack\fP pointer\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP Index into track array to set\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. 
.br
\fItrack\fP The track to set the track to\&. You may safely pass in a const pointer if \fIcopy\fP is \fCtrue\fP\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 track_num < object->data\&.cue_sheet\&.num_tracks 

.fi
.PP
 
.PP
.nf
1  (track->indices != NULL && track->num_indices > 0) ||
2 (track->indices == NULL && track->num_indices == 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1613 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamMetadata_CueSheet_Track\fP* FLAC__metadata_object_cuesheet_track_clone (\fBconst\fP \fBFLAC__StreamMetadata_CueSheet_Track\fP * object)"
Create a copy of an existing CUESHEET track object\&.
.PP
The copy is a 'deep' copy, i\&.e\&. dynamically allocated data within the object is also copied\&. The caller takes ownership of the new object and is responsible for freeing it with \fBFLAC__metadata_object_cuesheet_track_delete()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP Pointer to object to copy\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamMetadata_CueSheet_Track*\fP \fCNULL\fP if there was an error allocating memory, else the new instance\&. 
.RE
.PP

.PP
Definition at line 1441 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBvoid\fP FLAC__metadata_object_cuesheet_track_delete (\fBFLAC__StreamMetadata_CueSheet_Track\fP * object)"
Delete a CUESHEET track object
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET track object\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.RE
.PP

.PP
Definition at line 1467 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_track_delete_index (\fBFLAC__StreamMetadata\fP * object, unsigned track_num, unsigned index_num)"
Delete an index point in a CUESHEET track at the given index\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index into the track array of the track to modify\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. 
.br
\fIindex_num\fP The index into the track's index array of the index to delete\&. NOTE: this is not necessarily the same as the index's \fInumber\fP field\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks > track_num 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.tracks[track_num]\&.num_indices > index_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if realloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1546 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_track_insert_blank_index (\fBFLAC__StreamMetadata\fP * object, unsigned track_num, unsigned index_num)"
Insert a blank index point in a CUESHEET track at the given index\&.
.PP
A blank index point is one in which all field values are zero\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index of the track to modify\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. 
.br
\fIindex_num\fP The index into the track's index array at which to insert the index point\&. NOTE: this is not necessarily the same as the index point's \fInumber\fP field\&. The indices at and after \fIindex_num\fP move right one position\&. To append an index point to the end, set \fIindex_num\fP to \fCobject->data\&.cue_sheet\&.tracks\fP[track_num]\&.num_indices \&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks > track_num 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.tracks[track_num]\&.num_indices >= index_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if realloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1539 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_track_insert_index (\fBFLAC__StreamMetadata\fP * object, unsigned track_num, unsigned index_num, \fBFLAC__StreamMetadata_CueSheet_Index\fP index)"
Insert an index point in a CUESHEET track at the given index\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index of the track to modify\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. 
.br
\fIindex_num\fP The index into the track's index array at which to insert the index point\&. NOTE: this is not necessarily the same as the index point's \fInumber\fP field\&. The indices at and after \fIindex_num\fP move right one position\&. To append an index point to the end, set \fIindex_num\fP to \fCobject->data\&.cue_sheet\&.tracks\fP[track_num]\&.num_indices \&. 
.br
\fIindex\fP The index point to insert\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks > track_num 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.tracks[track_num]\&.num_indices >= index_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if realloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1517 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamMetadata_CueSheet_Track\fP* FLAC__metadata_object_cuesheet_track_new (\fBvoid\fP)"
Create a new CUESHEET track instance\&.
.PP
The object will be 'empty'; i\&.e\&. values and data pointers will be \fC0\fP\&.
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamMetadata_CueSheet_Track*\fP \fCNULL\fP if there was an error allocating memory, else the new instance\&. 
.RE
.PP

.PP
Definition at line 1436 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_cuesheet_track_resize_indices (\fBFLAC__StreamMetadata\fP * object, unsigned track_num, unsigned new_num_indices)"
Resize a track's index point array\&.
.PP
If the size shrinks, elements will truncated; if it grows, new blank indices will be added to the end\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing CUESHEET object\&. 
.br
\fItrack_num\fP The index of the track to modify\&. NOTE: this is not necessarily the same as the track's \fInumber\fP field\&. 
.br
\fInew_num_indices\fP The desired length of the array; may be \fC0\fP\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_CUESHEET 

.fi
.PP
 
.PP
.nf
1 object->data\&.cue_sheet\&.num_tracks > track_num 

.fi
.PP
 
.PP
.nf
1  (object->data\&.cue_sheet\&.tracks[track_num]\&.indices == NULL && object->data\&.cue_sheet\&.tracks[track_num]\&.num_indices == 0) ||
2 (object->data\&.cue_sheet\&.tracks[track_num]\&.indices != NULL && object->data\&.cue_sheet\&.tracks[track_num]\&.num_indices > 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation error, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1473 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBvoid\fP FLAC__metadata_object_delete (\fBFLAC__StreamMetadata\fP * object)"
Free a metadata object\&. Deletes the object pointed to by \fIobject\fP\&.
.PP
The delete is a 'deep' delete, i\&.e\&. dynamically allocated data within the object is also deleted\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing object\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.RE
.PP

.PP
Definition at line 696 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_is_equal (\fBconst\fP \fBFLAC__StreamMetadata\fP * block1, \fBconst\fP \fBFLAC__StreamMetadata\fP * block2)"
Compares two metadata objects\&.
.PP
The compare is 'deep', i\&.e\&. dynamically allocated data within the object is also compared\&.
.PP
\fBParameters:\fP
.RS 4
\fIblock1\fP A pointer to an existing object\&. 
.br
\fIblock2\fP A pointer to an existing object\&.  
.PP
.nf
1 block1 != NULL 

.fi
.PP
 
.PP
.nf
1 block2 != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCtrue\fP if objects are identical, else \fCfalse\fP\&. 
.RE
.PP

.PP
Definition at line 875 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__StreamMetadata\fP* FLAC__metadata_object_new (\fBFLAC__MetadataType\fP type)"
Create a new metadata object instance of the given type\&.
.PP
The object will be 'empty'; i\&.e\&. values and data pointers will be \fC0\fP, with the exception of FLAC__METADATA_TYPE_VORBIS_COMMENT, which will have the vendor string set (but zero comments)\&.
.PP
Do not pass in a value greater than or equal to \fIFLAC__METADATA_TYPE_UNDEFINED\fP unless you really know what you're doing\&.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP Type of object to create 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__StreamMetadata*\fP \fCNULL\fP if there was an error allocating memory or the type code is greater than FLAC__MAX_METADATA_TYPE_CODE, else the new instance\&. 
.RE
.PP

.PP
Definition at line 439 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_picture_is_legal (\fBconst\fP \fBFLAC__StreamMetadata\fP * object, \fBconst\fP char ** violation)"
Check a PICTURE block to see if it conforms to the \fBFLAC\fP specification\&. See the format specification for limits on the contents of the PICTURE block\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to existing PICTURE block to be checked\&. 
.br
\fIviolation\fP Address of a pointer to a string\&. If there is a violation, a pointer to a string explanation of the violation will be returned here\&. \fIviolation\fP may be \fCNULL\fP if you don't need the returned string\&. Do not free the returned string; it will always point to static data\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_PICTURE 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if PICTURE block is illegal, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1818 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_picture_set_data (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__byte\fP * data, \fBFLAC__uint32\fP length, \fBFLAC__bool\fP copy)"
Sets the picture data of a PICTURE block\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the data is stored; otherwise, the object takes ownership of the pointer\&. Also sets the \fIdata_length\fP field of the metadata object to what is passed in as the \fIlength\fP parameter\&. The existing data will be freed if this function is successful, otherwise the original data and data_length will remain if \fIcopy\fP is \fCtrue\fP and malloc() fails\&.
.PP
\fBNote:\fP
.RS 4
It is safe to pass a const pointer to \fIdata\fP if \fIcopy\fP is \fCtrue\fP\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing PICTURE object\&. 
.br
\fIdata\fP A pointer to the data to set\&. 
.br
\fIlength\fP The length of \fIdata\fP in bytes\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_PICTURE 

.fi
.PP
 
.PP
.nf
1  (data != NULL && length > 0) ||
2 (data == NULL && length == 0 && copy == false) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1790 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_picture_set_description (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__byte\fP * description, \fBFLAC__bool\fP copy)"
Sets the description of a PICTURE block\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the string is stored; otherwise, the object takes ownership of the pointer\&. The existing string will be freed if this function is successful, otherwise the original string will remain if \fIcopy\fP is \fCtrue\fP and malloc() fails\&.
.PP
\fBNote:\fP
.RS 4
It is safe to pass a const pointer to \fIdescription\fP if \fIcopy\fP is \fCtrue\fP\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing PICTURE object\&. 
.br
\fIdescription\fP A pointer to the description string\&. The string must be valid UTF-8, NUL-terminated\&. No validation is done\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_PICTURE 

.fi
.PP
 
.PP
.nf
1 (description != NULL) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1758 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_picture_set_mime_type (\fBFLAC__StreamMetadata\fP * object, char * mime_type, \fBFLAC__bool\fP copy)"
Sets the MIME type of a PICTURE block\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the string is stored; otherwise, the object takes ownership of the pointer\&. The existing string will be freed if this function is successful, otherwise the original string will remain if \fIcopy\fP is \fCtrue\fP and malloc() fails\&.
.PP
\fBNote:\fP
.RS 4
It is safe to pass a const pointer to \fImime_type\fP if \fIcopy\fP is \fCtrue\fP\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing PICTURE object\&. 
.br
\fImime_type\fP A pointer to the MIME type string\&. The string must be ASCII characters 0x20-0x7e, NUL-terminated\&. No validation is done\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_PICTURE 

.fi
.PP
 
.PP
.nf
1 (mime_type != NULL) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if \fIcopy\fP is \fCtrue\fP and malloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1726 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_delete_point (\fBFLAC__StreamMetadata\fP * object, unsigned point_num)"
Delete a seekpoint from a seektable\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fIpoint_num\fP Index into seekpoint array to set\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.PP
.nf
1 object->data\&.seek_table\&.num_points > point_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation error, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1010 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_insert_point (\fBFLAC__StreamMetadata\fP * object, unsigned point_num, \fBFLAC__StreamMetadata_SeekPoint\fP point)"
Insert a seekpoint into a seektable\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fIpoint_num\fP Index into seekpoint array to set\&. 
.br
\fIpoint\fP The point to set\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.PP
.nf
1 object->data\&.seek_table\&.num_points >= point_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation error, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 990 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_is_legal (\fBconst\fP \fBFLAC__StreamMetadata\fP * object)"
Check a seektable to see if it conforms to the \fBFLAC\fP specification\&. See the format specification for limits on the contents of the seektable\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if seek table is illegal, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1025 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_resize_points (\fBFLAC__StreamMetadata\fP * object, unsigned new_num_points)"
Resize the seekpoint array\&.
.PP
If the size shrinks, elements will truncated; if it grows, new placeholder points will be added to the end\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fInew_num_points\fP The desired length of the array; may be \fC0\fP\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.PP
.nf
1  (object->data\&.seek_table\&.points == NULL && object->data\&.seek_table\&.num_points == 0) ||
2 (object->data\&.seek_table\&.points != NULL && object->data\&.seek_table\&.num_points > 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation error, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 935 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBvoid\fP FLAC__metadata_object_seektable_set_point (\fBFLAC__StreamMetadata\fP * object, unsigned point_num, \fBFLAC__StreamMetadata_SeekPoint\fP point)"
Set a seekpoint in a seektable\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fIpoint_num\fP Index into seekpoint array to set\&. 
.br
\fIpoint\fP The point to set\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.PP
.nf
1 object->data\&.seek_table\&.num_points > point_num 

.fi
.PP
 
.RE
.PP

.PP
Definition at line 981 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_template_append_placeholders (\fBFLAC__StreamMetadata\fP * object, unsigned num)"
Append a number of placeholder points to the end of a seek table\&.
.PP
\fBNote:\fP
.RS 4
As with the other \&.\&.\&._seektable_template_\&.\&.\&. functions, you should call \fBFLAC__metadata_object_seektable_template_sort()\fP when finished to make the seek table legal\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fInum\fP The number of placeholder points to append\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1033 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_template_append_point (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__uint64\fP sample_number)"
Append a specific seek point template to the end of a seek table\&.
.PP
\fBNote:\fP
.RS 4
As with the other \&.\&.\&._seektable_template_\&.\&.\&. functions, you should call \fBFLAC__metadata_object_seektable_template_sort()\fP when finished to make the seek table legal\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fIsample_number\fP The sample number of the seek point template\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1045 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_template_append_points (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__uint64\fP sample_numbers[], unsigned num)"
Append specific seek point templates to the end of a seek table\&.
.PP
\fBNote:\fP
.RS 4
As with the other \&.\&.\&._seektable_template_\&.\&.\&. functions, you should call \fBFLAC__metadata_object_seektable_template_sort()\fP when finished to make the seek table legal\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fIsample_numbers\fP An array of sample numbers for the seek points\&. 
.br
\fInum\fP The number of seek point templates to append\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1064 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_template_append_spaced_points (\fBFLAC__StreamMetadata\fP * object, unsigned num, \fBFLAC__uint64\fP total_samples)"
Append a set of evenly-spaced seek point templates to the end of a seek table\&.
.PP
\fBNote:\fP
.RS 4
As with the other \&.\&.\&._seektable_template_\&.\&.\&. functions, you should call \fBFLAC__metadata_object_seektable_template_sort()\fP when finished to make the seek table legal\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fInum\fP The number of placeholder points to append\&. 
.br
\fItotal_samples\fP The total number of samples to be encoded; the seekpoints will be spaced approximately \fItotal_samples\fP / \fInum\fP samples apart\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.PP
.nf
1 total_samples > 0 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1089 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_template_append_spaced_points_by_samples (\fBFLAC__StreamMetadata\fP * object, unsigned samples, \fBFLAC__uint64\fP total_samples)"
Append a set of evenly-spaced seek point templates to the end of a seek table\&.
.PP
\fBNote:\fP
.RS 4
As with the other \&.\&.\&._seektable_template_\&.\&.\&. functions, you should call \fBFLAC__metadata_object_seektable_template_sort()\fP when finished to make the seek table legal\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing SEEKTABLE object\&. 
.br
\fIsamples\fP The number of samples apart to space the placeholder points\&. The first point will be at sample \fC0\fP, the second at sample \fIsamples\fP, then 2*\fIsamples\fP, and so on\&. As long as \fIsamples\fP and \fItotal_samples\fP are greater than \fC0\fP, there will always be at least one seekpoint at sample \fC0\fP\&. 
.br
\fItotal_samples\fP The total number of samples to be encoded; the seekpoints will be spaced \fIsamples\fP samples apart\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.PP
.nf
1 samples > 0 

.fi
.PP
 
.PP
.nf
1 total_samples > 0 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1114 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_seektable_template_sort (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__bool\fP compact)"
Sort a seek table's seek points according to the format specification, removing duplicates\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to a seek table to be sorted\&. 
.br
\fIcompact\fP If \fCfalse\fP, behaves like \fBFLAC__format_seektable_sort()\fP\&. If \fCtrue\fP, duplicates are deleted and the seek table is shrunk appropriately; the number of placeholder points present in the seek table will be the same after the call as before\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_SEEKTABLE 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if realloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1147 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_append_comment (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
Appends a comment to a VORBIS_COMMENT block\&.
.PP
For convenience, a trailing NUL is added to the entry if it doesn't have one already\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the entry is stored; otherwise, the object takes ownership of the \fCentry\&.entry\fP pointer\&.
.PP
\fBNote:\fP
.RS 4
If this function returns \fCfalse\fP, the caller still owns the pointer\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIentry\fP The comment to insert\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1  (entry\&.entry != NULL && entry\&.length > 0) ||
2 (entry\&.entry == NULL && entry\&.length == 0 && copy == false) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails or \fIentry\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1248 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_delete_comment (\fBFLAC__StreamMetadata\fP * object, unsigned comment_num)"
Delete a comment in a VORBIS_COMMENT block at the given index\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIcomment_num\fP The index of the comment to delete\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1 object->data\&.vorbis_comment\&.num_comments > comment_num 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if realloc() fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1300 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_entry_from_name_value_pair (\fBFLAC__StreamMetadata_VorbisComment_Entry\fP * entry, \fBconst\fP char * field_name, \fBconst\fP char * field_value)"
Creates a Vorbis comment entry from NUL-terminated name and value strings\&.
.PP
On return, the filled-in \fIentry->entry\fP pointer will point to malloc()ed memory and shall be owned by the caller\&. For convenience the entry will have a terminating NUL\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP A pointer to a Vorbis comment entry\&. The entry's \fCentry\fP pointer should not point to allocated memory as it will be overwritten\&. 
.br
\fIfield_name\fP The field name in ASCII, \fCNUL\fP terminated\&. 
.br
\fIfield_value\fP The field value in UTF-8, \fCNUL\fP terminated\&.  
.PP
.nf
1 entry != NULL 

.fi
.PP
 
.PP
.nf
1 field_name != NULL 

.fi
.PP
 
.PP
.nf
1 field_value != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if malloc() fails, or if \fIfield_name\fP or \fIfield_value\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1322 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_entry_matches (\fBconst\fP \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBconst\fP char * field_name, unsigned field_name_length)"
Check if the given Vorbis comment entry's field name matches the given field name\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP An existing Vorbis comment entry\&. 
.br
\fIfield_name\fP The field name to check\&. 
.br
\fIfield_name_length\fP The length of \fIfield_name\fP, not including the terminating \fCNUL\fP\&.  
.PP
.nf
1 (entry\&.entry != NULL && entry\&.length > 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCtrue\fP if the field names match, else \fCfalse\fP 
.RE
.PP

.PP
Definition at line 1379 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_entry_to_name_value_pair (\fBconst\fP \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, char ** field_name, char ** field_value)"
Splits a Vorbis comment entry into NUL-terminated name and value strings\&.
.PP
The returned pointers to name and value will be allocated by malloc() and shall be owned by the caller\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP An existing Vorbis comment entry\&. 
.br
\fIfield_name\fP The address of where the returned pointer to the field name will be stored\&. 
.br
\fIfield_value\fP The address of where the returned pointer to the field value will be stored\&.  
.PP
.nf
1 (entry\&.entry != NULL && entry\&.length > 0) 

.fi
.PP
 
.PP
.nf
1 memchr(entry\&.entry, '=', entry\&.length) != NULL 

.fi
.PP
 
.PP
.nf
1 field_name != NULL 

.fi
.PP
 
.PP
.nf
1 field_value != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails or \fIentry\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1348 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBint\fP FLAC__metadata_object_vorbiscomment_find_entry_from (\fBconst\fP \fBFLAC__StreamMetadata\fP * object, unsigned offset, \fBconst\fP char * field_name)"
Find a Vorbis comment with the given field name\&.
.PP
The search begins at entry number \fIoffset\fP; use an offset of 0 to search from the beginning of the comment array\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIoffset\fP The offset into the comment array from where to start the search\&. 
.br
\fIfield_name\fP The field name of the comment to find\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1 field_name != NULL 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIint\fP The offset in the comment array of the first comment whose field name matches \fIfield_name\fP, or \fC-1\fP if no match was found\&. 
.RE
.PP

.PP
Definition at line 1388 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_insert_comment (\fBFLAC__StreamMetadata\fP * object, unsigned comment_num, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
Insert a comment in a VORBIS_COMMENT block at the given index\&.
.PP
For convenience, a trailing NUL is added to the entry if it doesn't have one already\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the entry is stored; otherwise, the object takes ownership of the \fCentry\&.entry\fP pointer\&.
.PP
\fBNote:\fP
.RS 4
If this function returns \fCfalse\fP, the caller still owns the pointer\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIcomment_num\fP The index at which to insert the comment\&. The comments at and after \fIcomment_num\fP move right one position\&. To append a comment to the end, set \fIcomment_num\fP to \fCobject->data\&.vorbis_comment\&.num_comments\fP \&. 
.br
\fIentry\fP The comment to insert\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1 object->data\&.vorbis_comment\&.num_comments >= comment_num 

.fi
.PP
 
.PP
.nf
1  (entry\&.entry != NULL && entry\&.length > 0) ||
2 (entry\&.entry == NULL && entry\&.length == 0 && copy == false) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails or \fIentry\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1224 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBint\fP FLAC__metadata_object_vorbiscomment_remove_entries_matching (\fBFLAC__StreamMetadata\fP * object, \fBconst\fP char * field_name)"
Remove all Vorbis comments matching the given field name\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIfield_name\fP The field name of comments to delete\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIint\fP \fC-1\fP for memory allocation error, \fC0\fP for no matching entries, else the number of matching entries deleted\&. 
.RE
.PP

.PP
Definition at line 1415 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBint\fP FLAC__metadata_object_vorbiscomment_remove_entry_matching (\fBFLAC__StreamMetadata\fP * object, \fBconst\fP char * field_name)"
Remove first Vorbis comment matching the given field name\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIfield_name\fP The field name of comment to delete\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIint\fP \fC-1\fP for memory allocation error, \fC0\fP for no matching entries, \fC1\fP for one matching entry deleted\&. 
.RE
.PP

.PP
Definition at line 1395 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_replace_comment (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP all, \fBFLAC__bool\fP copy)"
Replaces comments in a VORBIS_COMMENT block with a new one\&.
.PP
For convenience, a trailing NUL is added to the entry if it doesn't have one already\&.
.PP
Depending on the the value of \fIall\fP, either all or just the first comment whose field name(s) match the given entry's name will be replaced by the given entry\&. If no comments match, \fIentry\fP will simply be appended\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the entry is stored; otherwise, the object takes ownership of the \fCentry\&.entry\fP pointer\&.
.PP
\fBNote:\fP
.RS 4
If this function returns \fCfalse\fP, the caller still owns the pointer\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIentry\fP The comment to insert\&. 
.br
\fIall\fP If \fCtrue\fP, all comments whose field name matches \fIentry's\fP field name will be removed, and \fIentry\fP will be inserted at the position of the first matching comment\&. If \fCfalse\fP, only the first comment whose field name matches \fIentry's\fP field name will be replaced with \fIentry\fP\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1  (entry\&.entry != NULL && entry\&.length > 0) ||
2 (entry\&.entry == NULL && entry\&.length == 0 && copy == false) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails or \fIentry\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1255 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_resize_comments (\fBFLAC__StreamMetadata\fP * object, unsigned new_num_comments)"
Resize the comment array\&.
.PP
If the size shrinks, elements will truncated; if it grows, new empty fields will be added to the end\&.
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fInew_num_comments\fP The desired length of the array; may be \fC0\fP\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1  (object->data\&.vorbis_comment\&.comments == NULL && object->data\&.vorbis_comment\&.num_comments == 0) ||
2 (object->data\&.vorbis_comment\&.comments != NULL && object->data\&.vorbis_comment\&.num_comments > 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1166 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_set_comment (\fBFLAC__StreamMetadata\fP * object, unsigned comment_num, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
Sets a comment in a VORBIS_COMMENT block\&.
.PP
For convenience, a trailing NUL is added to the entry if it doesn't have one already\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the entry is stored; otherwise, the object takes ownership of the \fCentry\&.entry\fP pointer\&.
.PP
\fBNote:\fP
.RS 4
If this function returns \fCfalse\fP, the caller still owns the pointer\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIcomment_num\fP Index into comment array to set\&. 
.br
\fIentry\fP The entry to set the comment to\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1 comment_num < object->data\&.vorbis_comment\&.num_comments 

.fi
.PP
 
.PP
.nf
1  (entry\&.entry != NULL && entry\&.length > 0) ||
2 (entry\&.entry == NULL && entry\&.length == 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails or \fIentry\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1214 of file metadata_object\&.c\&.
.SS "\fBFLAC_API\fP \fBFLAC__bool\fP FLAC__metadata_object_vorbiscomment_set_vendor_string (\fBFLAC__StreamMetadata\fP * object, \fBFLAC__StreamMetadata_VorbisComment_Entry\fP entry, \fBFLAC__bool\fP copy)"
Sets the vendor string in a VORBIS_COMMENT block\&.
.PP
For convenience, a trailing NUL is added to the entry if it doesn't have one already\&.
.PP
If \fIcopy\fP is \fCtrue\fP, a copy of the entry is stored; otherwise, the object takes ownership of the \fCentry\&.entry\fP pointer\&.
.PP
\fBNote:\fP
.RS 4
If this function returns \fCfalse\fP, the caller still owns the pointer\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP A pointer to an existing VORBIS_COMMENT object\&. 
.br
\fIentry\fP The entry to set the vendor string to\&. 
.br
\fIcopy\fP See above\&.  
.PP
.nf
1 object != NULL 

.fi
.PP
 
.PP
.nf
1 object->type == FLAC__METADATA_TYPE_VORBIS_COMMENT 

.fi
.PP
 
.PP
.nf
1  (entry\&.entry != NULL && entry\&.length > 0) ||
2 (entry\&.entry == NULL && entry\&.length == 0) 

.fi
.PP
 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIFLAC__bool\fP \fCfalse\fP if memory allocation fails or \fIentry\fP does not comply with the Vorbis comment specification, else \fCtrue\fP\&. 
.RE
.PP

.PP
Definition at line 1159 of file metadata_object\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
