.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/common.c" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/common.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <config\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <ctype\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'sndfile\&.h'\fP
.br
\fC#include 'sfendian\&.h'\fP
.br
\fC#include 'common\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGET_LE_SHORT\fP(ptr)   ( ((ptr) [1] << 8) | ((ptr) [0]) )"
.br
.ti -1c
.RI "#define \fBGET_BE_SHORT\fP(ptr)   ( ((ptr) [0] << 8) | ((ptr) [1]) )"
.br
.ti -1c
.RI "#define \fBGET_LE_3BYTE\fP(ptr)   ( 	((ptr) [2] << 16) | ((ptr) [1] << 8) | ((ptr) [0]) )"
.br
.ti -1c
.RI "#define \fBGET_BE_3BYTE\fP(ptr)   ( 	((ptr) [0] << 16) | ((ptr) [1] << 8) | ((ptr) [2]) )"
.br
.ti -1c
.RI "#define \fBGET_LE_INT\fP(ptr)"
.br
.ti -1c
.RI "#define \fBGET_BE_INT\fP(ptr)"
.br
.ti -1c
.RI "#define \fBGET_LE_8BYTE\fP(ptr)"
.br
.ti -1c
.RI "#define \fBGET_BE_8BYTE\fP(ptr)"
.br
.ti -1c
.RI "#define \fBCASE_NAME\fP(x)   case x : \fBreturn\fP #x ; break ;"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBpsf_log_printf\fP (\fBSF_PRIVATE\fP *psf, \fBconst\fP char *\fBformat\fP,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpsf_asciiheader_printf\fP (\fBSF_PRIVATE\fP *psf, \fBconst\fP char *\fBformat\fP,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBint\fP \fBpsf_binheader_writef\fP (\fBSF_PRIVATE\fP *psf, \fBconst\fP char *\fBformat\fP,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBint\fP \fBpsf_binheader_readf\fP (\fBSF_PRIVATE\fP *psf, char \fBconst\fP *\fBformat\fP,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBpsf_default_seek\fP (\fBSF_PRIVATE\fP *psf, \fBint\fP \fBUNUSED\fP(mode), \fBsf_count_t\fP samples_from_start)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpsf_hexdump\fP (\fBconst\fP \fBvoid\fP *ptr, \fBint\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpsf_log_SF_INFO\fP (\fBSF_PRIVATE\fP *psf)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBpsf_memset\fP (\fBvoid\fP *\fBs\fP, \fBint\fP \fBc\fP, \fBsf_count_t\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBSF_INSTRUMENT\fP * \fBpsf_instrument_alloc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpsf_sanitize_string\fP (char *cptr, \fBint\fP \fBlen\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpsf_get_date_str\fP (char *\fBstr\fP, \fBint\fP maxlen)"
.br
.ti -1c
.RI "\fBint\fP \fBsubformat_to_bytewidth\fP (\fBint\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBs_bitwidth_to_subformat\fP (\fBint\fP \fBbits\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBu_bitwidth_to_subformat\fP (\fBint\fP \fBbits\fP)"
.br
.ti -1c
.RI "\fBint32_t\fP \fBpsf_rand_int32\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBappend_snprintf\fP (char *dest, size_t maxlen, \fBconst\fP char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpsf_strlcpy_crlf\fP (char *dest, \fBconst\fP char *src, size_t destmax, size_t srcmax)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBstr_of_major_format\fP (\fBint\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBstr_of_minor_format\fP (\fBint\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBstr_of_open_mode\fP (\fBint\fP mode)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBstr_of_endianness\fP (\fBint\fP \fBend\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CASE_NAME(x)   case x : \fBreturn\fP #x ; break ;"

.PP
Definition at line 1373 of file common\&.c\&.
.SS "#define GET_BE_3BYTE(ptr)   ( 	((ptr) [0] << 16) | ((ptr) [1] << 8) | ((ptr) [2]) )"

.PP
Definition at line 775 of file common\&.c\&.
.SS "#define GET_BE_8BYTE(ptr)"
\fBValue:\fP
.PP
.nf
(  (((sf_count_t) (ptr) [0]) << 56) | (((sf_count_t) (ptr) [1]) << 48) |   \
                                (((sf_count_t) (ptr) [2]) << 40) | (((sf_count_t) (ptr) [3]) << 32) |   \
                                (((sf_count_t) (ptr) [4]) << 24) | (((sf_count_t) (ptr) [5]) << 16) |   \
                                (((sf_count_t) (ptr) [6]) << 8 ) | ((ptr) [7]))
.fi
.PP
Definition at line 788 of file common\&.c\&.
.SS "#define GET_BE_INT(ptr)"
\fBValue:\fP
.PP
.nf
(  ((ptr) [0] << 24)   | ((ptr) [1] << 16) |   \
                                ((ptr) [2] << 8)    | ((ptr) [3]) )
.fi
.PP
Definition at line 780 of file common\&.c\&.
.SS "#define GET_BE_SHORT(ptr)   ( ((ptr) [0] << 8) | ((ptr) [1]) )"

.PP
Definition at line 772 of file common\&.c\&.
.SS "#define GET_LE_3BYTE(ptr)   ( 	((ptr) [2] << 16) | ((ptr) [1] << 8) | ((ptr) [0]) )"

.PP
Definition at line 774 of file common\&.c\&.
.SS "#define GET_LE_8BYTE(ptr)"
\fBValue:\fP
.PP
.nf
(     (((sf_count_t) (ptr) [7]) << 56) | (((sf_count_t) (ptr) [6]) << 48) |   \
                                (((sf_count_t) (ptr) [5]) << 40) | (((sf_count_t) (ptr) [4]) << 32) |   \
                                (((sf_count_t) (ptr) [3]) << 24) | (((sf_count_t) (ptr) [2]) << 16) |   \
                                (((sf_count_t) (ptr) [1]) << 8 ) | ((ptr) [0]))
.fi
.PP
Definition at line 783 of file common\&.c\&.
.SS "#define GET_LE_INT(ptr)"
\fBValue:\fP
.PP
.nf
(  ((ptr) [3] << 24)   | ((ptr) [2] << 16) |   \
                                ((ptr) [1] << 8)    | ((ptr) [0]) )
.fi
.PP
Definition at line 777 of file common\&.c\&.
.SS "#define GET_LE_SHORT(ptr)   ( ((ptr) [1] << 8) | ((ptr) [0]) )"

.PP
Definition at line 771 of file common\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP append_snprintf (char * dest, size_t maxlen, \fBconst\fP char * fmt,  \&.\&.\&.)"

.PP
Definition at line 1320 of file common\&.c\&.
.SS "\fBvoid\fP psf_asciiheader_printf (\fBSF_PRIVATE\fP * psf, \fBconst\fP char * format,  \&.\&.\&.)"

.PP
Definition at line 331 of file common\&.c\&.
.SS "\fBint\fP psf_binheader_readf (\fBSF_PRIVATE\fP * psf, char \fBconst\fP * format,  \&.\&.\&.)"

.PP
Definition at line 909 of file common\&.c\&.
.SS "\fBint\fP psf_binheader_writef (\fBSF_PRIVATE\fP * psf, \fBconst\fP char * format,  \&.\&.\&.)"

.PP
Definition at line 548 of file common\&.c\&.
.SS "\fBsf_count_t\fP psf_default_seek (\fBSF_PRIVATE\fP * psf, \fBint\fP  UNUSEDmode, \fBsf_count_t\fP samples_from_start)"

.PP
Definition at line 1093 of file common\&.c\&.
.SS "\fBvoid\fP psf_get_date_str (char * str, \fBint\fP maxlen)"

.PP
Definition at line 1218 of file common\&.c\&.
.SS "\fBvoid\fP psf_hexdump (\fBconst\fP \fBvoid\fP * ptr, \fBint\fP len)"

.PP
Definition at line 1120 of file common\&.c\&.
.SS "\fBSF_INSTRUMENT\fP* psf_instrument_alloc (\fBvoid\fP)"

.PP
Definition at line 1188 of file common\&.c\&.
.SS "\fBvoid\fP psf_log_printf (\fBSF_PRIVATE\fP * psf, \fBconst\fP char * format,  \&.\&.\&.)"

.PP
Definition at line 53 of file common\&.c\&.
.SS "\fBvoid\fP psf_log_SF_INFO (\fBSF_PRIVATE\fP * psf)"

.PP
Definition at line 1151 of file common\&.c\&.
.SS "\fBvoid\fP* psf_memset (\fBvoid\fP * s, \fBint\fP c, \fBsf_count_t\fP len)"

.PP
Definition at line 1169 of file common\&.c\&.
.SS "\fBint32_t\fP psf_rand_int32 (\fBvoid\fP)"

.PP
Definition at line 1297 of file common\&.c\&.
.SS "\fBvoid\fP psf_sanitize_string (char * cptr, \fBint\fP len)"

.PP
Definition at line 1207 of file common\&.c\&.
.SS "\fBvoid\fP psf_strlcpy_crlf (char * dest, \fBconst\fP char * src, size_t destmax, size_t srcmax)"

.PP
Definition at line 1336 of file common\&.c\&.
.SS "\fBint\fP s_bitwidth_to_subformat (\fBint\fP bits)"

.PP
Definition at line 1267 of file common\&.c\&.
.SS "\fBconst\fP char* str_of_endianness (\fBint\fP end)"

.PP
Definition at line 1456 of file common\&.c\&.
.SS "\fBconst\fP char* str_of_major_format (\fBint\fP format)"

.PP
Definition at line 1376 of file common\&.c\&.
.SS "\fBconst\fP char* str_of_minor_format (\fBint\fP format)"

.PP
Definition at line 1409 of file common\&.c\&.
.SS "\fBconst\fP char* str_of_open_mode (\fBint\fP mode)"

.PP
Definition at line 1442 of file common\&.c\&.
.SS "\fBint\fP subformat_to_bytewidth (\fBint\fP format)"

.PP
Definition at line 1246 of file common\&.c\&.
.SS "\fBint\fP u_bitwidth_to_subformat (\fBint\fP bits)"

.PP
Definition at line 1279 of file common\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
