.TH "WavInFile" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WavInFile \- Class for reading WAV audio files\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <WavFile\&.h>\fP
.PP
Inherits \fBWavFileBase\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWavInFile\fP (\fBconst\fP char *\fBfilename\fP)"
.br
.ti -1c
.RI "\fBWavInFile\fP (FILE *file)"
.br
.ti -1c
.RI "\fB~WavInFile\fP ()"
.br
.RI "\fIDestructor: Closes the file\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBrewind\fP ()"
.br
.RI "\fIRewind to beginning of the file\&. \fP"
.ti -1c
.RI "\fBuint\fP \fBgetSampleRate\fP () \fBconst\fP "
.br
.RI "\fIGet sample rate\&. \fP"
.ti -1c
.RI "\fBuint\fP \fBgetNumBits\fP () \fBconst\fP "
.br
.RI "\fIGet number of bits per sample, i\&.e\&. 8 or 16\&. \fP"
.ti -1c
.RI "\fBuint\fP \fBgetDataSizeInBytes\fP () \fBconst\fP "
.br
.ti -1c
.RI "\fBuint\fP \fBgetNumSamples\fP () \fBconst\fP "
.br
.RI "\fIGet total number of samples in file\&. \fP"
.ti -1c
.RI "\fBuint\fP \fBgetBytesPerSample\fP () \fBconst\fP "
.br
.RI "\fIGet number of bytes per audio sample (e\&.g\&. 16bit stereo = 4 bytes/sample) \fP"
.ti -1c
.RI "\fBuint\fP \fBgetNumChannels\fP () \fBconst\fP "
.br
.RI "\fIGet number of audio channels in the file (1=mono, 2=stereo) \fP"
.ti -1c
.RI "\fBuint\fP \fBgetLengthMS\fP () \fBconst\fP "
.br
.RI "\fIGet the audio file length in milliseconds\&. \fP"
.ti -1c
.RI "\fBuint\fP \fBgetElapsedMS\fP () \fBconst\fP "
.br
.RI "\fIReturns how many milliseconds of audio have so far been read from the file\&. \fP"
.ti -1c
.RI "\fBint\fP \fBread\fP (unsigned char *\fBbuffer\fP, \fBint\fP maxElems)"
.br
.ti -1c
.RI "\fBint\fP \fBread\fP (short *\fBbuffer\fP, \fBint\fP maxElems)"
.br
.ti -1c
.RI "\fBint\fP \fBread\fP (float *\fBbuffer\fP, \fBint\fP maxElems)"
.br
.ti -1c
.RI "\fBint\fP \fBeof\fP () \fBconst\fP "
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Class for reading WAV audio files\&. 
.PP
Definition at line 113 of file WavFile\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "WavInFile::WavInFile (\fBconst\fP char * filename)"
Constructor: Opens the given WAV file\&. If the file can't be opened, throws 'runtime_error' exception\&. 
.PP
Definition at line 179 of file WavFile\&.cpp\&.
.SS "WavInFile::WavInFile (FILE * file)"

.PP
Definition at line 196 of file WavFile\&.cpp\&.
.SS "WavInFile::~WavInFile ()"

.PP
Destructor: Closes the file\&. 
.PP
Definition at line 241 of file WavFile\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBint\fP WavInFile::eof () const"
Check end-of-file\&.
.PP
\fBReturns:\fP
.RS 4
Nonzero if end-of-file reached\&. 
.RE
.PP

.PP
Definition at line 458 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getBytesPerSample () const"

.PP
Get number of bytes per audio sample (e\&.g\&. 16bit stereo = 4 bytes/sample) 
.PP
Definition at line 623 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getDataSizeInBytes () const"
Get sample data size in bytes\&. Ahem, this should return same information as 'getBytesPerSample'\&.\&.\&. 
.PP
Definition at line 636 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getElapsedMS () const"

.PP
Returns how many milliseconds of audio have so far been read from the file\&. Returns how many milliseconds of audio have so far been read from the file
.PP
\fBReturns:\fP
.RS 4
elapsed duration in milliseconds 
.RE
.PP

.PP
Definition at line 662 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getLengthMS () const"

.PP
Get the audio file length in milliseconds\&. 
.PP
Definition at line 649 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getNumBits () const"

.PP
Get number of bits per sample, i\&.e\&. 8 or 16\&. 
.PP
Definition at line 617 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getNumChannels () const"

.PP
Get number of audio channels in the file (1=mono, 2=stereo) 
.PP
Definition at line 611 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getNumSamples () const"

.PP
Get total number of samples in file\&. 
.PP
Definition at line 642 of file WavFile\&.cpp\&.
.SS "\fBuint\fP WavInFile::getSampleRate () const"

.PP
Get sample rate\&. 
.PP
Definition at line 629 of file WavFile\&.cpp\&.
.SS "\fBint\fP WavInFile::read (unsigned char * buffer, \fBint\fP maxElems)"
Reads audio samples from the WAV file\&. This routine works only for 8 bit samples\&. Reads given number of elements from the file or if end-of-file reached, as many elements as are left in the file\&.
.PP
\fBReturns:\fP
.RS 4
Number of 8-bit integers read from the file\&. 
.RE
.PP

.PP
Definition at line 271 of file WavFile\&.cpp\&.
.SS "\fBint\fP WavInFile::read (short * buffer, \fBint\fP maxElems)"
Reads audio samples from the WAV file to 16 bit integer format\&. Reads given number of elements from the file or if end-of-file reached, as many elements as are left in the file\&.
.PP
\fBReturns:\fP
.RS 4
Number of 16-bit integers read from the file\&. 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP Pointer to buffer where to read data\&. 
.br
\fImaxElems\fP Size of 'buffer' array (number of array elements)\&. 
.RE
.PP

.PP
Definition at line 300 of file WavFile\&.cpp\&.
.SS "\fBint\fP WavInFile::read (float * buffer, \fBint\fP maxElems)"
Reads audio samples from the WAV file to floating point format, converting sample values to range [-1,1[\&. Reads given number of elements from the file or if end-of-file reached, as many elements as are left in the file\&. Notice that reading in float format supports 8/16/24/32bit sample formats\&.
.PP
\fBReturns:\fP
.RS 4
Number of elements read from the file\&.
.RE
.PP
Read data in float format\&. Notice that when reading in float format 8/16/24/32 bit sample formats are supported 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP Pointer to buffer where to read data\&. 
.br
\fImaxElems\fP Size of 'buffer' array (number of array elements)\&. 
.RE
.PP

.PP
Definition at line 364 of file WavFile\&.cpp\&.
.SS "\fBvoid\fP WavInFile::rewind ()"

.PP
Rewind to beginning of the file\&. 
.PP
Definition at line 249 of file WavFile\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
