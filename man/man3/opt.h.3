.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'rational\&.h'\fP
.br
\fC#include 'avutil\&.h'\fP
.br
\fC#include 'dict\&.h'\fP
.br
\fC#include 'log\&.h'\fP
.br
\fC#include 'pixfmt\&.h'\fP
.br
\fC#include 'samplefmt\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAVOption\fP"
.br
.ti -1c
.RI "struct \fBAVOptionRange\fP"
.br
.ti -1c
.RI "struct \fBAVOptionRanges\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAV_OPT_FLAG_ENCODING_PARAM\fP   1"
.br
.RI "\fIa generic parameter which can be set by the user for muxing or encoding \fP"
.ti -1c
.RI "#define \fBAV_OPT_FLAG_DECODING_PARAM\fP   2"
.br
.RI "\fIa generic parameter which can be set by the user for demuxing or decoding \fP"
.ti -1c
.RI "#define \fBAV_OPT_FLAG_METADATA\fP   4"
.br
.RI "\fIsome data extracted or inserted into the file like title, comment, \&.\&.\&. \fP"
.ti -1c
.RI "#define \fBAV_OPT_FLAG_AUDIO_PARAM\fP   8"
.br
.ti -1c
.RI "#define \fBAV_OPT_FLAG_VIDEO_PARAM\fP   16"
.br
.ti -1c
.RI "#define \fBAV_OPT_FLAG_SUBTITLE_PARAM\fP   32"
.br
.ti -1c
.RI "#define \fBAV_OPT_FLAG_EXPORT\fP   64"
.br
.ti -1c
.RI "#define \fBAV_OPT_FLAG_READONLY\fP   128"
.br
.ti -1c
.RI "#define \fBAV_OPT_FLAG_FILTERING_PARAM\fP   (1<<16)"
.br
.RI "\fIa generic parameter which can be set by the user for filtering \fP"
.ti -1c
.RI "#define \fBAV_OPT_SEARCH_CHILDREN\fP   0x0001"
.br
.ti -1c
.RI "#define \fBAV_OPT_SEARCH_FAKE_OBJ\fP   0x0002"
.br
.ti -1c
.RI "#define \fBav_opt_set_int_list\fP(obj,  \fBname\fP,  val,  term,  flags)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBAVOption\fP \fBAVOption\fP"
.br
.ti -1c
.RI "typedef struct \fBAVOptionRange\fP \fBAVOptionRange\fP"
.br
.ti -1c
.RI "typedef struct \fBAVOptionRanges\fP \fBAVOptionRanges\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBAVOptionType\fP { \fBAV_OPT_TYPE_FLAGS\fP, \fBAV_OPT_TYPE_INT\fP, \fBAV_OPT_TYPE_INT64\fP, \fBAV_OPT_TYPE_DOUBLE\fP, \fBAV_OPT_TYPE_FLOAT\fP, \fBAV_OPT_TYPE_STRING\fP, \fBAV_OPT_TYPE_RATIONAL\fP, \fBAV_OPT_TYPE_BINARY\fP, \fBAV_OPT_TYPE_CONST\fP = 128, \fBAV_OPT_TYPE_IMAGE_SIZE\fP = MKBETAG('S','I','Z','E'), \fBAV_OPT_TYPE_PIXEL_FMT\fP = MKBETAG('P','F','M','T'), \fBAV_OPT_TYPE_SAMPLE_FMT\fP = MKBETAG('S','F','M','T'), \fBAV_OPT_TYPE_VIDEO_RATE\fP = MKBETAG('V','R','A','T'), \fBAV_OPT_TYPE_DURATION\fP = MKBETAG('D','U','R',' '), \fBAV_OPT_TYPE_COLOR\fP = MKBETAG('C','O','L','R'), \fBAV_OPT_TYPE_CHANNEL_LAYOUT\fP = MKBETAG('C','H','L','A'), \fBFF_OPT_TYPE_FLAGS\fP = 0, \fBFF_OPT_TYPE_INT\fP, \fBFF_OPT_TYPE_INT64\fP, \fBFF_OPT_TYPE_DOUBLE\fP, \fBFF_OPT_TYPE_FLOAT\fP, \fBFF_OPT_TYPE_STRING\fP, \fBFF_OPT_TYPE_RATIONAL\fP, \fBFF_OPT_TYPE_BINARY\fP, \fBFF_OPT_TYPE_CONST\fP =128 }"
.br
.ti -1c
.RI "enum { \fBAV_OPT_FLAG_IMPLICIT_KEY\fP = 1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_find_opt\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *unit, \fBint\fP \fBmask\fP, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBint\fP \fBav_set_string3\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *val, \fBint\fP alloc, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_set_double\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, double n)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_set_q\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBAVRational\fP n)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_set_int\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint64_t\fP n)"
.br
.ti -1c
.RI "double \fBav_get_double\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBAVRational\fP \fBav_get_q\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBint64_t\fP \fBav_get_int\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP char * \fBav_get_string\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBAVOption\fP **o_out, char *\fBbuf\fP, \fBint\fP buf_len)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBconst\fP \fBAVOption\fP * \fBav_next_option\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *\fBlast\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_show2\fP (\fBvoid\fP *obj, \fBvoid\fP *av_log_obj, \fBint\fP req_flags, \fBint\fP rej_flags)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_opt_set_defaults\fP (\fBvoid\fP *\fBs\fP)"
.br
.ti -1c
.RI "\fBattribute_deprecated\fP \fBvoid\fP \fBav_opt_set_defaults2\fP (\fBvoid\fP *\fBs\fP, \fBint\fP \fBmask\fP, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_set_options_string\fP (\fBvoid\fP *ctx, \fBconst\fP char *opts, \fBconst\fP char *key_val_sep, \fBconst\fP char *pairs_sep)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_from_string\fP (\fBvoid\fP *ctx, \fBconst\fP char *opts, \fBconst\fP char *\fBconst\fP *shorthand, \fBconst\fP char *key_val_sep, \fBconst\fP char *pairs_sep)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_opt_free\fP (\fBvoid\fP *obj)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_flag_is_set\fP (\fBvoid\fP *obj, \fBconst\fP char *field_name, \fBconst\fP char *flag_name)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_dict\fP (\fBvoid\fP *obj, struct \fBAVDictionary\fP **options)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_key_value\fP (\fBconst\fP char **ropts, \fBconst\fP char *key_val_sep, \fBconst\fP char *pairs_sep, unsigned flags, char **rkey, char **rval)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_eval_flags\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *o, \fBconst\fP char *val, \fBint\fP *flags_out)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_eval_int\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *o, \fBconst\fP char *val, \fBint\fP *int_out)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_eval_int64\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *o, \fBconst\fP char *val, \fBint64_t\fP *int64_out)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_eval_float\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *o, \fBconst\fP char *val, float *float_out)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_eval_double\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *o, \fBconst\fP char *val, double *double_out)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_eval_q\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *o, \fBconst\fP char *val, \fBAVRational\fP *q_out)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVOption\fP * \fBav_opt_find\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *unit, \fBint\fP opt_flags, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVOption\fP * \fBav_opt_find2\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *unit, \fBint\fP opt_flags, \fBint\fP search_flags, \fBvoid\fP **target_obj)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVOption\fP * \fBav_opt_next\fP (\fBvoid\fP *obj, \fBconst\fP \fBAVOption\fP *prev)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBav_opt_child_next\fP (\fBvoid\fP *obj, \fBvoid\fP *prev)"
.br
.ti -1c
.RI "\fBconst\fP \fBAVClass\fP * \fBav_opt_child_class_next\fP (\fBconst\fP \fBAVClass\fP *parent, \fBconst\fP \fBAVClass\fP *prev)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP char *val, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_int\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint64_t\fP val, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_double\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, double val, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_q\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBAVRational\fP val, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_bin\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBconst\fP \fBuint8_t\fP *val, \fBint\fP \fBsize\fP, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_image_size\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP w, \fBint\fP h, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_pixel_fmt\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, enum \fBAVPixelFormat\fP fmt, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_sample_fmt\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, enum \fBAVSampleFormat\fP fmt, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_video_rate\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBAVRational\fP val, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_set_channel_layout\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint64_t\fP ch_layout, \fBint\fP search_flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, \fBuint8_t\fP **out_val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_int\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, \fBint64_t\fP *out_val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_double\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, double *out_val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_q\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, \fBAVRational\fP *out_val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_image_size\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, \fBint\fP *w_out, \fBint\fP *h_out)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_pixel_fmt\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, enum \fBAVPixelFormat\fP *out_fmt)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_sample_fmt\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, enum \fBAVSampleFormat\fP *out_fmt)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_video_rate\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, \fBAVRational\fP *out_val)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_get_channel_layout\fP (\fBvoid\fP *obj, \fBconst\fP char *\fBname\fP, \fBint\fP search_flags, \fBint64_t\fP *ch_layout)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBav_opt_ptr\fP (\fBconst\fP \fBAVClass\fP *avclass, \fBvoid\fP *obj, \fBconst\fP char *\fBname\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBav_opt_freep_ranges\fP (\fBAVOptionRanges\fP **ranges)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_query_ranges\fP (\fBAVOptionRanges\fP **, \fBvoid\fP *obj, \fBconst\fP char *key, \fBint\fP flags)"
.br
.ti -1c
.RI "\fBint\fP \fBav_opt_query_ranges_default\fP (\fBAVOptionRanges\fP **, \fBvoid\fP *obj, \fBconst\fP char *key, \fBint\fP flags)"
.br
.in -1c
.SH "Detailed Description"
.PP 
AVOptions 
.PP
Definition in file \fBopt\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define AV_OPT_FLAG_AUDIO_PARAM   8"

.PP
Definition at line 288 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_DECODING_PARAM   2"

.PP
a generic parameter which can be set by the user for demuxing or decoding 
.PP
Definition at line 284 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_ENCODING_PARAM   1"

.PP
a generic parameter which can be set by the user for muxing or encoding 
.PP
Definition at line 283 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_EXPORT   64"
The option is inteded for exporting values to the caller\&. 
.PP
Definition at line 294 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_FILTERING_PARAM   (1<<16)"

.PP
a generic parameter which can be set by the user for filtering 
.PP
Definition at line 300 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_METADATA   4"

.PP
some data extracted or inserted into the file like title, comment, \&.\&.\&. 
.PP
Definition at line 286 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_READONLY   128"
The option may not be set through the AVOptions API, only read\&. This flag only makes sense when AV_OPT_FLAG_EXPORT is also set\&. 
.PP
Definition at line 299 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_SUBTITLE_PARAM   32"

.PP
Definition at line 290 of file opt\&.h\&.
.SS "#define AV_OPT_FLAG_VIDEO_PARAM   16"

.PP
Definition at line 289 of file opt\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
