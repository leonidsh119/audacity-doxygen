.TH "C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/include/portaudio.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/include/portaudio.h \- The portable PortAudio API\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBPaVersionInfo\fP"
.br
.ti -1c
.RI "struct \fBPaHostApiInfo\fP"
.br
.ti -1c
.RI "struct \fBPaHostErrorInfo\fP"
.br
.ti -1c
.RI "struct \fBPaDeviceInfo\fP"
.br
.ti -1c
.RI "struct \fBPaStreamParameters\fP"
.br
.ti -1c
.RI "struct \fBPaStreamCallbackTimeInfo\fP"
.br
.ti -1c
.RI "struct \fBPaStreamInfo\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBpaMakeVersionNumber\fP(major,  minor,  subminor)   (((major)&0xFF)<<16 | ((minor)&0xFF)<<8 | ((subminor)&0xFF))"
.br
.ti -1c
.RI "#define \fBpaNoDevice\fP   ((\fBPaDeviceIndex\fP)\-1)"
.br
.ti -1c
.RI "#define \fBpaUseHostApiSpecificDeviceSpecification\fP   ((\fBPaDeviceIndex\fP)\-2)"
.br
.ti -1c
.RI "#define \fBpaFloat32\fP   ((\fBPaSampleFormat\fP) 0x00000001)"
.br
.ti -1c
.RI "#define \fBpaInt32\fP   ((\fBPaSampleFormat\fP) 0x00000002)"
.br
.ti -1c
.RI "#define \fBpaInt24\fP   ((\fBPaSampleFormat\fP) 0x00000004)"
.br
.ti -1c
.RI "#define \fBpaInt16\fP   ((\fBPaSampleFormat\fP) 0x00000008)"
.br
.ti -1c
.RI "#define \fBpaInt8\fP   ((\fBPaSampleFormat\fP) 0x00000010)"
.br
.ti -1c
.RI "#define \fBpaUInt8\fP   ((\fBPaSampleFormat\fP) 0x00000020)"
.br
.ti -1c
.RI "#define \fBpaCustomFormat\fP   ((\fBPaSampleFormat\fP) 0x00010000)"
.br
.ti -1c
.RI "#define \fBpaNonInterleaved\fP   ((\fBPaSampleFormat\fP) 0x80000000)"
.br
.ti -1c
.RI "#define \fBpaFormatIsSupported\fP   (0)"
.br
.ti -1c
.RI "#define \fBpaFramesPerBufferUnspecified\fP   (0)"
.br
.ti -1c
.RI "#define \fBpaNoFlag\fP   ((\fBPaStreamFlags\fP) 0)"
.br
.ti -1c
.RI "#define \fBpaClipOff\fP   ((\fBPaStreamFlags\fP) 0x00000001)"
.br
.ti -1c
.RI "#define \fBpaDitherOff\fP   ((\fBPaStreamFlags\fP) 0x00000002)"
.br
.ti -1c
.RI "#define \fBpaNeverDropInput\fP   ((\fBPaStreamFlags\fP) 0x00000004)"
.br
.ti -1c
.RI "#define \fBpaPrimeOutputBuffersUsingStreamCallback\fP   ((\fBPaStreamFlags\fP) 0x00000008)"
.br
.ti -1c
.RI "#define \fBpaPlatformSpecificFlags\fP   ((\fBPaStreamFlags\fP)0xFFFF0000)"
.br
.ti -1c
.RI "#define \fBpaInputUnderflow\fP   ((\fBPaStreamCallbackFlags\fP) 0x00000001)"
.br
.ti -1c
.RI "#define \fBpaInputOverflow\fP   ((\fBPaStreamCallbackFlags\fP) 0x00000002)"
.br
.ti -1c
.RI "#define \fBpaOutputUnderflow\fP   ((\fBPaStreamCallbackFlags\fP) 0x00000004)"
.br
.ti -1c
.RI "#define \fBpaOutputOverflow\fP   ((\fBPaStreamCallbackFlags\fP) 0x00000008)"
.br
.ti -1c
.RI "#define \fBpaPrimingOutput\fP   ((\fBPaStreamCallbackFlags\fP) 0x00000010)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBPaVersionInfo\fP \fBPaVersionInfo\fP"
.br
.ti -1c
.RI "typedef \fBint\fP \fBPaError\fP"
.br
.ti -1c
.RI "typedef enum \fBPaErrorCode\fP \fBPaErrorCode\fP"
.br
.ti -1c
.RI "typedef \fBint\fP \fBPaDeviceIndex\fP"
.br
.ti -1c
.RI "typedef \fBint\fP \fBPaHostApiIndex\fP"
.br
.ti -1c
.RI "typedef enum \fBPaHostApiTypeId\fP \fBPaHostApiTypeId\fP"
.br
.ti -1c
.RI "typedef struct \fBPaHostApiInfo\fP \fBPaHostApiInfo\fP"
.br
.ti -1c
.RI "typedef struct \fBPaHostErrorInfo\fP \fBPaHostErrorInfo\fP"
.br
.ti -1c
.RI "typedef double \fBPaTime\fP"
.br
.ti -1c
.RI "typedef unsigned long \fBPaSampleFormat\fP"
.br
.ti -1c
.RI "typedef struct \fBPaDeviceInfo\fP \fBPaDeviceInfo\fP"
.br
.ti -1c
.RI "typedef struct \fBPaStreamParameters\fP \fBPaStreamParameters\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBPaStream\fP"
.br
.ti -1c
.RI "typedef unsigned long \fBPaStreamFlags\fP"
.br
.ti -1c
.RI "typedef struct \fBPaStreamCallbackTimeInfo\fP \fBPaStreamCallbackTimeInfo\fP"
.br
.ti -1c
.RI "typedef unsigned long \fBPaStreamCallbackFlags\fP"
.br
.ti -1c
.RI "typedef enum \fBPaStreamCallbackResult\fP \fBPaStreamCallbackResult\fP"
.br
.ti -1c
.RI "typedef \fBint\fP \fBPaStreamCallback\fP(\fBconst\fP \fBvoid\fP *input, \fBvoid\fP *\fBoutput\fP, unsigned long frameCount, \fBconst\fP \fBPaStreamCallbackTimeInfo\fP *timeInfo, \fBPaStreamCallbackFlags\fP statusFlags, \fBvoid\fP *\fBuserData\fP)"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBPaStreamFinishedCallback\fP(\fBvoid\fP *\fBuserData\fP)"
.br
.ti -1c
.RI "typedef struct \fBPaStreamInfo\fP \fBPaStreamInfo\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBPaErrorCode\fP { \fBpaNoError\fP = 0, \fBpaNotInitialized\fP = -10000, \fBpaUnanticipatedHostError\fP, \fBpaInvalidChannelCount\fP, \fBpaInvalidSampleRate\fP, \fBpaInvalidDevice\fP, \fBpaInvalidFlag\fP, \fBpaSampleFormatNotSupported\fP, \fBpaBadIODeviceCombination\fP, \fBpaInsufficientMemory\fP, \fBpaBufferTooBig\fP, \fBpaBufferTooSmall\fP, \fBpaNullCallback\fP, \fBpaBadStreamPtr\fP, \fBpaTimedOut\fP, \fBpaInternalError\fP, \fBpaDeviceUnavailable\fP, \fBpaIncompatibleHostApiSpecificStreamInfo\fP, \fBpaStreamIsStopped\fP, \fBpaStreamIsNotStopped\fP, \fBpaInputOverflowed\fP, \fBpaOutputUnderflowed\fP, \fBpaHostApiNotFound\fP, \fBpaInvalidHostApi\fP, \fBpaCanNotReadFromACallbackStream\fP, \fBpaCanNotWriteToACallbackStream\fP, \fBpaCanNotReadFromAnOutputOnlyStream\fP, \fBpaCanNotWriteToAnInputOnlyStream\fP, \fBpaIncompatibleStreamHostApi\fP, \fBpaBadBufferPtr\fP }"
.br
.ti -1c
.RI "enum \fBPaHostApiTypeId\fP { \fBpaInDevelopment\fP =0, \fBpaDirectSound\fP =1, \fBpaMME\fP =2, \fBpaASIO\fP =3, \fBpaSoundManager\fP =4, \fBpaCoreAudio\fP =5, \fBpaOSS\fP =7, \fBpaALSA\fP =8, \fBpaAL\fP =9, \fBpaBeOS\fP =10, \fBpaWDMKS\fP =11, \fBpaJACK\fP =12, \fBpaWASAPI\fP =13, \fBpaAudioScienceHPI\fP =14 }"
.br
.ti -1c
.RI "enum \fBPaStreamCallbackResult\fP { \fBpaContinue\fP =0, \fBpaComplete\fP =1, \fBpaAbort\fP =2 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBint\fP \fBPa_GetVersion\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBPa_GetVersionText\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaVersionInfo\fP * \fBPa_GetVersionInfo\fP ()"
.br
.ti -1c
.RI "\fBconst\fP char * \fBPa_GetErrorText\fP (\fBPaError\fP \fBerrorCode\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_Initialize\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_Terminate\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaHostApiIndex\fP \fBPa_GetHostApiCount\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaHostApiIndex\fP \fBPa_GetDefaultHostApi\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaHostApiInfo\fP * \fBPa_GetHostApiInfo\fP (\fBPaHostApiIndex\fP hostApi)"
.br
.ti -1c
.RI "\fBPaHostApiIndex\fP \fBPa_HostApiTypeIdToHostApiIndex\fP (\fBPaHostApiTypeId\fP type)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_HostApiDeviceIndexToDeviceIndex\fP (\fBPaHostApiIndex\fP hostApi, \fBint\fP hostApiDeviceIndex)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaHostErrorInfo\fP * \fBPa_GetLastHostErrorInfo\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_GetDeviceCount\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_GetDefaultInputDevice\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBPaDeviceIndex\fP \fBPa_GetDefaultOutputDevice\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaDeviceInfo\fP * \fBPa_GetDeviceInfo\fP (\fBPaDeviceIndex\fP device)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_IsFormatSupported\fP (\fBconst\fP \fBPaStreamParameters\fP *inputParameters, \fBconst\fP \fBPaStreamParameters\fP *outputParameters, double sampleRate)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_OpenStream\fP (\fBPaStream\fP **stream, \fBconst\fP \fBPaStreamParameters\fP *inputParameters, \fBconst\fP \fBPaStreamParameters\fP *outputParameters, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamFlags\fP streamFlags, \fBPaStreamCallback\fP *streamCallback, \fBvoid\fP *\fBuserData\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_OpenDefaultStream\fP (\fBPaStream\fP **stream, \fBint\fP numInputChannels, \fBint\fP numOutputChannels, \fBPaSampleFormat\fP \fBsampleFormat\fP, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamCallback\fP *streamCallback, \fBvoid\fP *\fBuserData\fP)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_CloseStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_SetStreamFinishedCallback\fP (\fBPaStream\fP *stream, \fBPaStreamFinishedCallback\fP *streamFinishedCallback)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_StartStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_StopStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_AbortStream\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_IsStreamStopped\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_IsStreamActive\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBconst\fP \fBPaStreamInfo\fP * \fBPa_GetStreamInfo\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaTime\fP \fBPa_GetStreamTime\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "double \fBPa_GetStreamCpuLoad\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_ReadStream\fP (\fBPaStream\fP *stream, \fBvoid\fP *\fBbuffer\fP, unsigned long frames)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_WriteStream\fP (\fBPaStream\fP *stream, \fBconst\fP \fBvoid\fP *\fBbuffer\fP, unsigned long frames)"
.br
.ti -1c
.RI "signed long \fBPa_GetStreamReadAvailable\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "signed long \fBPa_GetStreamWriteAvailable\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaHostApiTypeId\fP \fBPa_GetStreamHostApiType\fP (\fBPaStream\fP *stream)"
.br
.ti -1c
.RI "\fBPaError\fP \fBPa_GetSampleSize\fP (\fBPaSampleFormat\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPa_Sleep\fP (long msec)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The portable PortAudio API\&. 


.PP
Definition in file \fBportaudio\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define paClipOff   ((\fBPaStreamFlags\fP) 0x00000001)"
Disable default clipping of out of range samples\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFlags\fP 
.RE
.PP

.PP
Definition at line 644 of file portaudio\&.h\&.
.SS "#define paCustomFormat   ((\fBPaSampleFormat\fP) 0x00010000)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 476 of file portaudio\&.h\&.
.SS "#define paDitherOff   ((\fBPaStreamFlags\fP) 0x00000002)"
Disable default dithering\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFlags\fP 
.RE
.PP

.PP
Definition at line 649 of file portaudio\&.h\&.
.SS "#define paFloat32   ((\fBPaSampleFormat\fP) 0x00000001)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 470 of file portaudio\&.h\&.
.SS "#define paFormatIsSupported   (0)"
Return code for Pa_IsFormatSupported indicating success\&. 
.PP
Definition at line 568 of file portaudio\&.h\&.
.SS "#define paFramesPerBufferUnspecified   (0)"
Can be passed as the framesPerBuffer parameter to \fBPa_OpenStream()\fP or \fBPa_OpenDefaultStream()\fP to indicate that the stream callback will accept buffers of any size\&. 
.PP
Definition at line 625 of file portaudio\&.h\&.
.SS "#define paInputOverflow   ((\fBPaStreamCallbackFlags\fP) 0x00000002)"
In a stream opened with paFramesPerBufferUnspecified, indicates that data prior to the first sample of the input buffer was discarded due to an overflow, possibly because the stream callback is using too much CPU time\&. Otherwise indicates that data prior to one or more samples in the input buffer was discarded\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallbackFlags\fP 
.RE
.PP

.PP
Definition at line 713 of file portaudio\&.h\&.
.SS "#define paInputUnderflow   ((\fBPaStreamCallbackFlags\fP) 0x00000001)"
In a stream opened with paFramesPerBufferUnspecified, indicates that input data is all silence (zeros) because no real data is available\&. In a stream opened without paFramesPerBufferUnspecified, it indicates that one or more zero samples have been inserted into the input buffer to compensate for an input underflow\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallbackFlags\fP 
.RE
.PP

.PP
Definition at line 704 of file portaudio\&.h\&.
.SS "#define paInt16   ((\fBPaSampleFormat\fP) 0x00000008)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 473 of file portaudio\&.h\&.
.SS "#define paInt24   ((\fBPaSampleFormat\fP) 0x00000004)"
Packed 24 bit format\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 472 of file portaudio\&.h\&.
.SS "#define paInt32   ((\fBPaSampleFormat\fP) 0x00000002)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 471 of file portaudio\&.h\&.
.SS "#define paInt8   ((\fBPaSampleFormat\fP) 0x00000010)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 474 of file portaudio\&.h\&.
.SS "#define paMakeVersionNumber(major, minor, subminor)   (((major)&0xFF)<<16 | ((minor)&0xFF)<<8 | ((subminor)&0xFF))"
Generate a packed integer version number in the same format used by \fBPa_GetVersion()\fP\&. Use this to compare a specified version number with the currently running version\&. For example:
.PP
if (\fBPa_GetVersion()\fP < \fBpaMakeVersionNumber(19,5,1)\fP) {} 
.PP
Definition at line 72 of file portaudio\&.h\&.
.SS "#define paNeverDropInput   ((\fBPaStreamFlags\fP) 0x00000004)"
Flag requests that where possible a full duplex stream will not discard overflowed input samples without calling the stream callback\&. This flag is only valid for full duplex callback streams and only when used in combination with the paFramesPerBufferUnspecified (0) framesPerBuffer parameter\&. Using this flag incorrectly results in a paInvalidFlag error being returned from Pa_OpenStream and Pa_OpenDefaultStream\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFlags\fP, \fBpaFramesPerBufferUnspecified\fP 
.RE
.PP

.PP
Definition at line 660 of file portaudio\&.h\&.
.SS "#define paNoDevice   ((\fBPaDeviceIndex\fP)\-1)"
A special PaDeviceIndex value indicating that no device is available, or should be used\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaDeviceIndex\fP 
.RE
.PP

.PP
Definition at line 203 of file portaudio\&.h\&.
.SS "#define paNoFlag   ((\fBPaStreamFlags\fP) 0)"

.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFlags\fP 
.RE
.PP

.PP
Definition at line 639 of file portaudio\&.h\&.
.SS "#define paNonInterleaved   ((\fBPaSampleFormat\fP) 0x80000000)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 478 of file portaudio\&.h\&.
.SS "#define paOutputOverflow   ((\fBPaStreamCallbackFlags\fP) 0x00000008)"
Indicates that output data will be discarded because no room is available\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallbackFlags\fP 
.RE
.PP

.PP
Definition at line 724 of file portaudio\&.h\&.
.SS "#define paOutputUnderflow   ((\fBPaStreamCallbackFlags\fP) 0x00000004)"
Indicates that output data (or a gap) was inserted, possibly because the stream callback is using too much CPU time\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallbackFlags\fP 
.RE
.PP

.PP
Definition at line 719 of file portaudio\&.h\&.
.SS "#define paPlatformSpecificFlags   ((\fBPaStreamFlags\fP)0xFFFF0000)"
A mask specifying the platform specific bits\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFlags\fP 
.RE
.PP

.PP
Definition at line 673 of file portaudio\&.h\&.
.SS "#define paPrimeOutputBuffersUsingStreamCallback   ((\fBPaStreamFlags\fP) 0x00000008)"
Call the stream callback to fill initial output buffers, rather than the default behavior of priming the buffers with zeros (silence)\&. This flag has no effect for input-only and blocking read/write streams\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFlags\fP 
.RE
.PP

.PP
Definition at line 668 of file portaudio\&.h\&.
.SS "#define paPrimingOutput   ((\fBPaStreamCallbackFlags\fP) 0x00000010)"
Some of all of the output data will be used to prime the stream, input data may be zero\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallbackFlags\fP 
.RE
.PP

.PP
Definition at line 730 of file portaudio\&.h\&.
.SS "#define paUInt8   ((\fBPaSampleFormat\fP) 0x00000020)"

.PP
\fBSee also:\fP
.RS 4
\fBPaSampleFormat\fP 
.RE
.PP

.PP
Definition at line 475 of file portaudio\&.h\&.
.SS "#define paUseHostApiSpecificDeviceSpecification   ((\fBPaDeviceIndex\fP)\-2)"
A special PaDeviceIndex value indicating that the device(s) to be used are specified in the host api specific stream info structure\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaDeviceIndex\fP 
.RE
.PP

.PP
Definition at line 211 of file portaudio\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBint\fP \fBPaDeviceIndex\fP"
The type used to refer to audio devices\&. Values of this type usually range from 0 to (\fBPa_GetDeviceCount()\fP-1), and may also take on the PaNoDevice and paUseHostApiSpecificDeviceSpecification values\&.
.PP
\fBSee also:\fP
.RS 4
\fBPa_GetDeviceCount\fP, \fBpaNoDevice\fP, \fBpaUseHostApiSpecificDeviceSpecification\fP 
.RE
.PP

.PP
Definition at line 195 of file portaudio\&.h\&.
.SS "typedef struct \fBPaDeviceInfo\fP  \fBPaDeviceInfo\fP"
A structure providing information and capabilities of PortAudio devices\&. Devices may support input, output or both input and output\&. 
.SS "typedef \fBint\fP \fBPaError\fP"
Error codes returned by PortAudio functions\&. Note that with the exception of paNoError, all PaErrorCodes are negative\&. 
.PP
Definition at line 104 of file portaudio\&.h\&.
.SS "typedef enum \fBPaErrorCode\fP  \fBPaErrorCode\fP"

.SS "typedef \fBint\fP \fBPaHostApiIndex\fP"
The type used to enumerate to host APIs at runtime\&. Values of this type range from 0 to (\fBPa_GetHostApiCount()\fP-1)\&.
.PP
\fBSee also:\fP
.RS 4
\fBPa_GetHostApiCount\fP 
.RE
.PP

.PP
Definition at line 221 of file portaudio\&.h\&.
.SS "typedef struct \fBPaHostApiInfo\fP  \fBPaHostApiInfo\fP"
A structure containing information about a particular host API\&. 
.SS "typedef enum \fBPaHostApiTypeId\fP  \fBPaHostApiTypeId\fP"
Unchanging unique identifiers for each supported host API\&. This type is used in the \fBPaHostApiInfo\fP structure\&. The values are guaranteed to be unique and to never change, thus allowing code to be written that conditionally uses host API specific extensions\&.
.PP
New type ids will be allocated when support for a host API reaches 'public alpha' status, prior to that developers should use the paInDevelopment type id\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiInfo\fP 
.RE
.PP

.SS "typedef struct \fBPaHostErrorInfo\fP \fBPaHostErrorInfo\fP"
Structure used to return information about a host error condition\&. 
.SS "typedef unsigned long \fBPaSampleFormat\fP"
A type used to specify one or more sample formats\&. Each value indicates a possible format for sound data passed to and from the stream callback, Pa_ReadStream and Pa_WriteStream\&.
.PP
The standard formats paFloat32, paInt16, paInt32, paInt24, paInt8 and aUInt8 are usually implemented by all implementations\&.
.PP
The floating point representation (paFloat32) uses +1\&.0 and -1\&.0 as the maximum and minimum respectively\&.
.PP
paUInt8 is an unsigned 8 bit format where 128 is considered 'ground'
.PP
The paNonInterleaved flag indicates that audio data is passed as an array of pointers to separate buffers, one buffer for each channel\&. Usually, when this flag is not used, audio data is passed as a single buffer with all channels interleaved\&.
.PP
\fBSee also:\fP
.RS 4
\fBPa_OpenStream\fP, \fBPa_OpenDefaultStream\fP, \fBPaDeviceInfo\fP 
.PP
\fBpaFloat32\fP, \fBpaInt16\fP, \fBpaInt32\fP, \fBpaInt24\fP, \fBpaInt8\fP 
.PP
\fBpaUInt8\fP, \fBpaCustomFormat\fP, \fBpaNonInterleaved\fP 
.RE
.PP

.PP
Definition at line 467 of file portaudio\&.h\&.
.SS "typedef \fBvoid\fP \fBPaStream\fP"
A single PaStream can provide multiple channels of real-time streaming audio input and output to a client application\&. A stream provides access to audio hardware represented by one or more PaDevices\&. Depending on the underlying Host API, it may be possible to open multiple streams using the same device, however this behavior is implementation defined\&. Portable applications should assume that a PaDevice may be simultaneously used by at most one PaStream\&.
.PP
Pointers to PaStream objects are passed between PortAudio functions that operate on streams\&.
.PP
\fBSee also:\fP
.RS 4
\fBPa_OpenStream\fP, \fBPa_OpenDefaultStream\fP, \fBPa_OpenDefaultStream\fP, \fBPa_CloseStream\fP, \fBPa_StartStream\fP, \fBPa_StopStream\fP, \fBPa_AbortStream\fP, \fBPa_IsStreamActive\fP, \fBPa_GetStreamTime\fP, \fBPa_GetStreamCpuLoad\fP 
.RE
.PP

.PP
Definition at line 618 of file portaudio\&.h\&.
.SS "typedef \fBint\fP PaStreamCallback(\fBconst\fP \fBvoid\fP *input, \fBvoid\fP *\fBoutput\fP, unsigned long frameCount, \fBconst\fP \fBPaStreamCallbackTimeInfo\fP *timeInfo, \fBPaStreamCallbackFlags\fP statusFlags, \fBvoid\fP *\fBuserData\fP)"
Functions of type PaStreamCallback are implemented by PortAudio clients\&. They consume, process or generate audio in response to requests from an active PortAudio stream\&.
.PP
When a stream is running, PortAudio calls the stream callback periodically\&. The callback function is responsible for processing buffers of audio samples passed via the input and output parameters\&.
.PP
The PortAudio stream callback runs at very high or real-time priority\&. It is required to consistently meet its time deadlines\&. Do not allocate memory, access the file system, call library functions or call other functions from the stream callback that may block or take an unpredictable amount of time to complete\&.
.PP
In order for a stream to maintain glitch-free operation the callback must consume and return audio data faster than it is recorded and/or played\&. PortAudio anticipates that each callback invocation may execute for a duration approaching the duration of frameCount audio frames at the stream sample rate\&. It is reasonable to expect to be able to utilise 70% or more of the available CPU time in the PortAudio callback\&. However, due to buffer size adaption and other factors, not all host APIs are able to guarantee audio stability under heavy CPU load with arbitrary fixed callback buffer sizes\&. When high callback CPU utilisation is required the most robust behavior can be achieved by using paFramesPerBufferUnspecified as the \fBPa_OpenStream()\fP framesPerBuffer parameter\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP and 
.br
\fIoutput\fP are either arrays of interleaved samples or; if non-interleaved samples were requested using the paNonInterleaved sample format flag, an array of buffer pointers, one non-interleaved buffer for each channel\&.
.RE
.PP
The format, packing and number of channels used by the buffers are determined by parameters to \fBPa_OpenStream()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIframeCount\fP The number of sample frames to be processed by the stream callback\&.
.br
\fItimeInfo\fP Timestamps indicating the ADC capture time of the first sample in the input buffer, the DAC output time of the first sample in the output buffer and the time the callback was invoked\&. See \fBPaStreamCallbackTimeInfo\fP and \fBPa_GetStreamTime()\fP
.br
\fIstatusFlags\fP Flags indicating whether input and/or output buffers have been inserted or will be dropped to overcome underflow or overflow conditions\&.
.br
\fIuserData\fP The value of a user supplied pointer passed to \fBPa_OpenStream()\fP intended for storing synthesis data etc\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The stream callback should return one of the values in the \fBPaStreamCallbackResult\fP enumeration\&. To ensure that the callback continues to be called, it should return paContinue (0)\&. Either paComplete or paAbort can be returned to finish stream processing, after either of these values is returned the callback will not be called again\&. If paAbort is returned the stream will finish as soon as possible\&. If paComplete is returned, the stream will continue until all buffers generated by the callback have been played\&. This may be useful in applications such as soundfile players where a specific duration of output is required\&. However, it is not necessary to utilize this mechanism as \fBPa_StopStream()\fP, \fBPa_AbortStream()\fP or \fBPa_CloseStream()\fP can also be used to stop the stream\&. The callback must always fill the entire output buffer irrespective of its return value\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_OpenStream\fP, \fBPa_OpenDefaultStream\fP
.RE
.PP
\fBNote:\fP
.RS 4
With the exception of \fBPa_GetStreamCpuLoad()\fP it is not permissible to call PortAudio API functions from within the stream callback\&. 
.RE
.PP

.PP
Definition at line 813 of file portaudio\&.h\&.
.SS "typedef unsigned long \fBPaStreamCallbackFlags\fP"
Flag bit constants for the statusFlags to PaStreamCallback\&.
.PP
\fBSee also:\fP
.RS 4
\fBpaInputUnderflow\fP, \fBpaInputOverflow\fP, \fBpaOutputUnderflow\fP, \fBpaOutputOverflow\fP, \fBpaPrimingOutput\fP 
.RE
.PP

.PP
Definition at line 695 of file portaudio\&.h\&.
.SS "typedef enum \fBPaStreamCallbackResult\fP  \fBPaStreamCallbackResult\fP"
Allowable return values for the PaStreamCallback\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallback\fP 
.RE
.PP

.SS "typedef struct \fBPaStreamCallbackTimeInfo\fP  \fBPaStreamCallbackTimeInfo\fP"
Timing information for the buffers passed to the stream callback\&.
.PP
Time values are expressed in seconds and are synchronised with the time base used by \fBPa_GetStreamTime()\fP for the associated stream\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallback\fP, \fBPa_GetStreamTime\fP 
.RE
.PP

.SS "typedef \fBvoid\fP PaStreamFinishedCallback(\fBvoid\fP *\fBuserData\fP)"
Functions of type PaStreamFinishedCallback are implemented by PortAudio clients\&. They can be registered with a stream using the Pa_SetStreamFinishedCallback function\&. Once registered they are called when the stream becomes inactive (ie once a call to \fBPa_StopStream()\fP will not block)\&. A stream will become inactive after the stream callback returns non-zero, or when Pa_StopStream or Pa_AbortStream is called\&. For a stream providing audio output, if the stream callback returns paComplete, or Pa_StopStream is called, the stream finished callback will not be called until all generated sample data has been played\&.
.PP
\fBParameters:\fP
.RS 4
\fIuserData\fP The userData parameter supplied to \fBPa_OpenStream()\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_SetStreamFinishedCallback\fP 
.RE
.PP

.PP
Definition at line 945 of file portaudio\&.h\&.
.SS "typedef unsigned long \fBPaStreamFlags\fP"
Flags used to control the behavior of a stream\&. They are passed as parameters to Pa_OpenStream or Pa_OpenDefaultStream\&. Multiple flags may be ORed together\&.
.PP
\fBSee also:\fP
.RS 4
\fBPa_OpenStream\fP, \fBPa_OpenDefaultStream\fP 
.PP
\fBpaNoFlag\fP, \fBpaClipOff\fP, \fBpaDitherOff\fP, \fBpaNeverDropInput\fP, \fBpaPrimeOutputBuffersUsingStreamCallback\fP, \fBpaPlatformSpecificFlags\fP 
.RE
.PP

.PP
Definition at line 636 of file portaudio\&.h\&.
.SS "typedef struct \fBPaStreamInfo\fP  \fBPaStreamInfo\fP"
A structure containing unchanging information about an open stream\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPa_GetStreamInfo\fP 
.RE
.PP

.SS "typedef struct \fBPaStreamParameters\fP  \fBPaStreamParameters\fP"
Parameters for one direction (input or output) of a stream\&. 
.SS "typedef double \fBPaTime\fP"
The type used to represent monotonic time in seconds\&. PaTime is used for the fields of the \fBPaStreamCallbackTimeInfo\fP argument to the PaStreamCallback and as the result of \fBPa_GetStreamTime()\fP\&.
.PP
PaTime values have unspecified origin\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallback\fP, \fBPaStreamCallbackTimeInfo\fP, \fBPa_GetStreamTime\fP 
.RE
.PP

.PP
Definition at line 443 of file portaudio\&.h\&.
.SS "typedef struct \fBPaVersionInfo\fP  \fBPaVersionInfo\fP"
A structure containing the components of the version numbers\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBPaErrorCode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIpaNoError \fP\fP
.TP
\fB\fIpaNotInitialized \fP\fP
.TP
\fB\fIpaUnanticipatedHostError \fP\fP
.TP
\fB\fIpaInvalidChannelCount \fP\fP
.TP
\fB\fIpaInvalidSampleRate \fP\fP
.TP
\fB\fIpaInvalidDevice \fP\fP
.TP
\fB\fIpaInvalidFlag \fP\fP
.TP
\fB\fIpaSampleFormatNotSupported \fP\fP
.TP
\fB\fIpaBadIODeviceCombination \fP\fP
.TP
\fB\fIpaInsufficientMemory \fP\fP
.TP
\fB\fIpaBufferTooBig \fP\fP
.TP
\fB\fIpaBufferTooSmall \fP\fP
.TP
\fB\fIpaNullCallback \fP\fP
.TP
\fB\fIpaBadStreamPtr \fP\fP
.TP
\fB\fIpaTimedOut \fP\fP
.TP
\fB\fIpaInternalError \fP\fP
.TP
\fB\fIpaDeviceUnavailable \fP\fP
.TP
\fB\fIpaIncompatibleHostApiSpecificStreamInfo \fP\fP
.TP
\fB\fIpaStreamIsStopped \fP\fP
.TP
\fB\fIpaStreamIsNotStopped \fP\fP
.TP
\fB\fIpaInputOverflowed \fP\fP
.TP
\fB\fIpaOutputUnderflowed \fP\fP
.TP
\fB\fIpaHostApiNotFound \fP\fP
.TP
\fB\fIpaInvalidHostApi \fP\fP
.TP
\fB\fIpaCanNotReadFromACallbackStream \fP\fP
.TP
\fB\fIpaCanNotWriteToACallbackStream \fP\fP
.TP
\fB\fIpaCanNotReadFromAnOutputOnlyStream \fP\fP
.TP
\fB\fIpaCanNotWriteToAnInputOnlyStream \fP\fP
.TP
\fB\fIpaIncompatibleStreamHostApi \fP\fP
.TP
\fB\fIpaBadBufferPtr \fP\fP
.PP
Definition at line 105 of file portaudio\&.h\&.
.SS "enum \fBPaHostApiTypeId\fP"
Unchanging unique identifiers for each supported host API\&. This type is used in the \fBPaHostApiInfo\fP structure\&. The values are guaranteed to be unique and to never change, thus allowing code to be written that conditionally uses host API specific extensions\&.
.PP
New type ids will be allocated when support for a host API reaches 'public alpha' status, prior to that developers should use the paInDevelopment type id\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiInfo\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIpaInDevelopment \fP\fP
.TP
\fB\fIpaDirectSound \fP\fP
.TP
\fB\fIpaMME \fP\fP
.TP
\fB\fIpaASIO \fP\fP
.TP
\fB\fIpaSoundManager \fP\fP
.TP
\fB\fIpaCoreAudio \fP\fP
.TP
\fB\fIpaOSS \fP\fP
.TP
\fB\fIpaALSA \fP\fP
.TP
\fB\fIpaAL \fP\fP
.TP
\fB\fIpaBeOS \fP\fP
.TP
\fB\fIpaWDMKS \fP\fP
.TP
\fB\fIpaJACK \fP\fP
.TP
\fB\fIpaWASAPI \fP\fP
.TP
\fB\fIpaAudioScienceHPI \fP\fP
.PP
Definition at line 258 of file portaudio\&.h\&.
.SS "enum \fBPaStreamCallbackResult\fP"
Allowable return values for the PaStreamCallback\&. 
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamCallback\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIpaContinue \fP\fP
Signal that the stream should continue invoking the callback and processing audio\&. 
.TP
\fB\fIpaComplete \fP\fP
Signal that the stream should stop invoking the callback and finish once all output samples have played\&. 
.TP
\fB\fIpaAbort \fP\fP
Signal that the stream should stop invoking the callback and finish as soon as possible\&. 
.PP
Definition at line 736 of file portaudio\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBPaError\fP Pa_AbortStream (\fBPaStream\fP * stream)"
Terminates audio processing immediately without waiting for pending buffers to complete\&. 
.PP
Definition at line 1483 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_CloseStream (\fBPaStream\fP * stream)"
Closes an audio stream\&. If the audio stream is active it discards any pending buffers as if \fBPa_AbortStream()\fP had been called\&. 
.PP
\fBTodo\fP
.RS 4
REVIEW: shouldn't we close anyway? see: http://www.portaudio.com/trac/ticket/115 
.RE
.PP

.PP
Definition at line 1368 of file pa_front\&.c\&.
.SS "\fBPaHostApiIndex\fP Pa_GetDefaultHostApi (\fBvoid\fP)"
Retrieve the index of the default host API\&. The default host API will be the lowest common denominator host API on the current platform and is unlikely to provide the best performance\&.
.PP
\fBReturns:\fP
.RS 4
A non-negative value ranging from 0 to (\fBPa_GetHostApiCount()\fP-1) indicating the default host API index or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 572 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_GetDefaultInputDevice (\fBvoid\fP)"
Retrieve the index of the default input device\&. The result can be used in the inputDevice parameter to \fBPa_OpenStream()\fP\&.
.PP
\fBReturns:\fP
.RS 4
The default input device index for the default host API, or paNoDevice if no default input device is available or an error was encountered\&. 
.RE
.PP

.PP
Definition at line 701 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_GetDefaultOutputDevice (\fBvoid\fP)"
Retrieve the index of the default output device\&. The result can be used in the outputDevice parameter to \fBPa_OpenStream()\fP\&.
.PP
\fBReturns:\fP
.RS 4
The default output device index for the default host API, or paNoDevice if no default output device is available or an error was encountered\&.
.RE
.PP
\fBNote:\fP
.RS 4
On the PC, the user can specify a default device by setting an environment variable\&. For example, to use device #1\&. 
.PP
.nf

 set PA_RECOMMENDED_OUTPUT_DEVICE=1
.fi
.PP
 The user should first determine the available device ids by using the supplied application 'pa_devs'\&. 
.RE
.PP

.PP
Definition at line 724 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_GetDeviceCount (\fBvoid\fP)"
Retrieve the number of available devices\&. The number of available devices may be zero\&.
.PP
\fBReturns:\fP
.RS 4
A non-negative value indicating the number of available devices or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 680 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaDeviceInfo\fP* Pa_GetDeviceInfo (\fBPaDeviceIndex\fP device)"
Retrieve a pointer to a \fBPaDeviceInfo\fP structure containing information about the specified device\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable \fBPaDeviceInfo\fP structure\&. If the device parameter is out of range the function returns NULL\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP A valid device index in the range 0 to (\fBPa_GetDeviceCount()\fP-1)
.RE
.PP
\fBNote:\fP
.RS 4
PortAudio manages the memory referenced by the returned pointer, the client must not manipulate or free the memory\&. The pointer is only guaranteed to be valid between calls to \fBPa_Initialize()\fP and \fBPa_Terminate()\fP\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaDeviceInfo\fP, \fBPaDeviceIndex\fP 
.RE
.PP

.PP
Definition at line 747 of file pa_front\&.c\&.
.SS "\fBconst\fP char* Pa_GetErrorText (\fBPaError\fP errorCode)"
Translate the supplied PortAudio error code into a human readable message\&. 
.PP
\fBTodo\fP
.RS 4
could catenate the last host error text to result in the case of paUnanticipatedHostError\&. see: http://www.portaudio.com/trac/ticket/114 
.RE
.PP

.PP
Definition at line 420 of file pa_front\&.c\&.
.SS "\fBPaHostApiIndex\fP Pa_GetHostApiCount (\fBvoid\fP)"
Retrieve the number of available host APIs\&. Even if a host API is available it may have no devices available\&.
.PP
\fBReturns:\fP
.RS 4
A non-negative value indicating the number of available host APIs or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiIndex\fP 
.RE
.PP

.PP
Definition at line 551 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaHostApiInfo\fP* Pa_GetHostApiInfo (\fBPaHostApiIndex\fP hostApi)"
Retrieve a pointer to a structure containing information about a specific host Api\&.
.PP
\fBParameters:\fP
.RS 4
\fIhostApi\fP A valid host API index ranging from 0 to (\fBPa_GetHostApiCount()\fP-1)
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable \fBPaHostApiInfo\fP structure describing a specific host API\&. If the hostApi parameter is out of range or an error is encountered, the function returns NULL\&.
.RE
.PP
The returned structure is owned by the PortAudio implementation and must not be manipulated or freed\&. The pointer is only guaranteed to be valid between calls to \fBPa_Initialize()\fP and \fBPa_Terminate()\fP\&. 
.PP
Definition at line 601 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaHostErrorInfo\fP* Pa_GetLastHostErrorInfo (\fBvoid\fP)"
Return information about the last host error encountered\&. The error information returned by \fBPa_GetLastHostErrorInfo()\fP will never be modified asynchronously by errors occurring in other PortAudio owned threads (such as the thread that manages the stream callback\&.)
.PP
This function is provided as a last resort, primarily to enhance debugging by providing clients with access to all available error information\&.
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable structure constraining information about the host error\&. The values in this structure will only be valid if a PortAudio function has previously returned the paUnanticipatedHostError error code\&. 
.RE
.PP

.PP
Definition at line 414 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_GetSampleSize (\fBPaSampleFormat\fP format)"
Retrieve the size of a given sample format in bytes\&.
.PP
\fBReturns:\fP
.RS 4
The size in bytes of a single sample in the specified format, or paSampleFormatNotSupported if the format is not supported\&. 
.RE
.PP

.PP
Definition at line 1800 of file pa_front\&.c\&.
.SS "double Pa_GetStreamCpuLoad (\fBPaStream\fP * stream)"
Retrieve CPU usage information for the specified stream\&. The 'CPU Load' is a fraction of total CPU time consumed by a callback stream's audio processing routines including, but not limited to the client supplied stream callback\&. This function does not work with blocking read/write streams\&.
.PP
This function may be called from the stream callback function or the application\&.
.PP
\fBReturns:\fP
.RS 4
A floating point value, typically between 0\&.0 and 1\&.0, where 1\&.0 indicates that the stream callback is consuming the maximum number of CPU cycles possible to maintain real-time operation\&. A value of 0\&.5 would imply that PortAudio and the stream callback was consuming roughly 50% of the available CPU time\&. The return value may exceed 1\&.0\&. A value of 0\&.0 will always be returned for a blocking read/write stream, or if an error occurs\&. 
.RE
.PP

.PP
Definition at line 1607 of file pa_front\&.c\&.
.SS "\fBPaHostApiTypeId\fP Pa_GetStreamHostApiType (\fBPaStream\fP * stream)"
Retrieve the host type handling an open stream\&.
.PP
\fBReturns:\fP
.RS 4
Returns a non-negative value representing the host API type handling an open stream or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 1773 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaStreamInfo\fP* Pa_GetStreamInfo (\fBPaStream\fP * stream)"
Retrieve a pointer to a \fBPaStreamInfo\fP structure containing information about the specified stream\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to an immutable \fBPaStreamInfo\fP structure\&. If the stream parameter is invalid, or an error is encountered, the function returns NULL\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP A pointer to an open stream previously created with Pa_OpenStream\&.
.RE
.PP
\fBNote:\fP
.RS 4
PortAudio manages the memory referenced by the returned pointer, the client must not manipulate or free the memory\&. The pointer is only guaranteed to be valid until the specified stream is closed\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamInfo\fP 
.RE
.PP

.PP
Definition at line 1542 of file pa_front\&.c\&.
.SS "signed long Pa_GetStreamReadAvailable (\fBPaStream\fP * stream)"
Retrieve the number of frames that can be read from the stream without waiting\&.
.PP
\fBReturns:\fP
.RS 4
Returns a non-negative value representing the maximum number of frames that can be read from the stream without blocking or busy waiting or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 1716 of file pa_front\&.c\&.
.SS "\fBPaTime\fP Pa_GetStreamTime (\fBPaStream\fP * stream)"
Returns the current time in seconds for a stream according to the same clock used to generate callback \fBPaStreamCallbackTimeInfo\fP timestamps\&. The time values are monotonically increasing and have unspecified origin\&.
.PP
Pa_GetStreamTime returns valid time values for the entire life of the stream, from when the stream is opened until it is closed\&. Starting and stopping the stream does not affect the passage of time returned by Pa_GetStreamTime\&.
.PP
This time may be used for synchronizing other events to the audio stream, for example synchronizing audio to MIDI\&.
.PP
\fBReturns:\fP
.RS 4
The stream's current time in seconds, or 0 if an error occurred\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaTime\fP, \fBPaStreamCallback\fP, \fBPaStreamCallbackTimeInfo\fP 
.RE
.PP

.PP
Definition at line 1578 of file pa_front\&.c\&.
.SS "signed long Pa_GetStreamWriteAvailable (\fBPaStream\fP * stream)"
Retrieve the number of frames that can be written to the stream without waiting\&.
.PP
\fBReturns:\fP
.RS 4
Returns a non-negative value representing the maximum number of frames that can be written to the stream without blocking or busy waiting or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&. 
.RE
.PP

.PP
Definition at line 1745 of file pa_front\&.c\&.
.SS "\fBint\fP Pa_GetVersion (\fBvoid\fP)"
Retrieve the release number of the currently running PortAudio build\&. For example, for version '19\&.5\&.1' this will return 0x00130501\&. 
.PP
Definition at line 115 of file pa_front\&.c\&.
.SS "\fBconst\fP \fBPaVersionInfo\fP* Pa_GetVersionInfo ()"
The structure that this points to is statically allocated\&. Do not attempt to free it or modify it\&. 
.PP
Definition at line 133 of file pa_front\&.c\&.
.SS "\fBconst\fP char* Pa_GetVersionText (\fBvoid\fP)"
Retrieve a textual description of the current PortAudio build, eg 'PortAudio V19\&.5\&.0-devel, revision 1952M'\&. The format of the text may change so do not try to parse the returned string\&. 
.PP
\fBDeprecated\fP
.RS 4
use \fBPaVersionInfo()\fP instead 
.RE
.PP

.PP
Definition at line 120 of file pa_front\&.c\&.
.SS "\fBPaDeviceIndex\fP Pa_HostApiDeviceIndexToDeviceIndex (\fBPaHostApiIndex\fP hostApi, \fBint\fP hostApiDeviceIndex)"
Convert a host-API-specific device index to standard PortAudio device index\&. This function may be used in conjunction with the deviceCount field of \fBPaHostApiInfo\fP to enumerate all devices for the specified host API\&.
.PP
\fBParameters:\fP
.RS 4
\fIhostApi\fP A valid host API index ranging from 0 to (\fBPa_GetHostApiCount()\fP-1)
.br
\fIhostApiDeviceIndex\fP A valid per-host device index in the range 0 to (Pa_GetHostApiInfo(hostApi)->deviceCount-1)
.RE
.PP
\fBReturns:\fP
.RS 4
A non-negative PaDeviceIndex ranging from 0 to (\fBPa_GetDeviceCount()\fP-1) or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
A paInvalidHostApi error code indicates that the host API index specified by the hostApi parameter is out of range\&.
.PP
A paInvalidDevice error code indicates that the hostApiDeviceIndex parameter is out of range\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiInfo\fP 
.RE
.PP

.PP
Definition at line 642 of file pa_front\&.c\&.
.SS "\fBPaHostApiIndex\fP Pa_HostApiTypeIdToHostApiIndex (\fBPaHostApiTypeId\fP type)"
Convert a static host API unique identifier, into a runtime host API index\&.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP A unique host API identifier belonging to the PaHostApiTypeId enumeration\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A valid PaHostApiIndex ranging from 0 to (\fBPa_GetHostApiCount()\fP-1) or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
The paHostApiNotFound error code indicates that the host API specified by the type parameter is not available\&.
.PP
\fBSee also:\fP
.RS 4
\fBPaHostApiTypeId\fP 
.RE
.PP

.PP
Definition at line 468 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_Initialize (\fBvoid\fP)"
Library initialization function - call this before using PortAudio\&. This function initializes internal data structures and prepares underlying host APIs for use\&. With the exception of \fBPa_GetVersion()\fP, \fBPa_GetVersionText()\fP, and \fBPa_GetErrorText()\fP, this function MUST be called before using any other PortAudio API functions\&.
.PP
If \fBPa_Initialize()\fP is called multiple times, each successful call must be matched with a corresponding call to \fBPa_Terminate()\fP\&. Pairs of calls to \fBPa_Initialize()\fP/Pa_Terminate() may overlap, and are not required to be fully nested\&.
.PP
Note that if \fBPa_Initialize()\fP returns an error code, \fBPa_Terminate()\fP should NOT be called\&.
.PP
\fBReturns:\fP
.RS 4
paNoError if successful, otherwise an error code indicating the cause of failure\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_Terminate\fP 
.RE
.PP

.PP
Definition at line 355 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_IsFormatSupported (\fBconst\fP \fBPaStreamParameters\fP * inputParameters, \fBconst\fP \fBPaStreamParameters\fP * outputParameters, double sampleRate)"
Determine whether it would be possible to open a stream with the specified parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIinputParameters\fP A structure that describes the input parameters used to open a stream\&. The suggestedLatency field is ignored\&. See \fBPaStreamParameters\fP for a description of these parameters\&. inputParameters must be NULL for output-only streams\&.
.br
\fIoutputParameters\fP A structure that describes the output parameters used to open a stream\&. The suggestedLatency field is ignored\&. See \fBPaStreamParameters\fP for a description of these parameters\&. outputParameters must be NULL for input-only streams\&.
.br
\fIsampleRate\fP The required sampleRate\&. For full-duplex streams it is the sample rate for both input and output
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 if the format is supported, and an error code indicating why the format is not supported otherwise\&. The constant paFormatIsSupported is provided to compare with the return value for success\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpaFormatIsSupported\fP, \fBPaStreamParameters\fP 
.RE
.PP

.PP
Definition at line 1032 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_IsStreamActive (\fBPaStream\fP * stream)"
Determine whether the stream is active\&. A stream is active after a successful call to \fBPa_StartStream()\fP, until it becomes inactive either as a result of a call to \fBPa_StopStream()\fP or \fBPa_AbortStream()\fP, or as a result of a return value other than paContinue from the stream callback\&. In the latter case, the stream is considered inactive after the last buffer has finished playing\&.
.PP
\fBReturns:\fP
.RS 4
Returns one (1) when the stream is active (ie playing or recording audio), zero (0) when not playing or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_StopStream\fP, \fBPa_AbortStream\fP, \fBPa_IsStreamStopped\fP 
.RE
.PP

.PP
Definition at line 1525 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_IsStreamStopped (\fBPaStream\fP * stream)"
Determine whether the stream is stopped\&. A stream is considered to be stopped prior to a successful call to Pa_StartStream and after a successful call to Pa_StopStream or Pa_AbortStream\&. If a stream callback returns a value other than paContinue the stream is NOT considered to be stopped\&.
.PP
\fBReturns:\fP
.RS 4
Returns one (1) when the stream is stopped, zero (0) when the stream is running or, a PaErrorCode (which are always negative) if PortAudio is not initialized or an error is encountered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_StopStream\fP, \fBPa_AbortStream\fP, \fBPa_IsStreamActive\fP 
.RE
.PP

.PP
Definition at line 1509 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_OpenDefaultStream (\fBPaStream\fP ** stream, \fBint\fP numInputChannels, \fBint\fP numOutputChannels, \fBPaSampleFormat\fP sampleFormat, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamCallback\fP * streamCallback, \fBvoid\fP * userData)"
A simplified version of \fBPa_OpenStream()\fP that opens the default input and/or output devices\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP The address of a PaStream pointer which will receive a pointer to the newly opened stream\&.
.br
\fInumInputChannels\fP The number of channels of sound that will be supplied to the stream callback or returned by Pa_ReadStream\&. It can range from 1 to the value of maxInputChannels in the \fBPaDeviceInfo\fP record for the default input device\&. If 0 the stream is opened as an output-only stream\&.
.br
\fInumOutputChannels\fP The number of channels of sound to be delivered to the stream callback or passed to Pa_WriteStream\&. It can range from 1 to the value of maxOutputChannels in the \fBPaDeviceInfo\fP record for the default output device\&. If 0 the stream is opened as an output-only stream\&.
.br
\fIsampleFormat\fP The sample format of both the input and output buffers provided to the callback or passed to and from Pa_ReadStream and Pa_WriteStream\&. sampleFormat may be any of the formats described by the PaSampleFormat enumeration\&.
.br
\fIsampleRate\fP Same as Pa_OpenStream parameter of the same name\&. 
.br
\fIframesPerBuffer\fP Same as Pa_OpenStream parameter of the same name\&. 
.br
\fIstreamCallback\fP Same as Pa_OpenStream parameter of the same name\&. 
.br
\fIuserData\fP Same as Pa_OpenStream parameter of the same name\&.
.RE
.PP
\fBReturns:\fP
.RS 4
As for Pa_OpenStream
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_OpenStream\fP, \fBPaStreamCallback\fP 
.RE
.PP

.PP
Definition at line 1272 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_OpenStream (\fBPaStream\fP ** stream, \fBconst\fP \fBPaStreamParameters\fP * inputParameters, \fBconst\fP \fBPaStreamParameters\fP * outputParameters, double sampleRate, unsigned long framesPerBuffer, \fBPaStreamFlags\fP streamFlags, \fBPaStreamCallback\fP * streamCallback, \fBvoid\fP * userData)"
Opens a stream for either input, output or both\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP The address of a PaStream pointer which will receive a pointer to the newly opened stream\&.
.br
\fIinputParameters\fP A structure that describes the input parameters used by the opened stream\&. See \fBPaStreamParameters\fP for a description of these parameters\&. inputParameters must be NULL for output-only streams\&.
.br
\fIoutputParameters\fP A structure that describes the output parameters used by the opened stream\&. See \fBPaStreamParameters\fP for a description of these parameters\&. outputParameters must be NULL for input-only streams\&.
.br
\fIsampleRate\fP The desired sampleRate\&. For full-duplex streams it is the sample rate for both input and output
.br
\fIframesPerBuffer\fP The number of frames passed to the stream callback function, or the preferred block granularity for a blocking read/write stream\&. The special value paFramesPerBufferUnspecified (0) may be used to request that the stream callback will receive an optimal (and possibly varying) number of frames based on host requirements and the requested latency settings\&. Note: With some host APIs, the use of non-zero framesPerBuffer for a callback stream may introduce an additional layer of buffering which could introduce additional latency\&. PortAudio guarantees that the additional latency will be kept to the theoretical minimum however, it is strongly recommended that a non-zero framesPerBuffer value only be used when your algorithm requires a fixed number of frames per stream callback\&.
.br
\fIstreamFlags\fP Flags which modify the behavior of the streaming process\&. This parameter may contain a combination of flags ORed together\&. Some flags may only be relevant to certain buffer formats\&.
.br
\fIstreamCallback\fP A pointer to a client supplied function that is responsible for processing and filling input and output buffers\&. If this parameter is NULL the stream will be opened in 'blocking read/write' mode\&. In blocking mode, the client can receive sample data using Pa_ReadStream and write sample data using Pa_WriteStream, the number of samples that may be read or written without blocking is returned by Pa_GetStreamReadAvailable and Pa_GetStreamWriteAvailable respectively\&.
.br
\fIuserData\fP A client supplied pointer which is passed to the stream callback function\&. It could for example, contain a pointer to instance data necessary for processing the audio buffers\&. This parameter is ignored if streamCallback is NULL\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Upon success \fBPa_OpenStream()\fP returns paNoError and places a pointer to a valid PaStream in the stream argument\&. The stream is inactive (stopped)\&. If a call to \fBPa_OpenStream()\fP fails, a non-zero error code is returned (see PaError for possible error codes) and the value of stream is invalid\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamParameters\fP, \fBPaStreamCallback\fP, \fBPa_ReadStream\fP, \fBPa_WriteStream\fP, \fBPa_GetStreamReadAvailable\fP, \fBPa_GetStreamWriteAvailable\fP 
.RE
.PP

.PP
Definition at line 1136 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_ReadStream (\fBPaStream\fP * stream, \fBvoid\fP * buffer, unsigned long frames)"
Read samples from an input stream\&. The function doesn't return until the entire buffer has been filled - this may involve waiting for the operating system to supply the data\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP A pointer to an open stream previously created with Pa_OpenStream\&.
.br
\fIbuffer\fP A pointer to a buffer of sample frames\&. The buffer contains samples in the format specified by the inputParameters->sampleFormat field used to open the stream, and the number of channels specified by inputParameters->numChannels\&. If non-interleaved samples were requested using the paNonInterleaved sample format flag, buffer is a pointer to the first element of an array of buffer pointers, one non-interleaved buffer for each channel\&.
.br
\fIframes\fP The number of frames to be read into buffer\&. This parameter is not constrained to a specific range, however high performance applications will want to match this parameter to the framesPerBuffer parameter used when opening the stream\&.
.RE
.PP
\fBReturns:\fP
.RS 4
On success PaNoError will be returned, or PaInputOverflowed if input data was discarded by PortAudio after the previous call and before this call\&. 
.RE
.PP

.PP
Definition at line 1637 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_SetStreamFinishedCallback (\fBPaStream\fP * stream, \fBPaStreamFinishedCallback\fP * streamFinishedCallback)"
Register a stream finished callback function which will be called when the stream becomes inactive\&. See the description of PaStreamFinishedCallback for further details about when the callback will be called\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP a pointer to a PaStream that is in the stopped state - if the stream is not stopped, the stream's finished callback will remain unchanged and an error code will be returned\&.
.br
\fIstreamFinishedCallback\fP a pointer to a function with the same signature as PaStreamFinishedCallback, that will be called when the stream becomes inactive\&. Passing NULL for this parameter will un-register a previously registered stream finished callback function\&.
.RE
.PP
\fBReturns:\fP
.RS 4
on success returns paNoError, otherwise an error code indicating the cause of the error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPaStreamFinishedCallback\fP 
.RE
.PP

.PP
Definition at line 1402 of file pa_front\&.c\&.
.SS "\fBvoid\fP Pa_Sleep (long msec)"
Put the caller to sleep for at least 'msec' milliseconds\&. This function is provided only as a convenience for authors of portable code (such as the tests and examples in the PortAudio distribution\&.)
.PP
The function may sleep longer than requested so don't rely on this for accurate musical timing\&. 
.PP
Definition at line 108 of file pa_unix_util\&.c\&.
.SS "\fBPaError\fP Pa_StartStream (\fBPaStream\fP * stream)"
Commences audio processing\&. 
.PP
Definition at line 1431 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_StopStream (\fBPaStream\fP * stream)"
Terminates audio processing\&. It waits until all pending audio buffers have been played before it returns\&. 
.PP
Definition at line 1457 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_Terminate (\fBvoid\fP)"
Library termination function - call this when finished using PortAudio\&. This function deallocates all resources allocated by PortAudio since it was initialized by a call to \fBPa_Initialize()\fP\&. In cases where Pa_Initialise() has been called multiple times, each call must be matched with a corresponding call to \fBPa_Terminate()\fP\&. The final matching call to \fBPa_Terminate()\fP will automatically close any PortAudio streams that are still open\&.
.PP
\fBPa_Terminate()\fP MUST be called before exiting a program which uses PortAudio\&. Failure to do so may result in serious resource leaks, such as audio devices not being available until the next reboot\&.
.PP
\fBReturns:\fP
.RS 4
paNoError if successful, otherwise an error code indicating the cause of failure\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPa_Initialize\fP 
.RE
.PP

.PP
Definition at line 385 of file pa_front\&.c\&.
.SS "\fBPaError\fP Pa_WriteStream (\fBPaStream\fP * stream, \fBconst\fP \fBvoid\fP * buffer, unsigned long frames)"
Write samples to an output stream\&. This function doesn't return until the entire buffer has been consumed - this may involve waiting for the operating system to consume the data\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP A pointer to an open stream previously created with Pa_OpenStream\&.
.br
\fIbuffer\fP A pointer to a buffer of sample frames\&. The buffer contains samples in the format specified by the outputParameters->sampleFormat field used to open the stream, and the number of channels specified by outputParameters->numChannels\&. If non-interleaved samples were requested using the paNonInterleaved sample format flag, buffer is a pointer to the first element of an array of buffer pointers, one non-interleaved buffer for each channel\&.
.br
\fIframes\fP The number of frames to be written from buffer\&. This parameter is not constrained to a specific range, however high performance applications will want to match this parameter to the framesPerBuffer parameter used when opening the stream\&.
.RE
.PP
\fBReturns:\fP
.RS 4
On success PaNoError will be returned, or paOutputUnderflowed if additional output data was inserted after the previous call and before this call\&. 
.RE
.PP

.PP
Definition at line 1677 of file pa_front\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
