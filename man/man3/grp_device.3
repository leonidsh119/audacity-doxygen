.TH "grp_device" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
grp_device \- Input/Output Devices Handling
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPMEXPORT\fP \fBconst\fP \fBPmDeviceInfo\fP * \fBPm_GetDeviceInfo\fP (\fBPmDeviceID\fP id)"
.br
.ti -1c
.RI "\fBPMEXPORT\fP \fBPmError\fP \fBPm_OpenInput\fP (\fBPortMidiStream\fP **stream, \fBPmDeviceID\fP inputDevice, \fBvoid\fP *inputDriverInfo, \fBint32_t\fP bufferSize, \fBPmTimeProcPtr\fP time_proc, \fBvoid\fP *time_info)"
.br
.ti -1c
.RI "\fBPMEXPORT\fP \fBPmError\fP \fBPm_OpenOutput\fP (\fBPortMidiStream\fP **stream, \fBPmDeviceID\fP outputDevice, \fBvoid\fP *outputDriverInfo, \fBint32_t\fP bufferSize, \fBPmTimeProcPtr\fP time_proc, \fBvoid\fP *time_info, \fBint32_t\fP \fBlatency\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "\fBPMEXPORT\fP \fBconst\fP \fBPmDeviceInfo\fP* Pm_GetDeviceInfo (\fBPmDeviceID\fP id)"
\fBPm_GetDeviceInfo()\fP returns a pointer to a \fBPmDeviceInfo\fP structure referring to the device specified by id\&. If id is out of range the function returns NULL\&.
.PP
The returned structure is owned by the PortMidi implementation and must not be manipulated or freed\&. The pointer is guaranteed to be valid between calls to \fBPm_Initialize()\fP and \fBPm_Terminate()\fP\&. 
.PP
Definition at line 183 of file portmidi\&.c\&.
.SS "\fBPMEXPORT\fP \fBPmError\fP Pm_OpenInput (\fBPortMidiStream\fP ** stream, \fBPmDeviceID\fP inputDevice, \fBvoid\fP * inputDriverInfo, \fBint32_t\fP bufferSize, \fBPmTimeProcPtr\fP time_proc, \fBvoid\fP * time_info)"
\fBPm_OpenInput()\fP and \fBPm_OpenOutput()\fP open devices\&.
.PP
stream is the address of a PortMidiStream pointer which will receive a pointer to the newly opened stream\&.
.PP
inputDevice is the id of the device used for input (see PmDeviceID above)\&.
.PP
inputDriverInfo is a pointer to an optional driver specific data structure containing additional information for device setup or handle processing\&. inputDriverInfo is never required for correct operation\&. If not used inputDriverInfo should be NULL\&.
.PP
outputDevice is the id of the device used for output (see PmDeviceID above\&.)
.PP
outputDriverInfo is a pointer to an optional driver specific data structure containing additional information for device setup or handle processing\&. outputDriverInfo is never required for correct operation\&. If not used outputDriverInfo should be NULL\&.
.PP
For input, the buffersize specifies the number of input events to be buffered waiting to be read using \fBPm_Read()\fP\&. For output, buffersize specifies the number of output events to be buffered waiting for output\&. (In some cases -- see below -- PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored\&.)
.PP
latency is the delay in milliseconds applied to timestamps to determine when the output should actually occur\&. (If latency is < 0, 0 is assumed\&.) If latency is zero, timestamps are ignored and all output is delivered immediately\&. If latency is greater than zero, output is delayed until the message timestamp plus the latency\&. (NOTE: the time is measured relative to the time source indicated by time_proc\&. Timestamps are absolute, not relative delays or offsets\&.) In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware\&. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency\&.
.PP
time_proc is a pointer to a procedure that returns time in milliseconds\&. It may be NULL, in which case a default millisecond timebase (PortTime) is used\&. If the application wants to use PortTime, it should start the timer (call Pt_Start) before calling Pm_OpenInput or Pm_OpenOutput\&. If the application tries to start the timer \fIafter\fP Pm_OpenInput or Pm_OpenOutput, it may get a ptAlreadyStarted error from Pt_Start, and the application's preferred time resolution and callback function will be ignored\&. time_proc result values are appended to incoming MIDI data, and time_proc times are used to schedule outgoing MIDI data (when latency is non-zero)\&.
.PP
time_info is a pointer passed to time_proc\&.
.PP
Example: If I provide a timestamp of 5000, latency is 1, and time_proc returns 4990, then the desired output time will be when time_proc returns timestamp+latency = 5001\&. This will be 5001-4990 = 11ms from now\&.
.PP
return value: Upon success Pm_Open() returns PmNoError and places a pointer to a valid PortMidiStream in the stream argument\&. If a call to Pm_Open() fails a nonzero error code is returned (see PMError above) and the value of port is invalid\&.
.PP
Any stream that is successfully opened should eventually be closed by calling \fBPm_Close()\fP\&. 
.PP
Definition at line 669 of file portmidi\&.c\&.
.SS "\fBPMEXPORT\fP \fBPmError\fP Pm_OpenOutput (\fBPortMidiStream\fP ** stream, \fBPmDeviceID\fP outputDevice, \fBvoid\fP * outputDriverInfo, \fBint32_t\fP bufferSize, \fBPmTimeProcPtr\fP time_proc, \fBvoid\fP * time_info, \fBint32_t\fP latency)"

.PP
Definition at line 752 of file portmidi\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
