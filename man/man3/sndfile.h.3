.TH "C:/_dev/OpenU/Audacity/audacity/win/Projects/libsndfile/sndfile.h" 3 "Thu Apr 28 2016" "Audacity" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/_dev/OpenU/Audacity/audacity/win/Projects/libsndfile/sndfile.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSF_INFO\fP"
.br
.ti -1c
.RI "struct \fBSF_FORMAT_INFO\fP"
.br
.ti -1c
.RI "struct \fBSF_DITHER_INFO\fP"
.br
.ti -1c
.RI "struct \fBSF_EMBED_FILE_INFO\fP"
.br
.ti -1c
.RI "struct \fBSF_INSTRUMENT\fP"
.br
.ti -1c
.RI "struct \fBSF_LOOP_INFO\fP"
.br
.ti -1c
.RI "struct \fBSF_VIRTUAL_IO\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSNDFILE_1\fP"
.br
.ti -1c
.RI "#define \fBSF_STR_FIRST\fP   \fBSF_STR_TITLE\fP"
.br
.ti -1c
.RI "#define \fBSF_STR_LAST\fP   \fBSF_STR_LICENSE\fP"
.br
.ti -1c
.RI "#define \fBSF_COUNT_MAX\fP   0x7FFFFFFFFFFFFFFFLL"
.br
.ti -1c
.RI "#define \fBSF_BROADCAST_INFO_VAR\fP(coding_hist_size)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct SNDFILE_tag \fBSNDFILE\fP"
.br
.ti -1c
.RI "typedef \fBint64_t\fP \fBsf_count_t\fP"
.br
.ti -1c
.RI "typedef struct \fBSF_INFO\fP \fBSF_INFO\fP"
.br
.ti -1c
.RI "typedef \fBsf_count_t\fP(* \fBsf_vio_get_filelen\fP) (\fBvoid\fP *user_data)"
.br
.ti -1c
.RI "typedef \fBsf_count_t\fP(* \fBsf_vio_seek\fP) (\fBsf_count_t\fP \fBoffset\fP, \fBint\fP whence, \fBvoid\fP *user_data)"
.br
.ti -1c
.RI "typedef \fBsf_count_t\fP(* \fBsf_vio_read\fP) (\fBvoid\fP *ptr, \fBsf_count_t\fP \fBcount\fP, \fBvoid\fP *user_data)"
.br
.ti -1c
.RI "typedef \fBsf_count_t\fP(* \fBsf_vio_write\fP) (\fBconst\fP \fBvoid\fP *ptr, \fBsf_count_t\fP \fBcount\fP, \fBvoid\fP *user_data)"
.br
.ti -1c
.RI "typedef \fBsf_count_t\fP(* \fBsf_vio_tell\fP) (\fBvoid\fP *user_data)"
.br
.ti -1c
.RI "typedef struct \fBSF_VIRTUAL_IO\fP \fBSF_VIRTUAL_IO\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBSF_FORMAT_WAV\fP = 0x010000, \fBSF_FORMAT_AIFF\fP = 0x020000, \fBSF_FORMAT_AU\fP = 0x030000, \fBSF_FORMAT_RAW\fP = 0x040000, \fBSF_FORMAT_PAF\fP = 0x050000, \fBSF_FORMAT_SVX\fP = 0x060000, \fBSF_FORMAT_NIST\fP = 0x070000, \fBSF_FORMAT_VOC\fP = 0x080000, \fBSF_FORMAT_IRCAM\fP = 0x0A0000, \fBSF_FORMAT_W64\fP = 0x0B0000, \fBSF_FORMAT_MAT4\fP = 0x0C0000, \fBSF_FORMAT_MAT5\fP = 0x0D0000, \fBSF_FORMAT_PVF\fP = 0x0E0000, \fBSF_FORMAT_XI\fP = 0x0F0000, \fBSF_FORMAT_HTK\fP = 0x100000, \fBSF_FORMAT_SDS\fP = 0x110000, \fBSF_FORMAT_AVR\fP = 0x120000, \fBSF_FORMAT_WAVEX\fP = 0x130000, \fBSF_FORMAT_SD2\fP = 0x160000, \fBSF_FORMAT_FLAC\fP = 0x170000, \fBSF_FORMAT_CAF\fP = 0x180000, \fBSF_FORMAT_WVE\fP = 0x190000, \fBSF_FORMAT_OGG\fP = 0x200000, \fBSF_FORMAT_MPC2K\fP = 0x210000, \fBSF_FORMAT_RF64\fP = 0x220000, \fBSF_FORMAT_PCM_S8\fP = 0x0001, \fBSF_FORMAT_PCM_16\fP = 0x0002, \fBSF_FORMAT_PCM_24\fP = 0x0003, \fBSF_FORMAT_PCM_32\fP = 0x0004, \fBSF_FORMAT_PCM_U8\fP = 0x0005, \fBSF_FORMAT_FLOAT\fP = 0x0006, \fBSF_FORMAT_DOUBLE\fP = 0x0007, \fBSF_FORMAT_ULAW\fP = 0x0010, \fBSF_FORMAT_ALAW\fP = 0x0011, \fBSF_FORMAT_IMA_ADPCM\fP = 0x0012, \fBSF_FORMAT_MS_ADPCM\fP = 0x0013, \fBSF_FORMAT_GSM610\fP = 0x0020, \fBSF_FORMAT_VOX_ADPCM\fP = 0x0021, \fBSF_FORMAT_G721_32\fP = 0x0030, \fBSF_FORMAT_G723_24\fP = 0x0031, \fBSF_FORMAT_G723_40\fP = 0x0032, \fBSF_FORMAT_DWVW_12\fP = 0x0040, \fBSF_FORMAT_DWVW_16\fP = 0x0041, \fBSF_FORMAT_DWVW_24\fP = 0x0042, \fBSF_FORMAT_DWVW_N\fP = 0x0043, \fBSF_FORMAT_DPCM_8\fP = 0x0050, \fBSF_FORMAT_DPCM_16\fP = 0x0051, \fBSF_FORMAT_VORBIS\fP = 0x0060, \fBSF_ENDIAN_FILE\fP = 0x00000000, \fBSF_ENDIAN_LITTLE\fP = 0x10000000, \fBSF_ENDIAN_BIG\fP = 0x20000000, \fBSF_ENDIAN_CPU\fP = 0x30000000, \fBSF_FORMAT_SUBMASK\fP = 0x0000FFFF, \fBSF_FORMAT_TYPEMASK\fP = 0x0FFF0000, \fBSF_FORMAT_ENDMASK\fP = 0x30000000 }"
.br
.ti -1c
.RI "enum { \fBSFC_GET_LIB_VERSION\fP = 0x1000, \fBSFC_GET_LOG_INFO\fP = 0x1001, \fBSFC_GET_CURRENT_SF_INFO\fP = 0x1002, \fBSFC_GET_NORM_DOUBLE\fP = 0x1010, \fBSFC_GET_NORM_FLOAT\fP = 0x1011, \fBSFC_SET_NORM_DOUBLE\fP = 0x1012, \fBSFC_SET_NORM_FLOAT\fP = 0x1013, \fBSFC_SET_SCALE_FLOAT_INT_READ\fP = 0x1014, \fBSFC_SET_SCALE_INT_FLOAT_WRITE\fP = 0x1015, \fBSFC_GET_SIMPLE_FORMAT_COUNT\fP = 0x1020, \fBSFC_GET_SIMPLE_FORMAT\fP = 0x1021, \fBSFC_GET_FORMAT_INFO\fP = 0x1028, \fBSFC_GET_FORMAT_MAJOR_COUNT\fP = 0x1030, \fBSFC_GET_FORMAT_MAJOR\fP = 0x1031, \fBSFC_GET_FORMAT_SUBTYPE_COUNT\fP = 0x1032, \fBSFC_GET_FORMAT_SUBTYPE\fP = 0x1033, \fBSFC_CALC_SIGNAL_MAX\fP = 0x1040, \fBSFC_CALC_NORM_SIGNAL_MAX\fP = 0x1041, \fBSFC_CALC_MAX_ALL_CHANNELS\fP = 0x1042, \fBSFC_CALC_NORM_MAX_ALL_CHANNELS\fP = 0x1043, \fBSFC_GET_SIGNAL_MAX\fP = 0x1044, \fBSFC_GET_MAX_ALL_CHANNELS\fP = 0x1045, \fBSFC_SET_ADD_PEAK_CHUNK\fP = 0x1050, \fBSFC_SET_ADD_HEADER_PAD_CHUNK\fP = 0x1051, \fBSFC_UPDATE_HEADER_NOW\fP = 0x1060, \fBSFC_SET_UPDATE_HEADER_AUTO\fP = 0x1061, \fBSFC_FILE_TRUNCATE\fP = 0x1080, \fBSFC_SET_RAW_START_OFFSET\fP = 0x1090, \fBSFC_SET_DITHER_ON_WRITE\fP = 0x10A0, \fBSFC_SET_DITHER_ON_READ\fP = 0x10A1, \fBSFC_GET_DITHER_INFO_COUNT\fP = 0x10A2, \fBSFC_GET_DITHER_INFO\fP = 0x10A3, \fBSFC_GET_EMBED_FILE_INFO\fP = 0x10B0, \fBSFC_SET_CLIPPING\fP = 0x10C0, \fBSFC_GET_CLIPPING\fP = 0x10C1, \fBSFC_GET_INSTRUMENT\fP = 0x10D0, \fBSFC_SET_INSTRUMENT\fP = 0x10D1, \fBSFC_GET_LOOP_INFO\fP = 0x10E0, \fBSFC_GET_BROADCAST_INFO\fP = 0x10F0, \fBSFC_SET_BROADCAST_INFO\fP = 0x10F1, \fBSFC_GET_CHANNEL_MAP_INFO\fP = 0x1100, \fBSFC_SET_CHANNEL_MAP_INFO\fP = 0x1101, \fBSFC_RAW_DATA_NEEDS_ENDSWAP\fP = 0x1110, \fBSFC_WAVEX_SET_AMBISONIC\fP = 0x1200, \fBSFC_WAVEX_GET_AMBISONIC\fP = 0x1201, \fBSFC_SET_VBR_ENCODING_QUALITY\fP = 0x1300, \fBSFC_TEST_IEEE_FLOAT_REPLACE\fP = 0x6001, \fBSFC_SET_ADD_DITHER_ON_WRITE\fP = 0x1070, \fBSFC_SET_ADD_DITHER_ON_READ\fP = 0x1071 }"
.br
.ti -1c
.RI "enum { \fBSF_STR_TITLE\fP = 0x01, \fBSF_STR_COPYRIGHT\fP = 0x02, \fBSF_STR_SOFTWARE\fP = 0x03, \fBSF_STR_ARTIST\fP = 0x04, \fBSF_STR_COMMENT\fP = 0x05, \fBSF_STR_DATE\fP = 0x06, \fBSF_STR_ALBUM\fP = 0x07, \fBSF_STR_LICENSE\fP = 0x08, \fBSF_STR_TRACKNUMBER\fP = 0x09, \fBSF_STR_GENRE\fP = 0x10 }"
.br
.ti -1c
.RI "enum { \fBSF_FALSE\fP = 0, \fBSF_TRUE\fP = 1, \fBSFM_READ\fP = 0x10, \fBSFM_WRITE\fP = 0x20, \fBSFM_RDWR\fP = 0x30, \fBSF_AMBISONIC_NONE\fP = 0x40, \fBSF_AMBISONIC_B_FORMAT\fP = 0x41 }"
.br
.ti -1c
.RI "enum { \fBSF_ERR_NO_ERROR\fP = 0, \fBSF_ERR_UNRECOGNISED_FORMAT\fP = 1, \fBSF_ERR_SYSTEM\fP = 2, \fBSF_ERR_MALFORMED_FILE\fP = 3, \fBSF_ERR_UNSUPPORTED_ENCODING\fP = 4 }"
.br
.ti -1c
.RI "enum { \fBSF_CHANNEL_MAP_INVALID\fP = 0, \fBSF_CHANNEL_MAP_MONO\fP = 1, \fBSF_CHANNEL_MAP_LEFT\fP, \fBSF_CHANNEL_MAP_RIGHT\fP, \fBSF_CHANNEL_MAP_CENTER\fP, \fBSF_CHANNEL_MAP_FRONT_LEFT\fP, \fBSF_CHANNEL_MAP_FRONT_RIGHT\fP, \fBSF_CHANNEL_MAP_FRONT_CENTER\fP, \fBSF_CHANNEL_MAP_REAR_CENTER\fP, \fBSF_CHANNEL_MAP_REAR_LEFT\fP, \fBSF_CHANNEL_MAP_REAR_RIGHT\fP, \fBSF_CHANNEL_MAP_LFE\fP, \fBSF_CHANNEL_MAP_FRONT_LEFT_OF_CENTER\fP, \fBSF_CHANNEL_MAP_FRONT_RIGHT_OF_CENTER\fP, \fBSF_CHANNEL_MAP_SIDE_LEFT\fP, \fBSF_CHANNEL_MAP_SIDE_RIGHT\fP, \fBSF_CHANNEL_MAP_TOP_CENTER\fP, \fBSF_CHANNEL_MAP_TOP_FRONT_LEFT\fP, \fBSF_CHANNEL_MAP_TOP_FRONT_RIGHT\fP, \fBSF_CHANNEL_MAP_TOP_FRONT_CENTER\fP, \fBSF_CHANNEL_MAP_TOP_REAR_LEFT\fP, \fBSF_CHANNEL_MAP_TOP_REAR_RIGHT\fP, \fBSF_CHANNEL_MAP_TOP_REAR_CENTER\fP, \fBSF_CHANNEL_MAP_AMBISONIC_B_W\fP, \fBSF_CHANNEL_MAP_AMBISONIC_B_X\fP, \fBSF_CHANNEL_MAP_AMBISONIC_B_Y\fP, \fBSF_CHANNEL_MAP_AMBISONIC_B_Z\fP, \fBSF_CHANNEL_MAP_MAX\fP }"
.br
.ti -1c
.RI "enum { \fBSFD_DEFAULT_LEVEL\fP = 0, \fBSFD_CUSTOM_LEVEL\fP = 0x40000000, \fBSFD_NO_DITHER\fP = 500, \fBSFD_WHITE\fP = 501, \fBSFD_TRIANGULAR_PDF\fP = 502 }"
.br
.ti -1c
.RI "enum { \fBSF_LOOP_NONE\fP = 800, \fBSF_LOOP_FORWARD\fP, \fBSF_LOOP_BACKWARD\fP, \fBSF_LOOP_ALTERNATING\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "typedef \fBSF_BROADCAST_INFO_VAR\fP (256) SF_BROADCAST_INFO"
.br
.ti -1c
.RI "\fBSNDFILE\fP * \fBsf_open\fP (\fBconst\fP char *path, \fBint\fP mode, \fBSF_INFO\fP *\fBsfinfo\fP)"
.br
.ti -1c
.RI "\fBSNDFILE\fP * \fBsf_open_fd\fP (\fBint\fP fd, \fBint\fP mode, \fBSF_INFO\fP *\fBsfinfo\fP, \fBint\fP close_desc)"
.br
.ti -1c
.RI "\fBSNDFILE\fP * \fBsf_open_virtual\fP (\fBSF_VIRTUAL_IO\fP *sfvirtual, \fBint\fP mode, \fBSF_INFO\fP *\fBsfinfo\fP, \fBvoid\fP *user_data)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_error\fP (\fBSNDFILE\fP *sndfile)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBsf_strerror\fP (\fBSNDFILE\fP *sndfile)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBsf_error_number\fP (\fBint\fP errnum)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_perror\fP (\fBSNDFILE\fP *sndfile)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_error_str\fP (\fBSNDFILE\fP *sndfile, char *\fBstr\fP, size_t \fBlen\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_command\fP (\fBSNDFILE\fP *sndfile, \fBint\fP command, \fBvoid\fP *\fBdata\fP, \fBint\fP datasize)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_format_check\fP (\fBconst\fP \fBSF_INFO\fP *\fBinfo\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_seek\fP (\fBSNDFILE\fP *sndfile, \fBsf_count_t\fP frames, \fBint\fP whence)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_set_string\fP (\fBSNDFILE\fP *sndfile, \fBint\fP str_type, \fBconst\fP char *\fBstr\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBsf_get_string\fP (\fBSNDFILE\fP *sndfile, \fBint\fP str_type)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBsf_version_string\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_read_raw\fP (\fBSNDFILE\fP *sndfile, \fBvoid\fP *ptr, \fBsf_count_t\fP bytes)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_write_raw\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP \fBvoid\fP *ptr, \fBsf_count_t\fP bytes)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_readf_short\fP (\fBSNDFILE\fP *sndfile, short *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_writef_short\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP short *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_readf_int\fP (\fBSNDFILE\fP *sndfile, \fBint\fP *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_writef_int\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP \fBint\fP *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_readf_float\fP (\fBSNDFILE\fP *sndfile, float *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_writef_float\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP float *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_readf_double\fP (\fBSNDFILE\fP *sndfile, double *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_writef_double\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP double *ptr, \fBsf_count_t\fP frames)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_read_short\fP (\fBSNDFILE\fP *sndfile, short *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_write_short\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP short *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_read_int\fP (\fBSNDFILE\fP *sndfile, \fBint\fP *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_write_int\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP \fBint\fP *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_read_float\fP (\fBSNDFILE\fP *sndfile, float *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_write_float\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP float *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_read_double\fP (\fBSNDFILE\fP *sndfile, double *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBsf_count_t\fP \fBsf_write_double\fP (\fBSNDFILE\fP *sndfile, \fBconst\fP double *ptr, \fBsf_count_t\fP items)"
.br
.ti -1c
.RI "\fBint\fP \fBsf_close\fP (\fBSNDFILE\fP *sndfile)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsf_write_sync\fP (\fBSNDFILE\fP *sndfile)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define SF_BROADCAST_INFO_VAR(coding_hist_size)"
\fBValue:\fP
.PP
.nf
struct \
            {   char            description [256] ; \
                char            originator [32] ; \
                char            originator_reference [32] ; \
                char            origination_date [10] ; \
                char            origination_time [8] ; \
                unsigned int    time_reference_low ; \
                unsigned int    time_reference_high ; \
                short           version ; \
                char            umid [64] ; \
                char            reserved [190] ; \
                unsigned int    coding_history_size ; \
                char            coding_history [coding_hist_size] ; \
            }
.fi
.PP
Definition at line 440 of file sndfile\&.h\&.
.SS "#define SF_COUNT_MAX   0x7FFFFFFFFFFFFFFFLL"

.PP
Definition at line 319 of file sndfile\&.h\&.
.SS "#define SF_STR_FIRST   \fBSF_STR_TITLE\fP"

.PP
Definition at line 234 of file sndfile\&.h\&.
.SS "#define SF_STR_LAST   \fBSF_STR_LICENSE\fP"

.PP
Definition at line 235 of file sndfile\&.h\&.
.SS "#define SNDFILE_1"

.PP
Definition at line 30 of file sndfile\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBint64_t\fP \fBsf_count_t\fP"

.PP
Definition at line 318 of file sndfile\&.h\&.
.SS "typedef struct \fBSF_INFO\fP \fBSF_INFO\fP"

.PP
Definition at line 337 of file sndfile\&.h\&.
.SS "typedef \fBsf_count_t\fP(* sf_vio_get_filelen) (\fBvoid\fP *user_data)"

.PP
Definition at line 462 of file sndfile\&.h\&.
.SS "typedef \fBsf_count_t\fP(* sf_vio_read) (\fBvoid\fP *ptr, \fBsf_count_t\fP \fBcount\fP, \fBvoid\fP *user_data)"

.PP
Definition at line 464 of file sndfile\&.h\&.
.SS "typedef \fBsf_count_t\fP(* sf_vio_seek) (\fBsf_count_t\fP \fBoffset\fP, \fBint\fP whence, \fBvoid\fP *user_data)"

.PP
Definition at line 463 of file sndfile\&.h\&.
.SS "typedef \fBsf_count_t\fP(* sf_vio_tell) (\fBvoid\fP *user_data)"

.PP
Definition at line 466 of file sndfile\&.h\&.
.SS "typedef \fBsf_count_t\fP(* sf_vio_write) (\fBconst\fP \fBvoid\fP *ptr, \fBsf_count_t\fP \fBcount\fP, \fBvoid\fP *user_data)"

.PP
Definition at line 465 of file sndfile\&.h\&.
.SS "typedef struct \fBSF_VIRTUAL_IO\fP \fBSF_VIRTUAL_IO\fP"

.PP
Definition at line 476 of file sndfile\&.h\&.
.SS "typedef struct SNDFILE_tag \fBSNDFILE\fP"

.PP
Definition at line 305 of file sndfile\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISF_FORMAT_WAV \fP\fP
.TP
\fB\fISF_FORMAT_AIFF \fP\fP
.TP
\fB\fISF_FORMAT_AU \fP\fP
.TP
\fB\fISF_FORMAT_RAW \fP\fP
.TP
\fB\fISF_FORMAT_PAF \fP\fP
.TP
\fB\fISF_FORMAT_SVX \fP\fP
.TP
\fB\fISF_FORMAT_NIST \fP\fP
.TP
\fB\fISF_FORMAT_VOC \fP\fP
.TP
\fB\fISF_FORMAT_IRCAM \fP\fP
.TP
\fB\fISF_FORMAT_W64 \fP\fP
.TP
\fB\fISF_FORMAT_MAT4 \fP\fP
.TP
\fB\fISF_FORMAT_MAT5 \fP\fP
.TP
\fB\fISF_FORMAT_PVF \fP\fP
.TP
\fB\fISF_FORMAT_XI \fP\fP
.TP
\fB\fISF_FORMAT_HTK \fP\fP
.TP
\fB\fISF_FORMAT_SDS \fP\fP
.TP
\fB\fISF_FORMAT_AVR \fP\fP
.TP
\fB\fISF_FORMAT_WAVEX \fP\fP
.TP
\fB\fISF_FORMAT_SD2 \fP\fP
.TP
\fB\fISF_FORMAT_FLAC \fP\fP
.TP
\fB\fISF_FORMAT_CAF \fP\fP
.TP
\fB\fISF_FORMAT_WVE \fP\fP
.TP
\fB\fISF_FORMAT_OGG \fP\fP
.TP
\fB\fISF_FORMAT_MPC2K \fP\fP
.TP
\fB\fISF_FORMAT_RF64 \fP\fP
.TP
\fB\fISF_FORMAT_PCM_S8 \fP\fP
.TP
\fB\fISF_FORMAT_PCM_16 \fP\fP
.TP
\fB\fISF_FORMAT_PCM_24 \fP\fP
.TP
\fB\fISF_FORMAT_PCM_32 \fP\fP
.TP
\fB\fISF_FORMAT_PCM_U8 \fP\fP
.TP
\fB\fISF_FORMAT_FLOAT \fP\fP
.TP
\fB\fISF_FORMAT_DOUBLE \fP\fP
.TP
\fB\fISF_FORMAT_ULAW \fP\fP
.TP
\fB\fISF_FORMAT_ALAW \fP\fP
.TP
\fB\fISF_FORMAT_IMA_ADPCM \fP\fP
.TP
\fB\fISF_FORMAT_MS_ADPCM \fP\fP
.TP
\fB\fISF_FORMAT_GSM610 \fP\fP
.TP
\fB\fISF_FORMAT_VOX_ADPCM \fP\fP
.TP
\fB\fISF_FORMAT_G721_32 \fP\fP
.TP
\fB\fISF_FORMAT_G723_24 \fP\fP
.TP
\fB\fISF_FORMAT_G723_40 \fP\fP
.TP
\fB\fISF_FORMAT_DWVW_12 \fP\fP
.TP
\fB\fISF_FORMAT_DWVW_16 \fP\fP
.TP
\fB\fISF_FORMAT_DWVW_24 \fP\fP
.TP
\fB\fISF_FORMAT_DWVW_N \fP\fP
.TP
\fB\fISF_FORMAT_DPCM_8 \fP\fP
.TP
\fB\fISF_FORMAT_DPCM_16 \fP\fP
.TP
\fB\fISF_FORMAT_VORBIS \fP\fP
.TP
\fB\fISF_ENDIAN_FILE \fP\fP
.TP
\fB\fISF_ENDIAN_LITTLE \fP\fP
.TP
\fB\fISF_ENDIAN_BIG \fP\fP
.TP
\fB\fISF_ENDIAN_CPU \fP\fP
.TP
\fB\fISF_FORMAT_SUBMASK \fP\fP
.TP
\fB\fISF_FORMAT_TYPEMASK \fP\fP
.TP
\fB\fISF_FORMAT_ENDMASK \fP\fP
.PP
Definition at line 46 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISFC_GET_LIB_VERSION \fP\fP
.TP
\fB\fISFC_GET_LOG_INFO \fP\fP
.TP
\fB\fISFC_GET_CURRENT_SF_INFO \fP\fP
.TP
\fB\fISFC_GET_NORM_DOUBLE \fP\fP
.TP
\fB\fISFC_GET_NORM_FLOAT \fP\fP
.TP
\fB\fISFC_SET_NORM_DOUBLE \fP\fP
.TP
\fB\fISFC_SET_NORM_FLOAT \fP\fP
.TP
\fB\fISFC_SET_SCALE_FLOAT_INT_READ \fP\fP
.TP
\fB\fISFC_SET_SCALE_INT_FLOAT_WRITE \fP\fP
.TP
\fB\fISFC_GET_SIMPLE_FORMAT_COUNT \fP\fP
.TP
\fB\fISFC_GET_SIMPLE_FORMAT \fP\fP
.TP
\fB\fISFC_GET_FORMAT_INFO \fP\fP
.TP
\fB\fISFC_GET_FORMAT_MAJOR_COUNT \fP\fP
.TP
\fB\fISFC_GET_FORMAT_MAJOR \fP\fP
.TP
\fB\fISFC_GET_FORMAT_SUBTYPE_COUNT \fP\fP
.TP
\fB\fISFC_GET_FORMAT_SUBTYPE \fP\fP
.TP
\fB\fISFC_CALC_SIGNAL_MAX \fP\fP
.TP
\fB\fISFC_CALC_NORM_SIGNAL_MAX \fP\fP
.TP
\fB\fISFC_CALC_MAX_ALL_CHANNELS \fP\fP
.TP
\fB\fISFC_CALC_NORM_MAX_ALL_CHANNELS \fP\fP
.TP
\fB\fISFC_GET_SIGNAL_MAX \fP\fP
.TP
\fB\fISFC_GET_MAX_ALL_CHANNELS \fP\fP
.TP
\fB\fISFC_SET_ADD_PEAK_CHUNK \fP\fP
.TP
\fB\fISFC_SET_ADD_HEADER_PAD_CHUNK \fP\fP
.TP
\fB\fISFC_UPDATE_HEADER_NOW \fP\fP
.TP
\fB\fISFC_SET_UPDATE_HEADER_AUTO \fP\fP
.TP
\fB\fISFC_FILE_TRUNCATE \fP\fP
.TP
\fB\fISFC_SET_RAW_START_OFFSET \fP\fP
.TP
\fB\fISFC_SET_DITHER_ON_WRITE \fP\fP
.TP
\fB\fISFC_SET_DITHER_ON_READ \fP\fP
.TP
\fB\fISFC_GET_DITHER_INFO_COUNT \fP\fP
.TP
\fB\fISFC_GET_DITHER_INFO \fP\fP
.TP
\fB\fISFC_GET_EMBED_FILE_INFO \fP\fP
.TP
\fB\fISFC_SET_CLIPPING \fP\fP
.TP
\fB\fISFC_GET_CLIPPING \fP\fP
.TP
\fB\fISFC_GET_INSTRUMENT \fP\fP
.TP
\fB\fISFC_SET_INSTRUMENT \fP\fP
.TP
\fB\fISFC_GET_LOOP_INFO \fP\fP
.TP
\fB\fISFC_GET_BROADCAST_INFO \fP\fP
.TP
\fB\fISFC_SET_BROADCAST_INFO \fP\fP
.TP
\fB\fISFC_GET_CHANNEL_MAP_INFO \fP\fP
.TP
\fB\fISFC_SET_CHANNEL_MAP_INFO \fP\fP
.TP
\fB\fISFC_RAW_DATA_NEEDS_ENDSWAP \fP\fP
.TP
\fB\fISFC_WAVEX_SET_AMBISONIC \fP\fP
.TP
\fB\fISFC_WAVEX_GET_AMBISONIC \fP\fP
.TP
\fB\fISFC_SET_VBR_ENCODING_QUALITY \fP\fP
.TP
\fB\fISFC_TEST_IEEE_FLOAT_REPLACE \fP\fP
.TP
\fB\fISFC_SET_ADD_DITHER_ON_WRITE \fP\fP
.TP
\fB\fISFC_SET_ADD_DITHER_ON_READ \fP\fP
.PP
Definition at line 126 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISF_STR_TITLE \fP\fP
.TP
\fB\fISF_STR_COPYRIGHT \fP\fP
.TP
\fB\fISF_STR_SOFTWARE \fP\fP
.TP
\fB\fISF_STR_ARTIST \fP\fP
.TP
\fB\fISF_STR_COMMENT \fP\fP
.TP
\fB\fISF_STR_DATE \fP\fP
.TP
\fB\fISF_STR_ALBUM \fP\fP
.TP
\fB\fISF_STR_LICENSE \fP\fP
.TP
\fB\fISF_STR_TRACKNUMBER \fP\fP
.TP
\fB\fISF_STR_GENRE \fP\fP
.PP
Definition at line 216 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISF_FALSE \fP\fP
.TP
\fB\fISF_TRUE \fP\fP
.TP
\fB\fISFM_READ \fP\fP
.TP
\fB\fISFM_WRITE \fP\fP
.TP
\fB\fISFM_RDWR \fP\fP
.TP
\fB\fISF_AMBISONIC_NONE \fP\fP
.TP
\fB\fISF_AMBISONIC_B_FORMAT \fP\fP
.PP
Definition at line 237 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISF_ERR_NO_ERROR \fP\fP
.TP
\fB\fISF_ERR_UNRECOGNISED_FORMAT \fP\fP
.TP
\fB\fISF_ERR_SYSTEM \fP\fP
.TP
\fB\fISF_ERR_MALFORMED_FILE \fP\fP
.TP
\fB\fISF_ERR_UNSUPPORTED_ENCODING \fP\fP
.PP
Definition at line 257 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISF_CHANNEL_MAP_INVALID \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_MONO \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_LEFT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_RIGHT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_FRONT_LEFT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_FRONT_RIGHT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_FRONT_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_REAR_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_REAR_LEFT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_REAR_RIGHT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_LFE \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_FRONT_LEFT_OF_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_FRONT_RIGHT_OF_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_SIDE_LEFT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_SIDE_RIGHT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_FRONT_LEFT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_FRONT_RIGHT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_FRONT_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_REAR_LEFT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_REAR_RIGHT \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_TOP_REAR_CENTER \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_AMBISONIC_B_W \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_AMBISONIC_B_X \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_AMBISONIC_B_Y \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_AMBISONIC_B_Z \fP\fP
.TP
\fB\fISF_CHANNEL_MAP_MAX \fP\fP
.PP
Definition at line 269 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISFD_DEFAULT_LEVEL \fP\fP
.TP
\fB\fISFD_CUSTOM_LEVEL \fP\fP
.TP
\fB\fISFD_NO_DITHER \fP\fP
.TP
\fB\fISFD_WHITE \fP\fP
.TP
\fB\fISFD_TRIANGULAR_PDF \fP\fP
.PP
Definition at line 362 of file sndfile\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISF_LOOP_NONE \fP\fP
.TP
\fB\fISF_LOOP_FORWARD \fP\fP
.TP
\fB\fISF_LOOP_BACKWARD \fP\fP
.TP
\fB\fISF_LOOP_ALTERNATING \fP\fP
.PP
Definition at line 390 of file sndfile\&.h\&.
.SH "Function Documentation"
.PP 
.SS "typedef SF_BROADCAST_INFO_VAR (256)"

.SS "\fBint\fP sf_close (\fBSNDFILE\fP * sndfile)"

.PP
Definition at line 401 of file sndfile\&.c\&.
.SS "\fBint\fP sf_command (\fBSNDFILE\fP * sndfile, \fBint\fP command, \fBvoid\fP * data, \fBint\fP datasize)"

.PP
Definition at line 838 of file sndfile\&.c\&.
.SS "\fBint\fP sf_error (\fBSNDFILE\fP * sndfile)"

.PP
Definition at line 475 of file sndfile\&.c\&.
.SS "\fBconst\fP char* sf_error_number (\fBint\fP errnum)"

.PP
Definition at line 425 of file sndfile\&.c\&.
.SS "\fBint\fP sf_error_str (\fBSNDFILE\fP * sndfile, char * str, size_t len)"

.PP
Definition at line 514 of file sndfile\&.c\&.
.SS "\fBint\fP sf_format_check (\fBconst\fP \fBSF_INFO\fP * info)"

.PP
Definition at line 537 of file sndfile\&.c\&.
.SS "\fBconst\fP char* sf_get_string (\fBSNDFILE\fP * sndfile, \fBint\fP str_type)"

.PP
Definition at line 1392 of file sndfile\&.c\&.
.SS "\fBSNDFILE\fP* sf_open (\fBconst\fP char * path, \fBint\fP mode, \fBSF_INFO\fP * sfinfo)"

.PP
Definition at line 306 of file sndfile\&.c\&.
.SS "\fBSNDFILE\fP* sf_open_fd (\fBint\fP fd, \fBint\fP mode, \fBSF_INFO\fP * sfinfo, \fBint\fP close_desc)"

.PP
Definition at line 334 of file sndfile\&.c\&.
.SS "\fBSNDFILE\fP* sf_open_virtual (\fBSF_VIRTUAL_IO\fP * sfvirtual, \fBint\fP mode, \fBSF_INFO\fP * sfinfo, \fBvoid\fP * user_data)"

.PP
Definition at line 362 of file sndfile\&.c\&.
.SS "\fBint\fP sf_perror (\fBSNDFILE\fP * sndfile)"

.PP
Definition at line 493 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_read_double (\fBSNDFILE\fP * sndfile, double * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 1741 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_read_float (\fBSNDFILE\fP * sndfile, float * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 1649 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_read_int (\fBSNDFILE\fP * sndfile, \fBint\fP * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 1557 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_read_raw (\fBSNDFILE\fP * sndfile, \fBvoid\fP * ptr, \fBsf_count_t\fP bytes)"

.PP
Definition at line 1416 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_read_short (\fBSNDFILE\fP * sndfile, short * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 1465 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_readf_double (\fBSNDFILE\fP * sndfile, double * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 1788 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_readf_float (\fBSNDFILE\fP * sndfile, float * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 1696 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_readf_int (\fBSNDFILE\fP * sndfile, \fBint\fP * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 1604 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_readf_short (\fBSNDFILE\fP * sndfile, short * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 1512 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_seek (\fBSNDFILE\fP * sndfile, \fBsf_count_t\fP frames, \fBint\fP whence)"

.PP
Definition at line 1274 of file sndfile\&.c\&.
.SS "\fBint\fP sf_set_string (\fBSNDFILE\fP * sndfile, \fBint\fP str_type, \fBconst\fP char * str)"

.PP
Definition at line 1404 of file sndfile\&.c\&.
.SS "\fBconst\fP char* sf_strerror (\fBSNDFILE\fP * sndfile)"

.PP
Definition at line 447 of file sndfile\&.c\&.
.SS "\fBconst\fP char* sf_version_string (\fBvoid\fP)"

.PP
Definition at line 824 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_write_double (\fBSNDFILE\fP * sndfile, \fBconst\fP double * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 2144 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_write_float (\fBSNDFILE\fP * sndfile, \fBconst\fP float * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 2056 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_write_int (\fBSNDFILE\fP * sndfile, \fBconst\fP \fBint\fP * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 1968 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_write_raw (\fBSNDFILE\fP * sndfile, \fBconst\fP \fBvoid\fP * ptr, \fBsf_count_t\fP bytes)"

.PP
Definition at line 1833 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_write_short (\fBSNDFILE\fP * sndfile, \fBconst\fP short * ptr, \fBsf_count_t\fP items)"

.PP
Definition at line 1880 of file sndfile\&.c\&.
.SS "\fBvoid\fP sf_write_sync (\fBSNDFILE\fP * sndfile)"

.PP
Definition at line 410 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_writef_double (\fBSNDFILE\fP * sndfile, \fBconst\fP double * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 2189 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_writef_float (\fBSNDFILE\fP * sndfile, \fBconst\fP float * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 2101 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_writef_int (\fBSNDFILE\fP * sndfile, \fBconst\fP \fBint\fP * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 2013 of file sndfile\&.c\&.
.SS "\fBsf_count_t\fP sf_writef_short (\fBSNDFILE\fP * sndfile, \fBconst\fP short * ptr, \fBsf_count_t\fP frames)"

.PP
Definition at line 1925 of file sndfile\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Audacity from the source code\&.
