<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="simd_8c" kind="file" language="C++">
    <compoundname>simd.c</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="simd_8h" local="yes">simd.h</includes>
    <includes refid="simd-dev_8h" local="yes">simd-dev.h</includes>
    <incdepgraph>
      <node id="21361">
        <label>stdlib.h</label>
      </node>
      <node id="21364">
        <label>simd-dev.h</label>
        <link refid="simd-dev_8h"/>
        <childnode refid="21365" relation="include">
        </childnode>
      </node>
      <node id="21363">
        <label>stddef.h</label>
      </node>
      <node id="21359">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="21360">
        <label>string.h</label>
      </node>
      <node id="21367">
        <label>math.h</label>
      </node>
      <node id="21365">
        <label>pffft.c</label>
        <link refid="pffft_8c"/>
        <childnode refid="21366" relation="include">
        </childnode>
        <childnode refid="21362" relation="include">
        </childnode>
        <childnode refid="21360" relation="include">
        </childnode>
        <childnode refid="21361" relation="include">
        </childnode>
        <childnode refid="21367" relation="include">
        </childnode>
        <childnode refid="21359" relation="include">
        </childnode>
      </node>
      <node id="21366">
        <label>pffft.h</label>
        <link refid="pffft_8h"/>
        <childnode refid="21363" relation="include">
        </childnode>
      </node>
      <node id="21358">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c</label>
        <link refid="simd.c"/>
        <childnode refid="21359" relation="include">
        </childnode>
        <childnode refid="21360" relation="include">
        </childnode>
        <childnode refid="21361" relation="include">
        </childnode>
        <childnode refid="21362" relation="include">
        </childnode>
        <childnode refid="21364" relation="include">
        </childnode>
      </node>
      <node id="21362">
        <label>simd.h</label>
        <link refid="simd_8h"/>
        <childnode refid="21363" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="simd_8c_1a3ea70898352fb396c976f404b2731737" prot="public" static="no">
        <name>SIMD_ALIGNMENT</name>
        <initializer>(sizeof(float) * 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" line="10" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="simd_8c_1a515631b57592d8802103c07920a1462b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* _soxr_simd_aligned_malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>_soxr_simd_aligned_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" line="12" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" bodystart="12" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="simd_8c_1ad3264c82d68ca0e92ba93b631c38ecd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* _soxr_simd_aligned_calloc</definition>
        <argsstring>(size_t nmemb, size_t size)</argsstring>
        <name>_soxr_simd_aligned_calloc</name>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" line="24" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="simd_8c_1a9c295c6837d30a3371c5871e11fcb532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void _soxr_simd_aligned_free</definition>
        <argsstring>(void *p1)</argsstring>
        <name>_soxr_simd_aligned_free</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" line="34" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="simd_8c_1a3b7b90bd1bd391980db0c806f405675f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void _soxr_ordered_convolve_simd</definition>
        <argsstring>(int n, void *not_used, float *a, const float *b)</argsstring>
        <name>_soxr_ordered_convolve_simd</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>not_used</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" line="42" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" bodystart="42" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="simd_8c_1aaeda052ff9cc569f7ed545876fdffd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void _soxr_ordered_partial_convolve_simd</definition>
        <argsstring>(int n, float *a, const float *b)</argsstring>
        <name>_soxr_ordered_partial_convolve_simd</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" line="65" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c" bodystart="65" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>SoX<sp/>Resampler<sp/>Library<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2007-13<sp/>robs@users.sourceforge.net</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licence<sp/>for<sp/>this<sp/>file:<sp/>LGPL<sp/>v2.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>LICENCE<sp/>for<sp/>details.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="simd_8h" kindref="compound">simd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="simd-dev_8h" kindref="compound">simd-dev.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="simd_8c_1a3ea70898352fb396c976f404b2731737" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMD_ALIGNMENT<sp/>(sizeof(float)<sp/>*<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="simd_8h_1a9085552d1234a8d3d02487fecb3da5cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="simd_8c_1a515631b57592d8802103c07920a1462b" kindref="member">_soxr_simd_aligned_malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="sound_8c_1ad86bc04f7f667b1bdced8a0f06d96861" kindref="member">p1</ref><sp/>=<sp/>0,<sp/>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref><sp/>=<sp/>malloc(size<sp/>+<sp/><ref refid="simd_8c_1a3ea70898352fb396c976f404b2731737" kindref="member">SIMD_ALIGNMENT</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref><sp/>+<sp/><ref refid="simd_8c_1a3ea70898352fb396c976f404b2731737" kindref="member">SIMD_ALIGNMENT</ref>)<sp/>&amp;<sp/>~(<ref refid="simd_8c_1a3ea70898352fb396c976f404b2731737" kindref="member">SIMD_ALIGNMENT</ref><sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>*)p1<sp/>-<sp/>1)<sp/>=<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sound_8c_1ad86bc04f7f667b1bdced8a0f06d96861" kindref="member">p1</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="simd_8h_1a0961e33fc1a87b6e4fe44e5bf3cd8b29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="simd_8c_1ad3264c82d68ca0e92ba93b631c38ecd7" kindref="member">_soxr_simd_aligned_calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref><sp/>=<sp/><ref refid="simd_8c_1a515631b57592d8802103c07920a1462b" kindref="member">_soxr_simd_aligned_malloc</ref>(nmemb<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(p,<sp/>0,<sp/>nmemb<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="simd_8h_1a3ce083fe0e094f9619e8bf14798444f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simd_8c_1a9c295c6837d30a3371c5871e11fcb532" kindref="member">_soxr_simd_aligned_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="sound_8c_1ad86bc04f7f667b1bdced8a0f06d96861" kindref="member">p1</ref>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>*)p1<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="simd_8h_1a3b7b90bd1bd391980db0c806f405675f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simd_8c_1a3b7b90bd1bd391980db0c806f405675f" kindref="member">_soxr_ordered_convolve_simd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>not_used,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ab0,<sp/>ab1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="comment">/*RESTRICT*/</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>(<ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*)a;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>RESTRICT<sp/><sp/><sp/>vb<sp/>=<sp/>(<ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)b;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<ref refid="pffft_8c_1a717b8f27ff2bfe8df7934c7df9f62af7" kindref="member">VALIGNED</ref>(a)<sp/>&amp;&amp;<sp/><ref refid="pffft_8c_1a717b8f27ff2bfe8df7934c7df9f62af7" kindref="member">VALIGNED</ref>(b));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>ab0<sp/>=<sp/>a[0]<sp/>*<sp/>b[0],<sp/>ab1<sp/>=<sp/>a[1]<sp/>*<sp/>b[1];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>/<sp/>4;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/>a1r<sp/>=<sp/>va[i+0],<sp/>a1i<sp/>=<sp/>va[i+1];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/>b1r<sp/>=<sp/>vb[i+0],<sp/>b1i<sp/>=<sp/>vb[i+1];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>UNINTERLEAVE2(a1r,<sp/>a1i,<sp/>a1r,<sp/>a1i);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>UNINTERLEAVE2(b1r,<sp/>b1i,<sp/>b1r,<sp/>b1i);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pffft_8c_1a693b3e5107191c7ad5bc6b42693631dd" kindref="member">VCPLXMUL</ref>(a1r,<sp/>a1i,<sp/>b1r,<sp/>b1i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERLEAVE2(a1r,<sp/>a1i,<sp/>a1r,<sp/>a1i);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>va[i+0]<sp/>=<sp/>a1r,<sp/>va[i+1]<sp/>=<sp/>a1i;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>a[0]<sp/>=<sp/>ab0,<sp/>a[1]<sp/>=<sp/>ab1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)not_used;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="simd_8h_1aaeda052ff9cc569f7ed545876fdffd27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simd_8c_1aaeda052ff9cc569f7ed545876fdffd27" kindref="member">_soxr_ordered_partial_convolve_simd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ab0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="comment">/*RESTRICT*/</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>(<ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*)a;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>RESTRICT<sp/><sp/><sp/>vb<sp/>=<sp/>(<ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)b;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<ref refid="pffft_8c_1a717b8f27ff2bfe8df7934c7df9f62af7" kindref="member">VALIGNED</ref>(a)<sp/>&amp;&amp;<sp/><ref refid="pffft_8c_1a717b8f27ff2bfe8df7934c7df9f62af7" kindref="member">VALIGNED</ref>(b));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>ab0<sp/>=<sp/>a[0]<sp/>*<sp/>b[0];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>/<sp/>4;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/>a1r<sp/>=<sp/>va[i+0],<sp/>a1i<sp/>=<sp/>va[i+1];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pffft_8c_1a86dc70e405aed6b6ea7e66b134e00088" kindref="member">v4sf</ref><sp/>b1r<sp/>=<sp/>vb[i+0],<sp/>b1i<sp/>=<sp/>vb[i+1];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>UNINTERLEAVE2(a1r,<sp/>a1i,<sp/>a1r,<sp/>a1i);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>UNINTERLEAVE2(b1r,<sp/>b1i,<sp/>b1r,<sp/>b1i);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pffft_8c_1a693b3e5107191c7ad5bc6b42693631dd" kindref="member">VCPLXMUL</ref>(a1r,<sp/>a1i,<sp/>b1r,<sp/>b1i);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERLEAVE2(a1r,<sp/>a1i,<sp/>a1r,<sp/>a1i);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>va[i+0]<sp/>=<sp/>a1r,<sp/>va[i+1]<sp/>=<sp/>a1i;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>a[0]<sp/>=<sp/>ab0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>a[1]<sp/>=<sp/>b[n]<sp/>*<sp/>a[n]<sp/>-<sp/>b[n+1]<sp/>*<sp/>a[n+1];</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c"/>
  </compounddef>
</doxygen>
