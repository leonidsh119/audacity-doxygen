<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavu__bufferpool" kind="group">
    <compoundname>lavu_bufferpool</compoundname>
    <title>AVBufferPool</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__lavu__bufferpool_1ga13bc8038952b61bae4d591f30c7421f6" prot="public" static="no">
        <type>struct <ref refid="group__lavu__bufferpool_1ga13bc8038952b61bae4d591f30c7421f6" kindref="member">AVBufferPool</ref></type>
        <definition>typedef struct AVBufferPool AVBufferPool</definition>
        <argsstring></argsstring>
        <name>AVBufferPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The buffer pool. This structure is opaque and not meant to be accessed directly. It is allocated with <ref refid="group__lavu__bufferpool_1ga26af9b07c08bc7fd2cfc62767e490b93" kindref="member">av_buffer_pool_init()</ref> and freed with <ref refid="group__lavu__bufferpool_1ga7b76781c5944b3bb59b2e3b1a8994e4a" kindref="member">av_buffer_pool_uninit()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="198" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavu__bufferpool_1ga26af9b07c08bc7fd2cfc62767e490b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__lavu__bufferpool_1ga13bc8038952b61bae4d591f30c7421f6" kindref="member">AVBufferPool</ref> *</type>
        <definition>AVBufferPool* av_buffer_pool_init</definition>
        <argsstring>(int size, AVBufferRef *(*alloc)(int size))</argsstring>
        <name>av_buffer_pool_init</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *(*)(<ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate and initialize a buffer pool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of each buffer in this pool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that will be used to allocate new buffers when the pool is empty. May be NULL, then the default allocator will be used (<ref refid="group__lavu__buffer_1ga5ae84ac902283dea1a660ede06c1cdac" kindref="member">av_buffer_alloc()</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created buffer pool on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__bufferpool_1ga7b76781c5944b3bb59b2e3b1a8994e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_buffer_pool_uninit</definition>
        <argsstring>(AVBufferPool **pool)</argsstring>
        <name>av_buffer_pool_uninit</name>
        <param>
          <type><ref refid="group__lavu__bufferpool_1ga13bc8038952b61bae4d591f30c7421f6" kindref="member">AVBufferPool</ref> **</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the pool as being available for freeing. It will actually be freed only once all the allocated buffers associated with the pool are released. Thus it is safe to call this function while some of the allocated buffers are still in use.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the pool to be freed. It will be set to NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>av_buffer_pool_can_uninit() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__bufferpool_1ga2c745ecb4001452423e775b06b20fb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
        <definition>AVBufferRef* av_buffer_pool_get</definition>
        <argsstring>(AVBufferPool *pool)</argsstring>
        <name>av_buffer_pool_get</name>
        <param>
          <type><ref refid="group__lavu__bufferpool_1ga13bc8038952b61bae4d591f30c7421f6" kindref="member">AVBufferPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new AVBuffer, reusing an old buffer from the pool when available. This function may be called simultaneously from multiple threads.</para><para><simplesect kind="return"><para>a reference to the new buffer on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="268" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>AVBufferPool is an API for a lock-free thread-safe pool of AVBuffers.</para><para>Frequently allocating and freeing large buffers may be slow. AVBufferPool is meant to solve this in cases when the caller needs a set of buffers of the same size (the most obvious use case being buffers for raw video or audio frames).</para><para>At the beginning, the user must call <ref refid="group__lavu__bufferpool_1ga26af9b07c08bc7fd2cfc62767e490b93" kindref="member">av_buffer_pool_init()</ref> to create the buffer pool. Then whenever a buffer is needed, call <ref refid="group__lavu__bufferpool_1ga2c745ecb4001452423e775b06b20fb7c" kindref="member">av_buffer_pool_get()</ref> to get a reference to a new buffer, similar to <ref refid="group__lavu__buffer_1ga5ae84ac902283dea1a660ede06c1cdac" kindref="member">av_buffer_alloc()</ref>. This new reference works in all aspects the same way as the one created by <ref refid="group__lavu__buffer_1ga5ae84ac902283dea1a660ede06c1cdac" kindref="member">av_buffer_alloc()</ref>. However, when the last reference to this buffer is unreferenced, it is returned to the pool instead of being freed and will be reused for subsequent <ref refid="group__lavu__bufferpool_1ga2c745ecb4001452423e775b06b20fb7c" kindref="member">av_buffer_pool_get()</ref> calls.</para><para>When the caller is done with the pool and no longer needs to allocate any new buffers, <ref refid="group__lavu__bufferpool_1ga7b76781c5944b3bb59b2e3b1a8994e4a" kindref="member">av_buffer_pool_uninit()</ref> must be called to mark the pool as freeable. Once all the buffers are released, it will automatically be freed.</para><para>Allocating and releasing buffers with this API is thread-safe as long as either the default alloc callback is used, or the user-supplied one is thread-safe. </para>    </detaileddescription>
  </compounddef>
</doxygen>
