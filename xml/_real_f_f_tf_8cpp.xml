<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_real_f_f_tf_8cpp" kind="file" language="C++">
    <compoundname>RealFFTf.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="_experimental_8h" local="yes">Experimental.h</includes>
    <includes refid="_real_f_f_tf_8h" local="yes">RealFFTf.h</includes>
    <incdepgraph>
      <node id="53096">
        <label>stdlib.h</label>
      </node>
      <node id="53099">
        <label>Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="53100" relation="include">
        </childnode>
      </node>
      <node id="53101">
        <label>RealFFTf.h</label>
        <link refid="_real_f_f_tf_8h"/>
        <childnode refid="53099" relation="include">
        </childnode>
      </node>
      <node id="53100">
        <label>wx/defs.h</label>
      </node>
      <node id="53098">
        <label>math.h</label>
      </node>
      <node id="53095">
        <label>C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp</label>
        <link refid="RealFFTf.cpp"/>
        <childnode refid="53096" relation="include">
        </childnode>
        <childnode refid="53097" relation="include">
        </childnode>
        <childnode refid="53098" relation="include">
        </childnode>
        <childnode refid="53099" relation="include">
        </childnode>
        <childnode refid="53101" relation="include">
        </childnode>
      </node>
      <node id="53097">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_real_f_f_tf_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846  /* pi */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="50" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" prot="public" static="no">
        <name>MAX_HFFT</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="126" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_real_f_f_tf_8cpp_1af4977e335df061049a9a5c5fafaf0e48" prot="public" static="yes" mutable="no">
        <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
        <definition>HFFT hFFTArray[MAX_HFFT]</definition>
        <argsstring>[MAX_HFFT]</argsstring>
        <name>hFFTArray</name>
        <initializer>= { <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="127" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_real_f_f_tf_8cpp_1a657b1b4726acbf5b3805163fb673cfa9" prot="public" static="yes" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int nFFTLockCount[MAX_HFFT]</definition>
        <argsstring>[MAX_HFFT]</argsstring>
        <name>nFFTLockCount</name>
        <initializer>= { 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="128" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1a2b189c2319fd7e3a60cce2cdcdaafe02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
        <definition>HFFT InitializeFFT</definition>
        <argsstring>(int fftlen)</argsstring>
        <name>InitializeFFT</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>fftlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="57" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="57" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1ad005674cde11c0f9189a415b438053aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void EndFFT</definition>
        <argsstring>(HFFT h)</argsstring>
        <name>EndFFT</name>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="116" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1ab6b5a688f144e1b30a9fce60088f1fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
        <definition>HFFT GetFFT</definition>
        <argsstring>(int fftlen)</argsstring>
        <name>GetFFT</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>fftlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="132" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="132" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1a65fdbc1b7539d1a8a2bf209b8f9ff24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void ReleaseFFT</definition>
        <argsstring>(HFFT hFFT)</argsstring>
        <name>ReleaseFFT</name>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>hFFT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="150" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1a44e998b240b3b928eb134a9fa2896856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void CleanupFFT</definition>
        <argsstring>()</argsstring>
        <name>CleanupFFT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="162" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="162" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1abb12cd04470120d0f8154f4b0175ec92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void RealFFTf</definition>
        <argsstring>(fft_type *buffer, HFFT h)</argsstring>
        <name>RealFFTf</name>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="191" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="191" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1a8ca4ddedc63a09ab210ebf984d616373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void InverseRealFFTf</definition>
        <argsstring>(fft_type *buffer, HFFT h)</argsstring>
        <name>InverseRealFFTf</name>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="293" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="293" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1aa529bc9f586ca2294d543c9597af1ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void ReorderToFreq</definition>
        <argsstring>(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut)</argsstring>
        <name>ReorderToFreq</name>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>hFFT</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>RealOut</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>ImagOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="376" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="376" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="_real_f_f_tf_8cpp_1aa5ce61e9aa6455ab5703b3c0ce906121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void ReorderToTime</definition>
        <argsstring>(HFFT hFFT, fft_type *buffer, fft_type *TimeOut)</argsstring>
        <name>ReorderToTime</name>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>hFFT</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf48x_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref> *</type>
          <declname>TimeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" line="389" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp" bodystart="389" bodyend="396"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>Program:<sp/>REALFFTF.C</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Philip<sp/>Van<sp/>Baren</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Date:<sp/>2<sp/>September<sp/>1993</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>Description:<sp/>These<sp/>routines<sp/>perform<sp/>an<sp/>FFT<sp/>on<sp/>real<sp/>data<sp/>to<sp/>get<sp/>a<sp/>conjugate-symmetric</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>and<sp/>an<sp/>inverse<sp/>FFT<sp/>on<sp/>conjugate-symmetric<sp/>input<sp/>to<sp/>get<sp/>a<sp/>real</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>sequence.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>code<sp/>is<sp/>for<sp/>floating<sp/>point<sp/>data.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Modified<sp/>8/19/1998<sp/>by<sp/>Philip<sp/>Van<sp/>Baren</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>made<sp/>the<sp/>InitializeFFT<sp/>and<sp/>EndFFT<sp/>routines<sp/>take<sp/>a<sp/>structure</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holding<sp/>the<sp/>length<sp/>and<sp/>pointers<sp/>to<sp/>the<sp/>BitReversed<sp/>and<sp/>SinTable</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tables.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Modified<sp/>5/23/2009<sp/>by<sp/>Philip<sp/>Van<sp/>Baren</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Added<sp/>GetFFT<sp/>and<sp/>ReleaseFFT<sp/>routines<sp/>to<sp/>retain<sp/>common<sp/>SinTable</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>BitReversed<sp/>tables<sp/>so<sp/>they<sp/>don&apos;t<sp/>need<sp/>to<sp/>be<sp/>reallocated</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>recomputed<sp/>on<sp/>every<sp/>call.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Added<sp/>Reorder*<sp/>functions<sp/>to<sp/>undo<sp/>the<sp/>bit-reversal</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(C)<sp/>2009<sp/><sp/>Philip<sp/>VanBaren</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="32"><highlight class="comment">*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*</highlight></codeline>
<codeline lineno="34"><highlight class="comment">*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="35"><highlight class="comment">*<sp/><sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="36"><highlight class="comment">*<sp/><sp/>Foundation,<sp/>Inc.,<sp/>675<sp/>Mass<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_experimental_8h" kindref="compound">Experimental.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_real_f_f_tf_8h" kindref="compound">RealFFTf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_EQ_SSE_THREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_real_f_f_tf48x_8h" kindref="compound">RealFFTf48x.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="_real_f_f_tf_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.14159265358979323846<sp/><sp/></highlight><highlight class="comment">/*<sp/>pi<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*<sp/><sp/>Initialize<sp/>the<sp/>Sine<sp/>table<sp/>and<sp/>Twiddle<sp/>pointers<sp/>(bit-reversed<sp/>pointers)</highlight></codeline>
<codeline lineno="55"><highlight class="comment">*<sp/><sp/>for<sp/>the<sp/>FFT<sp/>routine.</highlight></codeline>
<codeline lineno="56"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="_real_f_f_tf_8h_1a765302e2254983868b935dbe1a523db5" refkind="member"><highlight class="normal"><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/><ref refid="_real_f_f_tf_8cpp_1a2b189c2319fd7e3a60cce2cdcdaafe02" kindref="member">InitializeFFT</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftlen)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>h;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((h=(<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_f_f_t_param" kindref="compound">FFTParam</ref>)))==<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory<sp/>for<sp/>FFT\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(8);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>FFT<sp/>size<sp/>is<sp/>only<sp/>half<sp/>the<sp/>number<sp/>of<sp/>data<sp/>points</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>The<sp/>full<sp/>FFT<sp/>output<sp/>can<sp/>be<sp/>reconstructed<sp/>from<sp/>this<sp/>FFT&apos;s<sp/>output.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>(This<sp/>optimization<sp/>can<sp/>be<sp/>made<sp/>since<sp/>the<sp/>data<sp/>is<sp/>real.)</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref><sp/>=<sp/>fftlen/2;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>=(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*)malloc(2*h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)))==<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory<sp/>for<sp/>Sine<sp/>table.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(8);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)))==<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory<sp/>for<sp/>BitReversed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(8);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;i++)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp=0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(mask=h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>/2;mask&gt;0;mask<sp/>&gt;&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp=(temp<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>(i&amp;mask<sp/>?<sp/>h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref><sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]=temp;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;i++)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>[h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/><sp/>]=(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)-<ref refid="pffft_8c_1a28642ecbd9d1e77ab5a140a460f47d83" kindref="member">sin</ref>(2*<ref refid="_real_f_f_tf_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>*i/(2*h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>[h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]+1]=(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)-<ref refid="pffft_8c_1a57a66355e043ccefc17aca9338a2b748" kindref="member">cos</ref>(2*<ref refid="_real_f_f_tf_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>*i/(2*h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_EQ_SSE_THREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NEW<sp/>SSE<sp/>FFT<sp/>routines<sp/>work<sp/>on<sp/>live<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;32;i++)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((1&lt;&lt;i)&amp;fftlen)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;pow2Bits=i;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">#<ref refid="sndfile__play_8m_1a74c64864f5283ae06d4a981642a59af9" kindref="member">endif</ref></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="114"><highlight class="comment">*<sp/><sp/>Free<sp/>up<sp/>the<sp/>memory<sp/>allotted<sp/>for<sp/>Sin<sp/>table<sp/>and<sp/>Twiddle<sp/>Pointers</highlight></codeline>
<codeline lineno="115"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="_real_f_f_tf_8h_1ac313bd79b50d25eab81bdf34b0dba7f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1ad005674cde11c0f9189a415b438053aa" kindref="member">EndFFT</ref>(<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>h)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>=0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>free(h);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_HFFT<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFTArray[<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>]<sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFFTLockCount[<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>handle<sp/>to<sp/>the<sp/>FFT<sp/>tables<sp/>of<sp/>the<sp/>desired<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>version<sp/>keeps<sp/>common<sp/>tables<sp/>rather<sp/>than<sp/>allocating<sp/>a<sp/>NEW<sp/>table<sp/>every<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="_real_f_f_tf_8h_1a696c324f8703d2992dfae6cde0e2ef20" refkind="member"><highlight class="normal"><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/><ref refid="_real_f_f_tf_8cpp_1ab6b5a688f144e1b30a9fce60088f1fe0" kindref="member">GetFFT</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftlen)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,n<sp/>=<sp/>fftlen/2;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(h=0;<sp/>(h&lt;<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>)<sp/>&amp;&amp;<sp/>(hFFTArray[h]<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>&amp;&amp;<sp/>(n<sp/>!=<sp/>hFFTArray[h]-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>);<sp/>h++);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h&lt;<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hFFTArray[h]<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hFFTArray[h]<sp/>=<sp/><ref refid="_real_f_f_tf_8cpp_1a2b189c2319fd7e3a60cce2cdcdaafe02" kindref="member">InitializeFFT</ref>(fftlen);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFFTLockCount[h]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nFFTLockCount[h]++;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hFFTArray[h];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>buffers<sp/>used,<sp/>so<sp/>fall<sp/>back<sp/>to<sp/>allocating<sp/>a<sp/>NEW<sp/>set<sp/>of<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1a2b189c2319fd7e3a60cce2cdcdaafe02" kindref="member">InitializeFFT</ref>(fftlen);;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Release<sp/>a<sp/>previously<sp/>requested<sp/>handle<sp/>to<sp/>the<sp/>FFT<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="_real_f_f_tf_8h_1aeb88beb8414ad8db5cb25eab9a2480da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1a65fdbc1b7539d1a8a2bf209b8f9ff24b" kindref="member">ReleaseFFT</ref>(<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFT)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(h=0;<sp/>(h&lt;<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>)<sp/>&amp;&amp;<sp/>(hFFTArray[h]<sp/>!=<sp/>hFFT);<sp/>h++);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h&lt;<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nFFTLockCount[h]--;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_real_f_f_tf_8cpp_1ad005674cde11c0f9189a415b438053aa" kindref="member">EndFFT</ref>(hFFT);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deallocate<sp/>any<sp/>unused<sp/>FFT<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="_real_f_f_tf_8h_1a44e998b240b3b928eb134a9fa2896856" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1a44e998b240b3b928eb134a9fa2896856" kindref="member">CleanupFFT</ref>()</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(h=0;<sp/>(h&lt;<ref refid="_real_f_f_tf_8cpp_1a43905fd43a83a6e004c08399af1db278" kindref="member">MAX_HFFT</ref>);<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((nFFTLockCount[h]<sp/>&lt;=<sp/>0)<sp/>&amp;&amp;<sp/>(hFFTArray[h]<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_real_f_f_tf_8cpp_1ad005674cde11c0f9189a415b438053aa" kindref="member">EndFFT</ref>(hFFTArray[h]);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hFFTArray[h]<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*<sp/><sp/>Forward<sp/>FFT<sp/>routine.<sp/><sp/>Must<sp/>call<sp/>InitializeFFT(fftlen)<sp/>first!</highlight></codeline>
<codeline lineno="175"><highlight class="comment">*</highlight></codeline>
<codeline lineno="176"><highlight class="comment">*<sp/><sp/>Note:<sp/>Output<sp/>is<sp/>BIT-REVERSED!<sp/>so<sp/>you<sp/>must<sp/>use<sp/>the<sp/>BitReversed<sp/>to</highlight></codeline>
<codeline lineno="177"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get<sp/>legible<sp/>output,<sp/>(i.e.<sp/>Real_i<sp/>=<sp/>buffer[<sp/>h-&gt;BitReversed[i]<sp/>]</highlight></codeline>
<codeline lineno="178"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Imag_i<sp/>=<sp/>buffer[<sp/>h-&gt;BitReversed[i]+1<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>is<sp/>in<sp/>normal<sp/>order.</highlight></codeline>
<codeline lineno="180"><highlight class="comment">*</highlight></codeline>
<codeline lineno="181"><highlight class="comment">*<sp/>Output<sp/>buffer[0]<sp/>is<sp/>the<sp/>DC<sp/>bin,<sp/>and<sp/>output<sp/>buffer[1]<sp/>is<sp/>the<sp/>Fs/2<sp/>bin</highlight></codeline>
<codeline lineno="182"><highlight class="comment">*<sp/>-<sp/>this<sp/>can<sp/>be<sp/>done<sp/>because<sp/>both<sp/>values<sp/>will<sp/>always<sp/>be<sp/>real<sp/>only</highlight></codeline>
<codeline lineno="183"><highlight class="comment">*<sp/>-<sp/>this<sp/>allows<sp/>us<sp/>to<sp/>not<sp/>have<sp/>to<sp/>allocate<sp/>an<sp/>extra<sp/>complex<sp/>value<sp/>for<sp/>the<sp/>Fs/2<sp/>bin</highlight></codeline>
<codeline lineno="184"><highlight class="comment">*</highlight></codeline>
<codeline lineno="185"><highlight class="comment">*<sp/><sp/>Note:<sp/>The<sp/>scaling<sp/>on<sp/>this<sp/>is<sp/>done<sp/>according<sp/>to<sp/>the<sp/>standard<sp/>FFT<sp/>definition,</highlight></codeline>
<codeline lineno="186"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>a<sp/>unit<sp/>amplitude<sp/>DC<sp/>signal<sp/>will<sp/>output<sp/>an<sp/>amplitude<sp/>of<sp/>(N)</highlight></codeline>
<codeline lineno="187"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Older<sp/>revisions<sp/>would<sp/>progressively<sp/>scale<sp/>the<sp/>input,<sp/>so<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="188"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>would<sp/>be<sp/>similar<sp/>in<sp/>amplitude<sp/>to<sp/>the<sp/>input<sp/>values,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="189"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>good<sp/>when<sp/>using<sp/>fixed<sp/>point<sp/>arithmetic)</highlight></codeline>
<codeline lineno="190"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="_real_f_f_tf_8h_1a07d34d8a9febca0f4d7a7a29c5ebb2ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1abb12cd04470120d0f8154f4b0175ec92" kindref="member">RealFFTf</ref>(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>h)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a955f504eccf76b4eb2489c0adab03121" kindref="member">A</ref>,*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*sptr;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*endptr1,*endptr2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*br1,*br2;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>HRplus,HRminus,HIplus,HIminus;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>v1,v2,<ref refid="pffft_8c_1a28642ecbd9d1e77ab5a140a460f47d83" kindref="member">sin</ref>,<ref refid="pffft_8c_1a57a66355e043ccefc17aca9338a2b748" kindref="member">cos</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ButterfliesPerGroup=h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>/2;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>Butterfly:</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Ain-----Aout</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\<sp/>/</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Bin-----Bout</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/>endptr1=buffer+h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*2;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ButterfliesPerGroup&gt;0)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A=<ref refid="recplay_8c_1adbbab5cb2248179d231690a1a02ff977" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B=buffer+ButterfliesPerGroup*2;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr=h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(A&lt;endptr1)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin=*sptr;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos=*(sptr+1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endptr2=<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(A&lt;endptr2)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1=*B*cos<sp/>+<sp/>*(B+1)*sin;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2=*B*sin<sp/>-<sp/>*(B+1)*cos;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*B=(*A+v1);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(A++)=*(B++)-2*v1;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*B=(*A-v2);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(A++)=*(B++)+2*v2;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A=<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B+=ButterfliesPerGroup*2;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sptr+=2;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ButterfliesPerGroup<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Massage<sp/>output<sp/>to<sp/>get<sp/>the<sp/>output<sp/>for<sp/>a<sp/>real<sp/>input<sp/>sequence.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>br1=h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>+1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>br2=h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>+h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>-1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(br1&lt;br2)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sin=h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>[*br1];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cos=h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>[*br1+1];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A=buffer+*br1;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B=buffer+*br2;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HRplus<sp/>=<sp/>(HRminus<sp/>=<sp/>*A<sp/><sp/><sp/><sp/><sp/>-<sp/>*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref><sp/><sp/><sp/><sp/>)<sp/>+<sp/>(*B<sp/><sp/><sp/><sp/><sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HIplus<sp/>=<sp/>(HIminus<sp/>=<sp/>*(A+1)<sp/>-<sp/>*(B+1))<sp/>+<sp/>(*(B+1)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(sin*HRminus<sp/>-<sp/>cos*HIplus);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(cos*HRminus<sp/>+<sp/>sin*HIplus);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*A<sp/>=<sp/>(HRplus<sp/><sp/>+<sp/>v1)<sp/>*<sp/>(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)0.5;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*B<sp/>=<sp/>*A<sp/>-<sp/>v1;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(A+1)<sp/>=<sp/>(HIminus<sp/>+<sp/>v2)<sp/>*<sp/>(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)0.5;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(B+1)<sp/>=<sp/>*(A+1)<sp/>-<sp/>HIminus;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>br1++;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>br2--;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>the<sp/>center<sp/>bin<sp/>(just<sp/>need<sp/>a<sp/>conjugate)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/>A=buffer+*br1+1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>*A=-*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a955f504eccf76b4eb2489c0adab03121" kindref="member">A</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>DC<sp/>bin<sp/>separately<sp/>-<sp/>and<sp/>ignore<sp/>the<sp/>Fs/2<sp/>bin</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/>buffer[0]+=buffer[1];</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/>buffer[1]=(fft_type)0;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>DC<sp/>and<sp/>Fs/2<sp/>bins<sp/>separately<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>the<sp/>Fs/2<sp/>value<sp/>into<sp/>the<sp/>imaginary<sp/>part<sp/>of<sp/>the<sp/>DC<sp/>bin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>v1=buffer[0]-buffer[1];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/>buffer[0]+=buffer[1];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>buffer[1]=v1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Description:<sp/>This<sp/>routine<sp/>performs<sp/>an<sp/>inverse<sp/>FFT<sp/>to<sp/>real<sp/>data.</highlight></codeline>
<codeline lineno="275"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>code<sp/>is<sp/>for<sp/>floating<sp/>point<sp/>data.</highlight></codeline>
<codeline lineno="276"><highlight class="comment">*</highlight></codeline>
<codeline lineno="277"><highlight class="comment">*<sp/><sp/>Note:<sp/>Output<sp/>is<sp/>BIT-REVERSED!<sp/>so<sp/>you<sp/>must<sp/>use<sp/>the<sp/>BitReversed<sp/>to</highlight></codeline>
<codeline lineno="278"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get<sp/>legible<sp/>output,<sp/>(i.e.<sp/>wave[2*i]<sp/><sp/><sp/>=<sp/>buffer[<sp/>BitReversed[i]<sp/>]</highlight></codeline>
<codeline lineno="279"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wave[2*i+1]<sp/>=<sp/>buffer[<sp/>BitReversed[i]+1<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="280"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>is<sp/>in<sp/>normal<sp/>order,<sp/>interleaved<sp/>(real,imaginary)<sp/>complex<sp/>data</highlight></codeline>
<codeline lineno="281"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>You<sp/>must<sp/>call<sp/>InitializeFFT(fftlen)<sp/>first<sp/>to<sp/>initialize<sp/>some<sp/>buffers!</highlight></codeline>
<codeline lineno="282"><highlight class="comment">*</highlight></codeline>
<codeline lineno="283"><highlight class="comment">*<sp/>Input<sp/>buffer[0]<sp/>is<sp/>the<sp/>DC<sp/>bin,<sp/>and<sp/>input<sp/>buffer[1]<sp/>is<sp/>the<sp/>Fs/2<sp/>bin</highlight></codeline>
<codeline lineno="284"><highlight class="comment">*<sp/>-<sp/>this<sp/>can<sp/>be<sp/>done<sp/>because<sp/>both<sp/>values<sp/>will<sp/>always<sp/>be<sp/>real<sp/>only</highlight></codeline>
<codeline lineno="285"><highlight class="comment">*<sp/>-<sp/>this<sp/>allows<sp/>us<sp/>to<sp/>not<sp/>have<sp/>to<sp/>allocate<sp/>an<sp/>extra<sp/>complex<sp/>value<sp/>for<sp/>the<sp/>Fs/2<sp/>bin</highlight></codeline>
<codeline lineno="286"><highlight class="comment">*</highlight></codeline>
<codeline lineno="287"><highlight class="comment">*<sp/><sp/>Note:<sp/>The<sp/>scaling<sp/>on<sp/>this<sp/>is<sp/>done<sp/>according<sp/>to<sp/>the<sp/>standard<sp/>FFT<sp/>definition,</highlight></codeline>
<codeline lineno="288"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>a<sp/>unit<sp/>amplitude<sp/>DC<sp/>signal<sp/>will<sp/>output<sp/>an<sp/>amplitude<sp/>of<sp/>(N)</highlight></codeline>
<codeline lineno="289"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Older<sp/>revisions<sp/>would<sp/>progressively<sp/>scale<sp/>the<sp/>input,<sp/>so<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="290"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>would<sp/>be<sp/>similar<sp/>in<sp/>amplitude<sp/>to<sp/>the<sp/>input<sp/>values,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="291"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>good<sp/>when<sp/>using<sp/>fixed<sp/>point<sp/>arithmetic)</highlight></codeline>
<codeline lineno="292"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="_real_f_f_tf_8h_1a316075c80ebcbd681c46884e4c91c169" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1a8ca4ddedc63a09ab210ebf984d616373" kindref="member">InverseRealFFTf</ref>(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>h)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a955f504eccf76b4eb2489c0adab03121" kindref="member">A</ref>,*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*sptr;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*endptr1,*endptr2;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*br1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>HRplus,HRminus,HIplus,HIminus;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>v1,v2,<ref refid="pffft_8c_1a28642ecbd9d1e77ab5a140a460f47d83" kindref="member">sin</ref>,<ref refid="pffft_8c_1a57a66355e043ccefc17aca9338a2b748" kindref="member">cos</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ButterfliesPerGroup=h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>/2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Massage<sp/>input<sp/>to<sp/>get<sp/>the<sp/>input<sp/>for<sp/>a<sp/>real<sp/>output<sp/>sequence.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>A=buffer+2;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/>B=buffer+h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*2-2;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>br1=h-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>+1;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(A&lt;B)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sin=h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>[*br1];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cos=h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>[*br1+1];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HRplus<sp/>=<sp/>(HRminus<sp/>=<sp/>*A<sp/><sp/><sp/><sp/><sp/>-<sp/>*<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref><sp/><sp/><sp/><sp/>)<sp/>+<sp/>(*B<sp/><sp/><sp/><sp/><sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HIplus<sp/>=<sp/>(HIminus<sp/>=<sp/>*(A+1)<sp/>-<sp/>*(B+1))<sp/>+<sp/>(*(B+1)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(sin*HRminus<sp/>+<sp/>cos*HIplus);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(cos*HRminus<sp/>-<sp/>sin*HIplus);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*A<sp/>=<sp/>(HRplus<sp/><sp/>+<sp/>v1)<sp/>*<sp/>(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)0.5;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*B<sp/>=<sp/>*A<sp/>-<sp/>v1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(A+1)<sp/>=<sp/>(HIminus<sp/>-<sp/>v2)<sp/>*<sp/>(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)0.5;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(B+1)<sp/>=<sp/>*(A+1)<sp/>-<sp/>HIminus;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A+=2;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B-=2;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>br1++;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>center<sp/>bin<sp/>(just<sp/>need<sp/>conjugate)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/>*(A+1)=-*(A+1);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>DC<sp/>bin<sp/>separately<sp/>-<sp/>this<sp/>ignores<sp/>any<sp/>Fs/2<sp/>component</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/>buffer[1]=buffer[0]=buffer[0]/2;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>DC<sp/>and<sp/>Fs/2<sp/>bins<sp/>specially<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>DC<sp/>bin<sp/>is<sp/>passed<sp/>in<sp/>as<sp/>the<sp/>real<sp/>part<sp/>of<sp/>the<sp/>DC<sp/>complex<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Fs/2<sp/>bin<sp/>is<sp/>passed<sp/>in<sp/>as<sp/>the<sp/>imaginary<sp/>part<sp/>of<sp/>the<sp/>DC<sp/>complex<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(v1+v2)<sp/>=<sp/>buffer[0]<sp/>==<sp/>the<sp/>DC<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(v1-v2)<sp/>=<sp/>buffer[1]<sp/>==<sp/>the<sp/>Fs/2<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>v1=0.5f*(buffer[0]+buffer[1]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>v2=0.5f*(buffer[0]-buffer[1]);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/>buffer[0]=v1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>buffer[1]=v2;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>Butterfly:</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Ain-----Aout</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\<sp/>/</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Bin-----Bout</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/>endptr1=buffer+h-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*2;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ButterfliesPerGroup&gt;0)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A=<ref refid="recplay_8c_1adbbab5cb2248179d231690a1a02ff977" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B=buffer+ButterfliesPerGroup*2;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr=h-&gt;<ref refid="struct_f_f_t_param_1a31cb8421cbc35c7071687691afc60c25" kindref="member">SinTable</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(A&lt;endptr1)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin=*(sptr++);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos=*(sptr++);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endptr2=<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(A&lt;endptr2)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1=*B*cos<sp/>-<sp/>*(B+1)*sin;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2=*B*sin<sp/>+<sp/>*(B+1)*cos;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*B=(*A+v1)*(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)0.5;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(A++)=*(B++)-v1;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*B=(*A+v2)*(<ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref>)0.5;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(A++)=*(B++)-v2;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A=<ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1a111da81ae5883147168bbb8366377b10" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B+=ButterfliesPerGroup*2;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ButterfliesPerGroup<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="_real_f_f_tf_8h_1aa529bc9f586ca2294d543c9597af1ca3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1aa529bc9f586ca2294d543c9597af1ca3" kindref="member">ReorderToFreq</ref>(<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFT,<sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*RealOut,<sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*ImagOut)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>data<sp/>into<sp/>the<sp/>real<sp/>and<sp/>imaginary<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=1;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RealOut[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]=buffer[hFFT-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/><sp/>];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ImagOut[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]=buffer[hFFT-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]+1];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/>RealOut[0]<sp/>=<sp/>buffer[0];<sp/></highlight><highlight class="comment">//<sp/>DC<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>ImagOut[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>RealOut[hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>]<sp/>=<sp/>buffer[1];<sp/></highlight><highlight class="comment">//<sp/>Fs/2<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/>ImagOut[hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="_real_f_f_tf_8h_1aa5ce61e9aa6455ab5703b3c0ce906121" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_real_f_f_tf_8cpp_1aa5ce61e9aa6455ab5703b3c0ce906121" kindref="member">ReorderToTime</ref>(<ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFT,<sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="_real_f_f_tf_8h_1aa463c67230ad03d3fa9ad549d4704bbb" kindref="member">fft_type</ref><sp/>*TimeOut)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>data<sp/>into<sp/>the<sp/>real<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>*2<sp/><sp/>]=buffer[hFFT-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/><sp/>];</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>*2+1]=buffer[hFFT-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]+1];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/RealFFTf.cpp"/>
  </compounddef>
</doxygen>
