<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__avoptions" kind="group">
    <compoundname>avoptions</compoundname>
    <title>AVOptions</title>
    <innerclass refid="struct_a_v_option" prot="public">AVOption</innerclass>
    <innerclass refid="struct_a_v_option_range" prot="public">AVOptionRange</innerclass>
    <innerclass refid="struct_a_v_option_ranges" prot="public">AVOptionRanges</innerclass>
    <innergroup refid="group__opt__eval__funcs">Evaluating option strings</innergroup>
    <innergroup refid="group__opt__set__funcs">Option setting functions</innergroup>
    <innergroup refid="group__opt__get__funcs">Option getting functions</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__avoptions_1gabd75aa30eb8ad6387672df9a1fa79444" prot="public" static="no">
        <name>AVOptionType</name>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a7aaeee142b88a3078ddc57c644b49a7e" prot="public">
          <name>AV_OPT_TYPE_FLAGS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444ac068b8f6afeeb293a13aeabb5d702411" prot="public">
          <name>AV_OPT_TYPE_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a94d540a5b928da813ff94d9367a1078a" prot="public">
          <name>AV_OPT_TYPE_INT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444ae0b49ec51847a758ceb46976083da2e5" prot="public">
          <name>AV_OPT_TYPE_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444ae91d3f6cbac4a4de2a6e880ac2a52d1a" prot="public">
          <name>AV_OPT_TYPE_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444afadddce95ad3b690dd38644b458b96c4" prot="public">
          <name>AV_OPT_TYPE_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a74ba464440564230a72b95b39593cbfc" prot="public">
          <name>AV_OPT_TYPE_RATIONAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a2689966edbe494482dfdfaa4efdf95d3" prot="public">
          <name>AV_OPT_TYPE_BINARY</name>
          <briefdescription>
<para>offset must point to a pointer immediately followed by an int for the length </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a0fa9f07d428bdc32495fe55c365c5329" prot="public">
          <name>AV_OPT_TYPE_CONST</name>
          <initializer>= 128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a078f280b98b49a9f585c5d479b711d9a" prot="public">
          <name>AV_OPT_TYPE_IMAGE_SIZE</name>
          <initializer>= MKBETAG(&apos;S&apos;,&apos;I&apos;,&apos;Z&apos;,&apos;E&apos;)</initializer>
          <briefdescription>
<para>offset must point to two consecutive integers </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a114085ba9877df34de060124877d8274" prot="public">
          <name>AV_OPT_TYPE_PIXEL_FMT</name>
          <initializer>= MKBETAG(&apos;P&apos;,&apos;F&apos;,&apos;M&apos;,&apos;T&apos;)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a711661923db91bbbd4abdec0efa5ff0a" prot="public">
          <name>AV_OPT_TYPE_SAMPLE_FMT</name>
          <initializer>= MKBETAG(&apos;S&apos;,&apos;F&apos;,&apos;M&apos;,&apos;T&apos;)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a9429811abc62d4a564ec56938df0a572" prot="public">
          <name>AV_OPT_TYPE_VIDEO_RATE</name>
          <initializer>= MKBETAG(&apos;V&apos;,&apos;R&apos;,&apos;A&apos;,&apos;T&apos;)</initializer>
          <briefdescription>
<para>offset must point to <ref refid="struct_a_v_rational" kindref="compound">AVRational</ref> </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a2e3a2fc47ae688f28cc4abe59452a032" prot="public">
          <name>AV_OPT_TYPE_DURATION</name>
          <initializer>= MKBETAG(&apos;D&apos;,&apos;U&apos;,&apos;R&apos;,&apos; &apos;)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444afdcd13cbd184901b05e27595e647fadc" prot="public">
          <name>AV_OPT_TYPE_COLOR</name>
          <initializer>= MKBETAG(&apos;C&apos;,&apos;O&apos;,&apos;L&apos;,&apos;R&apos;)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a5628c270688d2ec28643dfff825dbe26" prot="public">
          <name>AV_OPT_TYPE_CHANNEL_LAYOUT</name>
          <initializer>= MKBETAG(&apos;C&apos;,&apos;H&apos;,&apos;L&apos;,&apos;A&apos;)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a972d740573d501897cf190e044f6cbd1" prot="public">
          <name>FF_OPT_TYPE_FLAGS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444ade76f8560d82f468f9e65e45b06d73be" prot="public">
          <name>FF_OPT_TYPE_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444acef88775b03b83cef74a364782ee05bd" prot="public">
          <name>FF_OPT_TYPE_INT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444af97892f80a0b4906a7558dc3ed329a25" prot="public">
          <name>FF_OPT_TYPE_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444ad267c85328230996430fd6f8b935188b" prot="public">
          <name>FF_OPT_TYPE_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444adf44c8f2d3159a3da10cb119dcf7afce" prot="public">
          <name>FF_OPT_TYPE_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a3c959e9d7a955115e2fd28baabf1866f" prot="public">
          <name>FF_OPT_TYPE_RATIONAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444a095c14bf4791388e6ec64e9362f2c565" prot="public">
          <name>FF_OPT_TYPE_BINARY</name>
          <briefdescription>
<para>offset must point to a pointer immediately followed by an int for the length </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__avoptions_1ggabd75aa30eb8ad6387672df9a1fa79444af4c3a5065a10d45c6137e9a024046a8f" prot="public">
          <name>FF_OPT_TYPE_CONST</name>
          <initializer>=128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" bodystart="220" bodyend="248"/>
      </memberdef>
      <memberdef kind="enum" id="group__avoptions_1ga0411cd49bb5b71852cecd93bcbf0ca2d" prot="public" static="no">
        <name>@7</name>
        <enumvalue id="group__avoptions_1gga0411cd49bb5b71852cecd93bcbf0ca2daa836a939d74606db85ce1f09470d1605" prot="public">
          <name>AV_OPT_FLAG_IMPLICIT_KEY</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Accept to parse a value without a key; the key will then be returned as NULL. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="518" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" bodystart="518" bodyend="525"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__avoptions_1gaa1b952fe722d2259743ba5a35ce47f46" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_option" kindref="compound">AVOption</ref></type>
        <definition>typedef struct AVOption  AVOption</definition>
        <argsstring></argsstring>
        <name>AVOption</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_a_v_option" kindref="compound">AVOption</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__avoptions_1gac8caf68f1d182f6a081ff4336efbeac6" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_option_range" kindref="compound">AVOptionRange</ref></type>
        <definition>typedef struct AVOptionRange  AVOptionRange</definition>
        <argsstring></argsstring>
        <name>AVOptionRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A single allowed range of values, or a single allowed value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__avoptions_1gabebd014aa2f58f03966597e280661e17" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_option_ranges" kindref="compound">AVOptionRanges</ref></type>
        <definition>typedef struct AVOptionRanges  AVOptionRanges</definition>
        <argsstring></argsstring>
        <name>AVOptionRanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of <ref refid="struct_a_v_option_range" kindref="compound">AVOptionRange</ref> structs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="327" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__avoptions_1gaa24cb225a282495b9f44377faac5b73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>attribute_deprecated const AVOption* av_find_opt</definition>
        <argsstring>(void *obj, const char *name, const char *unit, int mask, int flags)</argsstring>
        <name>av_find_opt</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look for an option in obj. Look only for the options which have the flags set as specified in mask and flags (that is, for which it is the case that (opt-&gt;flags &amp; mask) == flags).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a struct whose first element is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the option to look for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unit</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of the option to look for, or any if NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the option found, or NULL if no option has been found</para></simplesect>
<xrefsect id="deprecated_1_deprecated000027"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use av_opt_find. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gaef3d3cd17236e8a38d95c8a13031ba80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>attribute_deprecated int av_set_string3</definition>
        <argsstring>(void *obj, const char *name, const char *val, int alloc, const AVOption **o_out)</argsstring>
        <name>av_set_string3</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>alloc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> **</type>
          <declname>o_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the field of obj with the given name to value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>A struct whose first element is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the field to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. If the field is not of a string type, then the given string is parsed. SI postfixes and some named scalars are supported. If the field is of a numeric type, it has to be a numeric or named scalar. Behavior with more than one scalar and +- infix operators is undefined. If the field is of a flags type, it has to be a sequence of numeric scalars or named flags separated by &apos;+&apos; or &apos;-&apos;. Prefixing a flag with &apos;+&apos; causes it to be set without affecting the other flags; similarly, &apos;-&apos; unsets a flag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">o_out</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL put here a pointer to the <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> found </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>this parameter is currently ignored </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the value has been set, or an AVERROR code in case of error: AVERROR_OPTION_NOT_FOUND if no matching option exists <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(ERANGE)</ref> if the value is out of range <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(EINVAL)</ref> if the value is not valid </para></simplesect>
<xrefsect id="deprecated_1_deprecated000028"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__opt__set__funcs_1ga5fd4b92bdf4f392a2847f711676a7537" kindref="member">av_opt_set()</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga931434cfd1e6b54bcd3152c0c417b306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>attribute_deprecated const AVOption* av_set_double</definition>
        <argsstring>(void *obj, const char *name, double n)</argsstring>
        <name>av_set_double</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gacbcdd7534efded7e6aa546916714aaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>attribute_deprecated const AVOption* av_set_q</definition>
        <argsstring>(void *obj, const char *name, AVRational n)</argsstring>
        <name>av_set_q</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gae617457ddf4f7ffb9daf1fd0d836bc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>attribute_deprecated const AVOption* av_set_int</definition>
        <argsstring>(void *obj, const char *name, int64_t n)</argsstring>
        <name>av_set_int</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga13669ddc74946274fe9ed59dc4a4ad96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double av_get_double</definition>
        <argsstring>(void *obj, const char *name, const AVOption **o_out)</argsstring>
        <name>av_get_double</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> **</type>
          <declname>o_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gaf37a7fe6cc3a390e7c7f03dfb66d78c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
        <definition>AVRational av_get_q</definition>
        <argsstring>(void *obj, const char *name, const AVOption **o_out)</argsstring>
        <name>av_get_q</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> **</type>
          <declname>o_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga31e4f77ef6add323ff0f54bf7e4a0e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
        <definition>int64_t av_get_int</definition>
        <argsstring>(void *obj, const char *name, const AVOption **o_out)</argsstring>
        <name>av_get_int</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> **</type>
          <declname>o_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gae8bbeaee2ccbc463f05ac5b6cf38d4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>attribute_deprecated const char* av_get_string</definition>
        <argsstring>(void *obj, const char *name, const AVOption **o_out, char *buf, int buf_len)</argsstring>
        <name>av_get_string</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> **</type>
          <declname>o_out</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gab7c68cd85b200272fd5f4b68a495d361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>attribute_deprecated const AVOption* av_next_option</definition>
        <argsstring>(void *obj, const AVOption *last)</argsstring>
        <name>av_next_option</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gaf7394e27d34208b24af8bb4b4a11741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_show2</definition>
        <argsstring>(void *obj, void *av_log_obj, int req_flags, int rej_flags)</argsstring>
        <name>av_opt_show2</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>av_log_obj</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>req_flags</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>rej_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show the obj options.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>requested flags for the options to show. Show only the options for which it is opt-&gt;flags &amp; req_flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rej_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>rejected flags for the options to show. Show only the options for which it is !(opt-&gt;flags &amp; req_flags). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>av_log_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>log context to use for showing the options </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gad4ca968e9058b39b2da630ad0a091bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_opt_set_defaults</definition>
        <argsstring>(void *s)</argsstring>
        <name>av_opt_set_defaults</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the values of all <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> fields to their default values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>an AVOption-enabled struct (its first member must be a pointer to <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga6bf3c89a3a5a297733a89d3443094f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>attribute_deprecated void av_opt_set_defaults2</definition>
        <argsstring>(void *s, int mask, int flags)</argsstring>
        <name>av_opt_set_defaults2</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gab48669d1326f7d47ef39e5702e34abd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_set_options_string</definition>
        <argsstring>(void *ctx, const char *opts, const char *key_val_sep, const char *pairs_sep)</argsstring>
        <name>av_set_options_string</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>opts</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>key_val_sep</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>pairs_sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the key/value pairs list in opts. For each key/value pair found, stores the value in the field in ctx that is named like the key. ctx must be an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> context, storing is done using AVOptions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opts</parametername>
</parameternamelist>
<parameterdescription>
<para>options string to parse, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_val_sep</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of characters used to separate key from value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pairs_sep</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of characters used to separate two pairs from each other </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of successfully set key/value pairs, or a negative value corresponding to an AVERROR code in case of error: <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(EINVAL)</ref> if opts cannot be parsed, the error code issued by <ref refid="group__avoptions_1gaef3d3cd17236e8a38d95c8a13031ba80" kindref="member">av_set_string3()</ref> if a key/value pair cannot be set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gaa936b1aa7caca67b21cd50819c2b9fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_set_from_string</definition>
        <argsstring>(void *ctx, const char *opts, const char *const *shorthand, const char *key_val_sep, const char *pairs_sep)</argsstring>
        <name>av_opt_set_from_string</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>opts</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>shorthand</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>key_val_sep</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>pairs_sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the key-value pairs list in opts. For each key=value pair found, set the value of the corresponding option in ctx.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> object to set options on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opts</parametername>
</parameternamelist>
<parameterdescription>
<para>the options string, key-value pairs separated by a delimiter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shorthand</parametername>
</parameternamelist>
<parameterdescription>
<para>a NULL-terminated array of options names for shorthand notation: if the first field in opts has no key part, the key is taken from the first element of shorthand; then again for the second, etc., until either opts is finished, shorthand is finished or a named option is found; after that, all options must be named </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_val_sep</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of characters used to separate key from value, for example &apos;=&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pairs_sep</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of characters used to separate two pairs from each other, for example &apos;:&apos; or &apos;,&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of successfully set key=value pairs, or a negative value corresponding to an AVERROR code in case of error: <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(EINVAL)</ref> if opts cannot be parsed, the error code issued by <ref refid="group__avoptions_1gaef3d3cd17236e8a38d95c8a13031ba80" kindref="member">av_set_string3()</ref> if a key/value pair cannot be set</para></simplesect>
Options names must use only the following characters: a-z A-Z 0-9 - . / _ Separators must use characters distinct from option names and from each other. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gac14db824af52baf8181406e98d116097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_opt_free</definition>
        <argsstring>(void *obj)</argsstring>
        <name>av_opt_free</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free all string and binary options in obj. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga1436a3afc8dbc70ed9e70c8287dcc766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_flag_is_set</definition>
        <argsstring>(void *obj, const char *field_name, const char *flag_name)</argsstring>
        <name>av_opt_flag_is_set</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>flag_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a particular flag is set in a flags field.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the flag field option </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the flag to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-zero if the flag is set, zero if the flag isn&apos;t set, isn&apos;t of the right type, or the flags field doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gaf1a88e8f152d7835f111b1ef8813fb2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_set_dict</definition>
        <argsstring>(void *obj, struct AVDictionary **options)</argsstring>
        <name>av_opt_set_dict</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>struct <ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set all the options from a given dictionary on an object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>a struct whose first element is a pointer to <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options to process. This dictionary will be freed and replaced by a new one containing all options not found in obj. Of course this new dictionary needs to be freed by caller with <ref refid="group__lavu__dict_1ga1bafd682b1fbb90e48a4cc3814b820f7" kindref="member">av_dict_free()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR if some option was found in obj, but could not be set.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__dict_1ga84757a064d7c4e5558389f1459958f8b" kindref="member">av_dict_copy()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga1e459af4e23415b8eb9b05aee81c933c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_get_key_value</definition>
        <argsstring>(const char **ropts, const char *key_val_sep, const char *pairs_sep, unsigned flags, char **rkey, char **rval)</argsstring>
        <name>av_opt_get_key_value</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>ropts</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>key_val_sep</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>pairs_sep</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>rkey</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a key-value pair from the beginning of a string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ropts</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the options string, will be updated to point to the rest of the string (one of the pairs_sep or the final NUL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_val_sep</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of characters used to separate key from value, for example &apos;=&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pairs_sep</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of characters used to separate two pairs from each other, for example &apos;:&apos; or &apos;,&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags; see the AV_OPT_FLAG_* values below </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rkey</parametername>
</parameternamelist>
<parameterdescription>
<para>parsed key; must be freed using <ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rval</parametername>
</parameternamelist>
<parameterdescription>
<para>parsed value; must be freed using <ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 for success, or a negative value corresponding to an AVERROR code in case of error; in particular: <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(EINVAL)</ref> if no key is present </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>const AVOption* av_opt_find</definition>
        <argsstring>(void *obj, const char *name, const char *unit, int opt_flags, int search_flags)</argsstring>
        <name>av_opt_find</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>opt_flags</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>search_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look for an option in an object. Consider only options which have all the specified flags set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a struct whose first element is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. Alternatively a double pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>, if AV_OPT_SEARCH_FAKE_OBJ search flag is set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unit</parametername>
</parameternamelist>
<parameterdescription>
<para>When searching for named constants, name of the unit it belongs to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Find only options with all the specified flags set (AV_OPT_FLAG). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>search_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of AV_OPT_SEARCH_*.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the option found, or NULL if no option was found.</para></simplesect>
<simplesect kind="note"><para>Options found with AV_OPT_SEARCH_CHILDREN flag may not be settable directly with <ref refid="group__avoptions_1gaef3d3cd17236e8a38d95c8a13031ba80" kindref="member">av_set_string3()</ref>. Use special calls which take an options AVDictionary (e.g. <ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input()</ref>) to set options found with this flag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga3e121fd0b44b34e31756f4fe848d29a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>const AVOption* av_opt_find2</definition>
        <argsstring>(void *obj, const char *name, const char *unit, int opt_flags, int search_flags, void **target_obj)</argsstring>
        <name>av_opt_find2</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>opt_flags</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>search_flags</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> **</type>
          <declname>target_obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look for an option in an object. Consider only options which have all the specified flags set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a struct whose first element is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. Alternatively a double pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>, if AV_OPT_SEARCH_FAKE_OBJ search flag is set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unit</parametername>
</parameternamelist>
<parameterdescription>
<para>When searching for named constants, name of the unit it belongs to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Find only options with all the specified flags set (AV_OPT_FLAG). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>search_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of AV_OPT_SEARCH_*. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">target_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL, an object to which the option belongs will be written here. It may be different from obj if AV_OPT_SEARCH_CHILDREN is present in search_flags. This parameter is ignored if search_flags contain AV_OPT_SEARCH_FAKE_OBJ.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the option found, or NULL if no option was found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga78edbb7da1fdc8626d8a52f8ab7e7a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
        <definition>const AVOption* av_opt_next</definition>
        <argsstring>(void *obj, const AVOption *prev)</argsstring>
        <name>av_opt_next</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> *</type>
          <declname>prev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over all AVOptions belonging to obj.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>an AVOptions-enabled struct or a double pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> describing it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>result of the previous call to <ref refid="group__avoptions_1ga78edbb7da1fdc8626d8a52f8ab7e7a0c" kindref="member">av_opt_next()</ref> on this object or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gaacce30022d2e99c7b9309d3ad3345f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_opt_child_next</definition>
        <argsstring>(void *obj, void *prev)</argsstring>
        <name>av_opt_child_next</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>prev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over AVOptions-enabled children of obj.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>result of a previous call to this function or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next AVOptions-enabled child or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gadee1f425013a0f861a40a72d80f189b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> *</type>
        <definition>const AVClass* av_opt_child_class_next</definition>
        <argsstring>(const AVClass *parent, const AVClass *prev)</argsstring>
        <name>av_opt_child_class_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> *</type>
          <declname>prev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over potential AVOptions-enabled children of parent.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>result of a previous call to this function or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_a_v_class" kindref="compound">AVClass</ref> corresponding to next potential child or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1gab1d208d09e487741a28016919225bef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_opt_ptr</definition>
        <argsstring>(const AVClass *avclass, void *obj, const char *name)</argsstring>
        <name>av_opt_ptr</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> *</type>
          <declname>avclass</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a pointer to the requested field in a struct. This function allows accessing a struct even when its fields are moved or renamed since the application making the access has been compiled,</para><para><simplesect kind="return"><para>a pointer to the field, it can be cast to the correct type and read or written to. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga880756f24644ff66c806ed2d9ab3d790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_opt_freep_ranges</definition>
        <argsstring>(AVOptionRanges **ranges)</argsstring>
        <name>av_opt_freep_ranges</name>
        <param>
          <type><ref refid="struct_a_v_option_ranges" kindref="compound">AVOptionRanges</ref> **</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an <ref refid="struct_a_v_option_ranges" kindref="compound">AVOptionRanges</ref> struct and set it to NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga9751db4da3e0facd522f5b345f4001ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_query_ranges</definition>
        <argsstring>(AVOptionRanges **, void *obj, const char *key, int flags)</argsstring>
        <name>av_opt_query_ranges</name>
        <param>
          <type><ref refid="struct_a_v_option_ranges" kindref="compound">AVOptionRanges</ref> **</type>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a list of allowed ranges for the given option.</para><para>The returned list may depend on other fields in obj like for example profile.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>is a bitmask of flags, undefined flags should not be set and should be ignored AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> instead of a full instance</para></parameterdescription>
</parameteritem>
</parameterlist>
The result must be freed with av_opt_freep_ranges.</para><para><simplesect kind="return"><para>&gt;= 0 on success, a negative errro code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__avoptions_1ga4e50bee09b6a374cc54237314892c001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_opt_query_ranges_default</definition>
        <argsstring>(AVOptionRanges **, void *obj, const char *key, int flags)</argsstring>
        <name>av_opt_query_ranges_default</name>
        <param>
          <type><ref refid="struct_a_v_option_ranges" kindref="compound">AVOptionRanges</ref> **</type>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a default list of allowed ranges for the given option.</para><para>This list is constructed without using the <ref refid="struct_a_v_class_1a1f25d6b76f5a8b474cc1cb16aa5ed5df" kindref="member">AVClass.query_ranges()</ref> callback and can be used as fallback from within the callback.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>is a bitmask of flags, undefined flags should not be set and should be ignored AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> instead of a full instance</para></parameterdescription>
</parameteritem>
</parameterlist>
The result must be freed with av_opt_free_ranges.</para><para><simplesect kind="return"><para>&gt;= 0 on success, a negative errro code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="763" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__avoptions_1ga25801ba4fc9b5313eb33ec84e082dd72" prot="public" static="no">
        <name>AV_OPT_SEARCH_CHILDREN</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search in possible children of the given object first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="552" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__avoptions_1gaa764998552a6f6f66a47ecd52b345caa" prot="public" static="no">
        <name>AV_OPT_SEARCH_FAKE_OBJ</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The obj passed to <ref refid="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" kindref="member">av_opt_find()</ref> is fake <ndash/> only a double pointer to <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> instead of a required pointer to a struct containing <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. This is useful for searching for options without needing to allocate the corresponding object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" line="559" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>AVOptions provide a generic system to declare options on arbitrary structs (&quot;objects&quot;). An option can have a help text, a type and a range of possible values. Options may then be enumerated, read and written to.</para><sect1 id="group__avoptions_1avoptions_implement">
<title>Implementing AVOptions</title>
<para>This section describes how to add AVOptions capabilities to a struct.</para><para>All AVOptions-related information is stored in an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. Therefore the first member of the struct should be a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> describing it. The option field of the <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> must be set to a NULL-terminated static array of AVOptions. Each <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> must have a non-empty name, a type, a default value and for number-type AVOptions also a range of allowed values. It must also declare an offset in bytes from the start of the struct, where the field associated with this <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> is located. Other fields in the <ref refid="struct_a_v_option" kindref="compound">AVOption</ref> struct should also be set when applicable, but are not required.</para><para>The following example illustrates an AVOptions-enabled struct: <programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>test_struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AVClass<sp/>*class;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>int_opt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/><sp/><sp/><sp/>*str_opt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*bin_opt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>bin_len;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>test_struct;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>AVOption<sp/>test_options[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>&quot;test_int&quot;,<sp/>&quot;This<sp/>is<sp/>a<sp/>test<sp/>option<sp/>of<sp/>int<sp/>type.&quot;,<sp/>offsetof(test_struct,<sp/>int_opt),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AV_OPT_TYPE_INT,<sp/>{<sp/>.i64<sp/>=<sp/>-1<sp/>},<sp/>INT_MIN,<sp/>INT_MAX<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>&quot;test_str&quot;,<sp/>&quot;This<sp/>is<sp/>a<sp/>test<sp/>option<sp/>of<sp/>string<sp/>type.&quot;,<sp/>offsetof(test_struct,<sp/>str_opt),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AV_OPT_TYPE_STRING<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>&quot;test_bin&quot;,<sp/>&quot;This<sp/>is<sp/>a<sp/>test<sp/>option<sp/>of<sp/>binary<sp/>type.&quot;,<sp/>offsetof(test_struct,<sp/>bin_opt),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AV_OPT_TYPE_BINARY<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>NULL<sp/>},</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>AVClass<sp/>test_class<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.class_name<sp/>=<sp/>&quot;test<sp/>class&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.item_name<sp/><sp/>=<sp/>av_default_item_name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.option<sp/><sp/><sp/><sp/><sp/>=<sp/>test_options,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.version<sp/><sp/><sp/><sp/>=<sp/>LIBAVUTIL_VERSION_INT,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Next, when allocating your struct, you must ensure that the <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> pointer is set to the correct value. Then, <ref refid="group__avoptions_1gad4ca968e9058b39b2da630ad0a091bdb" kindref="member">av_opt_set_defaults()</ref> can be called to initialize defaults. After that the struct is ready to be used with the AVOptions API.</para><para>When cleaning up, you may use the <ref refid="group__avoptions_1gac14db824af52baf8181406e98d116097" kindref="member">av_opt_free()</ref> function to automatically free all the allocated string and binary options.</para><para>Continuing with the above example:</para><para><programlisting><codeline><highlight class="normal">test_struct<sp/>*alloc_test_struct(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test_struct<sp/>*ret<sp/>=<sp/>av_malloc(sizeof(*ret));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ret-&gt;class<sp/>=<sp/>&amp;test_class;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>av_opt_set_defaults(ret);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ret;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>free_test_struct(test_struct<sp/>**foo)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>av_opt_free(*foo);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>av_freep(foo);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="group__avoptions_1avoptions_implement_nesting">
<title>Nesting</title>
<para>It may happen that an AVOptions-enabled struct contains another AVOptions-enabled struct as a member (e.g. <ref refid="struct_a_v_codec_context" kindref="compound">AVCodecContext</ref> in libavcodec exports generic options, while its priv_data field exports codec-specific options). In such a case, it is possible to set up the parent struct to export a child&apos;s options. To do that, simply implement <ref refid="struct_a_v_class_1a1e996ee57c93f5513281c04f68440cff" kindref="member">AVClass.child_next()</ref> and <ref refid="struct_a_v_class_1af1446f94b0cfc1de453319e972eed61d" kindref="member">AVClass.child_class_next()</ref> in the parent struct&apos;s <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. Assuming that the test_struct from above now also contains a child_struct field:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>child_struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AVClass<sp/>*class;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>flags_opt;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>child_struct;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>AVOption<sp/>child_opts[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>&quot;test_flags&quot;,<sp/>&quot;This<sp/>is<sp/>a<sp/>test<sp/>option<sp/>of<sp/>flags<sp/>type.&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offsetof(child_struct,<sp/>flags_opt),<sp/>AV_OPT_TYPE_FLAGS,<sp/>{<sp/>.i64<sp/>=<sp/>0<sp/>},<sp/>INT_MIN,<sp/>INT_MAX<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>NULL<sp/>},</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>AVClass<sp/>child_class<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.class_name<sp/>=<sp/>&quot;child<sp/>class&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.item_name<sp/><sp/>=<sp/>av_default_item_name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.option<sp/><sp/><sp/><sp/><sp/>=<sp/>child_opts,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.version<sp/><sp/><sp/><sp/>=<sp/>LIBAVUTIL_VERSION_INT,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>*child_next(void<sp/>*obj,<sp/>void<sp/>*prev)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test_struct<sp/>*t<sp/>=<sp/>obj;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!prev<sp/>&amp;&amp;<sp/>t-&gt;child_struct)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>t-&gt;child_struct;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>NULL</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">const<sp/>AVClass<sp/>child_class_next(const<sp/>AVClass<sp/>*prev)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>prev<sp/>?<sp/>NULL<sp/>:<sp/>&amp;child_class;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Putting child_next() and child_class_next() as defined above into test_class will now make child_struct&apos;s options accessible through test_struct (again, proper setup as described above needs to be done on child_struct right after it is created).</para><para>From the above example it might not be clear why both child_next() and child_class_next() are needed. The distinction is that child_next() iterates over actually existing objects, while child_class_next() iterates over all possible child classes. E.g. if an <ref refid="struct_a_v_codec_context" kindref="compound">AVCodecContext</ref> was initialized to use a codec which has private options, then its child_next() will return <ref refid="struct_a_v_codec_context_1af3379123060ad8cc9c321c29af4f8360" kindref="member">AVCodecContext.priv_data</ref> and finish iterating. OTOH child_class_next() on <ref refid="struct_a_v_codec_context_1a90622d3af2a9abba986a1c9f7ca21b16" kindref="member">AVCodecContext.av_class</ref> will iterate over all available codecs with private options.</para></sect2>
<sect2 id="group__avoptions_1avoptions_implement_named_constants">
<title>Named constants</title>
<para>It is possible to create named constants for options. Simply set the unit field of the option the constants should apply to a string and create the constants themselves as options of type AV_OPT_TYPE_CONST with their unit field set to the same string. Their default_val field should contain the value of the named constant. For example, to add some named constants for the test_flags option above, put the following into the child_opts array: <programlisting><codeline><highlight class="normal">{<sp/>&quot;test_flags&quot;,<sp/>&quot;This<sp/>is<sp/>a<sp/>test<sp/>option<sp/>of<sp/>flags<sp/>type.&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetof(child_struct,<sp/>flags_opt),<sp/>AV_OPT_TYPE_FLAGS,<sp/>{<sp/>.i64<sp/>=<sp/>0<sp/>},<sp/>INT_MIN,<sp/>INT_MAX,<sp/>&quot;test_unit&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;flag1&quot;,<sp/>&quot;This<sp/>is<sp/>a<sp/>flag<sp/>with<sp/>value<sp/>16&quot;,<sp/>0,<sp/>AV_OPT_TYPE_CONST,<sp/>{<sp/>.i64<sp/>=<sp/>16<sp/>},<sp/>0,<sp/>0,<sp/>&quot;test_unit&quot;<sp/>},</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="group__avoptions_1avoptions_use">
<title>Using AVOptions</title>
<para>This section deals with accessing options in an AVOptions-enabled struct. Such structs in FFmpeg are e.g. <ref refid="struct_a_v_codec_context" kindref="compound">AVCodecContext</ref> in libavcodec or <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> in libavformat.</para><sect2 id="group__avoptions_1avoptions_use_examine">
<title>Examining AVOptions</title>
<para>The basic functions for examining options are <ref refid="group__avoptions_1ga78edbb7da1fdc8626d8a52f8ab7e7a0c" kindref="member">av_opt_next()</ref>, which iterates over all options defined for one object, and <ref refid="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" kindref="member">av_opt_find()</ref>, which searches for an option with the given name.</para><para>The situation is more complicated with nesting. An AVOptions-enabled struct may have AVOptions-enabled children. Passing the AV_OPT_SEARCH_CHILDREN flag to <ref refid="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" kindref="member">av_opt_find()</ref> will make the function search children recursively.</para><para>For enumerating there are basically two cases. The first is when you want to get all options that may potentially exist on the struct and its children (e.g. when constructing documentation). In that case you should call <ref refid="group__avoptions_1gadee1f425013a0f861a40a72d80f189b1" kindref="member">av_opt_child_class_next()</ref> recursively on the parent struct&apos;s <ref refid="struct_a_v_class" kindref="compound">AVClass</ref>. The second case is when you have an already initialized struct with all its children and you want to get all options that can be actually written or read from it. In that case you should call <ref refid="group__avoptions_1gaacce30022d2e99c7b9309d3ad3345f69" kindref="member">av_opt_child_next()</ref> recursively (and <ref refid="group__avoptions_1ga78edbb7da1fdc8626d8a52f8ab7e7a0c" kindref="member">av_opt_next()</ref> on each result).</para></sect2>
<sect2 id="group__avoptions_1avoptions_use_get_set">
<title>Reading and writing AVOptions</title>
<para>When setting options, you often have a string read directly from the user. In such a case, simply passing it to <ref refid="group__opt__set__funcs_1ga5fd4b92bdf4f392a2847f711676a7537" kindref="member">av_opt_set()</ref> is enough. For non-string type options, <ref refid="group__opt__set__funcs_1ga5fd4b92bdf4f392a2847f711676a7537" kindref="member">av_opt_set()</ref> will parse the string according to the option type.</para><para>Similarly <ref refid="group__opt__get__funcs_1gaf31144e60f9ce89dbe8cbea57a0b232c" kindref="member">av_opt_get()</ref> will read any option type and convert it to a string which will be returned. Do not forget that the string is allocated, so you have to free it with <ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref>.</para><para>In some cases it may be more convenient to put all options into an AVDictionary and call <ref refid="group__avoptions_1gaf1a88e8f152d7835f111b1ef8813fb2e" kindref="member">av_opt_set_dict()</ref> on it. A specific case of this are the format/codec open functions in lavf/lavc which take a dictionary filled with option as a parameter. This allows to set some options that cannot be set otherwise, since e.g. the input file format is not known before the file is actually opened. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
