<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_vamp_1_1_host_ext_1_1_plugin_loader" kind="class" language="C++" prot="public">
    <compoundname>Vamp::HostExt::PluginLoader</compoundname>
    <includes refid="_plugin_loader_8h" local="no">vamp-hostsdk/PluginLoader.h</includes>
    <innerclass refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1_1_impl" prot="public">Vamp::HostExt::PluginLoader::Impl</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494" prot="public" static="no">
        <name>AdapterFlags</name>
        <enumvalue id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a763a9a0caf512d9671b90c05c2808a09" prot="public">
          <name>ADAPT_INPUT_DOMAIN</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a54c43b85382d78e8ea8da192bce3a139" prot="public">
          <name>ADAPT_CHANNEL_COUNT</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a5c0c389797922630a6b54ffd1eed21f1" prot="public">
          <name>ADAPT_BUFFER_SIZE</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a8220529e851ae30d37f413c40a389e08" prot="public">
          <name>ADAPT_ALL_SAFE</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a3b1e08415c0cbc96f7900eac955ad6d0" prot="public">
          <name>ADAPT_ALL</name>
          <initializer>= 0xff</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AdapterFlags contains a set of values that may be OR&apos;d together to indicate in which circumstances <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader" kindref="compound">PluginLoader</ref> should use a plugin adapter to make a plugin easier to use for a host that does not want to cater for complex features.</para><para>The available flags are:</para><para>ADAPT_INPUT_DOMAIN - If the plugin expects frequency domain input, wrap it in a <ref refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter" kindref="compound">PluginInputDomainAdapter</ref> that automatically converts the plugin to one that expects time-domain input. This enables a host to accommodate time- and frequency-domain plugins without needing to do any conversion itself.</para><para>ADAPT_CHANNEL_COUNT - Wrap the plugin in a <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> to handle any mismatch between the number of channels of audio the plugin can handle and the number available in the host. This enables a host to use plugins that may require the input to be mixed down to mono, etc., without having to worry about doing that itself.</para><para>ADAPT_BUFFER_SIZE - Wrap the plugin in a <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> permitting the host to provide audio input using any block size, with no overlap, regardless of the plugin&apos;s preferred block size (suitable for hosts that read from non-seekable streaming media, for example). This adapter introduces some run-time overhead and also changes the semantics of the plugin slightly (see the <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> header documentation for details).</para><para>ADAPT_ALL_SAFE - Perform all available adaptations that are meaningful for the plugin and &quot;safe&quot;. Currently this means to ADAPT_INPUT_DOMAIN if the plugin wants FrequencyDomain input; ADAPT_CHANNEL_COUNT always; and ADAPT_BUFFER_SIZE never.</para><para>ADAPT_ALL - Perform all available adaptations that are meaningful for the plugin.</para><para>See <ref refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter" kindref="compound">PluginInputDomainAdapter</ref>, <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> and <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> for more details of the classes that the loader may use if these flags are set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="169" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="169" bodyend="178"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" prot="public" static="no">
        <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
        <definition>typedef std::string Vamp::HostExt::PluginLoader::PluginKey</definition>
        <argsstring></argsstring>
        <name>PluginKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PluginKey is a string type that is used to identify a plugin uniquely within the scope of &quot;the current system&quot;. It consists of the lower-cased base name of the plugin library, a colon separator, and the identifier string for the plugin. It is only meaningful in the context of a given plugin path (the one returned by <ref refid="class_vamp_1_1_plugin_host_adapter_1a08d7ed3a11bf4a3c30fa0f9b41a0fed6" kindref="member">PluginHostAdapter::getPluginPath()</ref>).</para><para>Use <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1abe147b1da483df1afef5c0655aaf3f8d" kindref="member">composePluginKey()</ref> to construct a plugin key from a known plugin library name and identifier.</para><para>Note: the fact that the library component of the key is lower-cased implies that library names are matched case-insensitively by the <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader" kindref="compound">PluginLoader</ref> class, regardless of the case sensitivity of the underlying filesystem. (<ref refid="class_vamp_1_1_plugin" kindref="compound">Plugin</ref> identifiers <emphasis>are</emphasis> case sensitive, however.) Also, it is not possible to portably extract a working library name from a plugin key, as the result may fail on case-sensitive filesystems. Use <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a592d6b4c6edaa369407e833f56e4a4de" kindref="member">getLibraryPathForPlugin()</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="101" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1a0d48b76e4f995110f53e0feeb23f733a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" kindref="member">PluginKey</ref> &gt;</type>
        <definition>typedef std::vector&lt;PluginKey&gt; Vamp::HostExt::PluginLoader::PluginKeyList</definition>
        <argsstring></argsstring>
        <name>PluginKeyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PluginKeyList is a sequence of plugin keys, such as returned by <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aec450c2928b1ae5318d45972722dd16b" kindref="member">listPlugins()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="107" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad6a39aa0c79d8d9209eb0b8dfe9d1364" prot="public" static="no">
        <type>std::vector&lt; <ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref> &gt;</type>
        <definition>typedef std::vector&lt;std::string&gt; Vamp::HostExt::PluginLoader::PluginCategoryHierarchy</definition>
        <argsstring></argsstring>
        <name>PluginCategoryHierarchy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PluginCategoryHierarchy is a sequence of general-&gt;specific category names, as may be associated with a single plugin. This sequence describes the location of a plugin within a category forest, containing the human-readable names of the plugin&apos;s category tree root, followed by each of the nodes down to the leaf containing the plugin.</para><para><simplesect kind="see"><para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad5c594142ff058bd70e66247d45cd86e" kindref="member">getPluginCategory()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="119" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1ac12254d823f6d63cb8ce82a07bdcb072" prot="protected" static="no" mutable="no">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1_1_impl" kindref="compound">Impl</ref> *</type>
        <definition>Impl* Vamp::HostExt::PluginLoader::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="231" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aaa4eae58ddbadf6537a95dbb6e957187" prot="protected" static="yes" mutable="no">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader" kindref="compound">PluginLoader</ref> *</type>
        <definition>PluginLoader * Vamp::HostExt::PluginLoader::m_instance</definition>
        <argsstring></argsstring>
        <name>m_instance</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="233" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1adbb5c8855697a24be890e4f107e26b0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader" kindref="compound">PluginLoader</ref> *</type>
        <definition>PluginLoader * Vamp::HostExt::PluginLoader::getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain a pointer to the singleton instance of <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader" kindref="compound">PluginLoader</ref>. Use this to obtain your loader object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="79" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="154" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1aec450c2928b1ae5318d45972722dd16b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a0d48b76e4f995110f53e0feeb23f733a" kindref="member">PluginKeyList</ref></type>
        <definition>vector&lt; PluginLoader::PluginKey &gt; Vamp::HostExt::PluginLoader::listPlugins</definition>
        <argsstring>()</argsstring>
        <name>listPlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for all available <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugins, and return a list of them in the order in which they were found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="125" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1a2154970381343edef629482bdafea7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vamp_1_1_plugin" kindref="compound">Plugin</ref> *</type>
        <definition>Plugin * Vamp::HostExt::PluginLoader::loadPlugin</definition>
        <argsstring>(PluginKey key, float inputSampleRate, int adapterFlags=0)</argsstring>
        <name>loadPlugin</name>
        <param>
          <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" kindref="member">PluginKey</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>float</type>
          <declname>inputSampleRate</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>adapterFlags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin, given its identifying key. If the plugin could not be loaded, returns 0.</para><para>The returned plugin should be deleted (using the standard C++ delete keyword) after use.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adapterFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>a bitwise OR of the values in the AdapterFlags enumeration, indicating under which circumstances an adapter should be used to wrap the original plugin. If adapterFlags is 0, no optional adapters will be used. Otherwise, the returned plugin may be of an adapter class type which will behave identically to the original plugin, apart from any particular features implemented by the adapter itself.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494" kindref="member">AdapterFlags</ref>, <ref refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter" kindref="compound">PluginInputDomainAdapter</ref>, <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="197" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1abe147b1da483df1afef5c0655aaf3f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" kindref="member">PluginKey</ref></type>
        <definition>PluginLoader::PluginKey Vamp::HostExt::PluginLoader::composePluginKey</definition>
        <argsstring>(std::string libraryName, std::string identifier)</argsstring>
        <name>composePluginKey</name>
        <param>
          <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
          <declname>libraryName</declname>
        </param>
        <param>
          <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin library name and plugin identifier, return the corresponding plugin key in a form suitable for passing in to <ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a2154970381343edef629482bdafea7e2" kindref="member">loadPlugin()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="206" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad5c594142ff058bd70e66247d45cd86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad6a39aa0c79d8d9209eb0b8dfe9d1364" kindref="member">PluginCategoryHierarchy</ref></type>
        <definition>PluginLoader::PluginCategoryHierarchy Vamp::HostExt::PluginLoader::getPluginCategory</definition>
        <argsstring>(PluginKey plugin)</argsstring>
        <name>getPluginCategory</name>
        <param>
          <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" kindref="member">PluginKey</ref></type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the category hierarchy for a <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin, given its identifying key.</para><para>If the plugin has no category information, return an empty hierarchy.</para><para><simplesect kind="see"><para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad6a39aa0c79d8d9209eb0b8dfe9d1364" kindref="member">PluginCategoryHierarchy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="218" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1a592d6b4c6edaa369407e833f56e4a4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
        <definition>string Vamp::HostExt::PluginLoader::getLibraryPathForPlugin</definition>
        <argsstring>(PluginKey plugin)</argsstring>
        <name>getLibraryPathForPlugin</name>
        <param>
          <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" kindref="member">PluginKey</ref></type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the file path of the dynamic library from which the given plugin will be loaded (if available). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="224" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="193" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1a5ab9e0281244bef7976c6c0ce1a55c24" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vamp::HostExt::PluginLoader::PluginLoader</definition>
        <argsstring>()</argsstring>
        <name>PluginLoader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="227" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_loader_1a9e092d864efdc0f16c032bfb25e76dea" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Vamp::HostExt::PluginLoader::~PluginLoader</definition>
        <argsstring>()</argsstring>
        <name>~PluginLoader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="228" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginLoader.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_loader" kindref="compound">Vamp::HostExt::PluginLoader</ref> is a convenience class for discovering and loading <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugins using the typical plugin-path, library naming, and categorisation conventions described in the <ref refid="namespace_vamp" kindref="compound">Vamp</ref> SDK documentation. This class is intended to greatly simplify the task of becoming a <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin host for any C++ application.</para><para>Hosts are not required by the <ref refid="namespace_vamp" kindref="compound">Vamp</ref> specification to use the same plugin search path and naming conventions as implemented by this class, and are certainly not required to use this actual class. But we do strongly recommend it.</para><para><simplesect kind="note"><para>This class was introduced in version 1.1 of the <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin SDK. </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="8982">
        <label>Vamp::HostExt::PluginLoader</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_loader"/>
        <childnode refid="8982" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
        <childnode refid="8983" relation="usage">
          <edgelabel>m_impl</edgelabel>
        </childnode>
      </node>
      <node id="8987">
        <label>map&lt; PluginKey, string &gt;</label>
      </node>
      <node id="8983">
        <label>Vamp::HostExt::PluginLoader::Impl</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1_1_impl"/>
        <childnode refid="8984" relation="usage">
          <edgelabel>m_taxonomy</edgelabel>
        </childnode>
        <childnode refid="8985" relation="usage">
          <edgelabel>m_cleaner</edgelabel>
        </childnode>
        <childnode refid="8986" relation="usage">
          <edgelabel>m_pluginLibraryHandleMap</edgelabel>
        </childnode>
        <childnode refid="8987" relation="usage">
          <edgelabel>m_pluginLibraryNameMap</edgelabel>
        </childnode>
      </node>
      <node id="8984">
        <label>map&lt; PluginKey, PluginCategoryHierarchy &gt;</label>
      </node>
      <node id="8986">
        <label>map&lt; Vamp::Plugin *, void * &gt;</label>
      </node>
      <node id="8985">
        <label>Vamp::HostExt::PluginLoader::Impl::InstanceCleaner</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1_1_impl_1_1_instance_cleaner"/>
        <childnode refid="8982" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" line="73" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginLoader.h" bodystart="72" bodyend="234"/>
    <listofallmembers>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a3b1e08415c0cbc96f7900eac955ad6d0" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>ADAPT_ALL</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a8220529e851ae30d37f413c40a389e08" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>ADAPT_ALL_SAFE</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a5c0c389797922630a6b54ffd1eed21f1" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>ADAPT_BUFFER_SIZE</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a54c43b85382d78e8ea8da192bce3a139" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>ADAPT_CHANNEL_COUNT</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494a763a9a0caf512d9671b90c05c2808a09" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>ADAPT_INPUT_DOMAIN</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aff3ee11692ce25e0dfb904324cbe3494" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>AdapterFlags</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1abe147b1da483df1afef5c0655aaf3f8d" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>composePluginKey</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1adbb5c8855697a24be890e4f107e26b0e" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>getInstance</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a592d6b4c6edaa369407e833f56e4a4de" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>getLibraryPathForPlugin</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad5c594142ff058bd70e66247d45cd86e" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>getPluginCategory</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aec450c2928b1ae5318d45972722dd16b" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>listPlugins</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a2154970381343edef629482bdafea7e2" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>loadPlugin</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1ac12254d823f6d63cb8ce82a07bdcb072" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>m_impl</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1aaa4eae58ddbadf6537a95dbb6e957187" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>m_instance</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1ad6a39aa0c79d8d9209eb0b8dfe9d1364" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>PluginCategoryHierarchy</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a473645bbb3ac5c1a0da2f0f482947c4d" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>PluginKey</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a0d48b76e4f995110f53e0feeb23f733a" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>PluginKeyList</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a5ab9e0281244bef7976c6c0ce1a55c24" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>PluginLoader</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1a9e092d864efdc0f16c032bfb25e76dea" prot="protected" virt="virtual"><scope>Vamp::HostExt::PluginLoader</scope><name>~PluginLoader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
