<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacepyportmidi_1_1midi" kind="namespace" language="Python">
    <compoundname>pyportmidi::midi</compoundname>
    <innerclass refid="classpyportmidi_1_1midi_1_1_input" prot="public">pyportmidi::midi::Input</innerclass>
    <innerclass refid="classpyportmidi_1_1midi_1_1_midi_exception" prot="public">pyportmidi::midi::MidiException</innerclass>
    <innerclass refid="classpyportmidi_1_1midi_1_1_output" prot="public">pyportmidi::midi::Output</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepyportmidi_1_1midi_1af521381276871d8cdcabb5b3c0eaf72d" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pyportmidi::midi._init</definition>
        <argsstring></argsstring>
        <name>_init</name>
        <initializer>= False</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="17" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepyportmidi_1_1midi_1a9c5f2d9c871eca740c9e28157733f12b" prot="private" static="no" mutable="no">
        <type></type>
        <definition>pyportmidi::midi._pypm</definition>
        <argsstring></argsstring>
        <name>_pypm</name>
        <initializer>= None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="18" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepyportmidi_1_1midi_1a9f344523d6cf5b0096270d5aa5a94351" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list pyportmidi::midi.__all__</definition>
        <argsstring></argsstring>
        <name>__all__</name>
        <initializer>= [ &quot;Input&quot;,
            &quot;<ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>&quot;,
            &quot;<ref refid="classpyportmidi_1_1midi_1_1_output" kindref="compound">Output</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1aefe6f781e4c0438b7367ab38420b40fe" kindref="member">get_count</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1a363659de2add2e70b2ff71c3ce1464a2" kindref="member">get_default_input_id</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1a5fa5844528cd9e0960747caef3a49d72" kindref="member">get_default_output_id</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1ae6999ebd102645244f4de1d46ed31875" kindref="member">get_device_info</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1ae790448b43b32216ea49a4ea3a38d4f1" kindref="member">init</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1ab137af1a6f12f955b0b05c088097cebe" kindref="member">quit</ref>&quot;,
            &quot;<ref refid="namespacepyportmidi_1_1midi_1ad2426758f88d23d7208984d5c99ec050" kindref="member">time</ref>&quot;,
           ]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="21" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepyportmidi_1_1midi_1ab0396ef9636550eb71863fbc602d4d91" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list pyportmidi::midi.__theclasses__</definition>
        <argsstring></argsstring>
        <name>__theclasses__</name>
        <initializer>= [&quot;Input&quot;, &quot;<ref refid="classpyportmidi_1_1midi_1_1_output" kindref="compound">Output</ref>&quot;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="33" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1ae790448b43b32216ea49a4ea3a38d4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>initialize the midi module
pyportmidi.init(): return None

Call the initialisation function before using the midi module.

It is safe to call this more than once.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="36" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="36" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1ab137af1a6f12f955b0b05c088097cebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.quit</definition>
        <argsstring>()</argsstring>
        <name>quit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>uninitialize the midi module
pyportmidi.quit(): return None


Called automatically atexit if you don&apos;t call it.

It is safe to call this function more than once.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="54" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1a1d7d75a5c93a02544606fdfc7845e1f5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi._check_init</definition>
        <argsstring>()</argsstring>
        <name>_check_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="70" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1aefe6f781e4c0438b7367ab38420b40fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.get_count</definition>
        <argsstring>()</argsstring>
        <name>get_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>gets the number of devices.
pyportmidi.get_count(): return num_devices


Device ids range from 0 to get_count() -1
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="74" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="74" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1a363659de2add2e70b2ff71c3ce1464a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.get_default_input_id</definition>
        <argsstring>()</argsstring>
        <name>get_default_input_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>gets default input device number
pyportmidi.get_default_input_id(): return default_id


Return the default device ID or -1 if there are no devices.
The result can be passed to the Input()/Ouput() class.

On the PC, the user can specify a default device by
setting an environment variable. For example, to use device #1.

    set PM_RECOMMENDED_INPUT_DEVICE=1

The user should first determine the available device ID by using
the supplied application &quot;testin&quot; or &quot;testout&quot;.

In general, the registry is a better place for this kind of info,
and with USB devices that can come and go, using integers is not
very reliable for device identification. Under Windows, if
PM_RECOMMENDED_OUTPUT_DEVICE (or PM_RECOMMENDED_INPUT_DEVICE) is
*NOT* found in the environment, then the default device is obtained
by looking for a string in the registry under:
    HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
and HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device
for a string. The number of the first device with a substring that
matches the string exactly is returned. For example, if the string
in the registry is &quot;USB&quot;, and device 1 is named
&quot;In USB MidiSport 1x1&quot;, then that will be the default
input because it contains the string &quot;USB&quot;.

In addition to the name, get_device_info() returns &quot;interf&quot;, which
is the interface name. (The &quot;interface&quot; is the underlying software
system or API used by PortMidi to access devices. Examples are
MMSystem, DirectX (not implemented), ALSA, OSS (not implemented), etc.)
At present, the only Win32 interface is &quot;MMSystem&quot;, the only Linux
interface is &quot;ALSA&quot;, and the only Max OS X interface is &quot;CoreMIDI&quot;.
To specify both the interface and the device name in the registry,
separate the two with a comma and a space, e.g.:
    MMSystem, In USB MidiSport 1x1
In this case, the string before the comma must be a substring of
the &quot;interf&quot; string, and the string after the space must be a
substring of the &quot;name&quot; name string in order to match the device.

Note: in the current release, the default is simply the first device
(the input or output device with the lowest PmDeviceID).
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="87" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="87" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1a5fa5844528cd9e0960747caef3a49d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.get_default_output_id</definition>
        <argsstring>()</argsstring>
        <name>get_default_output_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>gets default output device number
pyportmidi.get_default_output_id(): return default_id


Return the default device ID or -1 if there are no devices.
The result can be passed to the Input()/Ouput() class.

On the PC, the user can specify a default device by
setting an environment variable. For example, to use device #1.

    set PM_RECOMMENDED_OUTPUT_DEVICE=1

The user should first determine the available device ID by using
the supplied application &quot;testin&quot; or &quot;testout&quot;.

In general, the registry is a better place for this kind of info,
and with USB devices that can come and go, using integers is not
very reliable for device identification. Under Windows, if
PM_RECOMMENDED_OUTPUT_DEVICE (or PM_RECOMMENDED_INPUT_DEVICE) is
*NOT* found in the environment, then the default device is obtained
by looking for a string in the registry under:
    HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
and HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device
for a string. The number of the first device with a substring that
matches the string exactly is returned. For example, if the string
in the registry is &quot;USB&quot;, and device 1 is named
&quot;In USB MidiSport 1x1&quot;, then that will be the default
input because it contains the string &quot;USB&quot;.

In addition to the name, get_device_info() returns &quot;interf&quot;, which
is the interface name. (The &quot;interface&quot; is the underlying software
system or API used by PortMidi to access devices. Examples are
MMSystem, DirectX (not implemented), ALSA, OSS (not implemented), etc.)
At present, the only Win32 interface is &quot;MMSystem&quot;, the only Linux
interface is &quot;ALSA&quot;, and the only Max OS X interface is &quot;CoreMIDI&quot;.
To specify both the interface and the device name in the registry,
separate the two with a comma and a space, e.g.:
    MMSystem, In USB MidiSport 1x1
In this case, the string before the comma must be a substring of
the &quot;interf&quot; string, and the string after the space must be a
substring of the &quot;name&quot; name string in order to match the device.

Note: in the current release, the default is simply the first device
(the input or output device with the lowest PmDeviceID).
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="138" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="138" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1ae6999ebd102645244f4de1d46ed31875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.get_device_info</definition>
        <argsstring>(an_id)</argsstring>
        <name>get_device_info</name>
        <param>
          <type>an_id</type>
          <defname>an_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>returns information about a midi device
pyportmidi.get_device_info(an_id): return (interf, name, input, output, opened) 

interf - a text string describing the device interface, eg &apos;ALSA&apos;.
name - a text string for the name of the device, eg &apos;Midi Through Port-0&apos;
input - 0, or 1 if the device is an input device.
output - 0, or 1 if the device is an output device.
opened - 0, or 1 if the device is opened.

If the id is out of range, the function returns None.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="188" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="188" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacepyportmidi_1_1midi_1ad2426758f88d23d7208984d5c99ec050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.time</definition>
        <argsstring>()</argsstring>
        <name>time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>returns the current time in ms of the PortMidi timer
pyportmidi.time(): return time

The time is reset to 0, when the module is inited.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="542" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="542" bodyend="556"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Module for interacting with midi input and output.

The midi module can send output to midi devices, and get input
from midi devices.  It can also list midi devices on the system.

Including real midi devices, and virtual ones.

It uses the portmidi library.  Is portable to which ever platforms
portmidi supports (currently windows, OSX, and linux).
</verbatim> </para>    </detaileddescription>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="1" column="1"/>
  </compounddef>
</doxygen>
