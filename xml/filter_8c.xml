<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="filter_8c" kind="file" language="C++">
    <compoundname>filter.c</compoundname>
    <includes refid="libsoxr_2src_2_filter_8h" local="yes">filter.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="fft4g_8h" local="yes">fft4g.h</includes>
    <includes refid="ccrw2_8h" local="yes">ccrw2.h</includes>
    <includes refid="fft4g__cache_8h" local="yes">fft4g_cache.h</includes>
    <includes refid="rdft_8h" local="yes">rdft.h</includes>
    <incdepgraph>
      <node id="21174">
        <label>stdlib.h</label>
      </node>
      <node id="21170">
        <label>aliases.h</label>
        <link refid="aliases_8h"/>
      </node>
      <node id="21178">
        <label>rdft.h</label>
        <link refid="rdft_8h"/>
      </node>
      <node id="21172">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="21176">
        <label>ccrw2.h</label>
        <link refid="ccrw2_8h"/>
      </node>
      <node id="21173">
        <label>string.h</label>
      </node>
      <node id="21175">
        <label>fft4g.h</label>
        <link refid="fft4g_8h"/>
      </node>
      <node id="21168">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c</label>
        <link refid="filter.c"/>
        <childnode refid="21169" relation="include">
        </childnode>
        <childnode refid="21171" relation="include">
        </childnode>
        <childnode refid="21172" relation="include">
        </childnode>
        <childnode refid="21173" relation="include">
        </childnode>
        <childnode refid="21174" relation="include">
        </childnode>
        <childnode refid="21175" relation="include">
        </childnode>
        <childnode refid="21176" relation="include">
        </childnode>
        <childnode refid="21177" relation="include">
        </childnode>
        <childnode refid="21178" relation="include">
        </childnode>
      </node>
      <node id="21169">
        <label>filter.h</label>
        <link refid="libsoxr_2src_2_filter_8h"/>
        <childnode refid="21170" relation="include">
        </childnode>
      </node>
      <node id="21171">
        <label>math.h</label>
      </node>
      <node id="21177">
        <label>fft4g_cache.h</label>
        <link refid="fft4g__cache_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="8" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a65ac1b834fa43249302c9aece9f6aed5" prot="public" static="no">
        <name>DFT_FLOAT</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="18" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a39a936ffbd0a44016b01a92e27356011" prot="public" static="no">
        <name>DONE_WITH_FFT_CACHE</name>
        <initializer>done_with_fft_cache</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="19" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a6883d50d099fdd0e5c69cddbcb835c5b" prot="public" static="no">
        <name>FFT_CACHE_CCRW</name>
        <initializer>fft_cache_ccrw</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="20" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1ac979f1394ce025277fae6be925cf46a8" prot="public" static="no">
        <name>FFT_LEN</name>
        <initializer>fft_len</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="21" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1aa4ed0cae8f0c001ed340cdcf5bed2345" prot="public" static="no">
        <name>LSX_CDFT</name>
        <initializer><ref refid="fft4g_8h_1ad3cdabfc14d8b46d62f2258c19e28311" kindref="member">lsx_cdft</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="22" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1af22da1abf7c645d65048737ceaac705c" prot="public" static="no">
        <name>LSX_CLEAR_FFT_CACHE</name>
        <initializer><ref refid="libsoxr_2src_2_filter_8h_1ade2935709809730767f142390d6dfe28" kindref="member">lsx_clear_fft_cache</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="23" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a3a1338f249ca28fe6f5946b4791478af" prot="public" static="no">
        <name>LSX_FFT_BR</name>
        <initializer>lsx_fft_br</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="24" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1ae5f1581f200f67afd5ba263099e913af" prot="public" static="no">
        <name>LSX_FFT_SC</name>
        <initializer>lsx_fft_sc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="25" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a3e3f4b0884cdb2cec35fd2b652d3ac4e" prot="public" static="no">
        <name>LSX_INIT_FFT_CACHE</name>
        <initializer><ref refid="libsoxr_2src_2_filter_8h_1a157ce598bb962071a2174a691d402ede" kindref="member">lsx_init_fft_cache</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="26" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a7c73a4a36e2afb067be8f8a67ee5f056" prot="public" static="no">
        <name>LSX_RDFT</name>
        <initializer><ref refid="fft4g_8h_1a0ef71235f395ad57a69ae95d7d45a676" kindref="member">lsx_rdft</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="27" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a06711e3693936f31a90af171fae73d99" prot="public" static="no">
        <name>LSX_SAFE_CDFT</name>
        <initializer><ref refid="libsoxr_2src_2_filter_8h_1a77ea354618b120264142f2c30283a0d9" kindref="member">lsx_safe_cdft</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="28" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1ac016927606ec1a2bed434a1a773a1b20" prot="public" static="no">
        <name>LSX_SAFE_RDFT</name>
        <initializer><ref refid="libsoxr_2src_2_filter_8h_1a9c22ba7a1ec1d6ceebe5ce0dddc3cc10" kindref="member">lsx_safe_rdft</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="29" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a4bd289731fb831f32d3794538244a27d" prot="public" static="no">
        <name>UPDATE_FFT_CACHE</name>
        <initializer>update_fft_cache</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="30" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a65ac1b834fa43249302c9aece9f6aed5" prot="public" static="no">
        <name>DFT_FLOAT</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="52" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a3d1baad9244a07281953b29ac37adfea" prot="public" static="no">
        <name>ORDERED_CONVOLVE</name>
        <initializer><ref refid="libsoxr_2src_2_filter_8h_1ad3db92a4ca348f297d4c4e3559df9800" kindref="member">lsx_ordered_convolve</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="53" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="filter_8c_1a46d226628aa993da1749471f0a0d4fe1" prot="public" static="no">
        <name>ORDERED_PARTIAL_CONVOLVE</name>
        <initializer><ref refid="libsoxr_2src_2_filter_8h_1adf5faf19a94df1a0a1e6637dd5174200" kindref="member">lsx_ordered_partial_convolve</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="54" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="filter_8c_1a1380e44ed098c719f0b564253007ec48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lsx_kaiser_beta</definition>
        <argsstring>(double att, double tr_bw)</argsstring>
        <name>lsx_kaiser_beta</name>
        <param>
          <type>double</type>
          <declname>att</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tr_bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="65" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="65" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="filter_8c_1a66649ae10e9f0656c1d57300b43fd532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* lsx_make_lpf</definition>
        <argsstring>(int num_taps, double Fc, double beta, double rho, double scale)</argsstring>
        <name>lsx_make_lpf</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>num_taps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Fc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="92" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="92" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="filter_8c_1a757d3e4ac0fdbc7ea96df65d2f8a1bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void lsx_kaiser_params</definition>
        <argsstring>(double att, double Fc, double tr_bw, double *beta, int *num_taps)</argsstring>
        <name>lsx_kaiser_params</name>
        <param>
          <type>double</type>
          <declname>att</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Fc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tr_bw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>num_taps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="112" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="112" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="filter_8c_1a022b42ac35e0ed161ff47a41e55c1dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* lsx_design_lpf</definition>
        <argsstring>(double Fp, double Fs, double Fn, double att, int *num_taps, int k, double beta)</argsstring>
        <name>lsx_design_lpf</name>
        <param>
          <type>double</type>
          <declname>Fp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Fs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Fn</declname>
        </param>
        <param>
          <type>double</type>
          <declname>att</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>num_taps</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="120" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="120" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="filter_8c_1afac45e602ef359800f2eca303b157d98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double safe_log</definition>
        <argsstring>(double x)</argsstring>
        <name>safe_log</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="145" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="145" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="filter_8c_1a76e7cd2b243099c94f0b0d21cb6a77b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void lsx_fir_to_phase</definition>
        <argsstring>(double **h, int *len, int *post_len, double phase)</argsstring>
        <name>lsx_fir_to_phase</name>
        <param>
          <type>double **</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>post_len</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" line="154" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c" bodystart="154" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>SoX<sp/>Resampler<sp/>Library<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2007-13<sp/>robs@users.sourceforge.net</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licence<sp/>for<sp/>this<sp/>file:<sp/>LGPL<sp/>v2.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>LICENCE<sp/>for<sp/>details.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsoxr_2src_2_filter_8h" kindref="compound">filter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/><sp/><sp/><sp/>3.14159265358979323846</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fft4g_8h" kindref="compound">fft4g.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ccrw2_8h" kindref="compound">ccrw2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>||<sp/>HAVE_DOUBLE_PRECISION<sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>need<sp/>this,<sp/>for<sp/>lsx_fir_to_phase.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFT_FLOAT<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="filter_8c_1a39a936ffbd0a44016b01a92e27356011" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DONE_WITH_FFT_CACHE<sp/>done_with_fft_cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="filter_8c_1a6883d50d099fdd0e5c69cddbcb835c5b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FFT_CACHE_CCRW<sp/>fft_cache_ccrw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="filter_8c_1ac979f1394ce025277fae6be925cf46a8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FFT_LEN<sp/>fft_len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="filter_8c_1aa4ed0cae8f0c001ed340cdcf5bed2345" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_CDFT<sp/>lsx_cdft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="filter_8c_1af22da1abf7c645d65048737ceaac705c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_CLEAR_FFT_CACHE<sp/>lsx_clear_fft_cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="filter_8c_1a3a1338f249ca28fe6f5946b4791478af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_FFT_BR<sp/>lsx_fft_br</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="filter_8c_1ae5f1581f200f67afd5ba263099e913af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_FFT_SC<sp/>lsx_fft_sc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="filter_8c_1a3e3f4b0884cdb2cec35fd2b652d3ac4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_INIT_FFT_CACHE<sp/>lsx_init_fft_cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="filter_8c_1a7c73a4a36e2afb067be8f8a67ee5f056" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_RDFT<sp/>lsx_rdft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="filter_8c_1a06711e3693936f31a90af171fae73d99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_SAFE_CDFT<sp/>lsx_safe_cdft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="filter_8c_1ac016927606ec1a2bed434a1a773a1b20" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_SAFE_RDFT<sp/>lsx_safe_rdft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="filter_8c_1a4bd289731fb831f32d3794538244a27d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE_FFT_CACHE<sp/>update_fft_cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fft4g__cache_8h" kindref="compound">fft4g_cache.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_SINGLE_PRECISION<sp/>&amp;&amp;<sp/>!HAVE_AVFFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFT_FLOAT<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DONE_WITH_FFT_CACHE<sp/>done_with_fft_cache_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FFT_CACHE_CCRW<sp/>fft_cache_ccrw_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FFT_LEN<sp/>fft_len_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_CDFT<sp/>lsx_cdft_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_CLEAR_FFT_CACHE<sp/>lsx_clear_fft_cache_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_FFT_BR<sp/>lsx_fft_br_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_FFT_SC<sp/>lsx_fft_sc_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_INIT_FFT_CACHE<sp/>lsx_init_fft_cache_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_RDFT<sp/>lsx_rdft_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_SAFE_CDFT<sp/>lsx_safe_cdft_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSX_SAFE_RDFT<sp/>lsx_safe_rdft_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE_FFT_CACHE<sp/>update_fft_cache_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fft4g__cache_8h" kindref="compound">fft4g_cache.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_DOUBLE_PRECISION<sp/>||<sp/>!SOXR_LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="filter_8c_1a65ac1b834fa43249302c9aece9f6aed5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFT_FLOAT<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="filter_8c_1a3d1baad9244a07281953b29ac37adfea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ORDERED_CONVOLVE<sp/>lsx_ordered_convolve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="filter_8c_1a46d226628aa993da1749471f0a0d4fe1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ORDERED_PARTIAL_CONVOLVE<sp/>lsx_ordered_partial_convolve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rdft_8h" kindref="compound">rdft.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_SINGLE_PRECISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFT_FLOAT<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ORDERED_CONVOLVE<sp/>lsx_ordered_convolve_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ORDERED_PARTIAL_CONVOLVE<sp/>lsx_ordered_partial_convolve_f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rdft_8h" kindref="compound">rdft.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="libsoxr_2src_2_filter_8h_1a1380e44ed098c719f0b564253007ec48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="filter_8c_1a1380e44ed098c719f0b564253007ec48" kindref="member">lsx_kaiser_beta</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="filters_8h_1a6cbe32dd86cefd1a8b182b3ee652e9bf" kindref="member">att</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tr_bw)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(att<sp/>&gt;=<sp/>60)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coefs[][4]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-6.784957e-10,1.02856e-05,0.1087556,-0.8988365+.001},</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-6.897885e-10,1.027433e-05,0.10876,-0.8994658+.002},</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-1.000683e-09,1.030092e-05,0.1087677,-0.9007898+.003},</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-3.654474e-10,1.040631e-05,0.1087085,-0.8977766+.006},</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{8.106988e-09,6.983091e-06,0.1091387,-0.9172048+.015},</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{9.519571e-09,7.272678e-06,0.1090068,-0.9140768+.025},</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-5.626821e-09,1.342186e-05,0.1083999,-0.9065452+.05},</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-9.965946e-08,5.073548e-05,0.1040967,-0.7672778+.085},</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1.604808e-07,-5.856462e-05,0.1185998,-1.34824+.1},</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{-1.511964e-07,6.363034e-05,0.1064627,-0.9876665+.18},</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>realm<sp/>=<sp/>log(tr_bw/.0005)/log(2.);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>c0<sp/>=<sp/>coefs[<ref refid="libsoxr_2src_2internal_8h_1afc09b30fa64f2d3d58591e7659428475" kindref="member">range_limit</ref>(<sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)realm,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="libsoxr_2src_2internal_8h_1a9af157c53b7f125d10e0ff736c0d7d75" kindref="member">array_length</ref>(coefs)-1)];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>c1<sp/>=<sp/>coefs[<ref refid="libsoxr_2src_2internal_8h_1afc09b30fa64f2d3d58591e7659428475" kindref="member">range_limit</ref>(1+(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)realm,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="libsoxr_2src_2internal_8h_1a9af157c53b7f125d10e0ff736c0d7d75" kindref="member">array_length</ref>(coefs)-1)];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b0<sp/>=<sp/>((c0[0]*att<sp/>+<sp/>c0[1])*att<sp/>+<sp/>c0[2])*att<sp/>+<sp/>c0[3];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>((c1[0]*att<sp/>+<sp/>c1[1])*att<sp/>+<sp/>c1[2])*att<sp/>+<sp/>c1[3];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b0<sp/>+<sp/>(b1<sp/>-<sp/>b0)<sp/>*<sp/>(realm<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)realm);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(att<sp/>&gt;<sp/>50<sp/><sp/><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>.1102<sp/>*<sp/>(att<sp/>-<sp/>8.7);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(att<sp/>&gt;<sp/>20.96)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>.58417<sp/>*<sp/>pow(att<sp/>-20.96,<sp/>.4)<sp/>+<sp/>.07886<sp/>*<sp/>(att<sp/>-<sp/>20.96);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="libsoxr_2src_2_filter_8h_1a66649ae10e9f0656c1d57300b43fd532" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/><ref refid="filter_8c_1a66649ae10e9f0656c1d57300b43fd532" kindref="member">lsx_make_lpf</ref>(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_taps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref><sp/>=<sp/>num_taps<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>h<sp/>=<sp/>malloc((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)num_taps<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*h));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>scale<sp/>/<sp/><ref refid="libsoxr_2src_2_filter_8h_1a344a0d584d4a71f5e8283085323caee4" kindref="member">lsx_bessel_I_0</ref>(beta),<sp/>mult1<sp/>=<sp/>1<sp/>/<sp/>(.5<sp/>*<sp/>m<sp/>+<sp/>rho);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(Fc<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>Fc<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>lsx_debug(</highlight><highlight class="stringliteral">&quot;make_lpf(n=%i<sp/>Fc=%.7g<sp/>β=%g<sp/>ρ=%g<sp/>scale=%g)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_taps,<sp/>Fc,<sp/>beta,<sp/>rho,<sp/>scale);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>m<sp/>/<sp/>2;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>i<sp/>-<sp/>.5<sp/>*<sp/><ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>,<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>=<sp/>z<sp/>*<sp/><ref refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>,<sp/>y<sp/>=<sp/>z<sp/>*<sp/>mult1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>h[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>x?<sp/><ref refid="pffft_8c_1a28642ecbd9d1e77ab5a140a460f47d83" kindref="member">sin</ref>(Fc<sp/>*<sp/>x)<sp/>/<sp/>x<sp/>:<sp/>Fc;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>h[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>*=<sp/><ref refid="libsoxr_2src_2_filter_8h_1a344a0d584d4a71f5e8283085323caee4" kindref="member">lsx_bessel_I_0</ref>(beta<sp/>*<sp/>sqrt(1<sp/>-<sp/>y<sp/>*<sp/>y))<sp/>*<sp/>mult;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>-<sp/>i<sp/>!=<sp/>i)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h[m<sp/>-<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>h[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="libsoxr_2src_2_filter_8h_1a757d3e4ac0fdbc7ea96df65d2f8a1bb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="filter_8c_1a757d3e4ac0fdbc7ea96df65d2f8a1bb4" kindref="member">lsx_kaiser_params</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="filters_8h_1a6cbe32dd86cefd1a8b182b3ee652e9bf" kindref="member">att</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tr_bw,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>beta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>num_taps)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>*beta<sp/>=<sp/>*beta<sp/>&lt;<sp/>0?<sp/><ref refid="filter_8c_1a1380e44ed098c719f0b564253007ec48" kindref="member">lsx_kaiser_beta</ref>(att,<sp/>tr_bw<sp/>*<sp/>.5<sp/>/<sp/>Fc):<sp/>*beta;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>att<sp/>=<sp/>att<sp/>&lt;<sp/>60?<sp/>(att<sp/>-<sp/>7.95)<sp/>/<sp/>(2.285<sp/>*<sp/><ref refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref><sp/>*<sp/>2)<sp/>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>((.0007528358-1.577737<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-05**beta)**beta+.6248022)**beta+.06186902;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>*num_taps<sp/>=<sp/>!*num_taps?<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)ceil(att/tr_bw<sp/>+<sp/>1)<sp/>:<sp/>*num_taps;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="libsoxr_2src_2_filter_8h_1a022b42ac35e0ed161ff47a41e55c1dce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/><ref refid="filter_8c_1a022b42ac35e0ed161ff47a41e55c1dce" kindref="member">lsx_design_lpf</ref>(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fp,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>pass-band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fs,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>of<sp/>stop-band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fn,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nyquist<sp/>freq;<sp/>e.g.<sp/>0.5,<sp/>1,<sp/>PI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="filters_8h_1a6cbe32dd86cefd1a8b182b3ee652e9bf" kindref="member">att</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop-band<sp/>attenuation<sp/>in<sp/>dB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>num_taps,<sp/></highlight><highlight class="comment">/*<sp/>0:<sp/>value<sp/>will<sp/>be<sp/>estimated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&gt;0:<sp/>number<sp/>of<sp/>phases;<sp/>&lt;0:<sp/>num_taps<sp/>≡<sp/>1<sp/>(mod<sp/>-k)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;0:<sp/>value<sp/>will<sp/>be<sp/>estimated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>*num_taps,<sp/><ref refid="test__w__saw_8c_1a176837568a7aa31eeb3ee679d3d82428" kindref="member">phases</ref><sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>(k,<sp/>1),<sp/>modulo<sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>(-k,<sp/>1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tr_bw,<sp/>Fc,<sp/>rho<sp/>=<sp/>phases<sp/>==<sp/>1?<sp/>.5<sp/>:<sp/>att<sp/>&lt;<sp/>120?<sp/>.63<sp/>:<sp/>.75;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>Fp<sp/>/=<sp/>fabs(Fn),<sp/>Fs<sp/>/=<sp/>fabs(Fn);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalise<sp/>to<sp/>Fn<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>tr_bw<sp/>=<sp/>.5<sp/>*<sp/>(Fs<sp/>-<sp/>Fp);<sp/></highlight><highlight class="comment">/*<sp/>Transition<sp/>band-width:<sp/>6dB<sp/>to<sp/>stop<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>tr_bw<sp/>/=<sp/><ref refid="test__w__saw_8c_1a176837568a7aa31eeb3ee679d3d82428" kindref="member">phases</ref>,<sp/>Fs<sp/>/=<sp/><ref refid="test__w__saw_8c_1a176837568a7aa31eeb3ee679d3d82428" kindref="member">phases</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>tr_bw<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>(tr_bw,<sp/>.5<sp/>*<sp/>Fs);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>Fc<sp/>=<sp/>Fs<sp/>-<sp/>tr_bw;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(Fc<sp/>-<sp/>tr_bw<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="filter_8c_1a757d3e4ac0fdbc7ea96df65d2f8a1bb4" kindref="member">lsx_kaiser_params</ref>(att,<sp/>Fc,<sp/>tr_bw,<sp/>&amp;beta,<sp/>num_taps);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_taps<sp/>=<sp/>phases<sp/>&gt;<sp/>1?<sp/>*num_taps<sp/>/<sp/>phases<sp/>*<sp/>phases<sp/>+<sp/>phases<sp/>-<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*num_taps<sp/>+<sp/>modulo<sp/>-<sp/>2)<sp/>/<sp/>modulo<sp/>*<sp/>modulo<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Fn<sp/>&lt;<sp/>0?<sp/>0<sp/>:<sp/><ref refid="filter_8c_1a66649ae10e9f0656c1d57300b43fd532" kindref="member">lsx_make_lpf</ref>(*num_taps,<sp/>Fc,<sp/>beta,<sp/>rho,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)phases);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>safe_log(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(x<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log(x);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>lsx_debug(</highlight><highlight class="stringliteral">&quot;log(0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-26;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="libsoxr_2src_2_filter_8h_1a12b18812b4740de7a56476f71df796d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="filter_8c_1a76e7cd2b243099c94f0b0d21cb6a77b8" kindref="member">lsx_fir_to_phase</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>*<sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>post_len,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phase)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>pi_wraps,<sp/>*<sp/>work,<sp/>phase1<sp/>=<sp/>(phase<sp/>&gt;<sp/>50<sp/>?<sp/>100<sp/>-<sp/>phase<sp/>:<sp/>phase)<sp/>/<sp/>50;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>work_len,<sp/>begin,<sp/><ref refid="convtest_8m_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>,<sp/>imp_peak<sp/>=<sp/>0,<sp/>peak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>imp_sum<sp/>=<sp/>0,<sp/>peak_imp_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prev_angle2<sp/>=<sp/>0,<sp/>cum_2pi<sp/>=<sp/>0,<sp/>prev_angle1<sp/>=<sp/>0,<sp/>cum_1pi<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>*len,<sp/>work_len<sp/>=<sp/>2<sp/>*<sp/>2<sp/>*<sp/>8;<sp/>i<sp/>&gt;<sp/>1;<sp/>work_len<sp/>&lt;&lt;=<sp/>1,<sp/>i<sp/>&gt;&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>work<sp/>=<sp/>calloc((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)work_len<sp/>+<sp/>2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work));<sp/></highlight><highlight class="comment">/*<sp/>+2:<sp/>(UN)PACK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>pi_wraps<sp/>=<sp/>malloc((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)work_len<sp/>+<sp/>2)<sp/>/<sp/>2)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*pi_wraps));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>memcpy(work,<sp/>*h,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)*len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="libsoxr_2src_2_filter_8h_1a9c22ba7a1ec1d6ceebe5ce0dddc3cc10" kindref="member">lsx_safe_rdft</ref>(work_len,<sp/>1,<sp/>work);<sp/></highlight><highlight class="comment">/*<sp/>Cepstral:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="fft4g_8h_1a0b59f098329c9cbc6aa51afe6cc59d91" kindref="member">LSX_UNPACK</ref>(work,<sp/>work_len);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>work_len;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>atan2(work[i<sp/>+<sp/>1],<sp/>work[i]);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>detect<sp/>=<sp/>2<sp/>*<sp/><ref refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>angle<sp/>-<sp/>prev_angle2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>adjust<sp/>=<sp/>detect<sp/>*<sp/>((delta<sp/>&lt;<sp/>-detect<sp/>*<sp/>.7)<sp/>-<sp/>(delta<sp/>&gt;<sp/>detect<sp/>*<sp/>.7));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_angle2<sp/>=<sp/>angle;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>cum_2pi<sp/>+=<sp/>adjust;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>+=<sp/>cum_2pi;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>detect<sp/>=<sp/><ref refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>angle<sp/>-<sp/>prev_angle1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>adjust<sp/>=<sp/>detect<sp/>*<sp/>((delta<sp/>&lt;<sp/>-detect<sp/>*<sp/>.7)<sp/>-<sp/>(delta<sp/>&gt;<sp/>detect<sp/>*<sp/>.7));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_angle1<sp/>=<sp/>angle;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>cum_1pi<sp/>+=<sp/>fabs(adjust);<sp/></highlight><highlight class="comment">/*<sp/>fabs<sp/>for<sp/>when<sp/>2pi<sp/>and<sp/>1pi<sp/>have<sp/>combined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>pi_wraps[i<sp/>&gt;&gt;<sp/>1]<sp/>=<sp/>cum_1pi;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>work[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>safe_log(sqrt(<ref refid="libsoxr_2src_2internal_8h_1a09f4b0d9da085264ffcb8d68fa045d67" kindref="member">sqr</ref>(work[i])<sp/>+<sp/><ref refid="libsoxr_2src_2internal_8h_1a09f4b0d9da085264ffcb8d68fa045d67" kindref="member">sqr</ref>(work[i<sp/>+<sp/>1])));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>work[i<sp/>+<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="fft4g_8h_1ae549d3136d6184f2c03fa7e6b6eafb46" kindref="member">LSX_PACK</ref>(work,<sp/>work_len);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="libsoxr_2src_2_filter_8h_1a9c22ba7a1ec1d6ceebe5ce0dddc3cc10" kindref="member">lsx_safe_rdft</ref>(work_len,<sp/>-1,<sp/>work);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>work_len;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>work[i]<sp/>*=<sp/>2.<sp/>/<sp/>work_len;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>work_len<sp/>/<sp/>2;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Window<sp/>to<sp/>reject<sp/>acausal<sp/>components<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>work[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>work[i<sp/>+<sp/>work_len<sp/>/<sp/>2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="libsoxr_2src_2_filter_8h_1a9c22ba7a1ec1d6ceebe5ce0dddc3cc10" kindref="member">lsx_safe_rdft</ref>(work_len,<sp/>1,<sp/>work);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>work_len;<sp/>i<sp/>+=<sp/>2)<sp/></highlight><highlight class="comment">/*<sp/>Interpolate<sp/>between<sp/>linear<sp/>&amp;<sp/>min<sp/>phase<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>work[i<sp/>+<sp/>1]<sp/>=<sp/>phase1<sp/>*<sp/>i<sp/>/<sp/>work_len<sp/>*<sp/>pi_wraps[work_len<sp/>&gt;&gt;<sp/>1]<sp/>+</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>-<sp/>phase1)<sp/>*<sp/>(work[i<sp/>+<sp/>1]<sp/>+<sp/>pi_wraps[i<sp/>&gt;&gt;<sp/>1])<sp/>-<sp/>pi_wraps[i<sp/>&gt;&gt;<sp/>1];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>work[0]<sp/>=<sp/>exp(work[0]),<sp/>work[1]<sp/>=<sp/>exp(work[1]);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>work_len;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>=<sp/>exp(work[i]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>work[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/><sp/><sp/><sp/>]<sp/>=<sp/>x<sp/>*<sp/><ref refid="pffft_8c_1a57a66355e043ccefc17aca9338a2b748" kindref="member">cos</ref>(work[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>work[i<sp/>+<sp/>1]<sp/>=<sp/>x<sp/>*<sp/><ref refid="pffft_8c_1a28642ecbd9d1e77ab5a140a460f47d83" kindref="member">sin</ref>(work[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="libsoxr_2src_2_filter_8h_1a9c22ba7a1ec1d6ceebe5ce0dddc3cc10" kindref="member">lsx_safe_rdft</ref>(work_len,<sp/>-1,<sp/>work);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>work_len;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>work[i]<sp/>*=<sp/>2.<sp/>/<sp/>work_len;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>peak<sp/>pos.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>(int)(pi_wraps[work_len<sp/>&gt;&gt;<sp/>1]<sp/>/<sp/><ref refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref><sp/>+<sp/>.5);<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>imp_sum<sp/>+=<sp/>work[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(imp_sum)<sp/>&gt;<sp/>fabs(peak_imp_sum))<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>peak_imp_sum<sp/>=<sp/>imp_sum;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>peak<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(work[i]<sp/>&gt;<sp/>work[imp_peak])<sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debug<sp/>check<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imp_peak<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(peak<sp/>&amp;&amp;<sp/>fabs(work[peak-1])<sp/>&gt;<sp/>fabs(work[peak])<sp/>&amp;&amp;<sp/>work[peak-1]<sp/>*<sp/>work[peak]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>--peak;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!phase1)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(phase1<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>peak<sp/>-<sp/>*len<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)((.997<sp/>-<sp/>(2<sp/>-<sp/>phase1)<sp/>*<sp/>.22)<sp/>*<sp/>*len<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/><sp/><sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)((.997<sp/>+<sp/>(0<sp/>-<sp/>phase1)<sp/>*<sp/>.22)<sp/>*<sp/>*len<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>peak<sp/>-<sp/>(begin<sp/>&amp;<sp/>~3);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/><sp/><sp/>=<sp/>peak<sp/>+<sp/>1<sp/>+<sp/>((end<sp/>+<sp/>3)<sp/>&amp;<sp/>~3);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>end<sp/>-<sp/>begin;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>*h<sp/>=<sp/>realloc(*h,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)*len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**h));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>(*h)[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>work[(begin<sp/>+<sp/>(phase<sp/>&gt;<sp/>50<sp/>?<sp/>*len<sp/>-<sp/>1<sp/>-<sp/>i<sp/>:<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>+<sp/>work_len)<sp/>&amp;<sp/>(work_len<sp/>-<sp/>1)];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>*post_len<sp/>=<sp/>phase<sp/>&gt;<sp/>50<sp/>?<sp/>peak<sp/>-<sp/>begin<sp/>:<sp/>begin<sp/>+<sp/>*len<sp/>-<sp/>(peak<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>lsx_debug(</highlight><highlight class="stringliteral">&quot;nPI=%g<sp/>peak-sum@%i=%g<sp/>(val@%i=%g);<sp/>len=%i<sp/>post=%i<sp/>(%g%%)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi_wraps[work_len<sp/>&gt;&gt;<sp/>1]<sp/>/<sp/><ref refid="filter_8c_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>,<sp/>peak,<sp/>peak_imp_sum,<sp/>imp_peak,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>work[imp_peak],<sp/>*len,<sp/>*post_len,<sp/>100<sp/>-<sp/>100.<sp/>*<sp/>*post_len<sp/>/<sp/>(*len<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>free(pi_wraps),<sp/>free(work);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/filter.c"/>
  </compounddef>
</doxygen>
