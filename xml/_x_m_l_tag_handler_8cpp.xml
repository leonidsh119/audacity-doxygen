<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_x_m_l_tag_handler_8cpp" kind="file" language="C++">
    <compoundname>XMLTagHandler.cpp</compoundname>
    <includes refid="_audacity_8h" local="yes">../Audacity.h</includes>
    <includes refid="_x_m_l_tag_handler_8h" local="yes">XMLTagHandler.h</includes>
    <includes refid="_memory_x_8h" local="yes">../MemoryX.h</includes>
    <includes refid="_internat_8h" local="yes">../Internat.h</includes>
    <includes local="no">wx/defs.h</includes>
    <includes local="no">wx/arrstr.h</includes>
    <includes local="no">wx/filename.h</includes>
    <includes refid="_sample_format_8h" local="yes">../SampleFormat.h</includes>
    <includes refid="src_2track_8h" local="yes">../Track.h</includes>
    <incdepgraph>
      <node id="60301">
        <label>wx/event.h</label>
      </node>
      <node id="60290">
        <label>wx/ffile.h</label>
      </node>
      <node id="60293">
        <label>../Internat.h</label>
        <link refid="_internat_8h"/>
        <childnode refid="60288" relation="include">
        </childnode>
        <childnode refid="60285" relation="include">
        </childnode>
        <childnode refid="60294" relation="include">
        </childnode>
      </node>
      <node id="60284">
        <label>XMLTagHandler.h</label>
        <link refid="_x_m_l_tag_handler_8h"/>
        <childnode refid="60283" relation="include">
        </childnode>
        <childnode refid="60285" relation="include">
        </childnode>
        <childnode refid="60286" relation="include">
        </childnode>
        <childnode refid="60287" relation="include">
        </childnode>
      </node>
      <node id="60303">
        <label>Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="60295" relation="include">
        </childnode>
      </node>
      <node id="60282">
        <label>C:/_dev/OpenU/Audacity/audacity/src/xml/XMLTagHandler.cpp</label>
        <link refid="XMLTagHandler.cpp"/>
        <childnode refid="60283" relation="include">
        </childnode>
        <childnode refid="60284" relation="include">
        </childnode>
        <childnode refid="60291" relation="include">
        </childnode>
        <childnode refid="60293" relation="include">
        </childnode>
        <childnode refid="60295" relation="include">
        </childnode>
        <childnode refid="60288" relation="include">
        </childnode>
        <childnode refid="60296" relation="include">
        </childnode>
        <childnode refid="60297" relation="include">
        </childnode>
        <childnode refid="60299" relation="include">
        </childnode>
      </node>
      <node id="60302">
        <label>wx/gdicmn.h</label>
      </node>
      <node id="60295">
        <label>wx/defs.h</label>
      </node>
      <node id="60298">
        <label>audacity/Types.h</label>
        <link refid="include_2audacity_2_types_8h"/>
        <childnode refid="60285" relation="include">
        </childnode>
        <childnode refid="60288" relation="include">
        </childnode>
      </node>
      <node id="60296">
        <label>wx/filename.h</label>
      </node>
      <node id="60283">
        <label>../Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="60300">
        <label>vector</label>
      </node>
      <node id="60289">
        <label>wx/dynarray.h</label>
      </node>
      <node id="60285">
        <label>wx/string.h</label>
      </node>
      <node id="60288">
        <label>wx/arrstr.h</label>
      </node>
      <node id="60299">
        <label>../Track.h</label>
        <link refid="src_2track_8h"/>
        <childnode refid="60283" relation="include">
        </childnode>
        <childnode refid="60291" relation="include">
        </childnode>
        <childnode refid="60300" relation="include">
        </childnode>
        <childnode refid="60289" relation="include">
        </childnode>
        <childnode refid="60301" relation="include">
        </childnode>
        <childnode refid="60302" relation="include">
        </childnode>
        <childnode refid="60294" relation="include">
        </childnode>
        <childnode refid="60285" relation="include">
        </childnode>
        <childnode refid="60303" relation="include">
        </childnode>
        <childnode refid="60297" relation="include">
        </childnode>
        <childnode refid="60284" relation="include">
        </childnode>
      </node>
      <node id="60291">
        <label>../MemoryX.h</label>
        <link refid="_memory_x_8h"/>
        <childnode refid="60292" relation="include">
        </childnode>
      </node>
      <node id="60294">
        <label>wx/longlong.h</label>
      </node>
      <node id="60286">
        <label>stdio.h</label>
      </node>
      <node id="60297">
        <label>../SampleFormat.h</label>
        <link refid="_sample_format_8h"/>
        <childnode refid="60283" relation="include">
        </childnode>
        <childnode refid="60295" relation="include">
        </childnode>
        <childnode refid="60298" relation="include">
        </childnode>
      </node>
      <node id="60292">
        <label>memory</label>
      </node>
      <node id="60287">
        <label>XMLWriter.h</label>
        <link refid="_x_m_l_writer_8h"/>
        <childnode refid="60288" relation="include">
        </childnode>
        <childnode refid="60289" relation="include">
        </childnode>
        <childnode refid="60290" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>XMLTagHandler.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>Vaughan<sp/>Johnson</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">*/</highlight><highlight class="comment">/****************************************************************/</highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Audacity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_x_m_l_tag_handler_8h" kindref="compound">XMLTagHandler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../MemoryX.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Internat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;wx/msw/winundef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/defs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/arrstr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/filename.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../SampleFormat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Track.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" kindref="member">XMLValueChecker::IsGoodString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>=<sp/>str.Length();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nullIndex<sp/>=<sp/>str.Find(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>&lt;=<sp/><ref refid="_audacity_8h_1a374d1a54d41c48ed6cb67cb2b912fed2" kindref="member">PLATFORM_MAX_PATH</ref>)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>Shouldn&apos;t<sp/>be<sp/>any<sp/>reason<sp/>for<sp/>longer<sp/>strings,<sp/>except<sp/>intentional<sp/>file<sp/>corruption.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(nullIndex<sp/>==<sp/>-1))<sp/></highlight><highlight class="comment">//<sp/>No<sp/>null<sp/>characters<sp/>except<sp/>terminator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>good<sp/>place<sp/>for<sp/>a<sp/>breakpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Good&quot;<sp/>means<sp/>the<sp/>name<sp/>is<sp/>well-formed<sp/>and<sp/>names<sp/>an<sp/>existing<sp/>file<sp/>or<sp/>folder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_x_m_l_value_checker_1ace939107688c8886ec015cfbbab8cebe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1ace939107688c8886ec015cfbbab8cebe" kindref="member">XMLValueChecker::IsGoodFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strFileName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strDirName<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>&quot;&quot;<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>strFileName.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1a05d805de92f483d377f1822839dd3700" kindref="member">IsGoodFileString</ref>(strFileName)<sp/>||</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strDirName.Length()<sp/>+<sp/>1<sp/>+<sp/>strFileName.Length()<sp/>&gt;<sp/><ref refid="_audacity_8h_1a374d1a54d41c48ed6cb67cb2b912fed2" kindref="member">PLATFORM_MAX_PATH</ref>))</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>corresponding<sp/>wxFileName.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>wxFileName<sp/>fileName(strDirName,<sp/>strFileName);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fileName.IsOk()<sp/>&amp;&amp;<sp/>fileName.FileExists());</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_x_m_l_value_checker_1a05d805de92f483d377f1822839dd3700" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1a05d805de92f483d377f1822839dd3700" kindref="member">XMLValueChecker::IsGoodFileString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" kindref="member">IsGoodString</ref>(str)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!str.IsEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FILENAME_MAX<sp/>is<sp/>260<sp/>in<sp/>MSVC,<sp/>but<sp/>inconsistent<sp/>across<sp/>platforms,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes<sp/>huge,<sp/>but<sp/>we<sp/>use<sp/>260<sp/>for<sp/>all<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(str.Length()<sp/>&lt;=<sp/>260)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(str.Find(wxFileName::GetPathSeparator())<sp/>==<sp/>-1));<sp/></highlight><highlight class="comment">//<sp/>No<sp/>path<sp/>separator<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_x_m_l_value_checker_1a2702c903d5f13e71eac3cec59b4034a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1a2702c903d5f13e71eac3cec59b4034a9" kindref="member">XMLValueChecker::IsGoodSubdirName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strSubdirName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strDirName<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>&quot;&quot;<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>strSubdirName.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>this<sp/>prevents<sp/>path<sp/>separators,<sp/>and<sp/>relative<sp/>path<sp/>to<sp/>parents<sp/>(strDirName),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>fixes<sp/>vulnerability<sp/>#3<sp/>in<sp/>the<sp/>NGS<sp/>report<sp/>for<sp/>UmixIt,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>an<sp/>attacker<sp/>could<sp/>craft<sp/>an<sp/>AUP<sp/>file<sp/>with<sp/>relative<sp/>pathnames<sp/>to<sp/>get<sp/>to<sp/>system<sp/>files,<sp/>for<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1a05d805de92f483d377f1822839dd3700" kindref="member">IsGoodFileString</ref>(strSubdirName)<sp/>||</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strSubdirName<sp/>==<sp/>wxT(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">))<sp/>||<sp/>(strSubdirName<sp/>==<sp/>wxT(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">))<sp/>||</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strDirName.Length()<sp/>+<sp/>1<sp/>+<sp/>strSubdirName.Length()<sp/>&gt;<sp/><ref refid="_audacity_8h_1a374d1a54d41c48ed6cb67cb2b912fed2" kindref="member">PLATFORM_MAX_PATH</ref>))</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>corresponding<sp/>wxFileName.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>wxFileName<sp/>fileName(strDirName,<sp/>strSubdirName);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fileName.IsOk()<sp/>&amp;&amp;<sp/>fileName.DirExists());</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_x_m_l_value_checker_1a97ca6cdce1f85f74fff3bd59dcc28d48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1a97ca6cdce1f85f74fff3bd59dcc28d48" kindref="member">XMLValueChecker::IsGoodPathName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strPathName)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>corresponding<sp/>wxFileName.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>wxFileName<sp/>fileName(strPathName);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1ace939107688c8886ec015cfbbab8cebe" kindref="member">XMLValueChecker::IsGoodFileName</ref>(fileName.GetFullName(),<sp/>fileName.GetPath(wxPATH_GET_VOLUME));</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_x_m_l_value_checker_1a67526db38314c2ca8ddfa4e9d8f311ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1a67526db38314c2ca8ddfa4e9d8f311ee" kindref="member">XMLValueChecker::IsGoodPathString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" kindref="member">IsGoodString</ref>(str)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!str.IsEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(str.Length()<sp/>&lt;=<sp/><ref refid="_audacity_8h_1a374d1a54d41c48ed6cb67cb2b912fed2" kindref="member">PLATFORM_MAX_PATH</ref>));</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="class_x_m_l_value_checker_1adc0cf9db4d3e99dfdc8c82144e129103" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1adc0cf9db4d3e99dfdc8c82144e129103" kindref="member">XMLValueChecker::IsGoodInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strInt)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" kindref="member">IsGoodString</ref>(strInt))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>value<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signed<sp/>long:<sp/>-2,147,483,648<sp/>to<sp/>+2,147,483,647,<sp/>i.e.,<sp/>-2^31<sp/>to<sp/>2^31-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>strict<sp/>about<sp/>disallowing<sp/>spaces<sp/>and<sp/>commas,<sp/>and<sp/>requiring<sp/>minus<sp/>sign<sp/>to<sp/>be<sp/>first<sp/>char<sp/>for<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lenMAXABS<sp/>=<sp/>strlen(</highlight><highlight class="stringliteral">&quot;2147483647&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lenStrInt<sp/>=<sp/>strInt.Length();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenStrInt<sp/>&gt;<sp/>(lenMAXABS<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((lenStrInt<sp/>==<sp/>(lenMAXABS<sp/>+<sp/>1))<sp/>&amp;&amp;<sp/>(strInt[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitsMAXABS[]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>7,<sp/>4,<sp/>8,<sp/>3,<sp/>6,<sp/>4,<sp/>9};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i+1]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>strInt[i+1]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i+1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;<sp/>digitsMAXABS[i])</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>is<sp/>small<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenStrInt<sp/>==<sp/>lenMAXABS)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitsMAXABS[]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>7,<sp/>4,<sp/>8,<sp/>3,<sp/>6,<sp/>4,<sp/>8};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>strInt[i+1]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;<sp/>digitsMAXABS[i])</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>is<sp/>small<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="class_x_m_l_value_checker_1aeef4556c638f9979f6d739154ecd18f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1aeef4556c638f9979f6d739154ecd18f6" kindref="member">XMLValueChecker::IsGoodInt64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strInt)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" kindref="member">IsGoodString</ref>(strInt))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>value<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signed<sp/>64-bit:<sp/>-18446744073709551616<sp/>to<sp/>+18446744073709551615,<sp/>i.e.,<sp/>-2^64<sp/>to<sp/>2^64-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>strict<sp/>about<sp/>disallowing<sp/>spaces<sp/>and<sp/>commas,<sp/>and<sp/>requiring<sp/>minus<sp/>sign<sp/>to<sp/>be<sp/>first<sp/>char<sp/>for<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lenMAXABS<sp/>=<sp/>strlen(</highlight><highlight class="stringliteral">&quot;18446744073709551615&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lenStrInt<sp/>=<sp/>strInt.Length();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenStrInt<sp/>&gt;<sp/>(lenMAXABS<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((lenStrInt<sp/>==<sp/>(lenMAXABS<sp/>+<sp/>1))<sp/>&amp;&amp;<sp/>(strInt[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitsMAXABS[]<sp/>=<sp/>{1,<sp/>8,<sp/>4,<sp/>4,<sp/>6,<sp/>7,<sp/>4,<sp/>4,<sp/>0,<sp/>7,<sp/>3,<sp/>7,<sp/>0,<sp/>9,<sp/>5,<sp/>5,<sp/>1,<sp/>6,<sp/>1,<sp/>7};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i+1]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>strInt[i+1]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i+1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;<sp/>digitsMAXABS[i])</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>is<sp/>small<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenStrInt<sp/>==<sp/>lenMAXABS)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitsMAXABS[]<sp/>=<sp/>{1,<sp/>8,<sp/>4,<sp/>4,<sp/>6,<sp/>7,<sp/>4,<sp/>4,<sp/>0,<sp/>7,<sp/>3,<sp/>7,<sp/>0,<sp/>9,<sp/>5,<sp/>5,<sp/>1,<sp/>6,<sp/>1,<sp/>6};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>strInt[i+1]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lenMAXABS;<sp/>i++)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strInt[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;<sp/>digitsMAXABS[i])</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>is<sp/>small<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="class_x_m_l_value_checker_1a391cb5648030e28716d3775e8b4dd955" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1a391cb5648030e28716d3775e8b4dd955" kindref="member">XMLValueChecker::IsValidChannel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValue)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nValue<sp/>&gt;=<sp/><ref refid="class_track_1af7ac66dc1b976cffbaee1e01206d362fa4cc8a2bb7bc243eab53ba2abd757d9da" kindref="member">Track::LeftChannel</ref>)<sp/>&amp;&amp;<sp/>(nValue<sp/>&lt;=<sp/><ref refid="class_track_1af7ac66dc1b976cffbaee1e01206d362fad1d594e80888976c85f7a4a258dc2f19" kindref="member">Track::MonoChannel</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_MIDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XMLValueChecker::IsValidVisibleChannels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValue)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nValue<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>nValue<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>16));</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="class_x_m_l_value_checker_1aa2082800dc3344f71c300628875daa57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_value_checker_1aa2082800dc3344f71c300628875daa57" kindref="member">XMLValueChecker::IsValidSampleFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValue)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nValue<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)<sp/>||<sp/>(nValue<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>)<sp/>||<sp/>(nValue<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="class_x_m_l_tag_handler_1ae4ca0c0282252907d45b65a1ba099fd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_tag_handler_1ae4ca0c0282252907d45b65a1ba099fd1" kindref="member">XMLTagHandler::ReadXMLTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structtag" kindref="compound">tag</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**attrs)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/>wxArrayString<sp/>tmp_attrs;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*attrs)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp_attrs.Add(<ref refid="_internat_8h_1aa346c124bdef36cb63abc5c82b96fe85" kindref="member">UTF8CTOWX</ref>(s));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JKC:<sp/>Previously<sp/>the<sp/>next<sp/>line<sp/>was:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>char<sp/>**out_attrs<sp/>=<sp/>NEW<sp/>char<sp/>(const<sp/>char<sp/>*)[tmp_attrs.GetCount()+1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>however<sp/>MSVC<sp/>doesn&apos;t<sp/>like<sp/>the<sp/>constness<sp/>in<sp/>this<sp/>position,<sp/>so<sp/>this<sp/>is<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>added<sp/>by<sp/>a<sp/>cast<sp/>after<sp/>creating<sp/>the<sp/>array<sp/>of<sp/>pointers-to-non-const<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_attrs<sp/>=<sp/>std::make_unique&lt;const<sp/>wxChar<sp/>*[]&gt;(tmp_attrs.GetCount()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;tmp_attrs.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_attrs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>tmp_attrs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].c_str();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>out_attrs[tmp_attrs.GetCount()]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>HandleXMLTag(<ref refid="_internat_8h_1aa346c124bdef36cb63abc5c82b96fe85" kindref="member">UTF8CTOWX</ref>(tag).c_str(),<sp/>out_attrs.get());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="class_x_m_l_tag_handler_1a9e5ffb1c69cf9f5e3168bcefc89d2462" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_tag_handler_1a9e5ffb1c69cf9f5e3168bcefc89d2462" kindref="member">XMLTagHandler::ReadXMLEndTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structtag" kindref="compound">tag</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>HandleXMLEndTag(<ref refid="_internat_8h_1aa346c124bdef36cb63abc5c82b96fe85" kindref="member">UTF8CTOWX</ref>(tag).c_str());</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="class_x_m_l_tag_handler_1a61e36b40c048430bf94ca82dee0c7b65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_x_m_l_tag_handler_1a61e36b40c048430bf94ca82dee0c7b65" kindref="member">XMLTagHandler::ReadXMLContent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>HandleXMLContent(wxString(s,<sp/>wxConvUTF8,<sp/>len));</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="class_x_m_l_tag_handler_1a8e91945b6b8c9a4f85ea3b33d9a4c1ae" refkind="member"><highlight class="normal"><ref refid="class_x_m_l_tag_handler" kindref="compound">XMLTagHandler</ref><sp/>*<ref refid="class_x_m_l_tag_handler_1a8e91945b6b8c9a4f85ea3b33d9a4c1ae" kindref="member">XMLTagHandler::ReadXMLChild</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structtag" kindref="compound">tag</ref>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HandleXMLChild(<ref refid="_internat_8h_1aa346c124bdef36cb63abc5c82b96fe85" kindref="member">UTF8CTOWX</ref>(tag).c_str());</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/xml/XMLTagHandler.cpp"/>
  </compounddef>
</doxygen>
