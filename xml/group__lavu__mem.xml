<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavu__mem" kind="group">
    <compoundname>lavu_mem</compoundname>
    <title>Memory Management</title>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>{
    <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (!size || <ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref> &gt;= <ref refid="macint_8h_1a9ec306f36d50c7375e74f0d1c55a3a67" kindref="member">INT_MAX</ref> / size)
        <ref refid="hashrout_8h_1a9842e92184417c07866419916b2b3ce3" kindref="member">return</ref> <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="93" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nmemb</definition>
        <argsstring></argsstring>
        <name>nmemb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="166" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_malloc</definition>
        <argsstring>(size_t size) av_malloc_attrib av_alloc_size(1)</argsstring>
        <name>av_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of size bytes with alignment suitable for all memory accesses (including vectors if available on the CPU). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes for the memory block to be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated block, NULL if the block cannot be allocated. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1gaf143ecab33a3868b57345466c39de7c1" kindref="member">av_mallocz()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga2def36a11cc8ae1d9829c26bd7c8e988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>av_alloc_size</definition>
        <argsstring>(1, 2) static inline void *av_malloc_array(size_t nmemb</argsstring>
        <name>av_alloc_size</name>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of size * nmemb bytes with <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the single element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated block, NULL if the block cannot be allocated. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref></para></simplesect>
Allocate a block of size * nmemb bytes with <ref refid="group__lavu__mem_1gaf143ecab33a3868b57345466c39de7c1" kindref="member">av_mallocz()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the single element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated block, NULL if the block cannot be allocated. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1gaf143ecab33a3868b57345466c39de7c1" kindref="member">av_mallocz()</ref> </para></simplesect>
<simplesect kind="see"><para>av_malloc_array() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga6a21bd3a369264e61ab7a00499621fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hashrout_8h_1a9842e92184417c07866419916b2b3ce3" kindref="member">return</ref></type>
        <definition>return av_malloc</definition>
        <argsstring>(nmemb *size)</argsstring>
        <name>av_malloc</name>
        <param>
          <type><ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref> *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_realloc</definition>
        <argsstring>(void *ptr, size_t size) av_alloc_size(2)</argsstring>
        <name>av_realloc</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate or reallocate a block of memory. If ptr is NULL and size &gt; 0, allocate a new block. If size is zero, free the memory block pointed to by ptr. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a memory block already allocated with <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref> or NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the memory block to be allocated or reallocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a newly-reallocated block or NULL if the block cannot be reallocated or the function is used to free the memory block. </para></simplesect>
<simplesect kind="warning"><para>Pointers originating from the <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref> family of functions must not be passed to <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref>. The former can be implemented using memalign() (or other functions), and there is no guarantee that pointers from such functions can be passed to realloc() at all. The situation is undefined according to POSIX and may crash with some libc implementations. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1ga869fd8884d8d29a7a4910d879926d94a" kindref="member">av_fast_realloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1gae5ca394e7536fcd2689008b011a211ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_realloc_f</definition>
        <argsstring>(void *ptr, size_t nelem, size_t elsize)</argsstring>
        <name>av_realloc_f</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate or reallocate a block of memory. This function does the same thing as av_realloc, except:<itemizedlist>
<listitem><para>It takes two arguments and checks the result of the multiplication for integer overflow.</para></listitem><listitem><para>It frees the input block in case of failure, thus avoiding the memory leak with the classic &quot;buf = realloc(buf); if (!buf) return -1;&quot;. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga162ac7cb3ff79ae050ccc25e57adfc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_reallocp</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>av_reallocp</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate or reallocate a block of memory. If *ptr is NULL and size &gt; 0, allocate a new block. If size is zero, free the memory block pointed to by ptr. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer to a memory block already allocated with <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref>, or pointer to a pointer to NULL. The pointer is updated on success, or freed on failure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes for the memory block to be allocated or reallocated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, an AVERROR error code on failure. </para></simplesect>
<simplesect kind="warning"><para>Pointers originating from the <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref> family of functions must not be passed to <ref refid="group__lavu__mem_1ga162ac7cb3ff79ae050ccc25e57adfc46" kindref="member">av_reallocp()</ref>. The former can be implemented using memalign() (or other functions), and there is no guarantee that pointers from such functions can be passed to realloc() at all. The situation is undefined according to POSIX and may crash with some libc implementations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1gaf3f08c4449fbe1ad6489ad59c625ac9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>av_alloc_size</definition>
        <argsstring>(2, 3) void *av_realloc_array(void *ptr</argsstring>
        <name>av_alloc_size</name>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate or reallocate an array. If ptr is NULL and nmemb &gt; 0, allocate a new block. If nmemb is zero, free the memory block pointed to by ptr. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a memory block already allocated with <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref> or NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the single element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a newly-reallocated block or NULL if the block cannot be reallocated or the function is used to free the memory block. </para></simplesect>
<simplesect kind="warning"><para>Pointers originating from the <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref> family of functions must not be passed to <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref>. The former can be implemented using memalign() (or other functions), and there is no guarantee that pointers from such functions can be passed to realloc() at all. The situation is undefined according to POSIX and may crash with some libc implementations.</para></simplesect>
Allocate or reallocate an array through a pointer to a pointer. If *ptr is NULL and nmemb &gt; 0, allocate a new block. If nmemb is zero, free the memory block pointed to by ptr. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer to a memory block already allocated with <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref>, or pointer to a pointer to NULL. The pointer is updated on success, or freed on failure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the single element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, an AVERROR error code on failure. </para></simplesect>
<simplesect kind="warning"><para>Pointers originating from the <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref> family of functions must not be passed to <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref>. The former can be implemented using memalign() (or other functions), and there is no guarantee that pointers from such functions can be passed to realloc() at all. The situation is undefined according to POSIX and may crash with some libc implementations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>av_free</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a memory block which has been allocated with av_malloc(z)() or <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory block which should be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>ptr = NULL is explicitly allowed. </para></simplesect>
<simplesect kind="note"><para>It is recommended that you use <ref refid="group__lavu__mem_1ga0cc84043ea2167ad005c86e11d0bcdba" kindref="member">av_freep()</ref> instead. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1ga0cc84043ea2167ad005c86e11d0bcdba" kindref="member">av_freep()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1gaf143ecab33a3868b57345466c39de7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_mallocz</definition>
        <argsstring>(size_t size) av_malloc_attrib av_alloc_size(1)</argsstring>
        <name>av_mallocz</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of size bytes with alignment suitable for all memory accesses (including vectors if available on the CPU) and zero all the bytes of the block. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes for the memory block to be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated block, NULL if it cannot be allocated. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1gaaf38f6d994f5a85854ef47fd98fa6e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_calloc</definition>
        <argsstring>(size_t nmemb, size_t size) av_malloc_attrib</argsstring>
        <name>av_calloc</name>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of nmemb * size bytes with alignment suitable for all memory accesses (including vectors if available on the CPU) and zero all the bytes of the block. The allocation will fail if nmemb * size is greater than or equal to INT_MAX. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated block, NULL if it cannot be allocated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga767be734f758e783ffb3083d88cfc612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hashrout_8h_1a9842e92184417c07866419916b2b3ce3" kindref="member">return</ref></type>
        <definition>return av_mallocz</definition>
        <argsstring>(nmemb *size)</argsstring>
        <name>av_mallocz</name>
        <param>
          <type><ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref> *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga7c352f4cff02184f005323691375fea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_strdup</definition>
        <argsstring>(const char *s) av_malloc_attrib</argsstring>
        <name>av_strdup</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate the string s. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to be duplicated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a newly-allocated string containing a copy of s or NULL if the string cannot be allocated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga4ad5e6363f4a6b6eddfdb427e21166f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_memdup</definition>
        <argsstring>(const void *p, size_t size)</argsstring>
        <name>av_memdup</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate the buffer p. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be duplicated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a newly allocated buffer containing a copy of p or NULL if the buffer cannot be allocated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga0cc84043ea2167ad005c86e11d0bcdba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_freep</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>av_freep</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a memory block which has been allocated with av_malloc(z)() or <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref> and set the pointer pointing to it to NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the pointer to the memory block which should be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga385b582522cedf5a88ce2cf158c396c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_dynarray_add</definition>
        <argsstring>(void *tab_ptr, int *nb_ptr, void *elem)</argsstring>
        <name>av_dynarray_add</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>tab_ptr</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>nb_ptr</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an element to a dynamic array.</para><para>The array to grow is supposed to be an array of pointers to structures, and the element to add must be a pointer to an already allocated structure.</para><para>The array is reallocated when its size reaches powers of 2. Therefore, the amortized cost of adding an element is constant.</para><para>In case of success, the pointer to the array is updated in order to point to the new grown array, and the number pointed to by nb_ptr is incremented. In case of failure, the array is freed, *tab_ptr is set to NULL and *nb_ptr is set to 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tab_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array to grow </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the number of elements in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>element to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1ga9f60ff848186092d6705276a52ea0bb9" kindref="member">av_dynarray2_add()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga9f60ff848186092d6705276a52ea0bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_dynarray2_add</definition>
        <argsstring>(void **tab_ptr, int *nb_ptr, size_t elem_size, const uint8_t *elem_data)</argsstring>
        <name>av_dynarray2_add</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> **</type>
          <declname>tab_ptr</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>nb_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elem_size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>elem_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an element of size elem_size to a dynamic array.</para><para>The array is reallocated when its number of elements reaches powers of 2. Therefore, the amortized cost of adding an element is constant.</para><para>In case of success, the pointer to the array is updated in order to point to the new grown array, and the number pointed to by nb_ptr is incremented. In case of failure, the array is freed, *tab_ptr is set to NULL and *nb_ptr is set to 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tab_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array to grow </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the number of elements in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size in bytes of the elements in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data of the element to add. If NULL, the space of the new added element is not filled. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the data of the element to copy in the new allocated space. If NULL, the new allocated space is left uninitialized." </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__mem_1ga385b582522cedf5a88ce2cf158c396c9" kindref="member">av_dynarray_add()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga368c719d3bdce4de169910a4158df66b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int av_size_mult</definition>
        <argsstring>(size_t a, size_t b, size_t *r)</argsstring>
        <name>av_size_mult</name>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply two size_t values checking for overflow. <simplesect kind="return"><para>0 if success, <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(EINVAL)</ref> if overflow. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="311" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="311" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga2204fc859b4a3ca2d5bfd1bf4e8c4dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_max_alloc</definition>
        <argsstring>(size_t max)</argsstring>
        <name>av_max_alloc</name>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum size that may me allocated in one block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga3ea4736dcceab4ba033b8abd2c2a180e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_memcpy_backptr</definition>
        <argsstring>(uint8_t *dst, int back, int cnt)</argsstring>
        <name>av_memcpy_backptr</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>back</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deliberately overlapping memcpy implementation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>back</parametername>
</parameternamelist>
<parameterdescription>
<para>how many bytes back we start (the initial size of the overlapping window), must be &gt; 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to copy, must be &gt;= 0</para></parameterdescription>
</parameteritem>
</parameterlist>
cnt &gt; back is valid, this will copy the bytes we just copied, thus creating a repeating pattern with a period length of back. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga869fd8884d8d29a7a4910d879926d94a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_fast_realloc</definition>
        <argsstring>(void *ptr, unsigned int *size, size_t min_size)</argsstring>
        <name>av_fast_realloc</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reallocate the given block if it is not large enough, otherwise do nothing.</para><para><simplesect kind="see"><para><ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__mem_1ga29d0252b981f157e713a68ffca52f003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_fast_malloc</definition>
        <argsstring>(void *ptr, unsigned int *size, size_t min_size)</argsstring>
        <name>av_fast_malloc</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a buffer, reusing the given one if large enough.</para><para>Contrary to av_fast_realloc the current buffer contents might not be preserved and on error the old buffer is freed, thus no special handling to avoid memleaks is necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to already allocated buffer, overwritten with pointer to new buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer *ptr points to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_size</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum size of *ptr buffer after returning, *ptr will be NULL and *size 0 if an error occurred. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="357" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__lavu__mem_1gacd808cbec01f20997018da3e564fdd01" prot="public" static="no">
        <name>DECLARE_ALIGNED</name>
        <param><defname>n</defname></param>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <initializer><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref> v</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="59" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__mem_1gad6a6bcb1a93c42bdc22e544c23f5cdb9" prot="public" static="no">
        <name>DECLARE_ASM_CONST</name>
        <param><defname>n</defname></param>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <initializer>static <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref> v</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="60" column="13" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__mem_1gad48ff724186ef4e602ae7a2547e4287c" prot="public" static="no">
        <name>av_malloc_attrib</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="66" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__mem_1gad7ff928d462d1a61b37baa70bf13e0e3" prot="public" static="no">
        <name>av_alloc_size</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" line="72" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/mem.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
