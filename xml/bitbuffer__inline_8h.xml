<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="bitbuffer__inline_8h" kind="file" language="C++">
    <compoundname>bitbuffer_inline.h</compoundname>
    <includedby refid="twolame_2libtwolame_2encode_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c</includedby>
    <includedby refid="twolame_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/twolame.c</includedby>
    <invincdepgraph>
      <node id="32472">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/twolame.c</label>
        <link refid="twolame_8c"/>
      </node>
      <node id="32471">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c</label>
        <link refid="twolame_2libtwolame_2encode_8c"/>
      </node>
      <node id="32470">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/bitbuffer_inline.h</label>
        <link refid="bitbuffer_inline.h"/>
        <childnode refid="32471" relation="include">
        </childnode>
        <childnode refid="32472" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bitbuffer__inline_8h_1ad1496a157916ad8ff1e4a4eb4b353a71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void buffer_put1bit</definition>
        <argsstring>(bit_stream *bs, int bit)</argsstring>
        <name>buffer_put1bit</name>
        <param>
          <type><ref refid="bitbuffer_8h_1a6fd1cd4b0f368eb5f7362a1c322aa3c5" kindref="member">bit_stream</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/bitbuffer_inline.h" line="27" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/bitbuffer_inline.h" bodystart="27" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="bitbuffer__inline_8h_1a28f63bf715bc8c016f442872bfdcc24e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void buffer_putbits</definition>
        <argsstring>(bit_stream *bs, unsigned int val, int N)</argsstring>
        <name>buffer_putbits</name>
        <param>
          <type><ref refid="bitbuffer_8h_1a6fd1cd4b0f368eb5f7362a1c322aa3c5" kindref="member">bit_stream</ref> *</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/bitbuffer_inline.h" line="46" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/bitbuffer_inline.h" bodystart="46" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>TwoLAME:<sp/>an<sp/>optimized<sp/>MPEG<sp/>Audio<sp/>Layer<sp/>Two<sp/>encoder</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2001-2004<sp/>Michael<sp/>Cheng</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004-2006<sp/>The<sp/>TwoLAME<sp/>Project</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/>$Id$</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>write<sp/>1<sp/>bit<sp/>from<sp/>the<sp/>bit<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buffer_put1bit(<ref refid="structbit__stream__struc" kindref="compound">bit_stream</ref><sp/>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a0f1aba65586563150618183b07d75af1" kindref="member">totbit</ref>++;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1aa9bc37a08d818a5edf70a98a3dc055e1" kindref="member">buf</ref>[bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref>]<sp/>|=<sp/>(bit<sp/>&amp;<sp/>0x1)<sp/>&lt;&lt;<sp/>(bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref>--;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref>)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref>++;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref><sp/>&gt;=<sp/>bs-&gt;<ref refid="structbit__stream__struc_1a4bfbcb5b5005121a94a234988f5ae178" kindref="member">buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty_buffer<sp/>(bs,<sp/>minimum);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;buffer_put1bit:<sp/>error.<sp/>bit_stream<sp/>buffer<sp/>needs<sp/>to<sp/>be<sp/>bigger\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1aa9bc37a08d818a5edf70a98a3dc055e1" kindref="member">buf</ref>[bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>write<sp/>N<sp/>bits<sp/>into<sp/>the<sp/>bit<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buffer_putbits(<ref refid="structbit__stream__struc" kindref="compound">bit_stream</ref><sp/>*<sp/>bs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>putmask[9]<sp/>=<sp/>{<sp/>0x0,<sp/>0x1,<sp/>0x3,<sp/>0x7,<sp/>0xf,<sp/>0x1f,<sp/>0x3f,<sp/>0x7f,<sp/>0xff<sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>,<sp/>tmp;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a0f1aba65586563150618183b07d75af1" kindref="member">totbit</ref><sp/>+=<sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(j,<sp/>bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>(j<sp/>-<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1aa9bc37a08d818a5edf70a98a3dc055e1" kindref="member">buf</ref>[bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref>]<sp/>|=<sp/>(tmp<sp/>&amp;<sp/>putmask[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>])<sp/>&lt;&lt;<sp/>(bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref><sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref><sp/>-=<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a3b53a2a5ee2f6bb60897873289e7fab9" kindref="member">buf_bit_idx</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref>++;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref><sp/>&gt;=<sp/>bs-&gt;<ref refid="structbit__stream__struc_1a4bfbcb5b5005121a94a234988f5ae178" kindref="member">buf_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty_buffer<sp/>(bs,<sp/>minimum);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;buffer_putbits:<sp/>error.<sp/>bit_stream<sp/>buffer<sp/>needs<sp/>to<sp/>be<sp/>bigger\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bs-&gt;<ref refid="structbit__stream__struc_1aa9bc37a08d818a5edf70a98a3dc055e1" kindref="member">buf</ref>[bs-&gt;<ref refid="structbit__stream__struc_1a17135b83b424387b48a0db32666a22e1" kindref="member">buf_byte_idx</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>-=<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vim:ts=4:sw=4:nowrap:<sp/></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/bitbuffer_inline.h"/>
  </compounddef>
</doxygen>
