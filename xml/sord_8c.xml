<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="sord_8c" kind="file" language="C++">
    <compoundname>sord.c</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="digest_8c" local="yes">zix/digest.c</includes>
    <includes refid="hash_8c" local="yes">zix/hash.c</includes>
    <includes refid="sord_2src_2zix_2tree_8c" local="yes">zix/tree.c</includes>
    <includes local="yes">sord_config.h</includes>
    <includes refid="sord__internal_8h" local="yes">sord_internal.h</includes>
    <incdepgraph>
      <node id="27290">
        <label>stdbool.h</label>
      </node>
      <node id="27289">
        <label>stdarg.h</label>
      </node>
      <node id="27277">
        <label>zix/digest.c</label>
        <link refid="digest_8c"/>
        <childnode refid="27278" relation="include">
        </childnode>
      </node>
      <node id="27278">
        <label>zix/digest.h</label>
        <link refid="digest_8h"/>
        <childnode refid="27279" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27280" relation="include">
        </childnode>
      </node>
      <node id="27280">
        <label>zix/common.h</label>
      </node>
      <node id="27286">
        <label>sord_internal.h</label>
        <link refid="sord__internal_8h"/>
        <childnode refid="27279" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27287" relation="include">
        </childnode>
      </node>
      <node id="27273">
        <label>stdint.h</label>
      </node>
      <node id="27275">
        <label>stdlib.h</label>
      </node>
      <node id="27272">
        <label>errno.h</label>
      </node>
      <node id="27288">
        <label>serd/serd.h</label>
        <link refid="serd_8h"/>
        <childnode refid="27289" relation="include">
        </childnode>
        <childnode refid="27279" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27274" relation="include">
        </childnode>
        <childnode refid="27290" relation="include">
        </childnode>
      </node>
      <node id="27279">
        <label>stddef.h</label>
      </node>
      <node id="27271">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="27287">
        <label>sord/sord.h</label>
        <link refid="sord_8h"/>
        <childnode refid="27279" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27274" relation="include">
        </childnode>
        <childnode refid="27288" relation="include">
        </childnode>
        <childnode refid="27290" relation="include">
        </childnode>
      </node>
      <node id="27276">
        <label>string.h</label>
      </node>
      <node id="27285">
        <label>sord_config.h</label>
      </node>
      <node id="27284">
        <label>zix/tree.h</label>
      </node>
      <node id="27270">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c</label>
        <link refid="sord.c"/>
        <childnode refid="27271" relation="include">
        </childnode>
        <childnode refid="27272" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27274" relation="include">
        </childnode>
        <childnode refid="27275" relation="include">
        </childnode>
        <childnode refid="27276" relation="include">
        </childnode>
        <childnode refid="27277" relation="include">
        </childnode>
        <childnode refid="27281" relation="include">
        </childnode>
        <childnode refid="27283" relation="include">
        </childnode>
        <childnode refid="27285" relation="include">
        </childnode>
        <childnode refid="27286" relation="include">
        </childnode>
      </node>
      <node id="27281">
        <label>zix/hash.c</label>
        <link refid="hash_8c"/>
        <childnode refid="27271" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27275" relation="include">
        </childnode>
        <childnode refid="27276" relation="include">
        </childnode>
        <childnode refid="27282" relation="include">
        </childnode>
      </node>
      <node id="27282">
        <label>zix/hash.h</label>
        <link refid="lv2_2sord_2src_2zix_2hash_8h"/>
        <childnode refid="27279" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27280" relation="include">
        </childnode>
      </node>
      <node id="27274">
        <label>stdio.h</label>
      </node>
      <node id="27283">
        <label>zix/tree.c</label>
        <link refid="sord_2src_2zix_2tree_8c"/>
        <childnode refid="27271" relation="include">
        </childnode>
        <childnode refid="27273" relation="include">
        </childnode>
        <childnode refid="27274" relation="include">
        </childnode>
        <childnode refid="27275" relation="include">
        </childnode>
        <childnode refid="27276" relation="include">
        </childnode>
        <childnode refid="27280" relation="include">
        </childnode>
        <childnode refid="27284" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_sord_world_impl" prot="public">SordWorldImpl</innerclass>
    <innerclass refid="struct_sord_model_impl" prot="public">SordModelImpl</innerclass>
    <innerclass refid="struct_sord_iter_impl" prot="public">SordIterImpl</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="sord_8c_1a229739ffab14acb41cd246b61a18cc87" prot="public" static="no">
        <name>ZIX_INLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="25" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a0058aa93c7cd0602658a4b0f42e1ba3f" prot="public" static="no">
        <name>SORD_LOG</name>
        <param><defname>prefix</defname></param>
        <param><defname>...</defname></param>
        <initializer>fprintf(stderr, &quot;[Sord::&quot; prefix &quot;] &quot; __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="33" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" prot="public" static="no">
        <name>SORD_ITER_LOG</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="38" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a8271b81211a0f2e7b3a55b9459bd01c5" prot="public" static="no">
        <name>SORD_FIND_LOG</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="43" column="15" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a4f268c4bcd324fee3d7a2fe4fec30662" prot="public" static="no">
        <name>SORD_WRITE_LOG</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="48" column="15" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" prot="public" static="no">
        <name>NUM_ORDERS</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="51" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1ae47cf9cbef1e11b189db139c1dfa8791" prot="public" static="no">
        <name>STATEMENT_LEN</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="52" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" prot="public" static="no">
        <name>TUP_LEN</name>
        <initializer><ref refid="sord_8c_1ae47cf9cbef1e11b189db139c1dfa8791" kindref="member">STATEMENT_LEN</ref> + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="53" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" prot="public" static="no">
        <name>DEFAULT_ORDER</name>
        <initializer><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" kindref="member">SPO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="54" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" prot="public" static="no">
        <name>DEFAULT_GRAPH_ORDER</name>
        <initializer><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba1d9a094f4deb1febfbe12db8496c2ab1" kindref="member">GSPO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="55" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a4f028582975d03f1229b736bf45df3c9" prot="public" static="no">
        <name>TUP_FMT</name>
        <initializer>&quot;(%s %<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref> %<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref> %<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="57" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a83a9545e9571528e33c537141555c33f" prot="public" static="no">
        <name>TUP_FMT_ELEM</name>
        <param><defname>e</defname></param>
        <initializer>((e) ? <ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(e) : (<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)&quot;*&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="58" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" prot="public" static="no">
        <name>TUP_FMT_ARGS</name>
        <param><defname>t</defname></param>
        <initializer><ref refid="sord_8c_1a83a9545e9571528e33c537141555c33f" kindref="member">TUP_FMT_ELEM</ref>((<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)[0]), \
	<ref refid="sord_8c_1a83a9545e9571528e33c537141555c33f" kindref="member">TUP_FMT_ELEM</ref>((<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)[1]), \
	<ref refid="sord_8c_1a83a9545e9571528e33c537141555c33f" kindref="member">TUP_FMT_ELEM</ref>((<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)[2]), \
	<ref refid="sord_8c_1a83a9545e9571528e33c537141555c33f" kindref="member">TUP_FMT_ELEM</ref>((<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="59" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1aa2ca2ca7c3bcf81bc95e8316a17145de" prot="public" static="no">
        <name>TUP_S</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="65" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1ab5bcd046f906662be6d5a11c8061e859" prot="public" static="no">
        <name>TUP_P</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="66" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a6db3118d6c2a80a521744333798eda9b" prot="public" static="no">
        <name>TUP_O</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="67" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a956efb2e4df766d975216d19a7b33f8d" prot="public" static="no">
        <name>TUP_G</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="68" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" prot="public" static="no">
        <name>PAT_CASE</name>
        <param><defname>sig</defname></param>
        <param><defname>m</defname></param>
        <param><defname>g0</defname></param>
        <param><defname>g1</defname></param>
        <param><defname>np</defname></param>
        <initializer>case sig: \
		*mode     = <ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>; \
		<ref refid="charmaps_8h_1a422f205059a9d17797eb370ded3c21c6" kindref="member">good</ref>[0]   = g0; \
		<ref refid="charmaps_8h_1a422f205059a9d17797eb370ded3c21c6" kindref="member">good</ref>[1]   = g1; \
		*n_prefix = np; \
		break</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="560" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="sord_8c_1a4a73452c777904d8c172948a285fb76b" prot="public" static="no">
        <name>SordOrder</name>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" prot="public">
          <name>SPO</name>
          <briefdescription>
<para>Subject, Predicate, Object. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba6988b642480925a08eb33beb921098fa" prot="public">
          <name>SOP</name>
          <briefdescription>
<para>Subject, Object, Predicate. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba155799991ffba2f405e45466d7dbf078" prot="public">
          <name>OPS</name>
          <briefdescription>
<para>Object, Predicate, Subject. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba4da6ed7929ad552bc19d274c90b369f5" prot="public">
          <name>OSP</name>
          <briefdescription>
<para>Object, Subject, Predicate. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76bada065dbd33b2528ea062b611bf9cd178" prot="public">
          <name>PSO</name>
          <briefdescription>
<para>Predicate, Subject, Object. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba91743bc3932693c4b8a6ca984e8a8437" prot="public">
          <name>POS</name>
          <briefdescription>
<para>Predicate, Object, Subject. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba1d9a094f4deb1febfbe12db8496c2ab1" prot="public">
          <name>GSPO</name>
          <briefdescription>
<para>Graph, Subject, Predicate, Object. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76badfbcf4e6027e3e05d1682d8d7bbd551d" prot="public">
          <name>GSOP</name>
          <briefdescription>
<para>Graph, Subject, Object, Predicate. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76bac5a8de28a9caa7c4d9a9f7221682bd5b" prot="public">
          <name>GOPS</name>
          <briefdescription>
<para>Graph, Object, Predicate, Subject. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76ba55febc8500cc6cf9fc241516732cfe4a" prot="public">
          <name>GOSP</name>
          <briefdescription>
<para>Graph, Object, Subject, Predicate. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76bae80bfe6b3579f97d0be341786a55ccfc" prot="public">
          <name>GPSO</name>
          <briefdescription>
<para>Graph, Predicate, Subject, Object. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a4a73452c777904d8c172948a285fb76baa15ead9add63225c8817e1dce851d39e" prot="public">
          <name>GPOS</name>
          <briefdescription>
<para>Graph, Predicate, Object, Subject. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Triple ordering </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="71" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" prot="public" static="no">
        <name>SearchMode</name>
        <enumvalue id="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" prot="public">
          <name>ALL</name>
          <briefdescription>
<para>Iterate over entire store. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" prot="public">
          <name>SINGLE</name>
          <briefdescription>
<para>Iteration over a single element (exact search) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" prot="public">
          <name>RANGE</name>
          <briefdescription>
<para>Iterate over range with equal prefix. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" prot="public">
          <name>FILTER_RANGE</name>
          <briefdescription>
<para>Iterate over range with equal prefix, filtering. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ac9a1737e5152068114f3ce89e0f55ff5" prot="public">
          <name>FILTER_ALL</name>
          <briefdescription>
<para>Iterate to end of store, filtering. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mode for searching or iteration </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="125" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="125" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sord_8c_1aaa50a15a22302b536972eb34266b2fea" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>const char* const order_names[NUM_ORDERS]</definition>
        <argsstring>[NUM_ORDERS]</argsstring>
        <name>order_names</name>
        <initializer>= {
	&quot;spo&quot;,  &quot;sop&quot;,  &quot;ops&quot;,  &quot;osp&quot;,  &quot;pso&quot;,  &quot;pos&quot;,
	&quot;gspo&quot;, &quot;gsop&quot;, &quot;gops&quot;, &quot;gosp&quot;, &quot;gpso&quot;, &quot;gpos&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String name of each ordering (array indexed by SordOrder) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="87" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sord_8c_1a9f30e198ba7feaaaae717140ba2cd520" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int orderings[NUM_ORDERS][TUP_LEN]</definition>
        <argsstring>[NUM_ORDERS][TUP_LEN]</argsstring>
        <name>orderings</name>
        <initializer>= {
	{ 0, 1, 2, 3 }, { 0, 2, 1, 3 },  
	{ 2, 1, 0, 3 }, { 2, 0, 1, 3 },  
	{ 1, 0, 2, 3 }, { 1, 2, 0, 3 },  
	{ 3, 0, 1, 2 }, { 3, 0, 2, 1 },  
	{ 3, 2, 1, 0 }, { 3, 2, 0, 1 },  
	{ 3, 1, 0, 2 }, { 3, 1, 2, 0 }   
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quads of indices for each order, from most to least significant (array indexed by SordOrder) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="96" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sord_8c_1af1b95c2e67c8a7ae5eafad34e9643043" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t sord_node_hash</definition>
        <argsstring>(const void *n)</argsstring>
        <name>sord_node_hash</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="146" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="146" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a636b4092568116f38a7c12df11665ec5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_node_hash_equal</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>sord_node_hash_equal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="159" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a94a6088874ea636a4ae3ffb5403dc28a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void error</definition>
        <argsstring>(SordWorld *world, SerdStatus st, const char *fmt,...)</argsstring>
        <name>error</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1ga104d544e48b6282ef2447bb3ac7c330d" kindref="member">SerdStatus</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="174" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="174" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaed6f1a14a2d2750435bff14fc644e8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
        <definition>SordWorld* sord_world_new</definition>
        <argsstring>(void)</argsstring>
        <name>sord_world_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="namespace_sord" kindref="compound">Sord</ref> World. It is safe to use multiple worlds in one process, though no data (e.g. nodes) can be shared between worlds, and this should be avoided if possible for performance reasons. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="189" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="189" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a1a068df78547067195304b6bcdd13978" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void free_node_entry</definition>
        <argsstring>(void *value, void *user_data)</argsstring>
        <name>free_node_entry</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="202" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gacc90d35094a70d4acfb2ba1ce00cfbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_world_free</definition>
        <argsstring>(SordWorld *world)</argsstring>
        <name>sord_world_free</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free <computeroutput>world</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="212" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf3939f3c6c19044e41f66622fd079762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_world_set_error_sink</definition>
        <argsstring>(SordWorld *world, SerdErrorSink error_sink, void *handle)</argsstring>
        <name>sord_world_set_error_sink</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1ga925d2fda236697a3e643b307ffe242e5" kindref="member">SerdErrorSink</ref></type>
          <declname>error_sink</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a function to be called when errors occur.</para><para>The <computeroutput>error_sink</computeroutput> will be called with <computeroutput>handle</computeroutput> as its first argument. If no error function is set, errors are printed to stderr. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a0fb1728d9e9a48dc0b2f1e8e40f3dcdb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int sord_node_compare</definition>
        <argsstring>(const SordNode *a, const SordNode *b)</argsstring>
        <name>sord_node_compare</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare nodes, considering NULL a wildcard match. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="230" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="230" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_node_equals</definition>
        <argsstring>(const SordNode *a, const SordNode *b)</argsstring>
        <name>sord_node_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>a</computeroutput> is equal to <computeroutput>b</computeroutput>.</para><para>Note this is much faster than comparing the node&apos;s strings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="265" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a94fcc47b9c4f12d496b02f7407a23fe2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_id_match</definition>
        <argsstring>(const SordNode *a, const SordNode *b)</argsstring>
        <name>sord_id_match</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff IDs are equivalent, or one is a wildcard </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="272" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1ae11dc74f3814ba5125c48e51b7b30188" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_quad_match_inline</definition>
        <argsstring>(const SordQuad x, const SordQuad y)</argsstring>
        <name>sord_quad_match_inline</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="278" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="278" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga6276430f3de7c4c4ab8e53ef2c452f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_quad_match</definition>
        <argsstring>(const SordQuad x, const SordQuad y)</argsstring>
        <name>sord_quad_match</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match two quads (using ID comparison only).</para><para>This function is a straightforward and fast equivalence match with wildcard support (ID 0 is a wildcard). It does not actually read node data. <simplesect kind="return"><para>true iff <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> match. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="287" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a24ebe481b994801542665151a4ac3f61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int sord_quad_compare</definition>
        <argsstring>(const void *x_ptr, const void *y_ptr, void *user_data)</argsstring>
        <name>sord_quad_compare</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>x_ptr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>y_ptr</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two quad IDs lexicographically. NULL IDs (equal to 0) are treated as wildcards, always less than every other possible ID, except itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="298" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="298" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1ac1494882ba5b44867ab3cb6dee4b9c7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_iter_forward</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_forward</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="316" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="316" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1aac5b5dd6fdaf36e40e8af132ce8b4a16" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_iter_seek_match</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_seek_match</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek forward as necessary until <computeroutput>iter</computeroutput> points at a match. <simplesect kind="return"><para>true iff iterator reached end of valid range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="343" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="343" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a4ff93fc2f6b3d3fc97862c69d5cc520e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_iter_seek_match_range</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_seek_match_range</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek forward as necessary until <computeroutput>iter</computeroutput> points at a match, or the prefix no longer matches iter-&gt;pat. <simplesect kind="return"><para>true iff iterator reached end of valid range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="361" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="361" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a5bb5a385511472b92c1a1493229c66da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>static SordIter* sord_iter_new</definition>
        <argsstring>(const SordModel *sord, ZixTreeIter *cur, const SordQuad pat, SordOrder order, SearchMode mode, int n_prefix)</argsstring>
        <name>sord_iter_new</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>sord</declname>
        </param>
        <param>
          <type><ref refid="group__zix_1gad5034843cec6bf6ebbdc5b5fda7b112e" kindref="member">ZixTreeIter</ref> *</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>pat</declname>
        </param>
        <param>
          <type><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n_prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="385" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="385" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gae1b0324b3bda64356fd9c351035d53b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
        <definition>const SordModel* sord_iter_get_model</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_get_model</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the store pointed to by <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="429" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_iter_get</definition>
        <argsstring>(const SordIter *iter, SordQuad id)</argsstring>
        <name>sord_iter_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>quad</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set <computeroutput>quad</computeroutput> to the quad pointed to by <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="435" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="435" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga34db8db692181aca9ffc5506861f95cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>const SordNode* sord_iter_get_node</definition>
        <argsstring>(const SordIter *iter, SordQuadIndex index)</argsstring>
        <name>sord_iter_get_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a field of the quad pointed to by <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="444" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9e505568184171df51514d436bff4a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_iter_next</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_next</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment <computeroutput>iter</computeroutput> to point to the next statement. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="450" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="450" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga287f3764973d96c2f1df566abf569f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_iter_end</definition>
        <argsstring>(const SordIter *iter)</argsstring>
        <name>sord_iter_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>iter</computeroutput> is at the end of its range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="508" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga6450c3214e90ffffc47f756e66d66037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_iter_free</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_free</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="514" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="514" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a411b532ac370869a485c97263e3246da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_has_index</definition>
        <argsstring>(SordModel *sord, SordOrder *order, int *n_prefix, bool graphs)</argsstring>
        <name>sord_has_index</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>sord</declname>
        </param>
        <param>
          <type><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref> *</type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>n_prefix</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>graphs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>sord</computeroutput> has an index for <computeroutput>order</computeroutput>. If <computeroutput>graphs</computeroutput> is true, <computeroutput>order</computeroutput> will be modified to be the corresponding order with a G prepended (so G will be the MSN). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="528" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="528" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a3ba3b2f9f7df230f2b6a1de00f7c2893" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref></type>
        <definition>static SordOrder sord_best_index</definition>
        <argsstring>(SordModel *sord, const SordQuad pat, SearchMode *mode, int *n_prefix)</argsstring>
        <name>sord_best_index</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>sord</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>pat</declname>
        </param>
        <param>
          <type><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref> *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>n_prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the best available index for a pattern. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pat</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern in standard (S P O G) order </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to the (best) iteration mode for iterating over results </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to the length of the range prefix (for <computeroutput>mode</computeroutput> == RANGE and <computeroutput>mode</computeroutput> == FILTER_RANGE) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="546" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="546" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gac2d10de1c3b21b17c2d7eed4a5c7fd55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
        <definition>SordModel* sord_new</definition>
        <argsstring>(SordWorld *world, unsigned indices, bool graphs)</argsstring>
        <name>sord_new</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>graphs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new model.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world in which to make this model.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>SordIndexOption flags (e.g. SORD_SPO|SORD_OPS). Be sure to enable an index where the most significant <ref refid="structnode" kindref="compound">node(s)</ref> are not variables in your queries (e.g. to make (? P O) queries, enable either SORD_OPS or SORD_POS).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graphs</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, store (and index) graph contexts. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="629" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="629" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a2efd9ac9bca2f266b5347eec4284cec2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void sord_node_free_internal</definition>
        <argsstring>(SordWorld *world, SordNode *node)</argsstring>
        <name>sord_node_free_internal</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="667" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="667" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a1096a5044f34ca36210e66b78ad70d2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void sord_add_quad_ref</definition>
        <argsstring>(SordModel *sord, const SordNode *node, SordQuadIndex i)</argsstring>
        <name>sord_add_quad_ref</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>sord</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="684" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="684" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a12995cd1641e461231b1a99e6b398c33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void sord_drop_quad_ref</definition>
        <argsstring>(SordModel *sord, const SordNode *node, SordQuadIndex i)</argsstring>
        <name>sord_drop_quad_ref</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>sord</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="696" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="696" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9e43e4eb96045ce7a07997267c813a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_free</definition>
        <argsstring>(SordModel *sord)</argsstring>
        <name>sord_free</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close and free <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="713" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="713" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga27a0540b02602c5aeb3db056f903e6af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
        <definition>SordWorld* sord_get_world</definition>
        <argsstring>(SordModel *sord)</argsstring>
        <name>sord_get_world</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the world associated with <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="745" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga8f9c599ef7e60a5fd0af126a5f983cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sord_num_quads</definition>
        <argsstring>(const SordModel *sord)</argsstring>
        <name>sord_num_quads</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of quads stored in <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="751" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="751" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga97b4cb950f59a16efec5767c80f03a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sord_num_nodes</definition>
        <argsstring>(const SordWorld *world)</argsstring>
        <name>sord_num_nodes</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of nodes stored in <computeroutput>world</computeroutput>.</para><para>Nodes are included in this count iff they are a part of a quad in <computeroutput>world</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="757" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="757" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf85f5c99b6cb5a6f2a7267d86cc17de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>SordIter* sord_begin</definition>
        <argsstring>(const SordModel *sord)</argsstring>
        <name>sord_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an iterator to the start of <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="763" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="763" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a92fb0228459dc9911f7b4cbbcaca71c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__zix_1gad5034843cec6bf6ebbdc5b5fda7b112e" kindref="member">ZixTreeIter</ref> *</type>
        <definition>static ZixTreeIter* index_search</definition>
        <argsstring>(ZixTree *db, const SordQuad search_key)</argsstring>
        <name>index_search</name>
        <param>
          <type><ref refid="group__zix_1ga684b19fdde4e1e069abd68304fa9518c" kindref="member">ZixTree</ref> *</type>
          <declname>db</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>search_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="775" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="775" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a5c6f6051502c2e0574b72c5a25bd4409" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__zix_1gad5034843cec6bf6ebbdc5b5fda7b112e" kindref="member">ZixTreeIter</ref> *</type>
        <definition>static ZixTreeIter* index_lower_bound</definition>
        <argsstring>(ZixTree *db, const SordQuad search_key)</argsstring>
        <name>index_lower_bound</name>
        <param>
          <type><ref refid="group__zix_1ga684b19fdde4e1e069abd68304fa9518c" kindref="member">ZixTree</ref> *</type>
          <declname>db</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>search_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="783" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="783" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga76e5cc69be0fb45c8cdfb4c9a2450fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>SordIter* sord_find</definition>
        <argsstring>(SordModel *sord, const SordQuad pat)</argsstring>
        <name>sord_find</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>pat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for statements by a quad pattern. <simplesect kind="return"><para>an iterator to the first match, or NULL if no matches found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="809" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="809" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>SordIter* sord_search</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_search</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for statements by nodes. <simplesect kind="return"><para>an iterator to the first match, or NULL if no matches found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="841" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="841" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_get</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_get</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for a single node that matches a pattern. Exactly one of <computeroutput>s</computeroutput>, <computeroutput>p</computeroutput>, <computeroutput>o</computeroutput> must be NULL. This function is mainly useful for predicates that only have one value. The returned node must be freed using sord_node_free. <simplesect kind="return"><para>the first matching node, or NULL if no matches are found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="852" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="852" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gadd60c013214cb56e8b4f1ba0f245e696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_ask</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_ask</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff a statement exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="877" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="877" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga6c1d2d5abb7216c424d14611140954be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>uint64_t sord_count</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_count</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of matching statements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="888" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="888" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga27c89030392c62427533afd03a64a4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_contains</definition>
        <argsstring>(SordModel *sord, const SordQuad pat)</argsstring>
        <name>sord_contains</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>pat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if <computeroutput>model</computeroutput> contains a triple pattern. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="904" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="904" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1afb0ceb7092155d1eb7379827dd1d6c4c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
        <definition>static uint8_t* sord_strndup</definition>
        <argsstring>(const uint8_t *str, size_t len)</argsstring>
        <name>sord_strndup</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="913" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="913" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga34de2b7b44fbd614e7831c9c1b6d114e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga69e82f5abb700cfbde0c9ee8d3574154" kindref="member">SordNodeType</ref></type>
        <definition>SordNodeType sord_node_get_type</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the type of a node (SORD_URI, SORD_BLANK, or SORD_LITERAL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="921" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="921" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaaac09d1114d46785f01bed6e48728c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t* sord_node_get_string</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the string value of a node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="937" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="937" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga414bd4926765816493f35b42b008e30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t* sord_node_get_string_counted</definition>
        <argsstring>(const SordNode *node, size_t *len)</argsstring>
        <name>sord_node_get_string_counted</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the string value of a node, and set <computeroutput>len</computeroutput> to its length. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="943" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="943" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga0f0d52d14ece45c5b8b4c28e0d885798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* sord_node_get_language</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_language</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the language of a literal node (or NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="950" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="950" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaa6fd74ff5079ab6d60d174eedc373b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_node_get_datatype</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_datatype</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the datatype URI of a literal node (or NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="959" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="959" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga46af5ce521ba3e558cc4bcfd3b61d4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__serd_1gafa75ae761bd7490db787b2f9e237595a" kindref="member">SerdNodeFlags</ref></type>
        <definition>SerdNodeFlags sord_node_get_flags</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_flags</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the flags (string attributes) of a node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="965" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="965" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gae686e38224ff87bd0946b21e84fef1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_node_is_inline_object</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_is_inline_object</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff node can be serialised as an inline object.</para><para>More specifically, this returns true iff the node is the object field of exactly one statement, and therefore can be inlined since it needn&apos;t be referred to by name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="971" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="971" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a97a4e268107ffb2bbefb6ceaed2eb116" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>static SordNode* sord_insert_node</definition>
        <argsstring>(SordWorld *world, const SordNode *key, bool copy)</argsstring>
        <name>sord_insert_node</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="977" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="977" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a65f6761e2a171f6b763e26f7c1565f4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>static SordNode* sord_new_uri_counted</definition>
        <argsstring>(SordWorld *world, const uint8_t *str, size_t n_bytes, size_t n_chars, bool copy)</argsstring>
        <name>sord_new_uri_counted</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_chars</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1009" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1009" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_new_uri</definition>
        <argsstring>(SordWorld *world, const uint8_t *str)</argsstring>
        <name>sord_new_uri</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>uri</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a URI node from a string.</para><para>Note this function measures <computeroutput>str</computeroutput>, which is a common bottleneck. Use sord_node_from_serd_node instead if <computeroutput>str</computeroutput> is already measured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1026" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1026" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaaeeb39f050f7e68aee42d79d5c4ce621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_new_relative_uri</definition>
        <argsstring>(SordWorld *world, const uint8_t *str, const uint8_t *base_str)</argsstring>
        <name>sord_new_relative_uri</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>base_uri</declname>
          <defname>base_str</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a URI node from a relative URI string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1033" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1033" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a88fd9a5584e804eb334c02f9b589ee70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>static SordNode* sord_new_blank_counted</definition>
        <argsstring>(SordWorld *world, const uint8_t *str, size_t n_bytes, size_t n_chars)</argsstring>
        <name>sord_new_blank_counted</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1052" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1052" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga465202db49656e1c1df531391a75fc15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_new_blank</definition>
        <argsstring>(SordWorld *world, const uint8_t *str)</argsstring>
        <name>sord_new_blank</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a blank node from a string.</para><para>Note this function measures <computeroutput>str</computeroutput>, which is a common bottleneck. Use sord_node_from_serd_node instead if <computeroutput>str</computeroutput> is already measured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1063" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1063" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a90dd3703758c0f7fa39c371d7eaf7fcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>static SordNode* sord_new_literal_counted</definition>
        <argsstring>(SordWorld *world, SordNode *datatype, const uint8_t *str, size_t n_bytes, size_t n_chars, SerdNodeFlags flags, const char *lang)</argsstring>
        <name>sord_new_literal_counted</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_chars</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gafa75ae761bd7490db787b2f9e237595a" kindref="member">SerdNodeFlags</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1070" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1070" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf4a386554304e783089ba263d7537932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_new_literal</definition>
        <argsstring>(SordWorld *world, SordNode *datatype, const uint8_t *str, const char *lang)</argsstring>
        <name>sord_new_literal</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a literal node from a string.</para><para>Note this function measures <computeroutput>str</computeroutput>, which is a common bottleneck. Use sord_node_from_serd_node instead if <computeroutput>str</computeroutput> is already measured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1091" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1091" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9367640305491801ab3bed714aeb5448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_node_from_serd_node</definition>
        <argsstring>(SordWorld *world, SerdEnv *env, const SerdNode *sn, const SerdNode *datatype, const SerdNode *lang)</argsstring>
        <name>sord_node_from_serd_node</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>node</declname>
          <defname>sn</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new SordNode from a <ref refid="struct_serd_node" kindref="compound">SerdNode</ref>.</para><para>The returned node must be freed using sord_node_free. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1103" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1103" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga497e0859abcc9e6e39c5bcbfcc7c9f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
        <definition>const SerdNode* sord_node_to_serd_node</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_to_serd_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a SordNode as a <ref refid="struct_serd_node" kindref="compound">SerdNode</ref>.</para><para>The returned node is shared and must not be freed or modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1174" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1174" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_node_free</definition>
        <argsstring>(SordWorld *world, SordNode *node)</argsstring>
        <name>sord_node_free</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a node (drop a reference). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1180" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1180" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SordNode* sord_node_copy</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_copy</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a node (obtain a reference).</para><para>Node that since nodes are interned and reference counted, this does not actually create a deep copy of <computeroutput>node</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1193" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1193" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="sord_8c_1a06e68798074270b8c0045ee6eee1829c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sord_add_to_index</definition>
        <argsstring>(SordModel *sord, const SordNode **tup, SordOrder order)</argsstring>
        <name>sord_add_to_index</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>sord</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> **</type>
          <declname>tup</declname>
        </param>
        <param>
          <type><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1203" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1203" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf302459de8a5474600b6f3e0eb4ea3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sord_add</definition>
        <argsstring>(SordModel *sord, const SordQuad tup)</argsstring>
        <name>sord_add</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>quad</declname>
          <defname>tup</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a quad to a model. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1209" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1209" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga15109faf500fa7d7e898e319bdb67c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sord_remove</definition>
        <argsstring>(SordModel *sord, const SordQuad tup)</argsstring>
        <name>sord_remove</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
          <defname>sord</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>quad</declname>
          <defname>tup</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a quad from a model.</para><para>Note that is it illegal to remove while iterating over <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" line="1239" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1239" bodyend="1265"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2011-2014<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C99</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="sord_8c_1a229739ffab14acb41cd246b61a18cc87" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZIX_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="digest_8c" kindref="compound">zix/digest.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8c" kindref="compound">zix/hash.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zix/tree.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sord_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sord__internal_8h" kindref="compound">sord_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="sord_8c_1a0058aa93c7cd0602658a4b0f42e1ba3f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SORD_LOG(prefix,<sp/>...)<sp/>fprintf(stderr,<sp/>&quot;[Sord::&quot;<sp/>prefix<sp/>&quot;]<sp/>&quot;<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SORD_DEBUG_ITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SORD_ITER_LOG(...)<sp/>SORD_LOG(&quot;iter&quot;,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SORD_ITER_LOG(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SORD_DEBUG_SEARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SORD_FIND_LOG(...)<sp/>SORD_LOG(&quot;search&quot;,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="sord_8c_1a8271b81211a0f2e7b3a55b9459bd01c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SORD_FIND_LOG(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SORD_DEBUG_WRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SORD_WRITE_LOG(...)<sp/>SORD_LOG(&quot;write&quot;,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="sord_8c_1a4f268c4bcd324fee3d7a2fe4fec30662" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SORD_WRITE_LOG(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_ORDERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="sord_8c_1ae47cf9cbef1e11b189db139c1dfa8791" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATEMENT_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATEMENT_LEN<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_ORDER<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_GRAPH_ORDER<sp/>GSPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_FMT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;(%s<sp/>%s<sp/>%s<sp/>%s)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="sord_8c_1a83a9545e9571528e33c537141555c33f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_FMT_ELEM(e)<sp/>((e)<sp/>?<sp/>sord_node_get_string(e)<sp/>:<sp/>(const<sp/>uint8_t*)&quot;*&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_FMT_ARGS(t)<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TUP_FMT_ELEM((t)[0]),<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TUP_FMT_ELEM((t)[1]),<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TUP_FMT_ELEM((t)[2]),<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TUP_FMT_ELEM((t)[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="sord_8c_1aa2ca2ca7c3bcf81bc95e8316a17145de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_S<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="sord_8c_1ab5bcd046f906662be6d5a11c8061e859" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_P<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="sord_8c_1a6db3118d6c2a80a521744333798eda9b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_O<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="sord_8c_1a956efb2e4df766d975216d19a7b33f8d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUP_G<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" kindref="member">SPO</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba6988b642480925a08eb33beb921098fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba6988b642480925a08eb33beb921098fa" kindref="member">SOP</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba155799991ffba2f405e45466d7dbf078" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba155799991ffba2f405e45466d7dbf078" kindref="member">OPS</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba4da6ed7929ad552bc19d274c90b369f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba4da6ed7929ad552bc19d274c90b369f5" kindref="member">OSP</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76" refid="sord_8c_1a4a73452c777904d8c172948a285fb76bada065dbd33b2528ea062b611bf9cd178" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76bada065dbd33b2528ea062b611bf9cd178" kindref="member">PSO</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba91743bc3932693c4b8a6ca984e8a8437" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba91743bc3932693c4b8a6ca984e8a8437" kindref="member">POS</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba1d9a094f4deb1febfbe12db8496c2ab1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba1d9a094f4deb1febfbe12db8496c2ab1" kindref="member">GSPO</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="sord_8c_1a4a73452c777904d8c172948a285fb76badfbcf4e6027e3e05d1682d8d7bbd551d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76badfbcf4e6027e3e05d1682d8d7bbd551d" kindref="member">GSOP</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="sord_8c_1a4a73452c777904d8c172948a285fb76bac5a8de28a9caa7c4d9a9f7221682bd5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76bac5a8de28a9caa7c4d9a9f7221682bd5b" kindref="member">GOPS</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba55febc8500cc6cf9fc241516732cfe4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba55febc8500cc6cf9fc241516732cfe4a" kindref="member">GOSP</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="sord_8c_1a4a73452c777904d8c172948a285fb76bae80bfe6b3579f97d0be341786a55ccfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76bae80bfe6b3579f97d0be341786a55ccfc" kindref="member">GPSO</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="sord_8c_1a4a73452c777904d8c172948a285fb76baa15ead9add63225c8817e1dce851d39e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76baa15ead9add63225c8817e1dce851d39e" kindref="member">GPOS</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>order_names[<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref>]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;spo&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;sop&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;ops&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;osp&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;pso&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;pos&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gspo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gsop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gops&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gosp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gpso&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gpos&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orderings[<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref>][<ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>1,<sp/>2,<sp/>3<sp/>},<sp/>{<sp/>0,<sp/>2,<sp/>1,<sp/>3<sp/>},<sp/><sp/></highlight><highlight class="comment">//<sp/>SPO,<sp/>SOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>1,<sp/>0,<sp/>3<sp/>},<sp/>{<sp/>2,<sp/>0,<sp/>1,<sp/>3<sp/>},<sp/><sp/></highlight><highlight class="comment">//<sp/>OPS,<sp/>OSP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>1,<sp/>0,<sp/>2,<sp/>3<sp/>},<sp/>{<sp/>1,<sp/>2,<sp/>0,<sp/>3<sp/>},<sp/><sp/></highlight><highlight class="comment">//<sp/>PSO,<sp/>POS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>0,<sp/>1,<sp/>2<sp/>},<sp/>{<sp/>3,<sp/>0,<sp/>2,<sp/>1<sp/>},<sp/><sp/></highlight><highlight class="comment">//<sp/>GSPO,<sp/>GSOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>2,<sp/>1,<sp/>0<sp/>},<sp/>{<sp/>3,<sp/>2,<sp/>0,<sp/>1<sp/>},<sp/><sp/></highlight><highlight class="comment">//<sp/>GOPS,<sp/>GOSP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>1,<sp/>0,<sp/>2<sp/>},<sp/>{<sp/>3,<sp/>1,<sp/>2,<sp/>0<sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPSO,<sp/>GPOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="struct_sord_world_impl" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sord_world_impl" kindref="compound">SordWorldImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="107" refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_hash_impl" kindref="compound">ZixHash</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref>;</highlight></codeline>
<codeline lineno="108" refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga925d2fda236697a3e643b307ffe242e5" kindref="member">SerdErrorSink</ref><sp/><ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref>;</highlight></codeline>
<codeline lineno="109" refid="struct_sord_world_impl_1a7a28bab8463feb35b01098b088a69df1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_world_impl_1a7a28bab8463feb35b01098b088a69df1" kindref="member">error_handle</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="struct_sord_model_impl" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sord_model_impl" kindref="compound">SordModelImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="114" refid="struct_sord_model_impl_1ab9a23ed686b1386ea310a3192e6d9cc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/><ref refid="struct_sord_model_impl_1ab9a23ed686b1386ea310a3192e6d9cc5" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*<sp/>indices[<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref>];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="struct_sord_model_impl_1aa077b03efcbee4ed3acee0e8c5316b5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl_1aa077b03efcbee4ed3acee0e8c5316b5a" kindref="member">n_quads</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126" refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" kindref="member">ALL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127" refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" kindref="member">SINGLE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128" refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129" refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="130" refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ac9a1737e5152068114f3ce89e0f55ff5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ac9a1737e5152068114f3ce89e0f55ff5" kindref="member">FILTER_ALL</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="struct_sord_iter_impl" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sord_iter_impl" kindref="compound">SordIterImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="135" refid="struct_sord_iter_impl_1a6e78f08c329ec472f7a33c14cb627609" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><ref refid="struct_sord_iter_impl_1a6e78f08c329ec472f7a33c14cb627609" kindref="member">sord</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138" refid="struct_sord_iter_impl_1a289a91ce551c37a315ace3a69b4218a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordering[<ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>];<sp/><sp/></highlight></codeline>
<codeline lineno="139" refid="struct_sord_iter_impl_1a857921dd49f48ae2471dc39a5573fbff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl_1a857921dd49f48ae2471dc39a5573fbff" kindref="member">mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140" refid="struct_sord_iter_impl_1ab4f3c352b905bb73293eb4750bf5c5c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl_1ab4f3c352b905bb73293eb4750bf5c5c1" kindref="member">n_prefix</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141" refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142" refid="struct_sord_iter_impl_1ae3b907b1696be24090d34a7f4e478cbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl_1ae3b907b1696be24090d34a7f4e478cbb" kindref="member">skip_graphs</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></highlight></codeline>
<codeline lineno="146"><highlight class="normal">sord_node_hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>n)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="structnode" kindref="compound">node</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)n;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1a28b5828ac3b16e22c26077eedf5674ff" kindref="member">hash</ref><sp/>=<sp/><ref refid="digest_8c_1a9c9e645ae0332e192c897ff6b76199bb" kindref="member">zix_digest_start</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/><ref refid="digest_8c_1ab8b8eb279990548eff23700889e90b35" kindref="member">zix_digest_add</ref>(hash,<sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/><ref refid="digest_8c_1ab8b8eb279990548eff23700889e90b35" kindref="member">zix_digest_add</ref>(hash,<sp/>&amp;node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>==<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/><ref refid="digest_8c_1ab8b8eb279990548eff23700889e90b35" kindref="member">zix_digest_add</ref>(hash,<sp/>&amp;node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="hashrout_8h_1a28b5828ac3b16e22c26077eedf5674ff" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">sord_node_hash_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>a_node<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)<ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>b_node<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)b;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a_node<sp/>==<sp/>b_node)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((a_node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>==<sp/>b_node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a_node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>!=<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref><sp/>||</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a_node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>==<sp/>b_node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strncmp(a_node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a_node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>))))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__serd_1ga19e58c93a79966be1e74d9d92f5ea167" kindref="member">serd_node_equals</ref>(&amp;a_node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>,<sp/>&amp;b_node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>)));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/><ref refid="group__serd_1ga104d544e48b6282ef2447bb3ac7c330d" kindref="member">SerdStatus</ref><sp/>st,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><ref refid="namespacelv2specgen_1a022f620722f1029244a92eca556aa50a" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_error" kindref="compound">SerdError</ref><sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/>{<sp/>st,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0,<sp/>0,<sp/>fmt,<sp/>&amp;args<sp/>};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(world-&gt;<ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref>(world-&gt;<ref refid="struct_sord_world_impl_1a7a28bab8463feb35b01098b088a69df1" kindref="member">error_handle</ref>,<sp/>&amp;e);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vfprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*</highlight></codeline>
<codeline lineno="189" refid="group__sord_1gaed6f1a14a2d2750435bff14fc644e8cc" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaed6f1a14a2d2750435bff14fc644e8cc" kindref="member">sord_world_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world<sp/>=<sp/>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_sord_world_impl_1a7a28bab8463feb35b01098b088a69df1" kindref="member">error_handle</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref><sp/>=<sp/><ref refid="group__zix_1ga4e486764dfc217ea4792440c17052ea8" kindref="member">zix_hash_new</ref>(</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_node_hash,<sp/>sord_node_hash_equal,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">free_node_entry(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="structnode" kindref="compound">node</ref><sp/>=<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)<ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>==<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>((<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*)user_data,<sp/>node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>free((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="group__sord_1gacc90d35094a70d4acfb2ba1ce00cfbcc" refkind="member"><highlight class="normal"><ref refid="group__sord_1gacc90d35094a70d4acfb2ba1ce00cfbcc" kindref="member">sord_world_free</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1ga2ac96efa2dc2cd3590b583d52397bfaa" kindref="member">zix_hash_foreach</ref>(world-&gt;<ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref>,<sp/>free_node_entry,<sp/>world);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1gaae5292c041262d550660b32710a0b3dd" kindref="member">zix_hash_free</ref>(world-&gt;<ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>free(world);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="group__sord_1gaf3939f3c6c19044e41f66622fd079762" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaf3939f3c6c19044e41f66622fd079762" kindref="member">sord_world_set_error_sink</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga925d2fda236697a3e643b307ffe242e5" kindref="member">SerdErrorSink</ref><sp/><ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref>,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref><sp/><sp/><sp/>=<sp/><ref refid="struct_sord_world_impl_1a4a82d0c9c003d1fecaef741f5e072c8d" kindref="member">error_sink</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_sord_world_impl_1a7a28bab8463feb35b01098b088a69df1" kindref="member">error_handle</ref><sp/>=<sp/>handle;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">sord_node_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b<sp/>||<sp/>!a<sp/>||<sp/>!b)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Exact<sp/>or<sp/>wildcard<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>!=<sp/>b-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>-<sp/>b-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref>:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)a-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)b-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>strcmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(a),</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(b));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Can&apos;t<sp/>use<sp/>sord_node_compare<sp/>here<sp/>since<sp/>it<sp/>does<sp/>wildcards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>||<sp/>!b-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref>)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>a-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>-<sp/>b-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>strcmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)a-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref>-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)b-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref>-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>strcmp(a-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>,<sp/>b-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>b)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>==<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Nodes<sp/>are<sp/>interned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">sord_id_match(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>b)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!a<sp/>||<sp/>!b<sp/>||<sp/>(a<sp/>==<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">sord_quad_match_inline(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>y)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_id_match(<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>[0],<sp/>y[0])</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>sord_id_match(<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>[1],<sp/>y[1])</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>sord_id_match(<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>[2],<sp/>y[2])</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>sord_id_match(<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>[3],<sp/>y[3]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="group__sord_1ga6276430f3de7c4c4ab8e53ef2c452f1b" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga6276430f3de7c4c4ab8e53ef2c452f1b" kindref="member">sord_quad_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>y)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_quad_match_inline(x,<sp/>y);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">sord_quad_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>y_ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordering<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)user_data;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight><highlight class="keyword">const</highlight><highlight class="normal">*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight><highlight class="keyword">const</highlight><highlight class="normal">*)x_ptr;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight><highlight class="keyword">const</highlight><highlight class="normal">*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight><highlight class="keyword">const</highlight><highlight class="normal">*)y_ptr;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>ordering[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>sord_node_compare(x[idx],<sp/>y[idx]);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">sord_iter_forward(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iter-&gt;<ref refid="struct_sord_iter_impl_1ae3b907b1696be24090d34a7f4e478cbb" kindref="member">skip_graphs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref><sp/>=<sp/><ref refid="group__zix_1ga5e96ee30587208cb8076bbec52465846" kindref="member">zix_tree_iter_next</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__zix_1ga6056d4aaa4f8492849f89179d9adf174" kindref="member">zix_tree_iter_is_end</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>key<sp/>=<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>initial<sp/>=<sp/>{<sp/>key[0],<sp/>key[1],<sp/>key[2],<sp/>key[3]<sp/>};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref><sp/>=<sp/><ref refid="group__zix_1ga5e96ee30587208cb8076bbec52465846" kindref="member">zix_tree_iter_next</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__zix_1ga6056d4aaa4f8492849f89179d9adf174" kindref="member">zix_tree_iter_is_end</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>))</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>3;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>!=<sp/>initial[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>])</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">sord_iter_seek_match(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="group__zix_1ga6056d4aaa4f8492849f89179d9adf174" kindref="member">zix_tree_iter_is_end</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_iter_forward(iter))<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord_quad_match_inline(key,<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">sord_iter_seek_match_range(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>key<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord_quad_match_inline(key,<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ab4f3c352b905bb73293eb4750bf5c5c1" kindref="member">n_prefix</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a289a91ce551c37a315ace3a69b4218a5" kindref="member">ordering</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sord_id_match(key[idx],<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>[idx]))<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Reached<sp/>end<sp/>of<sp/>valid<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!sord_iter_forward(iter));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Reached<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*</highlight></codeline>
<codeline lineno="385"><highlight class="normal">sord_iter_new(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/>cur,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref><sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref><sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_prefix)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ordering<sp/>=<sp/>orderings[<ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter<sp/>=<sp/>(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a6e78f08c329ec472f7a33c14cb627609" kindref="member">sord</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sord;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a857921dd49f48ae2471dc39a5573fbff" kindref="member">mode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ab4f3c352b905bb73293eb4750bf5c5c1" kindref="member">n_prefix</ref><sp/><sp/><sp/><sp/>=<sp/>n_prefix;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ae3b907b1696be24090d34a7f4e478cbb" kindref="member">skip_graphs</ref><sp/>=<sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref><sp/>&lt;<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba1d9a094f4deb1febfbe12db8496c2ab1" kindref="member">GSPO</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pat[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a289a91ce551c37a315ace3a69b4218a5" kindref="member">ordering</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>ordering[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a857921dd49f48ae2471dc39a5573fbff" kindref="member">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" kindref="member">ALL</ref>:</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" kindref="member">SINGLE</ref>:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_quad_match_inline((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>),</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_iter_seek_match_range(iter);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ac9a1737e5152068114f3ce89e0f55ff5" kindref="member">FILTER_ALL</ref>:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_iter_seek_match(iter);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SORD_DEBUG_ITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" kindref="member">sord_iter_get</ref>(iter,<sp/>value);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;New<sp/>%p<sp/>pat=&quot;</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" kindref="member">TUP_FMT</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>cur=&quot;</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" kindref="member">TUP_FMT</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>end=%d<sp/>skip=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter,<sp/><ref refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" kindref="member">TUP_FMT_ARGS</ref>(pat),<sp/><ref refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" kindref="member">TUP_FMT_ARGS</ref>(value),</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>,<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ae3b907b1696be24090d34a7f4e478cbb" kindref="member">skip_graphs</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*</highlight></codeline>
<codeline lineno="429" refid="group__sord_1gae1b0324b3bda64356fd9c351035d53b8" refkind="member"><highlight class="normal"><ref refid="group__sord_1gae1b0324b3bda64356fd9c351035d53b8" kindref="member">sord_iter_get_model</ref>(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a6e78f08c329ec472f7a33c14cb627609" kindref="member">sord</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" kindref="member">sord_iter_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter,<sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>key<sp/>=<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>key[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="444" refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter,<sp/><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref><sp/>index)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter<sp/>?<sp/>((<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>))[index]<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="group__sord_1ga9e505568184171df51514d436bff4a52" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga9e505568184171df51514d436bff4a52" kindref="member">sord_iter_next</ref>(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>key;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/>sord_iter_forward(iter);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a857921dd49f48ae2471dc39a5573fbff" kindref="member">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" kindref="member">ALL</ref>:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>end<sp/>if<sp/>the<sp/>cursor<sp/>is<sp/>(assigned<sp/>above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" kindref="member">SINGLE</ref>:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>reached<sp/>single<sp/>end\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>range<sp/>next\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>end<sp/>if<sp/>the<sp/>MSNs<sp/>no<sp/>longer<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter-&gt;<ref refid="struct_sord_iter_impl_1a20e44d81d729fb567bd0660829261f94" kindref="member">cur</ref>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(key);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ab4f3c352b905bb73293eb4750bf5c5c1" kindref="member">n_prefix</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a289a91ce551c37a315ace3a69b4218a5" kindref="member">ordering</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sord_id_match(key[idx],<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1ac421d0325ee1c14cbe9eb3459e232c79" kindref="member">pat</ref>[idx]))<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>reached<sp/>non-match<sp/>end\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>:</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seek<sp/>forward<sp/>to<sp/>next<sp/>match,<sp/>stopping<sp/>if<sp/>prefix<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_iter_seek_match_range(iter);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ac9a1737e5152068114f3ce89e0f55ff5" kindref="member">FILTER_ALL</ref>:</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seek<sp/>forward<sp/>to<sp/>next<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_iter_seek_match(iter);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>reached<sp/>index<sp/>end\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Reached<sp/>end\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SORD_DEBUG_ITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>tup;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" kindref="member">sord_iter_get</ref>(iter,<sp/>tup);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Increment<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" kindref="member">TUP_FMT</ref><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter,<sp/><ref refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" kindref="member">TUP_FMT_ARGS</ref>(tup));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="group__sord_1ga287f3764973d96c2f1df566abf569f5e" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga287f3764973d96c2f1df566abf569f5e" kindref="member">sord_iter_end</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!iter<sp/>||<sp/>iter-&gt;<ref refid="struct_sord_iter_impl_1a9f06edee03a201a00f7ef17a4beda272" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(<ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1accbe42e160f07b6f8a7d624a53a0e4eb" kindref="member">SORD_ITER_LOG</ref>(</highlight><highlight class="stringliteral">&quot;%p<sp/>Free\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)iter);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(iter);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">sord_has_index(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref>*<sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n_prefix,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graphs)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphs)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref>)(*<ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref><sp/>+<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba1d9a094f4deb1febfbe12db8496c2ab1" kindref="member">GSPO</ref>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_prefix<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[*<ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>];</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref></highlight></codeline>
<codeline lineno="546"><highlight class="normal">sord_best_index(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/><sp/><sp/><sp/>sord,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref>*<sp/><sp/><sp/><sp/>mode,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_prefix)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graph_search<sp/>=<sp/>(pat[<ref refid="sord_8c_1a956efb2e4df766d975216d19a7b33f8d" kindref="member">TUP_G</ref>]<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sig</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(pat[0]<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>*<sp/>0x100</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(pat[1]<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>*<sp/>0x010</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(pat[2]<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>*<sp/>0x001;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref><sp/><ref refid="charmaps_8h_1a422f205059a9d17797eb370ded3c21c6" kindref="member">good</ref>[2]<sp/>=<sp/>{<sp/>(<ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref>)-1,<sp/>(<ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref>)-1<sp/>};</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAT_CASE(sig,<sp/>m,<sp/>g0,<sp/>g1,<sp/>np)<sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>sig:<sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/><sp/><sp/><sp/><sp/>=<sp/>m;<sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>good[0]<sp/><sp/><sp/>=<sp/>g0;<sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>good[1]<sp/><sp/><sp/>=<sp/>g1;<sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_prefix<sp/>=<sp/>np;<sp/>\</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Good<sp/>orderings<sp/>that<sp/>don&apos;t<sp/>require<sp/>filtering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>*mode<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>*n_prefix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sig)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x000:</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph_search)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_prefix<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" kindref="member">DEFAULT_GRAPH_ORDER</ref>;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" kindref="member">ALL</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x111:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" kindref="member">SINGLE</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>graph_search<sp/>?<sp/><ref refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" kindref="member">DEFAULT_GRAPH_ORDER</ref><sp/>:<sp/><ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x001,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba155799991ffba2f405e45466d7dbf078" kindref="member">OPS</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba4da6ed7929ad552bc19d274c90b369f5" kindref="member">OSP</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x010,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba91743bc3932693c4b8a6ca984e8a8437" kindref="member">POS</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76bada065dbd33b2528ea062b611bf9cd178" kindref="member">PSO</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x011,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba155799991ffba2f405e45466d7dbf078" kindref="member">OPS</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba91743bc3932693c4b8a6ca984e8a8437" kindref="member">POS</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x100,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" kindref="member">SPO</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba6988b642480925a08eb33beb921098fa" kindref="member">SOP</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x101,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba6988b642480925a08eb33beb921098fa" kindref="member">SOP</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba4da6ed7929ad552bc19d274c90b369f5" kindref="member">OSP</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x110,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" kindref="member">SPO</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76bada065dbd33b2528ea062b611bf9cd178" kindref="member">PSO</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*mode<sp/>==<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord_has_index(sord,<sp/>&amp;good[0],<sp/>n_prefix,<sp/>graph_search))<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>good[0];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord_has_index(sord,<sp/>&amp;good[1],<sp/>n_prefix,<sp/>graph_search))<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>good[1];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>so<sp/>good<sp/>orderings<sp/>that<sp/>require<sp/>filtering,<sp/>but<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>be<sp/>constrained<sp/>to<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sig)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x011,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba4da6ed7929ad552bc19d274c90b369f5" kindref="member">OSP</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76bada065dbd33b2528ea062b611bf9cd178" kindref="member">PSO</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x101,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba037fbf5052ce9e2ef5d7795b52340a2e" kindref="member">SPO</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba155799991ffba2f405e45466d7dbf078" kindref="member">OPS</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5aefe02a9ce3dab20cae53f3c311f3ed" kindref="member">PAT_CASE</ref>(0x110,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba6988b642480925a08eb33beb921098fa" kindref="member">SOP</ref>,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76ba91743bc3932693c4b8a6ca984e8a8437" kindref="member">POS</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*mode<sp/>==<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord_has_index(sord,<sp/>&amp;good[0],<sp/>n_prefix,<sp/>graph_search))<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>good[0];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord_has_index(sord,<sp/>&amp;good[1],<sp/>n_prefix,<sp/>graph_search))<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>good[1];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph_search)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a684d9883b21a2b884ea3615b65eea513" kindref="member">FILTER_RANGE</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_prefix<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" kindref="member">DEFAULT_GRAPH_ORDER</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mode<sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ac9a1737e5152068114f3ce89e0f55ff5" kindref="member">FILTER_ALL</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*</highlight></codeline>
<codeline lineno="629" refid="group__sord_1gac2d10de1c3b21b17c2d7eed4a5c7fd55" refkind="member"><highlight class="normal"><ref refid="group__sord_1gac2d10de1c3b21b17c2d7eed4a5c7fd55" kindref="member">sord_new</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>indices,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graphs)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord<sp/>=<sp/>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModelImpl</ref>));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab9a23ed686b1386ea310a3192e6d9cc5" kindref="member">world</ref><sp/><sp/><sp/>=<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1aa077b03efcbee4ed3acee0e8c5316b5a" kindref="member">n_quads</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>(<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref><sp/>/<sp/>2);<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ordering<sp/><sp/><sp/>=<sp/>orderings[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>g_ordering<sp/>=<sp/>orderings[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>+<sp/>(<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref><sp/>/<sp/>2)];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>))<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="group__zix_1ga72db646eab3fe826b87f97e02cf3bbd5" kindref="member">zix_tree_new</ref>(</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sord_quad_compare,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)ordering,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphs)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>+<sp/>(<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref><sp/>/<sp/>2)]<sp/>=<sp/><ref refid="group__zix_1ga72db646eab3fe826b87f97e02cf3bbd5" kindref="member">zix_tree_new</ref>(</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sord_quad_compare,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)g_ordering,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>+<sp/>(<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref><sp/>/<sp/>2)]<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>+<sp/>(<ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref><sp/>/<sp/>2)]<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>])<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>]<sp/>=<sp/><ref refid="group__zix_1ga72db646eab3fe826b87f97e02cf3bbd5" kindref="member">zix_tree_new</ref>(</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sord_quad_compare,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)orderings[<ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>],<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphs<sp/>&amp;&amp;<sp/>!sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" kindref="member">DEFAULT_GRAPH_ORDER</ref>])<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" kindref="member">DEFAULT_GRAPH_ORDER</ref>]<sp/>=<sp/><ref refid="group__zix_1ga72db646eab3fe826b87f97e02cf3bbd5" kindref="member">zix_tree_new</ref>(</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sord_quad_compare,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)orderings[<ref refid="sord_8c_1ad2e75b37a743ce1d4bef218fd31a5c0a" kindref="member">DEFAULT_GRAPH_ORDER</ref>],<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">sord_node_free_internal(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="structnode" kindref="compound">node</ref>)</highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>pointer<sp/>to<sp/>buffer<sp/>to<sp/>free<sp/>after<sp/>node<sp/>removal<sp/>and<sp/>destruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref><sp/>=<sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>node<sp/>from<sp/>hash<sp/>(which<sp/>frees<sp/>the<sp/>node)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__zix_1ga5265362552f631e84a3122719a6df21c" kindref="member">zix_hash_remove</ref>(world-&gt;<ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref>,<sp/>node))<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>(world,<sp/><ref refid="group__serd_1gga104d544e48b6282ef2447bb3ac7c330da80c3ada89b84f63901565856dd56389b" kindref="member">SERD_ERR_INTERNAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>node<sp/>from<sp/>hash\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>free((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)buf);</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal">sord_add_quad_ref(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node,<sp/><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++((<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)node)-&gt;refs;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>!=<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref><sp/>&amp;&amp;<sp/>i<sp/>==<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++((<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)node)-&gt;meta.res.refs_as_obj;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">sord_drop_quad_ref(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node,<sp/><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>!=<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref><sp/>&amp;&amp;<sp/>i<sp/>==<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1aca9cba6462ce61f6db49069fb52df4e1" kindref="member">res</ref>.<ref refid="struct_sord_resource_metadata_1aa71e76a7af2f084bbd003cd991d06577" kindref="member">refs_as_obj</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--((<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)node)-&gt;meta.res.refs_as_obj;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--((<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)node)-&gt;refs<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_node_free_internal(<ref refid="group__sord_1ga27a0540b02602c5aeb3db056f903e6af" kindref="member">sord_get_world</ref>(sord),<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)node);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="group__sord_1ga9e43e4eb96045ce7a07997267c813a15" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga9e43e4eb96045ce7a07997267c813a15" kindref="member">sord_free</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sord)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>tup;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/><ref refid="group__sord_1gaf85f5c99b6cb5a6f2a7267d86cc17de8" kindref="member">sord_begin</ref>(sord);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>!<ref refid="group__sord_1ga287f3764973d96c2f1df566abf569f5e" kindref="member">sord_iter_end</ref>(i);<sp/><ref refid="group__sord_1ga9e505568184171df51514d436bff4a52" kindref="member">sord_iter_next</ref>(i))<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" kindref="member">sord_iter_get</ref>(i,<sp/>tup);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref><sp/>=<sp/>0;<sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref><sp/>&lt;<sp/><ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>;<sp/>++<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_drop_quad_ref(sord,<sp/>tup[<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>],<sp/>(<ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref>)t);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(i);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>quads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref><sp/>=<sp/><ref refid="group__zix_1gae5cd6820a3fbfd92fd44755738430ed8" kindref="member">zix_tree_begin</ref>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>]);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="group__zix_1ga6056d4aaa4f8492849f89179d9adf174" kindref="member">zix_tree_iter_is_end</ref>(<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref><sp/>=<sp/><ref refid="group__zix_1ga5e96ee30587208cb8076bbec52465846" kindref="member">zix_tree_iter_next</ref>(<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>))<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(<ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref><sp/>=<sp/>0;<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref><sp/>&lt;<sp/><ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref>;<sp/>++<ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>])</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__zix_1gaa7e4d26fc7a27fff154c77b3b617d21c" kindref="member">zix_tree_free</ref>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>]);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sord);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*</highlight></codeline>
<codeline lineno="745" refid="group__sord_1ga27a0540b02602c5aeb3db056f903e6af" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga27a0540b02602c5aeb3db056f903e6af" kindref="member">sord_get_world</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab9a23ed686b1386ea310a3192e6d9cc5" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="group__sord_1ga8f9c599ef7e60a5fd0af126a5f983cfb" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga8f9c599ef7e60a5fd0af126a5f983cfb" kindref="member">sord_num_quads</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord-&gt;<ref refid="struct_sord_model_impl_1aa077b03efcbee4ed3acee0e8c5316b5a" kindref="member">n_quads</ref>;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757" refid="group__sord_1ga97b4cb950f59a16efec5767c80f03a19" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga97b4cb950f59a16efec5767c80f03a19" kindref="member">sord_num_nodes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world)</highlight></codeline>
<codeline lineno="758"><highlight class="normal">{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__zix_1gabebdf1ac7bb7001b54a03cfe3e0d6e7d" kindref="member">zix_hash_size</ref>(world-&gt;<ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*</highlight></codeline>
<codeline lineno="763" refid="group__sord_1gaf85f5c99b6cb5a6f2a7267d86cc17de8" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaf85f5c99b6cb5a6f2a7267d86cc17de8" kindref="member">sord_begin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga8f9c599ef7e60a5fd0af126a5f983cfb" kindref="member">sord_num_quads</ref>(sord)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/>cur<sp/>=<sp/><ref refid="group__zix_1gae5cd6820a3fbfd92fd44755738430ed8" kindref="member">zix_tree_begin</ref>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>]);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_iter_new(sord,<sp/>cur,<sp/>pat,<sp/><ref refid="sord_8c_1a889a1c08592b6ef9195889a2baec9c78" kindref="member">DEFAULT_ORDER</ref>,<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72ab1d5eac4b1dca480c8056eaea7663b7a" kindref="member">ALL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*</highlight></codeline>
<codeline lineno="775"><highlight class="normal">index_search(<ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*<sp/>db,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>search_key)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/>iter<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1gac560c0fe28be90f9c00f9c4c15095c23" kindref="member">zix_tree_find</ref>(db,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)search_key,<sp/>&amp;iter);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*</highlight></codeline>
<codeline lineno="783"><highlight class="normal">index_lower_bound(<ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*<sp/>db,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>search_key)</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/>iter<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1gac560c0fe28be90f9c00f9c4c15095c23" kindref="member">zix_tree_find</ref>(db,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)search_key,<sp/>&amp;iter);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iter)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/>prev<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((prev<sp/>=<sp/><ref refid="group__zix_1ga489996dbfae4659265b7e57469f5fc7d" kindref="member">zix_tree_iter_prev</ref>(iter)))<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prev)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(prev);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sord_quad_match_inline(key,<sp/>search_key))<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*</highlight></codeline>
<codeline lineno="809" refid="group__sord_1ga76e5cc69be0fb45c8cdfb4c9a2450fa5" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga76e5cc69be0fb45c8cdfb4c9a2450fa5" kindref="member">sord_find</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pat[0]<sp/>&amp;&amp;<sp/>!pat[1]<sp/>&amp;&amp;<sp/>!pat[2]<sp/>&amp;&amp;<sp/>!pat[3])</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gaf85f5c99b6cb5a6f2a7267d86cc17de8" kindref="member">sord_begin</ref>(sord);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72" kindref="member">SearchMode</ref><sp/><sp/><sp/><sp/><sp/><sp/>mode;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_prefix;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref><sp/>index_order<sp/>=<sp/>sord_best_index(sord,<sp/>pat,<sp/>&amp;mode,<sp/>&amp;n_prefix);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a8271b81211a0f2e7b3a55b9459bd01c5" kindref="member">SORD_FIND_LOG</ref>(</highlight><highlight class="stringliteral">&quot;Find<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" kindref="member">TUP_FMT</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>index=%s<sp/><sp/>mode=%d<sp/><sp/>n_prefix=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" kindref="member">TUP_FMT_ARGS</ref>(pat),<sp/>order_names[index_order],<sp/>mode,<sp/>n_prefix);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pat[0]<sp/>&amp;&amp;<sp/>pat[1]<sp/>&amp;&amp;<sp/>pat[2]<sp/>&amp;&amp;<sp/>pat[3])</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" kindref="member">SINGLE</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>duplicate<sp/>quads<sp/>(Sord<sp/>is<sp/>a<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>db<sp/><sp/>=<sp/>sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[index_order];</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/>index_lower_bound(db,<sp/>pat);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__zix_1ga6056d4aaa4f8492849f89179d9adf174" kindref="member">zix_tree_iter_is_end</ref>(cur))<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a8271b81211a0f2e7b3a55b9459bd01c5" kindref="member">SORD_FIND_LOG</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>match<sp/>found\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(cur);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!key<sp/>||<sp/>(<sp/>(mode<sp/>==<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a36ccd76c516f51bf87c02b44305284ca" kindref="member">RANGE</ref><sp/>||<sp/>mode<sp/>==<sp/><ref refid="sord_8c_1a5a2afa1489549bc706d12bc66c0c4e72a3388f7110f6f25a54e215eb75d5d7516" kindref="member">SINGLE</ref>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!sord_quad_match_inline(pat,<sp/>key)<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a8271b81211a0f2e7b3a55b9459bd01c5" kindref="member">SORD_FIND_LOG</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>match<sp/>found\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_iter_new(sord,<sp/>cur,<sp/>pat,<sp/>index_order,<sp/>mode,<sp/>n_prefix);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*</highlight></codeline>
<codeline lineno="841" refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac517f0c27408fbd365e7dd34e032faca" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>g)</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat<sp/>=<sp/>{<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>,<sp/>g<sp/>};</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1ga76e5cc69be0fb45c8cdfb4c9a2450fa5" kindref="member">sord_find</ref>(model,<sp/>pat);</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="852" refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac517f0c27408fbd365e7dd34e032faca" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>g)</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)s<sp/>+<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)p<sp/>+<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)o<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/><sp/><sp/>=<sp/><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(model,<sp/>s,<sp/>p,<sp/>o,<sp/>g);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>ret<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(<ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a7329717c7624be0d208bdc20c236e33d" kindref="member">SORD_SUBJECT</ref>));</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(<ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a0df0a36753303d1d8a55487296a050bb" kindref="member">SORD_PREDICATE</ref>));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!o)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(<ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(i);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="group__sord_1gadd60c013214cb56e8b4f1ba0f245e696" refkind="member"><highlight class="normal"><ref refid="group__sord_1gadd60c013214cb56e8b4f1ba0f245e696" kindref="member">sord_ask</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac517f0c27408fbd365e7dd34e032faca" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>g)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat<sp/>=<sp/>{<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>,<sp/>g<sp/>};</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1ga27c89030392c62427533afd03a64a4c5" kindref="member">sord_contains</ref>(model,<sp/>pat);</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></highlight></codeline>
<codeline lineno="888" refid="group__sord_1ga6c1d2d5abb7216c424d14611140954be" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga6c1d2d5abb7216c424d14611140954be" kindref="member">sord_count</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac517f0c27408fbd365e7dd34e032faca" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref>,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>g)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(model,<sp/>s,<sp/>p,<sp/>o,<sp/>g);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>!<ref refid="group__sord_1ga287f3764973d96c2f1df566abf569f5e" kindref="member">sord_iter_end</ref>(i);<sp/><ref refid="group__sord_1ga9e505568184171df51514d436bff4a52" kindref="member">sord_iter_next</ref>(i))<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(i);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904" refid="group__sord_1ga27c89030392c62427533afd03a64a4c5" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga27c89030392c62427533afd03a64a4c5" kindref="member">sord_contains</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>pat)</highlight></codeline>
<codeline lineno="905"><highlight class="normal">{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>iter<sp/>=<sp/><ref refid="group__sord_1ga76e5cc69be0fb45c8cdfb4c9a2450fa5" kindref="member">sord_find</ref>(sord,<sp/>pat);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/>=<sp/>(iter<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(iter);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*</highlight></codeline>
<codeline lineno="913"><highlight class="normal">sord_strndup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>dup<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)malloc(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dup,<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dup;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><ref refid="group__sord_1ga69e82f5abb700cfbde0c9ee8d3574154" kindref="member">SordNodeType</ref></highlight></codeline>
<codeline lineno="921" refid="group__sord_1ga34de2b7b44fbd614e7831c9c1b6d114e" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga34de2b7b44fbd614e7831c9c1b6d114e" kindref="member">sord_node_get_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref>:</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154aa469e5ec95b931bc4c5adaa7752b9f0a" kindref="member">SORD_BLANK</ref>;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>:</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154a9d48171e6a7a4b4533af3539052d6dfd" kindref="member">SORD_LITERAL</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>:</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154a7335bbadcb5084cedd7957d7d772aaa5" kindref="member">SORD_URI</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>invalid<sp/>node<sp/>type\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga69e82f5abb700cfbde0c9ee8d3574154" kindref="member">SordNodeType</ref>)0;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*</highlight></codeline>
<codeline lineno="937" refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*</highlight></codeline>
<codeline lineno="943" refid="group__sord_1ga414bd4926765816493f35b42b008e30b" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga414bd4926765816493f35b42b008e30b" kindref="member">sord_node_get_string_counted</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="950" refid="group__sord_1ga0f0d52d14ece45c5b8b4c28e0d885798" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga0f0d52d14ece45c5b8b4c28e0d885798" kindref="member">sord_node_get_language</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>!=<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref><sp/>||<sp/>!node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="959" refid="group__sord_1gaa6fd74ff5079ab6d60d174eedc373b13" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaa6fd74ff5079ab6d60d174eedc373b13" kindref="member">sord_node_get_datatype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="960"><highlight class="normal">{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>==<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>)<sp/>?<sp/>node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><ref refid="group__serd_1gafa75ae761bd7490db787b2f9e237595a" kindref="member">SerdNodeFlags</ref></highlight></codeline>
<codeline lineno="965" refid="group__sord_1ga46af5ce521ba3e558cc4bcfd3b61d4ec" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga46af5ce521ba3e558cc4bcfd3b61d4ec" kindref="member">sord_node_get_flags</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a945891f8a5762a5739fc6ad7e023b50c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="group__sord_1gae686e38224ff87bd0946b21e84fef1c4" refkind="member"><highlight class="normal"><ref refid="group__sord_1gae686e38224ff87bd0946b21e84fef1c4" kindref="member">sord_node_is_inline_object</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>==<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref>)<sp/>&amp;&amp;<sp/>(node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1aca9cba6462ce61f6db49069fb52df4e1" kindref="member">res</ref>.<ref refid="struct_sord_resource_metadata_1aa71e76a7af2f084bbd003cd991d06577" kindref="member">refs_as_obj</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="977"><highlight class="normal">sord_insert_node(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>key,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)</highlight></codeline>
<codeline lineno="978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1ga8ff29bfb81c64f449534790cac128b19" kindref="member">ZixStatus</ref><sp/>st<sp/><sp/><sp/>=<sp/><ref refid="group__zix_1ga23645626d84de15ad64d383f8c87cee7" kindref="member">zix_hash_insert</ref>(world-&gt;<ref refid="struct_sord_world_impl_1a4c4cdcef9843c6fc1f5b6762f847ea2c" kindref="member">nodes</ref>,<sp/>key,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;node);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(st)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__zix_1gga8ff29bfb81c64f449534790cac128b19a2c07af4b01d1fc96659ca300cd1bbcf7" kindref="member">ZIX_STATUS_EXISTS</ref>:</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref>;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__zix_1gga8ff29bfb81c64f449534790cac128b19aabb16c2bfb9258e19ecebb901845db50" kindref="member">ZIX_STATUS_SUCCESS</ref>:</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref><sp/>=<sp/>sord_strndup(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref><sp/>==<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(node-&gt;<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref>);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(!node);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>(world,<sp/><ref refid="group__serd_1gga104d544e48b6282ef2447bb3ac7c330da80c3ada89b84f63901565856dd56389b" kindref="member">SERD_ERR_INTERNAL</ref>,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>inserting<sp/>node<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>key-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!copy)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>buffer<sp/>we<sp/>would<sp/>have<sp/>copied<sp/>if<sp/>a<sp/>new<sp/>node<sp/>was<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)key-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref>.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">sord_new_uri_counted(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_chars,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__serd_1gaaddea01f53227c6d984a94e94164f603" kindref="member">serd_uri_string_has_scheme</ref>(<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>(world,<sp/><ref refid="group__serd_1gga104d544e48b6282ef2447bb3ac7c330da138e7b6b98684e9f408bb91e49bbb315" kindref="member">SERD_ERR_BAD_ARG</ref>,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;attempt<sp/>to<sp/>map<sp/>invalid<sp/>URI<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>intern<sp/>relative<sp/>URIs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref><sp/>key<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/>n_bytes,<sp/>n_chars,<sp/>0,<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref><sp/>},<sp/>1,<sp/>{<sp/>{<sp/>0<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_insert_node(world,<sp/>&amp;key,<sp/>copy);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1026" refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>node<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/>str);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_new_uri_counted(world,<sp/>str,<sp/>node.<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,<sp/>node.<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1033" refid="group__sord_1gaaeeb39f050f7e68aee42d79d5c4ce621" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaaeeb39f050f7e68aee42d79d5c4ce621" kindref="member">sord_new_relative_uri</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>base_str)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__serd_1gaaddea01f53227c6d984a94e94164f603" kindref="member">serd_uri_string_has_scheme</ref>(str))<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(world,<sp/>str);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_u_r_i" kindref="compound">SerdURI</ref><sp/><sp/>buri<sp/>=<sp/>SERD_URI_NULL;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="lib_2expat_8h_1a938e186c531ea86ae9adf3c0a649d8fc" kindref="member">base</ref><sp/>=<sp/><ref refid="group__serd_1ga4285ae7168a9fd4a9dfb5c8ccce66222" kindref="member">serd_node_new_uri_from_string</ref>(base_str,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;buri);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>node<sp/>=<sp/><ref refid="group__serd_1ga4285ae7168a9fd4a9dfb5c8ccce66222" kindref="member">serd_node_new_uri_from_string</ref>(str,<sp/>&amp;buri,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>ret<sp/>=<sp/>sord_new_uri_counted(</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>node.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>node.<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,<sp/>node.<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;base);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">sord_new_blank_counted(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_chars)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref><sp/>key<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/>n_bytes,<sp/>n_chars,<sp/>0,<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref><sp/>},<sp/>1,<sp/>{<sp/>{<sp/>0<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_insert_node(world,<sp/>&amp;key,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1063" refid="group__sord_1ga465202db49656e1c1df531391a75fc15" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga465202db49656e1c1df531391a75fc15" kindref="member">sord_new_blank</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>node<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/>str);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_new_blank_counted(world,<sp/>str,<sp/>node.<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,<sp/>node.<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">sord_new_literal_counted(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>datatype,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_bytes,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_chars,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1gafa75ae761bd7490db787b2f9e237595a" kindref="member">SerdNodeFlags</ref><sp/><sp/>flags,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><ref refid="namespacewaflib_1_1_tools_1_1qt4_1a1410657c327d97e1b283cb08a32121f4" kindref="member">lang</ref>)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref><sp/>key<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/>n_bytes,<sp/>n_chars,<sp/>flags,<sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref><sp/>},<sp/>1,<sp/>{<sp/>{<sp/>0<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>key.<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1a2c889b0ab837abfde6b82519d1cb04ab" kindref="member">datatype</ref><sp/>=<sp/>datatype;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(key.<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key.<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(key.<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>,<sp/>lang,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key.<ref refid="struct_sord_node_impl_1aabe7dd54ba242842ab3f0b3bc307c093" kindref="member">meta</ref>.<ref refid="struct_sord_node_impl_1a2b1bab2646fb3e4a17b24cb926df7884" kindref="member">lit</ref>.<ref refid="struct_sord_literal_metadata_1afb8e5cb000235b9949d174f438bab4da" kindref="member">lang</ref>));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_insert_node(world,<sp/>&amp;key,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1091" refid="group__sord_1gaf4a386554304e783089ba263d7537932" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaf4a386554304e783089ba263d7537932" kindref="member">sord_new_literal</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>datatype,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacewaflib_1_1_tools_1_1qt4_1a1410657c327d97e1b283cb08a32121f4" kindref="member">lang</ref>)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1gafa75ae761bd7490db787b2f9e237595a" kindref="member">SerdNodeFlags</ref><sp/>flags<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_chars<sp/>=<sp/><ref refid="group__serd_1ga0fa8f5d6cd20c3a255bd812c7c29a540" kindref="member">serd_strlen</ref>(str,<sp/>&amp;n_bytes,<sp/>&amp;flags);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_new_literal_counted(world,<sp/>datatype,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str,<sp/>n_bytes,<sp/>n_chars,<sp/>flags,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1103" refid="group__sord_1ga9367640305491801ab3bed714aeb5448" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga9367640305491801ab3bed714aeb5448" kindref="member">sord_node_from_serd_node</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/>sn,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/>datatype,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/><ref refid="namespacewaflib_1_1_tools_1_1qt4_1a1410657c327d97e1b283cb08a32121f4" kindref="member">lang</ref>)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sn)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>datatype_node<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sn-&gt;<ref refid="struct_serd_node_1ac415ada00df1883e7200cfa5c89b7fb9" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa028984ec3afe86cc5acc79df3b279b28" kindref="member">SERD_NOTHING</ref>:</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>:</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datatype_node<sp/>=<sp/><ref refid="group__sord_1ga9367640305491801ab3bed714aeb5448" kindref="member">sord_node_from_serd_node</ref>(</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>env,<sp/>datatype,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>),</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sord_new_literal_counted(</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datatype_node,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn-&gt;<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn-&gt;<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn-&gt;<ref refid="struct_serd_node_1a945891f8a5762a5739fc6ad7e023b50c" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lang-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world,<sp/>datatype_node);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>:</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__serd_1gaaddea01f53227c6d984a94e94164f603" kindref="member">serd_uri_string_has_scheme</ref>(sn-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_new_uri_counted(</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>sn-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>sn-&gt;<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,<sp/>sn-&gt;<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_u_r_i" kindref="compound">SerdURI</ref><sp/>base_uri;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga94b861ea65187556a473dcb668ab8667" kindref="member">serd_env_get_base_uri</ref>(env,<sp/>&amp;base_uri);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_u_r_i" kindref="compound">SerdURI</ref><sp/><sp/>abs_uri;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>abs_uri_node<sp/>=<sp/><ref refid="group__serd_1ga08700bbb56c7faaa1c4d979b922b839e" kindref="member">serd_node_new_uri_from_node</ref>(</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn,<sp/>&amp;base_uri,<sp/>&amp;abs_uri);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sord_new_uri_counted(world,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_uri_node.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_uri_node.<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_uri_node.<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;abs_uri_node);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa8a72fff2f6f94adeb11ccadf12c117d8" kindref="member">SERD_CURIE</ref>:<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_chunk" kindref="compound">SerdChunk</ref><sp/>uri_prefix;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_chunk" kindref="compound">SerdChunk</ref><sp/>uri_suffix;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__serd_1gac5a39f1201094a76d12b0bb509b8536f" kindref="member">serd_env_expand</ref>(env,<sp/>sn,<sp/>&amp;uri_prefix,<sp/>&amp;uri_suffix))<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>(world,<sp/><ref refid="group__serd_1gga104d544e48b6282ef2447bb3ac7c330dab48fe996907c25db18ab33e6f97255b3" kindref="member">SERD_ERR_BAD_CURIE</ref>,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>expand<sp/>CURIE<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>sn-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>uri_len<sp/>=<sp/>uri_prefix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref><sp/>+<sp/>uri_suffix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><sp/><sp/><sp/><sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)malloc(uri_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uri_prefix.<ref refid="struct_serd_chunk_1a1fb21c23d2c2eecac5cf57b10ac370f6" kindref="member">buf</ref>,<sp/>uri_prefix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf<sp/>+<sp/>uri_prefix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref>,<sp/>uri_suffix.<ref refid="struct_serd_chunk_1a1fb21c23d2c2eecac5cf57b10ac370f6" kindref="member">buf</ref>,<sp/>uri_suffix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[uri_len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sord_new_uri_counted(</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>buf,<sp/>uri_prefix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref><sp/>+<sp/>uri_suffix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uri_prefix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref><sp/>+<sp/>uri_suffix.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref>:</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sord_new_blank_counted(world,<sp/>sn-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>sn-&gt;<ref refid="struct_serd_node_1a64b294c408ae9387ffaa78a742196985" kindref="member">n_bytes</ref>,<sp/>sn-&gt;<ref refid="struct_serd_node_1ad4816721933bbd19f904ff67d3beb40e" kindref="member">n_chars</ref>);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*</highlight></codeline>
<codeline lineno="1174" refid="group__sord_1ga497e0859abcc9e6e39c5bcbfcc7c9f70" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga497e0859abcc9e6e39c5bcbfcc7c9f70" kindref="member">sord_node_to_serd_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>?<sp/>&amp;node-&gt;<ref refid="struct_sord_node_impl_1a92cfbbb49866b131b39ef8ac8b47a344" kindref="member">node</ref><sp/>:<sp/>&amp;SERD_NODE_NULL;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180" refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(<ref refid="struct_sord_world_impl" kindref="compound">SordWorld</ref>*<sp/>world,<sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--node-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_node_free_internal(world,<sp/>node);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*</highlight></codeline>
<codeline lineno="1193" refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>copy<sp/>=<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*)node;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++copy-&gt;<ref refid="struct_sord_node_impl_1ab08e121f0b247be9521510a88ad56a9f" kindref="member">refs</ref>;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">sord_add_to_index(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>tup,<sp/><ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref><sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="group__zix_1gabbf32f6bf3dd802fd36af7ac17cee87c" kindref="member">zix_tree_insert</ref>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[order],<sp/>tup,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209" refid="group__sord_1gaf302459de8a5474600b6f3e0eb4ea3b4" refkind="member"><highlight class="normal"><ref refid="group__sord_1gaf302459de8a5474600b6f3e0eb4ea3b4" kindref="member">sord_add</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>tup)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4f268c4bcd324fee3d7a2fe4fec30662" kindref="member">SORD_WRITE_LOG</ref>(</highlight><highlight class="stringliteral">&quot;Add<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" kindref="member">TUP_FMT</ref><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" kindref="member">TUP_FMT_ARGS</ref>(tup));</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tup[0]<sp/>||<sp/>!tup[1]<sp/>||<sp/>!tup[2])<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>(sord-&gt;<ref refid="struct_sord_model_impl_1ab9a23ed686b1386ea310a3192e6d9cc5" kindref="member">world</ref>,<sp/><ref refid="group__serd_1gga104d544e48b6282ef2447bb3ac7c330da138e7b6b98684e9f408bb91e49bbb315" kindref="member">SERD_ERR_BAD_ARG</ref>,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;attempt<sp/>to<sp/>add<sp/>quad<sp/>with<sp/>NULL<sp/>field\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>quad<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref>));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(quad,<sp/>tup,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref>));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>])<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sord_add_to_index(sord,<sp/>quad,<sp/>(<ref refid="sord_8c_1a4a73452c777904d8c172948a285fb76b" kindref="member">SordOrder</ref>)<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(i<sp/>==<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>index<sp/>coherency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(quad);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Quad<sp/>already<sp/>stored,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_add_quad_ref(sord,<sp/>tup[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>(<ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref>)i);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>++sord-&gt;<ref refid="struct_sord_model_impl_1aa077b03efcbee4ed3acee0e8c5316b5a" kindref="member">n_quads</ref>;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239" refid="group__sord_1ga15109faf500fa7d7e898e319bdb67c4c" refkind="member"><highlight class="normal"><ref refid="group__sord_1ga15109faf500fa7d7e898e319bdb67c4c" kindref="member">sord_remove</ref>(<ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/>sord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref><sp/>tup)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sord_8c_1a4f268c4bcd324fee3d7a2fe4fec30662" kindref="member">SORD_WRITE_LOG</ref>(</highlight><highlight class="stringliteral">&quot;Remove<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="sord_8c_1a4f028582975d03f1229b736bf45df3c9" kindref="member">TUP_FMT</ref><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="sord_8c_1ae5ba4c48c3093167848e87a2833ee399" kindref="member">TUP_FMT_ARGS</ref>(tup));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**<sp/>quad<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1a9237fc26918812bfb16ed5d1d8169724" kindref="member">NUM_ORDERS</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>])<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/>index_search(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>tup);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__zix_1ga6056d4aaa4f8492849f89179d9adf174" kindref="member">zix_tree_iter_is_end</ref>(cur))<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!quad)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quad<sp/>=<sp/>(<ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>**)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(cur);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__zix_1ga85f6980a8c620410a2e96e1926ed2411" kindref="member">zix_tree_remove</ref>(sord-&gt;<ref refid="struct_sord_model_impl_1ab455069a1384696a69e25a728dccb5aa" kindref="member">indices</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>cur);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>==<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>index<sp/>coherency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Quad<sp/>not<sp/>found,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>free(quad);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="sord_8c_1abf2b9ab4f1ef77e2813701e8679e48c2" kindref="member">TUP_LEN</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sord_drop_quad_ref(sord,<sp/>tup[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>(<ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref>)i);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>--sord-&gt;<ref refid="struct_sord_model_impl_1aa077b03efcbee4ed3acee0e8c5316b5a" kindref="member">n_quads</ref>;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c"/>
  </compounddef>
</doxygen>
