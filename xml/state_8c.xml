<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="state_8c" kind="file" language="C++">
    <compoundname>state.c</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="atom_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/atom.h</includes>
    <includes refid="forge_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/forge.h</includes>
    <includes refid="presets_8h" local="yes">lv2/lv2plug.in/ns/ext/presets/presets.h</includes>
    <includes refid="state_8h" local="yes">lv2/lv2plug.in/ns/ext/state/state.h</includes>
    <includes local="yes">lilv_config.h</includes>
    <includes refid="lilv__internal_8h" local="yes">lilv_internal.h</includes>
    <includes refid="sratom_8h" local="yes">sratom/sratom.h</includes>
    <incdepgraph>
      <node id="24673">
        <label>lilv_internal.h</label>
        <link refid="lilv__internal_8h"/>
        <childnode refid="24662" relation="include">
        </childnode>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24674" relation="include">
        </childnode>
        <childnode refid="24675" relation="include">
        </childnode>
        <childnode refid="24677" relation="include">
        </childnode>
        <childnode refid="24678" relation="include">
        </childnode>
        <childnode refid="24679" relation="include">
        </childnode>
        <childnode refid="24680" relation="include">
        </childnode>
        <childnode refid="24672" relation="include">
        </childnode>
        <childnode refid="24682" relation="include">
        </childnode>
      </node>
      <node id="24669">
        <label>lv2/lv2plug.in/ns/ext/presets/presets.h</label>
        <link refid="presets_8h"/>
      </node>
      <node id="24667">
        <label>stdbool.h</label>
      </node>
      <node id="24666">
        <label>stdarg.h</label>
      </node>
      <node id="24663">
        <label>lv2/lv2plug.in/ns/ext/atom/forge.h</label>
        <link refid="forge_8h"/>
        <childnode refid="24664" relation="include">
        </childnode>
        <childnode refid="24660" relation="include">
        </childnode>
        <childnode refid="24665" relation="include">
        </childnode>
        <childnode refid="24668" relation="include">
        </childnode>
        <childnode refid="24667" relation="include">
        </childnode>
      </node>
      <node id="24681">
        <label>zix/common.h</label>
      </node>
      <node id="24670">
        <label>lv2/lv2plug.in/ns/ext/state/state.h</label>
        <link refid="state_8h"/>
        <childnode refid="24662" relation="include">
        </childnode>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24671" relation="include">
        </childnode>
        <childnode refid="24667" relation="include">
        </childnode>
      </node>
      <node id="24676">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="24661" relation="include">
        </childnode>
      </node>
      <node id="24661">
        <label>stdint.h</label>
      </node>
      <node id="24674">
        <label>stdlib.h</label>
      </node>
      <node id="24657">
        <label>errno.h</label>
      </node>
      <node id="24683">
        <label>sratom/sratom.h</label>
        <link refid="sratom_8h"/>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24668" relation="include">
        </childnode>
        <childnode refid="24660" relation="include">
        </childnode>
        <childnode refid="24663" relation="include">
        </childnode>
        <childnode refid="24678" relation="include">
        </childnode>
        <childnode refid="24679" relation="include">
        </childnode>
      </node>
      <node id="24678">
        <label>serd/serd.h</label>
        <link refid="serd_8h"/>
        <childnode refid="24666" relation="include">
        </childnode>
        <childnode refid="24662" relation="include">
        </childnode>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24658" relation="include">
        </childnode>
        <childnode refid="24667" relation="include">
        </childnode>
      </node>
      <node id="24662">
        <label>stddef.h</label>
      </node>
      <node id="24664">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="24679">
        <label>sord/sord.h</label>
        <link refid="sord_8h"/>
        <childnode refid="24662" relation="include">
        </childnode>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24658" relation="include">
        </childnode>
        <childnode refid="24678" relation="include">
        </childnode>
        <childnode refid="24667" relation="include">
        </childnode>
      </node>
      <node id="24668">
        <label>lv2/lv2plug.in/ns/ext/urid/urid.h</label>
        <link refid="urid_8h"/>
        <childnode refid="24661" relation="include">
        </childnode>
      </node>
      <node id="24659">
        <label>string.h</label>
      </node>
      <node id="24675">
        <label>float.h</label>
        <link refid="float_8h"/>
        <childnode refid="24676" relation="include">
        </childnode>
      </node>
      <node id="24665">
        <label>lv2/lv2plug.in/ns/ext/atom/util.h</label>
        <link refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h"/>
        <childnode refid="24666" relation="include">
        </childnode>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24659" relation="include">
        </childnode>
        <childnode refid="24660" relation="include">
        </childnode>
        <childnode refid="24667" relation="include">
        </childnode>
      </node>
      <node id="24682">
        <label>lilv/lilv.h</label>
        <link refid="lilv_8h"/>
        <childnode refid="24666" relation="include">
        </childnode>
        <childnode refid="24662" relation="include">
        </childnode>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24658" relation="include">
        </childnode>
        <childnode refid="24671" relation="include">
        </childnode>
        <childnode refid="24668" relation="include">
        </childnode>
        <childnode refid="24667" relation="include">
        </childnode>
      </node>
      <node id="24672">
        <label>lilv_config.h</label>
      </node>
      <node id="24671">
        <label>lv2/lv2plug.in/ns/lv2core/lv2.h</label>
        <link refid="lv2_8h"/>
        <childnode refid="24661" relation="include">
        </childnode>
      </node>
      <node id="24656">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c</label>
        <link refid="state.c"/>
        <childnode refid="24657" relation="include">
        </childnode>
        <childnode refid="24658" relation="include">
        </childnode>
        <childnode refid="24659" relation="include">
        </childnode>
        <childnode refid="24660" relation="include">
        </childnode>
        <childnode refid="24663" relation="include">
        </childnode>
        <childnode refid="24669" relation="include">
        </childnode>
        <childnode refid="24670" relation="include">
        </childnode>
        <childnode refid="24672" relation="include">
        </childnode>
        <childnode refid="24673" relation="include">
        </childnode>
        <childnode refid="24683" relation="include">
        </childnode>
      </node>
      <node id="24660">
        <label>lv2/lv2plug.in/ns/ext/atom/atom.h</label>
        <link refid="atom_8h"/>
        <childnode refid="24661" relation="include">
        </childnode>
        <childnode refid="24662" relation="include">
        </childnode>
      </node>
      <node id="24658">
        <label>stdio.h</label>
      </node>
      <node id="24680">
        <label>zix/tree.h</label>
        <link refid="lilv_2src_2zix_2tree_8h"/>
        <childnode refid="24662" relation="include">
        </childnode>
        <childnode refid="24681" relation="include">
        </childnode>
      </node>
      <node id="24677">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_property" prot="public">Property</innerclass>
    <innerclass refid="struct_port_value" prot="public">PortValue</innerclass>
    <innerclass refid="struct_path_map" prot="public">PathMap</innerclass>
    <innerclass refid="struct_lilv_state_impl" prot="public">LilvStateImpl</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" prot="public" static="no">
        <name>USTR</name>
        <param><defname>s</defname></param>
        <initializer>((<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)(<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="30" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" prot="public" static="no">
        <name>SET_PSET</name>
        <param><defname>e</defname></param>
        <param><defname>p</defname></param>
        <param><defname>u</defname></param>
        <initializer><ref refid="group__serd_1gac41d573e81de34506463612e0c464889" kindref="member">serd_env_set_prefix_from_strings</ref>(e, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>, u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="633" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="state_8c_1af4a4ef80e8be2c1de79c3851ac546b14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int abs_cmp</definition>
        <argsstring>(const void *a, const void *b, void *user_data)</argsstring>
        <name>abs_cmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1aae8ce19f08e9d046776e044fe3c57b4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int rel_cmp</definition>
        <argsstring>(const void *a, const void *b, void *user_data)</argsstring>
        <name>rel_cmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="75" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a60065a1c46a9232bab8523a463ff0e19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int property_cmp</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>property_cmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="81" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a6d0fdf883da5d74c6ca3fbd072a47743" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int value_cmp</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>value_cmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="87" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a4f4023fff8e697a6877bd647b448b42d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void path_rel_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>path_rel_free</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="94" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a73942b734eabeab689ac8e64439e0527" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_port_value" kindref="compound">PortValue</ref> *</type>
        <definition>static PortValue* append_port_value</definition>
        <argsstring>(LilvState *state, const char *port_symbol, const void *value, uint32_t size, uint32_t type)</argsstring>
        <name>append_port_value</name>
        <param>
          <type><ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>port_symbol</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="102" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="102" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a0aa9ae943545f5b79c649d83049b4ca9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>static const char* lilv_state_rel2abs</definition>
        <argsstring>(const LilvState *state, const char *path)</argsstring>
        <name>lilv_state_rel2abs</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="123" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a829fb3ccec46d75694b98ccc56091b07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808" kindref="member">LV2_State_Status</ref></type>
        <definition>static LV2_State_Status store_callback</definition>
        <argsstring>(LV2_State_Handle handle, uint32_t key, const void *value, size_t size, uint32_t type, uint32_t flags)</argsstring>
        <name>store_callback</name>
        <param>
          <type><ref refid="state_8h_1a385b5b586c09dd03f1065cd0105daa6d" kindref="member">LV2_State_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="134" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="134" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1ac9b9a9ce7c0ae56ad39b88cdd5152d10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static const void* retrieve_callback</definition>
        <argsstring>(LV2_State_Handle handle, uint32_t key, size_t *size, uint32_t *type, uint32_t *flags)</argsstring>
        <name>retrieve_callback</name>
        <param>
          <type><ref refid="state_8h_1a385b5b586c09dd03f1065cd0105daa6d" kindref="member">LV2_State_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref> *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="163" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="163" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a8ca8016715a264fbe8823c9b7bf5e527" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lilv_state_has_path</definition>
        <argsstring>(const char *path, void *state)</argsstring>
        <name>lilv_state_has_path</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="185" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a971fc384a8bdef27fa4914ef3a324333" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* make_path</definition>
        <argsstring>(LV2_State_Make_Path_Handle handle, const char *path)</argsstring>
        <name>make_path</name>
        <param>
          <type><ref refid="state_8h_1a1bb823cc8cc428dc41af2952b5f3d765" kindref="member">LV2_State_Make_Path_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="191" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a451d941b78e79e27a24ef9a86bc0afd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* abstract_path</definition>
        <argsstring>(LV2_State_Map_Path_Handle handle, const char *abs_path)</argsstring>
        <name>abstract_path</name>
        <param>
          <type><ref refid="state_8h_1ac09389ce99f6350944d66d992c7d8a2a" kindref="member">LV2_State_Map_Path_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>abs_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="202" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="202" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a5a92b74588072584780db05423443623" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* absolute_path</definition>
        <argsstring>(LV2_State_Map_Path_Handle handle, const char *state_path)</argsstring>
        <name>absolute_path</name>
        <param>
          <type><ref refid="state_8h_1ac09389ce99f6350944d66d992c7d8a2a" kindref="member">LV2_State_Map_Path_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>state_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="261" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="261" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a8a0cbea783f2704341a1615862b4379a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> **</type>
        <definition>static const LV2_Feature** add_features</definition>
        <argsstring>(const LV2_Feature *const *features, const LV2_Feature *map, const LV2_Feature *make)</argsstring>
        <name>add_features</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>features</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *</type>
          <declname>make</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new features array which is <computeroutput>feature</computeroutput> added to <computeroutput>features</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="282" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="282" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a8d8a945f0e3767d711ca7b700f5a2e28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* absolute_dir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>absolute_dir</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="301" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a5644edf5c37efbe71a90fded2752a80f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>static const char* state_strerror</definition>
        <argsstring>(LV2_State_Status st)</argsstring>
        <name>state_strerror</name>
        <param>
          <type><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808" kindref="member">LV2_State_Status</ref></type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="310" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="310" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3893e8466d5db6005c5479bc2d1e86d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_instance</definition>
        <argsstring>(const LilvPlugin *plugin, LilvInstance *instance, LV2_URID_Map *map, const char *file_dir, const char *copy_dir, const char *link_dir, const char *save_dir, LilvGetPortValueFunc get_value, void *user_data, uint32_t flags, const LV2_Feature *const *features)</argsstring>
        <name>lilv_state_new_from_instance</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>file_dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>copy_dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>link_dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>save_dir</declname>
        </param>
        <param>
          <type><ref refid="group__lilv_1ga1b8564e04efdcebe374b7d6d5c6ae4e0" kindref="member">LilvGetPortValueFunc</ref></type>
          <declname>get_value</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new state snapshot from a plugin instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plugin</parametername>
</parameternamelist>
<parameterdescription>
<para>The plugin this state applies to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of <computeroutput>plugin</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>The map to use for mapping <ref refid="struct_u_r_is" kindref="compound">URIs</ref> in state.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of files created by the plugin earlier (or NULL). This is for hosts that support file creation at any time with state state:makePath. These files will be copied as necessary to <computeroutput>copy_dir</computeroutput> and not be referred to directly in state (a temporary directory is appropriate).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of copies of files in <computeroutput>file_dir</computeroutput> (or NULL). This directory will have the same structure as <computeroutput>file_dir</computeroutput> but with possibly modified file names to distinguish different revisions. If you only care about saving one state snapshot, it can be the same as <computeroutput>save_dir</computeroutput>. Plugin state will refer to files in this directory.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>save_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of files created by plugin during save (or NULL). If the state will be saved, this should be the bundle directory later passed to lilv_state_save.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_function" kindref="compound">Function</ref> to get port values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to <computeroutput>get_value</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of links to external files (or NULL). A link will be made in this directory to any external files referred to in plugin state. In turn, links will be created in the save directory to these links (e.g. save_dir/file =&gt; link_dir/file =&gt; /foo/bar/file). This allows many state snapshots to share a single link to an external file, so archival (e.g. with tar -h) will not create several copies of the file. If this is not required, it can be the same as save_dir.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitwise OR of LV2_State_Flags values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>Features to pass <ref refid="struct___l_v2___state___interface_1ae564742663a6d908d9745c9eb8bdb347" kindref="member">LV2_State_Interface.save()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new LilvState which must be freed with <ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free()</ref>.</para></simplesect>
This function may be called simultaneously with any instance function (except discovery functions) unless the threading class of that function explicitly disallows this.</para><para>To support advanced file functionality, there are several directory parameters. Simple hosts that only wish to save a single plugins state once may simply use the same directory for all of them (or pass NULL to not support files at all). The multiple parameters are necessary to support saving an instances state many times while avoiding any duplication of data.</para><para>If supported (via state:makePath passed to <ref refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" kindref="member">LV2_Descriptor::instantiate()</ref>), <computeroutput>file_dir</computeroutput> should be the directory where any files created by the plugin (not during save time, e.g. during instantiation) are stored. These files will be copied to preserve their state at this time.plugin-created files are stored. <ref refid="namespace_lilv" kindref="compound">Lilv</ref> will assume any files within this directory (recursively) are created by the plugin and all other files are immutable. Note that this function does not save the state, use <ref refid="group__lilv_1gae38a5ed3424417b909163d3b64c1edb5" kindref="member">lilv_state_save()</ref> for that.</para><para>See <ulink url="http://lv2plug.in/ns/ext/state/state.h">state.h</ulink> from the LV2 <ref refid="struct_state" kindref="compound">State</ref> extension for details on the <computeroutput>flags</computeroutput> and <computeroutput>features</computeroutput> parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="323" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="323" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac6d0274e7176231852d949ebd1b8f0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_state_restore</definition>
        <argsstring>(const LilvState *state, LilvInstance *instance, LilvSetPortValueFunc set_value, void *user_data, uint32_t flags, const LV2_Feature *const *features)</argsstring>
        <name>lilv_state_restore</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="group__lilv_1ga2e4d764503e2720148d87c29c1972dc3" kindref="member">LilvSetPortValueFunc</ref></type>
          <declname>set_value</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restore a plugin instance from a state snapshot. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to restore, which must apply to the correct plugin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of the plugin <computeroutput>state</computeroutput> applies to, or NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to set a port value (may be NULL). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to <computeroutput>set_value</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitwise OR of LV2_State_Flags values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>Features to pass <ref refid="struct___l_v2___state___interface_1af1b48ea50175bfef63d4dd35d09d90b8" kindref="member">LV2_State_Interface.restore()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will set all the properties of <computeroutput>instance</computeroutput>, if given, to the values stored in <computeroutput>state</computeroutput>. If <computeroutput>set_value</computeroutput> is provided, it will be called (with the given <computeroutput>user_data</computeroutput>) to restore each port value, otherwise the host must restore the port values itself (using lilv_state_get_port_value) in order to completely restore <computeroutput>state</computeroutput>.</para><para>If the state has properties and <computeroutput>instance</computeroutput> is given, this function is in the &quot;instantiation&quot; threading class, i.e. it MUST NOT be called simultaneously with any function on the same plugin instance. If the state has no properties, only port values are set via <computeroutput>set_value</computeroutput>.</para><para>See <ulink url="http://lv2plug.in/ns/ext/state/state.h">state.h</ulink> from the LV2 <ref refid="struct_state" kindref="compound">State</ref> extension for details on the <computeroutput>flags</computeroutput> and <computeroutput>features</computeroutput> parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="399" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="399" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1afe1ce7c7af407bb1f5af6d5f6f407f56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>static LilvState* new_state_from_model</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, SordModel *model, const SordNode *node, const char *dir)</argsstring>
        <name>new_state_from_model</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="434" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="434" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga7eeb94a9e78b459177e84a6251c8e2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_world</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, const LilvNode *node)</argsstring>
        <name>lilv_state_new_from_world</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a state snapshot from the world RDF model. This function can be used to load the default state of a plugin by passing the plugin URI as the <computeroutput>subject</computeroutput> parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject of the state description (e.g. a preset URI). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new LilvState which must be freed with <ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free()</ref>, or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="574" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="574" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gadb05ef8df3f51aff5b28d83e5d7fd097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_file</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, const LilvNode *subject, const char *path)</argsstring>
        <name>lilv_state_new_from_file</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a state snapshot from a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject of the state description (e.g. a preset URI). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the file containing the state description. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new LilvState which must be freed with <ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free()</ref>.</para></simplesect>
If <computeroutput>subject</computeroutput> is NULL, it is taken to be the URI of the file (i.e. &quot;&lt;&gt;&quot; in Turtle).</para><para>This function parses the file separately to create the state, it does not parse the file into the world model, i.e. the returned state is the only new memory consumed once this function returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="591" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="591" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1abaed0c19eb10baee0fd65dec66eab28f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void set_prefixes</definition>
        <argsstring>(SerdEnv *env)</argsstring>
        <name>set_prefixes</name>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="631" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="631" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga289d9bb5c189f085fc4bd938a9c0d4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_string</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, const char *str)</argsstring>
        <name>lilv_state_new_from_string</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a state snapshot from a string made by <ref refid="group__lilv_1ga98689483de36ea817380b1960bf44458" kindref="member">lilv_state_to_string()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="644" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="644" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a004386447b5daab88b47b2206f7404a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__serd_1gaaaa09490e19dff0180251f1e2524e6f0" kindref="member">SerdWriter</ref> *</type>
        <definition>static SerdWriter* ttl_writer</definition>
        <argsstring>(SerdSink sink, void *stream, const SerdNode *base, SerdEnv **new_env)</argsstring>
        <name>ttl_writer</name>
        <param>
          <type><ref refid="group__serd_1ga84861f1df2f4d3323cb0113dae4ced12" kindref="member">SerdSink</ref></type>
          <declname>sink</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> **</type>
          <declname>new_env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="675" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="675" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1aa0b396d8f216acdc0f0964e68c2f27ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__serd_1gaaaa09490e19dff0180251f1e2524e6f0" kindref="member">SerdWriter</ref> *</type>
        <definition>static SerdWriter* ttl_file_writer</definition>
        <argsstring>(FILE *fd, const SerdNode *node, SerdEnv **env)</argsstring>
        <name>ttl_file_writer</name>
        <param>
          <type>FILE *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> **</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="698" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="698" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a6b475ce629bacfff61a5b1c0c6bcad69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int add_state_to_manifest</definition>
        <argsstring>(const LilvNode *plugin_uri, const char *manifest_path, const char *state_uri, const char *state_path)</argsstring>
        <name>add_state_to_manifest</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>plugin_uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>manifest_path</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>state_uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>state_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="713" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="713" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a9876c696a175928f35ec474220c0dbc8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool link_exists</definition>
        <argsstring>(const char *path, void *data)</argsstring>
        <name>link_exists</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="764" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="764" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a20184b0c77bdf76d148d427e51ef82d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int lilv_state_write</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, LV2_URID_Unmap *unmap, const LilvState *state, SerdWriter *writer, const char *uri, const char *dir)</argsstring>
        <name>lilv_state_write</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a23cd7da781ba055d6a1362a320c1d451" kindref="member">LV2_URID_Unmap</ref> *</type>
          <declname>unmap</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaaaa09490e19dff0180251f1e2524e6f0" kindref="member">SerdWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="777" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="777" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="state_8c_1a53b4dabcfdad03987b45ac44530a9784" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lilv_state_make_links</definition>
        <argsstring>(const LilvState *state, const char *dir)</argsstring>
        <name>lilv_state_make_links</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="887" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="887" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae38a5ed3424417b909163d3b64c1edb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_state_save</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, LV2_URID_Unmap *unmap, const LilvState *state, const char *uri, const char *dir, const char *filename)</argsstring>
        <name>lilv_state_save</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a23cd7da781ba055d6a1362a320c1d451" kindref="member">LV2_URID_Unmap</ref> *</type>
          <declname>unmap</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save state to a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unmap</parametername>
</parameternamelist>
<parameterdescription>
<para>URID unmapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_state" kindref="compound">State</ref> to save. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>URI of state, may be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the bundle directory to save into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the state file relative to <computeroutput>dir</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
The format of state on disk is compatible with that defined in the LV2 preset extension, i.e. this function may be used to save presets which can be loaded by any host.</para><para>If <computeroutput>uri</computeroutput> is NULL, the preset URI will be a file URI, but the bundle can safely be moved (i.e. the state file will use &quot;&lt;&gt;&quot; as the subject). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="929" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="929" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga98689483de36ea817380b1960bf44458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> char *</type>
        <definition>LILV_API char* lilv_state_to_string</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, LV2_URID_Unmap *unmap, const LilvState *state, const char *uri, const char *base_uri)</argsstring>
        <name>lilv_state_to_string</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a23cd7da781ba055d6a1362a320c1d451" kindref="member">LV2_URID_Unmap</ref> *</type>
          <declname>unmap</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>base_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save state to a string. This function does not use the filesystem.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unmap</parametername>
</parameternamelist>
<parameterdescription>
<para>URID unmapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to serialize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>URI for the state description (mandatory). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>Base URI for serialisation. Unless you know what you are doing, pass NULL for this, otherwise the state may not be restorable via <ref refid="group__lilv_1ga289d9bb5c189f085fc4bd938a9c0d4cb" kindref="member">lilv_state_new_from_string()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="984" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="984" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_state_free</definition>
        <argsstring>(LilvState *state)</argsstring>
        <name>lilv_state_free</name>
        <param>
          <type><ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="1009" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1009" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae93aca68826dac502cd623e7d900a784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_state_equals</definition>
        <argsstring>(const LilvState *a, const LilvState *b)</argsstring>
        <name>lilv_state_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>a</computeroutput> is equivalent to <computeroutput>b</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="1034" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1034" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga50d018031023edef372722c24260fdd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_state_get_num_properties</definition>
        <argsstring>(const LilvState *state)</argsstring>
        <name>lilv_state_get_num_properties</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of properties in <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="1077" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1077" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga4552844be668aeecfa3f11f326392877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_state_get_plugin_uri</definition>
        <argsstring>(const LilvState *state)</argsstring>
        <name>lilv_state_get_plugin_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of the plugin <computeroutput>state</computeroutput> applies to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="1083" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1083" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga7effbd89fcd049e29d74da1769e35f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_state_get_label</definition>
        <argsstring>(const LilvState *state)</argsstring>
        <name>lilv_state_get_label</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the label of <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="1089" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1089" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga93dc2196595317603aad990804448dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_state_set_label</definition>
        <argsstring>(LilvState *state, const char *label)</argsstring>
        <name>lilv_state_set_label</name>
        <param>
          <type><ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the label of <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" line="1095" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1095" bodyend="1100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2007-2014<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atom_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/atom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="forge_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/forge.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="presets_8h" kindref="compound">lv2/lv2plug.in/ns/ext/presets/presets.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state_8h" kindref="compound">lv2/lv2plug.in/ns/ext/state/state.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lilv_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lilv__internal_8h" kindref="compound">lilv_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sratom_8h" kindref="compound">sratom/sratom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USTR(s)<sp/>((const<sp/>uint8_t*)(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="struct_property" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33" refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="struct_property_1a71e1b4425e7276a3861ff902b066df8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_property_1a71e1b4425e7276a3861ff902b066df8d" kindref="member">key</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="struct_property_1ad71ec64f7699f9b7801e54f57ad2aa96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_property_1ad71ec64f7699f9b7801e54f57ad2aa96" kindref="member">flags</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal">}<sp/><ref refid="struct_property" kindref="compound">Property</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="struct_port_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41" refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44" refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" kindref="member">type</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="struct_path_map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48" refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="49" refid="struct_path_map_1aed8f9263efdca8b96ea67526ae9d8280" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_path_map_1aed8f9263efdca8b96ea67526ae9d8280" kindref="member">rel</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}<sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="struct_lilv_state_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_lilv_state_impl" kindref="compound">LilvStateImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="54" refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="struct_lilv_state_impl_1aca646616a6799ac3dd9d72fcf246cba3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1aca646616a6799ac3dd9d72fcf246cba3" kindref="member">file_dir</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56" refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="struct_lilv_state_impl_1a7ddc78d3d2e8ab2cd72f339c65e219dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a7ddc78d3d2e8ab2cd72f339c65e219dc" kindref="member">link_dir</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*<sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60" refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*<sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" kindref="member">rel2abs</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_property" kindref="compound">Property</ref>*<sp/><sp/><ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*<sp/><ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63" refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" kindref="member">atom_Path</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">abs_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*)a)-&gt;abs,<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*)b)-&gt;abs);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">rel_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*)<ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>)-&gt;rel,<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*)<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)-&gt;rel);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">property_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_property" kindref="compound">Property</ref>*)<ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>)-&gt;key<sp/>-<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_property" kindref="compound">Property</ref>*)b)-&gt;key;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">value_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*)<ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>)-&gt;symbol,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*)b)-&gt;symbol);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">path_rel_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>free(((<ref refid="struct_path_map" kindref="compound">PathMap</ref>*)ptr)-&gt;abs);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>free(((<ref refid="struct_path_map" kindref="compound">PathMap</ref>*)ptr)-&gt;rel);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*</highlight></codeline>
<codeline lineno="102"><highlight class="normal">append_port_value(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/><sp/>state,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>port_symbol,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref><sp/>=<sp/>(<ref refid="struct_port_value" kindref="compound">PortValue</ref>*)realloc(</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>,<sp/>(++state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_port_value" kindref="compound">PortValue</ref>));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*<sp/>pv<sp/>=<sp/>&amp;state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(port_symbol);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref><sp/><sp/>=<sp/>malloc(<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;<ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref><sp/><sp/><sp/>=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;<ref refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" kindref="member">type</ref><sp/><sp/><sp/>=<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(pv-&gt;<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>,<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>,<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pv;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="123"><highlight class="normal">lilv_state_rel2abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/><sp/>iter<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref><sp/>key<sp/><sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)path<sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" kindref="member">rel2abs</ref><sp/>&amp;&amp;<sp/>!<ref refid="group__zix_1gac560c0fe28be90f9c00f9c4c15095c23" kindref="member">zix_tree_find</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" kindref="member">rel2abs</ref>,<sp/>&amp;key,<sp/>&amp;iter))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter))-&gt;abs;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808" kindref="member">LV2_State_Status</ref></highlight></codeline>
<codeline lineno="134"><highlight class="normal">store_callback(<ref refid="state_8h_1a385b5b586c09dd03f1065cd0105daa6d" kindref="member">LV2_State_Handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)handle;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref><sp/>=<sp/>(<ref refid="struct_property" kindref="compound">Property</ref>*)realloc(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>,<sp/>(++state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_property" kindref="compound">Property</ref>));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_property" kindref="compound">Property</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>prop<sp/>=<sp/>&amp;state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>[state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>&amp;<sp/><ref refid="state_8h_1a7f0856234c1a4b2a61b0531aefe7d13aab58be92bf542b837fcb05c1d6fd3702e" kindref="member">LV2_STATE_IS_POD</ref>)<sp/>||<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref><sp/>==<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" kindref="member">atom_Path</ref>)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref><sp/>=<sp/>malloc(<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(prop-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>,<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>,<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1a770b88858f9bd89ad021b31936469c51" kindref="member">LILV_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Storing<sp/>non-POD<sp/>value\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref><sp/><sp/>=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="struct_property_1a71e1b4425e7276a3861ff902b066df8d" kindref="member">key</ref><sp/><sp/><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref><sp/><sp/>=<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="struct_property_1ad71ec64f7699f9b7801e54f57ad2aa96" kindref="member">flags</ref><sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808a299116171940b525c3f76cd1c173242f" kindref="member">LV2_STATE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="163"><highlight class="normal">retrieve_callback(<ref refid="state_8h_1a385b5b586c09dd03f1065cd0105daa6d" kindref="member">LV2_State_Handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)handle;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_property" kindref="compound">Property</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search_key<sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0,<sp/>key,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_property" kindref="compound">Property</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>prop<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct_property" kindref="compound">Property</ref>*)bsearch(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;search_key,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_property" kindref="compound">Property</ref>),<sp/>property_cmp);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref><sp/><sp/>=<sp/>prop-&gt;<ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref><sp/><sp/>=<sp/>prop-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*flags<sp/>=<sp/>prop-&gt;<ref refid="struct_property_1ad71ec64f7699f9b7801e54f57ad2aa96" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prop-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">lilv_state_has_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>state)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lilv_state_rel2abs((<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)state,<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)<sp/>!=<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="191"><highlight class="normal">make_path(<ref refid="state_8h_1a1bb823cc8cc428dc41af2952b5f3d765" kindref="member">LV2_State_Make_Path_Handle</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state<sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)handle;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lilv__internal_8h_1aba4463b5381412230c68b75a5d6221e4" kindref="member">lilv_path_exists</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1aef86368303b7016039a60c620e3ceb00" kindref="member">lilv_mkdir_p</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>,<sp/>path);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="202"><highlight class="normal">abstract_path(<ref refid="state_8h_1ac09389ce99f6350944d66d992c7d8a2a" kindref="member">LV2_State_Map_Path_Handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_path)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/><sp/><sp/><sp/>state<sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)handle;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_path<sp/>=<sp/><ref refid="lilv__internal_8h_1aadb67668361433b8da2195c97ec3ec99" kindref="member">lilv_realpath</ref>(abs_path);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref><sp/>key<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)real_path,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs_path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(abs_path);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__zix_1gac560c0fe28be90f9c00f9c4c15095c23" kindref="member">zix_tree_find</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref>,<sp/>&amp;key,<sp/>&amp;iter))<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>mapped<sp/>path<sp/>in<sp/>a<sp/>previous<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*<sp/>pm<sp/>=<sp/>(<ref refid="struct_path_map" kindref="compound">PathMap</ref>*)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(iter);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(real_path);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(pm-&gt;<ref refid="struct_path_map_1aed8f9263efdca8b96ea67526ae9d8280" kindref="member">rel</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lilv__internal_8h_1ac3a41ae320d2f8042323ff0d398f4816" kindref="member">lilv_path_is_child</ref>(real_path,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>))<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>in<sp/>state<sp/>directory<sp/>(loaded,<sp/>or<sp/>created<sp/>by<sp/>plugin<sp/>during<sp/>save</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="lilv__internal_8h_1a5f5eb730a98794d99f9a29ccff45908d" kindref="member">lilv_path_relative_to</ref>(real_path,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lilv__internal_8h_1ac3a41ae320d2f8042323ff0d398f4816" kindref="member">lilv_path_is_child</ref>(real_path,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aca646616a6799ac3dd9d72fcf246cba3" kindref="member">file_dir</ref>))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>created<sp/>by<sp/>plugin<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="lilv__internal_8h_1a5f5eb730a98794d99f9a29ccff45908d" kindref="member">lilv_path_relative_to</ref>(real_path,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aca646616a6799ac3dd9d72fcf246cba3" kindref="member">file_dir</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lilv__internal_8h_1aba4463b5381412230c68b75a5d6221e4" kindref="member">lilv_path_exists</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1aef86368303b7016039a60c620e3ceb00" kindref="member">lilv_mkdir_p</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cpath<sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>,<sp/>path);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>copy<sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1abcc600595668f06a10bfb18897032ac7" kindref="member">lilv_get_latest_copy</ref>(real_path,<sp/>cpath);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!copy<sp/>||<sp/>!<ref refid="lilv__internal_8h_1ae8208cca70baceca3c14c16cc2caa810" kindref="member">lilv_file_equals</ref>(real_path,<sp/>copy))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>recent<sp/>enough<sp/>copy,<sp/>make<sp/>a<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/><ref refid="lilv__internal_8h_1a907cb5002dff831d0641a66a96179bdd" kindref="member">lilv_find_free_path</ref>(cpath,<sp/><ref refid="lilv__internal_8h_1aba4463b5381412230c68b75a5d6221e4" kindref="member">lilv_path_exists</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1aae7117c1d45bef879126f8b368abf6f6" kindref="member">lilv_copy_file</ref>(real_path,<sp/>copy);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(real_path);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(cpath);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Refer<sp/>to<sp/>the<sp/>latest<sp/>copy<sp/>in<sp/>plugin<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_path<sp/>=<sp/>copy;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>path<sp/>outside<sp/>state<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>slash<sp/>=<sp/>strrchr(real_path,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref><sp/><sp/>=<sp/>slash<sp/>?<sp/>(slash<sp/>+<sp/>1)<sp/>:<sp/>real_path;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>free<sp/>name<sp/>in<sp/>the<sp/>(virtual)<sp/>state<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="lilv__internal_8h_1a907cb5002dff831d0641a66a96179bdd" kindref="member">lilv_find_free_path</ref>(name,<sp/>lilv_state_has_path,<sp/>state);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>record<sp/>to<sp/>path<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*<sp/>pm<sp/>=<sp/>(<ref refid="struct_path_map" kindref="compound">PathMap</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_path_map" kindref="compound">PathMap</ref>));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref><sp/>=<sp/>real_path;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>pm-&gt;<ref refid="struct_path_map_1aed8f9263efdca8b96ea67526ae9d8280" kindref="member">rel</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(path);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1gabbf32f6bf3dd802fd36af7ac17cee87c" kindref="member">zix_tree_insert</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref>,<sp/>pm,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__zix_1gabbf32f6bf3dd802fd36af7ac17cee87c" kindref="member">zix_tree_insert</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" kindref="member">rel2abs</ref>,<sp/>pm,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="261"><highlight class="normal">absolute_path(<ref refid="state_8h_1ac09389ce99f6350944d66d992c7d8a2a" kindref="member">LV2_State_Map_Path_Handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_path)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state<sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)handle;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lilv__internal_8h_1a5b2cd741b76087823c6e9c5903da4325" kindref="member">lilv_path_is_absolute</ref>(state_path))<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Absolute<sp/>path,<sp/>return<sp/>identical<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(state_path);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Relative<sp/>path<sp/>inside<sp/>state<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>,<sp/>state_path);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>State<sp/>has<sp/>not<sp/>been<sp/>saved,<sp/>unmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(lilv_state_rel2abs(state,<sp/>state_path));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>**</highlight></codeline>
<codeline lineno="282"><highlight class="normal">add_features(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>features,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>*<sp/><ref refid="structmap" kindref="compound">map</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>*<sp/>make)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_features<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>features<sp/>&amp;&amp;<sp/>features[n_features];<sp/>++n_features)<sp/>{}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>**<sp/>ret<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>**)calloc(</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_features<sp/>+<sp/>3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>*));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(features)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ret,<sp/>features,<sp/>n_features<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>*));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>ret[n_features]<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="charmaps_8h_1aafbcba50bf1822ffeab60f9f509e6237" kindref="member">map</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>ret[n_features<sp/>+<sp/>1]<sp/>=<sp/>make;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="301"><highlight class="normal">absolute_dir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>abs_path<sp/>=<sp/><ref refid="lilv__internal_8h_1a12938cb06b918c214d427b9397878429" kindref="member">lilv_path_absolute</ref>(path);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a938e186c531ea86ae9adf3c0a649d8fc" kindref="member">base</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(abs_path,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>free(abs_path);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a938e186c531ea86ae9adf3c0a649d8fc" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="310"><highlight class="normal">state_strerror(<ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808" kindref="member">LV2_State_Status</ref><sp/>st)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(st)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808a299116171940b525c3f76cd1c173242f" kindref="member">LV2_STATE_SUCCESS</ref>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Completed<sp/>successfully&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808a51becc9f1eee0594e3d394e557fefc64" kindref="member">LV2_STATE_ERR_BAD_TYPE</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808ade165256e6f08e4dbf2ba4b762cab19d" kindref="member">LV2_STATE_ERR_BAD_FLAGS</ref>:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>flags&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808a494a8d05349a7468d104b14dc5468d24" kindref="member">LV2_STATE_ERR_NO_FEATURE</ref>:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>features&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808adc239465e4cebfa7700bc18fd7ab9650" kindref="member">LV2_STATE_ERR_NO_PROPERTY</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>property&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*</highlight></codeline>
<codeline lineno="323" refid="group__lilv_1ga3893e8466d5db6005c5479bc2d1e86d2" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga3893e8466d5db6005c5479bc2d1e86d2" kindref="member">lilv_state_new_from_instance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelv2docgen_1afc728ef34e814436971ab700cb7db3de" kindref="member">plugin</ref>,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_dir,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_dir,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link_dir,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_dir,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1ga1b8564e04efdcebe374b7d6d5c6ae4e0" kindref="member">LilvGetPortValueFunc</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_value,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>features)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>**<sp/>sfeatures<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_header_1accd62b6164586c0c3c128d3394ef3160" kindref="member">world</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>plugin-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(state,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref><sp/>=<sp/><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(<ref refid="group__lilv_1gaa462f4594d361e5a79e56f70c1f04d02" kindref="member">lilv_plugin_get_uri</ref>(plugin));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__zix_1ga72db646eab3fe826b87f97e02cf3bbd5" kindref="member">zix_tree_new</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>abs_cmp,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>path_rel_free);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" kindref="member">rel2abs</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__zix_1ga72db646eab3fe826b87f97e02cf3bbd5" kindref="member">zix_tree_new</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>rel_cmp,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aca646616a6799ac3dd9d72fcf246cba3" kindref="member">file_dir</ref><sp/><sp/><sp/>=<sp/>file_dir<sp/>?<sp/>absolute_dir(file_dir)<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref><sp/><sp/><sp/>=<sp/>copy_dir<sp/>?<sp/>absolute_dir(copy_dir)<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a7ddc78d3d2e8ab2cd72f339c65e219dc" kindref="member">link_dir</ref><sp/><sp/><sp/>=<sp/>link_dir<sp/>?<sp/>absolute_dir(link_dir)<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>save_dir<sp/>?<sp/>absolute_dir(save_dir)<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" kindref="member">atom_Path</ref><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1aced2e05e2e5fa9688fa1c96fc7f590f7" kindref="member">LV2_ATOM__Path</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___state___map___path" kindref="compound">LV2_State_Map_Path</ref><sp/><sp/>pmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>state,<sp/>abstract_path,<sp/>absolute_path<sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmap_feature<sp/><sp/>=<sp/>{<sp/><ref refid="state_8h_1a9d4aab8379a2162c814a312c8b39db49" kindref="member">LV2_STATE__mapPath</ref>,<sp/>&amp;pmap<sp/>};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___state___make___path" kindref="compound">LV2_State_Make_Path</ref><sp/>pmake<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>state,<sp/>make_path<sp/>};</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmake_feature<sp/>=<sp/>{<sp/><ref refid="state_8h_1ab4d3f5c5795130d37469e0fb5e484d29" kindref="member">LV2_STATE__makePath</ref>,<sp/>&amp;pmake<sp/>};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>features<sp/>=<sp/>sfeatures<sp/>=<sp/>add_features(features,<sp/>&amp;pmap_feature,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_dir<sp/>?<sp/>&amp;pmake_feature<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>port<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_value)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>lv2_ControlPort<sp/>=<sp/><ref refid="group__lilv_1gaadc0a9397da39725b2aa7030dfea7786" kindref="member">lilv_new_uri</ref>(world,<sp/><ref refid="lilv_8h_1aab31bbf54e35c8382956b9dff688c175" kindref="member">LILV_URI_CONTROL_PORT</ref>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>lv2_InputPort<sp/><sp/><sp/>=<sp/><ref refid="group__lilv_1gaadc0a9397da39725b2aa7030dfea7786" kindref="member">lilv_new_uri</ref>(world,<sp/><ref refid="lilv_8h_1ab38197fa902f3f57551bdcb749cb8cd8" kindref="member">LILV_URI_INPUT_PORT</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>plugin-&gt;<ref refid="struct_lilv_plugin_impl_1ac0b1c43adf9e1d65c27a9a603d62615e" kindref="member">num_ports</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>plugin-&gt;<ref refid="struct_lilv_plugin_impl_1ab047415ad765783ae57fbe31cdf9249e" kindref="member">ports</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__lilv_1ga67b641e2002e6b68b40bd8f7049201cd" kindref="member">lilv_port_is_a</ref>(plugin,<sp/>port,<sp/>lv2_ControlPort)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="group__lilv_1ga67b641e2002e6b68b40bd8f7049201cd" kindref="member">lilv_port_is_a</ref>(plugin,<sp/>port,<sp/>lv2_InputPort))<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sym<sp/><sp/><sp/>=<sp/><ref refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" kindref="member">lilv_node_as_string</ref>(port-&gt;<ref refid="struct_lilv_port_impl_1a5c5c752bd0daa332344f246dab05065c" kindref="member">symbol</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>get_value(sym,<sp/>user_data,<sp/>&amp;size,<sp/>&amp;type);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_port_value(state,<sp/>sym,<sp/>value,<sp/>size,<sp/>type);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(lv2_ControlPort);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(lv2_InputPort);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___descriptor" kindref="compound">LV2_Descriptor</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_export_p_c_m_8cpp_1a717c8108dd6ce1ecc369d9bac2f471f2" kindref="member">desc</ref><sp/><sp/>=<sp/>instance-&gt;lv2_descriptor;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___state___interface" kindref="compound">LV2_State_Interface</ref>*<sp/>iface<sp/>=<sp/>(desc-&gt;<ref refid="struct___l_v2___descriptor_1a36da63991720b8ed2990d666b8369669" kindref="member">extension_data</ref>)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___state___interface" kindref="compound">LV2_State_Interface</ref>*)desc-&gt;<ref refid="struct___l_v2___descriptor_1a36da63991720b8ed2990d666b8369669" kindref="member">extension_data</ref>(<ref refid="state_8h_1a544a2530a61dae44d5d343f586867ff6" kindref="member">LV2_STATE__interface</ref>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iface)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="state_8h_1afb5cc1033410d51fdcdbfdd09fc7d808" kindref="member">LV2_State_Status</ref><sp/>st<sp/>=<sp/>iface-&gt;<ref refid="struct___l_v2___state___interface_1ae564742663a6d908d9745c9eb8bdb347" kindref="member">save</ref>(</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance-&gt;lv2_handle,<sp/>store_callback,<sp/>state,<sp/>flags,<sp/>features);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>saving<sp/>plugin<sp/>state:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>state_strerror(st));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_property" kindref="compound">Property</ref>),<sp/>property_cmp);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_port_value" kindref="compound">PortValue</ref>),<sp/>value_cmp);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sfeatures);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="group__lilv_1gac6d0274e7176231852d949ebd1b8f0b6" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gac6d0274e7176231852d949ebd1b8f0b6" kindref="member">lilv_state_restore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1ga2e4d764503e2720148d87c29c1972dc3" kindref="member">LilvSetPortValueFunc</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_value,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>features)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___state___map___path" kindref="compound">LV2_State_Map_Path</ref><sp/>map_path<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)state,<sp/>abstract_path,<sp/>absolute_path<sp/>};</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref><sp/>map_feature<sp/>=<sp/>{<sp/><ref refid="state_8h_1a9d4aab8379a2162c814a312c8b39db49" kindref="member">LV2_STATE__mapPath</ref>,<sp/>&amp;map_path<sp/>};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___feature" kindref="compound">LV2_Feature</ref>**<sp/>sfeatures<sp/>=<sp/>add_features(features,<sp/>&amp;map_feature,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___descriptor" kindref="compound">LV2_Descriptor</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_export_p_c_m_8cpp_1a717c8108dd6ce1ecc369d9bac2f471f2" kindref="member">desc</ref><sp/><sp/>=<sp/>instance<sp/>?<sp/>instance-&gt;lv2_descriptor<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___state___interface" kindref="compound">LV2_State_Interface</ref>*<sp/>iface<sp/>=<sp/>(desc<sp/>&amp;&amp;<sp/>desc-&gt;<ref refid="struct___l_v2___descriptor_1a36da63991720b8ed2990d666b8369669" kindref="member">extension_data</ref>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___state___interface" kindref="compound">LV2_State_Interface</ref>*)desc-&gt;<ref refid="struct___l_v2___descriptor_1a36da63991720b8ed2990d666b8369669" kindref="member">extension_data</ref>(<ref refid="state_8h_1a544a2530a61dae44d5d343f586867ff6" kindref="member">LV2_STATE__interface</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iface)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iface-&gt;<ref refid="struct___l_v2___state___interface_1af1b48ea50175bfef63d4dd35d09d90b8" kindref="member">restore</ref>(instance-&gt;lv2_handle,<sp/>retrieve_callback,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="state_8h_1a385b5b586c09dd03f1065cd0105daa6d" kindref="member">LV2_State_Handle</ref>)state,<sp/>flags,<sp/>sfeatures);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sfeatures);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_value)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*<sp/>val<sp/>=<sp/>&amp;state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_value(val-&gt;<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>,<sp/>user_data,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>,<sp/>val-&gt;<ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref>,<sp/>val-&gt;<ref refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*</highlight></codeline>
<codeline lineno="434"><highlight class="normal">new_state_from_model(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_header_1accd62b6164586c0c3c128d3394ef3160" kindref="member">world</ref>,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac517f0c27408fbd365e7dd34e032faca" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><sp/><ref refid="structnode" kindref="compound">node</ref>,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>dir)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>know<sp/>at<sp/>least<sp/>something<sp/>about<sp/>this<sp/>state<sp/>subject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__sord_1gadd60c013214cb56e8b4f1ba0f245e696" kindref="member">sord_ask</ref>(model,<sp/>node,<sp/>0,<sp/>0,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(state,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(dir);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" kindref="member">atom_Path</ref><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1aced2e05e2e5fa9688fa1c96fc7f590f7" kindref="member">LV2_ATOM__Path</ref>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>plugin<sp/>URI<sp/>this<sp/>state<sp/>applies<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(model,<sp/>node,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a11cff0a5cca4c0572a67089c45742266" kindref="member">lv2_appliesTo</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>graph<sp/><sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633abbbc8097939ddffc0c29cf266a75ba34" kindref="member">SORD_GRAPH</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1ab85cc3ce5e142d7141219b15353ee671" kindref="member">lilv_node_new_from_node</ref>(world,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref><sp/>&amp;&amp;<sp/>graph)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(graph));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(i);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1gadd60c013214cb56e8b4f1ba0f245e696" kindref="member">sord_ask</ref>(model,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1aca23d16c84c357ca521a95eb447d5a59" kindref="member">rdf_a</ref>,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a6338b09cafac32b69077b76c08be02a5" kindref="member">lv2_Plugin</ref>,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loading<sp/>plugin<sp/>description<sp/>as<sp/>state<sp/>(default<sp/>state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1ab85cc3ce5e142d7141219b15353ee671" kindref="member">lilv_node_new_from_node</ref>(world,<sp/>node);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;State<sp/>%s<sp/>missing<sp/>lv2:appliesTo<sp/>property\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(node));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>state<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(model,<sp/>node,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a6b919b78e4ab5180a08d08da09b021ea" kindref="member">rdfs_label</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>graph<sp/><sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(i,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633abbbc8097939ddffc0c29cf266a75ba34" kindref="member">SORD_GRAPH</ref>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(graph));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(i);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sratom_impl" kindref="compound">Sratom</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sratom<sp/>=<sp/><ref refid="group__sratom_1ga6ca41eacfb303961a39e4b8c18f728df" kindref="member">sratom_new</ref>(map);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_chunk" kindref="compound">SerdChunk</ref><sp/><sp/><sp/><sp/><sp/><sp/>chunk<sp/><sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref><sp/>forge;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_init(&amp;forge,<sp/>map);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_set_sink(</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/><ref refid="group__sratom_1ga81b7aa6812793fd2f905432ac90eb27b" kindref="member">sratom_forge_sink</ref>,<sp/><ref refid="group__sratom_1gaf2e397c53d1ca4eed848986d733d300b" kindref="member">sratom_forge_deref</ref>,<sp/>&amp;chunk);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>port<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>ports<sp/>=<sp/><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(model,<sp/>node,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a4a93b004a615480d9b7fc95d96a70fee" kindref="member">lv2_port</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1a6956468cfb2a38060d841422d84b72a2" kindref="member">FOREACH_MATCH</ref>(ports)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>port<sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(ports,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="_tags_8cpp_1a0a3345b0d4574d7adffe113dacd8ccec" kindref="member">label</ref><sp/><sp/>=<sp/><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(model,<sp/>port,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a6b919b78e4ab5180a08d08da09b021ea" kindref="member">rdfs_label</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>symbol<sp/>=<sp/><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(model,<sp/>port,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a6dc1e99491e637a1188ee3d3d2aa6fad" kindref="member">lv2_symbol</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/><sp/>=<sp/><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(model,<sp/>port,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a0a668620eb4a8c0348cd025887fa9461" kindref="member">pset_value</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(model,<sp/>port,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1adfad3066e181902e87ba210a9cd23942" kindref="member">lv2_default</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!symbol)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;State<sp/>`%s&apos;<sp/>port<sp/>missing<sp/>symbol.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(node));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sratom_1gafe78e0e2f6ce3c69b90ae4af7d153f68" kindref="member">sratom_read</ref>(sratom,<sp/>&amp;forge,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>model,<sp/>value);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>atom<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)chunk.<ref refid="struct_serd_chunk_1a1fb21c23d2c2eecac5cf57b10ac370f6" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_port_value(state,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(symbol),</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atom_8h_1aff0faa2323c0ac3f44a10a1b310b5ac0" kindref="member">LV2_ATOM_BODY_CONST</ref>(atom),</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>,<sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1ga93dc2196595317603aad990804448dbf" kindref="member">lilv_state_set_label</ref>(state,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(label));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>symbol);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>label);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(ports);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>statep<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="state_8h_1a1fbef35c0160fbfa1a13d5e04b0f569f" kindref="member">LV2_STATE__state</ref>));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>state_node<sp/>=<sp/><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(model,<sp/>node,<sp/>statep,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_node)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>props<sp/>=<sp/><ref refid="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" kindref="member">sord_search</ref>(model,<sp/>state_node,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1a6956468cfb2a38060d841422d84b72a2" kindref="member">FOREACH_MATCH</ref>(props)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref><sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(props,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a0df0a36753303d1d8a55487296a050bb" kindref="member">SORD_PREDICATE</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref><sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(props,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk.<ref refid="struct_serd_chunk_1a0a9e8bfa17dc87785f51262ba4769278" kindref="member">len</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv2_atom_forge_set_sink(</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/><ref refid="group__sratom_1ga81b7aa6812793fd2f905432ac90eb27b" kindref="member">sratom_forge_sink</ref>,<sp/><ref refid="group__sratom_1gaf2e397c53d1ca4eed848986d733d300b" kindref="member">sratom_forge_deref</ref>,<sp/>&amp;chunk);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sratom_1gafe78e0e2f6ce3c69b90ae4af7d153f68" kindref="member">sratom_read</ref>(sratom,<sp/>&amp;forge,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>model,<sp/>o);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>atom<sp/><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)chunk.<ref refid="struct_serd_chunk_1a1fb21c23d2c2eecac5cf57b10ac370f6" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/><ref refid="state_8h_1a7f0856234c1a4b2a61b0531aefe7d13aab58be92bf542b837fcb05c1d6fd3702e" kindref="member">LV2_STATE_IS_POD</ref>|<ref refid="state_8h_1a7f0856234c1a4b2a61b0531aefe7d13aa4d993c6ccaf7b93df139907523ea3343" kindref="member">LV2_STATE_IS_PORTABLE</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_property" kindref="compound">Property</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop<sp/><sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/>flags<sp/>};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.key<sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.type<sp/><sp/>=<sp/>atom-&gt;type;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.size<sp/><sp/>=<sp/>atom-&gt;size;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.value<sp/>=<sp/>malloc(atom-&gt;size);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(prop.value,<sp/><ref refid="atom_8h_1aff0faa2323c0ac3f44a10a1b310b5ac0" kindref="member">LV2_ATOM_BODY_CONST</ref>(atom),<sp/>atom-&gt;size);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atom-&gt;type<sp/>==<sp/>forge.<ref refid="struct_l_v2___atom___forge_1a85302bd09eaf23908243f4e1f5c09a51" kindref="member">Path</ref>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.flags<sp/>=<sp/><ref refid="state_8h_1a7f0856234c1a4b2a61b0531aefe7d13aa4d993c6ccaf7b93df139907523ea3343" kindref="member">LV2_STATE_IS_PORTABLE</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop.value)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref><sp/>=<sp/>(<ref refid="struct_property" kindref="compound">Property</ref>*)realloc(</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>,<sp/>(++state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_property" kindref="compound">Property</ref>));</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>[state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref><sp/>-<sp/>1]<sp/>=<sp/>prop;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(props);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>state_node);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>statep);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)chunk.buf);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga4d805918e1d89ce8cc30005c3d6a08e5" kindref="member">sratom_free</ref>(sratom);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_property" kindref="compound">Property</ref>),<sp/>property_cmp);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_port_value" kindref="compound">PortValue</ref>),<sp/>value_cmp);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*</highlight></codeline>
<codeline lineno="574" refid="group__lilv_1ga7eeb94a9e78b459177e84a6251c8e2bc" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga7eeb94a9e78b459177e84a6251c8e2bc" kindref="member">lilv_state_new_from_world</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__lilv_1gafda5218468031732560fb468e78d18e4" kindref="member">lilv_node_is_uri</ref>(node)<sp/>&amp;&amp;<sp/>!<ref refid="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" kindref="member">lilv_node_is_blank</ref>(node))<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Subject<sp/>`%s&apos;<sp/>is<sp/>not<sp/>a<sp/>URI<sp/>or<sp/>blank<sp/>node.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" kindref="member">lilv_node_as_string</ref>(node));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state<sp/>=<sp/>new_state_from_model(</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>map,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a02f0eae0ade595968f72e721607b1e17" kindref="member">model</ref>,<sp/>node-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*</highlight></codeline>
<codeline lineno="591" refid="group__lilv_1gadb05ef8df3f51aff5b28d83e5d7fd097" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gadb05ef8df3f51aff5b28d83e5d7fd097" kindref="member">lilv_state_new_from_file</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>subject,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subject<sp/>&amp;&amp;<sp/>!<ref refid="group__lilv_1gafda5218468031732560fb468e78d18e4" kindref="member">lilv_node_is_uri</ref>(subject)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!<ref refid="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" kindref="member">lilv_node_is_blank</ref>(subject))<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Subject<sp/>`%s&apos;<sp/>is<sp/>not<sp/>a<sp/>URI<sp/>or<sp/>blank<sp/>node.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" kindref="member">lilv_node_as_string</ref>(subject));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><sp/><sp/><sp/>abs_path<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)<ref refid="lilv__internal_8h_1a12938cb06b918c214d427b9397878429" kindref="member">lilv_path_absolute</ref>(path);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gafeaacb37341cb84e36b8ada129691d39" kindref="member">serd_node_new_file_uri</ref>(abs_path,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/>env<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__serd_1ga64ffdd637dad39a2483e727125c2c285" kindref="member">serd_env_new</ref>(&amp;node);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/>model<sp/><sp/><sp/><sp/>=<sp/><ref refid="group__sord_1gac2d10de1c3b21b17c2d7eed4a5c7fd55" kindref="member">sord_new</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/><ref refid="group__sord_1ggaf490691787913fb85293d05eab00a735a51f0e1357612884f7bb7fb3ab151b3a7" kindref="member">SORD_SPO</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_reader_impl" kindref="compound">SerdReader</ref>*<sp/>reader<sp/><sp/><sp/>=<sp/><ref refid="group__sord_1gad18f6cefc887a7fdcd4a0a02f9c382e6" kindref="member">sord_new_reader</ref>(model,<sp/>env,<sp/><ref refid="group__serd_1gga42683406fcfa9046b28dd951cefd3391a4acfee57d17213dcb55e94c55a4fd78e" kindref="member">SERD_TURTLE</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1gad0fe4c7359478679e69b397620dc7f52" kindref="member">serd_reader_read_file</ref>(reader,<sp/>node.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>subject_node<sp/>=<sp/>(subject)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>subject-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="group__sord_1ga9367640305491801ab3bed714aeb5448" kindref="member">sord_node_from_serd_node</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>env,<sp/>&amp;node,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dirname<sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a1839d77f30974395b7a0c5f384703303" kindref="member">lilv_dirname</ref>(path);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>real_path<sp/>=<sp/><ref refid="lilv__internal_8h_1aadb67668361433b8da2195c97ec3ec99" kindref="member">lilv_realpath</ref>(dirname);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state<sp/>=<sp/>new_state_from_model(</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>map,<sp/>model,<sp/>subject_node,<sp/>real_path);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>free(dirname);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>free(real_path);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;node);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>free(abs_path);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga26a4070db2f9ef59c94adeaa9dac6752" kindref="member">serd_reader_free</ref>(reader);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga9e43e4eb96045ce7a07997267c813a15" kindref="member">sord_free</ref>(model);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga09d49846b7fc7dbd9a4c0fdc1e84e915" kindref="member">serd_env_free</ref>(env);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">set_prefixes(<ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/>env)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_PSET(e,<sp/>p,<sp/>u)<sp/>serd_env_set_prefix_from_strings(e,<sp/>p,<sp/>u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;atom&quot;</highlight><highlight class="normal">),<sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="atom_8h_1aadced0ba539ed230200111aa1fb97cb1" kindref="member">LV2_ATOM_PREFIX</ref>));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;lv2&quot;</highlight><highlight class="normal">),<sp/><sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lv2_8h_1a31dd18c72df155c12da0b086e4dcf521" kindref="member">LV2_CORE_PREFIX</ref>));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;pset&quot;</highlight><highlight class="normal">),<sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="presets_8h_1a2555ab357bd8086fae0a3147d009dbca" kindref="member">LV2_PRESETS_PREFIX</ref>));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;rdf&quot;</highlight><highlight class="normal">),<sp/><sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1a79bfbd6176ec4d579e3041f5c2b277c0" kindref="member">LILV_NS_RDF</ref>));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;rdfs&quot;</highlight><highlight class="normal">),<sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1a78c00b9b872b1d1f50f40209cf773964" kindref="member">LILV_NS_RDFS</ref>));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;state&quot;</highlight><highlight class="normal">),<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="state_8h_1afdd4f72bc52e68ba8a35dbce32738c70" kindref="member">LV2_STATE_PREFIX</ref>));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="state_8c_1a5f27e06b5408cac73e22d71c1e757dee" kindref="member">SET_PSET</ref>(env,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;xsd&quot;</highlight><highlight class="normal">),<sp/><sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1ac9648dceae337e131ab8b692bac360b1" kindref="member">LILV_NS_XSD</ref>));</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*</highlight></codeline>
<codeline lineno="644" refid="group__lilv_1ga289d9bb5c189f085fc4bd938a9c0d4cb" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga289d9bb5c189f085fc4bd938a9c0d4cb" kindref="member">lilv_state_new_from_string</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/>map,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a938e186c531ea86ae9adf3c0a649d8fc" kindref="member">base</ref><sp/><sp/><sp/>=<sp/>SERD_NODE_NULL;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/>env<sp/><sp/><sp/><sp/>=<sp/><ref refid="group__serd_1ga64ffdd637dad39a2483e727125c2c285" kindref="member">serd_env_new</ref>(&amp;base);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_model_impl" kindref="compound">SordModel</ref>*<sp/><sp/>model<sp/><sp/>=<sp/><ref refid="group__sord_1gac2d10de1c3b21b17c2d7eed4a5c7fd55" kindref="member">sord_new</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/><ref refid="group__sord_1ggaf490691787913fb85293d05eab00a735a51f0e1357612884f7bb7fb3ab151b3a7" kindref="member">SORD_SPO</ref>|<ref refid="group__sord_1ggaf490691787913fb85293d05eab00a735a4220624a00f2828d33e1a1cd45e18634" kindref="member">SORD_OPS</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_reader_impl" kindref="compound">SerdReader</ref>*<sp/>reader<sp/>=<sp/><ref refid="group__sord_1gad18f6cefc887a7fdcd4a0a02f9c382e6" kindref="member">sord_new_reader</ref>(model,<sp/>env,<sp/><ref refid="group__serd_1gga42683406fcfa9046b28dd951cefd3391a4acfee57d17213dcb55e94c55a4fd78e" kindref="member">SERD_TURTLE</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>set_prefixes(env);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga3ebc4139f1b992135bdd86fc6959b566" kindref="member">serd_reader_read_string</ref>(reader,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(str));</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref><sp/>=<sp/><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="presets_8h_1a310ae55b68028f21b1fd5a7a92e5497b" kindref="member">LV2_PRESETS__Preset</ref>));</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/><ref refid="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" kindref="member">sord_get</ref>(model,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1aca23d16c84c357ca521a95eb447d5a59" kindref="member">rdf_a</ref>,<sp/>o,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state<sp/>=<sp/>new_state_from_model(world,<sp/>map,<sp/>model,<sp/>s,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>s);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>o);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga26a4070db2f9ef59c94adeaa9dac6752" kindref="member">serd_reader_free</ref>(reader);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga9e43e4eb96045ce7a07997267c813a15" kindref="member">sord_free</ref>(model);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga09d49846b7fc7dbd9a4c0fdc1e84e915" kindref="member">serd_env_free</ref>(env);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*</highlight></codeline>
<codeline lineno="675"><highlight class="normal">ttl_writer(<ref refid="group__serd_1ga84861f1df2f4d3323cb0113dae4ced12" kindref="member">SerdSink</ref><sp/>sink,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/><ref refid="lib_2expat_8h_1a938e186c531ea86ae9adf3c0a649d8fc" kindref="member">base</ref>,<sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>**<sp/>new_env)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_u_r_i" kindref="compound">SerdURI</ref><sp/>base_uri<sp/>=<sp/>SERD_URI_NULL;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>&amp;&amp;<sp/>base-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga448a194144052f3edea6030d3a950eb0" kindref="member">serd_uri_parse</ref>(base-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>&amp;base_uri);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/>env<sp/>=<sp/><ref refid="group__serd_1ga64ffdd637dad39a2483e727125c2c285" kindref="member">serd_env_new</ref>(base);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>set_prefixes(env);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*<sp/>writer<sp/>=<sp/><ref refid="group__serd_1gae87f48adca211a7fa2c0432e9ba68d29" kindref="member">serd_writer_new</ref>(</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1gga42683406fcfa9046b28dd951cefd3391a4acfee57d17213dcb55e94c55a4fd78e" kindref="member">SERD_TURTLE</ref>,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__serd_1gae51da58ac1f1886c75ee2326495daeb2" kindref="member">SerdStyle</ref>)(<ref refid="group__serd_1ggae51da58ac1f1886c75ee2326495daeb2a5e2df70862512f94f6b2535ae63119be" kindref="member">SERD_STYLE_RESOLVED</ref>|<ref refid="group__serd_1ggae51da58ac1f1886c75ee2326495daeb2aa69f36bfcb18a88f514d5a763f8daaad" kindref="member">SERD_STYLE_ABBREVIATED</ref>|<ref refid="group__serd_1ggae51da58ac1f1886c75ee2326495daeb2a765d540f7a2e3dd87d57fa641c0a8488" kindref="member">SERD_STYLE_CURIED</ref>),</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;base_uri,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sink,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>*new_env<sp/>=<sp/>env;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*</highlight></codeline>
<codeline lineno="698"><highlight class="normal">ttl_file_writer(FILE*<sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/>node,<sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>**<sp/>env)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*<sp/>writer<sp/>=<sp/>ttl_writer(<ref refid="group__serd_1ga08303ceed3102e9fe2ae6bf39eb5b0ff" kindref="member">serd_file_sink</ref>,<sp/>fd,<sp/>node,<sp/>env);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fd,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ftell(fd)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga4e179ef13f5ad5ec23ff0b9b9d944c8e" kindref="member">serd_env_foreach</ref>(*env,<sp/>(<ref refid="group__serd_1ga692f0bbdf5e2576191ee3556ecde7d55" kindref="member">SerdPrefixSink</ref>)<ref refid="group__serd_1gae850607b6b240aea9d3676b1230c3c63" kindref="member">serd_writer_set_prefix</ref>,<sp/>writer);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fd,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">add_state_to_manifest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>plugin_uri,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>manifest_path,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>state_uri,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>state_path)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fd<sp/>=<sp/>fopen(manifest_path,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fd)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>manifest_path,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1ab5c84a1b74b56b350369857b344d3a60" kindref="member">lilv_flock</ref>(fd,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/>file<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gafeaacb37341cb84e36b8ada129691d39" kindref="member">serd_node_new_file_uri</ref>(<ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(state_path),<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/>manifest<sp/>=<sp/><ref refid="group__serd_1gafeaacb37341cb84e36b8ada129691d39" kindref="member">serd_node_new_file_uri</ref>(<ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(manifest_path),<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/>env<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*<sp/>writer<sp/><sp/><sp/>=<sp/>ttl_file_writer(fd,<sp/>&amp;manifest,<sp/>&amp;env);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state_uri)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_uri<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)file.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;state&gt;<sp/>a<sp/>pset:Preset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(state_uri));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref><sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1a79bfbd6176ec4d579e3041f5c2b277c0" kindref="member">LILV_NS_RDF</ref><sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref><sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="presets_8h_1a310ae55b68028f21b1fd5a7a92e5497b" kindref="member">LV2_PRESETS__Preset</ref>));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;s,<sp/>&amp;p,<sp/>&amp;o,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;state&gt;<sp/>rdfs:seeAlso<sp/>&lt;file&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1a78c00b9b872b1d1f50f40209cf773964" kindref="member">LILV_NS_RDFS</ref><sp/></highlight><highlight class="stringliteral">&quot;seeAlso&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;s,<sp/>&amp;p,<sp/>&amp;file,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;state&gt;<sp/>lv2:appliesTo<sp/>&lt;plugin&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lv2_8h_1ac9aa0664021da78a07d4d40e6c1c34fc" kindref="member">LV2_CORE__appliesTo</ref>));</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>o<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" kindref="member">lilv_node_as_string</ref>(plugin_uri)));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;s,<sp/>&amp;p,<sp/>&amp;o,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;file);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;manifest);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga50c06e138081328c46e9dfa593814f73" kindref="member">serd_writer_free</ref>(writer);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga09d49846b7fc7dbd9a4c0fdc1e84e915" kindref="member">serd_env_free</ref>(env);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1ab5c84a1b74b56b350369857b344d3a60" kindref="member">lilv_flock</ref>(fd,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fd);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">link_exists(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a15a257516a87decb971420e718853137" kindref="member">target</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lilv__internal_8h_1aba4463b5381412230c68b75a5d6221e4" kindref="member">lilv_path_exists</ref>(<ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>real_path<sp/>=<sp/><ref refid="lilv__internal_8h_1aadb67668361433b8da2195c97ec3ec99" kindref="member">lilv_realpath</ref>(<ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/>matches<sp/><sp/><sp/>=<sp/>!strcmp(real_path,<sp/>target);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>free(real_path);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!matches;</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">lilv_state_write(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___unmap" kindref="compound">LV2_URID_Unmap</ref>*<sp/><sp/>unmap,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>writer,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>dir)</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>lv2_appliesTo<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa8a72fff2f6f94adeb11ccadf12c117d8" kindref="member">SERD_CURIE</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;lv2:appliesTo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/>plugin_uri<sp/>=<sp/><ref refid="group__sord_1ga497e0859abcc9e6e39c5bcbfcc7c9f70" kindref="member">sord_node_to_serd_node</ref>(</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>subject<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref><sp/>?<sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;subject&gt;<sp/>a<sp/>pset:Preset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref><sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1a79bfbd6176ec4d579e3041f5c2b277c0" kindref="member">LILV_NS_RDF</ref><sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="namespacesmartmsgmerge_1aba35baca6a2a8d4f665ba30724f4739a" kindref="member">o</ref><sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="presets_8h_1a310ae55b68028f21b1fd5a7a92e5497b" kindref="member">LV2_PRESETS__Preset</ref>));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;subject,<sp/>&amp;p,<sp/>&amp;o,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;subject&gt;<sp/>lv2:appliesTo<sp/>&lt;http://example.org/plugin&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;subject,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;lv2_appliesTo,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plugin_uri,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;subject&gt;<sp/>rdfs:label<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lilv_8h_1a78c00b9b872b1d1f50f40209cf773964" kindref="member">LILV_NS_RDFS</ref><sp/></highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/>0,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;subject,<sp/>&amp;p,<sp/>&amp;o,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/><sp/>=<sp/><ref refid="group__serd_1gaf48894b46c202d07055c0de23431f13a" kindref="member">serd_writer_get_env</ref>(writer);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref>*<sp/>base<sp/>=<sp/><ref refid="group__serd_1ga94b861ea65187556a473dcb668ab8667" kindref="member">serd_env_get_base_uri</ref>(env,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sratom_impl" kindref="compound">Sratom</ref>*<sp/>sratom<sp/>=<sp/><ref refid="group__sratom_1ga6ca41eacfb303961a39e4b8c18f728df" kindref="member">sratom_new</ref>(map);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga657cee72c5d1916da976c108bef687c7" kindref="member">sratom_set_sink</ref>(sratom,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)base-&gt;<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__serd_1ga9cd6dc709f738ed9770d0d2cd1195bd4" kindref="member">SerdStatementSink</ref>)<ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__serd_1gae67888543462e4127e6a4f6af047026b" kindref="member">SerdEndSink</ref>)<ref refid="group__serd_1ga2452df8462454202657ecad76bb26812" kindref="member">serd_writer_end_anon</ref>,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>port<sp/>values<sp/>as<sp/>pretty<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga0d93ebb102d9d1e033ed826c5119d2ca" kindref="member">sratom_set_pretty_numbers</ref>(sratom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>port<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>&amp;state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>port<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(value-&gt;<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>));</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;&gt;<sp/>lv2:port<sp/>_:symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lv2_8h_1a56357ed07f32ff4acb79a3c6e6609887" kindref="member">LV2_CORE__port</ref>));</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/><ref refid="group__serd_1gga9f7ab02c389af900f04d29be09c57647aae52aa2d821bdd02e828cfcf07692978" kindref="member">SERD_ANON_O_BEGIN</ref>,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;subject,<sp/>&amp;p,<sp/>&amp;port,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_:symbol<sp/>lv2:symbol<sp/>&quot;symbol&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="lv2_8h_1a71479f3c0463b967bb7b6c684bf434fa" kindref="member">LV2_CORE__symbol</ref>));</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaa661a7e84228e32f0b979839658bf4c6" kindref="member">SERD_LITERAL</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(value-&gt;<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>));</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/><ref refid="group__serd_1gga9f7ab02c389af900f04d29be09c57647ac4825dca7b59b50762a87174fc4148b2" kindref="member">SERD_ANON_CONT</ref>,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>&amp;port,<sp/>&amp;p,<sp/>&amp;o,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_:symbol<sp/>pset:value<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="presets_8h_1a6bd6747d3f0db26025f0ea6195a06891" kindref="member">LV2_PRESETS__value</ref>));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga2c8efd0cc16686de0cabc19ca3f0effc" kindref="member">sratom_write</ref>(sratom,<sp/>unmap,<sp/><ref refid="group__serd_1gga9f7ab02c389af900f04d29be09c57647ac4825dca7b59b50762a87174fc4148b2" kindref="member">SERD_ANON_CONT</ref>,<sp/>&amp;port,<sp/>&amp;p,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value-&gt;<ref refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" kindref="member">type</ref>,<sp/>value-&gt;<ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref>,<sp/>value-&gt;<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga2452df8462454202657ecad76bb26812" kindref="member">serd_writer_end_anon</ref>(writer,<sp/>&amp;port);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>property<sp/>values<sp/>with<sp/>precise<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga0d93ebb102d9d1e033ed826c5119d2ca" kindref="member">sratom_set_pretty_numbers</ref>(sratom,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>state_node<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faaed82589a7355a2086b1c9cd91ec261c7" kindref="member">SERD_BLANK</ref>,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(</highlight><highlight class="stringliteral">&quot;2state&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(<ref refid="state_8h_1a1fbef35c0160fbfa1a13d5e04b0f569f" kindref="member">LV2_STATE__state</ref>));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga0c055816f6eb769e55128701402e68b4" kindref="member">serd_writer_write_statement</ref>(writer,<sp/><ref refid="group__serd_1gga9f7ab02c389af900f04d29be09c57647aae52aa2d821bdd02e828cfcf07692978" kindref="member">SERD_ANON_O_BEGIN</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;subject,<sp/>&amp;p,<sp/>&amp;state_node,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_property" kindref="compound">Property</ref>*<sp/><sp/><sp/>prop<sp/>=<sp/>&amp;state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key<sp/><sp/>=<sp/>unmap-&gt;<ref refid="struct___l_v2___u_r_i_d___unmap_1a2185877d2fa62b6356d0caa095eb5d0b" kindref="member">unmap</ref>(unmap-&gt;<ref refid="struct___l_v2___u_r_i_d___unmap_1a48a59c32b6db596964b13050f676b879" kindref="member">handle</ref>,<sp/>prop-&gt;<ref refid="struct_property_1a71e1b4425e7276a3861ff902b066df8d" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(key));</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref><sp/>==<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" kindref="member">atom_Path</ref><sp/>&amp;&amp;<sp/>!dir)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)prop-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>abs_path<sp/>=<sp/>lilv_state_rel2abs(state,<sp/>path);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga2c8efd0cc16686de0cabc19ca3f0effc" kindref="member">sratom_write</ref>(sratom,<sp/>unmap,<sp/><ref refid="group__serd_1gga9f7ab02c389af900f04d29be09c57647ac4825dca7b59b50762a87174fc4148b2" kindref="member">SERD_ANON_CONT</ref>,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;state_node,<sp/>&amp;p,<sp/>prop-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlen(abs_path)<sp/>+<sp/>1,<sp/>abs_path);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga2c8efd0cc16686de0cabc19ca3f0effc" kindref="member">sratom_write</ref>(sratom,<sp/>unmap,<sp/><ref refid="group__serd_1gga9f7ab02c389af900f04d29be09c57647ac4825dca7b59b50762a87174fc4148b2" kindref="member">SERD_ANON_CONT</ref>,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;state_node,<sp/>&amp;p,<sp/>prop-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref>,<sp/>prop-&gt;<ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref>,<sp/>prop-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga2452df8462454202657ecad76bb26812" kindref="member">serd_writer_end_anon</ref>(writer,<sp/>&amp;state_node);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sratom_1ga4d805918e1d89ce8cc30005c3d6a08e5" kindref="member">sratom_free</ref>(sratom);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">lilv_state_make_links(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dir)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>symlinks<sp/>to<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_zix_tree_node_impl" kindref="compound">ZixTreeIter</ref>*<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/><ref refid="group__zix_1gae5cd6820a3fbfd92fd44755738430ed8" kindref="member">zix_tree_begin</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref>);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>!=<sp/><ref refid="group__zix_1gac295deaf3d65214802458ef2b9041cf2" kindref="member">zix_tree_end</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/><ref refid="group__zix_1ga5e96ee30587208cb8076bbec52465846" kindref="member">zix_tree_iter_next</ref>(<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>))<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*<sp/>pm<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_path_map" kindref="compound">PathMap</ref>*)<ref refid="group__zix_1ga687b0675b68ea58eecc1739686853fee" kindref="member">zix_tree_get</ref>(<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(dir,<sp/>pm-&gt;<ref refid="struct_path_map_1aed8f9263efdca8b96ea67526ae9d8280" kindref="member">rel</ref>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lilv__internal_8h_1ac3a41ae320d2f8042323ff0d398f4816" kindref="member">lilv_path_is_child</ref>(pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>,<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>strcmp(state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>,<sp/>dir))<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link<sp/>directly<sp/>to<sp/>snapshot<sp/>in<sp/>the<sp/>copy<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a15a257516a87decb971420e718853137" kindref="member">target</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1a5f5eb730a98794d99f9a29ccff45908d" kindref="member">lilv_path_relative_to</ref>(pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>,<sp/>dir);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1af7d7a333f8316c2f19af7162208cebcd" kindref="member">lilv_symlink</ref>(target,<sp/>path);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(target);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lilv__internal_8h_1ac3a41ae320d2f8042323ff0d398f4816" kindref="member">lilv_path_is_child</ref>(pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>,<sp/>dir))<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>link_dir<sp/>=<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a7ddc78d3d2e8ab2cd72f339c65e219dc" kindref="member">link_dir</ref><sp/>?<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a7ddc78d3d2e8ab2cd72f339c65e219dc" kindref="member">link_dir</ref><sp/>:<sp/>dir;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pat<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(link_dir,<sp/>pm-&gt;<ref refid="struct_path_map_1aed8f9263efdca8b96ea67526ae9d8280" kindref="member">rel</ref>);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(dir,<sp/>link_dir))<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link<sp/>directory<sp/>is<sp/>save<sp/>directory,<sp/>make<sp/>link<sp/>at<sp/>exact<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(pat);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1af7d7a333f8316c2f19af7162208cebcd" kindref="member">lilv_symlink</ref>(pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>,<sp/>pat);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>link<sp/>in<sp/>the<sp/>link<sp/>directory<sp/>to<sp/>external<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lpath<sp/>=<sp/><ref refid="lilv__internal_8h_1a907cb5002dff831d0641a66a96179bdd" kindref="member">lilv_find_free_path</ref>(pat,<sp/>link_exists,<sp/>pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lilv__internal_8h_1aba4463b5381412230c68b75a5d6221e4" kindref="member">lilv_path_exists</ref>(lpath,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1af7d7a333f8316c2f19af7162208cebcd" kindref="member">lilv_symlink</ref>(pm-&gt;<ref refid="struct_path_map_1ac81041d4c899a4862b6e0b319bb87a56" kindref="member">abs</ref>,<sp/>lpath);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>link<sp/>in<sp/>the<sp/>save<sp/>directory<sp/>to<sp/>the<sp/>external<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a15a257516a87decb971420e718853137" kindref="member">target</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1a5f5eb730a98794d99f9a29ccff45908d" kindref="member">lilv_path_relative_to</ref>(lpath,<sp/>dir);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1af7d7a333f8316c2f19af7162208cebcd" kindref="member">lilv_symlink</ref>(target,<sp/>path);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(target);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(lpath);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(pat);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(path);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929" refid="group__lilv_1gae38a5ed3424417b909163d3b64c1edb5" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gae38a5ed3424417b909163d3b64c1edb5" kindref="member">lilv_state_save</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___unmap" kindref="compound">LV2_URID_Unmap</ref>*<sp/><sp/>unmap,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>dir,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>)</highlight></codeline>
<codeline lineno="936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filename<sp/>||<sp/>!dir<sp/>||<sp/><ref refid="lilv__internal_8h_1aef86368303b7016039a60c620e3ceb00" kindref="member">lilv_mkdir_p</ref>(dir))<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_dir<sp/>=<sp/>absolute_dir(dir);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(abs_dir,<sp/>filename);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fopen(path,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fd)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s<sp/>(%s)\n&quot;</highlight><highlight class="normal">,<sp/>path,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(abs_dir);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(path);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>make<sp/>parameter<sp/>non-const?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref><sp/>&amp;&amp;<sp/>strcmp(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>,<sp/>abs_dir))<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*)state)-&gt;dir<sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(abs_dir);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>symlinks<sp/>to<sp/>files<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>lilv_state_make_links(state,<sp/>abs_dir);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>state<sp/>to<sp/>Turtle<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/>file<sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gafeaacb37341cb84e36b8ada129691d39" kindref="member">serd_node_new_file_uri</ref>(<ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(path),<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/>env<sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*<sp/>writer<sp/>=<sp/>ttl_file_writer(fd,<sp/>&amp;file,<sp/>&amp;env);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/>node<sp/>=<sp/>uri<sp/>?<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(uri))<sp/>:<sp/>file;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lilv_state_write(</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>map,<sp/>unmap,<sp/>state,<sp/>writer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)node.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>,<sp/>dir);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;file);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga50c06e138081328c46e9dfa593814f73" kindref="member">serd_writer_free</ref>(writer);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga09d49846b7fc7dbd9a4c0fdc1e84e915" kindref="member">serd_env_free</ref>(env);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fd);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>manifest<sp/>=<sp/><ref refid="lilv__internal_8h_1a927e8216d3b3e141f9dae0ade4242ab7" kindref="member">lilv_path_join</ref>(abs_dir,<sp/></highlight><highlight class="stringliteral">&quot;manifest.ttl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>add_state_to_manifest(state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>,<sp/>manifest,<sp/>uri,<sp/>path);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>free(manifest);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>free(abs_dir);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>free(path);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="984" refid="group__lilv_1ga98689483de36ea817380b1960bf44458" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga98689483de36ea817380b1960bf44458" kindref="member">lilv_state_to_string</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><sp/><sp/><sp/>map,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___unmap" kindref="compound">LV2_URID_Unmap</ref>*<sp/><sp/>unmap,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>base_uri)</highlight></codeline>
<codeline lineno="990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uri)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1a5f1af9cf0c570e4397a1fbde2e2857ac" kindref="member">LILV_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>serialise<sp/>state<sp/>with<sp/>no<sp/>URI\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_chunk" kindref="compound">SerdChunk</ref><sp/><sp/><sp/>chunk<sp/><sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_env_impl" kindref="compound">SerdEnv</ref>*<sp/><sp/><sp/><sp/>env<sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/>base<sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gae76caf1b4e7a6465c9cb73ec11f568ea" kindref="member">serd_node_from_string</ref>(<ref refid="group__serd_1gga7ccd8d4fb2c3a6ad690ed6d6fe1b45faa7c01ef6de89d3245d4aed20da0736d24" kindref="member">SERD_URI</ref>,<sp/><ref refid="state_8c_1a0fa8d3bb0cc514136f489b0723cdb9d6" kindref="member">USTR</ref>(base_uri));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_writer_impl" kindref="compound">SerdWriter</ref>*<sp/>writer<sp/>=<sp/>ttl_writer(<ref refid="group__serd_1gaec4335743b7d78339d8c133111ec8319" kindref="member">serd_chunk_sink</ref>,<sp/>&amp;chunk,<sp/>&amp;base,<sp/>&amp;env);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>lilv_state_write(world,<sp/>map,<sp/>unmap,<sp/>state,<sp/>writer,<sp/>uri,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga50c06e138081328c46e9dfa593814f73" kindref="member">serd_writer_free</ref>(writer);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga09d49846b7fc7dbd9a4c0fdc1e84e915" kindref="member">serd_env_free</ref>(env);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__serd_1gad91b770366f31f3ae83dcdde8c1d6c5d" kindref="member">serd_chunk_sink_finish</ref>(&amp;chunk);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009" refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free</ref>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__zix_1gaa7e4d26fc7a27fff154c77b3b617d21c" kindref="member">zix_tree_free</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2127bb9abaaae47123138fbd22edc8e5" kindref="member">abs2rel</ref>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__zix_1gaa7e4d26fc7a27fff154c77b3b617d21c" kindref="member">zix_tree_free</ref>(state-&gt;<ref refid="struct_lilv_state_impl_1a2aaa043ed8ba2b8d8688181fca7c999b" kindref="member">rel2abs</ref>);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a77d1235d86cbe387065c1f6b28e695ea" kindref="member">dir</ref>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1aca646616a6799ac3dd9d72fcf246cba3" kindref="member">file_dir</ref>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a92a6b22fb006586f698c99c1d3b72459" kindref="member">copy_dir</ref>);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state-&gt;<ref refid="struct_lilv_state_impl_1a7ddc78d3d2e8ab2cd72f339c65e219dc" kindref="member">link_dir</ref>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(state);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034" refid="group__lilv_1gae93aca68826dac502cd623e7d900a784" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gae93aca68826dac502cd623e7d900a784" kindref="member">lilv_state_equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__lilv_1ga3fd9df99cb05f2f061233d2839e820f1" kindref="member">lilv_node_equals</ref>(a-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>,<sp/>b-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(a-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref><sp/>&amp;&amp;<sp/>!b-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(b-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref><sp/>&amp;&amp;<sp/>!a-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(a-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref><sp/>&amp;&amp;<sp/>b-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref><sp/>&amp;&amp;<sp/>strcmp(a-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>,<sp/>b-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>))</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>a-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref><sp/>!=<sp/>b-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>a-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref><sp/>!=<sp/>b-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>a-&gt;<ref refid="struct_lilv_state_impl_1a1b72121ebc7e73928d9be8e210bc7c87" kindref="member">num_values</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>av<sp/>=<sp/>&amp;a-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_port_value" kindref="compound">PortValue</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bv<sp/>=<sp/>&amp;b-&gt;<ref refid="struct_lilv_state_impl_1a3697bdf87d136bc6bf2e91d3772d6626" kindref="member">values</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(av-&gt;<ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref><sp/>!=<sp/>bv-&gt;<ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref><sp/>||<sp/>av-&gt;<ref refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" kindref="member">type</ref><sp/>!=<sp/>bv-&gt;<ref refid="struct_port_value_1a34915942cf7128ad04d42ae42b1cc81e" kindref="member">type</ref></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>strcmp(av-&gt;<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>,<sp/>bv-&gt;<ref refid="struct_port_value_1a3ac36f51d2c4632361b39449834ff6e4" kindref="member">symbol</ref>)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>memcmp(av-&gt;<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>,<sp/>bv-&gt;<ref refid="struct_port_value_1a40b3052f3bf8c4e44b9d005543b765a4" kindref="member">value</ref>,<sp/>av-&gt;<ref refid="struct_port_value_1a93a9aa1527ec35923e040a3c63f2231f" kindref="member">size</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>a-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_property" kindref="compound">Property</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ap<sp/>=<sp/>&amp;a-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_property" kindref="compound">Property</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp<sp/>=<sp/>&amp;b-&gt;<ref refid="struct_lilv_state_impl_1aa747c21d631a7d83dd43ffb9ba50639a" kindref="member">props</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ap-&gt;<ref refid="struct_property_1a71e1b4425e7276a3861ff902b066df8d" kindref="member">key</ref><sp/>!=<sp/>bp-&gt;<ref refid="struct_property_1a71e1b4425e7276a3861ff902b066df8d" kindref="member">key</ref></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>ap-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref><sp/>!=<sp/>bp-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>ap-&gt;<ref refid="struct_property_1ad71ec64f7699f9b7801e54f57ad2aa96" kindref="member">flags</ref><sp/>!=<sp/>bp-&gt;<ref refid="struct_property_1ad71ec64f7699f9b7801e54f57ad2aa96" kindref="member">flags</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ap-&gt;<ref refid="struct_property_1adb514bcdfd564833e3a30c80f54f3de9" kindref="member">type</ref><sp/>==<sp/>a-&gt;<ref refid="struct_lilv_state_impl_1a59aa18aaedef6f9c00bac6e46c04c150" kindref="member">atom_Path</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lilv__internal_8h_1ae8208cca70baceca3c14c16cc2caa810" kindref="member">lilv_file_equals</ref>(lilv_state_rel2abs(a,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ap-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>),</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lilv_state_rel2abs(b,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)bp-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ap-&gt;<ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref><sp/>!=<sp/>bp-&gt;<ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>memcmp(ap-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>,<sp/>bp-&gt;<ref refid="struct_property_1a4a926eea767e932bfb1da724b43f1463" kindref="member">value</ref>,<sp/>ap-&gt;<ref refid="struct_property_1a4975c4f772ea576ce0fdd12b65036632" kindref="member">size</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="group__lilv_1ga50d018031023edef372722c24260fdd6" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga50d018031023edef372722c24260fdd6" kindref="member">lilv_state_get_num_properties</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1abbd24ab8ac4ef3cd927b0318048ecd93" kindref="member">num_props</ref>;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="1083" refid="group__lilv_1ga4552844be668aeecfa3f11f326392877" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga4552844be668aeecfa3f11f326392877" kindref="member">lilv_state_get_plugin_uri</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a97a4d9bd654fd4933145fce964838687" kindref="member">plugin_uri</ref>;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="1089" refid="group__lilv_1ga7effbd89fcd049e29d74da1769e35f87" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga7effbd89fcd049e29d74da1769e35f87" kindref="member">lilv_state_get_label</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095" refid="group__lilv_1ga93dc2196595317603aad990804448dbf" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga93dc2196595317603aad990804448dbf" kindref="member">lilv_state_set_label</ref>(<ref refid="struct_lilv_state_impl" kindref="compound">LilvState</ref>*<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="_tags_8cpp_1a0a3345b0d4574d7adffe113dacd8ccec" kindref="member">label</ref>)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>=<sp/>strlen(label);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)realloc(state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(state-&gt;<ref refid="struct_lilv_state_impl_1a34aa18d3cec23640abf47af7889aea44" kindref="member">label</ref>,<sp/>label,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c"/>
  </compounddef>
</doxygen>
