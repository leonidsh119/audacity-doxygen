<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="share_2utf8_2charset_8c" kind="file" language="C++">
    <compoundname>charset.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="alloc_8h" local="yes">share/alloc.h</includes>
    <includes refid="share_2utf8_2charset_8h" local="yes">charset.h</includes>
    <includes refid="charmaps_8h" local="yes">charmaps.h</includes>
    <incdepgraph>
      <node id="8960">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="8961" relation="include">
        </childnode>
        <childnode refid="8962" relation="include">
        </childnode>
        <childnode refid="8963" relation="include">
        </childnode>
      </node>
      <node id="8965">
        <label>stdarg.h</label>
      </node>
      <node id="8967">
        <label>charmaps.h</label>
        <link refid="charmaps_8h"/>
      </node>
      <node id="8955">
        <label>stdlib.h</label>
      </node>
      <node id="8954">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c</label>
        <link refid="share/utf8/charset.c"/>
        <childnode refid="8955" relation="include">
        </childnode>
        <childnode refid="8956" relation="include">
        </childnode>
        <childnode refid="8966" relation="include">
        </childnode>
        <childnode refid="8967" relation="include">
        </childnode>
      </node>
      <node id="8966">
        <label>charset.h</label>
        <link refid="share_2utf8_2charset_8h"/>
        <childnode refid="8955" relation="include">
        </childnode>
      </node>
      <node id="8962">
        <label>alloca.h</label>
      </node>
      <node id="8957">
        <label>limits.h</label>
      </node>
      <node id="8961">
        <label>MacTypes.h</label>
      </node>
      <node id="8963">
        <label>string.h</label>
      </node>
      <node id="8964">
        <label>utime.h</label>
      </node>
      <node id="8956">
        <label>share/alloc.h</label>
        <link refid="alloc_8h"/>
        <childnode refid="8957" relation="include">
        </childnode>
        <childnode refid="8955" relation="include">
        </childnode>
        <childnode refid="8958" relation="include">
        </childnode>
      </node>
      <node id="8959">
        <label>unistd.h</label>
      </node>
      <node id="8958">
        <label>share/compat.h</label>
        <link refid="libflac_2include_2share_2compat_8h"/>
        <childnode refid="8959" relation="include">
        </childnode>
        <childnode refid="8960" relation="include">
        </childnode>
        <childnode refid="8964" relation="include">
        </childnode>
        <childnode refid="8965" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structcharset" prot="public">charset</innerclass>
    <innerclass refid="structmap" prot="public">map</innerclass>
    <innerclass refid="structinverse__map" prot="public">inverse_map</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="share_2utf8_2charset_8c_1a44924d405463d034f87510503b0e4752" prot="public" static="no">
        <name>HASH</name>
        <param><defname>i</defname></param>
        <initializer>((<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>) &amp; 0xff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="327" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="327" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="share_2utf8_2charset_8c_1a22eba806dea0d809bac58afdd8c07cdc" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structcharset" kindref="compound">charset</ref></type>
        <definition>struct charset charset_utf8</definition>
        <argsstring></argsstring>
        <name>charset_utf8</name>
        <initializer>= {
  6,
  &amp;mbtowc_utf8,
  &amp;wctomb_utf8,
  0
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="362" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="share_2utf8_2charset_8c_1addde37031c7e1a24d18b50d5947fb5fc" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structcharset" kindref="compound">charset</ref></type>
        <definition>struct charset charset_iso1</definition>
        <argsstring></argsstring>
        <name>charset_iso1</name>
        <initializer>= {
  1,
  &amp;mbtowc_iso1,
  &amp;wctomb_iso1,
  0
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="362" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="share_2utf8_2charset_8c_1ac5527e04ae2ee6b5d657ed8eff8bbbd3" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structcharset" kindref="compound">charset</ref></type>
        <definition>struct charset charset_ascii</definition>
        <argsstring></argsstring>
        <name>charset_ascii</name>
        <initializer>= {
  1,
  &amp;mbtowc_ascii,
  &amp;wctomb_ascii,
  0
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="362" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="420" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="share_2utf8_2charset_8c_1aac1d84747748fd85fa622fa2800d1fc8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int ascii_strcasecmp</definition>
        <argsstring>(const char *s1, const char *s2)</argsstring>
        <name>ascii_strcasecmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="54" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="54" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a5025ad6f8ae3111aca9589a33ed20906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int utf8_mbtowc</definition>
        <argsstring>(int *pwc, const char *s, size_t n)</argsstring>
        <name>utf8_mbtowc</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="79" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="79" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1abdbfa0bf21a1a826581a6e3e7650bda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int utf8_wctomb</definition>
        <argsstring>(char *s, int wc1)</argsstring>
        <name>utf8_wctomb</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wc1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="130" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="130" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a8907beafdbe5d63010565ecdcd9cddcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int charset_mbtowc</definition>
        <argsstring>(struct charset *charset, int *pwc, const char *s, size_t n)</argsstring>
        <name>charset_mbtowc</name>
        <param>
          <type>struct <ref refid="structcharset" kindref="compound">charset</ref> *</type>
          <declname>charset</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="190" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1ae62e080a852bf3693ef4fcce908a69a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int charset_wctomb</definition>
        <argsstring>(struct charset *charset, char *s, int wc)</argsstring>
        <name>charset_wctomb</name>
        <param>
          <type>struct <ref refid="structcharset" kindref="compound">charset</ref> *</type>
          <declname>charset</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="195" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a4083b6e424b5068195fdd1419cc6a07b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int charset_max</definition>
        <argsstring>(struct charset *charset)</argsstring>
        <name>charset_max</name>
        <param>
          <type>struct <ref refid="structcharset" kindref="compound">charset</ref> *</type>
          <declname>charset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="200" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1ad0526d012c6ca72fc6fa12e5cb19ffcf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int mbtowc_utf8</definition>
        <argsstring>(void *map, int *pwc, const char *s, size_t n)</argsstring>
        <name>mbtowc_utf8</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="209" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a0f7e8bd912cf50a39b950e6198a43c6b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int wctomb_utf8</definition>
        <argsstring>(void *map, char *s, int wc)</argsstring>
        <name>wctomb_utf8</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="215" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a46915f66b749666cae1ed4ac5635cc11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int mbtowc_ascii</definition>
        <argsstring>(void *map, int *pwc, const char *s, size_t n)</argsstring>
        <name>mbtowc_ascii</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="227" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="227" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a7509b2d1dd977838ecd7da26da9539a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int wctomb_ascii</definition>
        <argsstring>(void *map, char *s, int wc)</argsstring>
        <name>wctomb_ascii</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="242" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a0fa03f889e89358c43e910295c1259d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int mbtowc_iso1</definition>
        <argsstring>(void *map, int *pwc, const char *s, size_t n)</argsstring>
        <name>mbtowc_iso1</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="259" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="259" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a8f28ddc804b8e4f2d6619d8a954e60e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int wctomb_iso1</definition>
        <argsstring>(void *map, char *s, int wc)</argsstring>
        <name>wctomb_iso1</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="274" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="274" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1ae45dbd983ba2a62ca34f29b691765e56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int mbtowc_8bit</definition>
        <argsstring>(void *map1, int *pwc, const char *s, size_t n)</argsstring>
        <name>mbtowc_8bit</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map1</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="294" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="294" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a9f35b68f895b0003238766d787087c00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structinverse__map" kindref="compound">inverse_map</ref> *</type>
        <definition>static struct inverse_map* make_inverse_map</definition>
        <argsstring>(const unsigned short *from)</argsstring>
        <name>make_inverse_map</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned short *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="331" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="331" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a95be3e254c4c3764613810cf3caada21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int wctomb_8bit</definition>
        <argsstring>(void *map1, char *s, int wc1)</argsstring>
        <name>wctomb_8bit</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>map1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wc1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="362" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="362" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a46e1566f7a1a98855a39a90b11308263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcharset" kindref="compound">charset</ref> *</type>
        <definition>struct charset* charset_find</definition>
        <argsstring>(const char *code)</argsstring>
        <name>charset_find</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="427" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="427" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="share_2utf8_2charset_8c_1a74f30742d454300063ff81977ae83d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int charset_convert</definition>
        <argsstring>(const char *fromcode, const char *tocode, const char *from, size_t fromlen, char **to, size_t *tolen)</argsstring>
        <name>charset_convert</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromcode</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>tocode</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fromlen</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>to</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>tolen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" line="482" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c" bodystart="482" bodyend="530"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2001<sp/>Edmund<sp/>Grimley<sp/>Evans<sp/>&lt;edmundo@rano.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>corresponding<sp/>header<sp/>file<sp/>for<sp/>a<sp/>description<sp/>of<sp/>the<sp/>functions</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>that<sp/>this<sp/>file<sp/>provides.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>This<sp/>was<sp/>first<sp/>written<sp/>for<sp/>Ogg<sp/>Vorbis<sp/>but<sp/>could<sp/>be<sp/>of<sp/>general<sp/>use.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>The<sp/>only<sp/>deliberate<sp/>assumption<sp/>about<sp/>data<sp/>sizes<sp/>is<sp/>that<sp/>a<sp/>short<sp/>has</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>at<sp/>least<sp/>16<sp/>bits,<sp/>but<sp/>this<sp/>code<sp/>has<sp/>only<sp/>been<sp/>tested<sp/>on<sp/>systems<sp/>with</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>8-bit<sp/>char,<sp/>16-bit<sp/>short<sp/>and<sp/>32-bit<sp/>int.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_ICONV<sp/></highlight><highlight class="comment">/*<sp/>should<sp/>be<sp/>ifdef<sp/>USE_CHARSET_CONVERT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="alloc_8h" kindref="compound">share/alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="share_2utf8_2charset_8h" kindref="compound">charset.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="charmaps_8h" kindref="compound">charmaps.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>like<sp/>the<sp/>standard<sp/>strcasecmp,<sp/>but<sp/>it<sp/>does<sp/>not<sp/>depend</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>on<sp/>the<sp/>locale.<sp/>Locale-dependent<sp/>functions<sp/>can<sp/>be<sp/>dangerous:</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>we<sp/>once<sp/>had<sp/>a<sp/>bug<sp/>involving<sp/>strcasecmp(&quot;iso&quot;,<sp/>&quot;ISO&quot;)<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>Turkish<sp/>locale!</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>(I&apos;m<sp/>not<sp/>really<sp/>sure<sp/>what<sp/>the<sp/>official<sp/>standard<sp/>says</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>about<sp/>the<sp/>sign<sp/>of<sp/>strcasecmp(&quot;Z&quot;,<sp/>&quot;[&quot;),<sp/>but<sp/>usually</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>we&apos;re<sp/>only<sp/>interested<sp/>in<sp/>whether<sp/>it&apos;s<sp/>zero.)</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ascii_strcasecmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c1,<sp/><ref refid="conv2dtest_8m_1a869bd946456256c347112f5798b5b504" kindref="member">c2</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;<sp/>s1++,<sp/>s2++)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s1<sp/>||<sp/>!*s2)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s1<sp/>==<sp/>*s2)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>*s1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c1<sp/>&amp;&amp;<sp/>c1<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>*s2;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c2<sp/>&amp;&amp;<sp/>c2<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>!=<sp/>c2)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*s1<sp/>-<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*s2;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>UTF-8<sp/>equivalents<sp/>of<sp/>the<sp/>C<sp/>library&apos;s<sp/>wctomb()<sp/>and<sp/>mbtowc().</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="share_2utf8_2charset_8h_1a5025ad6f8ae3111aca9589a33ed20906" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1a5025ad6f8ae3111aca9589a33ed20906" kindref="member">utf8_mbtowc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc,<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n<sp/>||<sp/>!s)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwc)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pwc<sp/>=<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0xc2)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>(s[1]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwc)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>*pwc<sp/>=<sp/>((c<sp/>&amp;<sp/>0x1f)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(s[1]<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0xf0)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0xf8)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0xfc)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0xfe)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>wc<sp/>=<sp/>*s++<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>))<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*s<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>wc<sp/>=<sp/>(wc<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(*s++<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>k<sp/>-<sp/>4)))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwc)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>*pwc<sp/>=<sp/>wc;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="share_2utf8_2charset_8h_1a5bddf47a6cd4855f67252a5265411076" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1abdbfa0bf21a1a826581a6e3e7650bda7" kindref="member">utf8_wctomb</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc1)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc<sp/>=<sp/>wc1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>7))<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>wc;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>11))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0xc0<sp/>|<sp/>(wc<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>(wc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0xe0<sp/>|<sp/>(wc<sp/>&gt;&gt;<sp/>12);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>(wc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>21))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0xf0<sp/>|<sp/>(wc<sp/>&gt;&gt;<sp/>18);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>(wc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>26))<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0xf8<sp/>|<sp/>(wc<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>18)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>(wc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&lt;<sp/>(1u<sp/>&lt;&lt;<sp/>31))<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0xfc<sp/>|<sp/>(wc<sp/>&gt;&gt;<sp/>30);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>18)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>((wc<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>0x80<sp/>|<sp/>(wc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>The<sp/>charset<sp/>&quot;object&quot;<sp/>and<sp/>methods.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="structcharset" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcharset" kindref="compound">charset</ref><sp/>{</highlight></codeline>
<codeline lineno="184" refid="structcharset_1a35a17409926016f4c01050cac42aecab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structcharset_1a35a17409926016f4c01050cac42aecab" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="185" refid="structcharset_1ae21c41c91c92a31fc7c01f5e5691ab58" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="structcharset_1ae21c41c91c92a31fc7c01f5e5691ab58" kindref="member">mbtowc</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="186" refid="structcharset_1a75074c655bc7a6d4f1b2214891894843" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="structcharset_1a75074c655bc7a6d4f1b2214891894843" kindref="member">wctomb</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*table,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc);</highlight></codeline>
<codeline lineno="187" refid="structcharset_1a0f53b6016491dd02ea1a9d752e445989" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structcharset_1a0f53b6016491dd02ea1a9d752e445989" kindref="member">map</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="share_2utf8_2charset_8h_1a8907beafdbe5d63010565ecdcd9cddcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1a8907beafdbe5d63010565ecdcd9cddcd" kindref="member">charset_mbtowc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcharset" kindref="compound">charset</ref><sp/>*<ref refid="structcharset" kindref="compound">charset</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*charset-&gt;<ref refid="structcharset_1ae21c41c91c92a31fc7c01f5e5691ab58" kindref="member">mbtowc</ref>)(charset-&gt;<ref refid="structcharset_1a0f53b6016491dd02ea1a9d752e445989" kindref="member">map</ref>,<sp/>pwc,<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/>n);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="share_2utf8_2charset_8h_1ae62e080a852bf3693ef4fcce908a69a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1ae62e080a852bf3693ef4fcce908a69a5" kindref="member">charset_wctomb</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcharset" kindref="compound">charset</ref><sp/>*<ref refid="structcharset" kindref="compound">charset</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*charset-&gt;<ref refid="structcharset_1a75074c655bc7a6d4f1b2214891894843" kindref="member">wctomb</ref>)(charset-&gt;<ref refid="structcharset_1a0f53b6016491dd02ea1a9d752e445989" kindref="member">map</ref>,<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/>wc);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="share_2utf8_2charset_8h_1a4083b6e424b5068195fdd1419cc6a07b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1a4083b6e424b5068195fdd1419cc6a07b" kindref="member">charset_max</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcharset" kindref="compound">charset</ref><sp/>*<ref refid="structcharset" kindref="compound">charset</ref>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>charset-&gt;<ref refid="structcharset_1a35a17409926016f4c01050cac42aecab" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>of<sp/>UTF-8.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbtowc_utf8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmap" kindref="compound">map</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)map;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1a5025ad6f8ae3111aca9589a33ed20906" kindref="member">utf8_mbtowc</ref>(pwc,<sp/>s,<sp/>n);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wctomb_utf8(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)map;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1abdbfa0bf21a1a826581a6e3e7650bda7" kindref="member">utf8_wctomb</ref>(s,<sp/>wc);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>of<sp/>US-ASCII.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>Probably<sp/>on<sp/>most<sp/>architectures<sp/>this<sp/>compiles<sp/>to<sp/>less<sp/>than<sp/>256<sp/>bytes</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>of<sp/>code,<sp/>so<sp/>we<sp/>can<sp/>save<sp/>space<sp/>by<sp/>not<sp/>having<sp/>a<sp/>table<sp/>for<sp/>this<sp/>one.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbtowc_ascii(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)map;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n<sp/>||<sp/>!s)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>wc<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*s;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&amp;<sp/>~0x7f)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwc)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>*pwc<sp/>=<sp/>wc;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wc<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wctomb_ascii(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)map;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&amp;<sp/>~0x7f)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>*s<sp/>=<sp/>wc;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>of<sp/>ISO-8859-1.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>Probably<sp/>on<sp/>most<sp/>architectures<sp/>this<sp/>compiles<sp/>to<sp/>less<sp/>than<sp/>256<sp/>bytes</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>of<sp/>code,<sp/>so<sp/>we<sp/>can<sp/>save<sp/>space<sp/>by<sp/>not<sp/>having<sp/>a<sp/>table<sp/>for<sp/>this<sp/>one.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbtowc_iso1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)map;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n<sp/>||<sp/>!s)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>wc<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*s;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&amp;<sp/>~0xff)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwc)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>*pwc<sp/>=<sp/>wc;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wc<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wctomb_iso1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)map;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>&amp;<sp/>~0xff)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>*s<sp/>=<sp/>wc;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>of<sp/>any<sp/>8-bit<sp/>charset.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="structmap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">map<sp/>{</highlight></codeline>
<codeline lineno="290" refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" kindref="member">from</ref>;</highlight></codeline>
<codeline lineno="291" refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__map" kindref="compound">inverse_map</ref><sp/>*<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbtowc_8bit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pwc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">map<sp/>*map<sp/>=<sp/>map1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>wc;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n<sp/>||<sp/>!s)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>wc<sp/>=<sp/>map-&gt;<ref refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" kindref="member">from</ref>[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*s];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc<sp/>==<sp/>0xffff)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwc)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>*pwc<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)wc;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wc<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>inverse<sp/>map<sp/>we<sp/>use<sp/>a<sp/>hash<sp/>table,<sp/>which<sp/>has<sp/>the<sp/>advantages</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>of<sp/>small<sp/>constant<sp/>memory<sp/>requirement<sp/>and<sp/>simple<sp/>memory<sp/>allocation,</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>but<sp/>the<sp/>disadvantage<sp/>of<sp/>slow<sp/>conversion<sp/>in<sp/>the<sp/>worst<sp/>case.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>need<sp/>real-time<sp/>performance<sp/>while<sp/>letting<sp/>a<sp/>potentially</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>malicious<sp/>user<sp/>define<sp/>their<sp/>own<sp/>map,<sp/>then<sp/>the<sp/>method<sp/>used<sp/>in</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>linux/drivers/char/consolemap.c<sp/>would<sp/>be<sp/>more<sp/>appropriate.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="structinverse__map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__map" kindref="compound">inverse_map</ref><sp/>{</highlight></codeline>
<codeline lineno="319" refid="structinverse__map_1a0972e8c2a20b9b571af50815217cb0b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>first[256];</highlight></codeline>
<codeline lineno="320" refid="structinverse__map_1ab1ed2a7a0fb1bc3e814d8bc04bb0269e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref>[256];</highlight></codeline>
<codeline lineno="321"><highlight class="normal">};</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>The<sp/>simple<sp/>hash<sp/>is<sp/>good<sp/>enough<sp/>for<sp/>this<sp/>application.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>Use<sp/>the<sp/>alternative<sp/>trivial<sp/>hashes<sp/>for<sp/>testing.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="share_2utf8_2charset_8c_1a44924d405463d034f87510503b0e4752" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH(i)<sp/>((i)<sp/>&amp;<sp/>0xff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>HASH(i)<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>HASH(i)<sp/>99<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__map" kindref="compound">inverse_map</ref><sp/>*make_inverse_map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__map" kindref="compound">inverse_map</ref><sp/>*to;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>used[256];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j,<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>to<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinverse__map" kindref="compound">inverse_map</ref>));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structinverse__map_1a0972e8c2a20b9b571af50815217cb0b2" kindref="member">first</ref>[i]<sp/>=<sp/>to-&gt;<ref refid="structinverse__map_1ab1ed2a7a0fb1bc3e814d8bc04bb0269e" kindref="member">next</ref>[i]<sp/>=<sp/>used[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref><sp/>(i<sp/>=<sp/>255;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from[i]<sp/>!=<sp/>0xffff)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/><ref refid="share_2utf8_2charset_8c_1a44924d405463d034f87510503b0e4752" kindref="member">HASH</ref>(from[i]);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structinverse__map_1ab1ed2a7a0fb1bc3e814d8bc04bb0269e" kindref="member">next</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>to-&gt;<ref refid="structinverse__map_1a0972e8c2a20b9b571af50815217cb0b2" kindref="member">first</ref>[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structinverse__map_1a0972e8c2a20b9b571af50815217cb0b2" kindref="member">first</ref>[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>]<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>used[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Point<sp/>the<sp/>empty<sp/>buckets<sp/>at<sp/>an<sp/>empty<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to-&gt;<ref refid="structinverse__map_1ab1ed2a7a0fb1bc3e814d8bc04bb0269e" kindref="member">next</ref>[i])</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>256)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>j++)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!used[j])</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structinverse__map_1a0972e8c2a20b9b571af50815217cb0b2" kindref="member">first</ref>[j]<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wctomb_8bit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*map1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wc1)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">map<sp/>*map<sp/>=<sp/>map1;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>wc<sp/>=<sp/>wc1;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wc1<sp/>&amp;<sp/>~0xffff)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1)<sp/></highlight><highlight class="comment">/*<sp/>Change<sp/>1<sp/>to<sp/>0<sp/>to<sp/>test<sp/>the<sp/>case<sp/>where<sp/>malloc<sp/>fails.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref>)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref><sp/>=<sp/>make_inverse_map(map-&gt;<ref refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" kindref="member">from</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map-&gt;<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref>)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>inverse<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>map-&gt;<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref>-&gt;<ref refid="structinverse__map_1a0972e8c2a20b9b571af50815217cb0b2" kindref="member">first</ref>[<ref refid="share_2utf8_2charset_8c_1a44924d405463d034f87510503b0e4752" kindref="member">HASH</ref>(wc)];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map-&gt;<ref refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" kindref="member">from</ref>[i]<sp/>==<sp/>wc)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>*s<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(i<sp/>=<sp/>map-&gt;<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref>-&gt;<ref refid="structinverse__map_1ab1ed2a7a0fb1bc3e814d8bc04bb0269e" kindref="member">next</ref>[i]))</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>don&apos;t<sp/>have<sp/>an<sp/>inverse<sp/>map,<sp/>so<sp/>do<sp/>a<sp/>linear<sp/>search.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map-&gt;<ref refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" kindref="member">from</ref>[i]<sp/>==<sp/>wc)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>*s<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>The<sp/>&quot;constructor&quot;<sp/>charset_find().</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="share_2utf8_2charset_8c_1a22eba806dea0d809bac58afdd8c07cdc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcharset" kindref="compound">charset</ref><sp/><ref refid="share_2utf8_2charset_8c_1a22eba806dea0d809bac58afdd8c07cdc" kindref="member">charset_utf8</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>6,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>&amp;mbtowc_utf8,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>&amp;wctomb_utf8,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>0</highlight></codeline>
<codeline lineno="411"><highlight class="normal">};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="share_2utf8_2charset_8c_1addde37031c7e1a24d18b50d5947fb5fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcharset" kindref="compound">charset</ref><sp/><ref refid="share_2utf8_2charset_8c_1addde37031c7e1a24d18b50d5947fb5fc" kindref="member">charset_iso1</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>1,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>&amp;mbtowc_iso1,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>&amp;wctomb_iso1,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>0</highlight></codeline>
<codeline lineno="418"><highlight class="normal">};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="share_2utf8_2charset_8c_1ac5527e04ae2ee6b5d657ed8eff8bbbd3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcharset" kindref="compound">charset</ref><sp/><ref refid="share_2utf8_2charset_8c_1ac5527e04ae2ee6b5d657ed8eff8bbbd3" kindref="member">charset_ascii</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>1,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>&amp;mbtowc_ascii,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>&amp;wctomb_ascii,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>0</highlight></codeline>
<codeline lineno="425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="share_2utf8_2charset_8h_1a46e1566f7a1a98855a39a90b11308263" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcharset" kindref="compound">charset</ref><sp/>*<ref refid="share_2utf8_2charset_8c_1a46e1566f7a1a98855a39a90b11308263" kindref="member">charset_find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*code)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>good<sp/>(MIME)<sp/>name.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>names[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].bad;<sp/>i++)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_strcasecmp(code,<sp/>names[i].<ref refid="charmaps_8h_1afe308d4985b5e0160df686b81d58a0c1" kindref="member">bad</ref>))<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>names[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].good;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Recognise<sp/>some<sp/>charsets<sp/>for<sp/>which<sp/>we<sp/>avoid<sp/>using<sp/>a<sp/>table.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_strcasecmp(code,<sp/></highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="share_2utf8_2charset_8c_1a22eba806dea0d809bac58afdd8c07cdc" kindref="member">charset_utf8</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_strcasecmp(code,<sp/></highlight><highlight class="stringliteral">&quot;US-ASCII&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="share_2utf8_2charset_8c_1ac5527e04ae2ee6b5d657ed8eff8bbbd3" kindref="member">charset_ascii</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_strcasecmp(code,<sp/></highlight><highlight class="stringliteral">&quot;ISO-8859-1&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="share_2utf8_2charset_8c_1addde37031c7e1a24d18b50d5947fb5fc" kindref="member">charset_iso1</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>a<sp/>mapping<sp/>for<sp/>a<sp/>simple<sp/>8-bit<sp/>encoding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].name;<sp/>i++)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_strcasecmp(code,<sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[i].<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>))<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[i].<ref refid="structcharset" kindref="compound">charset</ref>)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>charset));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[i].charset)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">map<sp/>*map<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>map));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[i].charset);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset-&gt;max<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset-&gt;mbtowc<sp/>=<sp/>&amp;mbtowc_8bit;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset-&gt;wctomb<sp/>=<sp/>&amp;wctomb_8bit;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset-&gt;map<sp/>=<sp/><ref refid="structcharset_1a0f53b6016491dd02ea1a9d752e445989" kindref="member">map</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="structmap_1acc02387f2f1cdfcdbe821c7f1a1241aa" kindref="member">from</ref><sp/>=<sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].map;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>inverse<sp/>mapping<sp/>is<sp/>created<sp/>when<sp/>required<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="charsetmap_8h_1a499a5ac1f472fe8cbb4852e7bd23c50b" kindref="member">maps</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].charset;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>Function<sp/>to<sp/>convert<sp/>a<sp/>buffer<sp/>from<sp/>one<sp/>encoding<sp/>to<sp/>another.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>Invalid<sp/>bytes<sp/>are<sp/>replaced<sp/>by<sp/>&apos;#&apos;,<sp/>and<sp/>characters<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>not<sp/>available<sp/>in<sp/>the<sp/>target<sp/>encoding<sp/>are<sp/>replaced<sp/>by<sp/>&apos;?&apos;.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>Each<sp/>of<sp/>TO<sp/>and<sp/>TOLEN<sp/>may<sp/>be<sp/>zero,<sp/>if<sp/>the<sp/>result<sp/>is<sp/>not<sp/>needed.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>The<sp/>output<sp/>buffer<sp/>is<sp/>null-terminated,<sp/>so<sp/>it<sp/>is<sp/>all<sp/>right<sp/>to</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>use<sp/>charset_convert(fromcode,<sp/>tocode,<sp/>s,<sp/>strlen(s),<sp/>&amp;t,<sp/>0).</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="share_2utf8_2charset_8h_1a74f30742d454300063ff81977ae83d39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="share_2utf8_2charset_8c_1a74f30742d454300063ff81977ae83d39" kindref="member">charset_convert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tocode,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fromlen,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="structmap_1a0ab58616d42e87e4b565ba7fbed693e5" kindref="member">to</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*tolen)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcharset" kindref="compound">charset</ref><sp/>*charset1,<sp/>*charset2;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tobuf,<sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,<sp/>*newbuf;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j,<sp/>wc;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>charset1<sp/>=<sp/><ref refid="share_2utf8_2charset_8c_1a46e1566f7a1a98855a39a90b11308263" kindref="member">charset_find</ref>(fromcode);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>charset2<sp/>=<sp/><ref refid="share_2utf8_2charset_8c_1a46e1566f7a1a98855a39a90b11308263" kindref="member">charset_find</ref>(tocode);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!charset1<sp/>||<sp/>!charset2<sp/>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>tobuf<sp/>=<sp/>safe_malloc_mul2add_(fromlen,<sp/></highlight><highlight class="comment">/*times*/</highlight><highlight class="normal">charset2-&gt;<ref refid="structcharset_1a35a17409926016f4c01050cac42aecab" kindref="member">max</ref>,<sp/></highlight><highlight class="comment">/*+*/</highlight><highlight class="normal">1);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tobuf)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>tobuf;<sp/>fromlen;<sp/>from<sp/>+=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>fromlen<sp/>-=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>p<sp/>+=<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/><ref refid="share_2utf8_2charset_8c_1a8907beafdbe5d63010565ecdcd9cddcd" kindref="member">charset_mbtowc</ref>(charset1,<sp/>&amp;wc,<sp/>from,<sp/>fromlen);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!i)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wc<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="share_2utf8_2charset_8c_1ae62e080a852bf3693ef4fcce908a69a5" kindref="member">charset_wctomb</ref>(charset2,<sp/>p,<sp/>wc);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="share_2utf8_2charset_8c_1ae62e080a852bf3693ef4fcce908a69a5" kindref="member">charset_wctomb</ref>(charset2,<sp/>p,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tolen)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>*tolen<sp/>=<sp/>p<sp/>-<sp/>tobuf;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>newbuf<sp/>=<sp/>realloc(tobuf,<sp/>p<sp/>-<sp/>tobuf);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>*to<sp/>=<sp/>newbuf<sp/>?<sp/>newbuf<sp/>:<sp/>tobuf;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>free(tobuf);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_CHARSET_ICONV<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c"/>
  </compounddef>
</doxygen>
