<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kind="class" language="C++" prot="public">
    <compoundname>Vamp::HostExt::PluginChannelAdapter</compoundname>
    <basecompoundref refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper" prot="public" virt="non-virtual">Vamp::HostExt::PluginWrapper</basecompoundref>
    <includes refid="_plugin_channel_adapter_8h" local="no">vamp-hostsdk/PluginChannelAdapter.h</includes>
    <innerclass refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1_1_impl" prot="public">Vamp::HostExt::PluginChannelAdapter::Impl</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ae3a74a2e6c4cd33dce9f4248e73c6701" prot="protected" static="no" mutable="no">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1_1_impl" kindref="compound">Impl</ref> *</type>
        <definition>Impl* Vamp::HostExt::PluginChannelAdapter::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="140" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a2cda2b672708264f9a33c43bad3acdd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vamp::HostExt::PluginChannelAdapter::PluginChannelAdapter</definition>
        <argsstring>(Plugin *plugin)</argsstring>
        <name>PluginChannelAdapter</name>
        <param>
          <type><ref refid="class_vamp_1_1_plugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> wrapping the given plugin. The adapter takes ownership of the plugin, which will be deleted when the adapter is deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="120" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginChannelAdapter.cpp" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a7bd79ac5febc8d3c499e7339476c07b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Vamp::HostExt::PluginChannelAdapter::~PluginChannelAdapter</definition>
        <argsstring>()</argsstring>
        <name>~PluginChannelAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="121" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginChannelAdapter.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ade0473c8fc54636431967cbf41649c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool Vamp::HostExt::PluginChannelAdapter::initialise</definition>
        <argsstring>(size_t channels, size_t stepSize, size_t blockSize)</argsstring>
        <name>initialise</name>
        <reimplements refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822">initialise</reimplements>
        <param>
          <type>size_t</type>
          <declname>inputChannels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise a plugin to prepare it for use with the given number of input channels, step size (window increment, in sample frames) and block size (window size, in sample frames).</para><para>The input sample rate should have been already specified at construction time.</para><para>Return true for successful initialisation, false if the number of input channels, step size and/or block size cannot be supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="123" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginChannelAdapter.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a294e663b4d9ec885791faa1b440571ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" kindref="member">FeatureSet</ref></type>
        <definition>PluginChannelAdapter::FeatureSet Vamp::HostExt::PluginChannelAdapter::process</definition>
        <argsstring>(const float *const *inputBuffers, RealTime timestamp)</argsstring>
        <name>process</name>
        <reimplements refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996">process</reimplements>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>inputBuffers</declname>
        </param>
        <param>
          <type><ref refid="struct_vamp_1_1_real_time" kindref="compound">RealTime</ref></type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process a single block of input data.</para><para>If the plugin&apos;s inputDomain is TimeDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize consecutive audio samples (the host will zero-pad as necessary). The timestamp in this case will be the real time in seconds of the start of the supplied block of samples.</para><para>If the plugin&apos;s inputDomain is FrequencyDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize/2+1 consecutive pairs of real and imaginary component floats corresponding to bins 0..(blockSize/2) of the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> output. That is, bin 0 (the first pair of floats) contains the DC output, up to bin blockSize/2 which contains the Nyquist-frequency output. There will therefore be blockSize+2 floats per channel in total. The timestamp will be the real time in seconds of the centre of the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> input window (i.e. the very first block passed to process might contain the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> of half a block of zero samples and the first half-block of the actual data, with a timestamp of zero).</para><para>Return any features that have become available after this process call. (These do not necessarily have to fall within the process block, except for OneSamplePerStep outputs.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="125" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginChannelAdapter.cpp" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ab0f65bf25df3fcbea2b950119b6c69f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" kindref="member">FeatureSet</ref></type>
        <definition>PluginChannelAdapter::FeatureSet Vamp::HostExt::PluginChannelAdapter::processInterleaved</definition>
        <argsstring>(const float *inputBuffer, RealTime timestamp)</argsstring>
        <name>processInterleaved</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>inputBuffer</declname>
        </param>
        <param>
          <type><ref refid="struct_vamp_1_1_real_time" kindref="compound">RealTime</ref></type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a294e663b4d9ec885791faa1b440571ed" kindref="member">process()</ref>, providing interleaved audio data with the number of channels passed to <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ade0473c8fc54636431967cbf41649c1c" kindref="member">initialise()</ref>. The adapter will de-interleave into temporary buffers as appropriate before calling <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a294e663b4d9ec885791faa1b440571ed" kindref="member">process()</ref>.</para><para><simplesect kind="note"><para>This function was introduced in version 1.4 of the <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin SDK. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="136" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginChannelAdapter.cpp" bodystart="91" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> is a <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin adapter that implements a policy for management of plugins that expect a different number of input channels from the number actually available in the source audio data.</para><para>A host using <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> may ignore the getMinChannelCount and getMaxChannelCount reported by the plugin, and still expect the plugin to run.</para><para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> implements the following policy:</para><para><itemizedlist>
<listitem><para>If the plugin supports the provided number of channels directly, <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> will just run the plugin as normal.</para></listitem><listitem><para>If the plugin only supports exactly one channel but more than one channel is provided, <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> will use the mean of the channels. This ensures that the resulting values remain within the same magnitude range as expected for mono data.</para></listitem><listitem><para>If the plugin requires more than one channel but exactly one is provided, the provided channel will be duplicated across all the plugin input channels.</para></listitem></itemizedlist>
</para><para>If none of the above apply:</para><para><itemizedlist>
<listitem><para>If the plugin requires more channels than are provided, the minimum acceptable number of channels will be produced by adding empty (zero valued) channels to those provided.</para></listitem><listitem><para>If the plugin requires fewer channels than are provided, the maximum acceptable number of channels will be produced by discarding the excess channels.</para></listitem></itemizedlist>
</para><para>Hosts requiring a different channel policy from the above will need to implement it themselves, instead of using <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref>.</para><para>Note that <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> does not override the minimum and maximum channel counts returned by the wrapped plugin. The host will need to be aware that it is using a <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref>, and be prepared to ignore these counts as necessary. (This contrasts with the approach used in <ref refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter" kindref="compound">PluginInputDomainAdapter</ref>, which aims to make the host completely unaware of which underlying input domain is in fact in use.)</para><para>(The rationale for this is that a host may wish to use the <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> but still discriminate in some way on the basis of the number of channels actually supported. For example, a simple stereo audio host may prefer to reject plugins that require more than two channels on the grounds that doesn&apos;t actually understand what they are for, rather than allow the channel adapter to make a potentially meaningless channel conversion for them.)</para><para>In every respect other than its management of channels, the <ref refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter" kindref="compound">PluginChannelAdapter</ref> behaves identically to the plugin that it wraps. The wrapped plugin will be deleted when the wrapper is deleted.</para><para><simplesect kind="note"><para>This class was introduced in version 1.1 of the <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin SDK. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="8908">
        <label>Vamp::Plugin</label>
        <link refid="class_vamp_1_1_plugin"/>
        <childnode refid="8909" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8909">
        <label>Vamp::PluginBase</label>
        <link refid="class_vamp_1_1_plugin_base"/>
      </node>
      <node id="8906">
        <label>Vamp::HostExt::PluginChannelAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter"/>
        <childnode refid="8907" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8907">
        <label>Vamp::HostExt::PluginWrapper</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper"/>
        <childnode refid="8908" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8912">
        <label>Vamp::Plugin</label>
        <link refid="class_vamp_1_1_plugin"/>
        <childnode refid="8913" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8913">
        <label>Vamp::PluginBase</label>
        <link refid="class_vamp_1_1_plugin_base"/>
      </node>
      <node id="8910">
        <label>Vamp::HostExt::PluginChannelAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter"/>
        <childnode refid="8911" relation="public-inheritance">
        </childnode>
        <childnode refid="8914" relation="usage">
          <edgelabel>m_impl</edgelabel>
        </childnode>
      </node>
      <node id="8911">
        <label>Vamp::HostExt::PluginWrapper</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper"/>
        <childnode refid="8912" relation="public-inheritance">
        </childnode>
        <childnode refid="8912" relation="usage">
          <edgelabel>m_plugin</edgelabel>
        </childnode>
      </node>
      <node id="8914">
        <label>Vamp::HostExt::PluginChannelAdapter::Impl</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1_1_impl"/>
        <childnode refid="8912" relation="usage">
          <edgelabel>m_plugin</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" line="113" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginChannelAdapter.h" bodystart="112" bodyend="141"/>
    <listofallmembers>
      <member refid="class_vamp_1_1_plugin_1a0730bc72c87fa02eb8d2854b233f7be1" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>FeatureList</name></member>
      <member refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>FeatureSet</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcaa30e7877ab33f76acbdca28607e6ab53" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>FrequencyDomain</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ae14f6ecb78be909c4cd5f0cdaed3c566" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getCopyright</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a7a312dd42d161064b70afd7ff24c0651" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getCurrentProgram</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ac334f699c0996055942785410d8a065c" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getDescription</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a4baa9e48f717c2b3e7f92496aa39d904" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getIdentifier</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a031aa818fd48fd0f4b5e1bf80c032870" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getInputDomain</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a59d5a2298951b317995675e664b1c7bb" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getMaker</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a985eb21f1827bfbc3950d6871b107a58" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getMaxChannelCount</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a2b28f1cf37d46a514f1e1411a6037bf8" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getMinChannelCount</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ac70a3265bb25aeb03f6dd8f8a0442088" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getName</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a02c8c01972affeea58b091335e791ace" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getOutputDescriptors</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a034920f56c8d7609a85447c42556048c" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getParameter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a3b075b8f950b344503f0d27ac0fe332e" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getParameterDescriptors</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a47e1acf1696813008324a915c9ba59c5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getPluginVersion</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a2c62a656313a819650656643a867ad01" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getPreferredBlockSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a0137d93d7019bacc31104836fb4d352e" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getPreferredStepSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1af3abaf717dc4b00cad5770ed6dfa01e1" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getPrograms</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a1dce55a75a32b08fc56a52a300d9fcbe" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getRemainingFeatures</name></member>
      <member refid="class_vamp_1_1_plugin_1abe13b3997a69fbcc09e2213faa352f91" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getType</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a74147fda6b44ff2169bd4a1eea0d46ff" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getVampApiVersion</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a653d0308e8e34881a8749b7631d00f05" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>getWrapper</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ade0473c8fc54636431967cbf41649c1c" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>initialise</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bc" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>InputDomain</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ae3a74a2e6c4cd33dce9f4248e73c6701" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>m_impl</name></member>
      <member refid="class_vamp_1_1_plugin_1a59b9dd82a4f4eb946cd0474cc81abc23" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>m_inputSampleRate</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ab4e40ecd98b445e1a2aa9e7baa280ea2" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>m_plugin</name></member>
      <member refid="class_vamp_1_1_plugin_1a30f531b8fb69fac41a24e3d2a6a08ed9" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>OutputList</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a3b6bb4bbd86affe1ca9deceea1aad4f8" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>ParameterList</name></member>
      <member refid="class_vamp_1_1_plugin_1a1b78c4f46c72ef345ed27f0b9bf20ac9" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>Plugin</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a2cda2b672708264f9a33c43bad3acdd8" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>PluginChannelAdapter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a35cc2d42f8322f5022e89859a79c97be" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>PluginWrapper</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a294e663b4d9ec885791faa1b440571ed" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>process</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ab0f65bf25df3fcbea2b950119b6c69f0" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>processInterleaved</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a7f66f00437b21e5f694fe02356b12f20" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>ProgramList</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ad19cc0614ba41cdc26ef3394c5146fe6" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>reset</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a074978333a74fdcf336a8a1d8ea20abf" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>selectProgram</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a651b15a5dc4c27942ac0c87c6092bfe5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>setParameter</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcad4a9f31b958a43a9757af7893aa2e7ff" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>TimeDomain</name></member>
      <member refid="class_vamp_1_1_plugin_1a42d3096f9c1f58b1876024cd8d9ab80b" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>~Plugin</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a3773b37c658cf22d7f135c575a28f5c5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>~PluginBase</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a7bd79ac5febc8d3c499e7339476c07b4" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>~PluginChannelAdapter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a7449a364d524de75352a4719fec2e1f5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginChannelAdapter</scope><name>~PluginWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
