<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lv2_2plugins_2eg-midigate_8lv2_2waflib_2_tools_2c__tests_8py" kind="file" language="Python">
    <compoundname>c_tests.py</compoundname>
    <innerclass refid="classwaflib_1_1_tools_1_1c__tests_1_1grep__for__endianness" prot="public">waflib::Tools::c_tests::grep_for_endianness</innerclass>
    <innernamespace refid="namespacewaflib_1_1_tools_1_1c__tests">waflib::Tools::c_tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!<sp/>/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>encoding:<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WARNING!<sp/>Do<sp/>not<sp/>edit!<sp/>http://waf.googlecode.com/git/docs/wafbook/single.html#_obtaining_the_waf_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>waflib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Task</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_configure" kindref="compound">waflib.Configure</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>conf</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_task_gen" kindref="compound">waflib.TaskGen</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>feature,before_method,after_method</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="9"><highlight class="normal">LIB_CODE=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">#define<sp/>testEXPORT<sp/>__declspec(dllexport)</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">#else</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">#define<sp/>testEXPORT</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral">testEXPORT<sp/>int<sp/>lib_func(void)<sp/>{<sp/>return<sp/>9;<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">MAIN_CODE=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">#define<sp/>testEXPORT<sp/>__declspec(dllimport)</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">#else</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">#define<sp/>testEXPORT</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">testEXPORT<sp/>int<sp/>lib_func(void);</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char<sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(void)argc;<sp/>(void)argv;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>!(lib_func()<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;link_lib_test&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a56d188988dd3babc77f1d283e1f8c1b1" kindref="member">before_method</ref>(</highlight><highlight class="stringliteral">&apos;process_source&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1c__tests_1a58fcfbe9b3ba09e1a057dc1276435776" kindref="member">link_lib_test_fun</ref>(self):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">write_test_file(task):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task.outputs[0].write(task.generator.code)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>rpath=[]</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>getattr(self,</highlight><highlight class="stringliteral">&apos;add_rpath&apos;</highlight><highlight class="normal">,</highlight><highlight class="keyword">False</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpath=[self.bld.path.get_bld().abspath()]</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>mode=self.mode</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m=</highlight><highlight class="stringliteral">&apos;%s<sp/>%s&apos;</highlight><highlight class="normal">%(mode,mode)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ex=self.test_exec<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="stringliteral">&apos;test_exec&apos;</highlight><highlight class="keywordflow">or</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>bld=self.bld</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>bld(rule=write_test_file,target=</highlight><highlight class="stringliteral">&apos;test.&apos;</highlight><highlight class="normal">+mode,code=LIB_CODE)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>bld(rule=write_test_file,target=</highlight><highlight class="stringliteral">&apos;main.&apos;</highlight><highlight class="normal">+mode,code=MAIN_CODE)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>bld(features=</highlight><highlight class="stringliteral">&apos;%sshlib&apos;</highlight><highlight class="normal">%m,source=</highlight><highlight class="stringliteral">&apos;test.&apos;</highlight><highlight class="normal">+mode,target=</highlight><highlight class="stringliteral">&apos;test&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>bld(features=</highlight><highlight class="stringliteral">&apos;%sprogram<sp/>%s&apos;</highlight><highlight class="normal">%(m,ex),source=</highlight><highlight class="stringliteral">&apos;main.&apos;</highlight><highlight class="normal">+mode,target=</highlight><highlight class="stringliteral">&apos;app&apos;</highlight><highlight class="normal">,use=</highlight><highlight class="stringliteral">&apos;test&apos;</highlight><highlight class="normal">,rpath=rpath)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1c__tests_1a6769fa909685b6d42bde7746f3e59a64" kindref="member">check_library</ref>(self,mode=None,test_exec=True):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>mode:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode=</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.env.CXX:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode=</highlight><highlight class="stringliteral">&apos;cxx&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>self.check(compile_filename=[],features=</highlight><highlight class="stringliteral">&apos;link_lib_test&apos;</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>libraries&apos;</highlight><highlight class="normal">,mode=mode,test_exec=test_exec,)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">INLINE_CODE=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">typedef<sp/>int<sp/>foo_t;</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">static<sp/>%s<sp/>foo_t<sp/>static_foo<sp/>()<sp/>{return<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">%s<sp/>foo_t<sp/>foo<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">INLINE_VALUES=[</highlight><highlight class="stringliteral">&apos;inline&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;__inline__&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;__inline&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="60"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1c__tests_1a8c36c48a71d56e13d6a7973972ef7fb8" kindref="member">check_inline</ref>(self,**kw):</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>self.start_msg(</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>inline&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;define_name&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kw:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;define_name&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;INLINE_MACRO&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;features&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kw:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.env.CXX:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;features&apos;</highlight><highlight class="normal">]=[</highlight><highlight class="stringliteral">&apos;cxx&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;features&apos;</highlight><highlight class="normal">]=[</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>INLINE_VALUES:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;fragment&apos;</highlight><highlight class="normal">]=INLINE_CODE%(x,x)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.check(**kw)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>self.errors.ConfigurationError:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.end_msg(x)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x!=</highlight><highlight class="stringliteral">&apos;inline&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.define(</highlight><highlight class="stringliteral">&apos;inline&apos;</highlight><highlight class="normal">,x,quote=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>self.fatal(</highlight><highlight class="stringliteral">&apos;could<sp/>not<sp/>use<sp/>inline<sp/>functions&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">LARGE_FRAGMENT=</highlight><highlight class="stringliteral">&apos;&apos;&apos;#include<sp/>&lt;unistd.h&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char<sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(void)argc;<sp/>(void)argv;</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>!(sizeof(off_t)<sp/>&gt;=<sp/>8);</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1c__tests_1ac29778f60925677c62b37a4da6a94322" kindref="member">check_large_file</ref>(self,**kw):</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;define_name&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kw:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;define_name&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;HAVE_LARGEFILE&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;execute&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kw:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;execute&apos;</highlight><highlight class="normal">]=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;features&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kw:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.env.CXX:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;features&apos;</highlight><highlight class="normal">]=[</highlight><highlight class="stringliteral">&apos;cxx&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;cxxprogram&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;features&apos;</highlight><highlight class="normal">]=[</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;cprogram&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;fragment&apos;</highlight><highlight class="normal">]=LARGE_FRAGMENT</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;msg&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>large<sp/>file<sp/>support&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.env.DEST_BINFMT!=</highlight><highlight class="stringliteral">&apos;pe&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=self.check(**kw)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>self.errors.ConfigurationError:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;msg&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>-D_FILE_OFFSET_BITS=64&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;defines&apos;</highlight><highlight class="normal">]=[</highlight><highlight class="stringliteral">&apos;_FILE_OFFSET_BITS=64&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=self.check(**kw)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>self.errors.ConfigurationError:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.define(</highlight><highlight class="stringliteral">&apos;_FILE_OFFSET_BITS&apos;</highlight><highlight class="normal">,64)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>self.fatal(</highlight><highlight class="stringliteral">&apos;There<sp/>is<sp/>no<sp/>support<sp/>for<sp/>large<sp/>files&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">ENDIAN_FRAGMENT=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral">short<sp/>int<sp/>ascii_mm[]<sp/>=<sp/>{<sp/>0x4249,<sp/>0x4765,<sp/>0x6E44,<sp/>0x6961,<sp/>0x6E53,<sp/>0x7953,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">short<sp/>int<sp/>ascii_ii[]<sp/>=<sp/>{<sp/>0x694C,<sp/>0x5454,<sp/>0x656C,<sp/>0x6E45,<sp/>0x6944,<sp/>0x6E61,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">int<sp/>use_ascii<sp/>(int<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>ascii_mm[i]<sp/>+<sp/>ascii_ii[i];</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral">short<sp/>int<sp/>ebcdic_ii[]<sp/>=<sp/>{<sp/>0x89D3,<sp/>0xE3E3,<sp/>0x8593,<sp/>0x95C5,<sp/>0x89C4,<sp/>0x9581,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral">short<sp/>int<sp/>ebcdic_mm[]<sp/>=<sp/>{<sp/>0xC2C9,<sp/>0xC785,<sp/>0x95C4,<sp/>0x8981,<sp/>0x95E2,<sp/>0xA8E2,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral">int<sp/>use_ebcdic<sp/>(int<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>ebcdic_mm[i]<sp/>+<sp/>ebcdic_ii[i];</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral">extern<sp/>int<sp/>foo;</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">grep_for_endianness(Task.Task):</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>color=</highlight><highlight class="stringliteral">&apos;PINK&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classwaflib_1_1_tools_1_1c__tests_1_1grep__for__endianness_1a81afcbe7adfc10254bfd377a958abc56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1c__tests_1_1grep__for__endianness_1a81afcbe7adfc10254bfd377a958abc56" kindref="member">run</ref>(self):</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt=self.<ref refid="classwaflib_1_1_task_1_1_task_1a84db2881aae1bcc2ad19c0eecf24804c" kindref="member">inputs</ref>[0].read(flags=</highlight><highlight class="stringliteral">&apos;rb&apos;</highlight><highlight class="normal">).<ref refid="moxc_8c_1ae754a0f850e267dd2739e1ee8d0f031c" kindref="member">decode</ref>(</highlight><highlight class="stringliteral">&apos;iso8859-1&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>txt.find(</highlight><highlight class="stringliteral">&apos;LiTTleEnDian&apos;</highlight><highlight class="normal">)&gt;-1:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.generator.tmp.append(</highlight><highlight class="stringliteral">&apos;little&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>txt.find(</highlight><highlight class="stringliteral">&apos;BIGenDianSyS&apos;</highlight><highlight class="normal">)&gt;-1:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.generator.tmp.append(</highlight><highlight class="stringliteral">&apos;big&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">-1</highlight></codeline>
<codeline lineno="143"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;grep_for_endianness&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a3411cecc8687a44154a45078c3224fb7" kindref="member">after_method</ref>(</highlight><highlight class="stringliteral">&apos;process_source&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1c__tests_1a94db04af071d40c6a2b181ae0925389c" kindref="member">grep_for_endianness_fun</ref>(self):</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>self.create_task(</highlight><highlight class="stringliteral">&apos;grep_for_endianness&apos;</highlight><highlight class="normal">,self.compiled_tasks[0].outputs[0])</highlight></codeline>
<codeline lineno="147"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1c__tests_1a83231aa06753183ca283a2d9b4cf39ce" kindref="member">check_endianness</ref>(self):</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=[]</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_msg(self):</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp[0]</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>self.check(fragment=ENDIAN_FRAGMENT,features=</highlight><highlight class="stringliteral">&apos;c<sp/>grep_for_endianness&apos;</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&quot;Checking<sp/>for<sp/>endianness&quot;</highlight><highlight class="normal">,define=</highlight><highlight class="stringliteral">&apos;ENDIANNESS&apos;</highlight><highlight class="normal">,tmp=tmp,okmsg=check_msg)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp[0]</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-midigate.lv2/waflib/Tools/c_tests.py"/>
  </compounddef>
</doxygen>
