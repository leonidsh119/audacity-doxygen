<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_simple_block_file" kind="class" language="C++" prot="public">
    <compoundname>SimpleBlockFile</compoundname>
    <basecompoundref refid="class_block_file" prot="public" virt="non-virtual">BlockFile</basecompoundref>
    <derivedcompoundref refid="class_o_d_decode_block_file" prot="public" virt="non-virtual">ODDecodeBlockFile</derivedcompoundref>
    <includes refid="_simple_block_file_8h" local="no">SimpleBlockFile.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_simple_block_file_1aa847bc2ca7232696fbebf79e6a72443b" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_simple_block_file_cache" kindref="compound">SimpleBlockFileCache</ref></type>
        <definition>SimpleBlockFileCache SimpleBlockFile::mCache</definition>
        <argsstring></argsstring>
        <name>mCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="93" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_simple_block_file_1ad40b5fc5ff95595d2717c0fa0dd75596" prot="protected" static="no" mutable="no">
        <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
        <definition>sampleFormat SimpleBlockFile::mFormat</definition>
        <argsstring></argsstring>
        <name>mFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="95" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_simple_block_file_1a10f32728f1bed4cfeca2c2fde88d3395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SimpleBlockFile::SimpleBlockFile</definition>
        <argsstring>(wxFileName baseFileName, samplePtr sampleData, sampleCount sampleLen, sampleFormat format, bool allowDeferredWrite=false, bool bypassCache=false)</argsstring>
        <name>SimpleBlockFile</name>
        <param>
          <type>wxFileName</type>
          <declname>baseFileName</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref></type>
          <declname>sampleData</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref></type>
          <declname>sampleLen</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>allowDeferredWrite</declname>
          <defval><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></defval>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>bypassCache</declname>
          <defval><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></defval>
        </param>
        <briefdescription>
<para>Create a disk file and write summary and sample data to it. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="class_simple_block_file" kindref="compound">SimpleBlockFile</ref> based on sample data and writes it to disk.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename to use, but without an extension. This constructor will add the appropriate extension (.au in this case). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>The sample data to be written to this block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to be written to this block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the given samples. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowDeferredWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow deferred write-caching </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="51" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="98" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1ac61d2c610ba38629c4e32d12350af339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SimpleBlockFile::SimpleBlockFile</definition>
        <argsstring>(wxFileName existingFile, sampleCount len, float min, float max, float rms)</argsstring>
        <name>SimpleBlockFile</name>
        <param>
          <type>wxFileName</type>
          <declname>existingFile</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rms</declname>
        </param>
        <briefdescription>
<para>Create the memory structure to refer to the given block file. </para>        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="class_simple_block_file" kindref="compound">SimpleBlockFile</ref> memory structure that will point to an existing block file. This file must exist and be a valid block file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>existingFile</parametername>
</parameternamelist>
<parameterdescription>
<para>The disk file this <ref refid="class_simple_block_file" kindref="compound">SimpleBlockFile</ref> should use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="57" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="138" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1a31f9eb32ce25d44c16414851e527e32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>SimpleBlockFile::~SimpleBlockFile</definition>
        <argsstring>()</argsstring>
        <name>~SimpleBlockFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="60" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="152" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1addcddf2634ca5ec580fa69d0d603d6d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool SimpleBlockFile::ReadSummary</definition>
        <argsstring>(void *data) override</argsstring>
        <name>ReadSummary</name>
        <reimplements refid="class_block_file_1ab9edd6f8cd08f7075b5c878c9a4ea121">ReadSummary</reimplements>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read the summary section of the disk file. </para>        </briefdescription>
        <detaileddescription>
<para>Read the summary section of the disk file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write the data to. It must be at least mSummaryinfo.totalSummaryBytes long. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="65" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="337" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1aa47fae91065e62427058eca80c9e3db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int SimpleBlockFile::ReadData</definition>
        <argsstring>(samplePtr data, sampleFormat format, sampleCount start, sampleCount len) override</argsstring>
        <name>ReadData</name>
        <reimplements refid="class_block_file_1ad1355b9c8421a6f1a6b6d8cf3d3f073e">ReadData</reimplements>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read the data section of the disk file. </para>        </briefdescription>
        <detaileddescription>
<para>Read the data portion of the block file using libsndfile. Convert it to the given format if it is not already.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer where the data will be stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format the data will be stored in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in this block file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to read </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="67" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="386" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1afb58bbeb0e3c55dea13ba4db37f8acb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_block_file" kindref="compound">BlockFile</ref> *</type>
        <definition>BlockFile * SimpleBlockFile::Copy</definition>
        <argsstring>(wxFileName newFileName) override</argsstring>
        <name>Copy</name>
        <reimplements refid="class_block_file_1a8f7cc554062ef6d356eb0ab7f3229df5">Copy</reimplements>
        <param>
          <type>wxFileName</type>
          <declname>newFileName</declname>
        </param>
        <briefdescription>
<para>Create a NEW block file identical to this one. </para>        </briefdescription>
        <detaileddescription>
<para>Create a copy of this <ref refid="class_block_file" kindref="compound">BlockFile</ref>, but using a different disk file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the NEW file to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="71" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="535" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1a7bd4085ca1c7b284cbe79bd2353a0f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void SimpleBlockFile::SaveXML</definition>
        <argsstring>(XMLWriter &amp;xmlFile) override</argsstring>
        <name>SaveXML</name>
        <reimplements refid="class_block_file_1a62527189fe371325e23f3802f20282f8">SaveXML</reimplements>
        <param>
          <type><ref refid="class_x_m_l_writer" kindref="compound">XMLWriter</ref> &amp;</type>
          <declname>xmlFile</declname>
        </param>
        <briefdescription>
<para>Write an XML representation of this file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="73" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="472" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1a22780e266548fb57b029706726f01472" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>wxLongLong</type>
        <definition>wxLongLong SimpleBlockFile::GetSpaceUsage</definition>
        <argsstring>() override</argsstring>
        <name>GetSpaceUsage</name>
        <reimplements refid="class_block_file_1a8f1eb8b4aecfb5574b9a0054eb431546">GetSpaceUsage</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="75" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="543" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1ad0ed207e9d4d21558f14b0e0df7cbb72" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void SimpleBlockFile::Recover</definition>
        <argsstring>() override</argsstring>
        <name>Recover</name>
        <reimplements refid="class_block_file_1ab57c263f507f60b0072390d4e876ea57">Recover</reimplements>
        <briefdescription>
<para>if the on-disk state disappeared, either recover it (if it was </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="76" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="599" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1abc2e6b30cab196f8bdd325c586176375" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool SimpleBlockFile::GetNeedWriteCacheToDisk</definition>
        <argsstring>() override</argsstring>
        <name>GetNeedWriteCacheToDisk</name>
        <reimplements refid="class_block_file_1aa01d73c1d5f1951e0ff571f498e902c2">GetNeedWriteCacheToDisk</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="80" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="637" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1a2c6893a7505bab05c0baac204f68ff1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void SimpleBlockFile::WriteCacheToDisk</definition>
        <argsstring>() override</argsstring>
        <name>WriteCacheToDisk</name>
        <reimplements refid="class_block_file_1a037faa0473e04e4c21a3c96fe274b02f">WriteCacheToDisk</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="81" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="627" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1ab7a5974aa345db6e27da33bf535a4c4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool SimpleBlockFile::GetNeedFillCache</definition>
        <argsstring>() override</argsstring>
        <name>GetNeedFillCache</name>
        <reimplements refid="class_block_file_1a66f977ae0fc5cf2a58ecc359d8464b98">GetNeedFillCache</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="83" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1a6bc1e4d2f9dcc7783f12447a768850b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void SimpleBlockFile::FillCache</definition>
        <argsstring>() override</argsstring>
        <name>FillCache</name>
        <reimplements refid="class_block_file_1aa228bcd50e100ba28031dece974b73a8">FillCache</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="84" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="268" bodyend="331"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_simple_block_file_1a9aba59fe42619754b5976ed85af2a194" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_block_file" kindref="compound">BlockFile</ref> *</type>
        <definition>BlockFile * SimpleBlockFile::BuildFromXML</definition>
        <argsstring>(DirManager &amp;dm, const wxChar **attrs)</argsstring>
        <name>BuildFromXML</name>
        <param>
          <type><ref refid="class_dir_manager" kindref="compound">DirManager</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxChar **</type>
          <declname>attrs</declname>
        </param>
        <briefdescription>
<para>static </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="78" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="489" bodyend="530"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_simple_block_file_1a80703489b7ca1677e8823273f5537c9c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool SimpleBlockFile::WriteSimpleBlockFile</definition>
        <argsstring>(samplePtr sampleData, sampleCount sampleLen, sampleFormat format, void *summaryData)</argsstring>
        <name>WriteSimpleBlockFile</name>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref></type>
          <declname>sampleData</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref></type>
          <declname>sampleLen</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>summaryData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="88" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="161" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_block_file_1a7d5c2132162fed40b81a09c3ef7fd8a0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void SimpleBlockFile::ReadIntoCache</definition>
        <argsstring>()</argsstring>
        <name>ReadIntoCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_simple_block_file_1a3c7bc7cce33cbbd6b4120ed3005b988f" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool SimpleBlockFile::GetCache</definition>
        <argsstring>()</argsstring>
        <name>GetCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="90" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.cpp" bodystart="642" bodyend="660"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="class_block_file" kindref="compound">BlockFile</ref> that reads and writes uncompressed data using libsndfile. </para>    </briefdescription>
    <detaileddescription>
<para>A block file that writes the audio data to an .au file and reads it back using libsndfile.</para><para>There are two ways to construct a simple block file. One is to supply data and have the constructor write the file. The other is for when the file already exists and we simply want to create the data structure to refer to it.</para><para>The block file can be cached in two ways. Caching is enabled if the preference &quot;/Directories/CacheBlockFiles&quot; is set, otherwise disabled. The default is to disable caching.</para><para>Read-caching: If caching is enabled, all block files will always be read-cached. Block files on disk will be read as soon as they are created and held in memory. New block files will be written to disk, but held in memory, so they are never read from disk in the current session.</para><para>Write-caching: If caching is enabled and the parameter allowDeferredWrite is enabled at the block file constructor, NEW block files are held in memory and written to disk only when <ref refid="class_simple_block_file_1a2c6893a7505bab05c0baac204f68ff1d" kindref="member">WriteCacheToDisk()</ref> is called. This is used during recording to prevent disk access. After recording, <ref refid="class_simple_block_file_1a2c6893a7505bab05c0baac204f68ff1d" kindref="member">WriteCacheToDisk()</ref> will be called on all block files and they will be written to disk. During normal editing, no write cache is active, that is, any block files will be written to disk instantly.</para><para>Even with write cache, auto recovery during normal editing will work as expected. However, auto recovery during recording will not work (not even manual auto recovery, because the files are never written physically to disk). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="10192">
        <label>SimpleBlockFile</label>
        <link refid="class_simple_block_file"/>
        <childnode refid="10193" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10193">
        <label>BlockFile</label>
        <link refid="class_block_file"/>
      </node>
      <node id="10194">
        <label>ODDecodeBlockFile</label>
        <link refid="class_o_d_decode_block_file"/>
        <childnode refid="10192" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10197">
        <label>SummaryInfo</label>
        <link refid="class_summary_info"/>
      </node>
      <node id="10195">
        <label>SimpleBlockFile</label>
        <link refid="class_simple_block_file"/>
        <childnode refid="10196" relation="public-inheritance">
        </childnode>
        <childnode refid="10198" relation="usage">
          <edgelabel>mCache</edgelabel>
        </childnode>
      </node>
      <node id="10196">
        <label>BlockFile</label>
        <link refid="class_block_file"/>
        <childnode refid="10197" relation="usage">
          <edgelabel>mSummaryInfo</edgelabel>
        </childnode>
      </node>
      <node id="10198">
        <label>SimpleBlockFileCache</label>
        <link refid="struct_simple_block_file_cache"/>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" line="45" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/blockfile/SimpleBlockFile.h" bodystart="45" bodyend="96"/>
    <listofallmembers>
      <member refid="class_block_file_1a26e78f672ba0d663668b5aa7e7f7902b" prot="public" virt="non-virtual"><scope>SimpleBlockFile</scope><name>BlockFile</name></member>
      <member refid="class_simple_block_file_1a9aba59fe42619754b5976ed85af2a194" prot="public" virt="non-virtual"><scope>SimpleBlockFile</scope><name>BuildFromXML</name></member>
      <member refid="class_block_file_1a87b1269de50226600c5f52729117be30" prot="protected" virt="virtual"><scope>SimpleBlockFile</scope><name>CalcSummary</name></member>
      <member refid="class_block_file_1a4eda965a6ab0b7019b3fe1e12c93e969" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>CloseLock</name></member>
      <member refid="class_simple_block_file_1afb58bbeb0e3c55dea13ba4db37f8acb4" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>Copy</name></member>
      <member refid="class_block_file_1a2850975073dae96a78ac8b8e35ac376d" prot="public" virt="non-virtual"><scope>SimpleBlockFile</scope><name>Deinit</name></member>
      <member refid="class_simple_block_file_1a6bc1e4d2f9dcc7783f12447a768850b6" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>FillCache</name></member>
      <member refid="class_block_file_1abb3580667f6451b2ab0d4cc1a45f7a7a" prot="protected" virt="virtual"><scope>SimpleBlockFile</scope><name>FixSummary</name></member>
      <member refid="class_simple_block_file_1a3c7bc7cce33cbbd6b4120ed3005b988f" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>GetCache</name></member>
      <member refid="class_block_file_1a07fa90d9e26b0f5c4bc76716aff0fa87" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetFileName</name></member>
      <member refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetLength</name></member>
      <member refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetMinMax</name></member>
      <member refid="class_block_file_1abae40b15d56cb0757abfd57ff036634a" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetMinMax</name></member>
      <member refid="class_simple_block_file_1ab7a5974aa345db6e27da33bf535a4c4c" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetNeedFillCache</name></member>
      <member refid="class_simple_block_file_1abc2e6b30cab196f8bdd325c586176375" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetNeedWriteCacheToDisk</name></member>
      <member refid="class_simple_block_file_1a22780e266548fb57b029706726f01472" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>GetSpaceUsage</name></member>
      <member refid="class_block_file_1a9969d478c861eae0bdb98b71176906cf" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>IsAlias</name></member>
      <member refid="class_block_file_1a8908840cad2f547172b3a2373f9dd347" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>IsDataAvailable</name></member>
      <member refid="class_block_file_1a6f4769dbd80bb4a14e7d28fdad672ded" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>IsLocked</name></member>
      <member refid="class_block_file_1ada91556581464e844478f51762f50a70" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>IsSummaryAvailable</name></member>
      <member refid="class_block_file_1ac7817525642f53db4350e365971fddcc" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>IsSummaryBeingComputed</name></member>
      <member refid="class_block_file_1a5380b2450594af576dfd122cad12be1c" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>Lock</name></member>
      <member refid="class_block_file_1ab3d2edb6eb43083e2126c15b1c160d83" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>LockRead</name></member>
      <member refid="class_simple_block_file_1aa847bc2ca7232696fbebf79e6a72443b" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mCache</name></member>
      <member refid="class_block_file_1ab4d7e450d154ad4ccee1d0f4a26093f0" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mFileName</name></member>
      <member refid="class_simple_block_file_1ad40b5fc5ff95595d2717c0fa0dd75596" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mFormat</name></member>
      <member refid="class_block_file_1a732a85cd5906a03310bd23fc91b83d40" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mLen</name></member>
      <member refid="class_block_file_1abda14ef73ea31a585b26e289a99ac356" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mMax</name></member>
      <member refid="class_block_file_1a733757c3a2c9d2e51beab8acbc86f913" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mMin</name></member>
      <member refid="class_block_file_1a9b863f624b2d76a5ec29390cebed698f" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mRMS</name></member>
      <member refid="class_block_file_1a670ed2ad2e13a94e3fb7c2ae32785811" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mSilentLog</name></member>
      <member refid="class_block_file_1a4c81c30a570684d5287ed58acd3da259" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>mSummaryInfo</name></member>
      <member refid="class_block_file_1a3f7acc98f1761d78cccbd031314a33ea" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>Read256</name></member>
      <member refid="class_block_file_1acf929dfa98eab1cbd93b7d79394bc141" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>Read64K</name></member>
      <member refid="class_simple_block_file_1aa47fae91065e62427058eca80c9e3db0" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>ReadData</name></member>
      <member refid="class_simple_block_file_1a7d5c2132162fed40b81a09c3ef7fd8a0" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>ReadIntoCache</name></member>
      <member refid="class_simple_block_file_1addcddf2634ca5ec580fa69d0d603d6d0" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>ReadSummary</name></member>
      <member refid="class_simple_block_file_1ad0ed207e9d4d21558f14b0e0df7cbb72" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>Recover</name></member>
      <member refid="class_simple_block_file_1a7bd4085ca1c7b284cbe79bd2353a0f60" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>SaveXML</name></member>
      <member refid="class_block_file_1a3d4e44c3aacfcaa78e23c8868e8c3760" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>SetFileName</name></member>
      <member refid="class_block_file_1a9a6903a5c87598f8dc92041351a271d8" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>SetLength</name></member>
      <member refid="class_block_file_1a8db50090685c558873cddb71ace1d309" prot="public" virt="non-virtual"><scope>SimpleBlockFile</scope><name>SilenceLog</name></member>
      <member refid="class_simple_block_file_1a10f32728f1bed4cfeca2c2fde88d3395" prot="public" virt="non-virtual"><scope>SimpleBlockFile</scope><name>SimpleBlockFile</name></member>
      <member refid="class_simple_block_file_1ac61d2c610ba38629c4e32d12350af339" prot="public" virt="non-virtual"><scope>SimpleBlockFile</scope><name>SimpleBlockFile</name></member>
      <member refid="class_block_file_1addbc143efdfd7f74a7c6beed6023745f" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>Unlock</name></member>
      <member refid="class_block_file_1aff31d5108eaf81313f3cde9f93704e2d" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>UnlockRead</name></member>
      <member refid="class_simple_block_file_1a2c6893a7505bab05c0baac204f68ff1d" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>WriteCacheToDisk</name></member>
      <member refid="class_simple_block_file_1a80703489b7ca1677e8823273f5537c9c" prot="protected" virt="non-virtual"><scope>SimpleBlockFile</scope><name>WriteSimpleBlockFile</name></member>
      <member refid="class_block_file_1ac6dd550c49ac5c86d7e8c13bbedc76e6" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>~BlockFile</name></member>
      <member refid="class_simple_block_file_1a31f9eb32ce25d44c16414851e527e32c" prot="public" virt="virtual"><scope>SimpleBlockFile</scope><name>~SimpleBlockFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
