<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_o_d_manager_8cpp" kind="file" language="C++">
    <compoundname>ODManager.cpp</compoundname>
    <includes refid="_o_d_manager_8h" local="yes">ODManager.h</includes>
    <includes refid="_o_d_task_8h" local="yes">ODTask.h</includes>
    <includes refid="_o_d_task_thread_8h" local="yes">ODTaskThread.h</includes>
    <includes refid="_o_d_wave_track_task_queue_8h" local="yes">ODWaveTrackTaskQueue.h</includes>
    <includes refid="_project_8h" local="yes">../Project.h</includes>
    <includes refid="_non_gui_thread_8h" local="no">NonGuiThread.h</includes>
    <includes local="no">wx/utils.h</includes>
    <includes local="no">wx/wx.h</includes>
    <includes local="no">wx/thread.h</includes>
    <includes local="no">wx/event.h</includes>
    <incdepgraph>
      <node id="49905">
        <label>wx/dir.h</label>
      </node>
      <node id="49914">
        <label>wx/choice.h</label>
      </node>
      <node id="49890">
        <label>wx/hashmap.h</label>
      </node>
      <node id="49942">
        <label>toolbars/SelectionBarListener.h</label>
        <link refid="_selection_bar_listener_8h"/>
      </node>
      <node id="49940">
        <label>wx/gauge.h</label>
      </node>
      <node id="49906">
        <label>wx/event.h</label>
      </node>
      <node id="49876">
        <label>wx/ffile.h</label>
      </node>
      <node id="49929">
        <label>audacity/ModuleInterface.h</label>
        <link refid="_module_interface_8h"/>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49921" relation="include">
        </childnode>
        <childnode refid="49930" relation="include">
        </childnode>
      </node>
      <node id="49870">
        <label>ODTask.h</label>
        <link refid="_o_d_task_8h"/>
        <childnode refid="49871" relation="include">
        </childnode>
        <childnode refid="49874" relation="include">
        </childnode>
        <childnode refid="49886" relation="include">
        </childnode>
        <childnode refid="49869" relation="include">
        </childnode>
        <childnode refid="49949" relation="include">
        </childnode>
      </node>
      <node id="49947">
        <label>wx/dcclient.h</label>
      </node>
      <node id="49904">
        <label>wx/cmdline.h</label>
      </node>
      <node id="49920">
        <label>audacity/EffectInterface.h</label>
        <link refid="_effect_interface_8h"/>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49921" relation="include">
        </childnode>
        <childnode refid="49922" relation="include">
        </childnode>
        <childnode refid="49923" relation="include">
        </childnode>
        <childnode refid="49918" relation="include">
        </childnode>
      </node>
      <node id="49936">
        <label>../Internat.h</label>
        <link refid="_internat_8h"/>
        <childnode refid="49881" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49937" relation="include">
        </childnode>
      </node>
      <node id="49878">
        <label>xml/XMLTagHandler.h</label>
        <link refid="_x_m_l_tag_handler_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49879" relation="include">
        </childnode>
        <childnode refid="49880" relation="include">
        </childnode>
      </node>
      <node id="49896">
        <label>TrackPanelListener.h</label>
        <link refid="_track_panel_listener_8h"/>
      </node>
      <node id="49894">
        <label>wx/wxchar.h</label>
      </node>
      <node id="49946">
        <label>wx/frame.h</label>
      </node>
      <node id="49871">
        <label>ODTaskThread.h</label>
        <link refid="_o_d_task_thread_8h"/>
        <childnode refid="49872" relation="include">
        </childnode>
        <childnode refid="49873" relation="include">
        </childnode>
      </node>
      <node id="49922">
        <label>audacity/ConfigInterface.h</label>
        <link refid="_config_interface_8h"/>
        <childnode refid="49885" relation="include">
        </childnode>
      </node>
      <node id="49891">
        <label>wx/utils.h</label>
      </node>
      <node id="49868">
        <label>ODManager.h</label>
        <link refid="_o_d_manager_8h"/>
        <childnode refid="49869" relation="include">
        </childnode>
        <childnode refid="49870" relation="include">
        </childnode>
        <childnode refid="49871" relation="include">
        </childnode>
        <childnode refid="49872" relation="include">
        </childnode>
        <childnode refid="49949" relation="include">
        </childnode>
      </node>
      <node id="49939">
        <label>wx/evtloop.h</label>
      </node>
      <node id="49887">
        <label>Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="49884" relation="include">
        </childnode>
      </node>
      <node id="49912">
        <label>wx/timer.h</label>
      </node>
      <node id="49892">
        <label>ViewInfo.h</label>
        <link refid="_view_info_8h"/>
        <childnode refid="49869" relation="include">
        </childnode>
        <childnode refid="49893" relation="include">
        </childnode>
      </node>
      <node id="49935">
        <label>../Shuttle.h</label>
        <link refid="_shuttle_8h"/>
      </node>
      <node id="49925">
        <label>wx/fileconf.h</label>
      </node>
      <node id="49927">
        <label>map</label>
      </node>
      <node id="49930">
        <label>audacity/PluginInterface.h</label>
        <link refid="_plugin_interface_8h"/>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49922" relation="include">
        </childnode>
        <childnode refid="49920" relation="include">
        </childnode>
        <childnode refid="49921" relation="include">
        </childnode>
        <childnode refid="49928" relation="include">
        </childnode>
        <childnode refid="49929" relation="include">
        </childnode>
      </node>
      <node id="49943">
        <label>toolbars/SpectralSelectionBarListener.h</label>
        <link refid="_spectral_selection_bar_listener_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
      </node>
      <node id="49941">
        <label>wx/stattext.h</label>
      </node>
      <node id="49911">
        <label>wx/socket.h</label>
      </node>
      <node id="49945">
        <label>wx/generic/dragimgg.h</label>
      </node>
      <node id="49921">
        <label>audacity/IdentInterface.h</label>
        <link refid="_ident_interface_8h"/>
        <childnode refid="49885" relation="include">
        </childnode>
      </node>
      <node id="49889">
        <label>wx/list.h</label>
      </node>
      <node id="49901">
        <label>wx/menu.h</label>
      </node>
      <node id="49951">
        <label>NonGuiThread.h</label>
        <link refid="_non_gui_thread_8h"/>
      </node>
      <node id="49884">
        <label>wx/defs.h</label>
      </node>
      <node id="49916">
        <label>wx/window.h</label>
      </node>
      <node id="49908">
        <label>wx/intl.h</label>
      </node>
      <node id="49938">
        <label>../widgets/ProgressDialog.h</label>
        <link refid="_progress_dialog_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49918" relation="include">
        </childnode>
        <childnode refid="49939" relation="include">
        </childnode>
        <childnode refid="49940" relation="include">
        </childnode>
        <childnode refid="49941" relation="include">
        </childnode>
        <childnode refid="49891" relation="include">
        </childnode>
      </node>
      <node id="49933">
        <label>wx/bmpbuttn.h</label>
      </node>
      <node id="49885">
        <label>audacity/Types.h</label>
        <link refid="include_2audacity_2_types_8h"/>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49881" relation="include">
        </childnode>
      </node>
      <node id="49874">
        <label>../BlockFile.h</label>
        <link refid="_block_file_8h"/>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49876" relation="include">
        </childnode>
        <childnode refid="49877" relation="include">
        </childnode>
        <childnode refid="49878" relation="include">
        </childnode>
        <childnode refid="49880" relation="include">
        </childnode>
        <childnode refid="49883" relation="include">
        </childnode>
      </node>
      <node id="49926">
        <label>../PluginManager.h</label>
        <link refid="_plugin_manager_8h"/>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49882" relation="include">
        </childnode>
        <childnode refid="49925" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49927" relation="include">
        </childnode>
        <childnode refid="49920" relation="include">
        </childnode>
        <childnode refid="49928" relation="include">
        </childnode>
        <childnode refid="49929" relation="include">
        </childnode>
        <childnode refid="49930" relation="include">
        </childnode>
      </node>
      <node id="49918">
        <label>wx/dialog.h</label>
      </node>
      <node id="49950">
        <label>ODWaveTrackTaskQueue.h</label>
        <link refid="_o_d_wave_track_task_queue_8h"/>
        <childnode refid="49869" relation="include">
        </childnode>
        <childnode refid="49871" relation="include">
        </childnode>
        <childnode refid="49949" relation="include">
        </childnode>
      </node>
      <node id="49877">
        <label>wx/filename.h</label>
      </node>
      <node id="49917">
        <label>effects/EffectManager.h</label>
        <link refid="_effect_manager_8h"/>
        <childnode refid="49887" relation="include">
        </childnode>
        <childnode refid="49914" relation="include">
        </childnode>
        <childnode refid="49918" relation="include">
        </childnode>
        <childnode refid="49906" relation="include">
        </childnode>
        <childnode refid="49919" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49920" relation="include">
        </childnode>
        <childnode refid="49926" relation="include">
        </childnode>
        <childnode refid="49931" relation="include">
        </childnode>
      </node>
      <node id="49923">
        <label>audacity/EffectAutomationParameters.h</label>
        <link refid="_effect_automation_parameters_8h"/>
        <childnode refid="49924" relation="include">
        </childnode>
        <childnode refid="49904" relation="include">
        </childnode>
        <childnode refid="49925" relation="include">
        </childnode>
        <childnode refid="49908" relation="include">
        </childnode>
      </node>
      <node id="49898">
        <label>commands/CommandManager.h</label>
        <link refid="_command_manager_8h"/>
        <childnode refid="49887" relation="include">
        </childnode>
        <childnode refid="49899" relation="include">
        </childnode>
        <childnode refid="49869" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49882" relation="include">
        </childnode>
        <childnode refid="49901" relation="include">
        </childnode>
        <childnode refid="49890" relation="include">
        </childnode>
        <childnode refid="49902" relation="include">
        </childnode>
        <childnode refid="49878" relation="include">
        </childnode>
        <childnode refid="49885" relation="include">
        </childnode>
      </node>
      <node id="49873">
        <label>../Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="49915">
        <label>wx/grid.h</label>
      </node>
      <node id="49869">
        <label>vector</label>
      </node>
      <node id="49931">
        <label>Effect.h</label>
        <link refid="src_2effects_2_effect_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49899" relation="include">
        </childnode>
        <childnode refid="49932" relation="include">
        </childnode>
        <childnode refid="49933" relation="include">
        </childnode>
        <childnode refid="49882" relation="include">
        </childnode>
        <childnode refid="49908" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49934" relation="include">
        </childnode>
        <childnode refid="49922" relation="include">
        </childnode>
        <childnode refid="49920" relation="include">
        </childnode>
        <childnode refid="49887" relation="include">
        </childnode>
        <childnode refid="49893" relation="include">
        </childnode>
        <childnode refid="49935" relation="include">
        </childnode>
        <childnode refid="49936" relation="include">
        </childnode>
        <childnode refid="49938" relation="include">
        </childnode>
      </node>
      <node id="49882">
        <label>wx/dynarray.h</label>
      </node>
      <node id="49886">
        <label>../Project.h</label>
        <link refid="_project_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49887" relation="include">
        </childnode>
        <childnode refid="49888" relation="include">
        </childnode>
        <childnode refid="49892" relation="include">
        </childnode>
        <childnode refid="49896" relation="include">
        </childnode>
        <childnode refid="49897" relation="include">
        </childnode>
        <childnode refid="49898" relation="include">
        </childnode>
        <childnode refid="49917" relation="include">
        </childnode>
        <childnode refid="49878" relation="include">
        </childnode>
        <childnode refid="49942" relation="include">
        </childnode>
        <childnode refid="49943" relation="include">
        </childnode>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49906" relation="include">
        </childnode>
        <childnode refid="49910" relation="include">
        </childnode>
        <childnode refid="49944" relation="include">
        </childnode>
        <childnode refid="49945" relation="include">
        </childnode>
        <childnode refid="49946" relation="include">
        </childnode>
        <childnode refid="49908" relation="include">
        </childnode>
        <childnode refid="49947" relation="include">
        </childnode>
        <childnode refid="49948" relation="include">
        </childnode>
      </node>
      <node id="49928">
        <label>audacity/ImporterInterface.h</label>
        <link refid="_importer_interface_8h"/>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49922" relation="include">
        </childnode>
        <childnode refid="49921" relation="include">
        </childnode>
      </node>
      <node id="49867">
        <label>C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp</label>
        <link refid="ODManager.cpp"/>
        <childnode refid="49868" relation="include">
        </childnode>
        <childnode refid="49870" relation="include">
        </childnode>
        <childnode refid="49871" relation="include">
        </childnode>
        <childnode refid="49950" relation="include">
        </childnode>
        <childnode refid="49886" relation="include">
        </childnode>
        <childnode refid="49951" relation="include">
        </childnode>
        <childnode refid="49891" relation="include">
        </childnode>
        <childnode refid="49949" relation="include">
        </childnode>
        <childnode refid="49872" relation="include">
        </childnode>
        <childnode refid="49906" relation="include">
        </childnode>
      </node>
      <node id="49875">
        <label>wx/string.h</label>
      </node>
      <node id="49902">
        <label>../AudacityApp.h</label>
        <link refid="_audacity_app_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49903" relation="include">
        </childnode>
        <childnode refid="49904" relation="include">
        </childnode>
        <childnode refid="49905" relation="include">
        </childnode>
        <childnode refid="49906" relation="include">
        </childnode>
        <childnode refid="49907" relation="include">
        </childnode>
        <childnode refid="49908" relation="include">
        </childnode>
        <childnode refid="49909" relation="include">
        </childnode>
        <childnode refid="49910" relation="include">
        </childnode>
        <childnode refid="49911" relation="include">
        </childnode>
        <childnode refid="49912" relation="include">
        </childnode>
        <childnode refid="49913" relation="include">
        </childnode>
        <childnode refid="49871" relation="include">
        </childnode>
        <childnode refid="49887" relation="include">
        </childnode>
      </node>
      <node id="49919">
        <label>wx/listbox.h</label>
      </node>
      <node id="49910">
        <label>wx/log.h</label>
      </node>
      <node id="49895">
        <label>math.h</label>
      </node>
      <node id="49888">
        <label>DirManager.h</label>
        <link refid="_dir_manager_8h"/>
        <childnode refid="49889" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49877" relation="include">
        </childnode>
        <childnode refid="49890" relation="include">
        </childnode>
        <childnode refid="49891" relation="include">
        </childnode>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49878" relation="include">
        </childnode>
      </node>
      <node id="49893">
        <label>SelectedRegion.h</label>
        <link refid="_selected_region_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49887" relation="include">
        </childnode>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49894" relation="include">
        </childnode>
        <childnode refid="49895" relation="include">
        </childnode>
      </node>
      <node id="49881">
        <label>wx/arrstr.h</label>
      </node>
      <node id="49949">
        <label>wx/wx.h</label>
      </node>
      <node id="49909">
        <label>wx/snglinst.h</label>
      </node>
      <node id="49872">
        <label>wx/thread.h</label>
      </node>
      <node id="49944">
        <label>wx/dragimag.h</label>
      </node>
      <node id="49934">
        <label>wx/tglbtn.h</label>
      </node>
      <node id="49899">
        <label>../MemoryX.h</label>
        <link refid="_memory_x_8h"/>
        <childnode refid="49900" relation="include">
        </childnode>
      </node>
      <node id="49913">
        <label>widgets/FileHistory.h</label>
        <link refid="_file_history_8h"/>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49914" relation="include">
        </childnode>
        <childnode refid="49882" relation="include">
        </childnode>
        <childnode refid="49906" relation="include">
        </childnode>
        <childnode refid="49915" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49916" relation="include">
        </childnode>
      </node>
      <node id="49932">
        <label>set</label>
      </node>
      <node id="49948">
        <label>Menus.h</label>
        <link refid="_menus_8h"/>
        <childnode refid="49887" relation="include">
        </childnode>
      </node>
      <node id="49903">
        <label>wx/app.h</label>
        <link refid="app_8h"/>
      </node>
      <node id="49937">
        <label>wx/longlong.h</label>
      </node>
      <node id="49879">
        <label>stdio.h</label>
      </node>
      <node id="49883">
        <label>SampleFormat.h</label>
        <link refid="_sample_format_8h"/>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49885" relation="include">
        </childnode>
      </node>
      <node id="49924">
        <label>locale.h</label>
      </node>
      <node id="49907">
        <label>wx/docview.h</label>
      </node>
      <node id="49900">
        <label>memory</label>
      </node>
      <node id="49880">
        <label>XMLWriter.h</label>
        <link refid="_x_m_l_writer_8h"/>
        <childnode refid="49881" relation="include">
        </childnode>
        <childnode refid="49882" relation="include">
        </childnode>
        <childnode refid="49876" relation="include">
        </childnode>
      </node>
      <node id="49897">
        <label>AudioIOListener.h</label>
        <link refid="_audio_i_o_listener_8h"/>
        <childnode refid="49875" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_o_d_manager_8cpp_1a06a1e10277314aa9bfd05c58c7dffb9e" prot="public" static="no">
        <type><ref refid="class_o_d_manager" kindref="compound">ODManager</ref> *(*</type>
        <definition>typedef ODManager*(* pfodman) ()</definition>
        <argsstring>)()</argsstring>
        <name>pfodman</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="37" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_o_d_manager_8cpp_1abf147cdd3978f215e15670e70934b467" prot="public" static="yes" mutable="no">
        <type><ref refid="class_o_d_lock" kindref="compound">ODLock</ref></type>
        <definition>ODLock gODInitedMutex</definition>
        <argsstring></argsstring>
        <name>gODInitedMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="28" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_o_d_manager_8cpp_1a2cf935e90ac87ccfce2b75d56b19b47a" prot="public" static="yes" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool gManagerCreated</definition>
        <argsstring></argsstring>
        <name>gManagerCreated</name>
        <initializer>=<ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="29" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_o_d_manager_8cpp_1adffcbc5a2e514453e493c2540479f433" prot="public" static="yes" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool gPause</definition>
        <argsstring></argsstring>
        <name>gPause</name>
        <initializer>=<ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="30" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_o_d_manager_8cpp_1accffc0ee96d65b421a0bcb425f1def24" prot="public" static="yes" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool sHasLoadedOD</definition>
        <argsstring></argsstring>
        <name>sHasLoadedOD</name>
        <initializer>=<ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></initializer>
        <briefdescription>
<para>a flag that is set if we have loaded some OD blockfiles from PCM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="32" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_o_d_manager_8cpp_1a9d554d5ac01aea218aeb9dcc50339e9f" prot="public" static="yes" mutable="no">
        <type><ref refid="class_o_d_lock" kindref="compound">ODLock</ref></type>
        <definition>ODLock sLibSndFileMutex</definition>
        <argsstring></argsstring>
        <name>sLibSndFileMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="41" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_o_d_manager_8cpp_1a92ca2bae75f35c742f41ab7074bfe18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int CompareNoCaseFileName</definition>
        <argsstring>(const wxString &amp;first, const wxString &amp;second)</argsstring>
        <name>CompareNoCaseFileName</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxString &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxString &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>wxstring compare function for sorting case, which is needed to load correctly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" line="48" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Singleton <ref refid="class_o_d_manager" kindref="compound">ODManager</ref> class. Is the bridge between client side <ref refid="class_o_d_task" kindref="compound">ODTask</ref> requests and internals. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>Audacity<sp/>-<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>1999-2010<sp/>Audacity<sp/>Team</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>File<sp/>License:<sp/>wxWidgets</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>Michael<sp/>Chinen</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">******************************************************************/</highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_d_manager_8h" kindref="compound">ODManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_d_task_8h" kindref="compound">ODTask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_d_task_thread_8h" kindref="compound">ODTaskThread.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_d_wave_track_task_queue_8h" kindref="compound">ODWaveTrackTaskQueue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Project.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_non_gui_thread_8h" kindref="compound">NonGuiThread.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/utils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/wx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/thread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/event.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_o_d_lock" kindref="compound">ODLock</ref><sp/>gODInitedMutex;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gManagerCreated=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gPause=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//to<sp/>be<sp/>loaded<sp/>in<sp/>and<sp/>used<sp/>with<sp/>Pause/Resume<sp/>before<sp/>ODMan<sp/>init.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sHasLoadedOD=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="class_o_d_manager" kindref="compound">ODManager</ref>*<sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">ODManager::pMan</ref>=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//init<sp/>the<sp/>accessor<sp/>function<sp/>pointer<sp/>-<sp/>use<sp/>the<sp/>first<sp/>time<sp/>version<sp/>of<sp/>the<sp/>interface<sp/>fetcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//first<sp/>we<sp/>need<sp/>to<sp/>typedef<sp/>the<sp/>function<sp/>pointer<sp/>type<sp/>because<sp/>the<sp/>compiler<sp/>doesn&apos;t<sp/>support<sp/>it<sp/>in<sp/>the<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="_o_d_manager_8cpp_1a06a1e10277314aa9bfd05c58c7dffb9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><ref refid="class_o_d_manager" kindref="compound">ODManager</ref>*<sp/>(*pfodman)();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="_o_d_manager_8cpp_1a06a1e10277314aa9bfd05c58c7dffb9e" kindref="member">pfodman</ref><sp/><ref refid="class_o_d_manager_1aef1bcdded223f015b22a0d1d439c23ad" kindref="member">ODManager::Instance</ref><sp/>=<sp/>&amp;(<ref refid="class_o_d_manager_1a52c00180c54d079fa0bda3da113aa2b2" kindref="member">ODManager::InstanceFirstTime</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//libsndfile<sp/>is<sp/>not<sp/>threadsafe<sp/>-<sp/>this<sp/>deals<sp/>with<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_o_d_lock" kindref="compound">ODLock</ref><sp/>sLibSndFileMutex;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="_audacity_app_8cpp_1acc4d5c7c1aac56df05e7969028118e4b" kindref="member">DEFINE_EVENT_TYPE</ref>(EVT_ODTASK_UPDATE)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//using<sp/>this<sp/>with<sp/>wxStringArray::Sort<sp/>will<sp/>give<sp/>you<sp/>a<sp/>list<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//is<sp/>alphabetical,<sp/>without<sp/>depending<sp/>on<sp/>case.<sp/><sp/>If<sp/>you<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//default<sp/>sort,<sp/>you<sp/>will<sp/>get<sp/>strings<sp/>with<sp/>&apos;R&apos;<sp/>before<sp/>&apos;a&apos;,<sp/>because<sp/>it<sp/>is<sp/>in<sp/>caps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="_o_d_manager_8h_1a92ca2bae75f35c742f41ab7074bfe18f" refkind="member"><highlight class="normal"><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/><ref refid="_o_d_manager_8cpp_1a92ca2bae75f35c742f41ab7074bfe18f" kindref="member">CompareNoCaseFileName</ref>(<ref refid="getopt_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/>wxString&amp;<sp/>first,<sp/><ref refid="getopt_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/>wxString&amp;<sp/>second)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first.CmpNoCase(second);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_o_d_manager_1a9229bb31acd18ddc7c3e75dd78e4d263" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a9229bb31acd18ddc7c3e75dd78e4d263" kindref="member">ODManager::LockLibSndFileMutex</ref>()</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/>sLibSndFileMutex.Lock();</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_o_d_manager_1a046fb8a887ed44e9a6a2497b21ddd8fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a046fb8a887ed44e9a6a2497b21ddd8fc" kindref="member">ODManager::UnlockLibSndFileMutex</ref>()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>sLibSndFileMutex.Unlock();</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//private<sp/>constructor<sp/>-<sp/>Singleton.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_o_d_manager_1a569b8321db46a87f1c58cfd8c13815b2" refkind="member"><highlight class="normal"><ref refid="class_o_d_manager_1a569b8321db46a87f1c58cfd8c13815b2" kindref="member">ODManager::ODManager</ref>()</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1affc1004f5826b83f3bfd258f59b31f02" kindref="member">mTerminate</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1af90ef020c68adcd0c9f9e0b7bcf799bb" kindref="member">mTerminated</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1aebe05c8e1092dcca2db0a69236316dcd" kindref="member">mPause</ref>=<sp/>gPause;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//must<sp/>set<sp/>up<sp/>the<sp/>queue<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_o_d_condition" kindref="compound">ODCondition</ref>(&amp;<ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//private<sp/>destructor<sp/>-<sp/>DELETE<sp/>with<sp/>static<sp/>method<sp/>Quit()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_o_d_manager_1a2de62c7730945c4fcc4f62c164c442d8" refkind="member"><highlight class="normal"><ref refid="class_o_d_manager_1a2de62c7730945c4fcc4f62c164c442d8" kindref="member">ODManager::~ODManager</ref>()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>rid<sp/>of<sp/>all<sp/>the<sp/>queues.<sp/><sp/>The<sp/>queues<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>tasks,<sp/>so<sp/>we<sp/>don&apos;t<sp/>worry<sp/>abut<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//nothing<sp/>else<sp/>should<sp/>be<sp/>running<sp/>on<sp/>OD<sp/>related<sp/>threads<sp/>at<sp/>this<sp/>point,<sp/>so<sp/>we<sp/>don&apos;t<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="class_o_d_manager_1a83ff55a20825529c681bede89cd1da8e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a83ff55a20825529c681bede89cd1da8e" kindref="member">ODManager::AddTask</ref>(<ref refid="class_o_d_task" kindref="compound">ODTask</ref>*<sp/>task)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.push_back(task);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//signal<sp/>the<sp/>queue<sp/>not<sp/>empty<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>paused;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Lock();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>paused=<ref refid="class_o_d_manager_1aebe05c8e1092dcca2db0a69236316dcd" kindref="member">mPause</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Lock();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//don&apos;t<sp/>signal<sp/>if<sp/>we<sp/>are<sp/>paused<sp/>since<sp/>if<sp/>we<sp/>wake<sp/>up<sp/>the<sp/>loop<sp/>it<sp/>will<sp/>start<sp/>processing<sp/>other<sp/>tasks<sp/>while<sp/>paused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!paused)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref>-&gt;Signal();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="class_o_d_manager_1a32c0166c84f2b50792d96ab36ea02401" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a32c0166c84f2b50792d96ab36ea02401" kindref="member">ODManager::SignalTaskQueueLoop</ref>()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>paused;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Lock();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>paused=<ref refid="class_o_d_manager_1aebe05c8e1092dcca2db0a69236316dcd" kindref="member">mPause</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Lock();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//don&apos;t<sp/>signal<sp/>if<sp/>we<sp/>are<sp/>paused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!paused)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref>-&gt;Signal();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_o_d_manager_1af8842cb56eaca1e61383e9e6f6d86aaa" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1af8842cb56eaca1e61383e9e6f6d86aaa" kindref="member">ODManager::RemoveTaskIfInQueue</ref>(<ref refid="class_o_d_task" kindref="compound">ODTask</ref>*<sp/>task)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//linear<sp/>search<sp/>okay<sp/>for<sp/>now,<sp/>(probably<sp/>only<sp/>1-5<sp/>tasks<sp/>exist<sp/>at<sp/>a<sp/>time.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]==task)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.erase(<ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.begin()+<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="class_o_d_manager_1ab635811e9a08a5e4b14a6736ad83c885" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ab635811e9a08a5e4b14a6736ad83c885" kindref="member">ODManager::AddNewTask</ref>(<ref refid="class_o_d_task" kindref="compound">ODTask</ref>*<sp/>task,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lockMutex)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_wave_track_task_queue" kindref="compound">ODWaveTrackTaskQueue</ref>*<sp/>queue<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lockMutex)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//search<sp/>for<sp/>a<sp/>task<sp/>containing<sp/>the<sp/>lead<sp/>track.<sp/><sp/>wavetrack<sp/>removal<sp/>is<sp/>threadsafe<sp/>and<sp/>bound<sp/>to<sp/>the<sp/>mQueuesMutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//note<sp/>that<sp/>GetWaveTrack<sp/>is<sp/>not<sp/>threadsafe,<sp/>but<sp/>we<sp/>are<sp/>assuming<sp/>task<sp/>is<sp/>not<sp/>running<sp/>on<sp/>a<sp/>different<sp/>thread<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;ContainsWaveTrack(task-&gt;<ref refid="class_o_d_task_1a33106da71ce2e3e6c2124c38e211efd9" kindref="member">GetWaveTrack</ref>(0)))</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue=<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(queue)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>it<sp/>to<sp/>the<sp/>existing<sp/>queue<sp/>but<sp/>keep<sp/>the<sp/>lock<sp/>since<sp/>this<sp/>reference<sp/>can<sp/>be<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;<ref refid="class_o_d_wave_track_task_queue_1a583badb4082706b53f635022e7bcb4c5" kindref="member">AddTask</ref>(task);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lockMutex)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Make<sp/>a<sp/>NEW<sp/>one,<sp/>add<sp/>it<sp/>to<sp/>the<sp/>local<sp/>track<sp/>queue,<sp/>and<sp/>to<sp/>the<sp/>immediate<sp/>running<sp/>task<sp/>list,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//since<sp/>this<sp/>task<sp/>is<sp/>definitely<sp/>at<sp/>the<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_o_d_wave_track_task_queue" kindref="compound">ODWaveTrackTaskQueue</ref>();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>queue-&gt;<ref refid="class_o_d_wave_track_task_queue_1a583badb4082706b53f635022e7bcb4c5" kindref="member">AddTask</ref>(task);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.push_back(queue);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lockMutex)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a83ff55a20825529c681bede89cd1da8e" kindref="member">AddTask</ref>(task);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//that<sp/>switches<sp/>out<sp/>the<sp/>mutex/null<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="class_o_d_manager_1a52c00180c54d079fa0bda3da113aa2b2" refkind="member"><highlight class="normal"><ref refid="class_o_d_manager" kindref="compound">ODManager</ref>*<sp/><ref refid="class_o_d_manager_1a52c00180c54d079fa0bda3da113aa2b2" kindref="member">ODManager::InstanceFirstTime</ref>()</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>gODInitedMutex.Lock();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a569b8321db46a87f1c58cfd8c13815b2" kindref="member">ODManager</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a2347e6e64f43bae20e12ce2f467a2ce0" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gManagerCreated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/>gODInitedMutex.Unlock();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//change<sp/>the<sp/>accessor<sp/>function<sp/>to<sp/>use<sp/>the<sp/>quicker<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1aef1bcdded223f015b22a0d1d439c23ad" kindref="member">Instance</ref><sp/>=<sp/>&amp;(<ref refid="class_o_d_manager_1a6355bff561d142b4aba170b1df640fc0" kindref="member">ODManager::InstanceNormal</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//faster<sp/>method<sp/>of<sp/>instance<sp/>fetching<sp/>once<sp/>init<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="class_o_d_manager_1a6355bff561d142b4aba170b1df640fc0" refkind="member"><highlight class="normal"><ref refid="class_o_d_manager" kindref="compound">ODManager</ref>*<sp/><ref refid="class_o_d_manager_1a6355bff561d142b4aba170b1df640fc0" kindref="member">ODManager::InstanceNormal</ref>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="class_o_d_manager_1a6647fc26402ceed611a794b7224063a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a6647fc26402ceed611a794b7224063a5" kindref="member">ODManager::IsInstanceCreated</ref>()</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/>gODInitedMutex.Lock();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>ret=<sp/>gManagerCreated;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>gODInitedMutex.Unlock();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="class_o_d_manager_1a2347e6e64f43bae20e12ce2f467a2ce0" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a2347e6e64f43bae20e12ce2f467a2ce0" kindref="member">ODManager::Init</ref>()</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a06856d83f378f240132c1520405f5040" kindref="member">mCurrentThreads</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1ac85438f32145747ba36ebf7087860a35" kindref="member">mMaxThreads</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>wxLogDebug(wxT(&quot;Initializing<sp/>ODManager...Creating<sp/>manager<sp/>thread&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1_1_o_d_manager_helper_thread" kindref="compound">ODManagerHelperThread</ref>*<sp/>startThread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1_1_o_d_manager_helper_thread" kindref="compound">ODManagerHelperThread</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>startThread-&gt;SetPriority(0);//default<sp/>of<sp/>50.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/>startThread-&gt;Create();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>printf(&quot;starting<sp/>thread<sp/>from<sp/>init\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>startThread-&gt;Run();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>printf(&quot;started<sp/>thread<sp/>from<sp/>init\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//destruction<sp/>of<sp/>thread<sp/>is<sp/>taken<sp/>care<sp/>of<sp/>by<sp/>thread<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="class_o_d_manager_1a31d6075d78f9ccd59fbbd3abdc4c2f33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a31d6075d78f9ccd59fbbd3abdc4c2f33" kindref="member">ODManager::DecrementCurrentThreads</ref>()</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1abed3761c5ea4877de3d9ec263b3da865" kindref="member">mCurrentThreadsMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a06856d83f378f240132c1520405f5040" kindref="member">mCurrentThreads</ref>--;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1abed3761c5ea4877de3d9ec263b3da865" kindref="member">mCurrentThreadsMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="class_o_d_manager_1a4709915d78781ebba4489e74b7d30170" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a4709915d78781ebba4489e74b7d30170" kindref="member">ODManager::Start</ref>()</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_task_thread" kindref="compound">ODTaskThread</ref>*<sp/>thread;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tasksInArray;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>paused;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>numQueues=0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1ac03e55bb072bc1e81e73a7d86523b6f4" kindref="member">mNeedsDraw</ref>=0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLog<sp/>calls<sp/>not<sp/>threadsafe.<sp/><sp/>are<sp/>printfs?<sp/><sp/>thread-messy<sp/>for<sp/>sure,<sp/>but<sp/>safe?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>printf(&quot;ODManager<sp/>thread<sp/>strating<sp/>\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Figure<sp/>out<sp/>why<sp/>this<sp/>has<sp/>no<sp/>effect<sp/>at<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxThread::This()-&gt;SetPriority(30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a7690b70eb196abd7e7953e552735f501" kindref="member">mTerminateMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="class_o_d_manager_1affc1004f5826b83f3bfd258f59b31f02" kindref="member">mTerminate</ref>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a7690b70eb196abd7e7953e552735f501" kindref="member">mTerminateMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;ODManager<sp/>thread<sp/>running<sp/>\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>should<sp/>look<sp/>at<sp/>our<sp/>WaveTrack<sp/>queues<sp/>to<sp/>see<sp/>if<sp/>we<sp/>can<sp/>process<sp/>a<sp/>NEW<sp/>task<sp/>to<sp/>the<sp/>running<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a6d8e8b5263068d7c19f3be1a4fa2d6e9" kindref="member">UpdateQueues</ref>();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>some<sp/>threads<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tasksInArray<sp/>=<sp/><ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.size()&gt;0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Lock();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paused=<ref refid="class_o_d_manager_1aebe05c8e1092dcca2db0a69236316dcd" kindref="member">mPause</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1abed3761c5ea4877de3d9ec263b3da865" kindref="member">mCurrentThreadsMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>adding<sp/>tasks<sp/>if<sp/>there<sp/>is<sp/>work<sp/>to<sp/>do,<sp/>up<sp/>to<sp/>the<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!paused<sp/>&amp;&amp;<sp/>tasksInArray<sp/>&amp;&amp;<sp/>(<ref refid="class_o_d_manager_1a06856d83f378f240132c1520405f5040" kindref="member">mCurrentThreads</ref><sp/>&lt;<sp/><ref refid="class_o_d_manager_1ac85438f32145747ba36ebf7087860a35" kindref="member">mMaxThreads</ref>))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a06856d83f378f240132c1520405f5040" kindref="member">mCurrentThreads</ref>++;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1abed3761c5ea4877de3d9ec263b3da865" kindref="member">mCurrentThreadsMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//detach<sp/>a<sp/>NEW<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_o_d_task_thread" kindref="compound">ODTaskThread</ref>(<ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>[0]);</highlight><highlight class="comment">//task);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//thread-&gt;SetPriority(10);//default<sp/>is<sp/>50.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Create();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Run();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.erase(<ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.begin());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tasksInArray<sp/>=<sp/><ref refid="class_o_d_manager_1ae8285de40c66dd8dd1ef3d9f9f2f69ae" kindref="member">mTasks</ref>.size()&gt;0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a9d307a10f6c2f48655c84ecc21b94ac2" kindref="member">mTasksMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1abed3761c5ea4877de3d9ec263b3da865" kindref="member">mCurrentThreadsMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1abed3761c5ea4877de3d9ec263b3da865" kindref="member">mCurrentThreadsMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//use<sp/>a<sp/>conditon<sp/>variable<sp/>to<sp/>block<sp/>here<sp/>instead<sp/>of<sp/>a<sp/>sleep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JKC:<sp/>If<sp/>there<sp/>are<sp/>no<sp/>tasks<sp/>ready<sp/>to<sp/>run,<sp/>or<sp/>we&apos;re<sp/>paused<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>wait<sp/>for<sp/>there<sp/>to<sp/>be<sp/>tasks<sp/>in<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Lock();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(!tasksInArray)<sp/>||<sp/>paused)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref>-&gt;Wait();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>some<sp/>ODTask<sp/>running,<sp/>then<sp/>there<sp/>will<sp/>be<sp/>something<sp/>in<sp/>the<sp/>queue.<sp/><sp/>If<sp/>so<sp/>then<sp/>redraw<sp/>to<sp/>show<sp/>progress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ac03e55bb072bc1e81e73a7d86523b6f4" kindref="member">mNeedsDraw</ref><sp/>+=<sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size()&gt;0?1:0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numQueues=<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redraw<sp/>the<sp/>current<sp/>project<sp/>only<sp/>(ODTasks<sp/>will<sp/>send<sp/>a<sp/>redraw<sp/>on<sp/>complete<sp/>even<sp/>if<sp/>the<sp/>projects<sp/>are<sp/>in<sp/>the<sp/>background)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>don&apos;t<sp/>want<sp/>to<sp/>redraw<sp/>at<sp/>a<sp/>faster<sp/>rate<sp/>when<sp/>we<sp/>have<sp/>more<sp/>queues<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>means<sp/>the<sp/>CPU<sp/>is<sp/>already<sp/>taxed.<sp/><sp/>This<sp/>if<sp/>statement<sp/>normalizes<sp/>the<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="class_o_d_manager_1ac03e55bb072bc1e81e73a7d86523b6f4" kindref="member">mNeedsDraw</ref>&gt;numQueues)<sp/>&amp;&amp;<sp/>numQueues)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ac03e55bb072bc1e81e73a7d86523b6f4" kindref="member">mNeedsDraw</ref>=0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxCommandEvent<sp/>event(<sp/>EVT_ODTASK_UPDATE<sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_audacity_project_1a66167817d6645121d0bef796d32368cb" kindref="member">AudacityProject::AllProjectsDeleteLock</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_audacity_project" kindref="compound">AudacityProject</ref>*<sp/>proj<sp/>=<sp/><ref refid="_project_8cpp_1a897aa047b58617a9acc187fc882e3bb4" kindref="member">GetActiveProject</ref>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proj)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proj-&gt;GetEventHandler()-&gt;AddPendingEvent(event);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_audacity_project_1a54a02858f8e34c2cda5eb9b3f3ff0522" kindref="member">AudacityProject::AllProjectsDeleteUnlock</ref>();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a7690b70eb196abd7e7953e552735f501" kindref="member">mTerminateMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a7690b70eb196abd7e7953e552735f501" kindref="member">mTerminateMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad85b08f29c24368568b063a6822eebd2" kindref="member">mTerminatedMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1af90ef020c68adcd0c9f9e0b7bcf799bb" kindref="member">mTerminated</ref>=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad85b08f29c24368568b063a6822eebd2" kindref="member">mTerminatedMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLogDebug<sp/>Not<sp/>thread<sp/>safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ODManager<sp/>thread<sp/>terminating\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>function<sp/>that<sp/>prevents<sp/>ODTasks<sp/>from<sp/>being<sp/>scheduled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//does<sp/>not<sp/>stop<sp/>currently<sp/>running<sp/>tasks<sp/>from<sp/>completing<sp/>their<sp/>immediate<sp/>subtask,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//but<sp/>presumably<sp/>they<sp/>will<sp/>finish<sp/>within<sp/>a<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="class_o_d_manager_1a396dd3991addcafba105966dbe00e163" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a396dd3991addcafba105966dbe00e163" kindref="member">ODManager::Pause</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="winmain2_8h_1aef3a6553bfd1b1958085c0ea353c0fa8" kindref="member">pause</ref>)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1a6647fc26402ceed611a794b7224063a5" kindref="member">IsInstanceCreated</ref>())</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Lock();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1aebe05c8e1092dcca2db0a69236316dcd" kindref="member">mPause</ref><sp/>=<sp/><ref refid="winmain2_8h_1aef3a6553bfd1b1958085c0ea353c0fa8" kindref="member">pause</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a59f76b74b2ee0e6ffb44e954fef857e8" kindref="member">mPauseLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>should<sp/>check<sp/>the<sp/>queue<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Lock();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref>-&gt;Signal();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gPause=<ref refid="winmain2_8h_1aef3a6553bfd1b1958085c0ea353c0fa8" kindref="member">pause</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="class_o_d_manager_1acb332656b440294d52b48bbf6bf1b2fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1acb332656b440294d52b48bbf6bf1b2fc" kindref="member">ODManager::Resume</ref>()</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a396dd3991addcafba105966dbe00e163" kindref="member">Pause</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="class_o_d_manager_1a2f69d81832f89781eee588f411c6e15a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a2f69d81832f89781eee588f411c6e15a" kindref="member">ODManager::Quit</ref>()</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1a6647fc26402ceed611a794b7224063a5" kindref="member">IsInstanceCreated</ref>())</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a7690b70eb196abd7e7953e552735f501" kindref="member">mTerminateMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1affc1004f5826b83f3bfd258f59b31f02" kindref="member">mTerminate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a7690b70eb196abd7e7953e552735f501" kindref="member">mTerminateMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>while<sp/>loop<sp/>waits<sp/>for<sp/>ODTasks<sp/>to<sp/>finish<sp/>and<sp/>the<sp/>DELETE<sp/>removes<sp/>all<sp/>tasks<sp/>from<sp/>the<sp/>Queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>function<sp/>is<sp/>called<sp/>from<sp/>the<sp/>main<sp/>audacity<sp/>event<sp/>thread,<sp/>so<sp/>there<sp/>should<sp/>not<sp/>be<sp/>more<sp/>requests<sp/>for<sp/>pMan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1ad85b08f29c24368568b063a6822eebd2" kindref="member">mTerminatedMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1af90ef020c68adcd0c9f9e0b7bcf799bb" kindref="member">mTerminated</ref>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1ad85b08f29c24368568b063a6822eebd2" kindref="member">mTerminatedMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sysex_8c_1abf5d9eb2666eabd43f4644f60b7ed6f1" kindref="member">wxThread::Sleep</ref>(200);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//signal<sp/>the<sp/>queue<sp/>not<sp/>empty<sp/>condition<sp/>since<sp/>the<sp/>ODMan<sp/>thread<sp/>will<sp/>wait<sp/>on<sp/>the<sp/>queue<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Lock();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1aba42a99deec038f307a29971320f8416" kindref="member">mQueueNotEmptyCond</ref>-&gt;Signal();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1a85a3669d8bba22645b47ff06b4164ac4" kindref="member">mQueueNotEmptyCondLock</ref>.Unlock();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1ad85b08f29c24368568b063a6822eebd2" kindref="member">mTerminatedMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>-&gt;<ref refid="class_o_d_manager_1ad85b08f29c24368568b063a6822eebd2" kindref="member">mTerminatedMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a35f30c3429c263f3d2d05206942bd036" kindref="member">pMan</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="class_o_d_manager_1a9f273cddbbf88ab5f10d83ef71412260" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a9f273cddbbf88ab5f10d83ef71412260" kindref="member">ODManager::RemoveWaveTrack</ref>(<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>track)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;ContainsWaveTrack(track))</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;<ref refid="class_o_d_manager_1a9f273cddbbf88ab5f10d83ef71412260" kindref="member">RemoveWaveTrack</ref>(track);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="class_o_d_manager_1a203a4219308dd19912edb5aa6084cf55" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a203a4219308dd19912edb5aa6084cf55" kindref="member">ODManager::ReplaceWaveTrack</ref>(<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>oldTrack,<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>newTrack)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;ReplaceWaveTrack(oldTrack,newTrack);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="class_o_d_manager_1ab3dd83fd9c3e4c82f25375e38c7088d5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ab3dd83fd9c3e4c82f25375e38c7088d5" kindref="member">ODManager::MakeWaveTrackIndependent</ref>(<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>track)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_wave_track_task_queue" kindref="compound">ODWaveTrackTaskQueue</ref>*<sp/>owner=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;ContainsWaveTrack(track))</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>owner<sp/>=<sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(owner)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>owner-&gt;<ref refid="class_o_d_wave_track_task_queue_1a9ef490dcacef826900911fe6f806cbfe" kindref="member">MakeWaveTrackIndependent</ref>(track);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="class_o_d_manager_1a97998606b0ea08aa946d7b407ffd015e" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a97998606b0ea08aa946d7b407ffd015e" kindref="member">ODManager::MakeWaveTrackDependent</ref>(<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>dependentTrack,<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>masterTrack)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//First,<sp/>check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>task<sp/>lists<sp/>are<sp/>mergeable.<sp/><sp/>If<sp/>so,<sp/>we<sp/>can<sp/>simply<sp/>add<sp/>this<sp/>track<sp/>to<sp/>the<sp/>other<sp/>task<sp/>and<sp/>queue,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>DELETE<sp/>this<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_wave_track_task_queue" kindref="compound">ODWaveTrackTaskQueue</ref>*<sp/>masterQueue=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_wave_track_task_queue" kindref="compound">ODWaveTrackTaskQueue</ref>*<sp/>dependentQueue=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dependentIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>canMerge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;ContainsWaveTrack(masterTrack))</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterQueue<sp/>=<sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;ContainsWaveTrack(dependentTrack))</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependentQueue<sp/>=<sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependentIndex<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(masterQueue&amp;&amp;dependentQueue)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>canMerge=masterQueue-&gt;<ref refid="class_o_d_wave_track_task_queue_1a185407f037927f2384ae40910bd93378" kindref="member">CanMergeWith</ref>(dependentQueue);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//otherwise<sp/>we<sp/>need<sp/>to<sp/>let<sp/>dependentTrack&apos;s<sp/>queue<sp/>live<sp/>on.<sp/><sp/>We&apos;ll<sp/>have<sp/>to<sp/>wait<sp/>till<sp/>the<sp/>conflicting<sp/>tasks<sp/>are<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!canMerge)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>we<sp/>add<sp/>dependentTrack<sp/>to<sp/>the<sp/>masterTrack&apos;s<sp/>queue<sp/>-<sp/>this<sp/>will<sp/>allow<sp/>future<sp/>ODScheduling<sp/>to<sp/>affect<sp/>them<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>sets<sp/>the<sp/>NeedODUpdateFlag<sp/>since<sp/>we<sp/>don&apos;t<sp/>want<sp/>the<sp/>head<sp/>task<sp/>to<sp/>finish<sp/>without<sp/>haven&apos;t<sp/>dealt<sp/>with<sp/>the<sp/>depednent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>masterQueue-&gt;<ref refid="class_o_d_wave_track_task_queue_1aca1351c9096298368e022c997ee734b4" kindref="member">MergeWaveTrack</ref>(dependentTrack);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//finally<sp/>remove<sp/>the<sp/>dependent<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.erase(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.begin()+dependentIndex);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dependentQueue;<sp/></highlight><highlight class="comment">//note<sp/>this<sp/>locks<sp/>the<sp/>ODManager&apos;s<sp/>current<sp/>task<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="class_o_d_manager_1ae41ea7d62f686735fffdda90d55d50fd" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ae41ea7d62f686735fffdda90d55d50fd" kindref="member">ODManager::DemandTrackUpdate</ref>(<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>*<sp/>track,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;DemandTrackUpdate(track,seconds);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="class_o_d_manager_1a6d8e8b5263068d7c19f3be1a4fa2d6e9" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a6d8e8b5263068d7c19f3be1a4fa2d6e9" kindref="member">ODManager::UpdateQueues</ref>()</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;IsFrontTaskComplete())</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>should<sp/>DELETE<sp/>and<sp/>remove<sp/>the<sp/>front<sp/>task<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RemoveFrontTask();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//schedule<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;IsEmpty())</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>need<sp/>to<sp/>release<sp/>the<sp/>lock<sp/>on<sp/>the<sp/>queue<sp/>vector<sp/>before<sp/>using<sp/>the<sp/>task<sp/>vector&apos;s<sp/>lock<sp/>or<sp/>we<sp/>deadlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//so<sp/>get<sp/>a<sp/>temp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_wave_track_task_queue" kindref="compound">ODWaveTrackTaskQueue</ref>*<sp/>queue;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>=<sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1a83ff55a20825529c681bede89cd1da8e" kindref="member">AddTask</ref>(queue-&gt;<ref refid="class_o_d_wave_track_task_queue_1ad9932b0a64d16989df8664acdce516e3" kindref="member">GetFrontTask</ref>());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>queue<sp/>is<sp/>empty<sp/>DELETE<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;IsEmpty())</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.erase(<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.begin()+<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>--;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//static</highlight></codeline>
<codeline lineno="524" refid="class_o_d_manager_1a7518b9382a822cb20ba70a920da14784" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a7518b9382a822cb20ba70a920da14784" kindref="member">ODManager::MarkLoadedODFlag</ref>()</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/>sHasLoadedOD<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//static</highlight></codeline>
<codeline lineno="531" refid="class_o_d_manager_1ab808eba4b4f987253df06557a5f48846" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ab808eba4b4f987253df06557a5f48846" kindref="member">ODManager::UnmarkLoadedODFlag</ref>()</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/>sHasLoadedOD<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//static</highlight></codeline>
<codeline lineno="538" refid="class_o_d_manager_1ab316ded3fbf00046c9d57ae2a5a0b891" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1ab316ded3fbf00046c9d57ae2a5a0b891" kindref="member">ODManager::HasLoadedODFlag</ref>()</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sHasLoadedOD;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="class_o_d_manager_1a76c4c9a6b2b98e3a4f7256667d15b61a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1a76c4c9a6b2b98e3a4f7256667d15b61a" kindref="member">ODManager::FillTipForWaveTrack</ref>(<sp/><ref refid="class_wave_track" kindref="compound">WaveTrack</ref><sp/>*<sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>,<sp/>wxString<sp/>&amp;tip<sp/>)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;FillTipForWaveTrack(t,<sp/>tip);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="class_o_d_manager_1aa71310affea63dba0f3575d6149cd944" refkind="member"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1aa71310affea63dba0f3575d6149cd944" kindref="member">ODManager::GetOverallPercentComplete</ref>()</highlight></codeline>
<codeline lineno="556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="nyquist_2nyqsrc_2nyx_8c_1a245b65fbced50370bf8a01069e5ee177" kindref="member">total</ref>=0.0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total+=<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;GetFrontTask()-&gt;PercentComplete();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//avoid<sp/>div<sp/>by<sp/>zero<sp/>and<sp/>be<sp/>thread<sp/>smart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalTasks<sp/>=<sp/><ref refid="class_o_d_manager_1abbeccc9391d24f84f1a2bbd14beba2af" kindref="member">GetTotalNumTasks</ref>();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>total/(totalTasks&gt;0?totalTasks:1);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="class_o_d_manager_1abbeccc9391d24f84f1a2bbd14beba2af" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_o_d_manager_1abbeccc9391d24f84f1a2bbd14beba2af" kindref="member">ODManager::GetTotalNumTasks</ref>()</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Lock();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret+=<ref refid="class_o_d_manager_1ad6b9a0871a6624fa11b9deee2f23dd98" kindref="member">mQueues</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;GetNumTasks();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_manager_1a8bac5038bf5f5180de202e37e94258f4" kindref="member">mQueuesMutex</ref>.Unlock();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODManager.cpp"/>
  </compounddef>
</doxygen>
