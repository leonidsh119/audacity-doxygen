<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="tutorial_start" kind="page">
    <compoundname>tutorial_start</compoundname>
    <title>PortAudio Tutorials</title>
    <detaileddescription>
<para>These tutorials takes you through a hands-on example of using PortAudio to make sound. If you&apos;d prefer to start with a top-down overview of the PortAudio API, check out the <ref refid="api_overview" kindref="compound">PortAudio API Overview</ref>.</para><sect1 id="tutorial_start_1tut_start1">
<title>Downloading</title>
<para>First thing you need to do is download the PortAudio source code either <ulink url="http://www.portaudio.com/download.html">as a tarball from the website</ulink>, or <ulink url="http://www.portaudio.com/usingsvn.html">from the Subversion Repository</ulink>.</para></sect1>
<sect1 id="tutorial_start_1tut_start2">
<title>Compiling</title>
<para>Once you&apos;ve downloaded PortAudio you&apos;ll need to compile it, which of course, depends on your environment:</para><para><itemizedlist>
<listitem><para>Windows<itemizedlist>
<listitem><para><ref refid="compile_windows" kindref="compound">Building PortAudio for Windows using Microsoft Visual Studio</ref></para></listitem><listitem><para><ref refid="compile_windows_mingw" kindref="compound">Building Portaudio for Windows with MinGW</ref></para></listitem><listitem><para><ref refid="compile_windows_asio_msvc" kindref="compound">Building Portaudio for Windows with ASIO support using MSVC</ref></para></listitem><listitem><para><ref refid="compile_cmake" kindref="compound">Creating MSVC Build Files via CMake</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>Mac OS X<itemizedlist>
<listitem><para><ref refid="compile_mac_coreaudio" kindref="compound">Building Portaudio for Mac OS X</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>POSIX<itemizedlist>
<listitem><para><ref refid="compile_linux" kindref="compound">Building Portaudio for Linux</ref></para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>Many platforms with GCC/make can use the simple ./configure &amp;&amp; make combination and simply use the resulting libraries in their code.</para></sect1>
<sect1 id="tutorial_start_1tut_start3">
<title>Programming with PortAudio</title>
<para>Below are the steps to writing a PortAudio application using the callback technique:</para><para><itemizedlist>
<listitem><para>Write a callback function that will be called by PortAudio when audio processing is needed.</para></listitem><listitem><para>Initialize the PA library and open a stream for audio I/O.</para></listitem><listitem><para>Start the stream. Your callback function will be now be called repeatedly by PA in the background.</para></listitem><listitem><para>In your callback you can read audio data from the inputBuffer and/or write data to the outputBuffer.</para></listitem><listitem><para>Stop the stream by returning 1 from your callback, or by calling a stop function.</para></listitem><listitem><para>Close the stream and terminate the library.</para></listitem></itemizedlist>
</para><para>In addition to this &quot;Callback&quot; architecture, V19 also supports a &quot;Blocking I/O&quot; model which uses read and write calls which may be more familiar to non-audio programmers. Note that at this time, not all APIs support this functionality.</para><para>In this tutorial, we&apos;ll show how to use the callback architecture to play a sawtooth wave. Much of the tutorial is taken from the file paex_saw.c, which is part of the PortAudio distribution. When you&apos;re done with this tutorial, you&apos;ll be armed with the basic knowledge you need to write an audio program. If you need more sample code, look in the &quot;examples&quot; and &quot;test&quot; directory of the PortAudio distribution. Another great source of info is the <ref refid="portaudio_8h" kindref="compound">portaudio.h</ref> Doxygen page, which documents the entire V19 API. Also see the page for <ulink url="http://www.assembla.com/spaces/portaudio/wiki/Tips">tips on programming PortAudio</ulink> on the PortAudio wiki.</para></sect1>
<sect1 id="tutorial_start_1tut_start4">
<title>Programming Tutorial Contents</title>
<para><itemizedlist>
<listitem><para><ref refid="writing_a_callback" kindref="compound">Writing a Callback Function</ref></para></listitem><listitem><para><ref refid="initializing_portaudio" kindref="compound">Initializing PortAudio</ref></para></listitem><listitem><para><ref refid="open_default_stream" kindref="compound">Opening a Stream Using Defaults</ref></para></listitem><listitem><para><ref refid="start_stop_abort" kindref="compound">Starting, Stopping and Aborting a Stream</ref></para></listitem><listitem><para><ref refid="terminating_portaudio" kindref="compound">Closing a Stream and Terminating PortAudio</ref></para></listitem><listitem><para><ref refid="utility_functions" kindref="compound">Utility Functions</ref></para></listitem><listitem><para><ref refid="querying_devices" kindref="compound">Enumerating and Querying PortAudio Devices</ref></para></listitem><listitem><para><ref refid="blocking_read_write" kindref="compound">Blocking Read/Write Functions</ref></para></listitem></itemizedlist>
</para><para>If you are upgrading from V18, you may want to look at the <ulink url="http://www.portaudio.com/docs/proposals/index.html">Proposed Enhancements to PortAudio</ulink>, which describes the differences between V18 and V19.</para><para>Once you have a basic understanding of how to use PortAudio, you might be interested in <ref refid="exploring" kindref="compound">Exploring PortAudio</ref>.</para><para>Next: <ref refid="writing_a_callback" kindref="compound">Writing a Callback Function</ref> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
