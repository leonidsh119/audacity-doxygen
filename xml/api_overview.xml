<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="api_overview" kind="page">
    <compoundname>api_overview</compoundname>
    <title>PortAudio API Overview</title>
    <detaileddescription>
<para>This page provides a top-down overview of the entire PortAudio API. It describes how all of the PortAudio data types and functions fit together. It provides links to the documentation for each function and data type. You can find all of the detailed documentation for each API function and data type on the <ref refid="portaudio_8h" kindref="compound">portaudio.h</ref> page.</para><sect1 id="api_overview_1introduction">
<title>Introduction</title>
<para>PortAudio provides a uniform application programming interface (API) across all supported platforms. You can think of the PortAudio library as a wrapper that converts calls to the PortAudio API into calls to platform-specific native audio APIs. Operating systems often offer more than one native audio API and some APIs (such as JACK) may be available on multiple target operating systems. PortAudio supports all the major native audio APIs on each supported platform. The diagram below illustrates the relationship between your application, PortAudio, and the supported native audio APIs:</para><para><image type="html" name="portaudio-external-architecture-diagram.png"></image>
</para><para>PortAudio provides a uniform interface to native audio APIs. However, it doesn&apos;t always provide totally uniform functionality. There are cases where PortAudio is limited by the capabilities of the underlying native audio API. For example, PortAudio doesn&apos;t provide sample rate conversion if you request a sample rate that is not supported by the native audio API. Another example is that the ASIO SDK only allows one device to be open at a time, so PortAudio/ASIO doesn&apos;t currently support opening multiple ASIO devices simultaneously.</para></sect1>
<sect1 id="api_overview_1key_abstractions">
<title>Key abstractions: Host APIs, Devices and Streams</title>
<para>The PortAudio processing model includes three main abstractions: <emphasis>Host APIs</emphasis>, audio <emphasis>Devices</emphasis> and audio <emphasis>Streams</emphasis>.</para><para>Host APIs represent platform-specific native audio APIs. Some examples of Host APIs are Core Audio on Mac OS, WMME and DirectSound on Windows and OSS and ALSA on Linux. The diagram in the previous section shows many of the supported native APIs. Sometimes it&apos;s useful to know which Host APIs you&apos;re dealing with, but it is easy to use PortAudio without ever interacting directly with the Host API abstraction.</para><para>Devices represent individual hardware audio interfaces or audio ports on the host platform. Devices have names and certain capabilities such as supported sample rates and the number of supported input and output channels. PortAudio provides functions to enumerate available Devices and to query for Device capabilities.</para><para>Streams manage active audio input and output from and to Devices. Streams may be half duplex (input or output) or full duplex (simultaneous input and output). Streams operate at a specific sample rate with particular sample formats, buffer sizes and internal buffering latencies. You specify these parameters when you open the Stream. Audio data is communicated between a Stream and your application via a user provided asynchronous callback function or by invoking synchronous read and write functions.</para><para>PortAudio supports audio input and output in a variety of sample formats: 8, 16, 24 and 32 bit integer formats and 32 bit floating point, irrespective of the formats supported by the native audio API. PortAudio also supports multichannel buffers in both interleaved and non-interleaved (separate buffer per channel) formats and automatically performs conversion when necessary. If requested, PortAudio can clamp out-of range samples and/or dither to a native format.</para><para>The PortAudio API offers the following functionality:<itemizedlist>
<listitem><para>Initialize and terminate the library</para></listitem><listitem><para>Enumerate available Host APIs</para></listitem><listitem><para>Enumerate available Devices either globally, or within each Host API</para></listitem><listitem><para>Discover default or recommended Devices and Device settings</para></listitem><listitem><para>Discover Device capabilities such as supported audio data formats and sample rates</para></listitem><listitem><para>Create and control audio Streams to acquire audio from and output audio to Devices</para></listitem><listitem><para>Provide Stream timing information to support synchronising audio with other parts of your application</para></listitem><listitem><para>Retrieve version and error information.</para></listitem></itemizedlist>
</para><para>These functions are described in more detail below.</para></sect1>
<sect1 id="api_overview_1top_level_functions">
<title>Initialization, termination and utility functions</title>
<para>The PortAudio library must be initialized before it can be used and terminated to clean up afterwards. You initialize PortAudio by calling <ref refid="portaudio_8h_1abed859482d156622d9332dff9b2d89da" kindref="member">Pa_Initialize()</ref> and clean up by calling <ref refid="portaudio_8h_1a0db317604e916e8bd6098e60e6237221" kindref="member">Pa_Terminate()</ref>.</para><para>You can query PortAudio for version information using <ref refid="portaudio_8h_1a66da08bcf908e0849c62a6b47f50d7b4" kindref="member">Pa_GetVersion()</ref> to get a numeric version number and <ref refid="portaudio_8h_1a28f3fd9e6d9f933cc695abea71c4b445" kindref="member">Pa_GetVersionText()</ref> to get a string.</para><para>The size in bytes of the various sample formats represented by the <ref refid="portaudio_8h_1a4582d93c2c2e60e12be3d74c5fe00b96" kindref="member">PaSampleFormat</ref> enumeration can be obtained using <ref refid="portaudio_8h_1a541ed0b734df2631bc4c229acf92abc1" kindref="member">Pa_GetSampleSize()</ref>.</para><para><ref refid="portaudio_8h_1a1b3c20044c9401c42add29475636e83d" kindref="member">Pa_Sleep()</ref> sleeps for a specified number of milliseconds. This isn&apos;t intended for use in production systems; it&apos;s provided only as a simple portable way to implement tests and examples where the main thread sleeps while audio is acquired or played by an asynchronous callback function.</para></sect1>
<sect1 id="api_overview_1host_apis">
<title>Host APIs</title>
<para>A Host API acts as a top-level grouping for all of the Devices offered by a single native platform audio API. Each Host API has a unique type identifier, a name, zero or more Devices, and nominated default input and output Devices.</para><para>Host APIs are usually referenced by index: an integer of type <ref refid="portaudio_8h_1aeef6da084c57c70aa94be97411e19930" kindref="member">PaHostApiIndex</ref> that ranges between zero and <ref refid="portaudio_8h_1a19dbdb7c8702e3f4bfc0cdb99dac3dd9" kindref="member">Pa_GetHostApiCount()</ref> - 1. You can enumerate all available Host APIs by counting across this range.</para><para>You can retrieve the index of the default Host API by calling <ref refid="portaudio_8h_1ae55c77f9b7e3f8eb301a6f1c0e2347ac" kindref="member">Pa_GetDefaultHostApi()</ref>.</para><para>Information about a Host API, such as it&apos;s name and default devices, is stored in a <ref refid="struct_pa_host_api_info" kindref="compound">PaHostApiInfo</ref> structure. You can retrieve a pointer to a particular Host API&apos;s <ref refid="struct_pa_host_api_info" kindref="compound">PaHostApiInfo</ref> structure by calling <ref refid="portaudio_8h_1a7c650aede88ea553066bab9bbe97ea90" kindref="member">Pa_GetHostApiInfo()</ref> with the Host API&apos;s index as a parameter.</para><para>Most PortAudio functions reference Host APIs by <ref refid="portaudio_8h_1aeef6da084c57c70aa94be97411e19930" kindref="member">PaHostApiIndex</ref> indices. Each Host API also has a unique type identifier defined in the <ref refid="portaudio_8h_1ae247ec252e84112170079ece319fc42c" kindref="member">PaHostApiTypeId</ref> enumeration. You can call <ref refid="portaudio_8h_1a081c3975126d20b4226facfb7ba0620f" kindref="member">Pa_HostApiTypeIdToHostApiIndex()</ref> to retrieve the current <ref refid="portaudio_8h_1aeef6da084c57c70aa94be97411e19930" kindref="member">PaHostApiIndex</ref> for a particular <ref refid="portaudio_8h_1ae247ec252e84112170079ece319fc42c" kindref="member">PaHostApiTypeId</ref>.</para></sect1>
<sect1 id="api_overview_1devices">
<title>Devices</title>
<para>A Device represents an audio endpoint provided by a particular native audio API. This usually corresponds to a specific input or output port on a hardware audio interface, or to the interface as a whole. Each Host API operates independently, so a single physical audio port may be addressable via different Devices exposed by different Host APIs.</para><para>A Device has a name, is associated with a Host API, and has a maximum number of supported input and output channels. PortAudio provides recommended default latency values and a default sample rate for each Device. To obtain more detailed information about device capabilities you can call <ref refid="portaudio_8h_1abdb313743d6efef26cecdae787a2bd3d" kindref="member">Pa_IsFormatSupported()</ref> to query whether it is possible to open a Stream using particular Devices, parameters and sample rate.</para><para>Although each Device conceptually belongs to a specific Host API, most PortAudio functions and data structures refer to Devices using a global, Host API-independent index of type <ref refid="portaudio_8h_1ad79317e65bde63d76c4b8e711ac5a361" kindref="member">PaDeviceIndex</ref> <ndash/> an integer of that ranges between zero and <ref refid="portaudio_8h_1acfe4d3c5ec1a343f459981bfa2057f8d" kindref="member">Pa_GetDeviceCount()</ref> - 1. The reasons for this are partly historical but it also makes it easy for applications to ignore the Host API abstraction and just work with Devices and Streams.</para><para>If you want to enumerate Devices belonging to a particular Host API you can count between 0 and <ref refid="struct_pa_host_api_info_1a44e3adfaba0117a6780e2493468c96b1" kindref="member">PaHostApiInfo::deviceCount</ref> - 1. You can convert this Host API-specific index value to a global <ref refid="portaudio_8h_1ad79317e65bde63d76c4b8e711ac5a361" kindref="member">PaDeviceIndex</ref> value by calling <ref refid="portaudio_8h_1a54f306b5e5258323c95a27c5722258cd" kindref="member">Pa_HostApiDeviceIndexToDeviceIndex()</ref>.</para><para>Information about a Device is stored in a <ref refid="struct_pa_device_info" kindref="compound">PaDeviceInfo</ref> structure. You can retrieve a pointer to a Devices&apos;s <ref refid="struct_pa_device_info" kindref="compound">PaDeviceInfo</ref> structure by calling <ref refid="portaudio_8h_1ac7d8e091ffc1d1d4a035704660e117eb" kindref="member">Pa_GetDeviceInfo()</ref> with the Device&apos;s index as a parameter.</para><para>You can retrieve the indices of the global default input and output devices using <ref refid="portaudio_8h_1abf9f2f82da95553d5adb929af670f74b" kindref="member">Pa_GetDefaultInputDevice()</ref> and <ref refid="portaudio_8h_1adc955dfab007624000695c48d4f876dc" kindref="member">Pa_GetDefaultOutputDevice()</ref>. Default Devices for each Host API are stored in the Host API&apos;s <ref refid="struct_pa_host_api_info" kindref="compound">PaHostApiInfo</ref> structures.</para><para>For an example of enumerating devices and printing information about their capabilities see the pa_devs.c program in the test directory of the PortAudio distribution.</para></sect1>
<sect1 id="api_overview_1streams">
<title>Streams</title>
<para>A Stream represents an active flow of audio data between your application and one or more audio Devices. A Stream operates at a specific sample rate with specific sample formats and buffer sizes.</para><sect2 id="api_overview_1io_methods">
<title>I/O Methods: callback and read/write</title>
<para>PortAudio offers two methods for communicating audio data between an open Stream and your Application: (1) an asynchronous callback interface, where PortAudio calls a user defined callback function when new audio data is available or required, and (2) synchronous read and write functions which can be used in a blocking or non-blocking manner. You choose between the two methods when you open a Stream. The two methods are discussed in more detail below.</para></sect2>
<sect2 id="api_overview_1opening_and_closing_streams">
<title>Opening and Closing Streams</title>
<para>You call <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref> to open a Stream, specifying the Device(s) to use, the number of input and output channels, sample formats, suggested latency values and flags that control dithering, clipping and overflow handling. You specify many of these parameters in two <ref refid="struct_pa_stream_parameters" kindref="compound">PaStreamParameters</ref> structures, one for input and one for output. If you&apos;re using the callback I/O method you also pass a callback buffer size, callback function pointer and user data pointer.</para><para>Devices may be full duplex (supporting simultaneous input and output) or half duplex (supporting input or output) <ndash/> usually this reflects the structure of the underlying native audio API. When opening a Stream you can specify one full duplex Device for both input and output, or two different Devices for input and output. Some Host APIs only support full-duplex operation with a full-duplex device (e.g. ASIO) but most are able to aggregate two half duplex devices into a full duplex Stream. PortAudio requires that all devices specified in a call to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref> belong to the same Host API.</para><para>A successful call to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref> creates a pointer to a <ref refid="portaudio_8h_1a19874734f89958fccf86785490d53b4c" kindref="member">PaStream</ref> <ndash/> an opaque handle representing the open Stream. All PortAudio API functions that operate on open Streams take a pointer to a <ref refid="portaudio_8h_1a19874734f89958fccf86785490d53b4c" kindref="member">PaStream</ref> as their first parameter.</para><para>PortAudio also provides <ref refid="portaudio_8h_1a0a12735ac191200f696a43b87667b714" kindref="member">Pa_OpenDefaultStream()</ref> <ndash/> a simpler alternative to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref> which you can use when you want to open the default audio Device(s) with default latency parameters.</para><para>You call <ref refid="portaudio_8h_1a92f56f88cbd14da0e8e03077e835d104" kindref="member">Pa_CloseStream()</ref> to close a Stream when you&apos;ve finished using it.</para></sect2>
<sect2 id="api_overview_1starting_and_stopping_streams">
<title>Starting and Stopping Streams</title>
<para>Newly opened Streams are initially stopped. You call <ref refid="portaudio_8h_1a7432aadd26c40452da12fa99fc1a047b" kindref="member">Pa_StartStream()</ref> to start a Stream. You can stop a running Stream using <ref refid="portaudio_8h_1af18dd60220251286c337631a855e38a0" kindref="member">Pa_StopStream()</ref> or <ref refid="portaudio_8h_1a138e57abde4e833c457b64895f638a25" kindref="member">Pa_AbortStream()</ref> (the Stop function plays out all internally queued audio data, while Abort tries to stop as quickly as possible). An open Stream can be started and stopped multiple times. You can call <ref refid="portaudio_8h_1a52d778c985ae9d566de7e13529cc771f" kindref="member">Pa_IsStreamStopped()</ref> to query whether a Stream is running or stopped.</para><para>By calling <ref refid="portaudio_8h_1aa11e7b06b2cde8621551f5d527965838" kindref="member">Pa_SetStreamFinishedCallback()</ref> it is possible to register a special <ref refid="portaudio_8h_1ab2530ee0cb756c67726f9074d3482ef2" kindref="member">PaStreamFinishedCallback</ref> that will be called when the Stream has completed playing any internally queued buffers. This can be used in conjunction with the <ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32aa01800db52ead393d8b0016f63d76650" kindref="member">paComplete</ref> stream callback return value (see below) to avoid blocking on a call to <ref refid="portaudio_8h_1af18dd60220251286c337631a855e38a0" kindref="member">Pa_StopStream()</ref> while queued audio data is still playing.</para></sect2>
<sect2 id="api_overview_1callback_io_method">
<title>The Callback I/O Method</title>
<para>So-called &apos;callback Streams&apos; operate by periodically invoking a callback function you supply to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref>. The callback function must implement the <ref refid="portaudio_8h_1a8a60fb2a5ec9cbade3f54a9c978e2710" kindref="member">PaStreamCallback</ref> signature. It gets called by PortAudio every time PortAudio needs your application to consume or produce audio data. The callback is passed pointers to buffers containing the audio to process. The format (interleave, sample data type) and size of these buffers is determined by the parameters passed to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref> when the Stream was opened.</para><para>Stream callbacks usually return <ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32acba49cbf0e3bf605bb3deecef3b4fce3" kindref="member">paContinue</ref> to indicate that PortAudio should keep the stream running. It is possible to deactivate a Stream from the stream callback by returning either <ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32aa01800db52ead393d8b0016f63d76650" kindref="member">paComplete</ref> or <ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32acaf141eb5d71420ffb4474da1dbd8de2" kindref="member">paAbort</ref>. In this case the Stream enters a deactivated state after the last buffer has finished playing (<ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32aa01800db52ead393d8b0016f63d76650" kindref="member">paComplete</ref>) or as soon as possible (<ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32acaf141eb5d71420ffb4474da1dbd8de2" kindref="member">paAbort</ref>). You can detect the deactivated state by calling <ref refid="portaudio_8h_1a1f8709c4971932643681a6f374c4bb5a" kindref="member">Pa_IsStreamActive()</ref> or by using <ref refid="portaudio_8h_1aa11e7b06b2cde8621551f5d527965838" kindref="member">Pa_SetStreamFinishedCallback()</ref> to subscribe to a stream finished notification. Note that even if the stream callback returns <ref refid="portaudio_8h_1ae9bfb9c4e1895326f30f80d415c66c32aa01800db52ead393d8b0016f63d76650" kindref="member">paComplete</ref> it&apos;s still necessary to call <ref refid="portaudio_8h_1af18dd60220251286c337631a855e38a0" kindref="member">Pa_StopStream()</ref> or <ref refid="portaudio_8h_1a138e57abde4e833c457b64895f638a25" kindref="member">Pa_AbortStream()</ref> to enter the stopped state.</para><para>Many of the tests in the /tests directory of the PortAudio distribution implement PortAudio stream callbacks. For example see: patest_sine.c (audio output), patest_record.c (audio input), patest_wire.c (audio pass-through) and pa_fuzz.c (simple audio effects processing).</para><para><bold>IMPORTANT:</bold> The stream callback function often needs to operate with very high or real-time priority. As a result there are strict requirements placed on the type of code that can be executed in a stream callback. In general this means avoiding any code that might block, including: acquiring locks, calling OS API functions including allocating memory. With the exception of <ref refid="portaudio_8h_1a83b8c624464dd7bb6a01b06ab596c115" kindref="member">Pa_GetStreamCpuLoad()</ref> you may not call PortAudio API functions from within the stream callback.</para></sect2>
<sect2 id="api_overview_1read_write_io_method">
<title>The Read/Write I/O Method</title>
<para>As an alternative to the callback I/O method, PortAudio provides a synchronous read/write interface for acquiring and playing audio. This can be useful for applications that don&apos;t require the lowest possibly latency, or don&apos;t warrant the increased complexity of synchronising with an asynchronous callback funciton. This I/O method is also useful when calling PortAudio from programming languages that don&apos;t support asynchronous callbacks.</para><para>To open a Stream in read/write mode you pass a NULL stream callback function pointer to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref>.</para><para>To write audio data to a Stream call <ref refid="portaudio_8h_1a075a6efb503a728213bdae24347ed27d" kindref="member">Pa_WriteStream()</ref> and to read data call <ref refid="portaudio_8h_1a0b62d4b74b5d3d88368e9e4c0b8b2dc7" kindref="member">Pa_ReadStream()</ref>. These functions will block if the internal buffers are full, making them safe to call in a tight loop. If you want to avoid blocking you can query the amount of available read or write space using <ref refid="portaudio_8h_1ad04c33f045fa58d7b705b56b1fd3e816" kindref="member">Pa_GetStreamReadAvailable()</ref> or <ref refid="portaudio_8h_1a25595acf48733ec32045aa189c3caa61" kindref="member">Pa_GetStreamWriteAvailable()</ref> and use the returned values to limit the amount of data you read or write.</para><para>For examples of the read/write I/O method see the following examples in the /tests directory of the PortAudio distribution: patest_read_record.c (audio input), patest_write_sine.c (audio output), patest_read_write_wire.c (audio pass-through).</para></sect2>
<sect2 id="api_overview_1stream_info">
<title>Retrieving Stream Information</title>
<para>You can retrieve information about an open Stream by calling <ref refid="portaudio_8h_1a3d9c4cbda4e9f381b76f287c3de8a758" kindref="member">Pa_GetStreamInfo()</ref>. This returns a <ref refid="struct_pa_stream_info" kindref="compound">PaStreamInfo</ref> structure containing the actual input and output latency and sample rate of the stream. It&apos;s possible for these values to be different from the suggested values passed to <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref>.</para><para>When using a callback stream you can call <ref refid="portaudio_8h_1a83b8c624464dd7bb6a01b06ab596c115" kindref="member">Pa_GetStreamCpuLoad()</ref> to retrieve a rough estimate of the amount of CPU time your callback function is using.</para></sect2>
<sect2 id="api_overview_1stream_timing">
<title>Stream Timing Information</title>
<para>When using the callback I/O method your stream callback function receives timing information via a pointer to a <ref refid="struct_pa_stream_callback_time_info" kindref="compound">PaStreamCallbackTimeInfo</ref> structure. This structure contains the current time along with the estimated hardware capture and playback time of the first sample of the input and output buffers. All times are measured in seconds relative to a Stream-specific clock. The current Stream clock time can be retrieved using <ref refid="portaudio_8h_1a2b3fb60e6949f37f7f134105ff425749" kindref="member">Pa_GetStreamTime()</ref>.</para><para>You can use the stream callback <ref refid="struct_pa_stream_callback_time_info" kindref="compound">PaStreamCallbackTimeInfo</ref> times in conjunction with timestamps returned by <ref refid="portaudio_8h_1a2b3fb60e6949f37f7f134105ff425749" kindref="member">Pa_GetStreamTime()</ref> to implement time synchronization schemes such as time aligning your GUI display with rendered audio, or maintaining synchronization between MIDI and audio playback.</para></sect2>
</sect1>
<sect1 id="api_overview_1error_handling">
<title>Error Handling</title>
<para>Most PortAudio functions return error codes using values from the <ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref> enumeration. All error codes are negative values. Some functions return values greater than or equal to zero for normal results and a negative error code in case of error.</para><para>You can convert <ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref> error codes to human readable text by calling <ref refid="portaudio_8h_1ae606855a611cf29c7d2d7421df5e3b5d" kindref="member">Pa_GetErrorText()</ref>.</para><para>PortAudio usually tries to translate error conditions into portable <ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref> error codes. However if an unexpected error is encountered the <ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a47726071f5dccc656d5e3ff20bbfc5a0" kindref="member">paUnanticipatedHostError</ref> code may be returned. In this case a further mechanism is provided to query for Host API-specific error information. If PortAudio returns <ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a47726071f5dccc656d5e3ff20bbfc5a0" kindref="member">paUnanticipatedHostError</ref> you can call <ref refid="portaudio_8h_1aad573f208b60577f21d2777a7c5054e0" kindref="member">Pa_GetLastHostErrorInfo()</ref> to retrieve a pointer to a <ref refid="struct_pa_host_error_info" kindref="compound">PaHostErrorInfo</ref> structure that provides more information, including the Host API that encountered the error, a native API error code and error text.</para></sect1>
<sect1 id="api_overview_1host_api_extensions">
<title>Host API and Platform-specific Extensions</title>
<para>The public PortAudio API only exposes functionality that can be provided across all target platforms. In some cases individual native audio APIs offer unique functionality. Some PortAudio Host APIs expose this functionality via Host API-specific extensions. Examples include access to low-level buffering and priority parameters, opening a Stream with only a subset of a Device&apos;s channels, or accessing channel metadata such as channel names.</para><para>Host API-specific extensions are provided in the form of additional functions and data structures defined in Host API-specific header files found in the /include directory.</para><para>The <ref refid="struct_pa_stream_parameters" kindref="compound">PaStreamParameters</ref> structure passed to <ref refid="portaudio_8h_1abdb313743d6efef26cecdae787a2bd3d" kindref="member">Pa_IsFormatSupported()</ref> and <ref refid="portaudio_8h_1a443ad16338191af364e3be988014cbbe" kindref="member">Pa_OpenStream()</ref> has a field named <ref refid="struct_pa_stream_parameters_1aff01b9fa0710ad1654471e97665c06a9" kindref="member">PaStreamParameters::hostApiSpecificStreamInfo</ref> that is sometimes used to pass low level information when opening a Stream.</para><para>See the documentation for the individual Host API-specific header files for details of the extended functionality they expose:</para><para><itemizedlist>
<listitem><para><ref refid="pa__asio_8h" kindref="compound">pa_asio.h</ref></para></listitem><listitem><para><ref refid="pa__jack_8h" kindref="compound">pa_jack.h</ref></para></listitem><listitem><para><ref refid="pa__linux__alsa_8h" kindref="compound">pa_linux_alsa.h</ref></para></listitem><listitem><para><ref refid="pa__mac__core_8h" kindref="compound">pa_mac_core.h</ref></para></listitem><listitem><para><ref refid="pa__win__ds_8h" kindref="compound">pa_win_ds.h</ref></para></listitem><listitem><para><ref refid="pa__win__wasapi_8h" kindref="compound">pa_win_wasapi.h</ref></para></listitem><listitem><para><ref refid="pa__win__wmme_8h" kindref="compound">pa_win_wmme.h</ref></para></listitem><listitem><para><ref refid="pa__win__waveformat_8h" kindref="compound">pa_win_waveformat.h</ref> </para></listitem></itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
