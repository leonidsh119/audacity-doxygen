<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct_l_v2___event___feature" kind="struct" language="C++" prot="public">
    <compoundname>LV2_Event_Feature</compoundname>
    <includes refid="event_8h" local="no">event.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_l_v2___event___feature_1a18b4fda679c0a9ea932dd3a5828686e1" prot="public" static="no" mutable="no">
        <type><ref refid="event_8h_1a63cb077a38b841faaf5a4d6803a5a8f9" kindref="member">LV2_Event_Callback_Data</ref></type>
        <definition>LV2_Event_Callback_Data LV2_Event_Feature::callback_data</definition>
        <argsstring></argsstring>
        <name>callback_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque pointer to host data.</para><para>The plugin MUST pass this to any call to functions in this struct. Otherwise, it must not be interpreted in any way. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" line="239" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_l_v2___event___feature_1a2ecce5a44b5ebf4af4a0edde874e183d" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>(*</type>
        <definition>uint32_t(* LV2_Event_Feature::lv2_event_ref) (LV2_Event_Callback_Data callback_data, LV2_Event *event)</definition>
        <argsstring>)(LV2_Event_Callback_Data callback_data, LV2_Event *event)</argsstring>
        <name>lv2_event_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take a reference to a non-POD event.</para><para>If a plugin receives an event with type 0, it means the event is a pointer to some object in memory and not a flat sequence of bytes in the buffer. When receiving a non-POD event, the plugin already has an implicit reference to the event. If the event is stored AND passed to an output, lv2_event_ref MUST be called on that event. If the event is only stored OR passed through, this is not necessary (as the plugin already has 1 implicit reference).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>An event received at an input that will not be copied to an output or stored in any way.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The calling context. Like event types, this is a mapped URI, see lv2_context.h. Simple plugin with just a <ref refid="namespacewaflib_1_1_task_1a859c6336afe027ae782f84b9e49a4f0f" kindref="member">run()</ref> method should pass 0 here (the ID of the &apos;standard&apos; LV2 run context). The host guarantees that this function is realtime safe iff the context is realtime safe.</para></parameterdescription>
</parameteritem>
</parameterlist>
PLUGINS THAT VIOLATE THESE RULES MAY CAUSE CRASHES AND MEMORY LEAKS. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" line="263" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_l_v2___event___feature_1a91a3e8d1e71ae094e63863ad885dc10d" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>(*</type>
        <definition>uint32_t(* LV2_Event_Feature::lv2_event_unref) (LV2_Event_Callback_Data callback_data, LV2_Event *event)</definition>
        <argsstring>)(LV2_Event_Callback_Data callback_data, LV2_Event *event)</argsstring>
        <name>lv2_event_unref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Drop a reference to a non-POD event.</para><para>If a plugin receives an event with type 0, it means the event is a pointer to some object in memory and not a flat sequence of bytes in the buffer. If the plugin does not pass the event through to an output or store it internally somehow, it MUST call this function on the event (more information on using non-POD events below).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>An event received at an input that will not be copied to an output or stored in any way.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The calling context. Like event types, this is a mapped URI, see lv2_context.h. Simple plugin with just a <ref refid="namespacewaflib_1_1_task_1a859c6336afe027ae782f84b9e49a4f0f" kindref="member">run()</ref> method should pass 0 here (the ID of the &apos;standard&apos; LV2 run context). The host guarantees that this function is realtime safe iff the context is realtime safe.</para></parameterdescription>
</parameteritem>
</parameterlist>
PLUGINS THAT VIOLATE THESE RULES MAY CAUSE CRASHES AND MEMORY LEAKS. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" line="286" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Non-POD events feature.</para><para>To support this feature the host must pass an LV2_Feature struct to the plugin&apos;s instantiate method with URI &quot;http://lv2plug.in/ns/ext/event&quot; and data pointed to an instance of this struct. Note this feature is not mandatory to support the event extension. </para>    </detaileddescription>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" line="232" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/event/event.h" bodystart="232" bodyend="288"/>
    <listofallmembers>
      <member refid="struct_l_v2___event___feature_1a18b4fda679c0a9ea932dd3a5828686e1" prot="public" virt="non-virtual"><scope>LV2_Event_Feature</scope><name>callback_data</name></member>
      <member refid="struct_l_v2___event___feature_1a2ecce5a44b5ebf4af4a0edde874e183d" prot="public" virt="non-virtual"><scope>LV2_Event_Feature</scope><name>lv2_event_ref</name></member>
      <member refid="struct_l_v2___event___feature_1a91a3e8d1e71ae094e63863ad885dc10d" prot="public" virt="non-virtual"><scope>LV2_Event_Feature</scope><name>lv2_event_unref</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
