<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lsp_8c" kind="file" language="C++">
    <compoundname>lsp.c</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="lsp_8h" local="yes">lsp.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="misc_8h" local="yes">misc.h</includes>
    <includes refid="lookup_8h" local="yes">lookup.h</includes>
    <includes refid="scales_8h" local="yes">scales.h</includes>
    <incdepgraph>
      <node id="22987">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="22988" relation="include">
        </childnode>
        <childnode refid="22989" relation="include">
        </childnode>
        <childnode refid="22979" relation="include">
        </childnode>
      </node>
      <node id="22986">
        <label>stdint.h</label>
      </node>
      <node id="22980">
        <label>stdlib.h</label>
      </node>
      <node id="22990">
        <label>misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="22991" relation="include">
        </childnode>
      </node>
      <node id="22995">
        <label>scales.h</label>
        <link refid="scales_8h"/>
        <childnode refid="22978" relation="include">
        </childnode>
        <childnode refid="22982" relation="include">
        </childnode>
      </node>
      <node id="22991">
        <label>vorbis/codec.h</label>
        <link refid="codec_8h"/>
        <childnode refid="22992" relation="include">
        </childnode>
      </node>
      <node id="22993">
        <label>stddef.h</label>
      </node>
      <node id="22989">
        <label>alloca.h</label>
      </node>
      <node id="22983">
        <label>ogg/os_types.h</label>
        <link refid="os__types_8h"/>
        <childnode refid="22984" relation="include">
        </childnode>
      </node>
      <node id="22988">
        <label>MacTypes.h</label>
      </node>
      <node id="22979">
        <label>string.h</label>
      </node>
      <node id="22977">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c</label>
        <link refid="lsp.c"/>
        <childnode refid="22978" relation="include">
        </childnode>
        <childnode refid="22979" relation="include">
        </childnode>
        <childnode refid="22980" relation="include">
        </childnode>
        <childnode refid="22981" relation="include">
        </childnode>
        <childnode refid="22982" relation="include">
        </childnode>
        <childnode refid="22990" relation="include">
        </childnode>
        <childnode refid="22994" relation="include">
        </childnode>
        <childnode refid="22995" relation="include">
        </childnode>
      </node>
      <node id="22981">
        <label>lsp.h</label>
        <link refid="lsp_8h"/>
      </node>
      <node id="22992">
        <label>ogg/ogg.h</label>
        <link refid="ogg_8h"/>
        <childnode refid="22993" relation="include">
        </childnode>
        <childnode refid="22983" relation="include">
        </childnode>
      </node>
      <node id="22978">
        <label>math.h</label>
      </node>
      <node id="22982">
        <label>os.h</label>
        <link refid="os_8h"/>
        <childnode refid="22978" relation="include">
        </childnode>
        <childnode refid="22983" relation="include">
        </childnode>
        <childnode refid="22990" relation="include">
        </childnode>
      </node>
      <node id="22994">
        <label>lookup.h</label>
        <link refid="lookup_8h"/>
      </node>
      <node id="22984">
        <label>ogg/config_types.h</label>
        <link refid="config__types_8h"/>
        <childnode refid="22985" relation="include">
        </childnode>
        <childnode refid="22986" relation="include">
        </childnode>
        <childnode refid="22987" relation="include">
        </childnode>
      </node>
      <node id="22985">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="lsp_8c_1a002b2f4894492820fe708b1b7e7c5e70" prot="public" static="no">
        <name>EPSILON</name>
        <initializer>10e-7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="309" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="309" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lsp_8c_1a85c9a851bcd14efc1791a100c61f2444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void vorbis_lsp_to_curve</definition>
        <argsstring>(float *curve, int *map, int n, int ln, float *lsp, int m, float amp, float ampoffset)</argsstring>
        <name>vorbis_lsp_to_curve</name>
        <param>
          <type>float *</type>
          <declname>curve</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>ln</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>lsp</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ampoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="248" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="248" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="lsp_8c_1aa95172c09a46ceee6abdca1c3d67c2b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void cheby</definition>
        <argsstring>(float *g, int ord)</argsstring>
        <name>cheby</name>
        <param>
          <type>float *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="286" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="286" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="lsp_8c_1a727a63321be67e69efd0a7170b151237" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int comp</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>comp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="298" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="lsp_8c_1a1d0d0bc456f795450a5dd1a72be7b370" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int Laguerre_With_Deflation</definition>
        <argsstring>(float *a, int ord, float *r)</argsstring>
        <name>Laguerre_With_Deflation</name>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>ord</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="310" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="310" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="lsp_8c_1a2fb7e69c10840718ebb496ab67f91a4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int Newton_Raphson</definition>
        <argsstring>(float *a, int ord, float *r)</argsstring>
        <name>Newton_Raphson</name>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>ord</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="366" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="366" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="lsp_8c_1aed676b838991a38a53c9cbaf419bf724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int vorbis_lpc_to_lsp</definition>
        <argsstring>(float *lpc, float *lsp, int m)</argsstring>
        <name>vorbis_lpc_to_lsp</name>
        <param>
          <type>float *</type>
          <declname>lpc</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>lsp</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" line="405" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c" bodystart="405" bodyend="456"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FILE<sp/>IS<sp/>PART<sp/>OF<sp/>THE<sp/>OggVorbis<sp/>SOFTWARE<sp/>CODEC<sp/>SOURCE<sp/>CODE.<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>USE,<sp/>DISTRIBUTION<sp/>AND<sp/>REPRODUCTION<sp/>OF<sp/>THIS<sp/>LIBRARY<sp/>SOURCE<sp/>IS<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>GOVERNED<sp/>BY<sp/>A<sp/>BSD-STYLE<sp/>SOURCE<sp/>LICENSE<sp/>INCLUDED<sp/>WITH<sp/>THIS<sp/>SOURCE<sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>IN<sp/>&apos;COPYING&apos;.<sp/>PLEASE<sp/>READ<sp/>THESE<sp/>TERMS<sp/>BEFORE<sp/>DISTRIBUTING.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>OggVorbis<sp/>SOURCE<sp/>CODE<sp/>IS<sp/>(C)<sp/>COPYRIGHT<sp/>1994-2009<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>Xiph.Org<sp/>Foundation<sp/>http://www.xiph.org/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>********************************************************************</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>function:<sp/>LSP<sp/>(also<sp/>called<sp/>LSF)<sp/>conversion<sp/>routines</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>last<sp/>mod:<sp/>$Id:<sp/>lsp.c<sp/>17538<sp/>2010-10-15<sp/>02:52:29Z<sp/>tterribe<sp/>$</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>The<sp/>LSP<sp/>generation<sp/>code<sp/>is<sp/>taken<sp/>(with<sp/>minimal<sp/>modification<sp/>and<sp/>a</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>few<sp/>bugfixes)<sp/>from<sp/>&quot;On<sp/>the<sp/>Computation<sp/>of<sp/>the<sp/>LSP<sp/>Frequencies&quot;<sp/>by</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>Joseph<sp/>Rothweiler<sp/>(see<sp/>http://www.rothweiler.us<sp/>for<sp/>contact<sp/>info).</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>The<sp/>paper<sp/>is<sp/>available<sp/>at:</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>http://www.myown1.com/joe/lsf</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>the<sp/>lpc-lsp<sp/>conversion<sp/>finds<sp/>the<sp/>roots<sp/>of<sp/>polynomial<sp/>with</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>an<sp/>iterative<sp/>root<sp/>polisher<sp/>(CACM<sp/>algorithm<sp/>283).<sp/><sp/>It<sp/>*is*<sp/>possible</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>to<sp/>confuse<sp/>this<sp/>algorithm<sp/>into<sp/>not<sp/>converging;<sp/>that<sp/>should<sp/>only</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>happen<sp/>with<sp/>absurdly<sp/>closely<sp/>spaced<sp/>roots<sp/>(very<sp/>sharp<sp/>peaks<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>LPC<sp/>f<sp/>response)<sp/>which<sp/>in<sp/>turn<sp/>should<sp/>be<sp/>impossible<sp/>in<sp/>our<sp/>use<sp/>of</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>the<sp/>code.<sp/><sp/>If<sp/>this<sp/>*does*<sp/>happen<sp/>anyway,<sp/>it&apos;s<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>floor</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>finder;<sp/>find<sp/>the<sp/>cause<sp/>of<sp/>the<sp/>confusion<sp/>(probably<sp/>a<sp/>single<sp/>bin</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>spike<sp/>or<sp/>accidental<sp/>near-float-limit<sp/>resolution<sp/>problems)<sp/>and</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>correct<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lsp_8h" kindref="compound">lsp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os_8h" kindref="compound">os.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="misc_8h" kindref="compound">misc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lookup_8h" kindref="compound">lookup.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scales_8h" kindref="compound">scales.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>three<sp/>possible<sp/>LSP<sp/>to<sp/>f<sp/>curve<sp/>functions;<sp/>the<sp/>exact<sp/>computation</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>(float),<sp/>a<sp/>lookup<sp/>based<sp/>float<sp/>implementation,<sp/>and<sp/>an<sp/>integer</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>implementation.<sp/><sp/>The<sp/>float<sp/>lookup<sp/>is<sp/>likely<sp/>the<sp/>optimal<sp/>choice<sp/>on</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>any<sp/>machine<sp/>with<sp/>an<sp/>FPU.<sp/><sp/>The<sp/>integer<sp/>implementation<sp/>is<sp/>*not*<sp/>fixed</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>point<sp/>(due<sp/>to<sp/>the<sp/>need<sp/>for<sp/>a<sp/>large<sp/>dynamic<sp/>range<sp/>and<sp/>thus<sp/>a</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>separately<sp/>tracked<sp/>exponent)<sp/>and<sp/>thus<sp/>much<sp/>more<sp/>complex<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>relatively<sp/>simple<sp/>float<sp/>implementations.<sp/>It&apos;s<sp/>mostly<sp/>for<sp/>future</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>work<sp/>on<sp/>a<sp/>fully<sp/>fixed<sp/>point<sp/>implementation<sp/>for<sp/>processors<sp/>like<sp/>the</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>ARM<sp/>family.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>define<sp/>either<sp/>of<sp/>these<sp/>(preferably<sp/>FLOAT_LOOKUP)<sp/>to<sp/>have<sp/>faster</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>but<sp/>less<sp/>precise<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>FLOAT_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INT_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FLOAT_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lookup_8c" kindref="compound">lookup.c</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>catch<sp/>this<sp/>in<sp/>the<sp/>build<sp/>system;<sp/>we<sp/>#include<sp/>for</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compilers<sp/>(like<sp/>gcc)<sp/>that<sp/>can&apos;t<sp/>inline<sp/>across</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modules<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>side<sp/>effect:<sp/>changes<sp/>*lsp<sp/>to<sp/>cosines<sp/>of<sp/>lsp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lsp_8c_1a85c9a851bcd14efc1791a100c61f2444" kindref="member">vorbis_lsp_to_curve</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*curve,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structmap" kindref="compound">map</ref>,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lsp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amp,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ampoffset){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>wdel=<ref refid="mathematics_8h_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>/ln;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="os_8h_1aab8c4bf1d74a78283d1becfe683171e4" kindref="member">vorbis_fpu_control</ref><sp/>fpu;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="os_8h_1a2810b290d777bd34e300a3af10497796" kindref="member">vorbis_fpu_setround</ref>(&amp;fpu);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;i++)lsp[i]=vorbis_coslook(lsp[i]);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;n){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>=map[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qexp;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>=.7071067812f;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>=.7071067812f;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w=vorbis_coslook(wdel*k);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ftmp=lsp;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>=m&gt;&gt;1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(c--){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=ftmp[0]-w;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p*=ftmp[1]-w;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ftmp+=2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m&amp;1){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>odd<sp/>order<sp/>filter;<sp/>slightly<sp/>assymetric<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>last<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=ftmp[0]-w;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p*=p*(1.f-w*w);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>even<sp/>order<sp/>filter;<sp/>still<sp/>symmetric<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=q*(1.f+w);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p*=p*(1.f-w);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>q=frexp(p+q,&amp;qexp);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>q=vorbis_fromdBlook(amp*</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_invsqlook(q)*</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_invsq2explook(qexp+m)-</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampoffset);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curve[i++]*=<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(map[i]==k);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="os_8h_1a890fc27c4b30233656c1195799203e83" kindref="member">vorbis_fpu_restore</ref>(fpu);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>INT_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lookup_8c" kindref="compound">lookup.c</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>catch<sp/>this<sp/>in<sp/>the<sp/>build<sp/>system;<sp/>we<sp/>#include<sp/>for</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compilers<sp/>(like<sp/>gcc)<sp/>that<sp/>can&apos;t<sp/>inline<sp/>across</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modules<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MLOOP_1[64]={</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>0,10,11,11,<sp/>12,12,12,12,<sp/>13,13,13,13,<sp/>13,13,13,13,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>14,14,14,14,<sp/>14,14,14,14,<sp/>14,14,14,14,<sp/>14,14,14,14,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>15,15,15,15,<sp/>15,15,15,15,<sp/>15,15,15,15,<sp/>15,15,15,15,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>15,15,15,15,<sp/>15,15,15,15,<sp/>15,15,15,15,<sp/>15,15,15,15,</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MLOOP_2[64]={</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>0,4,5,5,<sp/>6,6,6,6,<sp/>7,7,7,7,<sp/>7,7,7,7,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>8,8,8,8,<sp/>8,8,8,8,<sp/>8,8,8,8,<sp/>8,8,8,8,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>9,9,9,9,<sp/>9,9,9,9,<sp/>9,9,9,9,<sp/>9,9,9,9,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>9,9,9,9,<sp/>9,9,9,9,<sp/>9,9,9,9,<sp/>9,9,9,9,</highlight></codeline>
<codeline lineno="134"><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MLOOP_3[8]={0,1,2,2,3,3,3,3};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>side<sp/>effect:<sp/>changes<sp/>*lsp<sp/>to<sp/>cosines<sp/>of<sp/>lsp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lsp_8c_1a85c9a851bcd14efc1791a100c61f2444" kindref="member">vorbis_lsp_to_curve</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*curve,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*map,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lsp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amp,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ampoffset){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>&lt;=<sp/>m<sp/>&lt;<sp/>256<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>for<sp/>using<sp/>all<sp/>int<sp/>later<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ampoffseti=rint(ampoffset*4096.<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ampi=rint(amp*16.<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ilsp=alloca(m*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ilsp));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;i++)ilsp[i]=vorbis_coslook_i(lsp[i]/<ref refid="mathematics_8h_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>*65536.<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>+.5<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;n){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,k=map[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pi=46341;<sp/></highlight><highlight class="comment">/*<sp/>2**-.5<sp/>in<sp/>0.16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>qi=46341;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qexp=0,shift;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>wi=vorbis_coslook_i(k*65536/ln);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>qi*=labs(ilsp[0]-wi);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>pi*=labs(ilsp[1]-wi);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=3;j&lt;<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;j+=2){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(shift=MLOOP_1[(pi|qi)&gt;&gt;25]))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(shift=MLOOP_2[(pi|qi)&gt;&gt;19]))</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift=MLOOP_3[(pi|qi)&gt;&gt;16];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi=(qi&gt;&gt;shift)*labs(ilsp[j-1]-wi);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi=(pi&gt;&gt;shift)*labs(ilsp[j]-wi);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qexp+=shift;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(shift=MLOOP_1[(pi|qi)&gt;&gt;25]))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(shift=MLOOP_2[(pi|qi)&gt;&gt;19]))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift=MLOOP_3[(pi|qi)&gt;&gt;16];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pi,qi<sp/>normalized<sp/>collectively,<sp/>both<sp/>tracked<sp/>using<sp/>qexp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m&amp;1){</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>odd<sp/>order<sp/>filter;<sp/>slightly<sp/>assymetric<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>last<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi=(qi&gt;&gt;shift)*labs(ilsp[j-1]-wi);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi=(pi&gt;&gt;shift)&lt;&lt;14;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qexp+=shift;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(shift=MLOOP_1[(pi|qi)&gt;&gt;25]))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(shift=MLOOP_2[(pi|qi)&gt;&gt;19]))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift=MLOOP_3[(pi|qi)&gt;&gt;16];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi&gt;&gt;=shift;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi&gt;&gt;=shift;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qexp+=shift-14*((m+1)&gt;&gt;1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi=((pi*pi)&gt;&gt;16);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi=((qi*qi)&gt;&gt;16);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qexp=qexp*2+<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi*=(1&lt;&lt;14)-((wi*wi)&gt;&gt;14);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi+=pi&gt;&gt;14;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>even<sp/>order<sp/>filter;<sp/>still<sp/>symmetric<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>p*=p(1-w),<sp/>q*=q(1+w),<sp/>let<sp/>normalization<sp/>drift<sp/>because<sp/>it<sp/>isn&apos;t</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worth<sp/>tracking<sp/>step<sp/>by<sp/>step<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi&gt;&gt;=shift;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi&gt;&gt;=shift;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qexp+=shift-7*<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi=((pi*pi)&gt;&gt;16);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi=((qi*qi)&gt;&gt;16);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qexp=qexp*2+<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi*=(1&lt;&lt;14)-wi;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi*=(1&lt;&lt;14)+wi;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi=(qi+pi)&gt;&gt;14;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we&apos;ve<sp/>let<sp/>the<sp/>normalization<sp/>drift<sp/>because<sp/>it<sp/>wasn&apos;t<sp/>important;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>however,<sp/>for<sp/>the<sp/>lookup,<sp/>things<sp/>must<sp/>be<sp/>normalized<sp/>again.<sp/><sp/>We</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need<sp/>at<sp/>most<sp/>one<sp/>right<sp/>shift<sp/>or<sp/>a<sp/>number<sp/>of<sp/>left<sp/>shifts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(qi&amp;0xffff0000){<sp/></highlight><highlight class="comment">/*<sp/>checks<sp/>for<sp/>1.xxxxxxxxxxxxxxxx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qi&gt;&gt;=1;<sp/>qexp++;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(qi<sp/>&amp;&amp;<sp/>!(qi&amp;0x8000)){<sp/></highlight><highlight class="comment">/*<sp/>checks<sp/>for<sp/>0.0xxxxxxxxxxxxxxx<sp/>or<sp/>less*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qi&lt;&lt;=1;<sp/>qexp--;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>amp=vorbis_fromdBlook_i(ampi*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>n.4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_invsqlook_i(qi,qexp)-</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>m.8,<sp/>m+n&lt;=8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ampoffseti);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>8.12[0]<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>curve[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]*=amp;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(map[++i]==k)curve[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]*=amp;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>old,<sp/>nonoptimized<sp/>but<sp/>simple<sp/>version<sp/>for<sp/>any<sp/>poor<sp/>sap<sp/>who<sp/>needs<sp/>to</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/>figure<sp/>out<sp/>what<sp/>the<sp/>hell<sp/>this<sp/>code<sp/>does,<sp/>or<sp/>wants<sp/>the<sp/>other</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/>fraction<sp/>of<sp/>a<sp/>dB<sp/>precision<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>side<sp/>effect:<sp/>changes<sp/>*lsp<sp/>to<sp/>cosines<sp/>of<sp/>lsp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="lsp_8h_1a85c9a851bcd14efc1791a100c61f2444" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lsp_8c_1a85c9a851bcd14efc1791a100c61f2444" kindref="member">vorbis_lsp_to_curve</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*curve,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*map,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lsp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amp,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ampoffset){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>wdel=<ref refid="mathematics_8h_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>/ln;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;i++)lsp[i]=2.<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>*<ref refid="pffft_8c_1a57a66355e043ccefc17aca9338a2b748" kindref="member">cos</ref>(lsp[i]);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;n){</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,k=map[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p=.5f;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q=.5f;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w=2.f*<ref refid="pffft_8c_1a57a66355e043ccefc17aca9338a2b748" kindref="member">cos</ref>(wdel*k);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;j&lt;<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;j+=2){</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>*=<sp/>w-lsp[j-1];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>*=<sp/>w-lsp[j];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j==m){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>odd<sp/>order<sp/>filter;<sp/>slightly<sp/>assymetric<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>last<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=w-lsp[j-1];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p*=p*(4.f-w*w);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>even<sp/>order<sp/>filter;<sp/>still<sp/>symmetric<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p*=p*(2.f-w);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q*=q*(2.f+w);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>q=<ref refid="scales_8h_1a2bac1111562dc101a4b2d8fea9b25598" kindref="member">fromdB</ref>(amp/sqrt(p+q)-ampoffset);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>curve[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]*=<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(map[++i]==k)curve[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]*=<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cheby(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ord)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>g[0]<sp/>*=<sp/>.5f;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=2;<sp/>i&lt;=<sp/>ord;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=ord;<sp/>j<sp/>&gt;=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;<sp/>j--)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g[j-2]<sp/>-=<sp/>g[j];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g[j]<sp/>+=<sp/>g[j];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)a&lt;*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)b)-(*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)a&gt;*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Newton-Raphson-Maehly<sp/>actually<sp/>functioned<sp/>as<sp/>a<sp/>decent<sp/>root<sp/>finder,</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/>but<sp/>there<sp/>are<sp/>root<sp/>sets<sp/>for<sp/>which<sp/>it<sp/>gets<sp/>into<sp/>limit<sp/>cycles</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/>(exacerbated<sp/>by<sp/>zero<sp/>suppression)<sp/>and<sp/>fails.<sp/><sp/>We<sp/>can&apos;t<sp/>afford<sp/>to</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/>fail,<sp/>even<sp/>if<sp/>the<sp/>failure<sp/>is<sp/>1<sp/>in<sp/>100,000,000,<sp/>so<sp/>we<sp/>now<sp/>use</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/>Laguerre<sp/>and<sp/>later<sp/>polish<sp/>with<sp/>Newton-Raphson<sp/>(which<sp/>can<sp/>then</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/>afford<sp/>to<sp/>fail)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="lsp_8c_1a002b2f4894492820fe708b1b7e7c5e70" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPSILON<sp/>10e-7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Laguerre_With_Deflation(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ord,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*r){</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lastdelta=0.f;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*defl=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*defl)*(ord+1));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;=ord;i++)defl[i]=a[i];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(m=ord;m&gt;0;m--){</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">=0.f,delta;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterate<sp/>a<sp/>root<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p=defl[<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>],<ref refid="xlpp_8c_1ae9f2a1c4ccbaf7dae02c0330a1b54e22" kindref="member">pp</ref>=0.f,ppp=0.f,denom;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>eval<sp/>the<sp/>polynomial<sp/>and<sp/>its<sp/>first<sp/>two<sp/>derivatives<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=m;i&gt;0;i--){</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">*ppp<sp/>+<sp/><ref refid="xlpp_8c_1ae9f2a1c4ccbaf7dae02c0330a1b54e22" kindref="member">pp</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">*pp<sp/><sp/>+<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">*p<sp/><sp/><sp/>+<sp/>defl[i-1];</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Laguerre&apos;s<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>denom=(m-1)<sp/>*<sp/>((m-1)*pp*pp<sp/>-<sp/>m*p*ppp);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(denom&lt;0)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);<sp/><sp/></highlight><highlight class="comment">/*<sp/>complex<sp/>root!<sp/><sp/>The<sp/>LPC<sp/>generator<sp/>handed<sp/>us<sp/>a<sp/>bad<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pp&gt;0){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>=<sp/>pp<sp/>+<sp/>sqrt(denom);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(denom&lt;<ref refid="lsp_8c_1a002b2f4894492820fe708b1b7e7c5e70" kindref="member">EPSILON</ref>)denom=<ref refid="lsp_8c_1a002b2f4894492820fe708b1b7e7c5e70" kindref="member">EPSILON</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>=<sp/>pp<sp/>-<sp/>sqrt(denom);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(denom&gt;-(<ref refid="lsp_8c_1a002b2f4894492820fe708b1b7e7c5e70" kindref="member">EPSILON</ref>))denom=-(<ref refid="lsp_8c_1a002b2f4894492820fe708b1b7e7c5e70" kindref="member">EPSILON</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/><sp/>=<sp/>m*p/denom;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><sp/><sp/>-=<sp/>delta;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delta&lt;0.<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)delta*=-1;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(delta/</highlight><highlight class="keyword">new</highlight><highlight class="normal">)&lt;10<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-12)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastdelta=delta;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>r[m-1]=</highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>forward<sp/>deflation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=m;i&gt;0;i--)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>defl[i-1]+=</highlight><highlight class="keyword">new</highlight><highlight class="normal">*defl[i];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>defl++;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>spit-and-polish<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Newton_Raphson(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ord,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*r){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>,<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>=0;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>=1.f;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*root=alloca(ord*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*root));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;ord;i++)<sp/>root[i]<sp/>=<sp/>r[i];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(error&gt;1<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-20){</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>error=0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;ord;<sp/>i++)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>each<sp/>point.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="xlpp_8c_1ae9f2a1c4ccbaf7dae02c0330a1b54e22" kindref="member">pp</ref>=0.,delta;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rooti=root[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p=a[ord];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=ord-1;<sp/>k&gt;=<sp/>0;<sp/>k--)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp=<sp/>pp*<sp/>rooti<sp/>+<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>*<sp/>rooti<sp/>+<sp/>a[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>p/<ref refid="xlpp_8c_1ae9f2a1c4ccbaf7dae02c0330a1b54e22" kindref="member">pp</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-=<sp/>delta;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error+=<sp/>delta*delta;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count&gt;40)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Replaced<sp/>the<sp/>original<sp/>bubble<sp/>sort<sp/>with<sp/>a<sp/>real<sp/>sort.<sp/><sp/>With<sp/>your</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>help,<sp/>we<sp/>can<sp/>eliminate<sp/>the<sp/>bubble<sp/>sort<sp/>in<sp/>our<sp/>lifetime.<sp/>--Monty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;ord;i++)<sp/>r[i]<sp/>=<sp/>root[i];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>lpc<sp/>coefficients<sp/>to<sp/>lsp<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="lsp_8h_1aed676b838991a38a53c9cbaf419bf724" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lsp_8c_1aed676b838991a38a53c9cbaf419bf724" kindref="member">vorbis_lpc_to_lsp</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lpc,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lsp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m){</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order2=(m+1)&gt;&gt;1;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g1_order,g2_order;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*g1=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*g1)*(order2+1));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*g2=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*g2)*(order2+1));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*g1r=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*g1r)*(order2+1));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*g2r=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*g2r)*(order2+1));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>even<sp/>and<sp/>odd<sp/>are<sp/>slightly<sp/>different<sp/>base<sp/>cases<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>g1_order=(m+1)&gt;&gt;1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>g2_order=(<ref refid="layer3_8c_1a4b8bfe70f28d6faddcb10d6ecf8c1989" kindref="member">m</ref>)<sp/><sp/>&gt;&gt;1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>lengths<sp/>of<sp/>the<sp/>x<sp/>polynomials.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>first<sp/>half<sp/>of<sp/>K<sp/>&amp;<sp/>R<sp/>F1<sp/>&amp;<sp/>F2<sp/>polynomials.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>half<sp/>of<sp/>the<sp/>symmetric<sp/>and<sp/>antisymmetric<sp/>polynomials.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>roots<sp/>at<sp/>+1<sp/>and<sp/>-1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>g1[g1_order]<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;=g1_order;i++)<sp/>g1[g1_order-i]<sp/>=<sp/>lpc[i-1]+lpc[m-i];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>g2[g2_order]<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;=g2_order;i++)<sp/>g2[g2_order-i]<sp/>=<sp/>lpc[i-1]-lpc[m-i];</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g1_order&gt;g2_order){</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=2;<sp/>i&lt;=g2_order;i++)<sp/>g2[g2_order-i]<sp/>+=<sp/>g2[g2_order-i+2];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;<sp/>i&lt;=g1_order;i++)<sp/>g1[g1_order-i]<sp/>-=<sp/>g1[g1_order-i+1];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;<sp/>i&lt;=g2_order;i++)<sp/>g2[g2_order-i]<sp/>+=<sp/>g2[g2_order-i+1];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>into<sp/>polynomials<sp/>in<sp/>cos(alpha)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>cheby(g1,g1_order);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>cheby(g2,g2_order);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>roots<sp/>of<sp/>the<sp/>2<sp/>even<sp/>polynomials.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Laguerre_With_Deflation(g1,g1_order,g1r)<sp/>||</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Laguerre_With_Deflation(g2,g2_order,g2r))</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>Newton_Raphson(g1,g1_order,g1r);<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>it<sp/>fails,<sp/>it<sp/>leaves<sp/>g1r<sp/>alone<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>Newton_Raphson(g2,g2_order,g2r);<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>it<sp/>fails,<sp/>it<sp/>leaves<sp/>g2r<sp/>alone<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>qsort(g1r,g1_order,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*g1r),comp);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>qsort(g2r,g2_order,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*g2r),comp);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;g1_order;i++)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>lsp[i*2]<sp/>=<sp/>acos(g1r[i]);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;g2_order;i++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>lsp[i*2+1]<sp/>=<sp/>acos(g2r[i]);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvorbis/lib/lsp.c"/>
  </compounddef>
</doxygen>
