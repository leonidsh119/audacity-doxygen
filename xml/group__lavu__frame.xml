<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavu__frame" kind="group">
    <compoundname>lavu_frame</compoundname>
    <title>AVFrame</title>
    <innerfile refid="ffmpeg_2libavutil_2frame_8h">frame.h</innerfile>
    <innerclass refid="struct_a_v_frame_side_data" prot="public">AVFrameSideData</innerclass>
    <innerclass refid="struct_a_v_frame" prot="public">AVFrame</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__lavu__frame_1gae01fa7e427274293aacdf2adc17076bc" prot="public" static="no">
        <name>AVFrameSideDataType</name>
        <enumvalue id="group__lavu__frame_1ggae01fa7e427274293aacdf2adc17076bca3de91a03b453c956b7274a2392d9a437" prot="public">
          <name>AV_FRAME_DATA_PANSCAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data is the <ref refid="struct_a_v_pan_scan" kindref="compound">AVPanScan</ref> struct defined in libavcodec. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lavu__frame_1ggae01fa7e427274293aacdf2adc17076bca4848fd3952b4c2e1c1b85acb628c78a6" prot="public">
          <name>AV_FRAME_DATA_A53_CC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ATSC A53 Part 4 Closed Captions. A53 CC bitstream is stored as uint8_t in <ref refid="struct_a_v_frame_side_data_1a76937ad48652a5a0cc4bff65fc6c886e" kindref="member">AVFrameSideData.data</ref>. The number of bytes of CC data is <ref refid="struct_a_v_frame_side_data_1aa8418cdc71a76dfab523445b17f10028" kindref="member">AVFrameSideData.size</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lavu__frame_1ggae01fa7e427274293aacdf2adc17076bcacec681d6146e8bd4c61b2e1cc88354a8" prot="public">
          <name>AV_FRAME_DATA_STEREO3D</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stereoscopic 3d metadata. The data is the <ref refid="struct_a_v_stereo3_d" kindref="compound">AVStereo3D</ref> struct defined in <ref refid="stereo3d_8h" kindref="compound">libavutil/stereo3d.h</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lavu__frame_1ggae01fa7e427274293aacdf2adc17076bcaa69ea5c11a5431bfff9e565714dafe41" prot="public">
          <name>AV_FRAME_DATA_MATRIXENCODING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data is the AVMatrixEncoding enum defined in <ref refid="channel__layout_8h" kindref="compound">libavutil/channel_layout.h</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lavu__frame_1ggae01fa7e427274293aacdf2adc17076bca71819257ea0bedb7e0740a0ce60e404a" prot="public">
          <name>AV_FRAME_DATA_DOWNMIX_INFO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Metadata relevant to a downmix procedure. The data is the <ref refid="struct_a_v_downmix_info" kindref="compound">AVDownmixInfo</ref> struct defined in <ref refid="downmix__info_8h" kindref="compound">libavutil/downmix_info.h</ref>. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="70" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" bodystart="70" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__lavu__frame_1gacd0daf404bac7e57b287feb110cc2ae6" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_frame_side_data" kindref="compound">AVFrameSideData</ref></type>
        <definition>typedef struct AVFrameSideData  AVFrameSideData</definition>
        <argsstring></argsstring>
        <name>AVFrameSideData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__lavu__frame_1gac2c5a41a89d6c9cfeb3bd87af9f98502" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref></type>
        <definition>typedef struct AVFrame  AVFrame</definition>
        <argsstring></argsstring>
        <name>AVFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure describes decoded (raw) audio or video data.</para><para><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> must be allocated using <ref refid="group__lavu__frame_1gac700017c5270c79c1e1befdeeb008b2f" kindref="member">av_frame_alloc()</ref>. Note that this only allocates the <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> itself, the buffers for the data must be managed through other means (see below). <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> must be freed with <ref refid="group__lavu__frame_1ga979d73f3228814aee56aeca0636e37cc" kindref="member">av_frame_free()</ref>.</para><para><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> is typically allocated once and then reused multiple times to hold different data (e.g. a single <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> to hold frames received from a decoder). In such a case, <ref refid="group__lavu__frame_1ga0a2b687f9c1c5ed0089b01fd61227108" kindref="member">av_frame_unref()</ref> will free any references held by the frame and reset it to its original clean state before it is reused again.</para><para>The data described by an <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> is usually reference counted through the AVBuffer API. The underlying buffer references are stored in <ref refid="struct_a_v_frame_1a4a64d05cc676bfa8e18bf22d16c8a51f" kindref="member">AVFrame.buf</ref> / <ref refid="struct_a_v_frame_1a254a144d113ceedc003ec1547cc5bd54" kindref="member">AVFrame.extended_buf</ref>. An <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> is considered to be reference counted if at least one reference is set, i.e. if <ref refid="struct_a_v_frame_1a4a64d05cc676bfa8e18bf22d16c8a51f" kindref="member">AVFrame.buf</ref>[0] != NULL. In such a case, every single data plane must be contained in one of the buffers in <ref refid="struct_a_v_frame_1a4a64d05cc676bfa8e18bf22d16c8a51f" kindref="member">AVFrame.buf</ref> or <ref refid="struct_a_v_frame_1a254a144d113ceedc003ec1547cc5bd54" kindref="member">AVFrame.extended_buf</ref>. There may be a single buffer for all the data, or one separate buffer for each plane, or anything in between.</para><para>sizeof(AVFrame) is not a part of the public ABI, so new fields may be added to the end with a minor bump. Similarly fields that are marked as to be only accessed by <ref refid="group__avoptions_1gab1d208d09e487741a28016919225bef6" kindref="member">av_opt_ptr()</ref> can be reordered. This allows 2 forks to add fields without breaking compatibility with each other. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="538" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavu__frame_1gacb9d9082c10e625e51a68caceabd4458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
        <definition>int64_t av_frame_get_best_effort_timestamp</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_best_effort_timestamp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessors for some <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> fields. The position of these field in the structure is not part of the ABI, they should not be accessed directly outside libavcodec. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga8c4a32b4b0314432050a4bbe29171070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_best_effort_timestamp</definition>
        <argsstring>(AVFrame *frame, int64_t val)</argsstring>
        <name>av_frame_set_best_effort_timestamp</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga877a6a0703b74e7e27f196313e160d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
        <definition>int64_t av_frame_get_pkt_duration</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_pkt_duration</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gaebd80bc8675289737641235473bdc19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_pkt_duration</definition>
        <argsstring>(AVFrame *frame, int64_t val)</argsstring>
        <name>av_frame_set_pkt_duration</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga2f09c3e454ca78320a8f3be17d0473c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
        <definition>int64_t av_frame_get_pkt_pos</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_pkt_pos</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga6c137c59cc65afdf2dea1fef903a69e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_pkt_pos</definition>
        <argsstring>(AVFrame *frame, int64_t val)</argsstring>
        <name>av_frame_set_pkt_pos</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gacefc94a29e6741998e408363c8531909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
        <definition>int64_t av_frame_get_channel_layout</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_channel_layout</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gad695986e6e97256de64bb49b0c11a882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_channel_layout</definition>
        <argsstring>(AVFrame *frame, int64_t val)</argsstring>
        <name>av_frame_set_channel_layout</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gac252f01dc52f96b5faf9466ecbe5c150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_get_channels</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_channels</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gae499cd896ae97d2ef97fb4b9d76535c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_channels</definition>
        <argsstring>(AVFrame *frame, int val)</argsstring>
        <name>av_frame_set_channels</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga3a7aec7d00a18357af066da81b17cfcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_get_sample_rate</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_sample_rate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga2bc09011d642d2f7b60a683d2daf8cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_sample_rate</definition>
        <argsstring>(AVFrame *frame, int val)</argsstring>
        <name>av_frame_set_sample_rate</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga4a42eca8e01c59b2cef5507c959e663b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> *</type>
        <definition>AVDictionary* av_frame_get_metadata</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_metadata</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gace774db7b47a1c708a23f4f24fe85a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_metadata</definition>
        <argsstring>(AVFrame *frame, AVDictionary *val)</argsstring>
        <name>av_frame_set_metadata</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gac72c0e153987ef0e3febc26452bb3861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_get_decode_error_flags</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_decode_error_flags</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga0060b8c9949b28790013039e70d830f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_decode_error_flags</definition>
        <argsstring>(AVFrame *frame, int val)</argsstring>
        <name>av_frame_set_decode_error_flags</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga03e2090721bb5d66f292090c7e7e2524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_get_pkt_size</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_pkt_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga12742a052df91eeb22a0062cf3da0504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_pkt_size</definition>
        <argsstring>(AVFrame *frame, int val)</argsstring>
        <name>av_frame_set_pkt_size</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gae3797588a2664e4d1cc137b7aaf67b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
        <definition>AVDictionary** avpriv_frame_get_metadatap</definition>
        <argsstring>(AVFrame *frame)</argsstring>
        <name>avpriv_frame_get_metadatap</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga3072a9eafc1dba9df289a9aac2dcb083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a27eddd12ef1271a2ea8629e1148e7e63" kindref="member">int8_t</ref> *</type>
        <definition>int8_t* av_frame_get_qp_table</definition>
        <argsstring>(AVFrame *f, int *stride, int *type)</argsstring>
        <name>av_frame_get_qp_table</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>stride</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga4021d1fbc36d31bcaa986aa6217624c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_set_qp_table</definition>
        <argsstring>(AVFrame *f, AVBufferRef *buf, int stride, int type)</argsstring>
        <name>av_frame_set_qp_table</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stride</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga03224acf06cbd666f3878a2c35b3f704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="ffmpeg_2libavutil_2frame_8h_1aff71a069509a1ad3ff54d53a1c894c85" kindref="member">AVColorSpace</ref></type>
        <definition>enum AVColorSpace av_frame_get_colorspace</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_colorspace</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga43e7dd7b76a6d76811e7f33557fd48e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_colorspace</definition>
        <argsstring>(AVFrame *frame, enum AVColorSpace val)</argsstring>
        <name>av_frame_set_colorspace</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>enum <ref refid="ffmpeg_2libavutil_2frame_8h_1aff71a069509a1ad3ff54d53a1c894c85" kindref="member">AVColorSpace</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga829e2f3cb3edcc04d76fa9eac37392cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="ffmpeg_2libavutil_2frame_8h_1a3da0bf691418bc22c4bcbe6583ad589a" kindref="member">AVColorRange</ref></type>
        <definition>enum AVColorRange av_frame_get_color_range</definition>
        <argsstring>(const AVFrame *frame)</argsstring>
        <name>av_frame_get_color_range</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga862e9789b46539b3edcf0ae4cb106f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_set_color_range</definition>
        <argsstring>(AVFrame *frame, enum AVColorRange val)</argsstring>
        <name>av_frame_set_color_range</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>enum <ref refid="ffmpeg_2libavutil_2frame_8h_1a3da0bf691418bc22c4bcbe6583ad589a" kindref="member">AVColorRange</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gaf0e077dd848dd61ee4ac89ef4d3547cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* av_get_colorspace_name</definition>
        <argsstring>(enum AVColorSpace val)</argsstring>
        <name>av_get_colorspace_name</name>
        <param>
          <type>enum <ref refid="ffmpeg_2libavutil_2frame_8h_1aff71a069509a1ad3ff54d53a1c894c85" kindref="member">AVColorSpace</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a colorspace. <simplesect kind="return"><para>a static string identifying the colorspace; can be NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gac700017c5270c79c1e1befdeeb008b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
        <definition>AVFrame* av_frame_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>av_frame_alloc</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate an <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> and set its fields to default values. The resulting struct must be freed using <ref refid="group__lavu__frame_1ga979d73f3228814aee56aeca0636e37cc" kindref="member">av_frame_free()</ref>.</para><para><simplesect kind="return"><para>An <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> filled with default values or NULL on failure.</para></simplesect>
<simplesect kind="note"><para>this only allocates the <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> itself, not the data buffers. Those must be allocated through other means, e.g. with <ref refid="group__lavu__frame_1ga6b1acbfa82c79bf7fd78d868572f0ceb" kindref="member">av_frame_get_buffer()</ref> or manually. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga979d73f3228814aee56aeca0636e37cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_free</definition>
        <argsstring>(AVFrame **frame)</argsstring>
        <name>av_frame_free</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> **</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free the frame and any dynamically allocated objects in it, e.g. extended_data. If the frame is reference counted, it will be unreferenced first.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>frame to be freed. The pointer will be set to NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga88b0ecbc4eb3453eef3fbefa3bddeb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_ref</definition>
        <argsstring>(AVFrame *dst, const AVFrame *src)</argsstring>
        <name>av_frame_ref</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a new reference to the data described by the source frame.</para><para>Copy frame properties from src to dst and create a new reference for each <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> from src.</para><para>If src is not reference counted, new buffers are allocated and the data is copied.</para><para><simplesect kind="return"><para>0 on success, a negative AVERROR on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga46d6d32f6482a3e9c19203db5877105b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
        <definition>AVFrame* av_frame_clone</definition>
        <argsstring>(const AVFrame *src)</argsstring>
        <name>av_frame_clone</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new frame that references the same data as src.</para><para>This is a shortcut for <ref refid="group__lavu__frame_1gac700017c5270c79c1e1befdeeb008b2f" kindref="member">av_frame_alloc()</ref>+av_frame_ref().</para><para><simplesect kind="return"><para>newly created <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga0a2b687f9c1c5ed0089b01fd61227108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_unref</definition>
        <argsstring>(AVFrame *frame)</argsstring>
        <name>av_frame_unref</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unreference all the buffers referenced by frame and reset the frame fields. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga709e62bc2917ffd84c5c0f4e1dfc48f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_frame_move_ref</definition>
        <argsstring>(AVFrame *dst, AVFrame *src)</argsstring>
        <name>av_frame_move_ref</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move everythnig contained in src to dst and reset src. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga6b1acbfa82c79bf7fd78d868572f0ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_get_buffer</definition>
        <argsstring>(AVFrame *frame, int align)</argsstring>
        <name>av_frame_get_buffer</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate new <ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer(s)</ref> for audio or video data.</para><para>The following fields must be set on frame before calling this function:<itemizedlist>
<listitem><para>format (pixel format for video, sample format for audio)</para></listitem><listitem><para>width and height for video</para></listitem><listitem><para>nb_samples and channel_layout for audio</para></listitem></itemizedlist>
</para><para>This function will fill <ref refid="struct_a_v_frame_1a1d0f65014a8d1bf78cec8cbed2304992" kindref="member">AVFrame.data</ref> and <ref refid="struct_a_v_frame_1a4a64d05cc676bfa8e18bf22d16c8a51f" kindref="member">AVFrame.buf</ref> arrays and, if necessary, allocate and fill <ref refid="struct_a_v_frame_1afca04d808393822625e09b5ba91c6756" kindref="member">AVFrame.extended_data</ref> and <ref refid="struct_a_v_frame_1a254a144d113ceedc003ec1547cc5bd54" kindref="member">AVFrame.extended_buf</ref>. For planar formats, one buffer will be allocated for each plane.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>frame in which to store the new buffers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>required buffer size alignment</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga3ba755bada5c3c8883361ef43fb5fb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_is_writable</definition>
        <argsstring>(AVFrame *frame)</argsstring>
        <name>av_frame_is_writable</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the frame data is writable.</para><para><simplesect kind="return"><para>A positive value if the frame data is writable (which is true if and only if each of the underlying buffers has only one reference, namely the one stored in this frame). Return 0 otherwise.</para></simplesect>
If 1 is returned the answer is valid until <ref refid="group__lavu__buffer_1gaa40ce7d3ede946a89d03323bbd7268c1" kindref="member">av_buffer_ref()</ref> is called on any of the underlying AVBufferRefs (e.g. through <ref refid="group__lavu__frame_1ga88b0ecbc4eb3453eef3fbefa3bddeb7c" kindref="member">av_frame_ref()</ref> or directly).</para><para><simplesect kind="see"><para><ref refid="group__lavu__frame_1gadd5417c06f5a6b419b0dbd8f0ff363fd" kindref="member">av_frame_make_writable()</ref>, <ref refid="group__lavu__buffer_1ga060be34ace567ae378fd0a786e847053" kindref="member">av_buffer_is_writable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gadd5417c06f5a6b419b0dbd8f0ff363fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_make_writable</definition>
        <argsstring>(AVFrame *frame)</argsstring>
        <name>av_frame_make_writable</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensure that the frame data is writable, avoiding data copy if possible.</para><para>Do nothing if the frame is writable, allocate new buffers and copy the data if it is not.</para><para><simplesect kind="return"><para>0 on success, a negative AVERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavu__frame_1ga3ba755bada5c3c8883361ef43fb5fb7a" kindref="member">av_frame_is_writable()</ref>, <ref refid="group__lavu__buffer_1ga060be34ace567ae378fd0a786e847053" kindref="member">av_buffer_is_writable()</ref>, <ref refid="group__lavu__buffer_1ga9c2a1be1b7bb80eec8613fdb62a19074" kindref="member">av_buffer_make_writable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gaec4e92f6e1e75ffaf76e07586fb0c9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_copy</definition>
        <argsstring>(AVFrame *dst, const AVFrame *src)</argsstring>
        <name>av_frame_copy</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the frame data from src to dst.</para><para>This function does not allocate anything, dst must be already initialized and allocated with the same parameters as src.</para><para>This function only copies the frame data (i.e. the contents of the data / extended data arrays), not any other properties.</para><para><simplesect kind="return"><para>&gt;= 0 on success, a negative AVERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gab9b275b114ace0db95c5796bc71f3012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_frame_copy_props</definition>
        <argsstring>(AVFrame *dst, const AVFrame *src)</argsstring>
        <name>av_frame_copy_props</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy only &quot;metadata&quot; fields from src to dst.</para><para>Metadata for the purpose of this function are those fields that do not affect the data layout in the buffers. E.g. pts, sample rate (for audio) or sample aspect ratio (for video), but not width/height or channel layout. Side data is also copied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1ga7fb7f99dabe10fa5c7c078f4f5f173c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
        <definition>AVBufferRef* av_frame_get_plane_buffer</definition>
        <argsstring>(AVFrame *frame, int plane)</argsstring>
        <name>av_frame_get_plane_buffer</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the buffer reference a given data plane is stored in.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plane</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the data plane of interest in frame-&gt;extended_data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buffer reference that contains the plane or NULL if the input frame is not valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gab4caf9361b00f9b2ab57c222dce3fec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_frame_side_data" kindref="compound">AVFrameSideData</ref> *</type>
        <definition>AVFrameSideData* av_frame_new_side_data</definition>
        <argsstring>(AVFrame *frame, enum AVFrameSideDataType type, int size)</argsstring>
        <name>av_frame_new_side_data</name>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__frame_1gae01fa7e427274293aacdf2adc17076bc" kindref="member">AVFrameSideDataType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new side data to a frame.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>a frame to which the side data should be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the added side data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the side data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly added side data on success, NULL on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__frame_1gadec0efb470b1eead6a979333d9deca0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_frame_side_data" kindref="compound">AVFrameSideData</ref> *</type>
        <definition>AVFrameSideData* av_frame_get_side_data</definition>
        <argsstring>(const AVFrame *frame, enum AVFrameSideDataType type)</argsstring>
        <name>av_frame_get_side_data</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__frame_1gae01fa7e427274293aacdf2adc17076bc" kindref="member">AVFrameSideDataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to the side data of a given type on success, NULL if there is no side data with such type in this frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h" line="726" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> is an abstraction for reference-counted raw multimedia data. </para>    </detaileddescription>
  </compounddef>
</doxygen>
