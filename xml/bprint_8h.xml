<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="bprint_8h" kind="file" language="C++">
    <compoundname>bprint.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes refid="attributes_8h" local="yes">attributes.h</includes>
    <includes refid="avstring_8h" local="yes">avstring.h</includes>
    <incdepgraph>
      <node id="3407">
        <label>stdarg.h</label>
      </node>
      <node id="3409">
        <label>avstring.h</label>
        <link refid="avstring_8h"/>
        <childnode refid="3410" relation="include">
        </childnode>
        <childnode refid="3411" relation="include">
        </childnode>
        <childnode refid="3408" relation="include">
        </childnode>
      </node>
      <node id="3408">
        <label>attributes.h</label>
        <link refid="attributes_8h"/>
      </node>
      <node id="3411">
        <label>stdint.h</label>
      </node>
      <node id="3406">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h</label>
        <link refid="bprint.h"/>
        <childnode refid="3407" relation="include">
        </childnode>
        <childnode refid="3408" relation="include">
        </childnode>
        <childnode refid="3409" relation="include">
        </childnode>
      </node>
      <node id="3410">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_a_v_b_print" prot="public">AVBPrint</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bprint_8h_1a501311037c79a878a47bfb0ac8fe8363" prot="public" static="no">
        <name>FF_PAD_STRUCTURE</name>
        <param><defname>size</defname></param>
        <param><defname>...</defname></param>
        <initializer>__VA_ARGS__ \
    char reserved_padding[<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref> - sizeof(struct { __VA_ARGS__ })];</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a structure with extra padding to a fixed size This helps ensuring binary compatibility with future versions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="33" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bprint_8h_1a01aefbce0615a828eae24135a9b35c45" prot="public" static="no">
        <name>AV_BPRINT_SIZE_UNLIMITED</name>
        <initializer>((unsigned)-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience macros for special values for <ref refid="bprint_8h_1a26abc84daea3189592c511fc26067d66" kindref="member">av_bprint_init()</ref> size_max parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="91" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bprint_8h_1a0e07836126dff024ac10acbc744ebe8f" prot="public" static="no">
        <name>AV_BPRINT_SIZE_AUTOMATIC</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="92" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bprint_8h_1a5764f3aa498fb83dafdebadf7e77d5fa" prot="public" static="no">
        <name>AV_BPRINT_SIZE_COUNT_ONLY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="93" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bprint_8h_1ad94104d08191d17f5eca93a573d7c093" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref></type>
        <definition>typedef struct AVBPrint  AVBPrint</definition>
        <argsstring></argsstring>
        <name>AVBPrint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Buffer to print data progressively</para><para>The string buffer grows as necessary and is always 0-terminated. The content of the string is never accessed, and thus is encoding-agnostic and can even hold binary data.</para><para>Small buffers are kept in the structure itself, and thus require no memory allocation at all (unless the contents of the buffer is needed after the structure goes out of scope). This is almost as lightweight as declaring a local &quot;char buf[512]&quot;.</para><para>The length of the string can go beyond the allocated size: the buffer is then truncated, but the functions still keep account of the actual total length.</para><para>In other words, buf-&gt;len can be greater than buf-&gt;size and records the total length of what would have been to the buffer if there had been enough memory.</para><para>Append operations do not need to be tested for failure: if a memory allocation fails, data stop being appended to the buffer, but the length is still updated. This situation can be tested with av_bprint_is_complete().</para><para>The size_max field determines several possible behaviours:</para><para>size_max = -1 (= UINT_MAX) or any large value will let the buffer be reallocated as necessary, with an amortized linear cost.</para><para>size_max = 0 prevents writing anything to the buffer: only the total length is computed. The write operations can then possibly be repeated in a buffer with exactly the necessary size (using size_init = size_max = len + 1).</para><para>size_max = 1 is automatically replaced by the exact size available in the structure itself, thus ensuring no dynamic memory allocation. The internal buffer is large enough to hold a reasonable paragraph of text, such as the current paragraph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="85" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bprint_8h_1a26abc84daea3189592c511fc26067d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_init</definition>
        <argsstring>(AVBPrint *buf, unsigned size_init, unsigned size_max)</argsstring>
        <name>av_bprint_init</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size_init</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init a print buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to init </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_init</parametername>
</parameternamelist>
<parameterdescription>
<para>initial size (including the final 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum size; 0 means do not write anything, just count the length; 1 is replaced by the maximum value for automatic storage; any large value means that the internal buffer will be reallocated as needed up to that limit; -1 is converted to UINT_MAX, the largest limit possible. Check also AV_BPRINT_SIZE_* macros. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1af70c16532f4ba50c599e4eaa67a1d63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_init_for_buffer</definition>
        <argsstring>(AVBPrint *buf, char *buffer, unsigned size)</argsstring>
        <name>av_bprint_init_for_buffer</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init a print buffer using a pre-existing buffer.</para><para>The buffer will not be reallocated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer structure to init </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>byte buffer to use for the string data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1aa2e89377fd7c92db534f29caff1af209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprintf</definition>
        <argsstring>(AVBPrint *buf, const char *fmt,...) av_printf_format(2</argsstring>
        <name>av_bprintf</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a formatted string to a print buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1ae24ca62b5e2ba99651636c04b61240f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void void av_vbprintf</definition>
        <argsstring>(AVBPrint *buf, const char *fmt, va_list vl_arg)</argsstring>
        <name>av_vbprintf</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>vl_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a formatted string to a print buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1aabc9a9d58de61dd824e625d59a7531bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_chars</definition>
        <argsstring>(AVBPrint *buf, char c, unsigned n)</argsstring>
        <name>av_bprint_chars</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append char c n times to a print buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1aa215ba46a975d996e483cf0b9dcc85e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_append_data</definition>
        <argsstring>(AVBPrint *buf, const char *data, unsigned size)</argsstring>
        <name>av_bprint_append_data</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append data to a print buffer.</para><para>param buf bprint buffer to use param data pointer to data param size size of data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1a4896e4efea5b234507bcbba45ca0397b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_strftime</definition>
        <argsstring>(AVBPrint *buf, const char *fmt, const struct tm *tm)</argsstring>
        <name>av_bprint_strftime</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct tm *</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a formatted date and time to a print buffer.</para><para>param buf bprint buffer to use param fmt date and time format string, see strftime() param tm broken-down time structure to translate</para><para><simplesect kind="note"><para>due to poor design of the standard strftime function, it may produce poor results if the format string expands to a very long text and the bprint buffer is near the limit stated by the size_max option. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1a32f3999614d90e082602d54a3c5237d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_get_buffer</definition>
        <argsstring>(AVBPrint *buf, unsigned size, unsigned char **mem, unsigned *actual_size)</argsstring>
        <name>av_bprint_get_buffer</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>unsigned *</type>
          <declname>actual_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate bytes in the buffer for external use.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>required size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">actual_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the memory area after allocation; can be larger or smaller than size </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1ab1c28dbff5990dbd37e6c00e3d7c438b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_clear</definition>
        <argsstring>(AVBPrint *buf)</argsstring>
        <name>av_bprint_clear</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the string to &quot;&quot; but keep internal allocated data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1a9ebb3e5741f0d880033cbbd6fec1ae42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int av_bprint_is_complete</definition>
        <argsstring>(AVBPrint *buf)</argsstring>
        <name>av_bprint_is_complete</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_test" kindref="compound">Test</ref> if the print buffer is complete (not truncated).</para><para>It may have been truncated due to a memory allocation failure or the size_max limit (compare size and size_max if necessary). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="182" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1a3fd45f50d9d4f7cc8fed5331a37f47ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_bprint_finalize</definition>
        <argsstring>(AVBPrint *buf, char **ret_str)</argsstring>
        <name>av_bprint_finalize</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ret_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finalize a print buffer.</para><para>The print buffer can no longer be used afterwards, but the len and size fields are still valid.</para><para><itemizedlist>
<listitem><para>[out] ret_str if not NULL, used to return a permanent copy of the buffer contents, or NULL if memory allocation fails; if NULL, the buffer is discarded and freed <simplesect kind="return"><para>0 for success or error code (probably <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(ENOMEM)</ref>) </para></simplesect>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bprint_8h_1a14ec58eeaa6d4a3571cd9f0ffb873e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_bprint_escape</definition>
        <argsstring>(AVBPrint *dstbuf, const char *src, const char *special_chars, enum AVEscapeMode mode, int flags)</argsstring>
        <name>av_bprint_escape</name>
        <param>
          <type><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref> *</type>
          <declname>dstbuf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>special_chars</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__string_1gaef885958293f07153383f99db573ff5a" kindref="member">AVEscapeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape the content in src and append it to dstbuf.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dstbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>already inited destination bprint buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing the text to escape </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>special_chars</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing the special characters which need to be escaped, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>escape mode to employ, see AV_ESCAPE_MODE_* macros. Any unknown value for mode will be considered equivalent to AV_ESCAPE_MODE_BACKSLASH, but this behaviour can change without notice. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags which control how to escape, see AV_ESCAPE_FLAG_* macros </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="213" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Nicolas<sp/>George</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>FFmpeg.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>FFmpeg;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AVUTIL_BPRINT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVUTIL_BPRINT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="attributes_8h" kindref="compound">attributes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="avstring_8h" kindref="compound">avstring.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="bprint_8h_1a501311037c79a878a47bfb0ac8fe8363" refkind="member"><highlight class="preprocessor">#define<sp/>FF_PAD_STRUCTURE(size,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__VA_ARGS__<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/>reserved_padding[size<sp/>-<sp/>sizeof(struct<sp/>{<sp/>__VA_ARGS__<sp/>})];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="struct_a_v_b_print" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bprint_8h_1a501311037c79a878a47bfb0ac8fe8363" kindref="member">FF_PAD_STRUCTURE</ref>(1024,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size_max;<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>reserved_internal_buffer[1];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="bprint_8h_1a01aefbce0615a828eae24135a9b35c45" refkind="member"><highlight class="preprocessor">#define<sp/>AV_BPRINT_SIZE_UNLIMITED<sp/><sp/>((unsigned)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="bprint_8h_1a0e07836126dff024ac10acbc744ebe8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_BPRINT_SIZE_AUTOMATIC<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="bprint_8h_1a5764f3aa498fb83dafdebadf7e77d5fa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_BPRINT_SIZE_COUNT_ONLY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1a26abc84daea3189592c511fc26067d66" kindref="member">av_bprint_init</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size_init,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size_max);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1af70c16532f4ba50c599e4eaa67a1d63b" kindref="member">av_bprint_init_for_buffer</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1aa2e89377fd7c92db534f29caff1af209" kindref="member">av_bprintf</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="attributes_8h_1a4b078d4b8e02c0f452ee1dcaa7d983d3" kindref="member">av_printf_format</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1ae24ca62b5e2ba99651636c04b61240f1" kindref="member">av_vbprintf</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf,<sp/><ref refid="getopt_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>vl_arg);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1aabc9a9d58de61dd824e625d59a7531bb" kindref="member">av_bprint_chars</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1aa215ba46a975d996e483cf0b9dcc85e5" kindref="member">av_bprint_append_data</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf,<sp/><ref refid="getopt_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">struct<sp/>tm;</highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1a4896e4efea5b234507bcbba45ca0397b" kindref="member">av_bprint_strftime</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf,<sp/><ref refid="getopt_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/><ref refid="getopt_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref><sp/>struct<sp/>tm<sp/>*tm);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1a32f3999614d90e082602d54a3c5237d6" kindref="member">av_bprint_get_buffer</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**mem,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*actual_size);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1ab1c28dbff5990dbd37e6c00e3d7c438b" kindref="member">av_bprint_clear</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">static<sp/><ref refid="expat_2lib_2internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>av_bprint_is_complete(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf-&gt;len<sp/>&lt;<sp/>buf-&gt;size;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1a3fd45f50d9d4f7cc8fed5331a37f47ea" kindref="member">av_bprint_finalize</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ret_str);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bprint_8h_1a14ec58eeaa6d4a3571cd9f0ffb873e62" kindref="member">av_bprint_escape</ref>(<ref refid="struct_a_v_b_print" kindref="compound">AVBPrint</ref><sp/>*dstbuf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*special_chars,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavu__string_1gaef885958293f07153383f99db573ff5a" kindref="member">AVEscapeMode</ref><sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVUTIL_BPRINT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h"/>
  </compounddef>
</doxygen>
