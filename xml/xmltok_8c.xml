<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="xmltok_8c" kind="file" language="C++">
    <compoundname>xmltok.c</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="expat__external_8h" local="yes">expat_external.h</includes>
    <includes refid="expat_2lib_2internal_8h" local="yes">internal.h</includes>
    <includes refid="xmltok_8h" local="yes">xmltok.h</includes>
    <includes refid="nametab_8h" local="yes">nametab.h</includes>
    <includes refid="xmltok__impl_8h" local="yes">xmltok_impl.h</includes>
    <includes refid="ascii_8h" local="yes">ascii.h</includes>
    <includes refid="xmltok__impl_8c" local="yes">xmltok_impl.c</includes>
    <includes refid="asciitab_8h" local="yes">asciitab.h</includes>
    <includes refid="utf8tab_8h" local="yes">utf8tab.h</includes>
    <includes refid="iasciitab_8h" local="yes">iasciitab.h</includes>
    <includes refid="latin1tab_8h" local="yes">latin1tab.h</includes>
    <includes refid="xmltok__ns_8c" local="yes">xmltok_ns.c</includes>
    <incdepgraph>
      <node id="2724">
        <label>nametab.h</label>
        <link refid="nametab_8h"/>
      </node>
      <node id="2722">
        <label>internal.h</label>
        <link refid="expat_2lib_2internal_8h"/>
      </node>
      <node id="2732">
        <label>xmltok_ns.c</label>
        <link refid="xmltok__ns_8c"/>
      </node>
      <node id="2720">
        <label>stddef.h</label>
      </node>
      <node id="2728">
        <label>asciitab.h</label>
        <link refid="asciitab_8h"/>
      </node>
      <node id="2726">
        <label>ascii.h</label>
        <link refid="ascii_8h"/>
      </node>
      <node id="2731">
        <label>latin1tab.h</label>
        <link refid="latin1tab_8h"/>
      </node>
      <node id="2719">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c</label>
        <link refid="xmltok.c"/>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2722" relation="include">
        </childnode>
        <childnode refid="2723" relation="include">
        </childnode>
        <childnode refid="2724" relation="include">
        </childnode>
        <childnode refid="2725" relation="include">
        </childnode>
        <childnode refid="2726" relation="include">
        </childnode>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2728" relation="include">
        </childnode>
        <childnode refid="2729" relation="include">
        </childnode>
        <childnode refid="2730" relation="include">
        </childnode>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2732" relation="include">
        </childnode>
      </node>
      <node id="2723">
        <label>xmltok.h</label>
        <link refid="xmltok_8h"/>
      </node>
      <node id="2721">
        <label>expat_external.h</label>
        <link refid="expat__external_8h"/>
      </node>
      <node id="2730">
        <label>iasciitab.h</label>
        <link refid="iasciitab_8h"/>
      </node>
      <node id="2727">
        <label>xmltok_impl.c</label>
        <link refid="xmltok__impl_8c"/>
      </node>
      <node id="2729">
        <label>utf8tab.h</label>
        <link refid="utf8tab_8h"/>
      </node>
      <node id="2725">
        <label>xmltok_impl.h</label>
        <link refid="xmltok__impl_8h"/>
        <childnode refid="2720" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structnormal__encoding" prot="public">normal_encoding</innerclass>
    <innerclass refid="structunknown__encoding" prot="public">unknown_encoding</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="xmltok_8c_1a16f3efc6d3a2792acf7e4c917d260adc" prot="public" static="no">
        <name>IGNORE_SECTION_TOK_VTABLE</name>
        <initializer>/* as nothing */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="29" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" prot="public" static="no">
        <name>VTABLE1</name>
        <initializer>{ <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(prologTok), <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(contentTok), \
    <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(cdataSectionTok) <ref refid="xmltok_8c_1a16f3efc6d3a2792acf7e4c917d260adc" kindref="member">IGNORE_SECTION_TOK_VTABLE</ref> }, \
  { <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(attributeValueTok), <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(entityValueTok) }, \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(sameName), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(nameMatchesAscii), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(nameLength), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(skipS), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(getAtts), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(charRefNumber), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(predefinedEntityName), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(updatePosition), \
  <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(isPublicId)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="32" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" prot="public" static="no">
        <name>VTABLE</name>
        <initializer><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>, <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(toUtf8), <ref refid="xmlparse_8c_1aa3f98fd58683acd364daca2ddc737491" kindref="member">PREFIX</ref>(toUtf16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="46" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" prot="public" static="no">
        <name>UCS2_GET_NAMING</name>
        <param><defname>pages</defname></param>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <initializer>(namingBitmap[(pages[hi] &lt;&lt; 3) + ((lo) &gt;&gt; 5)] &amp; (1 &lt;&lt; ((lo) &amp; 0x1F)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="48" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1adaca69017a970dff47a1616105fcd190" prot="public" static="no">
        <name>UTF8_GET_NAMING2</name>
        <param><defname>pages</defname></param>
        <param><defname>byte</defname></param>
        <initializer>(namingBitmap[((pages)[(((byte)[0]) &gt;&gt; 2) &amp; 7] &lt;&lt; 3) \
                      + ((((byte)[0]) &amp; 3) &lt;&lt; 1) \
                      + ((((byte)[1]) &gt;&gt; 5) &amp; 1)] \
         &amp; (1 &lt;&lt; (((byte)[1]) &amp; 0x1F)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="55" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a1d082b430fb0f6e4e88bb54b18854fa3" prot="public" static="no">
        <name>UTF8_GET_NAMING3</name>
        <param><defname>pages</defname></param>
        <param><defname>byte</defname></param>
        <initializer>(namingBitmap[((pages)[((((byte)[0]) &amp; 0xF) &lt;&lt; 4) \
                             + ((((byte)[1]) &gt;&gt; 2) &amp; 0xF)] \
                       &lt;&lt; 3) \
                      + ((((byte)[1]) &amp; 3) &lt;&lt; 1) \
                      + ((((byte)[2]) &gt;&gt; 5) &amp; 1)] \
         &amp; (1 &lt;&lt; (((byte)[2]) &amp; 0x1F)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="66" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a3597134ecd2f0180f7f6054eedd855e2" prot="public" static="no">
        <name>UTF8_GET_NAMING</name>
        <param><defname>pages</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>((n) == 2 \
  ? <ref refid="xmltok_8c_1adaca69017a970dff47a1616105fcd190" kindref="member">UTF8_GET_NAMING2</ref>(pages, (<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned char *)(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)) \
  : ((n) == 3 \
     ? <ref refid="xmltok_8c_1a1d082b430fb0f6e4e88bb54b18854fa3" kindref="member">UTF8_GET_NAMING3</ref>(pages, (<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned char *)(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)) \
     : 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="74" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a92b3df08bd25bfa9805a3b8998125ad7" prot="public" static="no">
        <name>UTF8_INVALID2</name>
        <param><defname>p</defname></param>
        <initializer>((*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>) &lt; 0xC2 || ((p)[1] &amp; 0x80) == 0 || ((p)[1] &amp; 0xC0) == 0xC0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="91" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ae52313e00ac70d98fdb894cefe7ad851" prot="public" static="no">
        <name>UTF8_INVALID3</name>
        <param><defname>p</defname></param>
        <initializer>(((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[2] &amp; 0x80) == 0 \
  || \
  ((*p) == 0xEF &amp;&amp; (p)[1] == 0xBF \
    ? \
    (p)[2] &gt; 0xBD \
    : \
    ((p)[2] &amp; 0xC0) == 0xC0) \
  || \
  ((*p) == 0xE0 \
    ? \
    (p)[1] &lt; 0xA0 || ((p)[1] &amp; 0xC0) == 0xC0 \
    : \
    ((p)[1] &amp; 0x80) == 0 \
    || \
    ((*p) == 0xED ? (p)[1] &gt; 0x9F : ((p)[1] &amp; 0xC0) == 0xC0)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="94" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac7146407dd40e78b07b238dd6550075c" prot="public" static="no">
        <name>UTF8_INVALID4</name>
        <param><defname>p</defname></param>
        <initializer>(((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[3] &amp; 0x80) == 0 || ((p)[3] &amp; 0xC0) == 0xC0 \
  || \
  ((p)[2] &amp; 0x80) == 0 || ((p)[2] &amp; 0xC0) == 0xC0 \
  || \
  ((*p) == 0xF0 \
    ? \
    (p)[1] &lt; 0x90 || ((p)[1] &amp; 0xC0) == 0xC0 \
    : \
    ((p)[1] &amp; 0x80) == 0 \
    || \
    ((*p) == 0xF4 ? (p)[1] &gt; 0x8F : ((p)[1] &amp; 0xC0) == 0xC0)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="111" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a2d1b1e0e2401a0271f56d126f712a62a" prot="public" static="no">
        <name>utf8_isName4</name>
        <initializer>isNever</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="142" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a1da5db8634e941c529d70e65c40d05ed" prot="public" static="no">
        <name>utf8_isNmstrt4</name>
        <initializer>isNever</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="156" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" prot="public" static="no">
        <name>AS_NORMAL_ENCODING</name>
        <param><defname>enc</defname></param>
        <initializer>((<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref> *) (enc))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="197" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a08a659495975650900f980413527b371" prot="public" static="no">
        <name>STANDARD_VTABLE</name>
        <param><defname>E</defname></param>
        <initializer>/* as nothing */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="210" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5d31098ce53360e3b57dddbca8cc4d30" prot="public" static="no">
        <name>NORMAL_VTABLE</name>
        <param><defname>E</defname></param>
        <initializer><ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isName2, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isName3, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isName4, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isNmstrt2, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isNmstrt3, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isNmstrt4, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isInvalid2, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isInvalid3, \
 <ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## isInvalid4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="214" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a10dc99867769531ae008e676b7298238" prot="public" static="no">
        <name>MINBPC</name>
        <param><defname>enc</defname></param>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="239" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aa3d3a62657be003bc07c01d3debb3485" prot="public" static="no">
        <name>SB_BYTE_TYPE</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>(((struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref> *)(enc))-&gt;type[(unsigned char)*(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="242" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5858621ad07123547f8171d7f2a05554" prot="public" static="no">
        <name>BYTE_TYPE</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1aa3d3a62657be003bc07c01d3debb3485" kindref="member">SB_BYTE_TYPE</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="254" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aa1f9102f99142da53ab1c754472764ec" prot="public" static="no">
        <name>BYTE_TO_ASCII</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>(*(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="266" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a812d39ddd8702515ffb6b20ca8a7af2e" prot="public" static="no">
        <name>IS_NAME_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>(<ref refid="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" kindref="member">AS_NORMAL_ENCODING</ref>(enc)-&gt;isName ## n(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="269" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a045ba451fab004ca1e63fbcac6933359" prot="public" static="no">
        <name>IS_NMSTRT_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>(<ref refid="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" kindref="member">AS_NORMAL_ENCODING</ref>(enc)-&gt;isNmstrt ## n(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="271" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1af4a439ecc8c32e3d3ca79edd8d19f35e" prot="public" static="no">
        <name>IS_INVALID_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>(<ref refid="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" kindref="member">AS_NORMAL_ENCODING</ref>(enc)-&gt;isInvalid ## n(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="273" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5836087b0358204c2cffdb6fc10d93d3" prot="public" static="no">
        <name>IS_NAME_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="282" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aefdcf2e917e29be31114f8ed8a020942" prot="public" static="no">
        <name>IS_NMSTRT_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="283" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a2fdbcc8ba570d5141133e05a04e44eb2" prot="public" static="no">
        <name>CHAR_MATCHES</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer>(*(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>) == <ref refid="rfft2d_test_m_l_8m_1ae0323a9039add2978bf5b49550572c7c" kindref="member">c</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="296" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a3c81563b8124715ddef3c493850bf822" prot="public" static="no">
        <name>PREFIX</name>
        <param><defname>ident</defname></param>
        <initializer>normal_ ## ident</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="299" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a23c348e434463ae32dd10b4c672a7361" prot="public" static="no">
        <name>XML_TOK_IMPL_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="300" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="396" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="420" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="478" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="511" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a31e943f699d48878210dba7bda3ac319" prot="public" static="no">
        <name>DEFINE_UTF16_TO_UTF8</name>
        <param><defname>E</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="538" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ae7b4a58a0c7cc0d19bad2984d7572870" prot="public" static="no">
        <name>DEFINE_UTF16_TO_UTF16</name>
        <param><defname>E</defname></param>
        <initializer>static <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>  <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref> \
<ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref> ## toUtf16(<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *enc, \
             <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **fromP, <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *fromLim, \
             unsigned short **toP, <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned short *toLim) \
{ \
  /* Avoid copying first half only <ref refid="rfft2d_test_m_l_8m_1ad1fb8d92192e22cbe6298e4a2c65a711" kindref="member">of</ref> surrogate */ \
  <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (fromLim - *fromP &gt; ((toLim - *toP) &lt;&lt; 1) \
      &amp;&amp; (<ref refid="xmltok_8c_1a022e25267c1def84445b583203bc5c3d" kindref="member">GET_HI</ref>(fromLim - 2) &amp; 0xF8) == 0xD8) \
    fromLim -= 2; \
  for (; *fromP != fromLim &amp;&amp; *toP != toLim; *fromP += 2) \
    *(*toP)++ = (GET_HI(*fromP) &lt;&lt; 8) | GET_LO(*fromP); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="601" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ab85f3a62f3c9d398df131330a7021b90" prot="public" static="no">
        <name>SET2</name>
        <param><defname>ptr</defname></param>
        <param><defname>ch</defname></param>
        <initializer>(((ptr)[0] = ((ch) &amp; 0xff)), ((ptr)[1] = ((ch) &gt;&gt; 8)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="615" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a81faca3f8c491f3d0815438b8b5e7f85" prot="public" static="no">
        <name>GET_LO</name>
        <param><defname>ptr</defname></param>
        <initializer>((unsigned char)(ptr)[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="617" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a022e25267c1def84445b583203bc5c3d" prot="public" static="no">
        <name>GET_HI</name>
        <param><defname>ptr</defname></param>
        <initializer>((unsigned char)(ptr)[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="618" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ab85f3a62f3c9d398df131330a7021b90" prot="public" static="no">
        <name>SET2</name>
        <param><defname>ptr</defname></param>
        <param><defname>ch</defname></param>
        <initializer>(((ptr)[0] = ((ch) &gt;&gt; 8)), ((ptr)[1] = ((ch) &amp; 0xFF)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="627" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a81faca3f8c491f3d0815438b8b5e7f85" prot="public" static="no">
        <name>GET_LO</name>
        <param><defname>ptr</defname></param>
        <initializer>((unsigned char)(ptr)[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="629" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a022e25267c1def84445b583203bc5c3d" prot="public" static="no">
        <name>GET_HI</name>
        <param><defname>ptr</defname></param>
        <initializer>((unsigned char)(ptr)[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="630" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac30c78ed4701a81af657b02dd4cf91b4" prot="public" static="no">
        <name>LITTLE2_BYTE_TYPE</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1] == 0 \
  ? ((struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref> *)(enc))-&gt;type[(unsigned char)*(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)] \
  : unicode_byte_type((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1], (<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="639" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ae2f95554982b44b53fc1048bfbb66ba5" prot="public" static="no">
        <name>LITTLE2_BYTE_TO_ASCII</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1] == 0 ? (<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0] : -1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="643" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aadf1bccd8fc3d3315743603dfe06b3e0" prot="public" static="no">
        <name>LITTLE2_CHAR_MATCHES</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1] == 0 &amp;&amp; (<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0] == <ref refid="rfft2d_test_m_l_8m_1ae0323a9039add2978bf5b49550572c7c" kindref="member">c</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="644" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1acadb074b0c1aa1b3d809debfbd29ed5e" prot="public" static="no">
        <name>LITTLE2_IS_NAME_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(namePages, (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[1], (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="645" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1af232a139c838c1e4c446b985f2aa0a78" prot="public" static="no">
        <name>LITTLE2_IS_NMSTRT_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(nmstrtPages, (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[1], (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="647" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a3c81563b8124715ddef3c493850bf822" prot="public" static="no">
        <name>PREFIX</name>
        <param><defname>ident</defname></param>
        <initializer>little2_ ## ident</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="688" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a10dc99867769531ae008e676b7298238" prot="public" static="no">
        <name>MINBPC</name>
        <param><defname>enc</defname></param>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="689" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5858621ad07123547f8171d7f2a05554" prot="public" static="no">
        <name>BYTE_TYPE</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1ac30c78ed4701a81af657b02dd4cf91b4" kindref="member">LITTLE2_BYTE_TYPE</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="691" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aa1f9102f99142da53ab1c754472764ec" prot="public" static="no">
        <name>BYTE_TO_ASCII</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1ae2f95554982b44b53fc1048bfbb66ba5" kindref="member">LITTLE2_BYTE_TO_ASCII</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="692" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a2fdbcc8ba570d5141133e05a04e44eb2" prot="public" static="no">
        <name>CHAR_MATCHES</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer><ref refid="xmltok_8c_1aadf1bccd8fc3d3315743603dfe06b3e0" kindref="member">LITTLE2_CHAR_MATCHES</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>, <ref refid="rfft2d_test_m_l_8m_1ae0323a9039add2978bf5b49550572c7c" kindref="member">c</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="693" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a812d39ddd8702515ffb6b20ca8a7af2e" prot="public" static="no">
        <name>IS_NAME_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="694" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5836087b0358204c2cffdb6fc10d93d3" prot="public" static="no">
        <name>IS_NAME_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1acadb074b0c1aa1b3d809debfbd29ed5e" kindref="member">LITTLE2_IS_NAME_CHAR_MINBPC</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="695" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a045ba451fab004ca1e63fbcac6933359" prot="public" static="no">
        <name>IS_NMSTRT_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="696" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aefdcf2e917e29be31114f8ed8a020942" prot="public" static="no">
        <name>IS_NMSTRT_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1af232a139c838c1e4c446b985f2aa0a78" kindref="member">LITTLE2_IS_NMSTRT_CHAR_MINBPC</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="697" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a23c348e434463ae32dd10b4c672a7361" prot="public" static="no">
        <name>XML_TOK_IMPL_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="699" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="743" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="769" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a395e3404f7abdc606ad219d8ab7c0b94" prot="public" static="no">
        <name>BIG2_BYTE_TYPE</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0] == 0 \
  ? ((struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref> *)(enc))-&gt;type[(unsigned char)(<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1]] \
  : unicode_byte_type((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0], (<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="780" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a0053be2456361e778508cbcaac362904" prot="public" static="no">
        <name>BIG2_BYTE_TO_ASCII</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0] == 0 ? (<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1] : -1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="784" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ae87820669540e159d820f9bec12aaadd" prot="public" static="no">
        <name>BIG2_CHAR_MATCHES</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[0] == 0 &amp;&amp; (<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)[1] == <ref refid="rfft2d_test_m_l_8m_1ae0323a9039add2978bf5b49550572c7c" kindref="member">c</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="785" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a28afd07284c6409a37ce572b55154993" prot="public" static="no">
        <name>BIG2_IS_NAME_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(namePages, (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[0], (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="786" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1abdd6cf0e917ca2e51eb89a7bfff5d409" prot="public" static="no">
        <name>BIG2_IS_NMSTRT_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(nmstrtPages, (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[0], (unsigned char)<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="788" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a3c81563b8124715ddef3c493850bf822" prot="public" static="no">
        <name>PREFIX</name>
        <param><defname>ident</defname></param>
        <initializer>big2_ ## ident</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="829" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a10dc99867769531ae008e676b7298238" prot="public" static="no">
        <name>MINBPC</name>
        <param><defname>enc</defname></param>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="830" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5858621ad07123547f8171d7f2a05554" prot="public" static="no">
        <name>BYTE_TYPE</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1a395e3404f7abdc606ad219d8ab7c0b94" kindref="member">BIG2_BYTE_TYPE</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="832" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aa1f9102f99142da53ab1c754472764ec" prot="public" static="no">
        <name>BYTE_TO_ASCII</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1a0053be2456361e778508cbcaac362904" kindref="member">BIG2_BYTE_TO_ASCII</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="833" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a2fdbcc8ba570d5141133e05a04e44eb2" prot="public" static="no">
        <name>CHAR_MATCHES</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer><ref refid="xmltok_8c_1ae87820669540e159d820f9bec12aaadd" kindref="member">BIG2_CHAR_MATCHES</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>, <ref refid="rfft2d_test_m_l_8m_1ae0323a9039add2978bf5b49550572c7c" kindref="member">c</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="834" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a812d39ddd8702515ffb6b20ca8a7af2e" prot="public" static="no">
        <name>IS_NAME_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="835" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a5836087b0358204c2cffdb6fc10d93d3" prot="public" static="no">
        <name>IS_NAME_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1a28afd07284c6409a37ce572b55154993" kindref="member">BIG2_IS_NAME_CHAR_MINBPC</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="836" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a045ba451fab004ca1e63fbcac6933359" prot="public" static="no">
        <name>IS_NMSTRT_CHAR</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="837" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aefdcf2e917e29be31114f8ed8a020942" prot="public" static="no">
        <name>IS_NMSTRT_CHAR_MINBPC</name>
        <param><defname>enc</defname></param>
        <param><defname>p</defname></param>
        <initializer><ref refid="xmltok_8c_1abdd6cf0e917ca2e51eb89a7bfff5d409" kindref="member">BIG2_IS_NMSTRT_CHAR_MINBPC</ref>(enc, <ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="838" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a23c348e434463ae32dd10b4c672a7361" prot="public" static="no">
        <name>XML_TOK_IMPL_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="840" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="884" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" prot="public" static="no">
        <name>BT_COLON</name>
        <initializer><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04aa972422ebb0aeceea7affe39b0199fef" kindref="member">BT_NMSTRT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="910" column="9"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1acfd95318da5995d028121541e1cde260" prot="public" static="no">
        <name>AS_UNKNOWN_ENCODING</name>
        <param><defname>enc</defname></param>
        <initializer>((<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref> *) (enc))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1255" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" prot="public" static="no">
        <name>INIT_ENC_INDEX</name>
        <param><defname>enc</defname></param>
        <initializer>((<ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>)(enc)-&gt;initEnc.isUtf16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1485" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1aca6ad11aa35dbb980967340905bac3e4" prot="public" static="no">
        <name>SET_INIT_ENC_INDEX</name>
        <param><defname>enc</defname></param>
        <param><defname>i</defname></param>
        <initializer>((enc)-&gt;initEnc.isUtf16 = (char)<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1486" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a3e797486ea8dd3e564d65a537c67f0c5" prot="public" static="no">
        <name>NS</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1619" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1ab6aec1346fb6c7b2733f0f73c9536ad2" prot="public" static="no">
        <name>ns</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1620" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xmltok_8c_1a07cab1fdd4935685d882c7ff421935a7" prot="public" static="no">
        <name>XML_TOK_NS_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1621" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1621" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7" prot="public" static="no">
        <name>@1</name>
        <enumvalue id="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7aa178fa0d4471a87df9f098c3d4d5bfaf" prot="public">
          <name>UTF8_cval1</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ab9de40520f12e745e305de6cbaae89aa" prot="public">
          <name>UTF8_cval2</name>
          <initializer>= 0xc0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ae5c645f459c8b1198b8cf357679b3e25" prot="public">
          <name>UTF8_cval3</name>
          <initializer>= 0xe0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7a3bb425f865be325cf7805ae568063409" prot="public">
          <name>UTF8_cval4</name>
          <initializer>= 0xf0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="314" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="enum" id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5" prot="public" static="no">
        <name>@2</name>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a7ebb1f3e154cf1ec4ea6d2df2d32d7a1" prot="public">
          <name>UNKNOWN_ENC</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" prot="public">
          <name>ISO_8859_1_ENC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a27c4bf314a7c0605785316594381be58" prot="public">
          <name>US_ASCII_ENC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a46f663e9f48222664eee117b68c13999" prot="public">
          <name>UTF_8_ENC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a518bab58caf7f653a902d34c941bb790" prot="public">
          <name>UTF_16_ENC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" prot="public">
          <name>UTF_16BE_ENC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" prot="public">
          <name>UTF_16LE_ENC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a19e41dd21dcd20b0051b8e436501d5dc" prot="public">
          <name>NO_ENC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1426" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1426" bodyend="1436"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="xmltok_8c_1a96aefb2b25b0a34eacb2fc4e8ed91846" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding utf8_encoding</definition>
        <argsstring></argsstring>
        <name>utf8_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="341" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a05ed3ffc99d1932f2372a3f503086ff9" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding internal_utf8_encoding</definition>
        <argsstring></argsstring>
        <name>internal_utf8_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="341" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a488ad820eac131a2234a575ce5072e17" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding latin1_encoding</definition>
        <argsstring></argsstring>
        <name>latin1_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="454" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a3ca83ed4288f22304dc90048119b0f62" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding ascii_encoding</definition>
        <argsstring></argsstring>
        <name>ascii_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="487" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1ae6b9fb684d5c0bff0952375099f53129" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding little2_encoding</definition>
        <argsstring></argsstring>
        <name>little2_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="520" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a79f2d73c643d519bdbb5e93e2328aa78" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding internal_little2_encoding</definition>
        <argsstring></argsstring>
        <name>internal_little2_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="520" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1afed0f3c52208604e079d3c5545fc35a7" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding big2_encoding</definition>
        <argsstring></argsstring>
        <name>big2_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="520" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a4acfb89b6c80b7458628f6a94b2324e1" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct <ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref></type>
        <definition>const struct normal_encoding internal_big2_encoding</definition>
        <argsstring></argsstring>
        <name>internal_big2_encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="520" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1af4391ee851f0832943acae877621b51f" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_version[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_version</name>
        <initializer>= {
  <ref refid="ascii_8h_1afc4c9b07cf17ddde7ad6b72f362e518f" kindref="member">ASCII_v</ref>, <ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>, <ref refid="ascii_8h_1a8fdb0f1662a7d21419407645425b9cb2" kindref="member">ASCII_r</ref>, <ref refid="ascii_8h_1a41fa3e12c9ad88ad3e3b1607f553f619" kindref="member">ASCII_s</ref>, <ref refid="ascii_8h_1a0cb5b4ca514608cbb2be1e03a79dd365" kindref="member">ASCII_i</ref>, <ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>, <ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>, &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1060" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a0bba0130d67c09b74184008b19be3c9f" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_encoding[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_encoding</name>
        <initializer>= {
  <ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>, <ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>, <ref refid="ascii_8h_1a54ddf8c578a6cab1752104cdd7fc266b" kindref="member">ASCII_c</ref>, <ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>, <ref refid="ascii_8h_1a8e17b00599a99d1f4f844c3cc30fe8f0" kindref="member">ASCII_d</ref>, <ref refid="ascii_8h_1a0cb5b4ca514608cbb2be1e03a79dd365" kindref="member">ASCII_i</ref>, <ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>, <ref refid="ascii_8h_1ad79634b68e038665f021e4f2e3cab073" kindref="member">ASCII_g</ref>, &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1064" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1ab6d25ad7cc3b75e2bad139b020cf921d" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_standalone[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_standalone</name>
        <initializer>= {
  <ref refid="ascii_8h_1a41fa3e12c9ad88ad3e3b1607f553f619" kindref="member">ASCII_s</ref>, <ref refid="ascii_8h_1a49c5b42c23f03212f8ef92b46a61e2b5" kindref="member">ASCII_t</ref>, <ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref>, <ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>, <ref refid="ascii_8h_1a8e17b00599a99d1f4f844c3cc30fe8f0" kindref="member">ASCII_d</ref>, <ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref>, <ref refid="ascii_8h_1a03b9fa8c4b67d1b4e571ab27f6fa8d96" kindref="member">ASCII_l</ref>, <ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>,
  <ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>, <ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>, &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1068" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a7d0624a882930e64006ca673824bfeee" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_yes[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_yes</name>
        <initializer>= {
  <ref refid="ascii_8h_1a9af4a4295a94ce3385101c0107e542dc" kindref="member">ASCII_y</ref>, <ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>, <ref refid="ascii_8h_1a41fa3e12c9ad88ad3e3b1607f553f619" kindref="member">ASCII_s</ref>,  &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1073" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1adb368ad972d13b215d4ba1a514786ea9" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_no[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_no</name>
        <initializer>= {
  <ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>, <ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>,  &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1077" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a0e14d2c0baf211ea9290ed2fca87b15b" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_ISO_8859_1[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_ISO_8859_1</name>
        <initializer>= {
  <ref refid="ascii_8h_1a68489bf97bcbe4a3aa8a1401e61d2122" kindref="member">ASCII_I</ref>, <ref refid="ascii_8h_1acfe36006d6c92dfcdb128500f0a6ad0e" kindref="member">ASCII_S</ref>, <ref refid="ascii_8h_1a248a5835b08a0f8d30b0ecedf06b3e67" kindref="member">ASCII_O</ref>, <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1a8e3dcbd218b807ed80fa6bc0901832a2" kindref="member">ASCII_8</ref>, <ref refid="ascii_8h_1a8e3dcbd218b807ed80fa6bc0901832a2" kindref="member">ASCII_8</ref>, <ref refid="ascii_8h_1a637b734e2cec262e80f6aa9b9071e5b3" kindref="member">ASCII_5</ref>, <ref refid="ascii_8h_1a7d01b034dc2511a5f77fdd9a742b10f2" kindref="member">ASCII_9</ref>,
  <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>, &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1438" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1ad9bd7f6b6b2d5556b6fb419da2299d10" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_US_ASCII[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_US_ASCII</name>
        <initializer>= {
  <ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>, <ref refid="ascii_8h_1acfe36006d6c92dfcdb128500f0a6ad0e" kindref="member">ASCII_S</ref>, <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1a6ccdee41712ed103021e82cb944f47e6" kindref="member">ASCII_A</ref>, <ref refid="ascii_8h_1acfe36006d6c92dfcdb128500f0a6ad0e" kindref="member">ASCII_S</ref>, <ref refid="ascii_8h_1a242607ac7ca46b96fb75ae67e4fb75c8" kindref="member">ASCII_C</ref>, <ref refid="ascii_8h_1a68489bf97bcbe4a3aa8a1401e61d2122" kindref="member">ASCII_I</ref>, <ref refid="ascii_8h_1a68489bf97bcbe4a3aa8a1401e61d2122" kindref="member">ASCII_I</ref>,
  &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1442" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1ad6a3497502572fadb9211d1cb2f5aa2e" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_UTF_8[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_UTF_8</name>
        <initializer>=  {
  <ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>, <ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>, <ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>, <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1a8e3dcbd218b807ed80fa6bc0901832a2" kindref="member">ASCII_8</ref>, &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1446" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a3cdb2d2cddd369d07648ddcabc3d56b4" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_UTF_16[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_UTF_16</name>
        <initializer>= {
  <ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>, <ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>, <ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>, <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>, <ref refid="ascii_8h_1acce73753b772da2cc8f963ee8e6ec5dd" kindref="member">ASCII_6</ref>, &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1449" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1aeaafb6bef0f55ee30148cd2b7797fb0e" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_UTF_16BE[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_UTF_16BE</name>
        <initializer>= {
  <ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>, <ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>, <ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>, <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>, <ref refid="ascii_8h_1acce73753b772da2cc8f963ee8e6ec5dd" kindref="member">ASCII_6</ref>, <ref refid="ascii_8h_1ace767b44ac11248fd164f8faf257a70e" kindref="member">ASCII_B</ref>, <ref refid="ascii_8h_1a22b3744b31947249e04b53b8b31b52fc" kindref="member">ASCII_E</ref>,
  &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1452" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xmltok_8c_1a22aa088b691378e910243f660c399bb9" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char KW_UTF_16LE[]</definition>
        <argsstring>[]</argsstring>
        <name>KW_UTF_16LE</name>
        <initializer>= {
  <ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>, <ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>, <ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>, <ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>, <ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>, <ref refid="ascii_8h_1acce73753b772da2cc8f963ee8e6ec5dd" kindref="member">ASCII_6</ref>, <ref refid="ascii_8h_1ab40f6bb905b73c6935fdbc17ea5787a3" kindref="member">ASCII_L</ref>, <ref refid="ascii_8h_1a22b3744b31947249e04b53b8b31b52fc" kindref="member">ASCII_E</ref>,
  &apos;\0&apos;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1456" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1456" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="xmltok_8c_1ac73f21cf0e214df2b8ff7a9a7860505b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL isNever</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>isNever</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="125" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1acc0d6094341271863e15c7884705ac9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isName2</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isName2</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="131" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1aaf1e6e882e8fd1688d2d594f6891c271" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isName3</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isName3</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="137" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a883b8edde14f5665caeba72e7721c242" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isNmstrt2</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isNmstrt2</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="145" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a087b968261300307c7483df37edd0c1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isNmstrt3</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isNmstrt3</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="151" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1ad4e2f0714185b7a42e36f2273efe8104" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isInvalid2</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isInvalid2</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1acd31ca6187d225c40f1db2653b315c9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isInvalid3</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isInvalid3</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="165" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1af906b44eaae465ebd2a2db300bbaf4d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL utf8_isInvalid4</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>utf8_isInvalid4</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1ad0938f50564077b6eb38a1d934c173c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></type>
        <definition>static int FASTCALL checkCharRefNumber</definition>
        <argsstring>(int)</argsstring>
        <name>checkCharRefNumber</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <defname>result</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="225" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1174" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1aa6a42ce589fb81233794134f0ad01b48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL utf8_toUtf8</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, char **toP, const char *toLim)</argsstring>
        <name>utf8_toUtf8</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="322" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="322" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1ada2e71671497e5401c91720f4ac9bcd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL utf8_toUtf16</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, unsigned short **toP, const unsigned short *toLim)</argsstring>
        <name>utf8_toUtf16</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>unsigned short **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned short *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="341" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="341" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a28dacdb615168c6b796bde874d4f3201" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL latin1_toUtf8</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, char **toP, const char *toLim)</argsstring>
        <name>latin1_toUtf8</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="429" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="429" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a01657f38d22646ecfae5c5e45dc95c4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL latin1_toUtf16</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, unsigned short **toP, const unsigned short *toLim)</argsstring>
        <name>latin1_toUtf16</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>unsigned short **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned short *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="454" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="454" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a5dfe501d4b1e919c6e0aec57f468cffa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL ascii_toUtf8</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, char **toP, const char *toLim)</argsstring>
        <name>ascii_toUtf8</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="487" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="487" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a91b6727534c14bf01b8161f825e8fb4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL unicode_byte_type</definition>
        <argsstring>(char hi, char lo)</argsstring>
        <name>unicode_byte_type</name>
        <param>
          <type>char</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>char</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="520" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="520" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1ae21428d382f33f93880f480127adab61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></type>
        <definition>static int FASTCALL streqci</definition>
        <argsstring>(const char *s1, const char *s2)</argsstring>
        <name>streqci</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="923" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="923" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a684c4262abaf3fcd4008a4b88c415131" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL initUpdatePosition</definition>
        <argsstring>(const ENCODING *enc, const char *ptr, const char *end, POSITION *pos)</argsstring>
        <name>initUpdatePosition</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1acbc9ec28b807eebf9d62149084c952b1" kindref="member">POSITION</ref> *</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="941" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="941" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a3ad7ea80d40c2737cec7216480af2f93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int toAscii</definition>
        <argsstring>(const ENCODING *enc, const char *ptr, const char *end)</argsstring>
        <name>toAscii</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="948" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="948" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a87df36cf9e4ae2195c9e00174b458903" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></type>
        <definition>static int FASTCALL isSpace</definition>
        <argsstring>(int c)</argsstring>
        <name>isSpace</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="960" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="960" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a78fe5ffe6ab36e99bd413af993cf1bab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int parsePseudoAttribute</definition>
        <argsstring>(const ENCODING *enc, const char *ptr, const char *end, const char **namePtr, const char **nameEndPtr, const char **valPtr, const char **nextTokPtr)</argsstring>
        <name>parsePseudoAttribute</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>namePtr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>nameEndPtr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>valPtr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>nextTokPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="976" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="976" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1af7c21efe6accd182d0df9335eeb5eefa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int doParseXmlDecl</definition>
        <argsstring>(const ENCODING *(*encodingFinder)(const ENCODING *,                                                                                                                                                                                           const char *,                                                                                                                                                                                           const char *), int isGeneralTextEntity, const ENCODING *enc, const char *ptr, const char *end, const char **badPtr, const char **versionPtr, const char **versionEndPtr, const char **encodingName, const ENCODING **encoding, int *standalone)</argsstring>
        <name>doParseXmlDecl</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *(*)(<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</refref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> charref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *)</type>
          <declname>encodingFinder</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>isGeneralTextEntity</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>badPtr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>versionPtr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>versionEndPtr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>encodingName</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> **</type>
          <declname>encoding</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>standalone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1082" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1082" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1afb9948e7ab79ffca787166b7a2f8f7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></type>
        <definition>int FASTCALL XmlUtf8Encode</definition>
        <argsstring>(int c, char *buf)</argsstring>
        <name>XmlUtf8Encode</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1193" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1193" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1adc07edbd5e6dee6d65bff7a183b54beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></type>
        <definition>int FASTCALL XmlUtf16Encode</definition>
        <argsstring>(int charNum, unsigned short *buf)</argsstring>
        <name>XmlUtf16Encode</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>charNum</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1230" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1230" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a8671b08cbc73ee001e696f02404e878f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int XmlSizeOfUnknownEncoding</definition>
        <argsstring>(void)</argsstring>
        <name>XmlSizeOfUnknownEncoding</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1258" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1258" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a830e2945b0732ff8f5f282f45c4ec36b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL unknown_isName</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>unknown_isName</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1264" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1264" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a4bda0bce4ac96d617f7f55b5c46472fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL unknown_isNmstrt</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>unknown_isNmstrt</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1274" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1274" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a26ee7f17a0c08492ca6fd5bb01a97bc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></type>
        <definition>static int PTRFASTCALL unknown_isInvalid</definition>
        <argsstring>(const ENCODING *enc, const char *p)</argsstring>
        <name>unknown_isInvalid</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1284" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1284" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a1e10a4f149ef38b45b0406b0c1697dfe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL unknown_toUtf8</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, char **toP, const char *toLim)</argsstring>
        <name>unknown_toUtf8</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1292" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1292" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a01578d134b50914c95891ff8aa46201d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></type>
        <definition>static void PTRCALL unknown_toUtf16</definition>
        <argsstring>(const ENCODING *enc, const char **fromP, const char *fromLim, unsigned short **toP, const unsigned short *toLim)</argsstring>
        <name>unknown_toUtf16</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>fromP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fromLim</declname>
        </param>
        <param>
          <type>unsigned short **</type>
          <declname>toP</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned short *</type>
          <declname>toLim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1326" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1326" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1a7bd2980a71390ec11b4039e2f10a41da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *</type>
        <definition>ENCODING* XmlInitUnknownEncoding</definition>
        <argsstring>(void *mem, int *table, CONVERTER convert, void *userData)</argsstring>
        <name>XmlInitUnknownEncoding</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>CONVERTER</type>
          <declname>convert</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1346" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1346" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1afe8938ce2f74434c0cdb8efd1d8e6125" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></type>
        <definition>static int FASTCALL getEncodingIndex</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getEncodingIndex</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1462" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1462" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="xmltok_8c_1aca5f1d821e6df21c0f6838b52f9544b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int initScan</definition>
        <argsstring>(const ENCODING *const *encodingTable, const INIT_ENCODING *enc, int state, const char *ptr, const char *end, const char **nextTokPtr)</argsstring>
        <name>initScan</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a46834e73898ebab478b38f817a8c6fc0" kindref="member">ENCODING</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>encodingTable</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_i_n_i_t___e_n_c_o_d_i_n_g" kindref="compound">INIT_ENCODING</ref> *</type>
          <declname>enc</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>nextTokPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" line="1497" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c" bodystart="1497" bodyend="1616"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>1998,<sp/>1999<sp/>Thai<sp/>Open<sp/>Source<sp/>Software<sp/>Center<sp/>Ltd</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>See<sp/>the<sp/>file<sp/>COPYING<sp/>for<sp/>copying<sp/>permission.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COMPILED_FROM_DSP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="winconfig_8h" kindref="compound">winconfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MACOS_CLASSIC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macconfig_8h" kindref="compound">macconfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__amigaos__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="amigaconfig_8h" kindref="compound">amigaconfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__WATCOMC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;watcomconfig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_EXPAT_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;expat_config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ndef<sp/>COMPILED_FROM_DSP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expat__external_8h" kindref="compound">expat_external.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expat_2lib_2internal_8h" kindref="compound">internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok_8h" kindref="compound">xmltok.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nametab_8h" kindref="compound">nametab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_DTD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IGNORE_SECTION_TOK_VTABLE<sp/>,<sp/>PREFIX(ignoreSectionTok)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="xmltok_8c_1a16f3efc6d3a2792acf7e4c917d260adc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IGNORE_SECTION_TOK_VTABLE<sp/></highlight><highlight class="comment">/*<sp/>as<sp/>nothing<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VTABLE1<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/>{<sp/>PREFIX(prologTok),<sp/>PREFIX(contentTok),<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PREFIX(cdataSectionTok)<sp/>IGNORE_SECTION_TOK_VTABLE<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/>{<sp/>PREFIX(attributeValueTok),<sp/>PREFIX(entityValueTok)<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/>PREFIX(sameName),<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/>PREFIX(nameMatchesAscii),<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/>PREFIX(nameLength),<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/>PREFIX(skipS),<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/>PREFIX(getAtts),<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/>PREFIX(charRefNumber),<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/>PREFIX(predefinedEntityName),<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/>PREFIX(updatePosition),<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>PREFIX(isPublicId)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VTABLE<sp/>VTABLE1,<sp/>PREFIX(toUtf8),<sp/>PREFIX(toUtf16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UCS2_GET_NAMING(pages,<sp/>hi,<sp/>lo)<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/>(namingBitmap[(pages[hi]<sp/>&lt;&lt;<sp/>3)<sp/>+<sp/>((lo)<sp/>&gt;&gt;<sp/>5)]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>((lo)<sp/>&amp;<sp/>0x1F)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>2<sp/>byte<sp/>UTF-8<sp/>representation<sp/>splits<sp/>the<sp/>characters<sp/>11<sp/>bits<sp/>between</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>the<sp/>bottom<sp/>5<sp/>and<sp/>6<sp/>bits<sp/>of<sp/>the<sp/>bytes.<sp/><sp/>We<sp/>need<sp/>8<sp/>bits<sp/>to<sp/>index<sp/>into</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>pages,<sp/>3<sp/>bits<sp/>to<sp/>add<sp/>to<sp/>that<sp/>index<sp/>and<sp/>5<sp/>bits<sp/>to<sp/>generate<sp/>the<sp/>mask.</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="xmltok_8c_1adaca69017a970dff47a1616105fcd190" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_GET_NAMING2(pages,<sp/>byte)<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(namingBitmap[((pages)[(((byte)[0])<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>7]<sp/>&lt;&lt;<sp/>3)<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((((byte)[0])<sp/>&amp;<sp/>3)<sp/>&lt;&lt;<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((((byte)[1])<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>1)]<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(((byte)[1])<sp/>&amp;<sp/>0x1F)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>3<sp/>byte<sp/>UTF-8<sp/>representation<sp/>splits<sp/>the<sp/>characters<sp/>16<sp/>bits<sp/>between</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>the<sp/>bottom<sp/>4,<sp/>6<sp/>and<sp/>6<sp/>bits<sp/>of<sp/>the<sp/>bytes.<sp/><sp/>We<sp/>need<sp/>8<sp/>bits<sp/>to<sp/>index</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>into<sp/>pages,<sp/>3<sp/>bits<sp/>to<sp/>add<sp/>to<sp/>that<sp/>index<sp/>and<sp/>5<sp/>bits<sp/>to<sp/>generate<sp/>the</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>mask.</highlight></codeline>
<codeline lineno="65"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="xmltok_8c_1a1d082b430fb0f6e4e88bb54b18854fa3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_GET_NAMING3(pages,<sp/>byte)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/>(namingBitmap[((pages)[((((byte)[0])<sp/>&amp;<sp/>0xF)<sp/>&lt;&lt;<sp/>4)<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((((byte)[1])<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>0xF)]<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>3)<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((((byte)[1])<sp/>&amp;<sp/>3)<sp/>&lt;&lt;<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((((byte)[2])<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>1)]<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(((byte)[2])<sp/>&amp;<sp/>0x1F)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="xmltok_8c_1a3597134ecd2f0180f7f6054eedd855e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_GET_NAMING(pages,<sp/>p,<sp/>n)<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/>((n)<sp/>==<sp/>2<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>?<sp/>UTF8_GET_NAMING2(pages,<sp/>(const<sp/>unsigned<sp/>char<sp/>*)(p))<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/>:<sp/>((n)<sp/>==<sp/>3<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>?<sp/>UTF8_GET_NAMING3(pages,<sp/>(const<sp/>unsigned<sp/>char<sp/>*)(p))<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Detection<sp/>of<sp/>invalid<sp/>UTF-8<sp/>sequences<sp/>is<sp/>based<sp/>on<sp/>Table<sp/>3.1B</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>of<sp/>Unicode<sp/>3.2:<sp/>http://www.unicode.org/unicode/reports/tr28/</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>additional<sp/>restriction<sp/>of<sp/>not<sp/>allowing<sp/>the<sp/>Unicode</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>code<sp/>points<sp/>0xFFFF<sp/>and<sp/>0xFFFE<sp/>(sequences<sp/>EF,BF,BF<sp/>and<sp/>EF,BF,BE).</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>Implementation<sp/>details:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>(A<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/><sp/><sp/><sp/><sp/>means<sp/>A<sp/>&lt;<sp/>0x80</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>and</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>(A<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0<sp/><sp/>means<sp/>A<sp/>&gt;<sp/>0xBF</highlight></codeline>
<codeline lineno="89"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="xmltok_8c_1a92b3df08bd25bfa9805a3b8998125ad7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_INVALID2(p)<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/>((*p)<sp/>&lt;<sp/>0xC2<sp/>||<sp/>((p)[1]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/>||<sp/>((p)[1]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="xmltok_8c_1ae52313e00ac70d98fdb894cefe7ad851" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_INVALID3(p)<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/>(((p)[2]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/>((*p)<sp/>==<sp/>0xEF<sp/>&amp;&amp;<sp/>(p)[1]<sp/>==<sp/>0xBF<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>?<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(p)[2]<sp/>&gt;<sp/>0xBD<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((p)[2]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0)<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/>((*p)<sp/>==<sp/>0xE0<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>?<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(p)[1]<sp/>&lt;<sp/>0xA0<sp/>||<sp/>((p)[1]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((p)[1]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((*p)<sp/>==<sp/>0xED<sp/>?<sp/>(p)[1]<sp/>&gt;<sp/>0x9F<sp/>:<sp/>((p)[1]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="xmltok_8c_1ac7146407dd40e78b07b238dd6550075c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_INVALID4(p)<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>(((p)[3]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/>||<sp/>((p)[3]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>((p)[2]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/>||<sp/>((p)[2]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>((*p)<sp/>==<sp/>0xF0<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>?<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(p)[1]<sp/>&lt;<sp/>0x90<sp/>||<sp/>((p)[1]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((p)[1]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((*p)<sp/>==<sp/>0xF4<sp/>?<sp/>(p)[1]<sp/>&gt;<sp/>0x8F<sp/>:<sp/>((p)[1]<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0xC0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="125"><highlight class="normal">isNever(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*<ref refid="structprolog__state_1a7e8562ff36e1a1051fa703ca6f80228e" kindref="member">enc</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="131"><highlight class="normal">utf8_isName2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*<ref refid="structprolog__state_1a7e8562ff36e1a1051fa703ca6f80228e" kindref="member">enc</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1adaca69017a970dff47a1616105fcd190" kindref="member">UTF8_GET_NAMING2</ref>(namePages,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="137"><highlight class="normal">utf8_isName3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a1d082b430fb0f6e4e88bb54b18854fa3" kindref="member">UTF8_GET_NAMING3</ref>(namePages,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="xmltok_8c_1a2d1b1e0e2401a0271f56d126f712a62a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_isName4<sp/>isNever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="145"><highlight class="normal">utf8_isNmstrt2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1adaca69017a970dff47a1616105fcd190" kindref="member">UTF8_GET_NAMING2</ref>(nmstrtPages,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="151"><highlight class="normal">utf8_isNmstrt3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a1d082b430fb0f6e4e88bb54b18854fa3" kindref="member">UTF8_GET_NAMING3</ref>(nmstrtPages,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="xmltok_8c_1a1da5db8634e941c529d70e65c40d05ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_isNmstrt4<sp/>isNever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="159"><highlight class="normal">utf8_isInvalid2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a92b3df08bd25bfa9805a3b8998125ad7" kindref="member">UTF8_INVALID2</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="165"><highlight class="normal">utf8_isInvalid3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ae52313e00ac70d98fdb894cefe7ad851" kindref="member">UTF8_INVALID3</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="171"><highlight class="normal">utf8_isInvalid4(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ac7146407dd40e78b07b238dd6550075c" kindref="member">UTF8_INVALID4</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="structnormal__encoding" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>{</highlight></codeline>
<codeline lineno="177" refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/><ref refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" kindref="member">enc</ref>;</highlight></codeline>
<codeline lineno="178" refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[256];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*byteType)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isNameMin)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isNmstrtMin)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*byteToAscii)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref><sp/>*charMatches)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>XML_MIN_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isName2)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isName3)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isName4)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isNmstrt2)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isNmstrt3)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isNmstrt4)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isInvalid2)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isInvalid3)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref><sp/>(<ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref><sp/>*isInvalid4)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AS_NORMAL_ENCODING(enc)<sp/><sp/><sp/>((const<sp/>struct<sp/>normal_encoding<sp/>*)<sp/>(enc))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STANDARD_VTABLE(E)<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>byteType,<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isNameMin,<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isNmstrtMin,<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>byteToAscii,<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>charMatches,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="xmltok_8c_1a08a659495975650900f980413527b371" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STANDARD_VTABLE(E)<sp/></highlight><highlight class="comment">/*<sp/>as<sp/>nothing<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="xmltok_8c_1a5d31098ce53360e3b57dddbca8cc4d30" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NORMAL_VTABLE(E)<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isName2,<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isName3,<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isName4,<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isNmstrt2,<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isNmstrt3,<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isNmstrt4,<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isInvalid2,<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isInvalid3,<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/>E<sp/>##<sp/>isInvalid4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref><sp/>checkCharRefNumber(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok__impl_8h" kindref="compound">xmltok_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ascii_8h" kindref="compound">ascii.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sb_isNameMin<sp/>isNever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sb_isNmstrtMin<sp/>isNever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINBPC(enc)<sp/>((enc)-&gt;minBytesPerChar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>minimum<sp/>bytes<sp/>per<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINBPC(enc)<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="xmltok_8c_1aa3d3a62657be003bc07c01d3debb3485" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SB_BYTE_TYPE(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/>(((struct<sp/>normal_encoding<sp/>*)(enc))-&gt;type[(unsigned<sp/>char)*(p)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="247"><highlight class="normal">sb_byteType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1aa3d3a62657be003bc07c01d3debb3485" kindref="member">SB_BYTE_TYPE</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TYPE(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;byteType(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TYPE(enc,<sp/>p)<sp/>SB_BYTE_TYPE(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TO_ASCII(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;byteToAscii(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="261"><highlight class="normal">sb_byteToAscii(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TO_ASCII(enc,<sp/>p)<sp/>(*(p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR(enc,<sp/>p,<sp/>n)<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;isName<sp/>##<sp/>n(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR(enc,<sp/>p,<sp/>n)<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;isNmstrt<sp/>##<sp/>n(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="xmltok_8c_1af4a439ecc8c32e3d3ca79edd8d19f35e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_INVALID_CHAR(enc,<sp/>p,<sp/>n)<sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;isInvalid<sp/>##<sp/>n(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR_MINBPC(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;isNameMin(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;isNmstrtMin(enc,<sp/>p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR_MINBPC(enc,<sp/>p)<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHAR_MATCHES(enc,<sp/>p,<sp/>c)<sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/>(AS_NORMAL_ENCODING(enc)-&gt;charMatches(enc,<sp/>p,<sp/>c))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="290"><highlight class="normal">sb_charMatches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*p<sp/>==<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>c<sp/>is<sp/>an<sp/>ASCII<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHAR_MATCHES(enc,<sp/>p,<sp/>c)<sp/>(*(p)<sp/>==<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREFIX(ident)<sp/>normal_<sp/>##<sp/>ident</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XML_TOK_IMPL_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok__impl_8c" kindref="compound">xmltok_impl.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>XML_TOK_IMPL_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTE_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTE_TO_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHAR_MATCHES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NAME_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NAME_CHAR_MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NMSTRT_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NMSTRT_CHAR_MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_INVALID_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF8_cvalN<sp/>is<sp/>value<sp/>of<sp/>masked<sp/>first<sp/>byte<sp/>of<sp/>N<sp/>byte<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7aa178fa0d4471a87df9f098c3d4d5bfaf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7aa178fa0d4471a87df9f098c3d4d5bfaf" kindref="member">UTF8_cval1</ref><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="316" refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ab9de40520f12e745e305de6cbaae89aa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ab9de40520f12e745e305de6cbaae89aa" kindref="member">UTF8_cval2</ref><sp/>=<sp/>0xc0,</highlight></codeline>
<codeline lineno="317" refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ae5c645f459c8b1198b8cf357679b3e25" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ae5c645f459c8b1198b8cf357679b3e25" kindref="member">UTF8_cval3</ref><sp/>=<sp/>0xe0,</highlight></codeline>
<codeline lineno="318" refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7a3bb425f865be325cf7805ae568063409" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7a3bb425f865be325cf7805ae568063409" kindref="member">UTF8_cval4</ref><sp/>=<sp/>0xf0</highlight></codeline>
<codeline lineno="319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="322"><highlight class="normal">utf8_toUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fromLim<sp/>-<sp/>*fromP<sp/>&gt;<sp/>toLim<sp/>-<sp/>*toP)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>copying<sp/>partial<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fromLim<sp/>=<sp/>*fromP<sp/>+<sp/>(toLim<sp/>-<sp/>*toP);<sp/>fromLim<sp/>&gt;<sp/>*fromP;<sp/>fromLim--)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)fromLim[-1]<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(to<sp/>=<sp/>*toP,<sp/>from<sp/>=<sp/>*fromP;<sp/>from<sp/>!=<sp/>fromLim;<sp/>from++,<sp/>to++)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>*to<sp/>=<sp/>*from;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>*fromP<sp/>=<sp/><ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>*toP<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="341"><highlight class="normal">utf8_toUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*to<sp/>=<sp/>*toP;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref><sp/>=<sp/>*fromP;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(from<sp/>!=<sp/>fromLim<sp/>&amp;&amp;<sp/>to<sp/>!=<sp/>toLim)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>*)enc)-&gt;<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*from])<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="utf8tab_8h_1acbaa9ddc09d5dfa628ddae9353e593b9" kindref="member">BT_LEAD2</ref>:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*to++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)(((from[0]<sp/>&amp;<sp/>0x1f)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(from[1]<sp/>&amp;<sp/>0x3f));</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="utf8tab_8h_1a2ff9a4dc2a6f99ea79d97889a1f4cd20" kindref="member">BT_LEAD3</ref>:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*to++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)(((from[0]<sp/>&amp;<sp/>0xf)<sp/>&lt;&lt;<sp/>12)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((from[1]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(from[2]<sp/>&amp;<sp/>0x3f));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="utf8tab_8h_1a6fe848859116d475c3acbf1bbcf21452" kindref="member">BT_LEAD4</ref>:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>+<sp/>1<sp/>==<sp/>toLim)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>after;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>((from[0]<sp/>&amp;<sp/>0x7)<sp/>&lt;&lt;<sp/>18)<sp/>|<sp/>((from[1]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>12)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((from[2]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(from[3]<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>0x10000;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)((n<sp/>&gt;&gt;<sp/>10)<sp/>|<sp/>0xD800);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)((n<sp/>&amp;<sp/>0x3FF)<sp/>|<sp/>0xDC00);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*to++<sp/>=<sp/>*from++;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal">after:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>*fromP<sp/>=<sp/><ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>*toP<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>utf8_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>utf8_toUtf8,<sp/>utf8_toUtf16,<sp/>1,<sp/>1,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utf8tab_8h" kindref="compound">utf8tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)<sp/><ref refid="xmltok_8c_1a5d31098ce53360e3b57dddbca8cc4d30" kindref="member">NORMAL_VTABLE</ref>(utf8_)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">};</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>utf8_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>utf8_toUtf8,<sp/>utf8_toUtf16,<sp/>1,<sp/>1,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utf8tab_8h" kindref="compound">utf8tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)<sp/><ref refid="xmltok_8c_1a5d31098ce53360e3b57dddbca8cc4d30" kindref="member">NORMAL_VTABLE</ref>(utf8_)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>internal_utf8_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>utf8_toUtf8,<sp/>utf8_toUtf16,<sp/>1,<sp/>1,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iasciitab_8h" kindref="compound">iasciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utf8tab_8h" kindref="compound">utf8tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)<sp/><ref refid="xmltok_8c_1a5d31098ce53360e3b57dddbca8cc4d30" kindref="member">NORMAL_VTABLE</ref>(utf8_)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>internal_utf8_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>utf8_toUtf8,<sp/>utf8_toUtf16,<sp/>1,<sp/>1,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iasciitab_8h" kindref="compound">iasciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utf8tab_8h" kindref="compound">utf8tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)<sp/><ref refid="xmltok_8c_1a5d31098ce53360e3b57dddbca8cc4d30" kindref="member">NORMAL_VTABLE</ref>(utf8_)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="429"><highlight class="normal">latin1_toUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*fromP<sp/>==<sp/>fromLim)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)**fromP;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&amp;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(toLim<sp/>-<sp/>*toP<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(char)((c<sp/>&gt;&gt;<sp/>6)<sp/>|<sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ab9de40520f12e745e305de6cbaae89aa" kindref="member">UTF8_cval2</ref>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(char)((c<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*fromP)++;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*toP<sp/>==<sp/>toLim)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>*(*fromP)++;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="454"><highlight class="normal">latin1_toUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fromP<sp/>!=<sp/>fromLim<sp/>&amp;&amp;<sp/>*toP<sp/>!=<sp/>toLim)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*(*fromP)++;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>latin1_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>latin1_toUtf8,<sp/>latin1_toUtf16,<sp/>1,<sp/>0,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>latin1_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>latin1_toUtf8,<sp/>latin1_toUtf16,<sp/>1,<sp/>0,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="487"><highlight class="normal">ascii_toUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fromP<sp/>!=<sp/>fromLim<sp/>&amp;&amp;<sp/>*toP<sp/>!=<sp/>toLim)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>*(*fromP)++;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>ascii_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>ascii_toUtf8,<sp/>latin1_toUtf16,<sp/>1,<sp/>1,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BT_NONXML<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>ascii_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1a0e414f9ad2147e44c943c0456234c529" kindref="member">VTABLE1</ref>,<sp/>ascii_toUtf8,<sp/>latin1_toUtf16,<sp/>1,<sp/>1,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BT_NONXML<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(sb_)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">};</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="520"><highlight class="normal">unicode_byte_type(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hi,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lo)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)hi)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xD8:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xD9:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDA:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDB:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utf8tab_8h_1a6fe848859116d475c3acbf1bbcf21452" kindref="member">BT_LEAD4</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDC:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDD:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDE:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDF:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utf8tab_8h_1ab6fae5f14595a0f2b6f35c63fefa7b82" kindref="member">BT_TRAIL</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFF:</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)lo)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFF:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFE:</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="asciitab_8h_1afd159f089697124230e66a6b8185cf6e" kindref="member">BT_NONXML</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok__impl_8h_1abc6126af1d45847bc59afa0aa3216b04a1965752c9f453ad11f8547186380b95c" kindref="member">BT_NONASCII</ref>;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="xmltok_8c_1a31e943f699d48878210dba7bda3ac319" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_UTF16_TO_UTF8(E)<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor">static<sp/>void<sp/><sp/>PTRCALL<sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor">E<sp/>##<sp/>toUtf8(const<sp/>ENCODING<sp/>*enc,<sp/>\</highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char<sp/>**fromP,<sp/>const<sp/>char<sp/>*fromLim,<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>**toP,<sp/>const<sp/>char<sp/>*toLim)<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/>const<sp/>char<sp/>*from;<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/>for<sp/>(from<sp/>=<sp/>*fromP;<sp/>from<sp/>!=<sp/>fromLim;<sp/>from<sp/>+=<sp/>2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>plane;<sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>lo2;<sp/>\</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>lo<sp/>=<sp/>GET_LO(from);<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>hi<sp/>=<sp/>GET_HI(from);<sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(hi)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(lo<sp/>&lt;<sp/>0x80)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*toP<sp/>==<sp/>toLim)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fromP<sp/>=<sp/>from;<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>lo;<sp/>\</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>0x1:<sp/>case<sp/>0x2:<sp/>case<sp/>0x3:<sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>0x4:<sp/>case<sp/>0x5:<sp/>case<sp/>0x6:<sp/>case<sp/>0x7:<sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(toLim<sp/>-<sp/><sp/>*toP<sp/>&lt;<sp/>2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fromP<sp/>=<sp/>from;<sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>((lo<sp/>&gt;&gt;<sp/>6)<sp/>|<sp/>(hi<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/><sp/>UTF8_cval2);<sp/>\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>((lo<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);<sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>default:<sp/>\</highlight></codeline>
<codeline lineno="571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(toLim<sp/>-<sp/><sp/>*toP<sp/>&lt;<sp/>3)<sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fromP<sp/>=<sp/>from;<sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>16<sp/>bits<sp/>divided<sp/>4,<sp/>6,<sp/>6<sp/>amongst<sp/>3<sp/>bytes<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>((hi<sp/>&gt;&gt;<sp/>4)<sp/>|<sp/>UTF8_cval3);<sp/>\</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(((hi<sp/>&amp;<sp/>0xf)<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>(lo<sp/>&gt;&gt;<sp/>6)<sp/>|<sp/>0x80);<sp/>\</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>((lo<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);<sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>0xD8:<sp/>case<sp/>0xD9:<sp/>case<sp/>0xDA:<sp/>case<sp/>0xDB:<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(toLim<sp/>-<sp/><sp/>*toP<sp/>&lt;<sp/>4)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fromP<sp/>=<sp/>from;<sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>plane<sp/>=<sp/>(((hi<sp/>&amp;<sp/>0x3)<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>((lo<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3))<sp/>+<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>((plane<sp/>&gt;&gt;<sp/>2)<sp/>|<sp/>UTF8_cval4);<sp/>\</highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(((lo<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>0xF)<sp/>|<sp/>((plane<sp/>&amp;<sp/>0x3)<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>0x80);<sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>+=<sp/>2;<sp/>\</highlight></codeline>
<codeline lineno="589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>lo2<sp/>=<sp/>GET_LO(from);<sp/>\</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(((lo<sp/>&amp;<sp/>0x3)<sp/>&lt;&lt;<sp/>4)<sp/>\</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((GET_HI(from)<sp/>&amp;<sp/>0x3)<sp/>&lt;&lt;<sp/>2)<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(lo2<sp/>&gt;&gt;<sp/>6)<sp/>\</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>0x80);<sp/>\</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>((lo2<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);<sp/>\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"><sp/><sp/>*fromP<sp/>=<sp/>from;<sp/>\</highlight></codeline>
<codeline lineno="599"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601" refid="xmltok_8c_1ae7b4a58a0c7cc0d19bad2984d7572870" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_UTF16_TO_UTF16(E)<sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor">static<sp/>void<sp/><sp/>PTRCALL<sp/>\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor">E<sp/>##<sp/>toUtf16(const<sp/>ENCODING<sp/>*enc,<sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char<sp/>**fromP,<sp/>const<sp/>char<sp/>*fromLim,<sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>short<sp/>**toP,<sp/>const<sp/>unsigned<sp/>short<sp/>*toLim)<sp/>\</highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="607"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>copying<sp/>first<sp/>half<sp/>only<sp/>of<sp/>surrogate<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor"><sp/><sp/>if<sp/>(fromLim<sp/>-<sp/>*fromP<sp/>&gt;<sp/>((toLim<sp/>-<sp/>*toP)<sp/>&lt;&lt;<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(GET_HI(fromLim<sp/>-<sp/>2)<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xD8)<sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fromLim<sp/>-=<sp/>2;<sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"><sp/><sp/>for<sp/>(;<sp/>*fromP<sp/>!=<sp/>fromLim<sp/>&amp;&amp;<sp/>*toP<sp/>!=<sp/>toLim;<sp/>*fromP<sp/>+=<sp/>2)<sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>(GET_HI(*fromP)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>GET_LO(*fromP);<sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET2(ptr,<sp/>ch)<sp/>\</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"><sp/><sp/>(((ptr)[0]<sp/>=<sp/>((ch)<sp/>&amp;<sp/>0xff)),<sp/>((ptr)[1]<sp/>=<sp/>((ch)<sp/>&gt;&gt;<sp/>8)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GET_LO(ptr)<sp/>((unsigned<sp/>char)(ptr)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GET_HI(ptr)<sp/>((unsigned<sp/>char)(ptr)[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><ref refid="xmltok_8c_1a31e943f699d48878210dba7bda3ac319" kindref="member">DEFINE_UTF16_TO_UTF8</ref>(little2_)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><ref refid="xmltok_8c_1ae7b4a58a0c7cc0d19bad2984d7572870" kindref="member">DEFINE_UTF16_TO_UTF16</ref>(little2_)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SET2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GET_LO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GET_HI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="xmltok_8c_1ab85f3a62f3c9d398df131330a7021b90" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET2(ptr,<sp/>ch)<sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/>(((ptr)[0]<sp/>=<sp/>((ch)<sp/>&gt;&gt;<sp/>8)),<sp/>((ptr)[1]<sp/>=<sp/>((ch)<sp/>&amp;<sp/>0xFF)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="xmltok_8c_1a81faca3f8c491f3d0815438b8b5e7f85" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GET_LO(ptr)<sp/>((unsigned<sp/>char)(ptr)[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="xmltok_8c_1a022e25267c1def84445b583203bc5c3d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GET_HI(ptr)<sp/>((unsigned<sp/>char)(ptr)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><ref refid="xmltok_8c_1a31e943f699d48878210dba7bda3ac319" kindref="member">DEFINE_UTF16_TO_UTF8</ref>(big2_)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><ref refid="xmltok_8c_1ae7b4a58a0c7cc0d19bad2984d7572870" kindref="member">DEFINE_UTF16_TO_UTF16</ref>(big2_)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SET2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GET_LO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GET_HI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="xmltok_8c_1ac30c78ed4701a81af657b02dd4cf91b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LITTLE2_BYTE_TYPE(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/>((p)[1]<sp/>==<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/>?<sp/>((struct<sp/>normal_encoding<sp/>*)(enc))-&gt;type[(unsigned<sp/>char)*(p)]<sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/>:<sp/>unicode_byte_type((p)[1],<sp/>(p)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="xmltok_8c_1ae2f95554982b44b53fc1048bfbb66ba5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LITTLE2_BYTE_TO_ASCII(enc,<sp/>p)<sp/>((p)[1]<sp/>==<sp/>0<sp/>?<sp/>(p)[0]<sp/>:<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="xmltok_8c_1aadf1bccd8fc3d3315743603dfe06b3e0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LITTLE2_CHAR_MATCHES(enc,<sp/>p,<sp/>c)<sp/>((p)[1]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(p)[0]<sp/>==<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645" refid="xmltok_8c_1acadb074b0c1aa1b3d809debfbd29ed5e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LITTLE2_IS_NAME_CHAR_MINBPC(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/>UCS2_GET_NAMING(namePages,<sp/>(unsigned<sp/>char)p[1],<sp/>(unsigned<sp/>char)p[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="xmltok_8c_1af232a139c838c1e4c446b985f2aa0a78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LITTLE2_IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/>UCS2_GET_NAMING(nmstrtPages,<sp/>(unsigned<sp/>char)p[1],<sp/>(unsigned<sp/>char)p[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="653"><highlight class="normal">little2_byteType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ac30c78ed4701a81af657b02dd4cf91b4" kindref="member">LITTLE2_BYTE_TYPE</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="659"><highlight class="normal">little2_byteToAscii(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ae2f95554982b44b53fc1048bfbb66ba5" kindref="member">LITTLE2_BYTE_TO_ASCII</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="665"><highlight class="normal">little2_charMatches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1aadf1bccd8fc3d3315743603dfe06b3e0" kindref="member">LITTLE2_CHAR_MATCHES</ref>(enc,<sp/>p,<sp/>c);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="671"><highlight class="normal">little2_isNameMin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1acadb074b0c1aa1b3d809debfbd29ed5e" kindref="member">LITTLE2_IS_NAME_CHAR_MINBPC</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="677"><highlight class="normal">little2_isNmstrtMin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1af232a139c838c1e4c446b985f2aa0a78" kindref="member">LITTLE2_IS_NMSTRT_CHAR_MINBPC</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VTABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VTABLE<sp/>VTABLE1,<sp/>little2_toUtf8,<sp/>little2_toUtf16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>XML_MIN_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREFIX(ident)<sp/>little2_<sp/>##<sp/>ident</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINBPC(enc)<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CHAR_MATCHES<sp/>is<sp/>guaranteed<sp/>to<sp/>have<sp/>MINBPC<sp/>bytes<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TYPE(enc,<sp/>p)<sp/>LITTLE2_BYTE_TYPE(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TO_ASCII(enc,<sp/>p)<sp/>LITTLE2_BYTE_TO_ASCII(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHAR_MATCHES(enc,<sp/>p,<sp/>c)<sp/>LITTLE2_CHAR_MATCHES(enc,<sp/>p,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR(enc,<sp/>p,<sp/>n)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR_MINBPC(enc,<sp/>p)<sp/>LITTLE2_IS_NAME_CHAR_MINBPC(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR(enc,<sp/>p,<sp/>n)<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)<sp/>LITTLE2_IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XML_TOK_IMPL_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok__impl_8c" kindref="compound">xmltok_impl.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>XML_TOK_IMPL_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTE_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTE_TO_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHAR_MATCHES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NAME_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NAME_CHAR_MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NMSTRT_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NMSTRT_CHAR_MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_INVALID_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>XML_MIN_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>little2_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTEORDER<sp/>==<sp/>1234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(little2_)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">};</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>little2_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTEORDER<sp/>==<sp/>1234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(little2_)</highlight></codeline>
<codeline lineno="749"><highlight class="normal">};</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTEORDER<sp/>!=<sp/>4321</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>internal_little2_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iasciitab_8h" kindref="compound">iasciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(little2_)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>internal_little2_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iasciitab_8h" kindref="compound">iasciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(little2_)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">};</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="xmltok_8c_1a395e3404f7abdc606ad219d8ab7c0b94" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIG2_BYTE_TYPE(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/>((p)[0]<sp/>==<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/>?<sp/>((struct<sp/>normal_encoding<sp/>*)(enc))-&gt;type[(unsigned<sp/>char)(p)[1]]<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/>:<sp/>unicode_byte_type((p)[0],<sp/>(p)[1]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="xmltok_8c_1a0053be2456361e778508cbcaac362904" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIG2_BYTE_TO_ASCII(enc,<sp/>p)<sp/>((p)[0]<sp/>==<sp/>0<sp/>?<sp/>(p)[1]<sp/>:<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="xmltok_8c_1ae87820669540e159d820f9bec12aaadd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIG2_CHAR_MATCHES(enc,<sp/>p,<sp/>c)<sp/>((p)[0]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(p)[1]<sp/>==<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="xmltok_8c_1a28afd07284c6409a37ce572b55154993" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIG2_IS_NAME_CHAR_MINBPC(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/>UCS2_GET_NAMING(namePages,<sp/>(unsigned<sp/>char)p[0],<sp/>(unsigned<sp/>char)p[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="xmltok_8c_1abdd6cf0e917ca2e51eb89a7bfff5d409" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIG2_IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)<sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/>UCS2_GET_NAMING(nmstrtPages,<sp/>(unsigned<sp/>char)p[0],<sp/>(unsigned<sp/>char)p[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_MIN_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="794"><highlight class="normal">big2_byteType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a395e3404f7abdc606ad219d8ab7c0b94" kindref="member">BIG2_BYTE_TYPE</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="800"><highlight class="normal">big2_byteToAscii(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="801"><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a0053be2456361e778508cbcaac362904" kindref="member">BIG2_BYTE_TO_ASCII</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="806"><highlight class="normal">big2_charMatches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ae87820669540e159d820f9bec12aaadd" kindref="member">BIG2_CHAR_MATCHES</ref>(enc,<sp/>p,<sp/>c);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="812"><highlight class="normal">big2_isNameMin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a28afd07284c6409a37ce572b55154993" kindref="member">BIG2_IS_NAME_CHAR_MINBPC</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="818"><highlight class="normal">big2_isNmstrtMin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1abdd6cf0e917ca2e51eb89a7bfff5d409" kindref="member">BIG2_IS_NMSTRT_CHAR_MINBPC</ref>(enc,<sp/>p);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VTABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VTABLE<sp/>VTABLE1,<sp/>big2_toUtf8,<sp/>big2_toUtf16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>XML_MIN_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="xmltok_8c_1a3c81563b8124715ddef3c493850bf822" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREFIX(ident)<sp/>big2_<sp/>##<sp/>ident</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="xmltok_8c_1a10dc99867769531ae008e676b7298238" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINBPC(enc)<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CHAR_MATCHES<sp/>is<sp/>guaranteed<sp/>to<sp/>have<sp/>MINBPC<sp/>bytes<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832" refid="xmltok_8c_1a5858621ad07123547f8171d7f2a05554" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TYPE(enc,<sp/>p)<sp/>BIG2_BYTE_TYPE(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="xmltok_8c_1aa1f9102f99142da53ab1c754472764ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTE_TO_ASCII(enc,<sp/>p)<sp/>BIG2_BYTE_TO_ASCII(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="xmltok_8c_1a2fdbcc8ba570d5141133e05a04e44eb2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHAR_MATCHES(enc,<sp/>p,<sp/>c)<sp/>BIG2_CHAR_MATCHES(enc,<sp/>p,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835" refid="xmltok_8c_1a812d39ddd8702515ffb6b20ca8a7af2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR(enc,<sp/>p,<sp/>n)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="xmltok_8c_1a5836087b0358204c2cffdb6fc10d93d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NAME_CHAR_MINBPC(enc,<sp/>p)<sp/>BIG2_IS_NAME_CHAR_MINBPC(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837" refid="xmltok_8c_1a045ba451fab004ca1e63fbcac6933359" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR(enc,<sp/>p,<sp/>n)<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="xmltok_8c_1aefdcf2e917e29be31114f8ed8a020942" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)<sp/>BIG2_IS_NMSTRT_CHAR_MINBPC(enc,<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840" refid="xmltok_8c_1a23c348e434463ae32dd10b4c672a7361" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XML_TOK_IMPL_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok__impl_8c" kindref="compound">xmltok_impl.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>XML_TOK_IMPL_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTE_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTE_TO_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CHAR_MATCHES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NAME_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NAME_CHAR_MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NMSTRT_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_NMSTRT_CHAR_MINBPC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IS_INVALID_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>XML_MIN_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>big2_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTEORDER<sp/>==<sp/>4321</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>1</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>0</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(big2_)</highlight></codeline>
<codeline lineno="871"><highlight class="normal">};</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>big2_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTEORDER<sp/>==<sp/>4321</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>1</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>0</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asciitab_8h" kindref="compound">asciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(big2_)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTEORDER<sp/>!=<sp/>1234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>internal_big2_encoding_ns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iasciitab_8h" kindref="compound">iasciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(big2_)</highlight></codeline>
<codeline lineno="903"><highlight class="normal">};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>internal_big2_encoding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="xmltok_8c_1aa4a137442c139400b647ac62b40ea51a" kindref="member">VTABLE</ref>,<sp/>2,<sp/>0,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_COLON<sp/>BT_NMSTRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iasciitab_8h" kindref="compound">iasciitab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BT_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="latin1tab_8h" kindref="compound">latin1tab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a08a659495975650900f980413527b371" kindref="member">STANDARD_VTABLE</ref>(big2_)</highlight></codeline>
<codeline lineno="916"><highlight class="normal">};</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></highlight></codeline>
<codeline lineno="923"><highlight class="normal">streqci(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>*s1++;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="conv2dtest_8m_1a869bd946456256c347112f5798b5b504" kindref="member">c2</ref><sp/>=<sp/>*s2++;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref><sp/>&lt;=<sp/>c1<sp/>&amp;&amp;<sp/>c1<sp/>&lt;=<sp/><ref refid="ascii_8h_1a76cb409bf2d31112b1bec0056271e3ce" kindref="member">ASCII_z</ref>)</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>+=<sp/><ref refid="ascii_8h_1a6ccdee41712ed103021e82cb944f47e6" kindref="member">ASCII_A</ref><sp/>-<sp/><ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ASCII_a<sp/>&lt;=<sp/>c2<sp/>&amp;&amp;<sp/>c2<sp/>&lt;=<sp/><ref refid="ascii_8h_1a76cb409bf2d31112b1bec0056271e3ce" kindref="member">ASCII_z</ref>)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>+=<sp/><ref refid="ascii_8h_1a6ccdee41712ed103021e82cb944f47e6" kindref="member">ASCII_A</ref><sp/>-<sp/><ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>!=<sp/>c2)</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c1)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="941"><highlight class="normal">initUpdatePosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="convtest_8m_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>,<sp/><ref refid="structposition" kindref="compound">POSITION</ref><sp/>*pos)</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>normal_updatePosition(&amp;utf8_encoding.<ref refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" kindref="member">enc</ref>,<sp/>ptr,<sp/>end,<sp/>pos);</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal">toAscii(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>[1];</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8h_1a2b4273f95ae9afa03fd097aaa807be9e" kindref="member">XmlUtf8Convert</ref>(enc,<sp/>&amp;ptr,<sp/>end,<sp/>&amp;p,<sp/>p<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>buf)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf[0];</highlight></codeline>
<codeline lineno="957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></highlight></codeline>
<codeline lineno="960"><highlight class="normal">isSpace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x20:</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xD:</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xA:</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x9:</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>1<sp/>if<sp/>there&apos;s<sp/>just<sp/>optional<sp/>white<sp/>space<sp/>or<sp/>there&apos;s<sp/>an<sp/>S</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/><sp/>followed<sp/>by<sp/>name=val.</highlight></codeline>
<codeline lineno="974"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal">parsePseudoAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**namePtr,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**nameEndPtr,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**valPtr,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**nextTokPtr)</highlight></codeline>
<codeline lineno="983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>open;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>*namePtr<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isSpace(toAscii(enc,<sp/>ptr,<sp/>end)))<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isSpace(toAscii(enc,<sp/>ptr,<sp/>end)));</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>*namePtr<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>*namePtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>toAscii(enc,<sp/>ptr,<sp/>end);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="ascii_8h_1ad7ea2ad83ed704212715d0a462aa5b1f" kindref="member">ASCII_EQUALS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nameEndPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSpace(c))<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nameEndPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isSpace(c<sp/>=<sp/>toAscii(enc,<sp/>ptr,<sp/>end)));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/><ref refid="ascii_8h_1ad7ea2ad83ed704212715d0a462aa5b1f" kindref="member">ASCII_EQUALS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>*namePtr)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>toAscii(enc,<sp/>ptr,<sp/>end);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isSpace(c))<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>toAscii(enc,<sp/>ptr,<sp/>end);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/><ref refid="ascii_8h_1aaf89231a846238d46d1a0fb43d1054bb" kindref="member">ASCII_QUOT</ref><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/><ref refid="ascii_8h_1a4bb124685ad706620073760ee4baea5e" kindref="member">ASCII_APOS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>open<sp/>=<sp/>(char)c;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>*valPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;<sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>toAscii(enc,<sp/>ptr,<sp/>end);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>open)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/><ref refid="ascii_8h_1a76cb409bf2d31112b1bec0056271e3ce" kindref="member">ASCII_z</ref>)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(<ref refid="ascii_8h_1a6ccdee41712ed103021e82cb944f47e6" kindref="member">ASCII_A</ref><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/><ref refid="ascii_8h_1a282e9a9765b0ae5f0a4aa813c3a4932c" kindref="member">ASCII_Z</ref>)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(<ref refid="ascii_8h_1aa3f75ad2972ec8996ce5206feac0e52c" kindref="member">ASCII_0</ref><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/><ref refid="ascii_8h_1a7d01b034dc2511a5f77fdd9a742b10f2" kindref="member">ASCII_9</ref>)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/><ref refid="ascii_8h_1a584b2296dd870333777d2ff1c5d45497" kindref="member">ASCII_PERIOD</ref></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/><ref refid="ascii_8h_1a477410df758e7858569b97de6d85227d" kindref="member">ASCII_UNDERSCORE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr<sp/>+<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_version[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1afc4c9b07cf17ddde7ad6b72f362e518f" kindref="member">ASCII_v</ref>,<sp/><ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>,<sp/><ref refid="ascii_8h_1a8fdb0f1662a7d21419407645425b9cb2" kindref="member">ASCII_r</ref>,<sp/><ref refid="ascii_8h_1a41fa3e12c9ad88ad3e3b1607f553f619" kindref="member">ASCII_s</ref>,<sp/><ref refid="ascii_8h_1a0cb5b4ca514608cbb2be1e03a79dd365" kindref="member">ASCII_i</ref>,<sp/><ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>,<sp/><ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_encoding[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>,<sp/><ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>,<sp/><ref refid="ascii_8h_1a54ddf8c578a6cab1752104cdd7fc266b" kindref="member">ASCII_c</ref>,<sp/><ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>,<sp/><ref refid="ascii_8h_1a8e17b00599a99d1f4f844c3cc30fe8f0" kindref="member">ASCII_d</ref>,<sp/><ref refid="ascii_8h_1a0cb5b4ca514608cbb2be1e03a79dd365" kindref="member">ASCII_i</ref>,<sp/><ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>,<sp/><ref refid="ascii_8h_1ad79634b68e038665f021e4f2e3cab073" kindref="member">ASCII_g</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_standalone[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a41fa3e12c9ad88ad3e3b1607f553f619" kindref="member">ASCII_s</ref>,<sp/><ref refid="ascii_8h_1a49c5b42c23f03212f8ef92b46a61e2b5" kindref="member">ASCII_t</ref>,<sp/><ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref>,<sp/><ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>,<sp/><ref refid="ascii_8h_1a8e17b00599a99d1f4f844c3cc30fe8f0" kindref="member">ASCII_d</ref>,<sp/><ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref>,<sp/><ref refid="ascii_8h_1a03b9fa8c4b67d1b4e571ab27f6fa8d96" kindref="member">ASCII_l</ref>,<sp/><ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>,<sp/><ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_yes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a9af4a4295a94ce3385101c0107e542dc" kindref="member">ASCII_y</ref>,<sp/><ref refid="ascii_8h_1a8301016858372dddc6f3a8c35347af7b" kindref="member">ASCII_e</ref>,<sp/><ref refid="ascii_8h_1a41fa3e12c9ad88ad3e3b1607f553f619" kindref="member">ASCII_s</ref>,<sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_no[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a299ea59977635ad4bf1e7b1374975e69" kindref="member">ASCII_n</ref>,<sp/><ref refid="ascii_8h_1a1cda03afeda83bc6b95e9b43f5b01751" kindref="member">ASCII_o</ref>,<sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">doParseXmlDecl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*(*encodingFinder)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isGeneralTextEntity,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**badPtr,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**versionPtr,</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**versionEndPtr,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**encodingName,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>**<ref refid="structencoding" kindref="compound">encoding</ref>,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1aac81fd29c59263b77fc75a088dada810" kindref="member">standalone</ref>)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameEnd<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>ptr<sp/>+=<sp/>5<sp/>*<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>end<sp/>-=<sp/>2<sp/>*<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsePseudoAttribute(enc,<sp/>ptr,<sp/>end,<sp/>&amp;name,<sp/>&amp;nameEnd,<sp/>&amp;val,<sp/>&amp;ptr)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!name)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="xmltok_8h_1ac2c80c413865548d9640ede78d9b684a" kindref="member">XmlNameMatchesAscii</ref>(enc,<sp/>name,<sp/>nameEnd,<sp/>KW_version))<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isGeneralTextEntity)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(versionPtr)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*versionPtr<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(versionEndPtr)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*versionEndPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsePseudoAttribute(enc,<sp/>ptr,<sp/>end,<sp/>&amp;name,<sp/>&amp;nameEnd,<sp/>&amp;val,<sp/>&amp;ptr))<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGeneralTextEntity)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>TextDecl<sp/>must<sp/>have<sp/>an<sp/>EncodingDecl<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8h_1ac2c80c413865548d9640ede78d9b684a" kindref="member">XmlNameMatchesAscii</ref>(enc,<sp/>name,<sp/>nameEnd,<sp/>KW_encoding))<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>toAscii(enc,<sp/>val,<sp/>end);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="ascii_8h_1acb0c7653dabe53da8a7fb03bcad505e7" kindref="member">ASCII_a</ref><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/><ref refid="ascii_8h_1a76cb409bf2d31112b1bec0056271e3ce" kindref="member">ASCII_z</ref>)<sp/>&amp;&amp;<sp/>!(<ref refid="ascii_8h_1a6ccdee41712ed103021e82cb944f47e6" kindref="member">ASCII_A</ref><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/><ref refid="ascii_8h_1a282e9a9765b0ae5f0a4aa813c3a4932c" kindref="member">ASCII_Z</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encodingName)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*encodingName<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*encoding<sp/>=<sp/>encodingFinder(enc,<sp/>val,<sp/>ptr<sp/>-<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsePseudoAttribute(enc,<sp/>ptr,<sp/>end,<sp/>&amp;name,<sp/>&amp;nameEnd,<sp/>&amp;val,<sp/>&amp;ptr))<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="xmltok_8h_1ac2c80c413865548d9640ede78d9b684a" kindref="member">XmlNameMatchesAscii</ref>(enc,<sp/>name,<sp/>nameEnd,<sp/>KW_standalone)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>isGeneralTextEntity)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8h_1ac2c80c413865548d9640ede78d9b684a" kindref="member">XmlNameMatchesAscii</ref>(enc,<sp/>val,<sp/>ptr<sp/>-<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>,<sp/>KW_yes))<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(standalone)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*standalone<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8h_1ac2c80c413865548d9640ede78d9b684a" kindref="member">XmlNameMatchesAscii</ref>(enc,<sp/>val,<sp/>ptr<sp/>-<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>,<sp/>KW_no))<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(standalone)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*standalone<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isSpace(toAscii(enc,<sp/>ptr,<sp/>end)))</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>enc-&gt;<ref refid="structencoding_1a8eb3388eddb82277ff63c992153f3595" kindref="member">minBytesPerChar</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>*badPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">checkCharRefNumber(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(result<sp/>&gt;&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xD8:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xD9:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDA:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDB:</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDC:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDD:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDE:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDF:</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latin1_encoding.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[result]<sp/>==<sp/><ref refid="asciitab_8h_1afd159f089697124230e66a6b8185cf6e" kindref="member">BT_NONXML</ref>)</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFF:</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0xFFFE<sp/>||<sp/>result<sp/>==<sp/>0xFFFF)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></highlight></codeline>
<codeline lineno="1193" refid="xmltok_8h_1a56e56e234fd330d912619501fcc01054" refkind="member"><highlight class="normal"><ref refid="xmltok_8c_1afb9948e7ab79ffca787166b7a2f8f7ec" kindref="member">XmlUtf8Encode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minN<sp/>is<sp/>minimum<sp/>legal<sp/>resulting<sp/>value<sp/>for<sp/>N<sp/>byte<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>min2<sp/>=<sp/>0x80,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scorealign_8cpp_1a5d0291684055264d2af8c63c6dc7cb91" kindref="member">min3</ref><sp/>=<sp/>0x800,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="http_8c_1aef32b7cd43bf4ff48b8df618df088d12" kindref="member">min4</ref><sp/>=<sp/>0x10000</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>min2)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)(c<sp/>|<sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7aa178fa0d4471a87df9f098c3d4d5bfaf" kindref="member">UTF8_cval1</ref>);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/><ref refid="scorealign_8cpp_1a5d0291684055264d2af8c63c6dc7cb91" kindref="member">min3</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)((c<sp/>&gt;&gt;<sp/>6)<sp/>|<sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ab9de40520f12e745e305de6cbaae89aa" kindref="member">UTF8_cval2</ref>);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(char)((c<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/><ref refid="http_8c_1aef32b7cd43bf4ff48b8df618df088d12" kindref="member">min4</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)((c<sp/>&gt;&gt;<sp/>12)<sp/>|<sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7ae5c645f459c8b1198b8cf357679b3e25" kindref="member">UTF8_cval3</ref>);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(char)(((c<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>(char)((c<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x110000)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(char)((c<sp/>&gt;&gt;<sp/>18)<sp/>|<sp/><ref refid="xmltok_8c_1adf764cbdea00d65edcd07bb9953ad2b7a3bb425f865be325cf7805ae568063409" kindref="member">UTF8_cval4</ref>);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(char)(((c<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>(char)(((c<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[3]<sp/>=<sp/>(char)((c<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></highlight></codeline>
<codeline lineno="1230" refid="xmltok_8h_1a502289528ab90639dc8d86376c099e23" refkind="member"><highlight class="normal"><ref refid="xmltok_8c_1adc07edbd5e6dee6d65bff7a183b54beb" kindref="member">XmlUtf16Encode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charNum,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charNum<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charNum<sp/>&lt;<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)charNum;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charNum<sp/>&lt;<sp/>0x110000)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>charNum<sp/>-=<sp/>0x10000;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)((charNum<sp/>&gt;&gt;<sp/>10)<sp/>+<sp/>0xD800);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)((charNum<sp/>&amp;<sp/>0x3FF)<sp/>+<sp/>0xDC00);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247" refid="structunknown__encoding" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>{</highlight></codeline>
<codeline lineno="1248" refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>normal;</highlight></codeline>
<codeline lineno="1249" refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" refkind="member"><highlight class="normal"><sp/><sp/>CONVERTER<sp/><ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>;</highlight></codeline>
<codeline lineno="1250" refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref>;</highlight></codeline>
<codeline lineno="1251" refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>utf16[256];</highlight></codeline>
<codeline lineno="1252" refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>utf8[256][4];</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255" refid="xmltok_8c_1acfd95318da5995d028121541e1cde260" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AS_UNKNOWN_ENCODING(enc)<sp/><sp/>((const<sp/>struct<sp/>unknown_encoding<sp/>*)<sp/>(enc))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258" refid="xmltok_8h_1a8671b08cbc73ee001e696f02404e878f" refkind="member"><highlight class="normal"><ref refid="xmltok_8c_1a8671b08cbc73ee001e696f02404e878f" kindref="member">XmlSizeOfUnknownEncoding</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref>);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">unknown_isName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*uenc<sp/>=<sp/><ref refid="xmltok_8c_1acfd95318da5995d028121541e1cde260" kindref="member">AS_UNKNOWN_ENCODING</ref>(enc);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>uenc-&gt;<ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>(uenc-&gt;<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref>,<sp/>p);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&amp;<sp/>~0xFFFF)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(namePages,<sp/>c<sp/>&gt;&gt;<sp/>8,<sp/>c<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="1274"><highlight class="normal">unknown_isNmstrt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*uenc<sp/>=<sp/><ref refid="xmltok_8c_1acfd95318da5995d028121541e1cde260" kindref="member">AS_UNKNOWN_ENCODING</ref>(enc);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>uenc-&gt;<ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>(uenc-&gt;<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref>,<sp/>p);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&amp;<sp/>~0xFFFF)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(nmstrtPages,<sp/>c<sp/>&gt;&gt;<sp/>8,<sp/>c<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6e4a6029ec5edd313bac38ae0e17db07" kindref="member">PTRFASTCALL</ref></highlight></codeline>
<codeline lineno="1284"><highlight class="normal">unknown_isInvalid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*uenc<sp/>=<sp/><ref refid="xmltok_8c_1acfd95318da5995d028121541e1cde260" kindref="member">AS_UNKNOWN_ENCODING</ref>(enc);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>uenc-&gt;<ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>(uenc-&gt;<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref>,<sp/>p);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>&amp;<sp/>~0xFFFF)<sp/>||<sp/>checkCharRefNumber(c)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="1292"><highlight class="normal">unknown_toUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*uenc<sp/>=<sp/><ref refid="xmltok_8c_1acfd95318da5995d028121541e1cde260" kindref="member">AS_UNKNOWN_ENCODING</ref>(enc);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>[<ref refid="xmltok_8h_1a8fefe7b18536c40a32b581a2f40aa2fe" kindref="member">XML_UTF8_ENCODE_MAX</ref>];</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*fromP<sp/>==<sp/>fromLim)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8<sp/>=<sp/>uenc-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)**fromP];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>*utf8++;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>uenc-&gt;<ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>(uenc-&gt;<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref>,<sp/>*fromP);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="xmltok_8c_1afb9948e7ab79ffca787166b7a2f8f7ec" kindref="member">XmlUtf8Encode</ref>(c,<sp/>buf);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>toLim<sp/>-<sp/>*toP)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>utf8<sp/>=<sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*fromP<sp/>+=<sp/>(<ref refid="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" kindref="member">AS_NORMAL_ENCODING</ref>(enc)-&gt;type[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)**fromP]</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<ref refid="utf8tab_8h_1acbaa9ddc09d5dfa628ddae9353e593b9" kindref="member">BT_LEAD2</ref><sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>toLim<sp/>-<sp/>*toP)</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*fromP)++;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/>*utf8++;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--n<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1af44f68911377fd55f6e1588b0c89b3e5" kindref="member">PTRCALL</ref></highlight></codeline>
<codeline lineno="1326"><highlight class="normal">unknown_toUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**fromP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fromLim,</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>**toP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*toLim)</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*uenc<sp/>=<sp/><ref refid="xmltok_8c_1acfd95318da5995d028121541e1cde260" kindref="member">AS_UNKNOWN_ENCODING</ref>(enc);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fromP<sp/>!=<sp/>fromLim<sp/>&amp;&amp;<sp/>*toP<sp/>!=<sp/>toLim)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>uenc-&gt;<ref refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" kindref="member">utf16</ref>[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)**fromP];</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uenc-&gt;<ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>(uenc-&gt;<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref>,<sp/>*fromP);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*fromP<sp/>+=<sp/>(<ref refid="xmltok_8c_1abff2a2011e52a0b42103850488eb5405" kindref="member">AS_NORMAL_ENCODING</ref>(enc)-&gt;type[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)**fromP]</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<ref refid="utf8tab_8h_1acbaa9ddc09d5dfa628ddae9353e593b9" kindref="member">BT_LEAD2</ref><sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*fromP)++;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>*(*toP)++<sp/>=<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*</highlight></codeline>
<codeline lineno="1346" refid="xmltok_8h_1a7bd2980a71390ec11b4039e2f10a41da" refkind="member"><highlight class="normal"><ref refid="xmltok_8c_1a7bd2980a71390ec11b4039e2f10a41da" kindref="member">XmlInitUnknownEncoding</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*table,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONVERTER<sp/><ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>,</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1a4b666535c828e23ccd16510a0a1a1943" kindref="member">userData</ref>)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunknown__encoding" kindref="compound">unknown_encoding</ref><sp/>*)mem;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(<ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref>);<sp/>i++)</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)mem)[i]<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;latin1_encoding)[i];</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>128;<sp/>i++)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latin1_encoding.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[i]<sp/>!=<sp/><ref refid="asciitab_8h_1a1b2a1f8045e06378c83325b2c3afd9ce" kindref="member">BT_OTHER</ref></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>latin1_encoding.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[i]<sp/>!=<sp/><ref refid="asciitab_8h_1afd159f089697124230e66a6b8185cf6e" kindref="member">BT_NONXML</ref></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>table[i]<sp/>!=<sp/>i)</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>table[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="utf8tab_8h_1ac17f3eb2d31f7f0c30f11086554a6b48" kindref="member">BT_MALFORM</ref>;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>shouldn&apos;t<sp/>really<sp/>get<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" kindref="member">utf16</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>-4)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<ref refid="utf8tab_8h_1acbaa9ddc09d5dfa628ddae9353e593b9" kindref="member">BT_LEAD2</ref><sp/>-<sp/>(c<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" kindref="member">utf16</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latin1_encoding.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[c]<sp/>!=<sp/><ref refid="asciitab_8h_1a1b2a1f8045e06378c83325b2c3afd9ce" kindref="member">BT_OTHER</ref></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>latin1_encoding.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[c]<sp/>!=<sp/><ref refid="asciitab_8h_1afd159f089697124230e66a6b8185cf6e" kindref="member">BT_NONXML</ref></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>i)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>latin1_encoding.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>];</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][1]<sp/>=<sp/>(char)c;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" kindref="member">utf16</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)(c<sp/>==<sp/>0<sp/>?<sp/>0xFFFF<sp/>:<sp/>c);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkCharRefNumber(c)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="asciitab_8h_1afd159f089697124230e66a6b8185cf6e" kindref="member">BT_NONXML</ref>;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>shouldn&apos;t<sp/>really<sp/>get<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" kindref="member">utf16</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;<sp/>0xFFFF)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(nmstrtPages,<sp/>c<sp/>&gt;&gt;<sp/>8,<sp/>c<sp/>&amp;<sp/>0xff))</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[i]<sp/>=<sp/><ref refid="asciitab_8h_1a51c4a6fbfc2afdbefcc4cc9dbea915f4" kindref="member">BT_NMSTRT</ref>;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref><sp/>(<ref refid="xmltok_8c_1ad84d58bf17e92b57516106f68fb4ca03" kindref="member">UCS2_GET_NAMING</ref>(namePages,<sp/>c<sp/>&gt;&gt;<sp/>8,<sp/>c<sp/>&amp;<sp/>0xff))</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[i]<sp/>=<sp/><ref refid="asciitab_8h_1a9af0393f06b4223c0e59ebff9647c26e" kindref="member">BT_NAME</ref>;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1a518fe4e08d162386bf7d4e9af22d6921" kindref="member">type</ref>[i]<sp/>=<sp/><ref refid="asciitab_8h_1a1b2a1f8045e06378c83325b2c3afd9ce" kindref="member">BT_OTHER</ref>;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[i][0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<ref refid="xmltok_8c_1afb9948e7ab79ffca787166b7a2f8f7ec" kindref="member">XmlUtf8Encode</ref>(c,<sp/>e-&gt;<ref refid="structunknown__encoding_1ae42e3f5d5f65098ea9039b2a35789184" kindref="member">utf8</ref>[i]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1a6ed1343e8621126068ba7913d187172f" kindref="member">utf16</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)c;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1addea046f1af692252868f899c0160fa7" kindref="member">userData</ref><sp/>=<sp/><ref refid="xmlparse_8c_1a4b666535c828e23ccd16510a0a1a1943" kindref="member">userData</ref>;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref><sp/>=<sp/><ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isName2<sp/>=<sp/>unknown_isName;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isName3<sp/>=<sp/>unknown_isName;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isName4<sp/>=<sp/>unknown_isName;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isNmstrt2<sp/>=<sp/>unknown_isNmstrt;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isNmstrt3<sp/>=<sp/>unknown_isNmstrt;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isNmstrt4<sp/>=<sp/>unknown_isNmstrt;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isInvalid2<sp/>=<sp/>unknown_isInvalid;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isInvalid3<sp/>=<sp/>unknown_isInvalid;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.isInvalid4<sp/>=<sp/>unknown_isInvalid;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" kindref="member">enc</ref>.utf8Convert<sp/>=<sp/>unknown_toUtf8;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" kindref="member">enc</ref>.utf16Convert<sp/>=<sp/>unknown_toUtf16;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(e-&gt;<ref refid="structunknown__encoding_1ae43fb7292b46e2baaac780e67e42fdc3" kindref="member">normal</ref>.<ref refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" kindref="member">enc</ref>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>enumeration<sp/>is<sp/>changed,<sp/>getEncodingIndex<sp/>and<sp/>encodings</highlight></codeline>
<codeline lineno="1425"><highlight class="comment">must<sp/>also<sp/>be<sp/>changed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1427" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a7ebb1f3e154cf1ec4ea6d2df2d32d7a1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a7ebb1f3e154cf1ec4ea6d2df2d32d7a1" kindref="member">UNKNOWN_ENC</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="1428" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" kindref="member">ISO_8859_1_ENC</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1429" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a27c4bf314a7c0605785316594381be58" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a27c4bf314a7c0605785316594381be58" kindref="member">US_ASCII_ENC</ref>,</highlight></codeline>
<codeline lineno="1430" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a46f663e9f48222664eee117b68c13999" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a46f663e9f48222664eee117b68c13999" kindref="member">UTF_8_ENC</ref>,</highlight></codeline>
<codeline lineno="1431" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a518bab58caf7f653a902d34c941bb790" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a518bab58caf7f653a902d34c941bb790" kindref="member">UTF_16_ENC</ref>,</highlight></codeline>
<codeline lineno="1432" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" kindref="member">UTF_16BE_ENC</ref>,</highlight></codeline>
<codeline lineno="1433" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref>,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>must<sp/>match<sp/>encodingNames<sp/>up<sp/>to<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435" refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a19e41dd21dcd20b0051b8e436501d5dc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a19e41dd21dcd20b0051b8e436501d5dc" kindref="member">NO_ENC</ref></highlight></codeline>
<codeline lineno="1436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_ISO_8859_1[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a68489bf97bcbe4a3aa8a1401e61d2122" kindref="member">ASCII_I</ref>,<sp/><ref refid="ascii_8h_1acfe36006d6c92dfcdb128500f0a6ad0e" kindref="member">ASCII_S</ref>,<sp/><ref refid="ascii_8h_1a248a5835b08a0f8d30b0ecedf06b3e67" kindref="member">ASCII_O</ref>,<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1a8e3dcbd218b807ed80fa6bc0901832a2" kindref="member">ASCII_8</ref>,<sp/><ref refid="ascii_8h_1a8e3dcbd218b807ed80fa6bc0901832a2" kindref="member">ASCII_8</ref>,<sp/><ref refid="ascii_8h_1a637b734e2cec262e80f6aa9b9071e5b3" kindref="member">ASCII_5</ref>,<sp/><ref refid="ascii_8h_1a7d01b034dc2511a5f77fdd9a742b10f2" kindref="member">ASCII_9</ref>,</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_US_ASCII[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>,<sp/><ref refid="ascii_8h_1acfe36006d6c92dfcdb128500f0a6ad0e" kindref="member">ASCII_S</ref>,<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1a6ccdee41712ed103021e82cb944f47e6" kindref="member">ASCII_A</ref>,<sp/><ref refid="ascii_8h_1acfe36006d6c92dfcdb128500f0a6ad0e" kindref="member">ASCII_S</ref>,<sp/><ref refid="ascii_8h_1a242607ac7ca46b96fb75ae67e4fb75c8" kindref="member">ASCII_C</ref>,<sp/><ref refid="ascii_8h_1a68489bf97bcbe4a3aa8a1401e61d2122" kindref="member">ASCII_I</ref>,<sp/><ref refid="ascii_8h_1a68489bf97bcbe4a3aa8a1401e61d2122" kindref="member">ASCII_I</ref>,</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_UTF_8[]<sp/>=<sp/><sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>,<sp/><ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>,<sp/><ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>,<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1a8e3dcbd218b807ed80fa6bc0901832a2" kindref="member">ASCII_8</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_UTF_16[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>,<sp/><ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>,<sp/><ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>,<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>,<sp/><ref refid="ascii_8h_1acce73753b772da2cc8f963ee8e6ec5dd" kindref="member">ASCII_6</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_UTF_16BE[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>,<sp/><ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>,<sp/><ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>,<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>,<sp/><ref refid="ascii_8h_1acce73753b772da2cc8f963ee8e6ec5dd" kindref="member">ASCII_6</ref>,<sp/><ref refid="ascii_8h_1ace767b44ac11248fd164f8faf257a70e" kindref="member">ASCII_B</ref>,<sp/><ref refid="ascii_8h_1a22b3744b31947249e04b53b8b31b52fc" kindref="member">ASCII_E</ref>,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>KW_UTF_16LE[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><ref refid="ascii_8h_1a78f3eaefc3c6537bf6e9bc56cfa8d452" kindref="member">ASCII_U</ref>,<sp/><ref refid="ascii_8h_1ad8cb2f9fefb9d0ec5818e9a63f8e2894" kindref="member">ASCII_T</ref>,<sp/><ref refid="ascii_8h_1a18e16be904a660a65852b76e93a97fee" kindref="member">ASCII_F</ref>,<sp/><ref refid="ascii_8h_1ae43d7eb20c15c3452e4d558596950db3" kindref="member">ASCII_MINUS</ref>,<sp/><ref refid="ascii_8h_1abc50b5276df6126d0f8db83a58c7f9c4" kindref="member">ASCII_1</ref>,<sp/><ref refid="ascii_8h_1acce73753b772da2cc8f963ee8e6ec5dd" kindref="member">ASCII_6</ref>,<sp/><ref refid="ascii_8h_1ab40f6bb905b73c6935fdbc17ea5787a3" kindref="member">ASCII_L</ref>,<sp/><ref refid="ascii_8h_1a22b3744b31947249e04b53b8b31b52fc" kindref="member">ASCII_E</ref>,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="expat_2lib_2internal_8h_1a6f671bc94a3e87fcef3b36ec87d34bff" kindref="member">FASTCALL</ref></highlight></codeline>
<codeline lineno="1462"><highlight class="normal">getEncodingIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>encodingNames[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>KW_ISO_8859_1,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>KW_US_ASCII,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>KW_UTF_8,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>KW_UTF_16,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>KW_UTF_16BE,</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>KW_UTF_16LE,</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a19e41dd21dcd20b0051b8e436501d5dc" kindref="member">NO_ENC</ref>;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(<ref refid="structnormal__encoding_1a2b40cfcc1100731da4ebd8568554d31e" kindref="member">int</ref>)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(encodingNames)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(encodingNames[0]));<sp/>i++)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streqci(name,<sp/>encodingNames[i]))</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a7ebb1f3e154cf1ec4ea6d2df2d32d7a1" kindref="member">UNKNOWN_ENC</ref>;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>binary<sp/>compatibility,<sp/>we<sp/>store<sp/>the<sp/>index<sp/>of<sp/>the<sp/>encoding</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/>specified<sp/>at<sp/>initialization<sp/>in<sp/>the<sp/>isUtf16<sp/>member.</highlight></codeline>
<codeline lineno="1483"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485" refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INIT_ENC_INDEX(enc)<sp/>((int)(enc)-&gt;initEnc.isUtf16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486" refid="xmltok_8c_1aca6ad11aa35dbb980967340905bac3e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_INIT_ENC_INDEX(enc,<sp/>i)<sp/>((enc)-&gt;initEnc.isUtf16<sp/>=<sp/>(char)i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>what<sp/>detects<sp/>the<sp/>encoding.<sp/><sp/>encodingTable<sp/>maps<sp/>from</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"><sp/><sp/><sp/>encoding<sp/>indices<sp/>to<sp/>encodings;<sp/>INIT_ENC_INDEX(enc)<sp/>is<sp/>the<sp/>index<sp/>of</highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/><sp/><sp/>the<sp/>external<sp/>(protocol)<sp/>specified<sp/>encoding;<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"><sp/><sp/><sp/>XML_CONTENT_STATE<sp/>if<sp/>we&apos;re<sp/>parsing<sp/>an<sp/>external<sp/>text<sp/>entity,<sp/>and</highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/><sp/>XML_PROLOG_STATE<sp/>otherwise.</highlight></codeline>
<codeline lineno="1493"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal">initScan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*encodingTable,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_i_n_i_t___e_n_c_o_d_i_n_g" kindref="compound">INIT_ENCODING</ref><sp/>*enc,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state,</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**nextTokPtr)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>**encPtr;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1ae7e1bec48067fc1eb0f6e0c698774178" kindref="member">XML_TOK_NONE</ref>;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>encPtr<sp/>=<sp/>enc-&gt;<ref refid="struct_i_n_i_t___e_n_c_o_d_i_n_g_1a88e7b26311a762f388a855e3fbc794f3" kindref="member">encPtr</ref>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>+<sp/>1<sp/>==<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>a<sp/>single<sp/>byte<sp/>available<sp/>for<sp/>auto-detection<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XML_DTD<sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>well-formed<sp/>document<sp/>entity<sp/>must<sp/>have<sp/>more<sp/>than<sp/>one<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>!=<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1a9a7922389e85b2c2fa93f3641d354bd9" kindref="member">XML_TOK_PARTIAL</ref>;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>so<sp/>we&apos;re<sp/>parsing<sp/>an<sp/>external<sp/>text<sp/>entity...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>UTF-16<sp/>was<sp/>externally<sp/>specified,<sp/>then<sp/>we<sp/>need<sp/>at<sp/>least<sp/>2<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc))<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a518bab58caf7f653a902d34c941bb790" kindref="member">UTF_16_ENC</ref>:</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref>:</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" kindref="member">UTF_16BE_ENC</ref>:</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1a9a7922389e85b2c2fa93f3641d354bd9" kindref="member">XML_TOK_PARTIAL</ref>;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*ptr)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFE:</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFF:</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xEF:<sp/></highlight><highlight class="comment">/*<sp/>possibly<sp/>first<sp/>byte<sp/>of<sp/>UTF-8<sp/>BOM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" kindref="member">ISO_8859_1_ENC</ref></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x00:</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x3C:</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1a9a7922389e85b2c2fa93f3641d354bd9" kindref="member">XML_TOK_PARTIAL</ref>;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)ptr[0]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)ptr[1])<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFEFF:</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" kindref="member">ISO_8859_1_ENC</ref></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" kindref="member">UTF_16BE_ENC</ref>];</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1afc08ba6ab1f33a9382cf313ea32786e3" kindref="member">XML_TOK_BOM</ref>;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>00<sp/>3C<sp/>is<sp/>handled<sp/>in<sp/>the<sp/>default<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x3C00:</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" kindref="member">UTF_16BE_ENC</ref></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a518bab58caf7f653a902d34c941bb790" kindref="member">UTF_16_ENC</ref>)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref>];</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1aeea3db72246c2b1a44e1247062ba1645" kindref="member">XmlTok</ref>(*encPtr,<sp/>state,<sp/>ptr,<sp/>end,<sp/>nextTokPtr);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xFFFE:</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" kindref="member">ISO_8859_1_ENC</ref></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref>];</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1afc08ba6ab1f33a9382cf313ea32786e3" kindref="member">XML_TOK_BOM</ref>;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xEFBB:</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Maybe<sp/>a<sp/>UTF-8<sp/>BOM<sp/>(EF<sp/>BB<sp/>BF)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there&apos;s<sp/>an<sp/>explicitly<sp/>specified<sp/>(external)<sp/>encoding</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>ISO-8859-1<sp/>or<sp/>some<sp/>flavour<sp/>of<sp/>UTF-16</highlight></codeline>
<codeline lineno="1565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>this<sp/>is<sp/>an<sp/>external<sp/>text<sp/>entity,</highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>don&apos;t<sp/>look<sp/>for<sp/>the<sp/>BOM,</highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>because<sp/>it<sp/>might<sp/>be<sp/>a<sp/>legal<sp/>data.</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/><ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a2f5e6cab5c293aa8f8f7587e7857b02d" kindref="member">ISO_8859_1_ENC</ref><sp/>||<sp/>e<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" kindref="member">UTF_16BE_ENC</ref></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>e<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref><sp/>||<sp/>e<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a518bab58caf7f653a902d34c941bb790" kindref="member">UTF_16_ENC</ref>)</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>+<sp/>2<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1a9a7922389e85b2c2fa93f3641d354bd9" kindref="member">XML_TOK_PARTIAL</ref>;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)ptr[2]<sp/>==<sp/>0xBF)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*nextTokPtr<sp/>=<sp/>ptr<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a46f663e9f48222664eee117b68c13999" kindref="member">UTF_8_ENC</ref>];</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1afc08ba6ab1f33a9382cf313ea32786e3" kindref="member">XML_TOK_BOM</ref>;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>isn&apos;t<sp/>a<sp/>legal<sp/>data<sp/>character.<sp/>Furthermore<sp/>a<sp/>document</highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity<sp/>can<sp/>only<sp/>start<sp/>with<sp/>ASCII<sp/>characters.<sp/><sp/>So<sp/>the<sp/>only</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way<sp/>this<sp/>can<sp/>fail<sp/>to<sp/>be<sp/>big-endian<sp/>UTF-16<sp/>if<sp/>it<sp/>it&apos;s<sp/>an</highlight></codeline>
<codeline lineno="1588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>external<sp/>parsed<sp/>general<sp/>entity<sp/>that&apos;s<sp/>labelled<sp/>as</highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF-16LE.</highlight></codeline>
<codeline lineno="1590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref><sp/>&amp;&amp;<sp/><ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)<sp/>==<sp/><ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref>)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5a8399af631a29e3f4e74df22504d45b5a" kindref="member">UTF_16BE_ENC</ref>];</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1aeea3db72246c2b1a44e1247062ba1645" kindref="member">XmlTok</ref>(*encPtr,<sp/>state,<sp/>ptr,<sp/>end,<sp/>nextTokPtr);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>could<sp/>recover<sp/>here<sp/>in<sp/>the<sp/>case:</highlight></codeline>
<codeline lineno="1598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>parsing<sp/>an<sp/>external<sp/>entity</highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>second<sp/>byte<sp/>is<sp/>0</highlight></codeline>
<codeline lineno="1600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>no<sp/>externally<sp/>specified<sp/>encoding</highlight></codeline>
<codeline lineno="1601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>no<sp/>encoding<sp/>declaration</highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>assuming<sp/>UTF-16LE.<sp/><sp/>But<sp/>we<sp/>don&apos;t,<sp/>because<sp/>this<sp/>would<sp/>mean<sp/>when</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>presented<sp/>just<sp/>with<sp/>a<sp/>single<sp/>byte,<sp/>we<sp/>couldn&apos;t<sp/>reliably<sp/>determine</highlight></codeline>
<codeline lineno="1604"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whether<sp/>we<sp/>needed<sp/>further<sp/>bytes.</highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/><ref refid="xmltok_8h_1a286768b60261f6abe90b4b17c2e98f00" kindref="member">XML_CONTENT_STATE</ref>)</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a99fb83031ce9923c84392b4e92f956b5abda1f037886224aa8e5bc5a235d8f4ec" kindref="member">UTF_16LE_ENC</ref>];</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1aeea3db72246c2b1a44e1247062ba1645" kindref="member">XmlTok</ref>(*encPtr,<sp/>state,<sp/>ptr,<sp/>end,<sp/>nextTokPtr);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>*encPtr<sp/>=<sp/>encodingTable[<ref refid="xmltok_8c_1a68f7c1c3da15a1bb3844eb28bc572907" kindref="member">INIT_ENC_INDEX</ref>(enc)];</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xmltok_8h_1aeea3db72246c2b1a44e1247062ba1645" kindref="member">XmlTok</ref>(*encPtr,<sp/>state,<sp/>ptr,<sp/>end,<sp/>nextTokPtr);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619" refid="xmltok_8c_1a3e797486ea8dd3e564d65a537c67f0c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS(x)<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620" refid="xmltok_8c_1ab6aec1346fb6c7b2733f0f73c9536ad2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ns(x)<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="xmltok_8c_1a07cab1fdd4935685d882c7ff421935a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XML_TOK_NS_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok__ns_8c" kindref="compound">xmltok_ns.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>XML_TOK_NS_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XML_NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS(x)<sp/>x<sp/>##<sp/>NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ns(x)<sp/>x<sp/>##<sp/>_ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XML_TOK_NS_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmltok__ns_8c" kindref="compound">xmltok_ns.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>XML_TOK_NS_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><ref refid="xmltok_8h_1aee948c65d72033eb1b3559778c5a0e56" kindref="member">XmlInitUnknownEncodingNS</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*table,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONVERTER<sp/><ref refid="structunknown__encoding_1a7af8f173c0112ce63f8965acda5a7bda" kindref="member">convert</ref>,</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1a4b666535c828e23ccd16510a0a1a1943" kindref="member">userData</ref>)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><ref refid="structencoding" kindref="compound">ENCODING</ref><sp/>*enc<sp/>=<sp/><ref refid="xmltok_8c_1a7bd2980a71390ec11b4039e2f10a41da" kindref="member">XmlInitUnknownEncoding</ref>(mem,<sp/>table,<sp/>convert,<sp/>userData);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnormal__encoding" kindref="compound">normal_encoding</ref><sp/>*)enc)-&gt;type[<ref refid="ascii_8h_1aa13140b716dfb153353b2bf8be77d3f5" kindref="member">ASCII_COLON</ref>]<sp/>=<sp/><ref refid="xmltok_8c_1ac4d6338aebdfb87cb31abe1e438521b5" kindref="member">BT_COLON</ref>;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnormal__encoding_1afcba6d820c9fd4fb570ea9e905cc366f" kindref="member">enc</ref>;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>XML_NS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/lib/xmltok.c"/>
  </compounddef>
</doxygen>
