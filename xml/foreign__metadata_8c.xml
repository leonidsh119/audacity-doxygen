<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="foreign__metadata_8c" kind="file" language="C++">
    <compoundname>foreign_metadata.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="assert_8h" local="yes">FLAC/assert.h</includes>
    <includes local="yes">FLAC/metadata.h</includes>
    <includes refid="alloc_8h" local="yes">share/alloc.h</includes>
    <includes refid="libflac_2include_2share_2compat_8h" local="yes">share/compat.h</includes>
    <includes refid="foreign__metadata_8h" local="yes">foreign_metadata.h</includes>
    <incdepgraph>
      <node id="7549">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c</label>
        <link refid="foreign_metadata.c"/>
        <childnode refid="7550" relation="include">
        </childnode>
        <childnode refid="7551" relation="include">
        </childnode>
        <childnode refid="7552" relation="include">
        </childnode>
        <childnode refid="7553" relation="include">
        </childnode>
        <childnode refid="7554" relation="include">
        </childnode>
        <childnode refid="7555" relation="include">
        </childnode>
        <childnode refid="7557" relation="include">
        </childnode>
        <childnode refid="7564" relation="include">
        </childnode>
      </node>
      <node id="7564">
        <label>foreign_metadata.h</label>
        <link refid="foreign__metadata_8h"/>
        <childnode refid="7554" relation="include">
        </childnode>
        <childnode refid="7565" relation="include">
        </childnode>
        <childnode refid="7557" relation="include">
        </childnode>
      </node>
      <node id="7559">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="7560" relation="include">
        </childnode>
        <childnode refid="7561" relation="include">
        </childnode>
        <childnode refid="7552" relation="include">
        </childnode>
      </node>
      <node id="7563">
        <label>stdarg.h</label>
      </node>
      <node id="7566">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="7567" relation="include">
        </childnode>
      </node>
      <node id="7568">
        <label>FLAC/format.h</label>
      </node>
      <node id="7567">
        <label>stdint.h</label>
      </node>
      <node id="7551">
        <label>stdlib.h</label>
      </node>
      <node id="7553">
        <label>FLAC/assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="7561">
        <label>alloca.h</label>
      </node>
      <node id="7554">
        <label>FLAC/metadata.h</label>
      </node>
      <node id="7556">
        <label>limits.h</label>
      </node>
      <node id="7560">
        <label>MacTypes.h</label>
      </node>
      <node id="7552">
        <label>string.h</label>
      </node>
      <node id="7562">
        <label>utime.h</label>
      </node>
      <node id="7555">
        <label>share/alloc.h</label>
        <link refid="alloc_8h"/>
        <childnode refid="7556" relation="include">
        </childnode>
        <childnode refid="7551" relation="include">
        </childnode>
        <childnode refid="7557" relation="include">
        </childnode>
      </node>
      <node id="7558">
        <label>unistd.h</label>
      </node>
      <node id="7565">
        <label>utils.h</label>
        <link refid="libflac_2src_2flac_2utils_8h"/>
        <childnode refid="7566" relation="include">
        </childnode>
        <childnode refid="7568" relation="include">
        </childnode>
        <childnode refid="7550" relation="include">
        </childnode>
      </node>
      <node id="7557">
        <label>share/compat.h</label>
        <link refid="libflac_2include_2share_2compat_8h"/>
        <childnode refid="7558" relation="include">
        </childnode>
        <childnode refid="7559" relation="include">
        </childnode>
        <childnode refid="7562" relation="include">
        </childnode>
        <childnode refid="7563" relation="include">
        </childnode>
      </node>
      <node id="7550">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="foreign__metadata_8c_1abb702d8b501669a23aa0ab3b281b9384" prot="public" static="no">
        <name>min</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((x)&lt;(y)?(x):(y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="36" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="foreign__metadata_8c_1a5e871fcb8b72399fdbf8a0e315cbbc00" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* FLAC__FOREIGN_METADATA_APPLICATION_ID[3]</definition>
        <argsstring>[3]</argsstring>
        <name>FLAC__FOREIGN_METADATA_APPLICATION_ID</name>
        <initializer>= { &quot;aiff&quot; , &quot;riff&quot;, &quot;w64 &quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="39" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="foreign__metadata_8c_1a5853eeb3c81a3461e8ad446e9356ba54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
        <definition>static FLAC__uint32 unpack32be_</definition>
        <argsstring>(const FLAC__byte *b)</argsstring>
        <name>unpack32be_</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="41" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a9ac8f38ea227a9fd24e7d718833ed76b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
        <definition>static FLAC__uint32 unpack32le_</definition>
        <argsstring>(const FLAC__byte *b)</argsstring>
        <name>unpack32le_</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="46" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a11d69507e308f7e466d52168eb2ee61a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
        <definition>static FLAC__uint64 unpack64le_</definition>
        <argsstring>(const FLAC__byte *b)</argsstring>
        <name>unpack64le_</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="51" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a874b834025941c7e3d6b05783a3afc91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool copy_data_</definition>
        <argsstring>(FILE *fin, FILE *fout, size_t size, const char **error, const char *const read_error, const char *const write_error)</argsstring>
        <name>copy_data_</name>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
          <declname>read_error</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
          <declname>write_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="57" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="57" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1ac449917cede29e42ade7ee278aaaa5d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool append_block_</definition>
        <argsstring>(foreign_metadata_t *fm, FLAC__off_t offset, FLAC__uint32 size, const char **error)</argsstring>
        <name>append_block_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="76" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="76" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1ad550bfb85b0b514b6792b6e741796eba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool read_from_aiff_</definition>
        <argsstring>(foreign_metadata_t *fm, FILE *f, const char **error)</argsstring>
        <name>read_from_aiff_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="90" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="90" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a1e040e77d9ced958667e8aab64ce394a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool read_from_wave_</definition>
        <argsstring>(foreign_metadata_t *fm, FILE *f, const char **error)</argsstring>
        <name>read_from_wave_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="181" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="181" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a8e8e4cbf9d3a01e8a37b2b515468b15d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool read_from_wave64_</definition>
        <argsstring>(foreign_metadata_t *fm, FILE *f, const char **error)</argsstring>
        <name>read_from_wave64_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="326" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="326" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a34c944a71af8a47e25134c39feeef9f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool write_to_flac_</definition>
        <argsstring>(foreign_metadata_t *fm, FILE *fin, FILE *fout, FLAC__Metadata_SimpleIterator *it, const char **error)</argsstring>
        <name>write_to_flac_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="414" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="414" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a64a6f2802daa48d24cc226c78cd2c744" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool read_from_flac_</definition>
        <argsstring>(foreign_metadata_t *fm, FILE *f, FLAC__Metadata_SimpleIterator *it, const char **error)</argsstring>
        <name>read_from_flac_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="470" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="470" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a46a60eaa569a42dcd1d4844e3fd7ec8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool write_to_iff_</definition>
        <argsstring>(foreign_metadata_t *fm, FILE *fin, FILE *fout, FLAC__off_t offset1, FLAC__off_t offset2, FLAC__off_t offset3, const char **error)</argsstring>
        <name>write_to_iff_</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset1</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset2</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset3</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="640" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="640" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a7172ae91e16bcc8267d949d425683839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
        <definition>foreign_metadata_t* flac__foreign_metadata_new</definition>
        <argsstring>(foreign_block_type_t type)</argsstring>
        <name>flac__foreign_metadata_new</name>
        <param>
          <type><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587" kindref="member">foreign_block_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="683" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="683" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a69f5cf0a80acf6f60c192250ee5e9a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void flac__foreign_metadata_delete</definition>
        <argsstring>(foreign_metadata_t *fm)</argsstring>
        <name>flac__foreign_metadata_delete</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="694" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="694" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1ab64357f90fbb73986e76c8897a89a3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool flac__foreign_metadata_read_from_aiff</definition>
        <argsstring>(foreign_metadata_t *fm, const char *filename, const char **error)</argsstring>
        <name>flac__foreign_metadata_read_from_aiff</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="703" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="703" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1adb091d1f824d6aed87113669ddb6e588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool flac__foreign_metadata_read_from_wave</definition>
        <argsstring>(foreign_metadata_t *fm, const char *filename, const char **error)</argsstring>
        <name>flac__foreign_metadata_read_from_wave</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="716" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="716" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a14eec4ce7a9354b4f726fa52d4f812bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool flac__foreign_metadata_read_from_wave64</definition>
        <argsstring>(foreign_metadata_t *fm, const char *filename, const char **error)</argsstring>
        <name>flac__foreign_metadata_read_from_wave64</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="729" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="729" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1ab44bbed523118b973d769a667a61e053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool flac__foreign_metadata_write_to_flac</definition>
        <argsstring>(foreign_metadata_t *fm, const char *infilename, const char *outfilename, const char **error)</argsstring>
        <name>flac__foreign_metadata_write_to_flac</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>infilename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>outfilename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="742" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="742" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1ab0ea284a7cc6a33e5d9549e2f524157b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool flac__foreign_metadata_read_from_flac</definition>
        <argsstring>(foreign_metadata_t *fm, const char *filename, const char **error)</argsstring>
        <name>flac__foreign_metadata_read_from_flac</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="774" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="774" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="foreign__metadata_8c_1a0a75d51ecb706c0247bed26050035e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool flac__foreign_metadata_write_to_iff</definition>
        <argsstring>(foreign_metadata_t *fm, const char *infilename, const char *outfilename, FLAC__off_t offset1, FLAC__off_t offset2, FLAC__off_t offset3, const char **error)</argsstring>
        <name>flac__foreign_metadata_write_to_iff</name>
        <param>
          <type><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref> *</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>infilename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>outfilename</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset1</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset2</declname>
        </param>
        <param>
          <type><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref></type>
          <declname>offset3</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" line="799" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c" bodystart="799" bodyend="816"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>flac<sp/>-<sp/>Command-line<sp/>FLAC<sp/>encoder/decoder</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2009<sp/><sp/>Josh<sp/>Coalson</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/><sp/>Xiph.Org<sp/>Foundation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>FILE<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>calloc()<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>memcmp()<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assert_8h" kindref="compound">FLAC/assert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FLAC/metadata.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="alloc_8h" kindref="compound">share/alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2include_2share_2compat_8h" kindref="compound">share/compat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="foreign__metadata_8h" kindref="compound">foreign_metadata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="foreign__metadata_8c_1abb702d8b501669a23aa0ab3b281b9384" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>min(x,y)<sp/>((x)&lt;(y)?(x):(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FLAC__FOREIGN_METADATA_APPLICATION_ID[3]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;aiff&quot;</highlight><highlight class="normal"><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;riff&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w64<sp/>&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>unpack32be_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[0]&lt;&lt;24)<sp/>+<sp/>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[1]&lt;&lt;16)<sp/>+<sp/>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[2]&lt;&lt;8)<sp/>+<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[3];</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>unpack32le_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[0]<sp/>+<sp/>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[1]&lt;&lt;8)<sp/>+<sp/>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[2]&lt;&lt;16)<sp/>+<sp/>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)b[3]&lt;&lt;24);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>unpack64le_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[0]<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[1]&lt;&lt;8)<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[2]&lt;&lt;16)<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[3]&lt;&lt;24)<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[4]&lt;&lt;32)<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[5]&lt;&lt;40)<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[6]&lt;&lt;48)<sp/>+<sp/>((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)b[7]&lt;&lt;56);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copies<sp/>&apos;size&apos;<sp/>bytes<sp/>from<sp/>file<sp/>&apos;fin&apos;<sp/>to<sp/>&apos;fout&apos;,<sp/>filling<sp/>in<sp/>*error<sp/>with<sp/>&apos;read_error&apos;<sp/>or<sp/>&apos;write_error&apos;<sp/>as<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy_data_(FILE<sp/>*fin,<sp/>FILE<sp/>*fout,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>read_error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>write_error)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[4096];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>left;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(left<sp/>=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;<sp/>left<sp/>&gt;<sp/>0;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>need<sp/>=<sp/><ref refid="foreign__metadata_8c_1abb702d8b501669a23aa0ab3b281b9384" kindref="member">min</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>left);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer,<sp/>1,<sp/>need,<sp/>fin)<sp/>&lt;<sp/>need)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)<sp/>*<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref><sp/>=<sp/>read_error;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fwrite(buffer,<sp/>1,<sp/>need,<sp/>fout)<sp/>&lt;<sp/>need)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)<sp/>*<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref><sp/>=<sp/>write_error;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>-=<sp/>need;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>append_block_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structforeign__block__t" kindref="compound">foreign_block_t</ref><sp/>*fb<sp/>=<sp/>safe_realloc_muladd2_(fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structforeign__block__t" kindref="compound">foreign_block_t</ref>),<sp/></highlight><highlight class="comment">/*times<sp/>(*/</highlight><highlight class="normal">fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>,<sp/></highlight><highlight class="comment">/*+*/</highlight><highlight class="normal">1</highlight><highlight class="comment">/*)*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fb)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fb[fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>].<ref refid="structforeign__block__t_1aa63608223c494402e8b4e08f13aee83f" kindref="member">offset</ref><sp/>=<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fb[fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>].<ref refid="structforeign__block__t_1a6aba5c004554c4f1a0a273ac202f071d" kindref="member">size</ref><sp/>=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>++;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref><sp/>=<sp/>fb;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>read_from_aiff_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[12];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/>eof_offset;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((offset<sp/>=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ftello()<sp/>error<sp/>(001)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer,<sp/>1,<sp/>12,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>&lt;<sp/>12<sp/>||<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;FORM&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>||<sp/>(memcmp(buffer+8,<sp/></highlight><highlight class="stringliteral">&quot;AIFF&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>&amp;&amp;<sp/>memcmp(buffer+8,<sp/></highlight><highlight class="stringliteral">&quot;AIFC&quot;</highlight><highlight class="normal">,<sp/>4)))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>FORM<sp/>layout<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/>12,<sp/>error))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>eof_offset<sp/>=<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)8<sp/>+<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)unpack32be_(buffer+4);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!feof(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((offset<sp/>=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ftello()<sp/>error<sp/>(003)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((size<sp/>=<sp/>fread(buffer,<sp/>1,<sp/>8,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>feof(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file<sp/>(004)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>unpack32be_(buffer+4);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>pad<sp/>byte<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size++;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;COMM&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>multiple<sp/>\&quot;COMM\&quot;<sp/>chunks<sp/>(005)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>\&quot;SSND\&quot;<sp/>chunk<sp/>before<sp/>\&quot;COMM\&quot;<sp/>chunk<sp/>(006)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;SSND&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>multiple<sp/>\&quot;SSND\&quot;<sp/>chunks<sp/>(007)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>\&quot;SSND\&quot;<sp/>chunk<sp/>before<sp/>\&quot;COMM\&quot;<sp/>chunk<sp/>(008)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>#offset<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer+8,<sp/>1,<sp/>4,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>&lt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file<sp/>(009)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a3ac3ad5aa6de385e40fd26a6d50a9480" kindref="member">ssnd_offset_size</ref><sp/>=<sp/>unpack32be_(buffer+8);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/>-4,<sp/>SEEK_CUR)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>seek<sp/>error<sp/>(010)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>For<sp/>SSND<sp/>we<sp/>ignore<sp/>the<sp/>blockSize<sp/>and<sp/>are<sp/>not<sp/>saving<sp/>any</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>unaligned<sp/>part<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>chunk.<sp/><sp/>In<sp/>retrospect<sp/>it<sp/>is<sp/>pretty</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pointless<sp/>to<sp/>save<sp/>the<sp/>unaligned<sp/>data<sp/>before<sp/>the<sp/>PCM<sp/>but<sp/>now<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>done<sp/>and<sp/>cast<sp/>in<sp/>stone.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/>8<sp/>+<sp/>(memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;SSND&quot;</highlight><highlight class="normal">,<sp/>4)?<sp/>size<sp/>:<sp/>8<sp/>+<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a3ac3ad5aa6de385e40fd26a6d50a9480" kindref="member">ssnd_offset_size</ref>),<sp/>error))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>to<sp/>next<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/>size,<sp/>SEEK_CUR)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>seek<sp/>error<sp/>(011)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eof_offset<sp/>!=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>unexpected<sp/>EOF<sp/>(012)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>missing<sp/>\&quot;COMM\&quot;<sp/>chunk<sp/>(013)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>missing<sp/>\&quot;SSND\&quot;<sp/>chunk<sp/>(014)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>read_from_wave_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[12];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/>eof_offset<sp/>=<sp/>-1,<sp/>ds64_data_size<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((offset<sp/>=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ftello()<sp/>error<sp/>(001)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer,<sp/>1,<sp/>12,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>&lt;<sp/>12<sp/>||<sp/>(memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;RIFF&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>&amp;&amp;<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;RF64&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>||<sp/>memcmp(buffer+8,<sp/></highlight><highlight class="stringliteral">&quot;WAVE&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>RIFF<sp/>layout<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;RF64&quot;</highlight><highlight class="normal">,<sp/>4))</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RF64<sp/>is<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>compile<sp/>(r00)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/>12,<sp/>error))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>||<sp/>unpack32le_(buffer+4)<sp/>!=<sp/>0xffffffffu)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eof_offset<sp/>=<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)8<sp/>+<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)unpack32le_(buffer+4);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!feof(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((offset<sp/>=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ftello()<sp/>error<sp/>(003)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((size<sp/>=<sp/>fread(buffer,<sp/>1,<sp/>8,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>feof(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file<sp/>(004)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>unpack32le_(buffer+4);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>pad<sp/>byte<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;fmt<sp/>&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>multiple<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunks<sp/>(005)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(006)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>multiple<sp/>\&quot;data\&quot;<sp/>chunks<sp/>(007)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(008)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref><sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>file:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>(r01)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/>8<sp/>+<sp/>(memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>4)?<sp/>size<sp/>:<sp/>0),<sp/>error))</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>ds64<sp/>chunk<sp/>if<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref><sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>buffer2[7*4];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;ds64&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>file:<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>does<sp/>not<sp/>immediately<sp/>follow<sp/>\&quot;WAVE\&quot;<sp/>marker<sp/>(r02)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unpack<sp/>the<sp/>size<sp/>again<sp/>since<sp/>we<sp/>don&apos;t<sp/>want<sp/>the<sp/>padding<sp/>byte<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>unpack32le_(buffer+4);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer2))<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>file:<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>size<sp/>is<sp/>&lt;<sp/>28<sp/>(r03)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer2))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RF64<sp/>file<sp/>has<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>with<sp/>extra<sp/>size<sp/>table,<sp/>which<sp/>is<sp/>not<sp/>currently<sp/>supported<sp/>(r04)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer2,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer2),<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer2))<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>EOF<sp/>reading<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>data<sp/>in<sp/>RF64<sp/>file<sp/>(r05)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds64_data_size<sp/>=<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)unpack64le_(buffer2+8);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ds64_data_size<sp/>==<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)(-1))<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RF64<sp/>file<sp/>has<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>with<sp/>data<sp/>size<sp/>==<sp/>-1<sp/>(r08)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>pad<sp/>byte<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ds64_data_size<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds64_data_size++;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@@@<sp/>[2^63<sp/>limit]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ds64_data_size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RF64<sp/>file<sp/>too<sp/>large<sp/>(r09)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unpack32le_(buffer2+24))<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RF64<sp/>file<sp/>has<sp/>\&quot;ds64\&quot;<sp/>chunk<sp/>with<sp/>extra<sp/>size<sp/>table,<sp/>which<sp/>is<sp/>not<sp/>currently<sp/>supported<sp/>(r06)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eof_offset<sp/>=<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)8<sp/>+<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)unpack64le_(buffer2);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@@@<sp/>[2^63<sp/>limit]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)unpack64le_(buffer2)<sp/>&lt;<sp/>0<sp/>||<sp/>eof_offset<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RF64<sp/>file<sp/>too<sp/>large<sp/>(r07)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>to<sp/>next<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/>!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>&amp;&amp;<sp/>unpack32le_(buffer+4)<sp/>==<sp/>0xffffffffu)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/>ds64_data_size,<sp/>SEEK_CUR)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>file:<sp/>seek<sp/>error<sp/>(r10)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/>size,<sp/>SEEK_CUR)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>seek<sp/>error<sp/>(009)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/>eof_offset<sp/>==<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)(-1))<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>file:<sp/>all<sp/>RIFF<sp/>sizes<sp/>are<sp/>-1<sp/>(r11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eof_offset<sp/>!=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>unexpected<sp/>EOF<sp/>(010)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>missing<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(011)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>missing<sp/>\&quot;data\&quot;<sp/>chunk<sp/>(012)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>read_from_wave64_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[40];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/>eof_offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((offset<sp/>=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ftello()<sp/>error<sp/>(001)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(buffer,<sp/>1,<sp/>40,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>&lt;<sp/>40<sp/>||</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RIFF<sp/>GUID<sp/>66666972-912E-11CF-A5D6-28DB04C10000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\x72\x69\x66\x66\x2E\x91\xCF\x11\xA5\xD6\x28\xDB\x04\xC1\x00\x00&quot;</highlight><highlight class="normal">,<sp/>16)<sp/>||</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>WAVE<sp/>GUID<sp/>65766177-ACF3-11D3-8CD1-00C04F8EDB8A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcmp(buffer+24,<sp/></highlight><highlight class="stringliteral">&quot;\x77\x61\x76\x65\xF3\xAC\xD3\x11\x8C\xD1\x00\xC0\x4F\x8E\xDB\x8A&quot;</highlight><highlight class="normal">,<sp/>16)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>Wave64<sp/>layout<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Wave64<sp/>is<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>compile<sp/>(r00)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/>40,<sp/>error))</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>eof_offset<sp/>=<sp/>(<ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref>)unpack64le_(buffer+16);<sp/></highlight><highlight class="comment">/*@@@<sp/>[2^63<sp/>limit]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!feof(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((offset<sp/>=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ftello()<sp/>error<sp/>(003)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((size<sp/>=<sp/>fread(buffer,<sp/>1,<sp/>24,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>&lt;<sp/>24)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>feof(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file<sp/>(004)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>unpack64le_(buffer+16);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>pad<sp/>bytes<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>7)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>(size+7)<sp/>&amp;<sp/>(~((<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref>)7));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fmt<sp/>GUID<sp/>20746D66-ACF3-11D3-8CD1-00C04F8EDB8A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\x66\x6D\x74\x20\xF3\xAC\xD3\x11\x8C\xD1\x00\xC0\x4F\x8E\xDB\x8A&quot;</highlight><highlight class="normal">,<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>multiple<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunks<sp/>(005)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(006)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>data<sp/>GUID<sp/>61746164-ACF3-11D3-8CD1-00C04F8EDB8A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\x64\x61\x74\x61\xF3\xAC\xD3\x11\x8C\xD1\x00\xC0\x4F\x8E\xDB\x8A&quot;</highlight><highlight class="normal">,<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>multiple<sp/>\&quot;data\&quot;<sp/>chunks<sp/>(007)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(008)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\x64\x61\x74\x61\xF3\xAC\xD3\x11\x8C\xD1\x00\xC0\x4F\x8E\xDB\x8A&quot;</highlight><highlight class="normal">,<sp/>16)?<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)size<sp/>:<sp/>16+8,<sp/>error))</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>to<sp/>next<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/>size-24,<sp/>SEEK_CUR)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>seek<sp/>error<sp/>(009)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eof_offset<sp/>!=<sp/>ftello(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>))<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>unexpected<sp/>EOF<sp/>(010)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>missing<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(011)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>missing<sp/>\&quot;data\&quot;<sp/>chunk<sp/>(012)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>write_to_flac_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/>FILE<sp/>*fin,<sp/>FILE<sp/>*fout,<sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[4];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ID_LEN<sp/>=<sp/><ref refid="group__flac__format_1ga8a1d1839a9e22692dfeaf9fce9cb9991" kindref="member">FLAC__STREAM_METADATA_APPLICATION_ID_LEN</ref>/8;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer)<sp/>&gt;=<sp/>ID_LEN);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(block_num<sp/>&lt;<sp/>fm-&gt;num_blocks)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>next<sp/>matching<sp/>padding<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>even<sp/>on<sp/>the<sp/>first<sp/>chunk&apos;s<sp/>loop<sp/>there<sp/>will<sp/>be<sp/>a<sp/>skippable<sp/>STREAMINFO<sp/>block,<sp/>on<sp/>subsequent<sp/>loops<sp/>we<sp/>are<sp/>first<sp/>moving<sp/>past<sp/>the<sp/>PADDING<sp/>we<sp/>just<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" kindref="member">FLAC__metadata_simple_iterator_next</ref>(it))<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>matching<sp/>PADDING<sp/>block<sp/>found<sp/>(004)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="group__flac__metadata__level1_1ga4649a49d230ac8bfc3ec88f5196205bb" kindref="member">FLAC__metadata_simple_iterator_get_block_type</ref>(it)<sp/>!=<sp/><ref refid="group__flac__format_1ggac71714ba8ddbbd66d26bb78a427fac01a6dcb741fc0aef389580f110e88beb896" kindref="member">FLAC__METADATA_TYPE_PADDING</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__flac__metadata__level1_1gaad69b5d6c58c48e08dcfb3f1018c2602" kindref="member">FLAC__metadata_simple_iterator_get_block_length</ref>(it)<sp/>!=<sp/>ID_LEN+fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[block_num].<ref refid="structforeign__block__t_1a6aba5c004554c4f1a0a273ac202f071d" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PADDING<sp/>block<sp/>with<sp/>wrong<sp/>size<sp/>found<sp/>(005)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transfer<sp/>chunk<sp/>into<sp/>APPLICATION<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>set<sp/>up<sp/>the<sp/>file<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fin,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[block_num].<ref refid="structforeign__block__t_1aa63608223c494402e8b4e08f13aee83f" kindref="member">offset</ref>,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(006)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fout,<sp/><ref refid="group__flac__metadata__level1_1ga46e158a3f70c0e39db9c68a9ff9a2621" kindref="member">FLAC__metadata_simple_iterator_get_block_offset</ref>(it),<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(007)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/><ref refid="group__flac__format_1ggac71714ba8ddbbd66d26bb78a427fac01a2b287a22a1ac9440b309127884c8d41b" kindref="member">FLAC__METADATA_TYPE_APPLICATION</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__flac__metadata__level1_1ga4dd81539fb698163209d05af13a2ec3c" kindref="member">FLAC__metadata_simple_iterator_is_last</ref>(it))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>|=<sp/>0x80;<sp/></highlight><highlight class="comment">/*MAGIC<sp/>number*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fwrite(buffer,<sp/>1,<sp/>1,<sp/>fout)<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(008)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>stays<sp/>the<sp/>same<sp/>so<sp/>skip<sp/>over<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fout,<sp/><ref refid="group__flac__format_1ga4e565861db32c57c2f6bc71e9f1207a9" kindref="member">FLAC__STREAM_METADATA_LENGTH_LEN</ref>/8,<sp/>SEEK_CUR)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(009)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>APPLICATION<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buffer,<sp/>FLAC__FOREIGN_METADATA_APPLICATION_ID[fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref>],<sp/>ID_LEN);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fwrite(buffer,<sp/>1,<sp/>ID_LEN,<sp/>fout)<sp/>&lt;<sp/>ID_LEN)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(010)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transfer<sp/>the<sp/>foreign<sp/>metadata<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!copy_data_(fin,<sp/>fout,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[block_num].<ref refid="structforeign__block__t_1a6aba5c004554c4f1a0a273ac202f071d" kindref="member">size</ref>,<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(011)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(012)&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_num++;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>read_from_flac_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[4],<sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[12];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>type_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ds64_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(<ref refid="group__flac__format_1ga8a1d1839a9e22692dfeaf9fce9cb9991" kindref="member">FLAC__STREAM_METADATA_APPLICATION_ID_LEN</ref><sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)*8);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" kindref="member">FLAC__metadata_simple_iterator_next</ref>(it))<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__flac__metadata__level1_1ga4649a49d230ac8bfc3ec88f5196205bb" kindref="member">FLAC__metadata_simple_iterator_get_block_type</ref>(it)<sp/>!=<sp/><ref refid="group__flac__format_1ggac71714ba8ddbbd66d26bb78a427fac01a2b287a22a1ac9440b309127884c8d41b" kindref="member">FLAC__METADATA_TYPE_APPLICATION</ref>)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__flac__metadata__level1_1gaf2db2a96f7c60100d620a2eefb8360bc" kindref="member">FLAC__metadata_simple_iterator_get_application_id</ref>(it,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FLAC__metadata_simple_iterator_get_application_id()<sp/>error<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(memcmp(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>FLAC__FOREIGN_METADATA_APPLICATION_ID[fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref>],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/><ref refid="group__flac__metadata__level1_1ga46e158a3f70c0e39db9c68a9ff9a2621" kindref="member">FLAC__metadata_simple_iterator_get_block_offset</ref>(it);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>over<sp/>header<sp/>and<sp/>app<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>(<ref refid="group__flac__format_1ga52249514c52427990483b9f5a0ca7f93" kindref="member">FLAC__STREAM_METADATA_IS_LAST_LEN</ref><sp/>+<sp/><ref refid="group__flac__format_1ga3804c687f8aef9c26369a63dd0a6b55c" kindref="member">FLAC__STREAM_METADATA_TYPE_LEN</ref><sp/>+<sp/><ref refid="group__flac__format_1ga4e565861db32c57c2f6bc71e9f1207a9" kindref="member">FLAC__STREAM_METADATA_LENGTH_LEN</ref>)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(id);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>look<sp/>for<sp/>format<sp/>or<sp/>audio<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/>offset,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>error<sp/>(003)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer,<sp/>1,<sp/>4,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>error<sp/>(004)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref><sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>first<sp/>block?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>=<sp/>0<sp/>==<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;RF64&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>==<sp/><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587a2fb0609ccd573e1d79c30949baf0a216" kindref="member">FOREIGN_BLOCK_TYPE__RIFF</ref><sp/>&amp;&amp;<sp/>(0<sp/>==<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;RIFF&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>||<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref>))</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>==<sp/><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587aecef34d78173f70b528406222415d421" kindref="member">FOREIGN_BLOCK_TYPE__WAVE64</ref><sp/>&amp;&amp;<sp/>0<sp/>==<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;riff&quot;</highlight><highlight class="normal">,<sp/>4))<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>first<sp/>4<sp/>bytes<sp/>instead<sp/>of<sp/>whole<sp/>GUID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>==<sp/><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587a07f7895fe9ea7dc417a15202edd84d27" kindref="member">FOREIGN_BLOCK_TYPE__AIFF</ref><sp/>&amp;&amp;<sp/>0<sp/>==<sp/>memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;FORM&quot;</highlight><highlight class="normal">,<sp/>4))</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>foreign<sp/>metadata<sp/>found,<sp/>may<sp/>need<sp/>newer<sp/>FLAC<sp/>decoder<sp/>(005)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!type_found)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>protection:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>foreign<sp/>metadata<sp/>found,<sp/>may<sp/>need<sp/>newer<sp/>FLAC<sp/>decoder<sp/>(006)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>==<sp/><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587a2fb0609ccd573e1d79c30949baf0a216" kindref="member">FOREIGN_BLOCK_TYPE__RIFF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;fmt<sp/>&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>metadata:<sp/>multiple<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunks<sp/>(007)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>metadata:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(008)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>metadata:<sp/>multiple<sp/>\&quot;data\&quot;<sp/>chunks<sp/>(009)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>metadata:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(010)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;ds64&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>metadata:<sp/>second<sp/>chunk<sp/>is<sp/>not<sp/>\&quot;ds64\&quot;<sp/>(011)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds64_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>==<sp/><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587aecef34d78173f70b528406222415d421" kindref="member">FOREIGN_BLOCK_TYPE__WAVE64</ref>)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;fmt<sp/>&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>first<sp/>4<sp/>bytes<sp/>instead<sp/>of<sp/>whole<sp/>GUID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>metadata:<sp/>multiple<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunks<sp/>(012)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>metadata:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(013)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>first<sp/>4<sp/>bytes<sp/>instead<sp/>of<sp/>whole<sp/>GUID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>metadata:<sp/>multiple<sp/>\&quot;data\&quot;<sp/>chunks<sp/>(014)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>metadata:<sp/>\&quot;data\&quot;<sp/>chunk<sp/>before<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(015)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>==<sp/><ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587a07f7895fe9ea7dc417a15202edd84d27" kindref="member">FOREIGN_BLOCK_TYPE__AIFF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;COMM&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>metadata:<sp/>multiple<sp/>\&quot;COMM\&quot;<sp/>chunks<sp/>(016)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>metadata:<sp/>\&quot;SSND\&quot;<sp/>chunk<sp/>before<sp/>\&quot;COMM\&quot;<sp/>chunk<sp/>(017)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!memcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;SSND&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>metadata:<sp/>multiple<sp/>\&quot;SSND\&quot;<sp/>chunks<sp/>(018)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>metadata:<sp/>\&quot;SSND\&quot;<sp/>chunk<sp/>before<sp/>\&quot;COMM\&quot;<sp/>chunk<sp/>(019)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref><sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a6854978c03874ceb004b3e88959b8018" kindref="member">num_blocks</ref>;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>SSND<sp/>offset<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fread(buffer+4,<sp/>1,<sp/>8,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>error<sp/>(020)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a3ac3ad5aa6de385e40fd26a6d50a9480" kindref="member">ssnd_offset_size</ref><sp/>=<sp/>unpack32be_(buffer+8);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>protection:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>foreign<sp/>metadata<sp/>found,<sp/>may<sp/>need<sp/>newer<sp/>FLAC<sp/>decoder<sp/>(021)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!append_block_(fm,<sp/>offset,<sp/><ref refid="group__flac__metadata__level1_1gaad69b5d6c58c48e08dcfb3f1018c2602" kindref="member">FLAC__metadata_simple_iterator_get_block_length</ref>(it)-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>error))</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!type_found)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>foreign<sp/>metadata<sp/>found<sp/>(022)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>&amp;&amp;<sp/>!ds64_found)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>RF64<sp/>file:<sp/>second<sp/>chunk<sp/>is<sp/>not<sp/>\&quot;ds64\&quot;<sp/>(023)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref>==<ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587a2fb0609ccd573e1d79c30949baf0a216" kindref="member">FOREIGN_BLOCK_TYPE__RIFF</ref>?<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>missing<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(024)&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref>==<ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587aecef34d78173f70b528406222415d421" kindref="member">FOREIGN_BLOCK_TYPE__WAVE64</ref>?<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>missing<sp/>\&quot;fmt<sp/>\&quot;<sp/>chunk<sp/>(025)&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>missing<sp/>\&quot;COMM\&quot;<sp/>chunk<sp/>(026)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref>==<ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587a2fb0609ccd573e1d79c30949baf0a216" kindref="member">FOREIGN_BLOCK_TYPE__RIFF</ref>?<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>WAVE<sp/>file:<sp/>missing<sp/>\&quot;data\&quot;<sp/>chunk<sp/>(027)&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref>==<ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587aecef34d78173f70b528406222415d421" kindref="member">FOREIGN_BLOCK_TYPE__WAVE64</ref>?<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>Wave64<sp/>file:<sp/>missing<sp/>\&quot;data\&quot;<sp/>chunk<sp/>(028)&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>AIFF<sp/>file:<sp/>missing<sp/>\&quot;SSND\&quot;<sp/>chunk<sp/>(029)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>write_to_iff_(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/>FILE<sp/>*fin,<sp/>FILE<sp/>*fout,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/>offset1,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/>offset2,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/>offset3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fout,<sp/>offset1,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>write<sp/>first<sp/>(RIFF/RF64/FORM)<sp/>chunk,<sp/>or<sp/>ds64<sp/>chunk<sp/>in<sp/>the<sp/>case<sp/>of<sp/>RF64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref>?2:1;<sp/>i<sp/>&lt;<sp/>fm-&gt;format_block;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fin,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[i].<ref refid="structforeign__block__t_1aa63608223c494402e8b4e08f13aee83f" kindref="member">offset</ref>,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(003)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!copy_data_(fin,<sp/>fout,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[i].<ref refid="structforeign__block__t_1a6aba5c004554c4f1a0a273ac202f071d" kindref="member">size</ref>,<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(004)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(005)&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fout,<sp/>offset2,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(006)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a33ea5938474710ede5dbc6764304bc3b" kindref="member">format_block</ref>+1;<sp/>i<sp/>&lt;<sp/>fm-&gt;audio_block;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fin,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[i].<ref refid="structforeign__block__t_1aa63608223c494402e8b4e08f13aee83f" kindref="member">offset</ref>,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(007)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!copy_data_(fin,<sp/>fout,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[i].<ref refid="structforeign__block__t_1a6aba5c004554c4f1a0a273ac202f071d" kindref="member">size</ref>,<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(008)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(009)&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fout,<sp/>offset3,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(010)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a2227965751ca2a45da38db2815e83ce0" kindref="member">audio_block</ref>+1;<sp/>i<sp/>&lt;<sp/>fm-&gt;num_blocks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fseeko(fin,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[i].<ref refid="structforeign__block__t_1aa63608223c494402e8b4e08f13aee83f" kindref="member">offset</ref>,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seek<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(011)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!copy_data_(fin,<sp/>fout,<sp/>fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>[i].<ref refid="structforeign__block__t_1a6aba5c004554c4f1a0a273ac202f071d" kindref="member">size</ref>,<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>failed<sp/>in<sp/>WAVE/AIFF<sp/>file<sp/>(012)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>failed<sp/>in<sp/>FLAC<sp/>file<sp/>(013)&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683" refid="foreign__metadata_8h_1a7172ae91e16bcc8267d949d425683839" refkind="member"><highlight class="normal"><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*<ref refid="foreign__metadata_8c_1a7172ae91e16bcc8267d949d425683839" kindref="member">flac__foreign_metadata_new</ref>(<ref refid="foreign__metadata_8h_1adb95c116a179be8763314fa28beca587" kindref="member">foreign_block_type_t</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calloc()<sp/>to<sp/>zero<sp/>all<sp/>the<sp/>member<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>=<sp/>calloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref>),<sp/>1);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structforeign__metadata__t_1a580272758c516f16a07dd15fc754ec3e" kindref="member">type</ref><sp/>=<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structforeign__metadata__t_1a0bfa5e2f3369a58dec8df6cf67ccf593" kindref="member">is_rf64</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="foreign__metadata_8h_1a69f5cf0a80acf6f60c192250ee5e9a08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="foreign__metadata_8c_1a69f5cf0a80acf6f60c192250ee5e9a08" kindref="member">flac__foreign_metadata_delete</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(fm-&gt;<ref refid="structforeign__metadata__t_1a07ffebed0bd84bda92cc9bde6b2216fd" kindref="member">blocks</ref>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(fm);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="foreign__metadata_8h_1ab64357f90fbb73986e76c8897a89a3a2" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="foreign__metadata_8c_1ab64357f90fbb73986e76c8897a89a3a2" kindref="member">flac__foreign_metadata_read_from_aiff</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**error)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!f)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>AIFF<sp/>file<sp/>for<sp/>reading<sp/>(000)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>read_from_aiff_(fm,<sp/>f,<sp/>error);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(f);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716" refid="foreign__metadata_8h_1adb091d1f824d6aed87113669ddb6e588" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="foreign__metadata_8c_1adb091d1f824d6aed87113669ddb6e588" kindref="member">flac__foreign_metadata_read_from_wave</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**error)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!f)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>WAVE<sp/>file<sp/>for<sp/>reading<sp/>(000)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>read_from_wave_(fm,<sp/>f,<sp/>error);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(f);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="foreign__metadata_8h_1a14eec4ce7a9354b4f726fa52d4f812bf" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="foreign__metadata_8c_1a14eec4ce7a9354b4f726fa52d4f812bf" kindref="member">flac__foreign_metadata_read_from_wave64</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**error)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!f)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>Wave64<sp/>file<sp/>for<sp/>reading<sp/>(000)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>read_from_wave64_(fm,<sp/>f,<sp/>error);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(f);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="foreign__metadata_8h_1ab44bbed523118b973d769a667a61e053" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="foreign__metadata_8c_1ab44bbed523118b973d769a667a61e053" kindref="member">flac__foreign_metadata_write_to_flac</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*infilename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outfilename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**error)</highlight></codeline>
<codeline lineno="743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fin,<sp/>*fout;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*it<sp/>=<sp/><ref refid="group__flac__metadata__level1_1ga5b32f4eba211e05727428e9080f4e393" kindref="member">FLAC__metadata_simple_iterator_new</ref>();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!it)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>memory<sp/>(000)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init</ref>(it,<sp/>outfilename,<sp/></highlight><highlight class="comment">/*read_only=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*preserve_file_stats=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>initialize<sp/>iterator<sp/>(001)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(fin<sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(infilename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>WAVE/AIFF<sp/>file<sp/>for<sp/>reading<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(fout<sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(outfilename,<sp/></highlight><highlight class="stringliteral">&quot;r+b&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>FLAC<sp/>file<sp/>for<sp/>updating<sp/>(003)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fin);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>write_to_flac_(fm,<sp/>fin,<sp/>fout,<sp/>it,<sp/>error);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fin);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fout);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="foreign__metadata_8h_1ab0ea284a7cc6a33e5d9549e2f524157b" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="foreign__metadata_8c_1ab0ea284a7cc6a33e5d9549e2f524157b" kindref="member">flac__foreign_metadata_read_from_flac</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**error)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*it<sp/>=<sp/><ref refid="group__flac__metadata__level1_1ga5b32f4eba211e05727428e9080f4e393" kindref="member">FLAC__metadata_simple_iterator_new</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!it)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>memory<sp/>(000)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init</ref>(it,<sp/>filename,<sp/></highlight><highlight class="comment">/*read_only=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*preserve_file_stats=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>initialize<sp/>iterator<sp/>(001)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(f<sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>FLAC<sp/>file<sp/>for<sp/>reading<sp/>(002)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>read_from_flac_(fm,<sp/>f,<sp/>it,<sp/>error);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(it);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(f);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="foreign__metadata_8h_1a0a75d51ecb706c0247bed26050035e98" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="foreign__metadata_8c_1a0a75d51ecb706c0247bed26050035e98" kindref="member">flac__foreign_metadata_write_to_iff</ref>(<ref refid="structforeign__metadata__t" kindref="compound">foreign_metadata_t</ref><sp/>*fm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*infilename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outfilename,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/>offset1,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/>offset2,<sp/><ref refid="libflac_2include_2share_2compat_8h_1a125fb0105eee035da35c6a4999d140eb" kindref="member">FLAC__off_t</ref><sp/>offset3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**error)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fin,<sp/>*fout;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(fin<sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(infilename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>FLAC<sp/>file<sp/>for<sp/>reading<sp/>(000)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(fout<sp/>=<sp/><ref refid="libflac_2include_2share_2compat_8h_1ae07c699856df63caabff61611d79f34d" kindref="member">flac_fopen</ref>(outfilename,<sp/></highlight><highlight class="stringliteral">&quot;r+b&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>WAVE/AIFF<sp/>file<sp/>for<sp/>updating<sp/>(001)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fin);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>write_to_iff_(fm,<sp/>fin,<sp/>fout,<sp/>offset1,<sp/>offset2,<sp/>offset3,<sp/>error);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fin);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fout);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c"/>
  </compounddef>
</doxygen>
