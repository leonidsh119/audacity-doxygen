<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="port_8c" kind="file" language="C++">
    <compoundname>port.c</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="atom_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/atom.h</includes>
    <includes refid="event_8h" local="yes">lv2/lv2plug.in/ns/ext/event/event.h</includes>
    <includes refid="lilv__internal_8h" local="yes">lilv_internal.h</includes>
    <incdepgraph>
      <node id="24598">
        <label>lilv_internal.h</label>
        <link refid="lilv__internal_8h"/>
        <childnode refid="24596" relation="include">
        </childnode>
        <childnode refid="24595" relation="include">
        </childnode>
        <childnode refid="24592" relation="include">
        </childnode>
        <childnode refid="24599" relation="include">
        </childnode>
        <childnode refid="24601" relation="include">
        </childnode>
        <childnode refid="24602" relation="include">
        </childnode>
        <childnode refid="24605" relation="include">
        </childnode>
        <childnode refid="24606" relation="include">
        </childnode>
        <childnode refid="24608" relation="include">
        </childnode>
        <childnode refid="24609" relation="include">
        </childnode>
      </node>
      <node id="24604">
        <label>stdbool.h</label>
      </node>
      <node id="24603">
        <label>stdarg.h</label>
      </node>
      <node id="24607">
        <label>zix/common.h</label>
      </node>
      <node id="24600">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="24595" relation="include">
        </childnode>
      </node>
      <node id="24595">
        <label>stdint.h</label>
      </node>
      <node id="24592">
        <label>stdlib.h</label>
      </node>
      <node id="24602">
        <label>serd/serd.h</label>
        <link refid="serd_8h"/>
        <childnode refid="24603" relation="include">
        </childnode>
        <childnode refid="24596" relation="include">
        </childnode>
        <childnode refid="24595" relation="include">
        </childnode>
        <childnode refid="24591" relation="include">
        </childnode>
        <childnode refid="24604" relation="include">
        </childnode>
      </node>
      <node id="24596">
        <label>stddef.h</label>
      </node>
      <node id="24589">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="24590">
        <label>limits.h</label>
      </node>
      <node id="24605">
        <label>sord/sord.h</label>
        <link refid="sord_8h"/>
        <childnode refid="24596" relation="include">
        </childnode>
        <childnode refid="24595" relation="include">
        </childnode>
        <childnode refid="24591" relation="include">
        </childnode>
        <childnode refid="24602" relation="include">
        </childnode>
        <childnode refid="24604" relation="include">
        </childnode>
      </node>
      <node id="24611">
        <label>lv2/lv2plug.in/ns/ext/urid/urid.h</label>
        <link refid="urid_8h"/>
        <childnode refid="24595" relation="include">
        </childnode>
      </node>
      <node id="24593">
        <label>string.h</label>
      </node>
      <node id="24597">
        <label>lv2/lv2plug.in/ns/ext/event/event.h</label>
        <link refid="event_8h"/>
        <childnode refid="24595" relation="include">
        </childnode>
      </node>
      <node id="24588">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c</label>
        <link refid="port.c"/>
        <childnode refid="24589" relation="include">
        </childnode>
        <childnode refid="24590" relation="include">
        </childnode>
        <childnode refid="24591" relation="include">
        </childnode>
        <childnode refid="24592" relation="include">
        </childnode>
        <childnode refid="24593" relation="include">
        </childnode>
        <childnode refid="24594" relation="include">
        </childnode>
        <childnode refid="24597" relation="include">
        </childnode>
        <childnode refid="24598" relation="include">
        </childnode>
      </node>
      <node id="24599">
        <label>float.h</label>
        <link refid="float_8h"/>
        <childnode refid="24600" relation="include">
        </childnode>
      </node>
      <node id="24609">
        <label>lilv/lilv.h</label>
        <link refid="lilv_8h"/>
        <childnode refid="24603" relation="include">
        </childnode>
        <childnode refid="24596" relation="include">
        </childnode>
        <childnode refid="24595" relation="include">
        </childnode>
        <childnode refid="24591" relation="include">
        </childnode>
        <childnode refid="24610" relation="include">
        </childnode>
        <childnode refid="24611" relation="include">
        </childnode>
        <childnode refid="24604" relation="include">
        </childnode>
      </node>
      <node id="24608">
        <label>lilv_config.h</label>
      </node>
      <node id="24610">
        <label>lv2/lv2plug.in/ns/lv2core/lv2.h</label>
        <link refid="lv2_8h"/>
        <childnode refid="24595" relation="include">
        </childnode>
      </node>
      <node id="24594">
        <label>lv2/lv2plug.in/ns/ext/atom/atom.h</label>
        <link refid="atom_8h"/>
        <childnode refid="24595" relation="include">
        </childnode>
        <childnode refid="24596" relation="include">
        </childnode>
      </node>
      <node id="24591">
        <label>stdio.h</label>
      </node>
      <node id="24606">
        <label>zix/tree.h</label>
        <link refid="lilv_2src_2zix_2tree_8h"/>
        <childnode refid="24596" relation="include">
        </childnode>
        <childnode refid="24607" relation="include">
        </childnode>
      </node>
      <node id="24601">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="port_8c_1a46ee3bdcb6259a63d52568a6538e19b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
        <definition>LilvPort* lilv_port_new</definition>
        <argsstring>(LilvWorld *world, const SordNode *node, uint32_t index, const char *symbol)</argsstring>
        <name>lilv_port_new</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="29" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="port_8c_1ad00d48d36999bf792611b589c1f938bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void lilv_port_free</definition>
        <argsstring>(const LilvPlugin *plugin, LilvPort *port)</argsstring>
        <name>lilv_port_free</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="43" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga67b641e2002e6b68b40bd8f7049201cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_port_is_a</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port, const LilvNode *port_class)</argsstring>
        <name>lilv_port_is_a</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>port_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if a port is of a given class (input, output, audio, etc). For convenience/performance/extensibility reasons, hosts are expected to create a LilvNode for each port class they &quot;care about&quot;. Well-known type URI strings are defined (e.g. LILV_URI_INPUT_PORT) for convenience, but this function is designed so that <ref refid="namespace_lilv" kindref="compound">Lilv</ref> is usable with any port types without requiring explicit support in <ref refid="namespace_lilv" kindref="compound">Lilv</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="54" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa1c8bc52813822b3a8c72bc7c0a0d854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_port_has_property</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const LilvNode *property)</argsstring>
        <name>lilv_port_has_property</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>property_uri</declname>
          <defname>property</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a port has a certain property. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="66" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3174411c0bb8e6d0ce49c003dd841c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_port_supports_event</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const LilvNode *event)</argsstring>
        <name>lilv_port_supports_event</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>event_type</declname>
          <defname>event</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a port supports a certain event type.</para><para>More precisely, this returns true iff the port has an atom:supports or an ev:supportsEvent property with <computeroutput>event_type</computeroutput> as the value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="77" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="77" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="port_8c_1a40cf73302b9a2a09019308a9cd16afc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>static LilvNodes* lilv_port_get_value_by_node</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const SordNode *predicate)</argsstring>
        <name>lilv_port_get_value_by_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="97" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="97" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga2b4217e2ea80059580f62f163b5a2df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_port_get_node</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the RDF node of <computeroutput>port</computeroutput>.</para><para>Ports nodes may be may be <ref refid="struct_u_r_is" kindref="compound">URIs</ref> or blank nodes.</para><para><simplesect kind="return"><para>A shared node which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga60b499a485768d393e702f360b79e7f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_port_get_value</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const LilvNode *predicate)</argsstring>
        <name>lilv_port_get_value</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port analog of lilv_plugin_get_value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="115" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="115" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga478aacf9e903d75e219d8b7933033899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_port_get</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const LilvNode *predicate)</argsstring>
        <name>lilv_port_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a single property value of a port.</para><para>This is equivalent to lilv_nodes_get_first(lilv_port_get_value(...)) but is simpler to use in the common case of only caring about one value. The caller is responsible for freeing the returned node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="129" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="129" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga50b31f651dc86a9ae3f9728c24a432a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>LILV_API uint32_t lilv_port_get_index</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port)</argsstring>
        <name>lilv_port_get_index</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the index of a port. The index is only valid for the life of the plugin and may change between versions. For a stable identifier, use the symbol. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="143" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac88834a3a7d7c6fcdd706d5a92d7ec48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_port_get_symbol</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port)</argsstring>
        <name>lilv_port_get_symbol</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the symbol of a port. The &apos;symbol&apos; is a short string, a valid C identifier. Returned value is owned by <computeroutput>port</computeroutput> and must not be freed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga0ccf972acce75df5da6068bdbe76a24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_port_get_name</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port)</argsstring>
        <name>lilv_port_get_name</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a port. This is guaranteed to return the untranslated name (the doap:name in the data file without a language tag). Returned value must be freed by the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="157" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="157" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3f15f3d4e2bcfe24e8383979643fe2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API const LilvNodes* lilv_port_get_classes</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port)</argsstring>
        <name>lilv_port_get_classes</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all the classes of a port. This can be used to determine if a port is an input, output, audio, control, midi, etc, etc, though it&apos;s simpler to use lilv_port_is_a. The returned list does not include lv2:Port, which is implied. Returned value is shared and must not be destroyed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="179" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa57988fe95d1944202fe2b068788a998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_port_get_range</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, LilvNode **def, LilvNode **min, LilvNode **max)</argsstring>
        <name>lilv_port_get_range</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>deflt</declname>
          <defname>def</defname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default, minimum, and maximum values of a port.</para><para><computeroutput>def</computeroutput>, <computeroutput>min</computeroutput>, and <computeroutput>max</computeroutput> are outputs, pass pointers to uninitialized LilvNode* variables. These will be set to point at new values (which must be freed by the caller using lilv_node_free), or NULL if the value does not exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="186" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="186" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac358b3310545c99e00583696238633da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
        <definition>LILV_API LilvScalePoints* lilv_port_get_scale_points</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port)</argsstring>
        <name>lilv_port_get_scale_points</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the scale points (enumeration values) of a port. This returns a collection of &apos;interesting&apos; named values of a port (e.g. appropriate entries for a UI selector associated with this port). Returned value may be NULL if <computeroutput>port</computeroutput> has no scale points, otherwise it must be freed by caller with <ref refid="group__lilv_1gad93c3a234a5138a9b60f3666904765cf" kindref="member">lilv_scale_points_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="219" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="219" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad8fe51eccbdd394d79c4cfea4e2e31e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_port_get_properties</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port)</argsstring>
        <name>lilv_port_get_properties</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the LV2 port properties of a port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" line="255" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="255" bodyend="263"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2007-2014<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atom_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/atom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="event_8h" kindref="compound">lv2/lv2plug.in/ns/ext/event/event.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lilv__internal_8h" kindref="compound">lilv_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*</highlight></codeline>
<codeline lineno="29" refid="port_8c_1a46ee3bdcb6259a63d52568a6538e19b5" refkind="member"><highlight class="normal"><ref refid="port_8c_1a46ee3bdcb6259a63d52568a6538e19b5" kindref="member">lilv_port_new</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="structnode" kindref="compound">node</ref>,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>symbol)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/>port<sp/>=<sp/>(<ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1ab85cc3ce5e142d7141219b15353ee671" kindref="member">lilv_node_new_from_node</ref>(world,<sp/>node);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1ac9143be2e423888b95e416fbd388ab33" kindref="member">index</ref><sp/><sp/><sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a5c5c752bd0daa332344f246dab05065c" kindref="member">symbol</ref><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a5d382a2bc4ce0a4886ea332c32c357f0" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>,<sp/>symbol);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a090b8ea7e0a258563472d7ed8fe6e193" kindref="member">classes</ref><sp/>=<sp/><ref refid="collections_8c_1ad85dc561f7c943b545dafd49755a8a5c" kindref="member">lilv_nodes_new</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="port_8c_1ad00d48d36999bf792611b589c1f938bc" refkind="member"><highlight class="normal"><ref refid="port_8c_1ad00d48d36999bf792611b589c1f938bc" kindref="member">lilv_port_free</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><ref refid="namespacelv2docgen_1afc728ef34e814436971ab700cb7db3de" kindref="member">plugin</ref>,<sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/>port)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free</ref>(port-&gt;<ref refid="struct_lilv_port_impl_1a090b8ea7e0a258563472d7ed8fe6e193" kindref="member">classes</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(port-&gt;<ref refid="struct_lilv_port_impl_1a5c5c752bd0daa332344f246dab05065c" kindref="member">symbol</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(port);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__lilv_1ga67b641e2002e6b68b40bd8f7049201cd" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga67b641e2002e6b68b40bd8f7049201cd" kindref="member">lilv_port_is_a</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><ref refid="namespacelv2docgen_1afc728ef34e814436971ab700cb7db3de" kindref="member">plugin</ref>,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><sp/>port_class)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gad4848f8348d22d0cfa659ba7ed6ea1b5" kindref="member">LILV_FOREACH</ref>(nodes,<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a090b8ea7e0a258563472d7ed8fe6e193" kindref="member">classes</ref>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__lilv_1ga3fd9df99cb05f2f061233d2839e820f1" kindref="member">lilv_node_equals</ref>(<ref refid="group__lilv_1ga09442229b233f19305f8c04f9e46158c" kindref="member">lilv_nodes_get</ref>(port-&gt;<ref refid="struct_lilv_port_impl_1a090b8ea7e0a258563472d7ed8fe6e193" kindref="member">classes</ref>,<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>),<sp/>port_class))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="group__lilv_1gaa1c8bc52813822b3a8c72bc7c0a0d854" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaa1c8bc52813822b3a8c72bc7c0a0d854" kindref="member">lilv_port_has_property</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><sp/>property)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a81c6fce0807aec85ff73746b9005db5f" kindref="member">lilv_world_ask_internal</ref>(p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref>-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a7c2ba89510b1f5f19743064d50c19da0" kindref="member">lv2_portProperty</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>property-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="group__lilv_1ga3174411c0bb8e6d0ce49c003dd841c00" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga3174411c0bb8e6d0ce49c003dd841c00" kindref="member">lilv_port_supports_event</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>predicates[]<sp/>=<sp/>{<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)<ref refid="event_8h_1aece90fe3782a4cab494c5646ce0c359e" kindref="member">LV2_EVENT__supportsEvent</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)<ref refid="atom_8h_1a0575a6bf039ff39c6bf36e3f43d9f3c3" kindref="member">LV2_ATOM__supports</ref>,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>**<sp/>pred<sp/>=<sp/>predicates;<sp/>*pred;<sp/>++pred)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lilv__internal_8h_1a81c6fce0807aec85ff73746b9005db5f" kindref="member">lilv_world_ask_internal</ref>(p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref>-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>*pred),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*</highlight></codeline>
<codeline lineno="97"><highlight class="normal">lilv_port_get_value_by_node(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><sp/><sp/><ref refid="xlmath_8c_1a767c5fa064d0a1e1f8b447769f1a890b" kindref="member">predicate</ref>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1ad6757c19986471a3b01eea6ff4fff1dd" kindref="member">lilv_world_find_nodes_internal</ref>(p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref>-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicate,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="108" refid="group__lilv_1ga2b4217e2ea80059580f62f163b5a2df5" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga2b4217e2ea80059580f62f163b5a2df5" kindref="member">lilv_port_get_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/><ref refid="namespacelv2docgen_1afc728ef34e814436971ab700cb7db3de" kindref="member">plugin</ref>,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*</highlight></codeline>
<codeline lineno="115" refid="group__lilv_1ga60b499a485768d393e702f360b79e7f8" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga60b499a485768d393e702f360b79e7f8" kindref="member">lilv_port_get_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><sp/>predicate)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__lilv_1gafda5218468031732560fb468e78d18e4" kindref="member">lilv_node_is_uri</ref>(predicate))<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Predicate<sp/>`%s&apos;<sp/>is<sp/>not<sp/>a<sp/>URI\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(predicate-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lilv_port_get_value_by_node(p,<sp/>port,<sp/>predicate-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="129" refid="group__lilv_1ga478aacf9e903d75e219d8b7933033899" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga478aacf9e903d75e219d8b7933033899" kindref="member">lilv_port_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><sp/>predicate)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*<sp/>values<sp/>=<sp/><ref refid="group__lilv_1ga60b499a485768d393e702f360b79e7f8" kindref="member">lilv_port_get_value</ref>(p,<sp/>port,<sp/>predicate);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>?<sp/><ref refid="group__lilv_1gaebd31ae1b31d01968cf222fe08093c25" kindref="member">lilv_nodes_get_first</ref>(values)<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free</ref>(values);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></highlight></codeline>
<codeline lineno="143" refid="group__lilv_1ga50b31f651dc86a9ae3f9728c24a432a3" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga50b31f651dc86a9ae3f9728c24a432a3" kindref="member">lilv_port_get_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1ac9143be2e423888b95e416fbd388ab33" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="150" refid="group__lilv_1gac88834a3a7d7c6fcdd706d5a92d7ec48" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gac88834a3a7d7c6fcdd706d5a92d7ec48" kindref="member">lilv_port_get_symbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a5c5c752bd0daa332344f246dab05065c" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="157" refid="group__lilv_1ga0ccf972acce75df5da6068bdbe76a24b" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga0ccf972acce75df5da6068bdbe76a24b" kindref="member">lilv_port_get_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*<sp/>results<sp/>=<sp/>lilv_port_get_value_by_node(</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/>port,<sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1ad3613c419988aeb5285b83f37d0a4209" kindref="member">lv2_name</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>ret<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(results)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>val<sp/>=<sp/><ref refid="group__lilv_1gaebd31ae1b31d01968cf222fe08093c25" kindref="member">lilv_nodes_get_first</ref>(results);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__lilv_1ga0c32acb39dedf93c651e1468e36a0e19" kindref="member">lilv_node_is_string</ref>(val))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(val);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free</ref>(results);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1aacf7dafbc25cce690952a646f27ce0c3" kindref="member">LILV_WARNF</ref>(</highlight><highlight class="stringliteral">&quot;Plugin<sp/>&lt;%s&gt;<sp/>port<sp/>has<sp/>no<sp/>(mandatory)<sp/>doap:name\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" kindref="member">lilv_node_as_string</ref>(<ref refid="group__lilv_1gaa462f4594d361e5a79e56f70c1f04d02" kindref="member">lilv_plugin_get_uri</ref>(p)));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*</highlight></codeline>
<codeline lineno="179" refid="group__lilv_1ga3f15f3d4e2bcfe24e8383979643fe2cb" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga3f15f3d4e2bcfe24e8383979643fe2cb" kindref="member">lilv_port_get_classes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a090b8ea7e0a258563472d7ed8fe6e193" kindref="member">classes</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="group__lilv_1gaa57988fe95d1944202fe2b068788a998" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaa57988fe95d1944202fe2b068788a998" kindref="member">lilv_port_get_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*<sp/>defaults<sp/>=<sp/>lilv_port_get_value_by_node(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/>port,<sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1adfad3066e181902e87ba210a9cd23942" kindref="member">lv2_default</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*def<sp/>=<sp/>defaults</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(<ref refid="group__lilv_1gaebd31ae1b31d01968cf222fe08093c25" kindref="member">lilv_nodes_get_first</ref>(defaults))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free</ref>(defaults);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*<sp/>minimums<sp/>=<sp/>lilv_port_get_value_by_node(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/>port,<sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a62e6dab555feab7d5ecd61fbe4a782bc" kindref="member">lv2_minimum</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min<sp/>=<sp/>minimums</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(<ref refid="group__lilv_1gaebd31ae1b31d01968cf222fe08093c25" kindref="member">lilv_nodes_get_first</ref>(minimums))</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free</ref>(minimums);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*<sp/>maximums<sp/>=<sp/>lilv_port_get_value_by_node(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/>port,<sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a446f1e2be3ab278fa4e9431d343421b4" kindref="member">lv2_maximum</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*max<sp/>=<sp/>maximums</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(<ref refid="group__lilv_1gaebd31ae1b31d01968cf222fe08093c25" kindref="member">lilv_nodes_get_first</ref>(maximums))</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free</ref>(maximums);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref>*</highlight></codeline>
<codeline lineno="219" refid="group__lilv_1gac358b3310545c99e00583696238633da" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gac358b3310545c99e00583696238633da" kindref="member">lilv_port_get_scale_points</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_iter_impl" kindref="compound">SordIter</ref>*<sp/>points<sp/>=<sp/><ref refid="lilv__internal_8h_1a1c426e96d5bb76a0fdda6a7afe19a49a" kindref="member">lilv_world_query_internal</ref>(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port-&gt;<ref refid="struct_lilv_port_impl_1a70e1a3f6bc29957faff7a2d1068c1a3b" kindref="member">node</ref>-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)<ref refid="lv2_8h_1ab25eb48084762db9073f5425fd8bf7d3" kindref="member">LV2_CORE__scalePoint</ref>),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref>*<sp/>ret<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__sord_1ga287f3764973d96c2f1df566abf569f5e" kindref="member">sord_iter_end</ref>(points))</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="collections_8c_1a115607a0b582565f6ba69dbc85a6b744" kindref="member">lilv_scale_points_new</ref>();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1a6956468cfb2a38060d841422d84b72a2" kindref="member">FOREACH_MATCH</ref>(points)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/>point<sp/>=<sp/><ref refid="group__sord_1ga34db8db692181aca9ffc5506861f95cd" kindref="member">sord_iter_get_node</ref>(points,<sp/><ref refid="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" kindref="member">SORD_OBJECT</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4727d157ee7d9a0f4fa3323d5d6ad9f" kindref="member">lilv_plugin_get_unique</ref>(p,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a572c41181730cc196f6637c07f586f9f" kindref="member">rdf_value</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="_tags_8cpp_1a0a3345b0d4574d7adffe113dacd8ccec" kindref="member">label</ref><sp/>=<sp/><ref refid="lilv__internal_8h_1aa4727d157ee7d9a0f4fa3323d5d6ad9f" kindref="member">lilv_plugin_get_unique</ref>(p,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a6b919b78e4ab5180a08d08da09b021ea" kindref="member">rdfs_label</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__zix_1gabbf32f6bf3dd802fd36af7ac17cee87c" kindref="member">zix_tree_insert</ref>(</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_zix_tree_impl" kindref="compound">ZixTree</ref>*)ret,<sp/><ref refid="lilv__internal_8h_1a69418c45ff36b1acb11133c895f29996" kindref="member">lilv_scale_point_new</ref>(value,<sp/>label),<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga6450c3214e90ffffc47f756e66d66037" kindref="member">sord_iter_free</ref>(points);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(!ret<sp/>||<sp/><ref refid="group__lilv_1gae7ca543182019e98be1770f30ca3c340" kindref="member">lilv_nodes_size</ref>(ret)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*</highlight></codeline>
<codeline lineno="255" refid="group__lilv_1gad8fe51eccbdd394d79c4cfea4e2e31e3" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gad8fe51eccbdd394d79c4cfea4e2e31e3" kindref="member">lilv_port_get_properties</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_plugin_impl" kindref="compound">LilvPlugin</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_port_impl" kindref="compound">LilvPort</ref>*<sp/><sp/><sp/>port)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>pred<sp/>=<sp/><ref refid="lilv__internal_8h_1ab85cc3ce5e142d7141219b15353ee671" kindref="member">lilv_node_new_from_node</ref>(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>,<sp/>p-&gt;<ref refid="struct_lilv_plugin_impl_1ae4ce79504dd83ecc9919c54cfab37ace" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a7c2ba89510b1f5f19743064d50c19da0" kindref="member">lv2_portProperty</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref>*<sp/>ret<sp/>=<sp/><ref refid="group__lilv_1ga60b499a485768d393e702f360b79e7f8" kindref="member">lilv_port_get_value</ref>(p,<sp/>port,<sp/>pred);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(pred);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c"/>
  </compounddef>
</doxygen>
