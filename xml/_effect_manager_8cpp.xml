<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_effect_manager_8cpp" kind="file" language="C++">
    <compoundname>EffectManager.cpp</compoundname>
    <includes refid="_audacity_8h" local="yes">../Audacity.h</includes>
    <includes local="no">wx/msgdlg.h</includes>
    <includes local="no">wx/stopwatch.h</includes>
    <includes local="no">wx/tokenzr.h</includes>
    <includes refid="_experimental_8h" local="yes">../Experimental.h</includes>
    <includes refid="_effect_manager_8h" local="yes">EffectManager.h</includes>
    <incdepgraph>
      <node id="41525">
        <label>wx/choice.h</label>
      </node>
      <node id="41560">
        <label>wx/gauge.h</label>
      </node>
      <node id="41527">
        <label>wx/event.h</label>
      </node>
      <node id="41544">
        <label>audacity/ModuleInterface.h</label>
        <link refid="_module_interface_8h"/>
        <childnode refid="41531" relation="include">
        </childnode>
        <childnode refid="41533" relation="include">
        </childnode>
        <childnode refid="41545" relation="include">
        </childnode>
      </node>
      <node id="41537">
        <label>wx/cmdline.h</label>
      </node>
      <node id="41530">
        <label>audacity/EffectInterface.h</label>
        <link refid="_effect_interface_8h"/>
        <childnode refid="41531" relation="include">
        </childnode>
        <childnode refid="41533" relation="include">
        </childnode>
        <childnode refid="41534" relation="include">
        </childnode>
        <childnode refid="41535" relation="include">
        </childnode>
        <childnode refid="41526" relation="include">
        </childnode>
      </node>
      <node id="41556">
        <label>../Internat.h</label>
        <link refid="_internat_8h"/>
        <childnode refid="41532" relation="include">
        </childnode>
        <childnode refid="41529" relation="include">
        </childnode>
        <childnode refid="41557" relation="include">
        </childnode>
      </node>
      <node id="41553">
        <label>wx/wxchar.h</label>
      </node>
      <node id="41534">
        <label>audacity/ConfigInterface.h</label>
        <link refid="_config_interface_8h"/>
        <childnode refid="41531" relation="include">
        </childnode>
      </node>
      <node id="41562">
        <label>wx/utils.h</label>
      </node>
      <node id="41559">
        <label>wx/evtloop.h</label>
      </node>
      <node id="41522">
        <label>../Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="41523" relation="include">
        </childnode>
      </node>
      <node id="41555">
        <label>../Shuttle.h</label>
        <link refid="_shuttle_8h"/>
      </node>
      <node id="41538">
        <label>wx/fileconf.h</label>
      </node>
      <node id="41542">
        <label>map</label>
      </node>
      <node id="41545">
        <label>audacity/PluginInterface.h</label>
        <link refid="_plugin_interface_8h"/>
        <childnode refid="41531" relation="include">
        </childnode>
        <childnode refid="41534" relation="include">
        </childnode>
        <childnode refid="41530" relation="include">
        </childnode>
        <childnode refid="41533" relation="include">
        </childnode>
        <childnode refid="41543" relation="include">
        </childnode>
        <childnode refid="41544" relation="include">
        </childnode>
      </node>
      <node id="41561">
        <label>wx/stattext.h</label>
      </node>
      <node id="41533">
        <label>audacity/IdentInterface.h</label>
        <link refid="_ident_interface_8h"/>
        <childnode refid="41531" relation="include">
        </childnode>
      </node>
      <node id="41523">
        <label>wx/defs.h</label>
      </node>
      <node id="41539">
        <label>wx/intl.h</label>
      </node>
      <node id="41558">
        <label>../widgets/ProgressDialog.h</label>
        <link refid="_progress_dialog_8h"/>
        <childnode refid="41518" relation="include">
        </childnode>
        <childnode refid="41523" relation="include">
        </childnode>
        <childnode refid="41526" relation="include">
        </childnode>
        <childnode refid="41559" relation="include">
        </childnode>
        <childnode refid="41560" relation="include">
        </childnode>
        <childnode refid="41561" relation="include">
        </childnode>
        <childnode refid="41562" relation="include">
        </childnode>
      </node>
      <node id="41550">
        <label>wx/bmpbuttn.h</label>
      </node>
      <node id="41531">
        <label>audacity/Types.h</label>
        <link refid="include_2audacity_2_types_8h"/>
        <childnode refid="41529" relation="include">
        </childnode>
        <childnode refid="41532" relation="include">
        </childnode>
      </node>
      <node id="41540">
        <label>../PluginManager.h</label>
        <link refid="_plugin_manager_8h"/>
        <childnode refid="41523" relation="include">
        </childnode>
        <childnode refid="41541" relation="include">
        </childnode>
        <childnode refid="41538" relation="include">
        </childnode>
        <childnode refid="41529" relation="include">
        </childnode>
        <childnode refid="41542" relation="include">
        </childnode>
        <childnode refid="41530" relation="include">
        </childnode>
        <childnode refid="41543" relation="include">
        </childnode>
        <childnode refid="41544" relation="include">
        </childnode>
        <childnode refid="41545" relation="include">
        </childnode>
      </node>
      <node id="41526">
        <label>wx/dialog.h</label>
      </node>
      <node id="41517">
        <label>C:/_dev/OpenU/Audacity/audacity/src/effects/EffectManager.cpp</label>
        <link refid="EffectManager.cpp"/>
        <childnode refid="41518" relation="include">
        </childnode>
        <childnode refid="41519" relation="include">
        </childnode>
        <childnode refid="41520" relation="include">
        </childnode>
        <childnode refid="41521" relation="include">
        </childnode>
        <childnode refid="41522" relation="include">
        </childnode>
        <childnode refid="41524" relation="include">
        </childnode>
      </node>
      <node id="41524">
        <label>EffectManager.h</label>
        <link refid="_effect_manager_8h"/>
        <childnode refid="41522" relation="include">
        </childnode>
        <childnode refid="41525" relation="include">
        </childnode>
        <childnode refid="41526" relation="include">
        </childnode>
        <childnode refid="41527" relation="include">
        </childnode>
        <childnode refid="41528" relation="include">
        </childnode>
        <childnode refid="41529" relation="include">
        </childnode>
        <childnode refid="41530" relation="include">
        </childnode>
        <childnode refid="41540" relation="include">
        </childnode>
        <childnode refid="41546" relation="include">
        </childnode>
      </node>
      <node id="41535">
        <label>audacity/EffectAutomationParameters.h</label>
        <link refid="_effect_automation_parameters_8h"/>
        <childnode refid="41536" relation="include">
        </childnode>
        <childnode refid="41537" relation="include">
        </childnode>
        <childnode refid="41538" relation="include">
        </childnode>
        <childnode refid="41539" relation="include">
        </childnode>
      </node>
      <node id="41521">
        <label>wx/tokenzr.h</label>
      </node>
      <node id="41518">
        <label>../Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="41546">
        <label>Effect.h</label>
        <link refid="src_2effects_2_effect_8h"/>
        <childnode refid="41518" relation="include">
        </childnode>
        <childnode refid="41547" relation="include">
        </childnode>
        <childnode refid="41549" relation="include">
        </childnode>
        <childnode refid="41550" relation="include">
        </childnode>
        <childnode refid="41541" relation="include">
        </childnode>
        <childnode refid="41539" relation="include">
        </childnode>
        <childnode refid="41529" relation="include">
        </childnode>
        <childnode refid="41551" relation="include">
        </childnode>
        <childnode refid="41534" relation="include">
        </childnode>
        <childnode refid="41530" relation="include">
        </childnode>
        <childnode refid="41522" relation="include">
        </childnode>
        <childnode refid="41552" relation="include">
        </childnode>
        <childnode refid="41555" relation="include">
        </childnode>
        <childnode refid="41556" relation="include">
        </childnode>
        <childnode refid="41558" relation="include">
        </childnode>
      </node>
      <node id="41541">
        <label>wx/dynarray.h</label>
      </node>
      <node id="41543">
        <label>audacity/ImporterInterface.h</label>
        <link refid="_importer_interface_8h"/>
        <childnode refid="41531" relation="include">
        </childnode>
        <childnode refid="41534" relation="include">
        </childnode>
        <childnode refid="41533" relation="include">
        </childnode>
      </node>
      <node id="41529">
        <label>wx/string.h</label>
      </node>
      <node id="41528">
        <label>wx/listbox.h</label>
      </node>
      <node id="41519">
        <label>wx/msgdlg.h</label>
      </node>
      <node id="41554">
        <label>math.h</label>
      </node>
      <node id="41552">
        <label>../SelectedRegion.h</label>
        <link refid="_selected_region_8h"/>
        <childnode refid="41518" relation="include">
        </childnode>
        <childnode refid="41522" relation="include">
        </childnode>
        <childnode refid="41523" relation="include">
        </childnode>
        <childnode refid="41553" relation="include">
        </childnode>
        <childnode refid="41554" relation="include">
        </childnode>
      </node>
      <node id="41532">
        <label>wx/arrstr.h</label>
      </node>
      <node id="41551">
        <label>wx/tglbtn.h</label>
      </node>
      <node id="41547">
        <label>../MemoryX.h</label>
        <link refid="_memory_x_8h"/>
        <childnode refid="41548" relation="include">
        </childnode>
      </node>
      <node id="41549">
        <label>set</label>
      </node>
      <node id="41557">
        <label>wx/longlong.h</label>
      </node>
      <node id="41520">
        <label>wx/stopwatch.h</label>
      </node>
      <node id="41536">
        <label>locale.h</label>
      </node>
      <node id="41548">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>EffectManager.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Audacity(R)<sp/>is<sp/>copyright<sp/>(c)<sp/>1999-2008<sp/>Audacity<sp/>Team.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>License:<sp/>GPL<sp/>v2.<sp/><sp/>See<sp/>License.txt.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Audacity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/msgdlg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/stopwatch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/tokenzr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Experimental.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EXPERIMENTAL_EFFECTS_RACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;EffectRack.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_effect_manager_8h" kindref="compound">EffectManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>singleton<sp/>and<sp/>return<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Thread-safe...no<sp/>active<sp/>threading<sp/>during<sp/>construction<sp/>or<sp/>after<sp/>destruction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_effect_manager_1a6d9acb7546cc925cd8a2e9ceffa4dda0" refkind="member"><highlight class="normal"><ref refid="class_effect_manager" kindref="compound">EffectManager</ref><sp/>&amp;<sp/><ref refid="class_effect_manager_1a6d9acb7546cc925cd8a2e9ceffa4dda0" kindref="member">EffectManager::Get</ref>()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager" kindref="compound">EffectManager</ref><sp/>em;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>em;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="class_effect_manager_1ac273c81141b1f393d081202316a5500b" refkind="member"><highlight class="normal"><ref refid="class_effect_manager_1ac273c81141b1f393d081202316a5500b" kindref="member">EffectManager::EffectManager</ref>()</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Enter();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/>mRealtimeActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>mRealtimeSuspended<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLatency<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>mSkipStateFlag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EXPERIMENTAL_EFFECTS_RACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>mRack<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_effect_manager_1af1bf9209514e076eb15c5502bc668311" refkind="member"><highlight class="normal"><ref refid="class_effect_manager_1af1bf9209514e076eb15c5502bc668311" kindref="member">EffectManager::~EffectManager</ref>()</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EXPERIMENTAL_EFFECTS_RACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxWidgets<sp/>has<sp/>already<sp/>destroyed<sp/>the<sp/>rack<sp/>since<sp/>it<sp/>was<sp/>derived<sp/>from<sp/>wxFrame.<sp/>So</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>DELETE<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>EffectMap::iterator<sp/>iter<sp/>=<sp/>mHostEffects.begin();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>mHostEffects.end())</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>solely<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>Nyquist<sp/>Workbench<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>better<sp/>solution<sp/>is<sp/>devised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_effect_manager_1aed1ecc709cdbfde1b51586f1eb17f132" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/><ref refid="class_effect_manager_1aed1ecc709cdbfde1b51586f1eb17f132" kindref="member">EffectManager::RegisterEffect</ref>(<ref refid="class_effect" kindref="compound">Effect</ref><sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID<sp/>=<sp/><ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().<ref refid="class_plugin_manager_1ad58899e0639d0454b4457628aa4d7d1e" kindref="member">RegisterPlugin</ref>(f);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>mEffects[ID]<sp/>=<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ID;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>solely<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>Nyquist<sp/>Workbench<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>better<sp/>solution<sp/>is<sp/>devised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_effect_manager_1ae528afab11462141dc580d037fcd5246" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1ae528afab11462141dc580d037fcd5246" kindref="member">EffectManager::UnregisterEffect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>ID;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().<ref refid="class_plugin_manager_1a4ae6c187ec882ef03699a3b262e1d19e" kindref="member">UnregisterPlugin</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>mEffects.erase(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="class_effect_manager_1ab6ecf667e5090b89ad9da94e429d0b64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1ab6ecf667e5090b89ad9da94e429d0b64" kindref="member">EffectManager::DoEffect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxWindow<sp/>*parent,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>projectRate,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_track_list" kindref="compound">TrackList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_track_factory" kindref="compound">TrackFactory</ref><sp/>*factory,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_selected_region" kindref="compound">SelectedRegion</ref><sp/>*selectedRegion,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldPrompt<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>true<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>this-&gt;<ref refid="class_effect_manager_1a325e912e7f378e8d791a55c3304d6344" kindref="member">SetSkipStateFlag</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!effect)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EXPERIMENTAL_EFFECTS_RACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect-&gt;<ref refid="class_effect_1ab23b370c5581370daa2bcda0979dea07" kindref="member">SupportsRealtime</ref>())</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetRack()-&gt;Add(effect);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>effect-&gt;<ref refid="class_effect_1a9c556ccf9bbea664dd4540be6cf38bbe" kindref="member">DoEffect</ref>(parent,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectRate,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedRegion,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shouldPrompt);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_effect_manager_1ad287b68e3a36eaf40d5b352d80456be2" refkind="member"><highlight class="normal">wxString<sp/><ref refid="class_effect_manager_1ad287b68e3a36eaf40d5b352d80456be2" kindref="member">EffectManager::GetEffectName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().<ref refid="class_plugin_manager_1a12b9457aa92e747d0a0737716d6c91a3" kindref="member">GetName</ref>(ID);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_effect_manager_1aa2964e8a3ddadd0be23b293acfe24efe" refkind="member"><highlight class="normal">wxString<sp/><ref refid="class_effect_manager_1aa2964e8a3ddadd0be23b293acfe24efe" kindref="member">EffectManager::GetEffectIdentifier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>wxString<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref><sp/>=<sp/>(<ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().<ref refid="class_plugin_manager_1ab7b7217d4ae46e14990785d9a55d1f39" kindref="member">GetSymbol</ref>(ID));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>rid<sp/>of<sp/>leading<sp/>and<sp/>trailing<sp/>white<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>name.Trim(</highlight><highlight class="keyword">true</highlight><highlight class="normal">).Trim(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>wxEmptyString)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>wxStringTokenizer<sp/>st(name,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>wxString<sp/>id;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CamelCase<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(st.HasMoreTokens())</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxString<sp/>tok<sp/>=<sp/>st.GetNextToken();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>+=<sp/>tok.Left(1).MakeUpper()<sp/>+<sp/>tok.Mid(1).MakeLower();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="class_effect_manager_1a24aa11be46c809849f6b0774db0c80fe" refkind="member"><highlight class="normal">wxString<sp/><ref refid="class_effect_manager_1a24aa11be46c809849f6b0774db0c80fe" kindref="member">EffectManager::GetEffectDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wxString::Format(<ref refid="locale__hack_8h_1a32a3cf3d9dd914f5aeeca5423c157934" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Applied<sp/>effect:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>effect-&gt;<ref refid="class_effect_1abf4cb8b7c9b5179651dc5a5159fd168e" kindref="member">GetName</ref>().c_str());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wxEmptyString;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="class_effect_manager_1af4281ee1c6ac2c88bee247d725df517d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1af4281ee1c6ac2c88bee247d725df517d" kindref="member">EffectManager::IsHidden</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effect-&gt;<ref refid="class_effect_1a363fee112c6454244f065ab1c6582ba1" kindref="member">IsHidden</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="class_effect_manager_1a325e912e7f378e8d791a55c3304d6344" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a325e912e7f378e8d791a55c3304d6344" kindref="member">EffectManager::SetSkipStateFlag</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/>mSkipStateFlag<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="class_effect_manager_1a2e5a85abab4f1ab60542be9bd23adcd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a2e5a85abab4f1ab60542be9bd23adcd0" kindref="member">EffectManager::GetSkipStateFlag</ref>()</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSkipStateFlag;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="class_effect_manager_1a0ec15743c993dfc6fa76b0cce6e11d02" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a0ec15743c993dfc6fa76b0cce6e11d02" kindref="member">EffectManager::SupportsAutomation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_plugin_descriptor" kindref="compound">PluginDescriptor</ref><sp/>*plug<sp/>=<sp/><sp/><ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().<ref refid="class_plugin_manager_1a84b8a0e8d9af185d849d8fd9fba2d69c" kindref="member">GetPlugin</ref>(ID);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(plug)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plug-&gt;<ref refid="class_plugin_descriptor_1a0414502101fb8dc22483cc7ca1647935" kindref="member">IsEffectAutomatable</ref>();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="class_effect_manager_1ae9eae1375bbcf313398409c0b6b2b8d9" refkind="member"><highlight class="normal">wxString<sp/><ref refid="class_effect_manager_1ae9eae1375bbcf313398409c0b6b2b8d9" kindref="member">EffectManager::GetEffectParameters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxString<sp/>parms;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1a81622da3e8c117c380f61e8649744286" kindref="member">GetAutomationParameters</ref>(parms);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>effects<sp/>don&apos;t<sp/>have<sp/>automatable<sp/>parameters<sp/>and<sp/>will<sp/>not<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anything,<sp/>so<sp/>try<sp/>to<sp/>get<sp/>the<sp/>active<sp/>preset<sp/>(current<sp/>or<sp/>factory).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parms.IsEmpty())</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms<sp/>=<sp/><ref refid="class_effect_manager_1aa24cdf2e97d9f8c384205abcab30c829" kindref="member">GetDefaultPreset</ref>(ID);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parms;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wxEmptyString;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="class_effect_manager_1ada9e349c6a958b3b1ba5582f9bcee9e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1ada9e349c6a958b3b1ba5582f9bcee9e1" kindref="member">EffectManager::SetEffectParameters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/><ref refid="_reverb_8cpp_1aacc5617877d2aa4d17c729c1c8ba4eec" kindref="member">params</ref>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!effect)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_automation_parameters" kindref="compound">EffectAutomationParameters</ref><sp/>eap(params);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eap.<ref refid="class_effect_automation_parameters_1a3a33c0982f79e7ad7e7d16b3babe9b49" kindref="member">HasEntry</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Use<sp/>Preset&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effect-&gt;<ref refid="class_effect_1a47a3bc388a45655beab30c485892b88b" kindref="member">SetAutomationParameters</ref>(eap.Read(wxT(</highlight><highlight class="stringliteral">&quot;Use<sp/>Preset&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effect-&gt;<ref refid="class_effect_1a47a3bc388a45655beab30c485892b88b" kindref="member">SetAutomationParameters</ref>(params);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="class_effect_manager_1ad8718cbf87ba19fb81908796efc50f3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1ad8718cbf87ba19fb81908796efc50f3e" kindref="member">EffectManager::PromptUser</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID,<sp/>wxWindow<sp/>*parent)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>effect-&gt;<ref refid="class_effect_1a403f54cd78e36b312f994def6d390465" kindref="member">PromptUser</ref>(parent);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="class_effect_manager_1a2a20da3576fb52592ec7b4f18d7773ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a2a20da3576fb52592ec7b4f18d7773ba" kindref="member">EffectManager::HasPresets</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!effect)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effect-&gt;<ref refid="class_effect_1adaf441358264f604791374225240f823" kindref="member">GetUserPresets</ref>().GetCount()<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1a16db0079f2d96a8e4379eeec14653060" kindref="member">GetFactoryPresets</ref>().GetCount()<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1a05943c4a0907d8bb269bff25311ef276" kindref="member">HasCurrentSettings</ref>()<sp/>||</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1a7bf4a20ce3a422bba007ce57a0353eb4" kindref="member">HasFactoryDefaults</ref>();</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="class_effect_manager_1adc7c41b8f952535c7c02dd183fdf370b" refkind="member"><highlight class="normal">wxString<sp/><ref refid="class_effect_manager_1adc7c41b8f952535c7c02dd183fdf370b" kindref="member">EffectManager::GetPreset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/><ref refid="_reverb_8cpp_1aacc5617877d2aa4d17c729c1c8ba4eec" kindref="member">params</ref>,<sp/>wxWindow<sp/>*<sp/>parent)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!effect)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wxEmptyString;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_automation_parameters" kindref="compound">EffectAutomationParameters</ref><sp/>eap(params);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/>wxString<sp/>preset;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eap.<ref refid="class_effect_automation_parameters_1a3a33c0982f79e7ad7e7d16b3babe9b49" kindref="member">HasEntry</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Use<sp/>Preset&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preset<sp/>=<sp/>eap.Read(wxT(</highlight><highlight class="stringliteral">&quot;Use<sp/>Preset&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/>preset<sp/>=<sp/>effect-&gt;<ref refid="class_effect_1af370c4459498f00c3d19fe9124cd6ab8" kindref="member">GetPreset</ref>(parent,<sp/>preset);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preset.IsEmpty())</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>preset;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>eap.DeleteAll();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/>eap.Write(wxT(</highlight><highlight class="stringliteral">&quot;Use<sp/>Preset&quot;</highlight><highlight class="normal">),<sp/>preset);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/>eap.<ref refid="class_effect_automation_parameters_1a1c986c0b95abeab0e569163511926a92" kindref="member">GetParameters</ref>(preset);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>preset;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="class_effect_manager_1aa24cdf2e97d9f8c384205abcab30c829" refkind="member"><highlight class="normal">wxString<sp/><ref refid="class_effect_manager_1aa24cdf2e97d9f8c384205abcab30c829" kindref="member">EffectManager::GetDefaultPreset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!effect)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wxEmptyString;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>wxString<sp/>preset;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect-&gt;<ref refid="class_effect_1a05943c4a0907d8bb269bff25311ef276" kindref="member">HasCurrentSettings</ref>())</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preset<sp/>=<sp/>Effect::kCurrentSettingsIdent;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect-&gt;<ref refid="class_effect_1a7bf4a20ce3a422bba007ce57a0353eb4" kindref="member">HasFactoryDefaults</ref>())</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preset<sp/>=<sp/>Effect::kFactoryDefaultsIdent;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!preset.IsEmpty())</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_effect_automation_parameters" kindref="compound">EffectAutomationParameters</ref><sp/>eap;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eap.Write(wxT(</highlight><highlight class="stringliteral">&quot;Use<sp/>Preset&quot;</highlight><highlight class="normal">),<sp/>preset);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eap.<ref refid="class_effect_automation_parameters_1a1c986c0b95abeab0e569163511926a92" kindref="member">GetParameters</ref>(preset);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>preset;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="class_effect_manager_1a876762a8e2b576f424651edad9145460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a876762a8e2b576f424651edad9145460" kindref="member">EffectManager::SetBatchProcessing</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect<sp/>=<sp/>GetEffect(ID);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!effect)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1a50b511572a471486f7a48fe9c4750f96" kindref="member">SetBatchProcessing</ref>(start);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EXPERIMENTAL_EFFECTS_RACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">EffectRack<sp/>*EffectManager::GetRack()</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mRack)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EffectRack<sp/>is<sp/>constructed<sp/>with<sp/>the<sp/>current<sp/>project<sp/>as<sp/>owner,<sp/>so<sp/>safenew<sp/>is<sp/>OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRack<sp/>=<sp/><ref refid="_audacity_8h_1a5bfa31d993e8d629ec6ebdeaa41b5955" kindref="member">safenew</ref><sp/>EffectRack();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>what<sp/>I<sp/>just<sp/>commented<sp/>remains<sp/>true:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(mRack-&gt;GetParent());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRack-&gt;CenterOnParent();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mRack;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EffectManager::ShowRack()</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/>GetRack()-&gt;Show(!GetRack()-&gt;IsShown());</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a8fe4b78c9c54d66d452c8addc0e1fbd0" kindref="member">EffectManager::RealtimeSetEffects</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EffectArray<sp/>&amp;<sp/>effects)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newCount<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>effects.GetCount();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>**newEffects<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*[newCount];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>newCount;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>effects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>RealtimeProcess()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" kindref="member">RealtimeSuspend</ref>();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>any<sp/>effects<sp/>no<sp/>longer<sp/>in<sp/>the<sp/>chain<sp/>to<sp/>clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mRealtimeCount;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>NEW<sp/>chain<sp/>for<sp/>the<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>newCount;<sp/>j++)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>it<sp/>so<sp/>we&apos;re<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>==<sp/>newEffects[j])</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>have<sp/>been<sp/>in<sp/>the<sp/>NEW<sp/>chain,<sp/>so<sp/>tell<sp/>it<sp/>to<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&amp;&amp;<sp/>mRealtimeActive)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="class_effect_1aa76287edd16d8e422f4a6d5a1dc715f5" kindref="member">RealtimeFinalize</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>any<sp/>NEW<sp/>effects<sp/>to<sp/>get<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>newCount;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/>newEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>old<sp/>chain<sp/>for<sp/>the<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mRealtimeCount;<sp/>j++)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>it<sp/>so<sp/>tell<sp/>effect<sp/>to<sp/>get<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>==<sp/>mRealtimeEffects[j])</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>have<sp/>been<sp/>in<sp/>the<sp/>old<sp/>chain,<sp/>so<sp/>tell<sp/>it<sp/>to<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&amp;&amp;<sp/>mRealtimeActive)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="class_effect_1ae9d1a1da8ce1c5210b4f5688900fe68b" kindref="member">RealtimeInitialize</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>rid<sp/>of<sp/>the<sp/>old<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeEffects)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mRealtimeEffects;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>install<sp/>the<sp/>NEW<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/>mRealtimeEffects<sp/>=<sp/>newEffects;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/>mRealtimeCount<sp/>=<sp/>newCount;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>RealtimeProcess()<sp/>to,<sp/>well,<sp/>process<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a7f868e41b8a53fe8327de3e68fe7d15a" kindref="member">RealtimeResume</ref>();</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="class_effect_manager_1a76c461f437c480f9c16595831e5945cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a76c461f437c480f9c16595831e5945cd" kindref="member">EffectManager::RealtimeIsActive</ref>()</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mRealtimeEffects.GetCount()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="class_effect_manager_1ab87a420bb23b929bddc69d756df6c5a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1ab87a420bb23b929bddc69d756df6c5a9" kindref="member">EffectManager::RealtimeIsSuspended</ref>()</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mRealtimeSuspended;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="class_effect_manager_1adefa768faccde2a7c9bc7ecd1c481671" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1adefa768faccde2a7c9bc7ecd1c481671" kindref="member">EffectManager::RealtimeAddEffect</ref>(<ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>RealtimeProcess()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" kindref="member">RealtimeSuspend</ref>();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>effect<sp/>if<sp/>realtime<sp/>is<sp/>already<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeActive)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>realtime<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1ae9d1a1da8ce1c5210b4f5688900fe68b" kindref="member">RealtimeInitialize</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>required<sp/>processors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeChans.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1ae7540844fb4dd0396cdc3018609e1e6b" kindref="member">RealtimeAddProcessor</ref>(<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>mRealtimeChans[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>mRealtimeRates[i]);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>list<sp/>of<sp/>active<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/>mRealtimeEffects.Add(effect);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>RealtimeProcess()<sp/>to,<sp/>well,<sp/>process<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a7f868e41b8a53fe8327de3e68fe7d15a" kindref="member">RealtimeResume</ref>();</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="class_effect_manager_1aca31d14e3bcd1caba1b9b34b9c002029" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1aca31d14e3bcd1caba1b9b34b9c002029" kindref="member">EffectManager::RealtimeRemoveEffect</ref>(<ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>RealtimeProcess()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" kindref="member">RealtimeSuspend</ref>();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeActive)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>realtime<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effect-&gt;<ref refid="class_effect_1aa76287edd16d8e422f4a6d5a1dc715f5" kindref="member">RealtimeFinalize</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>from<sp/>list<sp/>of<sp/>active<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>mRealtimeEffects.Remove(effect);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>RealtimeProcess()<sp/>to,<sp/>well,<sp/>process<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a7f868e41b8a53fe8327de3e68fe7d15a" kindref="member">RealtimeResume</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="class_effect_manager_1a1a587e24ea7a3e80c573caa023e3e68f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a1a587e24ea7a3e80c573caa023e3e68f" kindref="member">EffectManager::RealtimeInitialize</ref>()</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>audio<sp/>thread<sp/>should<sp/>not<sp/>be<sp/>running<sp/>yet,<sp/>but<sp/>protect<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" kindref="member">RealtimeSuspend</ref>();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Re)Set<sp/>processor<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>mRealtimeChans.Clear();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/>mRealtimeRates.Clear();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RealtimeAdd/RemoveEffect()<sp/>needs<sp/>to<sp/>know<sp/>when<sp/>we&apos;re<sp/>active<sp/>so<sp/>it<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>newly<sp/>added<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/>mRealtimeActive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>each<sp/>effect<sp/>to<sp/>get<sp/>ready<sp/>for<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeInitialize();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>things<sp/>moving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a7f868e41b8a53fe8327de3e68fe7d15a" kindref="member">RealtimeResume</ref>();</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="class_effect_manager_1a949181b513b40ed61b5f20229fb94a21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a949181b513b40ed61b5f20229fb94a21" kindref="member">EffectManager::RealtimeAddProcessor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chans,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1a960ad82c3ba394a46f17f5f6146c93ea" kindref="member">rate</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeAddProcessor(group,<sp/>chans,<sp/>rate);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/>mRealtimeChans.Add(chans);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/>mRealtimeRates.Add(rate);</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="class_effect_manager_1aca93aa3f54b1b6172ce5a7f511422f80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1aca93aa3f54b1b6172ce5a7f511422f80" kindref="member">EffectManager::RealtimeFinalize</ref>()</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>nothing<sp/>is<sp/>going<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" kindref="member">RealtimeSuspend</ref>();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>now<sp/>safe<sp/>to<sp/>clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLatency<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>each<sp/>effect<sp/>to<sp/>clean<sp/>up<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeFinalize();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>processor<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>mRealtimeChans.Clear();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/>mRealtimeRates.Clear();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>longer<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/>mRealtimeActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a64c368e13a3e0ce60cb50e9a8a631e44" kindref="member">EffectManager::RealtimeSuspend</ref>()</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Enter();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>suspended...bail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeSuspended)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>that<sp/>we<sp/>aren&apos;t<sp/>going<sp/>to<sp/>be<sp/>doing<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/>mRealtimeSuspended<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>make<sp/>sure<sp/>the<sp/>effects<sp/>don&apos;t<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeSuspend();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="class_effect_manager_1a7f868e41b8a53fe8327de3e68fe7d15a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a7f868e41b8a53fe8327de3e68fe7d15a" kindref="member">EffectManager::RealtimeResume</ref>()</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Enter();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>running...bail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mRealtimeSuspended)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>effects<sp/>to<sp/>get<sp/>ready<sp/>for<sp/>more<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeResume();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>we<sp/>should<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/>mRealtimeSuspended<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>in<sp/>a<sp/>different<sp/>thread<sp/>than<sp/>the<sp/>main<sp/>GUI<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="class_effect_manager_1a6a9985dbb0d57fa33678cc8fa6f1e816" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1a6a9985dbb0d57fa33678cc8fa6f1e816" kindref="member">EffectManager::RealtimeProcessStart</ref>()</highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>ourselves<sp/>from<sp/>the<sp/>main<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Enter();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>suspended<sp/>because<sp/>of<sp/>the<sp/>audio<sp/>stream<sp/>being<sp/>paused<sp/>or<sp/>because<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>been<sp/>suspended.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mRealtimeSuspended)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;IsRealtimeActive())</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeProcessStart();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>in<sp/>a<sp/>different<sp/>thread<sp/>than<sp/>the<sp/>main<sp/>GUI<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="class_effect_manager_1ae270db06f6e8311958934d45877c6220" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_effect_manager_1ae270db06f6e8311958934d45877c6220" kindref="member">EffectManager::RealtimeProcess</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chans,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**buffers,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>numSamples)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>ourselves<sp/>from<sp/>the<sp/>main<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Enter();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>suspended<sp/>because<sp/>of<sp/>the<sp/>audio<sp/>stream<sp/>being<sp/>paused<sp/>or<sp/>because<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>been<sp/>suspended,<sp/>so<sp/>allow<sp/>the<sp/>samples<sp/>to<sp/>pass<sp/>as-is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeSuspended<sp/>||<sp/>mRealtimeEffects.IsEmpty())</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numSamples;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>when<sp/>we<sp/>started<sp/>so<sp/>we<sp/>can<sp/>calculate<sp/>the<sp/>amount<sp/>of<sp/>latency<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>introducing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/>wxMilliClock_t<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>=<sp/>wxGetLocalTimeMillis();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>in/out<sp/>buffer<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**ibuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**)<sp/>alloca(chans<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**obuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**)<sp/>alloca(chans<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>populate<sp/>the<sp/>input<sp/>with<sp/>the<sp/>buffers<sp/>we&apos;ve<sp/>been<sp/>given<sp/>while<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NEW<sp/>output<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>chans;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ibuf[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>buffers[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obuf[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>alloca(numSamples<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>call<sp/>each<sp/>effect<sp/>in<sp/>the<sp/>chain<sp/>while<sp/>swapping<sp/>buffer<sp/>pointers<sp/>to<sp/>feed<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>of<sp/>one<sp/>effect<sp/>as<sp/>the<sp/>input<sp/>to<sp/>the<sp/>next<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>called<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;IsRealtimeActive())</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeProcess(group,<sp/>chans,<sp/>ibuf,<sp/>obuf,<sp/>numSamples);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>called++;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>chans;<sp/>j++)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*temp;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>ibuf[j];</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibuf[j]<sp/>=<sp/>obuf[j];</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obuf[j]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>we&apos;re<sp/>done,<sp/>we<sp/>might<sp/>wind<sp/>up<sp/>with<sp/>the<sp/>last<sp/>effect<sp/>storing<sp/>its<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>temporary<sp/>buffers.<sp/><sp/>If<sp/>that&apos;s<sp/>the<sp/>case,<sp/>we<sp/>need<sp/>to<sp/>copy<sp/>it<sp/>over<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>caller&apos;s<sp/>buffers.<sp/><sp/>This<sp/>happens<sp/>when<sp/>the<sp/>number<sp/>of<sp/>effects<sp/>proccessed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>odd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(called<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>chans;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buffers[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>ibuf[i],<sp/>numSamples<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>latency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLatency<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(wxGetLocalTimeMillis()<sp/>-<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>).GetValue();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>wrong...needs<sp/>to<sp/>handle<sp/>tails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numSamples;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>in<sp/>a<sp/>different<sp/>thread<sp/>than<sp/>the<sp/>main<sp/>GUI<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="class_effect_manager_1ab27a583e26afb401d8977ce8b6bf70d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1ab27a583e26afb401d8977ce8b6bf70d3" kindref="member">EffectManager::RealtimeProcessEnd</ref>()</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>ourselves<sp/>from<sp/>the<sp/>main<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Enter();</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>suspended<sp/>because<sp/>of<sp/>the<sp/>audio<sp/>stream<sp/>being<sp/>paused<sp/>or<sp/>because<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>been<sp/>suspended.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mRealtimeSuspended)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>mRealtimeEffects.GetCount();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>cnt;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;IsRealtimeActive())</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mRealtimeEffects[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;RealtimeProcessEnd();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/>mRealtimeLock.Leave();</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="class_effect_manager_1adaab0f223dea9b76477caf0a94ad5d6b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_effect_manager_1adaab0f223dea9b76477caf0a94ad5d6b" kindref="member">EffectManager::GetRealtimeLatency</ref>()</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mRealtimeLatency;</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*EffectManager::GetEffect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/>ID)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>have<sp/>a<sp/>&quot;valid&quot;<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ID.IsEmpty())</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>This<sp/>is<sp/>temporary<sp/>and<sp/>should<sp/>be<sp/>redone<sp/>when<sp/>all<sp/>effects<sp/>are<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mEffects.find(ID)<sp/>==<sp/>mEffects.end())</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*effect;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>instantiate<sp/>the<sp/>effect<sp/>client<sp/>if<sp/>it<sp/>hasn&apos;t<sp/>already<sp/>been<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_effect_ident_interface" kindref="compound">EffectIdentInterface</ref><sp/>*ident<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_effect_ident_interface" kindref="compound">EffectIdentInterface</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().<ref refid="class_plugin_manager_1af8c6264ee8016634afcc85bdd25380c3" kindref="member">GetInstance</ref>(ID));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ident<sp/>&amp;&amp;<sp/>ident-&gt;<ref refid="class_effect_ident_interface_1abe06ca1e20aa66da3fb8ddd5494cbbed" kindref="member">IsLegacy</ref>())</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effect<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_effect" kindref="compound">Effect</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ident);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect<sp/>&amp;&amp;<sp/>effect-&gt;<ref refid="class_effect_1ae19dc8fba37cc1694be3de5c3aa91675" kindref="member">Startup</ref>(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mEffects[ID]<sp/>=<sp/>effect;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effect;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effect<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_effect" kindref="compound">Effect</ref>();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effect)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_effect_client_interface" kindref="compound">EffectClientInterface</ref><sp/>*client<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_effect_client_interface" kindref="compound">EffectClientInterface</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ident);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client<sp/>&amp;&amp;<sp/>effect-&gt;<ref refid="class_effect_1ae19dc8fba37cc1694be3de5c3aa91675" kindref="member">Startup</ref>(client))</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mEffects[ID]<sp/>=<sp/>effect;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHostEffects[ID]<sp/>=<sp/>effect;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effect;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>effect;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxMessageBox(wxString::Format(<ref refid="locale__hack_8h_1a32a3cf3d9dd914f5aeeca5423c157934" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>initialize<sp/>the<sp/>following<sp/>effect<sp/>failed:\n\n%s\n\nMore<sp/>information<sp/>may<sp/>be<sp/>available<sp/>in<sp/>Help-&gt;Show<sp/>Log&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>().GetName(ID).c_str()),</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="locale__hack_8h_1a32a3cf3d9dd914f5aeeca5423c157934" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Effect<sp/>failed<sp/>to<sp/>initialize&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mEffects[ID];</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="class_effect_manager_1a60f2751a059eb7091435a4be52ab6548" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/>&amp;<sp/><ref refid="class_effect_manager_1a60f2751a059eb7091435a4be52ab6548" kindref="member">EffectManager::GetEffectByIdentifier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>strTarget)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1abe9b737fcebc2b5bea606246e1eab52e" kindref="member">PluginID</ref><sp/><ref refid="namespacesmartmsgmerge_1ac2680eb7fa9c45a71b644e17efafadd9" kindref="member">empty</ref>;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strTarget<sp/>==<sp/>wxEmptyString)<sp/></highlight><highlight class="comment">//<sp/>set<sp/>GetEffectIdentifier<sp/>to<sp/>wxT(&quot;&quot;)<sp/>to<sp/>not<sp/>show<sp/>an<sp/>effect<sp/>in<sp/>Batch<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesmartmsgmerge_1ac2680eb7fa9c45a71b644e17efafadd9" kindref="member">empty</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_plugin_manager" kindref="compound">PluginManager</ref><sp/>&amp;<sp/>pm<sp/>=<sp/><ref refid="class_plugin_manager_1aeea97bed99a6b179dd87dc6fbf1086f7" kindref="member">PluginManager::Get</ref>();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_plugin_descriptor" kindref="compound">PluginDescriptor</ref><sp/>*plug<sp/>=<sp/>pm.<ref refid="class_plugin_manager_1ac48483b481a43631934346c77ca104fb" kindref="member">GetFirstPlugin</ref>(<ref refid="_plugin_manager_8h_1a54e0db21fd49ff6e0178b6ebe120a6d2ac4eafa24aaa9b42a198f51ef2aba44eb" kindref="member">PluginTypeEffect</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(plug)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_effect_manager_1aa2964e8a3ddadd0be23b293acfe24efe" kindref="member">GetEffectIdentifier</ref>(plug-&gt;<ref refid="class_plugin_descriptor_1ae5a3524df3239aa976c45a376eddbb0f" kindref="member">GetID</ref>()).IsSameAs(strTarget))</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plug-&gt;<ref refid="class_plugin_descriptor_1ae5a3524df3239aa976c45a376eddbb0f" kindref="member">GetID</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plug<sp/>=<sp/>pm.<ref refid="class_plugin_manager_1ac12e525c010e5d218ede9e2d4035e65b" kindref="member">GetNextPlugin</ref>(<ref refid="_plugin_manager_8h_1a54e0db21fd49ff6e0178b6ebe120a6d2ac4eafa24aaa9b42a198f51ef2aba44eb" kindref="member">PluginTypeEffect</ref>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesmartmsgmerge_1ac2680eb7fa9c45a71b644e17efafadd9" kindref="member">empty</ref>;;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/effects/EffectManager.cpp"/>
  </compounddef>
</doxygen>
