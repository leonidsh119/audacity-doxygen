<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct_a_v_input_format" kind="struct" language="C++" prot="public">
    <compoundname>AVInputFormat</compoundname>
    <includes refid="avformat_8h" local="no">avformat.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_a_v_input_format_1a850db3eb225e22b64f3304d72134ca0c" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* AVInputFormat::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A comma separated list of short names for the format. New names may be appended with a minor bump. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="556" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a1f67064a527941944017f1dfe65d3aa9" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* AVInputFormat::long_name</definition>
        <argsstring></argsstring>
        <name>long_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Descriptive name for the format, meant to be more human-readable than name. You should use the NULL_IF_CONFIG_SMALL() macro to define it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="563" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a1b30f6647d0c2faf38ba8786d7c3a838" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AVInputFormat::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_SHOW_IDS, AVFMT_GENERIC_INDEX, AVFMT_TS_DISCONT, AVFMT_NOBINSEARCH, AVFMT_NOGENSEARCH, AVFMT_NO_BYTE_SEEK, AVFMT_SEEK_TO_PTS. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="570" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1ae692e27e532f664f26e2501967b09eab" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* AVInputFormat::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If extensions are defined, then no probe is done. You should usually not use extension format guessing because it is not reliable enough </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="577" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a88738bb721c18df24fb4207aa2d4924a" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
        <definition>const struct AVCodecTag* const* AVInputFormat::codec_tag</definition>
        <argsstring></argsstring>
        <name>codec_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="579" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1afaac829559ad9e07618c01a51d8a4c5f" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> *</type>
        <definition>const AVClass* AVInputFormat::priv_class</definition>
        <argsstring></argsstring>
        <name>priv_class</name>
        <briefdescription>
<para><ref refid="struct_a_v_class" kindref="compound">AVClass</ref> for the private context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="581" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1ad18d8584bb0648f53a7980be8f368164" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>struct AVInputFormat* AVInputFormat::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="590" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1ac12c67e8e0b7bc2b0c26ab383d9a0c76" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AVInputFormat::raw_codec_id</definition>
        <argsstring></argsstring>
        <name>raw_codec_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw demuxers store their codec ID here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="595" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a195b445886775084b8e075062d33f09a" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AVInputFormat::priv_data_size</definition>
        <argsstring></argsstring>
        <name>priv_data_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of private data so that it can be allocated in the wrapper. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="600" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a2e272c7785fdd26895b1af1867b62567" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_probe) (AVProbeData *)</definition>
        <argsstring>)(AVProbeData *)</argsstring>
        <name>read_probe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tell if a given file has a chance of being parsed as this format. The buffer provided is guaranteed to be AVPROBE_PADDING_SIZE bytes big so you do not have to check for that unless you need more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="607" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a286d65d159570516e5ed38fcbb842d5a" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_header) (struct AVFormatContext *)</definition>
        <argsstring>)(struct AVFormatContext *)</argsstring>
        <name>read_header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the format header and initialize the <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> structure. Return 0 if OK. Only used in raw format right now. &apos;avformat_new_stream&apos; should be called to create new streams. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="614" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1aef741db739cb5af755f01f2a818b61a7" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_packet) (struct AVFormatContext *, AVPacket *pkt)</definition>
        <argsstring>)(struct AVFormatContext *, AVPacket *pkt)</argsstring>
        <name>read_packet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read one packet and put it in &apos;pkt&apos;. pts and flags are also set. &apos;avformat_new_stream&apos; can be called only if the flag AVFMTCTX_NOHEADER is used and only in the calling thread (not in a background thread). <simplesect kind="return"><para>0 on success, &lt; 0 on error. When returning an error, pkt must not have been allocated or must be freed before returning </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="625" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a725b4fbd5a28109d255d272f46efac90" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_close) (struct AVFormatContext *)</definition>
        <argsstring>)(struct AVFormatContext *)</argsstring>
        <name>read_close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the stream. The <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> and AVStreams are not freed by this function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="631" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a04a3b9ba459666bdb43628c472fa29bf" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_seek) (struct AVFormatContext *, int stream_index, int64_t timestamp, int flags)</definition>
        <argsstring>)(struct AVFormatContext *, int stream_index, int64_t timestamp, int flags)</argsstring>
        <name>read_seek</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek to a given timestamp relative to the frames in stream component stream_index. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Must not be -1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Selects which direction should be preferred if no exact match is available. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 on success (but not necessarily the new offset) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="641" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1ab071640466e60eddc4eee43385fb22fd" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref>(*</type>
        <definition>int64_t(* AVInputFormat::read_timestamp) (struct AVFormatContext *s, int stream_index, int64_t *pos, int64_t pos_limit)</definition>
        <argsstring>)(struct AVFormatContext *s, int stream_index, int64_t *pos, int64_t pos_limit)</argsstring>
        <name>read_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the next timestamp in stream[stream_index].time_base units. <simplesect kind="return"><para>the timestamp or AV_NOPTS_VALUE if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="648" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a4658ac53d7c6eaea445409010cd3b474" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_play) (struct AVFormatContext *)</definition>
        <argsstring>)(struct AVFormatContext *)</argsstring>
        <name>read_play</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start/resume playing - only meaningful if using a network-based format (RTSP). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="655" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a4e4da186feab0a2900404e77aa3631f4" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_pause) (struct AVFormatContext *)</definition>
        <argsstring>)(struct AVFormatContext *)</argsstring>
        <name>read_pause</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pause playing - only meaningful if using a network-based format (RTSP). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="661" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1abdc6865c444251c21980d8da2e087429" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::read_seek2) (struct AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)</definition>
        <argsstring>)(struct AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)</argsstring>
        <name>read_seek2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek to timestamp ts. Seeking will be done so that the point from which all active streams can be presented successfully will be closest to ts and within min/max_ts. Active streams are all streams that have <ref refid="struct_a_v_stream_1a492fcecc45dbbd8da51edd0124e9dd30" kindref="member">AVStream.discard</ref> &lt; AVDISCARD_ALL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="669" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_a_v_input_format_1a904104dc65359b800012d7abd01bb8e7" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>int(* AVInputFormat::get_device_list) (struct AVFormatContext *s, struct AVDeviceInfoList *device_list)</definition>
        <argsstring>)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list)</argsstring>
        <name>get_device_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns device list with it properties. <simplesect kind="see"><para>avdevice_list_devices() <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> more details. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="675" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="675" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1264">
        <label>AVInputFormat</label>
        <link refid="struct_a_v_input_format"/>
        <childnode refid="1265" relation="usage">
          <edgelabel>priv_class</edgelabel>
        </childnode>
        <childnode refid="1264" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="1267">
        <label>AVRational</label>
        <link refid="struct_a_v_rational"/>
      </node>
      <node id="1265">
        <label>AVClass</label>
        <link refid="struct_a_v_class"/>
        <childnode refid="1265" relation="usage">
          <edgelabel>child_class_next</edgelabel>
        </childnode>
        <childnode refid="1266" relation="usage">
          <edgelabel>option</edgelabel>
        </childnode>
      </node>
      <node id="1266">
        <label>AVOption</label>
        <link refid="struct_a_v_option"/>
        <childnode refid="1267" relation="usage">
          <edgelabel>q</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="551" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="551" bodyend="676"/>
    <listofallmembers>
      <member refid="struct_a_v_input_format_1a88738bb721c18df24fb4207aa2d4924a" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>codec_tag</name></member>
      <member refid="struct_a_v_input_format_1ae692e27e532f664f26e2501967b09eab" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>extensions</name></member>
      <member refid="struct_a_v_input_format_1a1b30f6647d0c2faf38ba8786d7c3a838" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>flags</name></member>
      <member refid="struct_a_v_input_format_1a904104dc65359b800012d7abd01bb8e7" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>get_device_list</name></member>
      <member refid="struct_a_v_input_format_1a1f67064a527941944017f1dfe65d3aa9" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>long_name</name></member>
      <member refid="struct_a_v_input_format_1a850db3eb225e22b64f3304d72134ca0c" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>name</name></member>
      <member refid="struct_a_v_input_format_1ad18d8584bb0648f53a7980be8f368164" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>next</name></member>
      <member refid="struct_a_v_input_format_1afaac829559ad9e07618c01a51d8a4c5f" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>priv_class</name></member>
      <member refid="struct_a_v_input_format_1a195b445886775084b8e075062d33f09a" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>priv_data_size</name></member>
      <member refid="struct_a_v_input_format_1ac12c67e8e0b7bc2b0c26ab383d9a0c76" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>raw_codec_id</name></member>
      <member refid="struct_a_v_input_format_1a725b4fbd5a28109d255d272f46efac90" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_close</name></member>
      <member refid="struct_a_v_input_format_1a286d65d159570516e5ed38fcbb842d5a" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_header</name></member>
      <member refid="struct_a_v_input_format_1aef741db739cb5af755f01f2a818b61a7" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_packet</name></member>
      <member refid="struct_a_v_input_format_1a4e4da186feab0a2900404e77aa3631f4" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_pause</name></member>
      <member refid="struct_a_v_input_format_1a4658ac53d7c6eaea445409010cd3b474" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_play</name></member>
      <member refid="struct_a_v_input_format_1a2e272c7785fdd26895b1af1867b62567" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_probe</name></member>
      <member refid="struct_a_v_input_format_1a04a3b9ba459666bdb43628c472fa29bf" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_seek</name></member>
      <member refid="struct_a_v_input_format_1abdc6865c444251c21980d8da2e087429" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_seek2</name></member>
      <member refid="struct_a_v_input_format_1ab071640466e60eddc4eee43385fb22fd" prot="public" virt="non-virtual"><scope>AVInputFormat</scope><name>read_timestamp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
