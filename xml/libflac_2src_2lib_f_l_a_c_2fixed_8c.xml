<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="libflac_2src_2lib_f_l_a_c_2fixed_8c" kind="file" language="C++">
    <compoundname>fixed.c</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="libflac_2include_2share_2compat_8h" local="yes">share/compat.h</includes>
    <includes refid="bitmath_8h" local="yes">private/bitmath.h</includes>
    <includes refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h" local="yes">private/fixed.h</includes>
    <includes refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h" local="yes">private/macros.h</includes>
    <includes refid="assert_8h" local="yes">FLAC/assert.h</includes>
    <incdepgraph>
      <node id="7960">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="7961" relation="include">
        </childnode>
        <childnode refid="7962" relation="include">
        </childnode>
        <childnode refid="7957" relation="include">
        </childnode>
      </node>
      <node id="7964">
        <label>stdarg.h</label>
      </node>
      <node id="7966">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="7967" relation="include">
        </childnode>
      </node>
      <node id="7973">
        <label>FLAC/format.h</label>
      </node>
      <node id="7967">
        <label>stdint.h</label>
      </node>
      <node id="7970">
        <label>private/fixed.h</label>
        <link refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h"/>
        <childnode refid="7971" relation="include">
        </childnode>
        <childnode refid="7972" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
      </node>
      <node id="7968">
        <label>FLAC/assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="7962">
        <label>alloca.h</label>
      </node>
      <node id="7974">
        <label>private/macros.h</label>
        <link refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h"/>
      </node>
      <node id="7969">
        <label>limits.h</label>
      </node>
      <node id="7961">
        <label>MacTypes.h</label>
      </node>
      <node id="7957">
        <label>string.h</label>
      </node>
      <node id="7963">
        <label>utime.h</label>
      </node>
      <node id="7972">
        <label>private/float.h</label>
        <link refid="float_8h"/>
        <childnode refid="7966" relation="include">
        </childnode>
      </node>
      <node id="7959">
        <label>unistd.h</label>
      </node>
      <node id="7965">
        <label>private/bitmath.h</label>
        <link refid="bitmath_8h"/>
        <childnode refid="7966" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
      </node>
      <node id="7971">
        <label>private/cpu.h</label>
        <link refid="libflac_2src_2lib_f_l_a_c_2include_2private_2cpu_8h"/>
        <childnode refid="7966" relation="include">
        </childnode>
      </node>
      <node id="7956">
        <label>math.h</label>
      </node>
      <node id="7958">
        <label>share/compat.h</label>
        <link refid="libflac_2include_2share_2compat_8h"/>
        <childnode refid="7959" relation="include">
        </childnode>
        <childnode refid="7960" relation="include">
        </childnode>
        <childnode refid="7963" relation="include">
        </childnode>
        <childnode refid="7964" relation="include">
        </childnode>
      </node>
      <node id="7955">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c</label>
        <link refid="libflac/src/libFLAC/fixed.c"/>
        <childnode refid="7956" relation="include">
        </childnode>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7974" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" prot="public" static="no">
        <name>local_abs</name>
        <param><defname>x</defname></param>
        <initializer>((unsigned)((x)&lt;0? -(x) : (x)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" line="48" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="libflac_2src_2lib_f_l_a_c_2fixed_8c_1ab36d9c4e86565776c7ede063fac119e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned FLAC__fixed_compute_best_predictor</definition>
        <argsstring>(const FLAC__int32 data[], unsigned data_len, FLAC__float residual_bits_per_sample[FLAC__MAX_FIXED_ORDER+1])</argsstring>
        <name>FLAC__fixed_compute_best_predictor</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type><ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref></type>
          <declname>residual_bits_per_sample</declname>
          <array>[FLAC__MAX_FIXED_ORDER+1]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" line="217" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" bodystart="217" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="libflac_2src_2lib_f_l_a_c_2fixed_8c_1ac1e7d54aa1083f2e12804459a4e98836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned FLAC__fixed_compute_best_predictor_wide</definition>
        <argsstring>(const FLAC__int32 data[], unsigned data_len, FLAC__float residual_bits_per_sample[FLAC__MAX_FIXED_ORDER+1])</argsstring>
        <name>FLAC__fixed_compute_best_predictor_wide</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type><ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref></type>
          <declname>residual_bits_per_sample</declname>
          <array>[FLAC__MAX_FIXED_ORDER+1]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" line="275" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" bodystart="275" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a838221da9e3804dc14dfb0c87b6ac455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__fixed_compute_residual</definition>
        <argsstring>(const FLAC__int32 data[], unsigned data_len, unsigned order, FLAC__int32 residual[])</argsstring>
        <name>FLAC__fixed_compute_residual</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>residual</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" line="336" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" bodystart="336" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a97f1c6d48aa5561a586a7c19f87387ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__fixed_restore_signal</definition>
        <argsstring>(const FLAC__int32 residual[], unsigned data_len, unsigned order, FLAC__int32 data[])</argsstring>
        <name>FLAC__fixed_restore_signal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>residual</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" line="379" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c" bodystart="379" bodyend="419"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>libFLAC<sp/>-<sp/>Free<sp/>Lossless<sp/>Audio<sp/>Codec<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2009<sp/><sp/>Josh<sp/>Coalson</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/><sp/>Xiph.Org<sp/>Foundation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Xiph.org<sp/>Foundation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>FOUNDATION<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2include_2share_2compat_8h" kindref="compound">share/compat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bitmath_8h" kindref="compound">private/bitmath.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h" kindref="compound">private/fixed.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h" kindref="compound">private/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assert_8h" kindref="compound">FLAC/assert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>local_abs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>local_abs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>local_abs(x)<sp/>((unsigned)((x)&lt;0?<sp/>-(x)<sp/>:<sp/>(x)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FLAC__INTEGER_ONLY_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>rbps<sp/>stands<sp/>for<sp/>residual<sp/>bits<sp/>per<sp/>sample</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ln(2)<sp/>*<sp/>err)</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>rbps<sp/>=<sp/>log<sp/><sp/>(-----------)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>(<sp/><sp/><sp/><sp/><sp/>n<sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FLAC__fixedpoint<sp/>local__compute_rbps_integerized(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>err,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>n)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>rbps;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>required<sp/>to<sp/>represent<sp/>a<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fracbits;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>of<sp/>rbps<sp/>that<sp/>comprise<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rbps)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FLAC__fixedpoint));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(err<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(n<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(n<sp/>&lt;=<sp/><ref refid="group__flac__format_1gaef78bc1b04f721e7b4563381f5514e8d" kindref="member">FLAC__MAX_BLOCK_SIZE</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>&lt;=<sp/>n)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>above<sp/>two<sp/>things<sp/>tell<sp/>us<sp/>1)<sp/>n<sp/>fits<sp/>in<sp/>16<sp/>bits;<sp/>2)<sp/>err/n<sp/>&gt;<sp/>1.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>These<sp/>allow<sp/>us<sp/>later<sp/>to<sp/>know<sp/>we<sp/>won&apos;t<sp/>lose<sp/>too<sp/>much<sp/>precision<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fixed-point<sp/>division<sp/>(err&lt;&lt;fracbits)/n.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>fracbits<sp/>=<sp/>(8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(err))<sp/>-<sp/>(FLAC__bitmath_ilog2(err)+1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;=<sp/>fracbits;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>/=<sp/>n;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>err<sp/>now<sp/>holds<sp/>err/n<sp/>with<sp/>fracbits<sp/>fractional<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Whittle<sp/>err<sp/>down<sp/>to<sp/>16<sp/>bits<sp/>max.<sp/><sp/>16<sp/>significant<sp/>bits<sp/>is<sp/>enough<sp/>for</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>our<sp/>purposes.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(err<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>FLAC__bitmath_ilog2(err)+1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&gt;&gt;=<sp/>(bits-16);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fracbits<sp/>-=<sp/>(bits-16);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>rbps<sp/>=<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)err;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Multiply<sp/>by<sp/>fixed-point<sp/>version<sp/>of<sp/>ln(2),<sp/>with<sp/>16<sp/>fractional<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>rbps<sp/>*=<sp/>FLAC__FP_LN2;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>fracbits<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(fracbits<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FLAC__fixedpoint_log2<sp/>requires<sp/>fracbits%4<sp/>to<sp/>be<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/>fracbits<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbps<sp/>&gt;&gt;=<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fracbits<sp/>-=<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>rbps<sp/>=<sp/>FLAC__fixedpoint_log2(rbps,<sp/>fracbits,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rbps<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>return<sp/>value<sp/>must<sp/>have<sp/>16<sp/>fractional<sp/>bits.<sp/><sp/>Since<sp/>the<sp/>whole<sp/>part</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>base-2<sp/>log<sp/>of<sp/>a<sp/>32<sp/>bit<sp/>number<sp/>must<sp/>fit<sp/>in<sp/>5<sp/>bits,<sp/>and<sp/>fracbits</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>must<sp/>be<sp/>&gt;=<sp/>-3,<sp/>these<sp/>assertion<sp/>allows<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>shift<sp/>rbps</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>left<sp/>if<sp/>necessary<sp/>to<sp/>get<sp/>16<sp/>fracbits<sp/>without<sp/>losing<sp/>any<sp/>bits<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>whole<sp/>part<sp/>of<sp/>rbps.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>There<sp/>is<sp/>a<sp/>slight<sp/>chance<sp/>due<sp/>to<sp/>accumulated<sp/>error<sp/>that<sp/>the<sp/>whole<sp/>part</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>require<sp/>6<sp/>bits,<sp/>so<sp/>we<sp/>use<sp/>6<sp/>in<sp/>the<sp/>assertion.<sp/><sp/>Really<sp/>though<sp/>as</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>long<sp/>as<sp/>it<sp/>fits<sp/>in<sp/>13<sp/>bits<sp/>(32<sp/>-<sp/>(16<sp/>-<sp/>(-3)))<sp/>we<sp/>are<sp/>fine.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)FLAC__bitmath_ilog2(rbps)+1<sp/>&lt;=<sp/>fracbits<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(fracbits<sp/>&gt;=<sp/>-3);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>shift<sp/>the<sp/>decimal<sp/>point<sp/>into<sp/>place<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fracbits<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbps<sp/>&lt;&lt;<sp/>(16-fracbits);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fracbits<sp/>&gt;<sp/>16)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbps<sp/>&gt;&gt;<sp/>(fracbits-16);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbps;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FLAC__fixedpoint<sp/>local__compute_rbps_wide_integerized(<ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>err,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>n)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>rbps;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>required<sp/>to<sp/>represent<sp/>a<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fracbits;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>of<sp/>rbps<sp/>that<sp/>comprise<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rbps)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FLAC__fixedpoint));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(err<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(n<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(n<sp/>&lt;=<sp/><ref refid="group__flac__format_1gaef78bc1b04f721e7b4563381f5514e8d" kindref="member">FLAC__MAX_BLOCK_SIZE</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>&lt;=<sp/>n)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>above<sp/>two<sp/>things<sp/>tell<sp/>us<sp/>1)<sp/>n<sp/>fits<sp/>in<sp/>16<sp/>bits;<sp/>2)<sp/>err/n<sp/>&gt;<sp/>1.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>These<sp/>allow<sp/>us<sp/>later<sp/>to<sp/>know<sp/>we<sp/>won&apos;t<sp/>lose<sp/>too<sp/>much<sp/>precision<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fixed-point<sp/>division<sp/>(err&lt;&lt;fracbits)/n.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>fracbits<sp/>=<sp/>(8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(err))<sp/>-<sp/>(FLAC__bitmath_ilog2_wide(err)+1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;=<sp/>fracbits;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>/=<sp/>n;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>err<sp/>now<sp/>holds<sp/>err/n<sp/>with<sp/>fracbits<sp/>fractional<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Whittle<sp/>err<sp/>down<sp/>to<sp/>16<sp/>bits<sp/>max.<sp/><sp/>16<sp/>significant<sp/>bits<sp/>is<sp/>enough<sp/>for</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>our<sp/>purposes.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(err<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>FLAC__bitmath_ilog2_wide(err)+1;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&gt;&gt;=<sp/>(bits-16);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fracbits<sp/>-=<sp/>(bits-16);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>rbps<sp/>=<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)err;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Multiply<sp/>by<sp/>fixed-point<sp/>version<sp/>of<sp/>ln(2),<sp/>with<sp/>16<sp/>fractional<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>rbps<sp/>*=<sp/>FLAC__FP_LN2;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>fracbits<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(fracbits<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FLAC__fixedpoint_log2<sp/>requires<sp/>fracbits%4<sp/>to<sp/>be<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/>fracbits<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbps<sp/>&gt;&gt;=<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fracbits<sp/>-=<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>rbps<sp/>=<sp/>FLAC__fixedpoint_log2(rbps,<sp/>fracbits,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rbps<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>return<sp/>value<sp/>must<sp/>have<sp/>16<sp/>fractional<sp/>bits.<sp/><sp/>Since<sp/>the<sp/>whole<sp/>part</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>base-2<sp/>log<sp/>of<sp/>a<sp/>32<sp/>bit<sp/>number<sp/>must<sp/>fit<sp/>in<sp/>5<sp/>bits,<sp/>and<sp/>fracbits</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>must<sp/>be<sp/>&gt;=<sp/>-3,<sp/>these<sp/>assertion<sp/>allows<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>shift<sp/>rbps</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>left<sp/>if<sp/>necessary<sp/>to<sp/>get<sp/>16<sp/>fracbits<sp/>without<sp/>losing<sp/>any<sp/>bits<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>whole<sp/>part<sp/>of<sp/>rbps.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>There<sp/>is<sp/>a<sp/>slight<sp/>chance<sp/>due<sp/>to<sp/>accumulated<sp/>error<sp/>that<sp/>the<sp/>whole<sp/>part</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>require<sp/>6<sp/>bits,<sp/>so<sp/>we<sp/>use<sp/>6<sp/>in<sp/>the<sp/>assertion.<sp/><sp/>Really<sp/>though<sp/>as</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>long<sp/>as<sp/>it<sp/>fits<sp/>in<sp/>13<sp/>bits<sp/>(32<sp/>-<sp/>(16<sp/>-<sp/>(-3)))<sp/>we<sp/>are<sp/>fine.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)FLAC__bitmath_ilog2(rbps)+1<sp/>&lt;=<sp/>fracbits<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(fracbits<sp/>&gt;=<sp/>-3);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>shift<sp/>the<sp/>decimal<sp/>point<sp/>into<sp/>place<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fracbits<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbps<sp/>&lt;&lt;<sp/>(16-fracbits);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fracbits<sp/>&gt;<sp/>16)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbps<sp/>&gt;&gt;<sp/>(fracbits-16);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbps;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__INTEGER_ONLY_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h_1ab36d9c4e86565776c7ede063fac119e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1ab36d9c4e86565776c7ede063fac119e0" kindref="member">FLAC__fixed_compute_best_predictor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>data_len,<sp/><ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref><sp/>residual_bits_per_sample[<ref refid="group__flac__format_1gabd0d5d6fe71b337244712b244ae7cb0f" kindref="member">FLAC__MAX_FIXED_ORDER</ref>+1])</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1ab36d9c4e86565776c7ede063fac119e0" kindref="member">FLAC__fixed_compute_best_predictor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>data[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>data_len,<sp/>FLAC__fixedpoint<sp/>residual_bits_per_sample[<ref refid="group__flac__format_1gabd0d5d6fe71b337244712b244ae7cb0f" kindref="member">FLAC__MAX_FIXED_ORDER</ref>+1])</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_0<sp/>=<sp/>data[-1];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_1<sp/>=<sp/>data[-1]<sp/>-<sp/>data[-2];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_2<sp/>=<sp/>last_error_1<sp/>-<sp/>(data[-2]<sp/>-<sp/>data[-3]);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_3<sp/>=<sp/>last_error_2<sp/>-<sp/>(data[-2]<sp/>-<sp/>2*data[-3]<sp/>+<sp/>data[-4]);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>,<sp/>save;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>total_error_0<sp/>=<sp/>0,<sp/>total_error_1<sp/>=<sp/>0,<sp/>total_error_2<sp/>=<sp/>0,<sp/>total_error_3<sp/>=<sp/>0,<sp/>total_error_4<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/><sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/><sp/><sp/><sp/><sp/>;<sp/>total_error_0<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_0;<sp/>total_error_1<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_0<sp/>=<sp/>save;<sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_1;<sp/>total_error_2<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_1<sp/>=<sp/>save;<sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_2;<sp/>total_error_3<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_2<sp/>=<sp/>save;<sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_3;<sp/>total_error_4<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_3<sp/>=<sp/>save;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_0<sp/>&lt;<sp/>flac_min(flac_min(flac_min(total_error_1,<sp/>total_error_2),<sp/>total_error_3),<sp/>total_error_4))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_1<sp/>&lt;<sp/>flac_min(flac_min(total_error_2,<sp/>total_error_3),<sp/>total_error_4))</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_2<sp/>&lt;<sp/>flac_min(total_error_3,<sp/>total_error_4))</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_3<sp/>&lt;<sp/>total_error_4)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Estimate<sp/>the<sp/>expected<sp/>number<sp/>of<sp/>bits<sp/>per<sp/>residual<sp/>signal<sp/>sample.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;total_error*&apos;<sp/>is<sp/>linearly<sp/>related<sp/>to<sp/>the<sp/>variance<sp/>of<sp/>the<sp/>residual<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>signal,<sp/>so<sp/>we<sp/>use<sp/>it<sp/>directly<sp/>to<sp/>compute<sp/>E(|x|)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_0<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_1<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_3<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_4<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__INTEGER_ONLY_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[0]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_0<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_0<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[1]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_1<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_1<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[2]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_2<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_2<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[3]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_3<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_3<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[4]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_4<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_4<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[0]<sp/>=<sp/>(total_error_0<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_integerized(total_error_0,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[1]<sp/>=<sp/>(total_error_1<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_integerized(total_error_1,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[2]<sp/>=<sp/>(total_error_2<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_integerized(total_error_2,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[3]<sp/>=<sp/>(total_error_3<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_integerized(total_error_3,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[4]<sp/>=<sp/>(total_error_4<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_integerized(total_error_4,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__INTEGER_ONLY_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h_1ac1e7d54aa1083f2e12804459a4e98836" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1ac1e7d54aa1083f2e12804459a4e98836" kindref="member">FLAC__fixed_compute_best_predictor_wide</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>data[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>data_len,<sp/><ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref><sp/>residual_bits_per_sample[<ref refid="group__flac__format_1gabd0d5d6fe71b337244712b244ae7cb0f" kindref="member">FLAC__MAX_FIXED_ORDER</ref>+1])</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1ac1e7d54aa1083f2e12804459a4e98836" kindref="member">FLAC__fixed_compute_best_predictor_wide</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>data[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>data_len,<sp/>FLAC__fixedpoint<sp/>residual_bits_per_sample[<ref refid="group__flac__format_1gabd0d5d6fe71b337244712b244ae7cb0f" kindref="member">FLAC__MAX_FIXED_ORDER</ref>+1])</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_0<sp/>=<sp/>data[-1];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_1<sp/>=<sp/>data[-1]<sp/>-<sp/>data[-2];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_2<sp/>=<sp/>last_error_1<sp/>-<sp/>(data[-2]<sp/>-<sp/>data[-3]);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>last_error_3<sp/>=<sp/>last_error_2<sp/>-<sp/>(data[-2]<sp/>-<sp/>2*data[-3]<sp/>+<sp/>data[-4]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>,<sp/>save;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total_error_*<sp/>are<sp/>64-bits<sp/>to<sp/>avoid<sp/>overflow<sp/>when<sp/>encoding</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>erratic<sp/>signals<sp/>when<sp/>the<sp/>bits-per-sample<sp/>and<sp/>blocksize<sp/>are</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>large.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>total_error_0<sp/>=<sp/>0,<sp/>total_error_1<sp/>=<sp/>0,<sp/>total_error_2<sp/>=<sp/>0,<sp/>total_error_3<sp/>=<sp/>0,<sp/>total_error_4<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/><sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/><sp/><sp/><sp/><sp/>;<sp/>total_error_0<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_0;<sp/>total_error_1<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_0<sp/>=<sp/>save;<sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_1;<sp/>total_error_2<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_1<sp/>=<sp/>save;<sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_2;<sp/>total_error_3<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_2<sp/>=<sp/>save;<sp/>save<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>-=<sp/>last_error_3;<sp/>total_error_4<sp/>+=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a6c5a7d887a1c90381150e19d261bbb14" kindref="member">local_abs</ref>(error);<sp/>last_error_3<sp/>=<sp/>save;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_0<sp/>&lt;<sp/>flac_min(flac_min(flac_min(total_error_1,<sp/>total_error_2),<sp/>total_error_3),<sp/>total_error_4))</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_1<sp/>&lt;<sp/>flac_min(flac_min(total_error_2,<sp/>total_error_3),<sp/>total_error_4))</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_2<sp/>&lt;<sp/>flac_min(total_error_3,<sp/>total_error_4))</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_error_3<sp/>&lt;<sp/>total_error_4)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Estimate<sp/>the<sp/>expected<sp/>number<sp/>of<sp/>bits<sp/>per<sp/>residual<sp/>signal<sp/>sample.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;total_error*&apos;<sp/>is<sp/>linearly<sp/>related<sp/>to<sp/>the<sp/>variance<sp/>of<sp/>the<sp/>residual<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>signal,<sp/>so<sp/>we<sp/>use<sp/>it<sp/>directly<sp/>to<sp/>compute<sp/>E(|x|)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_0<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_1<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_3<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(data_len<sp/>&gt;<sp/>0<sp/>||<sp/>total_error_4<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__INTEGER_ONLY_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[0]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_0<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_0<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[1]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_1<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_1<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[2]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_2<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_2<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[3]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_3<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_3<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[4]<sp/>=<sp/>(<ref refid="float_8h_1aa081c47b0e3ecaf406a6cf718768a69c" kindref="member">FLAC__float</ref>)((total_error_4<sp/>&gt;<sp/>0)<sp/>?<sp/>log(<ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>*<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)total_error_4<sp/>/<sp/>(<ref refid="float_8h_1ae412de69b520c73194a464bfcdc1104d" kindref="member">FLAC__double</ref>)data_len)<sp/>/<sp/><ref refid="mathematics_8h_1a92428112a5d24721208748774a4f23e6" kindref="member">M_LN2</ref><sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[0]<sp/>=<sp/>(total_error_0<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_wide_integerized(total_error_0,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[1]<sp/>=<sp/>(total_error_1<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_wide_integerized(total_error_1,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[2]<sp/>=<sp/>(total_error_2<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_wide_integerized(total_error_2,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[3]<sp/>=<sp/>(total_error_3<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_wide_integerized(total_error_3,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>residual_bits_per_sample[4]<sp/>=<sp/>(total_error_4<sp/>&gt;<sp/>0)<sp/>?<sp/>local__compute_rbps_wide_integerized(total_error_4,<sp/>data_len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h_1a838221da9e3804dc14dfb0c87b6ac455" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a838221da9e3804dc14dfb0c87b6ac455" kindref="member">FLAC__fixed_compute_residual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>data[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>data_len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>,<sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>residual[])</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idata_len<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)data_len;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(order)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(residual[0])<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data[0]));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(residual,<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(residual[0])*data_len);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[i]<sp/>=<sp/>data[i]<sp/>-<sp/>data[i-1];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>may<sp/>be<sp/>faster<sp/>with<sp/>some<sp/>compilers<sp/>on<sp/>some<sp/>systems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[i]<sp/>=<sp/>data[i]<sp/>-<sp/>(data[i-1]<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>data[i-2];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-<sp/>2*data[i-1]<sp/>+<sp/>data[i-2];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>may<sp/>be<sp/>faster<sp/>with<sp/>some<sp/>compilers<sp/>on<sp/>some<sp/>systems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[i]<sp/>=<sp/>data[i]<sp/>-<sp/>(((data[i-1]-data[i-2])&lt;&lt;1)<sp/>+<sp/>(data[i-1]-data[i-2]))<sp/>-<sp/>data[i-3];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-<sp/>3*data[i-1]<sp/>+<sp/>3*data[i-2]<sp/>-<sp/>data[i-3];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>may<sp/>be<sp/>faster<sp/>with<sp/>some<sp/>compilers<sp/>on<sp/>some<sp/>systems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[i]<sp/>=<sp/>data[i]<sp/>-<sp/>((data[i-1]+data[i-3])&lt;&lt;2)<sp/>+<sp/>((data[i-2]&lt;&lt;2)<sp/>+<sp/>(data[i-2]&lt;&lt;1))<sp/>+<sp/>data[i-4];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residual[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-<sp/>4*data[i-1]<sp/>+<sp/>6*data[i-2]<sp/>-<sp/>4*data[i-3]<sp/>+<sp/>data[i-4];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="libflac_2src_2lib_f_l_a_c_2include_2private_2fixed_8h_1a97f1c6d48aa5561a586a7c19f87387ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2lib_f_l_a_c_2fixed_8c_1a97f1c6d48aa5561a586a7c19f87387ea" kindref="member">FLAC__fixed_restore_signal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>residual[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>data_len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1abc2d8236fc76d7a9d742d7eae7e459cd" kindref="member">order</ref>,<sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>data[])</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>idata_len<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)data_len;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(order)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(residual[0])<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data[0]));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>residual,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(residual[0])*data_len);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>residual[i]<sp/>+<sp/>data[i-1];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>may<sp/>be<sp/>faster<sp/>with<sp/>some<sp/>compilers<sp/>on<sp/>some<sp/>systems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>residual[i]<sp/>+<sp/>(data[i-1]&lt;&lt;1)<sp/>-<sp/>data[i-2];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>residual[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>+<sp/>2*data[i-1]<sp/>-<sp/>data[i-2];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>may<sp/>be<sp/>faster<sp/>with<sp/>some<sp/>compilers<sp/>on<sp/>some<sp/>systems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>residual[i]<sp/>+<sp/>(((data[i-1]-data[i-2])&lt;&lt;1)<sp/>+<sp/>(data[i-1]-data[i-2]))<sp/>+<sp/>data[i-3];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>residual[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>+<sp/>3*data[i-1]<sp/>-<sp/>3*data[i-2]<sp/>+<sp/>data[i-3];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idata_len;<sp/>i++)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>may<sp/>be<sp/>faster<sp/>with<sp/>some<sp/>compilers<sp/>on<sp/>some<sp/>systems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>residual[i]<sp/>+<sp/>((data[i-1]+data[i-3])&lt;&lt;2)<sp/>-<sp/>((data[i-2]&lt;&lt;2)<sp/>+<sp/>(data[i-2]&lt;&lt;1))<sp/>-<sp/>data[i-4];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>residual[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>+<sp/>4*data[i-1]<sp/>-<sp/>6*data[i-2]<sp/>+<sp/>4*data[i-3]<sp/>-<sp/>data[i-4];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/fixed.c"/>
  </compounddef>
</doxygen>
