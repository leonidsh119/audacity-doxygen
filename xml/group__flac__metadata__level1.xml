<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__flac__metadata__level1" kind="group">
    <compoundname>flac_metadata_level1</compoundname>
    <title>FLAC/metadata.h: metadata level 1 interface</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__flac__metadata__level1_1gac926e7d2773a05066115cac9048bbec9" prot="public" static="no">
        <name>FLAC__Metadata_SimpleIteratorStatus</name>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a33aadd73194c0d7e307d643237e0ddcd" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator is in the normal OK state </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a0a3933cb38c8957a8d5c3d1afb4766f9" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data passed into a function violated the function&apos;s usage criteria </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a20e835bbb74b4d039e598617f68d2af6" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ERROR_OPENING_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator could not open the target file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a7785f77a612be8956fbe7cab73497220" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_A_FLAC_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator could not find the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> signature at the start of the file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9af055d8c0c663e72134fe2db8037b6880" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_WRITABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator tried to write to a file that was not writable </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a14c897124887858109200723826f85b7" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_BAD_METADATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered input that does not conform to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata specification </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a088df964f0852dd7e19304e920c3ee8e" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error while reading the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2ad85a32e291d1e918692d68cc22fd40" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error while seeking in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9ac2337299c2347ca311caeaa7d71d857c" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_WRITE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error while writing the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2e073843fa99419d76a0b210da96ceb6" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_RENAME_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error renaming the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a4f855433038c576da127fc1de9d18f9b" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_UNLINK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error removing the temporary file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9aa8386ed0a20d7e91b0022d203ec3cdec" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_MEMORY_ALLOCATION_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation failed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a9d821ae65a1c5de619daa88c850906df" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_INTERNAL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The caller violated an assertion or an unexpected error occurred </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Status type for <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref>.</para><para>The iterator&apos;s current status can be obtained by calling <ref refid="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" kindref="member">FLAC__metadata_simple_iterator_status()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="309" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="309" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flac__metadata__level1_1ga6accccddbb867dfc2eece9ee3ffecb3a" prot="public" static="no">
        <type>struct <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref></type>
        <definition>typedef struct FLAC__Metadata_SimpleIterator FLAC__Metadata_SimpleIterator</definition>
        <argsstring></argsstring>
        <name>FLAC__Metadata_SimpleIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque structure definition for the level 1 iterator type. See the <ref refid="group__flac__metadata__level1" kindref="compound">metadata level 1 module </ref> for a detailed description. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="237" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__flac__metadata__level1_1ga28ea4a13fcbe97a732fafb13417036bb" prot="public" static="no" mutable="no">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>FLAC_API const char* const FLAC__Metadata_SimpleIteratorStatusString[]</definition>
        <argsstring>[]</argsstring>
        <name>FLAC__Metadata_SimpleIteratorStatusString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps a FLAC__Metadata_SimpleIteratorStatus to a C string.</para><para>Using a FLAC__Metadata_SimpleIteratorStatus as the index to this array will give the string equivalent. The contents should not be modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="357" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="344" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flac__metadata__level1_1ga5b32f4eba211e05727428e9080f4e393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
        <definition>FLAC_API FLAC__Metadata_SimpleIterator* FLAC__metadata_simple_iterator_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_simple_iterator_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new iterator instance.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_SimpleIterator*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="365" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="361" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_simple_iterator_delete</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an iterator instance. Deletes the object pointed to by <emphasis>iterator</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="373" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="399" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__metadata__level1_1gac926e7d2773a05066115cac9048bbec9" kindref="member">FLAC__Metadata_SimpleIteratorStatus</ref></type>
        <definition>FLAC_API FLAC__Metadata_SimpleIteratorStatus FLAC__metadata_simple_iterator_status</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_status</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current status of the iterator. Call this after a function returns <computeroutput>false</computeroutput> to get the reason for the error. Also resets the status to FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_SimpleIteratorStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The current status of the iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="385" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="407" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_init</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, const char *filename, FLAC__bool read_only, FLAC__bool preserve_file_stats)</argsstring>
        <name>FLAC__metadata_simple_iterator_init</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>read_only</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>preserve_file_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the iterator to point to the first metadata block in the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_only</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will be opened in read-only mode; if <computeroutput>false</computeroutput>, the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will be opened for edit even if no edits are performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preserve_file_stats</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, the owner and modification time will be preserved even if the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is written to.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if a memory allocation error occurs, the file can&apos;t be opened, or another error occurs, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="406" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="480" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gadc654c1361b53737bab20efa3e75a0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_is_writable</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_is_writable</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is writable. If <computeroutput>false</computeroutput>, calls to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> and <ref refid="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" kindref="member">FLAC__metadata_simple_iterator_insert_block_after()</ref> will fail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para>See above. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="418" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="504" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_next</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_next</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator forward one metadata block, returning <computeroutput>false</computeroutput> if already at the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the last metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="432" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="512" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga49f495dec0f44116d66e1b79356a1160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_prev</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_prev</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator backward one metadata block, returning <computeroutput>false</computeroutput> if already at the beginning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the first metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="446" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="530" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga4dd81539fb698163209d05af13a2ec3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_is_last</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_is_last</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a flag telling if the current metadata block is the last.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the current metadata block is the last in the file, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="459" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="565" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga46e158a3f70c0e39db9c68a9ff9a2621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="macconfig_8h_1ae498af04567b740d66e09d36613c2cd8" kindref="member">off_t</ref></type>
        <definition>FLAC_API off_t FLAC__metadata_simple_iterator_get_block_offset</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block_offset</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the offset of the metadata block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>off_t</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the metadata block at the current iterator position. This is the byte offset relative to the beginning of the file of the current metadata block&apos;s header. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="475" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="574" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga4649a49d230ac8bfc3ec88f5196205bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref></type>
        <definition>FLAC_API FLAC__MetadataType FLAC__metadata_simple_iterator_get_block_type</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type of the metadata block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__MetadataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the metadata block at the current iterator position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="489" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="582" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gaad69b5d6c58c48e08dcfb3f1018c2602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> unsigned</type>
        <definition>FLAC_API unsigned FLAC__metadata_simple_iterator_get_block_length</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block_length</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the length of the metadata block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the metadata block at the current iterator position. The is same length as that in the <ulink url="http://xiph.org/flac/format.html#metadata_block_header">metadata block header</ulink>, i.e. the length of the metadata body that follows the header. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="506" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="591" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gaf2db2a96f7c60100d620a2eefb8360bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_get_application_id</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__byte *id)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_application_id</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the application ID of the <computeroutput>APPLICATION</computeroutput> block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer of at least <computeroutput>4</computeroutput> bytes where the ID will be stored.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">id<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the ID was successfully read, else <computeroutput>false</computeroutput>, in which case you should check <ref refid="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" kindref="member">FLAC__metadata_simple_iterator_status()</ref> to find out why. If the status is <computeroutput>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT</computeroutput>, then the current metadata block is not an <computeroutput>APPLICATION</computeroutput> block. Otherwise if the status is <computeroutput>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR</computeroutput> or <computeroutput>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR</computeroutput>, an I/O error occurred and the iterator can no longer be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="531" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="600" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga31c9e013b3bdc04866eee2271349fe60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata* FLAC__metadata_simple_iterator_get_block</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the metadata block at the current position. You can modify the block but must use <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> to write it back to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file.</para><para>You must call <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref> on the returned object when you are finished with it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata*</parametername>
</parameternamelist>
<parameterdescription>
<para>The current metadata block, or <computeroutput>NULL</computeroutput> if there was a memory allocation error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="549" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="627" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_set_block</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__StreamMetadata *block, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_simple_iterator_set_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a block back to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function tries to be as efficient as possible; how the block is actually written is shown by the following:</para><para>Existing block is a STREAMINFO block and the new block is a STREAMINFO block: the new block is written in place. Make sure you know what you&apos;re doing when changing the values of a STREAMINFO block.</para><para>Existing block is a STREAMINFO block and the new block is a not a STREAMINFO block: this is an error since the first block must be a STREAMINFO block. Returns <computeroutput>false</computeroutput> without altering the file.</para><para>Existing block is not a STREAMINFO block and the new block is a STREAMINFO block: this is an error since there may be only one STREAMINFO block. Returns <computeroutput>false</computeroutput> without altering the file.</para><para>Existing block and new block are the same length: the existing block will be replaced by the new block, written in place.</para><para>Existing block is longer than new block: if use_padding is <computeroutput>true</computeroutput>, the existing block will be overwritten in place with the new block followed by a PADDING block, if possible, to make the total size the same as the existing block. Remember that a padding block requires at least four bytes so if the difference in size between the new block and existing block is less than that, the entire file will have to be rewritten, using the new block&apos;s exact size. If use_padding is <computeroutput>false</computeroutput>, the entire file will be rewritten, replacing the existing block by the new block.</para><para>Existing block is shorter than new block: if use_padding is <computeroutput>true</computeroutput>, the function will try and expand the new block into the following PADDING block, if it exists and doing so won&apos;t shrink the PADDING block to less than 4 bytes. If there is no following PADDING block, or it will shrink to less than 4 bytes, or use_padding is <computeroutput>false</computeroutput>, the entire file is rewritten, replacing the existing block with the new block. Note that in this case any following PADDING block is preserved as is.</para><para>After writing the block, the iterator will remain in the same place, i.e. pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>The block to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> <programlisting><codeline><highlight class="normal">block<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if successful, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="605" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="656" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_insert_block_after</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__StreamMetadata *block, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_simple_iterator_insert_block_after</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is similar to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> except that instead of writing over an existing block, it appends a block after the existing block. <emphasis>use_padding</emphasis> is again used to tell the function to try an expand into following padding in an attempt to avoid rewriting the entire file.</para><para>This function will fail and return <computeroutput>false</computeroutput> if given a STREAMINFO block.</para><para>After writing the block, the iterator will be pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>The block to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> <programlisting><codeline><highlight class="normal">block<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if successful, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="630" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="754" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gaf0a1823f95f8097f0d2ff3f67ae30a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_delete_block</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_simple_iterator_delete_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes the block at the current position. This will cause the entire <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to be rewritten, unless <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput>, in which case the block will be replaced by an equal-sized PADDING block. The iterator will be left pointing to the block before the one just deleted.</para><para>You may not delete the STREAMINFO block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if successful, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="835" bodyend="869"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The level 1 interface provides read-write access to <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file metadata and operates directly on the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. </para>    </briefdescription>
    <detaileddescription>
<para>The general usage of this interface is:</para><para><itemizedlist>
<listitem><para>Create an iterator using <ref refid="group__flac__metadata__level1_1ga5b32f4eba211e05727428e9080f4e393" kindref="member">FLAC__metadata_simple_iterator_new()</ref></para></listitem><listitem><para>Attach it to a file using <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> and check the exit code. Call <ref refid="group__flac__metadata__level1_1gadc654c1361b53737bab20efa3e75a0fc" kindref="member">FLAC__metadata_simple_iterator_is_writable()</ref> to see if the file is writable, or only read access is allowed.</para></listitem><listitem><para>Use <ref refid="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" kindref="member">FLAC__metadata_simple_iterator_next()</ref> and <ref refid="group__flac__metadata__level1_1ga49f495dec0f44116d66e1b79356a1160" kindref="member">FLAC__metadata_simple_iterator_prev()</ref> to traverse the blocks. This is does not read the actual blocks themselves. <ref refid="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" kindref="member">FLAC__metadata_simple_iterator_next()</ref> is relatively fast. <ref refid="group__flac__metadata__level1_1ga49f495dec0f44116d66e1b79356a1160" kindref="member">FLAC__metadata_simple_iterator_prev()</ref> is slower since it needs to search forward from the front of the file.</para></listitem><listitem><para>Use <ref refid="group__flac__metadata__level1_1ga4649a49d230ac8bfc3ec88f5196205bb" kindref="member">FLAC__metadata_simple_iterator_get_block_type()</ref> or <ref refid="group__flac__metadata__level1_1ga31c9e013b3bdc04866eee2271349fe60" kindref="member">FLAC__metadata_simple_iterator_get_block()</ref> to access the actual data at the current iterator position. The returned object is yours to modify and free.</para></listitem><listitem><para>Use <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> to write a modified block back. You must have write permission to the original file. Make sure to read the whole comment to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> below.</para></listitem><listitem><para>Use <ref refid="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" kindref="member">FLAC__metadata_simple_iterator_insert_block_after()</ref> to add new blocks. Use the object creation functions from <ref refid="group__flac__metadata__object" kindref="compound">here </ref> to generate new objects.</para></listitem><listitem><para>Use <ref refid="group__flac__metadata__level1_1gaf0a1823f95f8097f0d2ff3f67ae30a88" kindref="member">FLAC__metadata_simple_iterator_delete_block()</ref> to remove the block currently referred to by the iterator, or replace it with padding.</para></listitem><listitem><para>Destroy the iterator with <ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete()</ref> when finished.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>The <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file remains open the whole time between <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> and <ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete()</ref>, so make sure you are not altering the file during this time.</para></simplesect>
<simplesect kind="note"><para>Do not modify the <emphasis>is_last</emphasis>, <emphasis>length</emphasis>, or <emphasis>type</emphasis> fields of returned <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> objects. These are managed automatically.</para></simplesect>
<simplesect kind="note"><para>If any of the modification functions (<ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref>, <ref refid="group__flac__metadata__level1_1gaf0a1823f95f8097f0d2ff3f67ae30a88" kindref="member">FLAC__metadata_simple_iterator_delete_block()</ref>, <ref refid="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" kindref="member">FLAC__metadata_simple_iterator_insert_block_after()</ref>, etc.) return <computeroutput>false</computeroutput>, you should delete the iterator as it may no longer be valid. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
