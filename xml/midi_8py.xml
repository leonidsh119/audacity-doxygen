<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="midi_8py" kind="file" language="Python">
    <compoundname>midi.py</compoundname>
    <innerclass refid="classpyportmidi_1_1midi_1_1_input" prot="public">pyportmidi::midi::Input</innerclass>
    <innerclass refid="classpyportmidi_1_1midi_1_1_output" prot="public">pyportmidi::midi::Output</innerclass>
    <innerclass refid="classpyportmidi_1_1midi_1_1_midi_exception" prot="public">pyportmidi::midi::MidiException</innerclass>
    <innernamespace refid="namespacepyportmidi_1_1midi">pyportmidi::midi</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacepyportmidi_1_1midi" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Module<sp/>for<sp/>interacting<sp/>with<sp/>midi<sp/>input<sp/>and<sp/>output.</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">The<sp/>midi<sp/>module<sp/>can<sp/>send<sp/>output<sp/>to<sp/>midi<sp/>devices,<sp/>and<sp/>get<sp/>input</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">from<sp/>midi<sp/>devices.<sp/><sp/>It<sp/>can<sp/>also<sp/>list<sp/>midi<sp/>devices<sp/>on<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">Including<sp/>real<sp/>midi<sp/>devices,<sp/>and<sp/>virtual<sp/>ones.</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">It<sp/>uses<sp/>the<sp/>portmidi<sp/>library.<sp/><sp/>Is<sp/>portable<sp/>to<sp/>which<sp/>ever<sp/>platforms</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">portmidi<sp/>supports<sp/>(currently<sp/>windows,<sp/>OSX,<sp/>and<sp/>linux).</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>atexit</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">_init<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">_pypm<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">__all__<sp/>=<sp/>[<sp/></highlight><highlight class="stringliteral">&quot;Input&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MidiException&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Output&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_count&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_default_input_id&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_default_output_id&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_device_info&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quit&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">__theclasses__<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;Input&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Output&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespacepyportmidi_1_1midi_1ae790448b43b32216ea49a4ea3a38d4f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1ae790448b43b32216ea49a4ea3a38d4f1" kindref="member">init</ref>():</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;initialize<sp/>the<sp/>midi<sp/>module</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.init():<sp/>return<sp/>None</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Call<sp/>the<sp/>initialisation<sp/>function<sp/>before<sp/>using<sp/>the<sp/>midi<sp/>module.</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>is<sp/>safe<sp/>to<sp/>call<sp/>this<sp/>more<sp/>than<sp/>once.</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>_init,<sp/>_pypm</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>_init:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pyportmidi._pyportmidi</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pypm<sp/>=<sp/>pyportmidi._pyportmidi</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pypm.Initialize()</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_init<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atexit.register(quit)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespacepyportmidi_1_1midi_1ab137af1a6f12f955b0b05c088097cebe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1ab137af1a6f12f955b0b05c088097cebe" kindref="member">quit</ref>():</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;uninitialize<sp/>the<sp/>midi<sp/>module</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.quit():<sp/>return<sp/>None</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Called<sp/>automatically<sp/>atexit<sp/>if<sp/>you<sp/>don&apos;t<sp/>call<sp/>it.</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>is<sp/>safe<sp/>to<sp/>call<sp/>this<sp/>function<sp/>more<sp/>than<sp/>once.</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>_init,<sp/>_pypm</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_init:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>find<sp/>all<sp/>Input<sp/>and<sp/>Output<sp/>classes<sp/>and<sp/>close<sp/>them<sp/>first?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pypm.Terminate()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_init<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>_pypm</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_check_init():</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>_init:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;pyportmidi<sp/>not<sp/>initialised.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="namespacepyportmidi_1_1midi_1aefe6f781e4c0438b7367ab38420b40fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1aefe6f781e4c0438b7367ab38420b40fe" kindref="member">get_count</ref>():</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;gets<sp/>the<sp/>number<sp/>of<sp/>devices.</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.get_count():<sp/>return<sp/>num_devices</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Device<sp/>ids<sp/>range<sp/>from<sp/>0<sp/>to<sp/>get_count()<sp/>-1</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pypm.CountDevices()</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="namespacepyportmidi_1_1midi_1a363659de2add2e70b2ff71c3ce1464a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1a363659de2add2e70b2ff71c3ce1464a2" kindref="member">get_default_input_id</ref>():</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;gets<sp/>default<sp/>input<sp/>device<sp/>number</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.get_default_input_id():<sp/>return<sp/>default_id</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>default<sp/>device<sp/>ID<sp/>or<sp/>-1<sp/>if<sp/>there<sp/>are<sp/>no<sp/>devices.</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>result<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>Input()/Ouput()<sp/>class.</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>On<sp/>the<sp/>PC,<sp/>the<sp/>user<sp/>can<sp/>specify<sp/>a<sp/>default<sp/>device<sp/>by</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>setting<sp/>an<sp/>environment<sp/>variable.<sp/>For<sp/>example,<sp/>to<sp/>use<sp/>device<sp/>#1.</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>PM_RECOMMENDED_INPUT_DEVICE=1</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>user<sp/>should<sp/>first<sp/>determine<sp/>the<sp/>available<sp/>device<sp/>ID<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>supplied<sp/>application<sp/>&quot;testin&quot;<sp/>or<sp/>&quot;testout&quot;.</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>general,<sp/>the<sp/>registry<sp/>is<sp/>a<sp/>better<sp/>place<sp/>for<sp/>this<sp/>kind<sp/>of<sp/>info,</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>with<sp/>USB<sp/>devices<sp/>that<sp/>can<sp/>come<sp/>and<sp/>go,<sp/>using<sp/>integers<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>very<sp/>reliable<sp/>for<sp/>device<sp/>identification.<sp/>Under<sp/>Windows,<sp/>if</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PM_RECOMMENDED_OUTPUT_DEVICE<sp/>(or<sp/>PM_RECOMMENDED_INPUT_DEVICE)<sp/>is</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*NOT*<sp/>found<sp/>in<sp/>the<sp/>environment,<sp/>then<sp/>the<sp/>default<sp/>device<sp/>is<sp/>obtained</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>by<sp/>looking<sp/>for<sp/>a<sp/>string<sp/>in<sp/>the<sp/>registry<sp/>under:</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>a<sp/>string.<sp/>The<sp/>number<sp/>of<sp/>the<sp/>first<sp/>device<sp/>with<sp/>a<sp/>substring<sp/>that</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matches<sp/>the<sp/>string<sp/>exactly<sp/>is<sp/>returned.<sp/>For<sp/>example,<sp/>if<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>registry<sp/>is<sp/>&quot;USB&quot;,<sp/>and<sp/>device<sp/>1<sp/>is<sp/>named</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;In<sp/>USB<sp/>MidiSport<sp/>1x1&quot;,<sp/>then<sp/>that<sp/>will<sp/>be<sp/>the<sp/>default</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>input<sp/>because<sp/>it<sp/>contains<sp/>the<sp/>string<sp/>&quot;USB&quot;.</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>addition<sp/>to<sp/>the<sp/>name,<sp/>get_device_info()<sp/>returns<sp/>&quot;interf&quot;,<sp/>which</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is<sp/>the<sp/>interface<sp/>name.<sp/>(The<sp/>&quot;interface&quot;<sp/>is<sp/>the<sp/>underlying<sp/>software</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>system<sp/>or<sp/>API<sp/>used<sp/>by<sp/>PortMidi<sp/>to<sp/>access<sp/>devices.<sp/>Examples<sp/>are</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>MMSystem,<sp/>DirectX<sp/>(not<sp/>implemented),<sp/>ALSA,<sp/>OSS<sp/>(not<sp/>implemented),<sp/>etc.)</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>At<sp/>present,<sp/>the<sp/>only<sp/>Win32<sp/>interface<sp/>is<sp/>&quot;MMSystem&quot;,<sp/>the<sp/>only<sp/>Linux</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interface<sp/>is<sp/>&quot;ALSA&quot;,<sp/>and<sp/>the<sp/>only<sp/>Max<sp/>OS<sp/>X<sp/>interface<sp/>is<sp/>&quot;CoreMIDI&quot;.</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>To<sp/>specify<sp/>both<sp/>the<sp/>interface<sp/>and<sp/>the<sp/>device<sp/>name<sp/>in<sp/>the<sp/>registry,</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>separate<sp/>the<sp/>two<sp/>with<sp/>a<sp/>comma<sp/>and<sp/>a<sp/>space,<sp/>e.g.:</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MMSystem,<sp/>In<sp/>USB<sp/>MidiSport<sp/>1x1</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>this<sp/>case,<sp/>the<sp/>string<sp/>before<sp/>the<sp/>comma<sp/>must<sp/>be<sp/>a<sp/>substring<sp/>of</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>&quot;interf&quot;<sp/>string,<sp/>and<sp/>the<sp/>string<sp/>after<sp/>the<sp/>space<sp/>must<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>substring<sp/>of<sp/>the<sp/>&quot;name&quot;<sp/>name<sp/>string<sp/>in<sp/>order<sp/>to<sp/>match<sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Note:<sp/>in<sp/>the<sp/>current<sp/>release,<sp/>the<sp/>default<sp/>is<sp/>simply<sp/>the<sp/>first<sp/>device</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(the<sp/>input<sp/>or<sp/>output<sp/>device<sp/>with<sp/>the<sp/>lowest<sp/>PmDeviceID).</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pypm.GetDefaultInputDeviceID()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="namespacepyportmidi_1_1midi_1a5fa5844528cd9e0960747caef3a49d72" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1a5fa5844528cd9e0960747caef3a49d72" kindref="member">get_default_output_id</ref>():</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;gets<sp/>default<sp/>output<sp/>device<sp/>number</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.get_default_output_id():<sp/>return<sp/>default_id</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>default<sp/>device<sp/>ID<sp/>or<sp/>-1<sp/>if<sp/>there<sp/>are<sp/>no<sp/>devices.</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>result<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>Input()/Ouput()<sp/>class.</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>On<sp/>the<sp/>PC,<sp/>the<sp/>user<sp/>can<sp/>specify<sp/>a<sp/>default<sp/>device<sp/>by</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>setting<sp/>an<sp/>environment<sp/>variable.<sp/>For<sp/>example,<sp/>to<sp/>use<sp/>device<sp/>#1.</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>PM_RECOMMENDED_OUTPUT_DEVICE=1</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>user<sp/>should<sp/>first<sp/>determine<sp/>the<sp/>available<sp/>device<sp/>ID<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>supplied<sp/>application<sp/>&quot;testin&quot;<sp/>or<sp/>&quot;testout&quot;.</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>general,<sp/>the<sp/>registry<sp/>is<sp/>a<sp/>better<sp/>place<sp/>for<sp/>this<sp/>kind<sp/>of<sp/>info,</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>with<sp/>USB<sp/>devices<sp/>that<sp/>can<sp/>come<sp/>and<sp/>go,<sp/>using<sp/>integers<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>very<sp/>reliable<sp/>for<sp/>device<sp/>identification.<sp/>Under<sp/>Windows,<sp/>if</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PM_RECOMMENDED_OUTPUT_DEVICE<sp/>(or<sp/>PM_RECOMMENDED_INPUT_DEVICE)<sp/>is</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*NOT*<sp/>found<sp/>in<sp/>the<sp/>environment,<sp/>then<sp/>the<sp/>default<sp/>device<sp/>is<sp/>obtained</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>by<sp/>looking<sp/>for<sp/>a<sp/>string<sp/>in<sp/>the<sp/>registry<sp/>under:</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>a<sp/>string.<sp/>The<sp/>number<sp/>of<sp/>the<sp/>first<sp/>device<sp/>with<sp/>a<sp/>substring<sp/>that</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matches<sp/>the<sp/>string<sp/>exactly<sp/>is<sp/>returned.<sp/>For<sp/>example,<sp/>if<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>registry<sp/>is<sp/>&quot;USB&quot;,<sp/>and<sp/>device<sp/>1<sp/>is<sp/>named</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;In<sp/>USB<sp/>MidiSport<sp/>1x1&quot;,<sp/>then<sp/>that<sp/>will<sp/>be<sp/>the<sp/>default</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>input<sp/>because<sp/>it<sp/>contains<sp/>the<sp/>string<sp/>&quot;USB&quot;.</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>addition<sp/>to<sp/>the<sp/>name,<sp/>get_device_info()<sp/>returns<sp/>&quot;interf&quot;,<sp/>which</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is<sp/>the<sp/>interface<sp/>name.<sp/>(The<sp/>&quot;interface&quot;<sp/>is<sp/>the<sp/>underlying<sp/>software</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>system<sp/>or<sp/>API<sp/>used<sp/>by<sp/>PortMidi<sp/>to<sp/>access<sp/>devices.<sp/>Examples<sp/>are</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>MMSystem,<sp/>DirectX<sp/>(not<sp/>implemented),<sp/>ALSA,<sp/>OSS<sp/>(not<sp/>implemented),<sp/>etc.)</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>At<sp/>present,<sp/>the<sp/>only<sp/>Win32<sp/>interface<sp/>is<sp/>&quot;MMSystem&quot;,<sp/>the<sp/>only<sp/>Linux</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interface<sp/>is<sp/>&quot;ALSA&quot;,<sp/>and<sp/>the<sp/>only<sp/>Max<sp/>OS<sp/>X<sp/>interface<sp/>is<sp/>&quot;CoreMIDI&quot;.</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>To<sp/>specify<sp/>both<sp/>the<sp/>interface<sp/>and<sp/>the<sp/>device<sp/>name<sp/>in<sp/>the<sp/>registry,</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>separate<sp/>the<sp/>two<sp/>with<sp/>a<sp/>comma<sp/>and<sp/>a<sp/>space,<sp/>e.g.:</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MMSystem,<sp/>In<sp/>USB<sp/>MidiSport<sp/>1x1</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>this<sp/>case,<sp/>the<sp/>string<sp/>before<sp/>the<sp/>comma<sp/>must<sp/>be<sp/>a<sp/>substring<sp/>of</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>&quot;interf&quot;<sp/>string,<sp/>and<sp/>the<sp/>string<sp/>after<sp/>the<sp/>space<sp/>must<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>substring<sp/>of<sp/>the<sp/>&quot;name&quot;<sp/>name<sp/>string<sp/>in<sp/>order<sp/>to<sp/>match<sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Note:<sp/>in<sp/>the<sp/>current<sp/>release,<sp/>the<sp/>default<sp/>is<sp/>simply<sp/>the<sp/>first<sp/>device</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(the<sp/>input<sp/>or<sp/>output<sp/>device<sp/>with<sp/>the<sp/>lowest<sp/>PmDeviceID).</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pypm.GetDefaultOutputDeviceID()</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="namespacepyportmidi_1_1midi_1ae6999ebd102645244f4de1d46ed31875" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1ae6999ebd102645244f4de1d46ed31875" kindref="member">get_device_info</ref>(an_id):</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>returns<sp/>information<sp/>about<sp/>a<sp/>midi<sp/>device</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.get_device_info(an_id):<sp/>return<sp/>(interf,<sp/>name,<sp/>input,<sp/>output,<sp/>opened)<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interf<sp/>-<sp/>a<sp/>text<sp/>string<sp/>describing<sp/>the<sp/>device<sp/>interface,<sp/>eg<sp/>&apos;ALSA&apos;.</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>name<sp/>-<sp/>a<sp/>text<sp/>string<sp/>for<sp/>the<sp/>name<sp/>of<sp/>the<sp/>device,<sp/>eg<sp/>&apos;Midi<sp/>Through<sp/>Port-0&apos;</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>input<sp/>-<sp/>0,<sp/>or<sp/>1<sp/>if<sp/>the<sp/>device<sp/>is<sp/>an<sp/>input<sp/>device.</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>output<sp/>-<sp/>0,<sp/>or<sp/>1<sp/>if<sp/>the<sp/>device<sp/>is<sp/>an<sp/>output<sp/>device.</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>opened<sp/>-<sp/>0,<sp/>or<sp/>1<sp/>if<sp/>the<sp/>device<sp/>is<sp/>opened.</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>id<sp/>is<sp/>out<sp/>of<sp/>range,<sp/>the<sp/>function<sp/>returns<sp/>None.</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pypm.GetDeviceInfo(an_id)<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classpyportmidi_1_1midi_1_1_input" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_input" kindref="compound">Input</ref>(object):</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Input<sp/>is<sp/>used<sp/>to<sp/>get<sp/>midi<sp/>input<sp/>from<sp/>midi<sp/>devices.</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Input(device_id)</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Input(device_id,<sp/>buffer_size)</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>buffer_size<sp/>-the<sp/>number<sp/>of<sp/>input<sp/>events<sp/>to<sp/>be<sp/>buffered<sp/>waiting<sp/>to<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>read<sp/>using<sp/>Input.read()<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="classpyportmidi_1_1midi_1_1_input_1a1e5682d3a18d1bbe578dad6b3e045296" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_input_1a1e5682d3a18d1bbe578dad6b3e045296" kindref="member">__init__</ref>(self,<sp/>device_id,<sp/>buffer_size=4096):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>buffer_size<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>input<sp/>events<sp/>to<sp/>be<sp/>buffered<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waiting<sp/>to<sp/>be<sp/>read<sp/>using<sp/>Input.read().</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>device_id<sp/>==<sp/>-1:</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>is<sp/>-1,<sp/>not<sp/>a<sp/>valid<sp/>output<sp/>id.<sp/><sp/>-1<sp/>usually<sp/>means<sp/>there<sp/>were<sp/>no<sp/>default<sp/>Output<sp/>devices.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="namespacepyportmidi_1_1midi_1ae6999ebd102645244f4de1d46ed31875" kindref="member">get_device_info</ref>(device_id)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>TypeError:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;an<sp/>integer<sp/>is<sp/>required&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OverflowError:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>OverflowError(</highlight><highlight class="stringliteral">&quot;long<sp/>int<sp/>too<sp/>large<sp/>to<sp/>convert<sp/>to<sp/>int&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>now<sp/>some<sp/>nasty<sp/>looking<sp/>error<sp/>checking,<sp/>to<sp/>provide<sp/>nice<sp/>error<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>messages<sp/>to<sp/>the<sp/>kind,<sp/>lovely,<sp/>midi<sp/>using<sp/>people<sp/>of<sp/>whereever.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interf,<sp/>name,<sp/>input,<sp/>output,<sp/>opened<sp/>=<sp/>r</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>input:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a29de5eae33672eb08a6786d76a6c27d5" kindref="member">_input</ref><sp/>=<sp/>_pypm.Input(device_id,<sp/>buffer_size)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>TypeError:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;an<sp/>integer<sp/>is<sp/>required&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239" refid="classpyportmidi_1_1midi_1_1_input_1a4222850ca83a04bc75ac5549caa5644c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a4222850ca83a04bc75ac5549caa5644c" kindref="member">device_id</ref><sp/>=<sp/>device_id</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>output:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>given<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>input<sp/>id,<sp/>it<sp/>is<sp/>an<sp/>output<sp/>id.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>given<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>input<sp/>id.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>invalid,<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_check_open(self):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a29de5eae33672eb08a6786d76a6c27d5" kindref="member">_input</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;midi<sp/>not<sp/>open.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="classpyportmidi_1_1midi_1_1_input_1aff3fbfe86e2e82ba102734bec02c2fa3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_input_1aff3fbfe86e2e82ba102734bec02c2fa3" kindref="member">close</ref>(self):</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>closes<sp/>a<sp/>midi<sp/>stream,<sp/>flushing<sp/>any<sp/>pending<sp/>buffers.</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input.close():<sp/>return<sp/>None</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PortMidi<sp/>attempts<sp/>to<sp/>close<sp/>open<sp/>streams<sp/>when<sp/>the<sp/>application</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exits<sp/>--<sp/>this<sp/>is<sp/>particularly<sp/>difficult<sp/>under<sp/>Windows.</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a29de5eae33672eb08a6786d76a6c27d5" kindref="member">_input</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._input.Close()</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a29de5eae33672eb08a6786d76a6c27d5" kindref="member">_input</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classpyportmidi_1_1midi_1_1_input_1aa7a889e8dbc30eb8e0494d6fc58ab2f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_input_1aa7a889e8dbc30eb8e0494d6fc58ab2f0" kindref="member">read</ref>(self,<sp/>num_events):</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;reads<sp/>num_events<sp/>midi<sp/>events<sp/>from<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input.read(num_events):<sp/>return<sp/>midi_event_list</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reads<sp/>from<sp/>the<sp/>Input<sp/>buffer<sp/>and<sp/>gives<sp/>back<sp/>midi<sp/>events.</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[[status,data1,data2,data3],timestamp],</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[status,data1,data2,data3],timestamp],...]</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a64fde8348df3a97efa5cc1c8999308c8" kindref="member">_check_open</ref>()</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self._input.Read(num_events)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="classpyportmidi_1_1midi_1_1_input_1ae2c00007ab7f18aae52f4250049e2aec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_input_1ae2c00007ab7f18aae52f4250049e2aec" kindref="member">poll</ref>(self):</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;returns<sp/>true<sp/>if<sp/>there&apos;s<sp/>data,<sp/>or<sp/>false<sp/>if<sp/>not.</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input.poll():<sp/>return<sp/>Bool</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raises<sp/>a<sp/>MidiException<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_input_1a64fde8348df3a97efa5cc1c8999308c8" kindref="member">_check_open</ref>()</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>self._input.Poll()</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r<sp/>==<sp/>_pypm.TRUE:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>r<sp/>==<sp/>_pypm.FALSE:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_text<sp/>=<sp/>GetErrorText(r)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(<sp/>(r,<sp/>err_text)<sp/>)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="classpyportmidi_1_1midi_1_1_output" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output" kindref="compound">Output</ref>(object):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Output<sp/>is<sp/>used<sp/>to<sp/>send<sp/>midi<sp/>to<sp/>an<sp/>output<sp/>device</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Output(device_id)</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Output(device_id,<sp/>latency<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Output(device_id,<sp/>buffer_size<sp/>=<sp/>4096)</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Output(device_id,<sp/>latency,<sp/>buffer_size)</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>buffer_size<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>output<sp/>events<sp/>to<sp/>be<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>buffered<sp/>waiting<sp/>for<sp/>output.<sp/><sp/>(In<sp/>some<sp/>cases<sp/>--<sp/>see<sp/>below<sp/>--<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PortMidi<sp/>does<sp/>not<sp/>buffer<sp/>output<sp/>at<sp/>all<sp/>and<sp/>merely<sp/>passes<sp/>data<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>a<sp/>lower-level<sp/>API,<sp/>in<sp/>which<sp/>case<sp/>buffersize<sp/>is<sp/>ignored.)</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>latency<sp/>is<sp/>the<sp/>delay<sp/>in<sp/>milliseconds<sp/>applied<sp/>to<sp/>timestamps<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>when<sp/>the<sp/>output<sp/>should<sp/>actually<sp/>occur.<sp/>(If<sp/>latency<sp/>is<sp/>&lt;<sp/>0,<sp/>0<sp/>is<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>assumed.)</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>latency<sp/>is<sp/>zero,<sp/>timestamps<sp/>are<sp/>ignored<sp/>and<sp/>all<sp/>output<sp/>is<sp/>delivered</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>immediately.<sp/>If<sp/>latency<sp/>is<sp/>greater<sp/>than<sp/>zero,<sp/>output<sp/>is<sp/>delayed<sp/>until</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>message<sp/>timestamp<sp/>plus<sp/>the<sp/>latency.<sp/>(NOTE:<sp/>time<sp/>is<sp/>measured<sp/></highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>relative<sp/>to<sp/>the<sp/>time<sp/>source<sp/>indicated<sp/>by<sp/>time_proc.<sp/>Timestamps<sp/>are<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>absolute,<sp/>not<sp/>relative<sp/>delays<sp/>or<sp/>offsets.)<sp/>In<sp/>some<sp/>cases,<sp/>PortMidi<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>can<sp/>obtain<sp/>better<sp/>timing<sp/>than<sp/>your<sp/>application<sp/>by<sp/>passing<sp/>timestamps<sp/></highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>along<sp/>to<sp/>the<sp/>device<sp/>driver<sp/>or<sp/>hardware.<sp/>Latency<sp/>may<sp/>also<sp/>help<sp/>you<sp/></highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>synchronize<sp/>midi<sp/>data<sp/>to<sp/>audio<sp/>data<sp/>by<sp/>matching<sp/>midi<sp/>latency<sp/>to<sp/></highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>audio<sp/>buffer<sp/>latency.</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="classpyportmidi_1_1midi_1_1_output_1acace8aa763ce6e90bc578052fc1a7c78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1acace8aa763ce6e90bc578052fc1a7c78" kindref="member">__init__</ref>(self,<sp/>device_id,<sp/>latency<sp/>=<sp/>0,<sp/>buffer_size<sp/>=<sp/>4096):</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Output(device_id)</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output(device_id,<sp/>latency<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output(device_id,<sp/>buffer_size<sp/>=<sp/>4096)</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output(device_id,<sp/>latency,<sp/>buffer_size)</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>buffer_size<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>output<sp/>events<sp/>to<sp/>be<sp/></highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffered<sp/>waiting<sp/>for<sp/>output.<sp/><sp/>(In<sp/>some<sp/>cases<sp/>--<sp/>see<sp/>below<sp/>--<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PortMidi<sp/>does<sp/>not<sp/>buffer<sp/>output<sp/>at<sp/>all<sp/>and<sp/>merely<sp/>passes<sp/>data<sp/></highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>a<sp/>lower-level<sp/>API,<sp/>in<sp/>which<sp/>case<sp/>buffersize<sp/>is<sp/>ignored.)</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>latency<sp/>is<sp/>the<sp/>delay<sp/>in<sp/>milliseconds<sp/>applied<sp/>to<sp/>timestamps<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>the<sp/>output<sp/>should<sp/>actually<sp/>occur.<sp/>(If<sp/>latency<sp/>is<sp/>&lt;<sp/>0,<sp/>0<sp/>is<sp/></highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assumed.)</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>latency<sp/>is<sp/>zero,<sp/>timestamps<sp/>are<sp/>ignored<sp/>and<sp/>all<sp/>output<sp/>is<sp/>delivered</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>immediately.<sp/>If<sp/>latency<sp/>is<sp/>greater<sp/>than<sp/>zero,<sp/>output<sp/>is<sp/>delayed<sp/>until</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>message<sp/>timestamp<sp/>plus<sp/>the<sp/>latency.<sp/>(NOTE:<sp/>time<sp/>is<sp/>measured<sp/></highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relative<sp/>to<sp/>the<sp/>time<sp/>source<sp/>indicated<sp/>by<sp/>time_proc.<sp/>Timestamps<sp/>are<sp/></highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absolute,<sp/>not<sp/>relative<sp/>delays<sp/>or<sp/>offsets.)<sp/>In<sp/>some<sp/>cases,<sp/>PortMidi<sp/></highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>obtain<sp/>better<sp/>timing<sp/>than<sp/>your<sp/>application<sp/>by<sp/>passing<sp/>timestamps<sp/></highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>along<sp/>to<sp/>the<sp/>device<sp/>driver<sp/>or<sp/>hardware.<sp/>Latency<sp/>may<sp/>also<sp/>help<sp/>you<sp/></highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>synchronize<sp/>midi<sp/>data<sp/>to<sp/>audio<sp/>data<sp/>by<sp/>matching<sp/>midi<sp/>latency<sp/>to<sp/></highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>audio<sp/>buffer<sp/>latency.</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a9aa50202e4b4398ab8543249bd765918" kindref="member">_aborted</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>device_id<sp/>==<sp/>-1:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>is<sp/>-1,<sp/>not<sp/>a<sp/>valid<sp/>output<sp/>id.<sp/><sp/>-1<sp/>usually<sp/>means<sp/>there<sp/>were<sp/>no<sp/>default<sp/>Output<sp/>devices.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="namespacepyportmidi_1_1midi_1ae6999ebd102645244f4de1d46ed31875" kindref="member">get_device_info</ref>(device_id)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>TypeError:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;an<sp/>integer<sp/>is<sp/>required&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OverflowError:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>OverflowError(</highlight><highlight class="stringliteral">&quot;long<sp/>int<sp/>too<sp/>large<sp/>to<sp/>convert<sp/>to<sp/>int&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>now<sp/>some<sp/>nasty<sp/>looking<sp/>error<sp/>checking,<sp/>to<sp/>provide<sp/>nice<sp/>error<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>messages<sp/>to<sp/>the<sp/>kind,<sp/>lovely,<sp/>midi<sp/>using<sp/>people<sp/>of<sp/>whereever.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interf,<sp/>name,<sp/>input,<sp/>output,<sp/>opened<sp/>=<sp/>r</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>output:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" kindref="member">_output</ref><sp/>=<sp/>_pypm.Output(device_id,<sp/>latency)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>TypeError:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;an<sp/>integer<sp/>is<sp/>required&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="381" refid="classpyportmidi_1_1midi_1_1_output_1a2740ce8bc8861bedab98a7e56f9cdeb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a2740ce8bc8861bedab98a7e56f9cdeb9" kindref="member">device_id</ref><sp/>=<sp/>device_id</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>input:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>given<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>output<sp/>id,<sp/>it<sp/>is<sp/>an<sp/>input<sp/>id.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>given<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>output<sp/>id.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;Device<sp/>id<sp/>invalid,<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_check_open(self):</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" kindref="member">_output</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;midi<sp/>not<sp/>open.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a9aa50202e4b4398ab8543249bd765918" kindref="member">_aborted</ref>:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(</highlight><highlight class="stringliteral">&quot;midi<sp/>aborted.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="classpyportmidi_1_1midi_1_1_output_1ab239e15331b6dd26d5d131976b46dae7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1ab239e15331b6dd26d5d131976b46dae7" kindref="member">close</ref>(self):</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>closes<sp/>a<sp/>midi<sp/>stream,<sp/>flushing<sp/>any<sp/>pending<sp/>buffers.</highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.close():<sp/>return<sp/>None</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PortMidi<sp/>attempts<sp/>to<sp/>close<sp/>open<sp/>streams<sp/>when<sp/>the<sp/>application</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exits<sp/>--<sp/>this<sp/>is<sp/>particularly<sp/>difficult<sp/>under<sp/>Windows.</highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" kindref="member">_output</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._output.Close()</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" kindref="member">_output</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="classpyportmidi_1_1midi_1_1_output_1a1598727090193872eb21185b926030f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1a1598727090193872eb21185b926030f2" kindref="member">abort</ref>(self):</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;terminates<sp/>outgoing<sp/>messages<sp/>immediately</highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.abort():<sp/>return<sp/>None</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>caller<sp/>should<sp/>immediately<sp/>close<sp/>the<sp/>output<sp/>port;</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>call<sp/>may<sp/>result<sp/>in<sp/>transmission<sp/>of<sp/>a<sp/>partial<sp/>midi<sp/>message.</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>There<sp/>is<sp/>no<sp/>abort<sp/>for<sp/>Midi<sp/>input<sp/>because<sp/>the<sp/>user<sp/>can<sp/>simply</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore<sp/>messages<sp/>in<sp/>the<sp/>buffer<sp/>and<sp/>close<sp/>an<sp/>input<sp/>device<sp/>at</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any<sp/>time.</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" kindref="member">_output</ref>:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._output.Abort()</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a9aa50202e4b4398ab8543249bd765918" kindref="member">_aborted</ref><sp/>=<sp/>1</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="classpyportmidi_1_1midi_1_1_output_1a81513a147adb67589f826852c033d251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1a81513a147adb67589f826852c033d251" kindref="member">write</ref>(self,<sp/>data):</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;writes<sp/>a<sp/>list<sp/>of<sp/>midi<sp/>data<sp/>to<sp/>the<sp/>Output</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.write(data)</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writes<sp/>series<sp/>of<sp/>MIDI<sp/>information<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>list:</highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write([[[status<sp/>&lt;,data1&gt;&lt;,data2&gt;&lt;,data3&gt;],timestamp],</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[status<sp/>&lt;,data1&gt;&lt;,data2&gt;&lt;,data3&gt;],timestamp],...])</highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;data&gt;<sp/>fields<sp/>are<sp/>optional</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>example:<sp/>choose<sp/>program<sp/>change<sp/>1<sp/>at<sp/>time<sp/>20000<sp/>and</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send<sp/>note<sp/>65<sp/>with<sp/>velocity<sp/>100<sp/>500<sp/>ms<sp/>later.</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write([[[0xc0,0,0],20000],[[0x90,60,100],20500]])</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notes:</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>timestamps<sp/>will<sp/>be<sp/>ignored<sp/>if<sp/>latency<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>To<sp/>get<sp/>a<sp/>note<sp/>to<sp/>play<sp/>immediately,<sp/>send<sp/>MIDI<sp/>info<sp/>with</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamp<sp/>read<sp/>from<sp/>function<sp/>Time.</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>understanding<sp/>optional<sp/>data<sp/>fields:</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write([[[0xc0,0,0],20000]])<sp/>is<sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write([[[0xc0],20000]])</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Can<sp/>send<sp/>up<sp/>to<sp/>1024<sp/>elements<sp/>in<sp/>your<sp/>data<sp/>list,<sp/>otherwise<sp/>an<sp/></highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexError<sp/>exception<sp/>is<sp/>raised.</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1ac5b42767502154cafb53942bd21c494e" kindref="member">_check_open</ref>()</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._output.Write(data)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" kindref="member">write_short</ref>(self,<sp/>status,<sp/>data1<sp/>=<sp/>0,<sp/>data2<sp/>=<sp/>0):</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;write_short(status<sp/>&lt;,<sp/>data1&gt;&lt;,<sp/>data2&gt;)</highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.write_short(status)</highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.write_short(status,<sp/>data1<sp/>=<sp/>0,<sp/>data2<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>MIDI<sp/>information<sp/>of<sp/>3<sp/>bytes<sp/>or<sp/>less.</highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>fields<sp/>are<sp/>optional</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>byte<sp/>could<sp/>be:</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xc0<sp/>=<sp/>program<sp/>change</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x90<sp/>=<sp/>note<sp/>on</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etc.</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>bytes<sp/>are<sp/>optional<sp/>and<sp/>assumed<sp/>0<sp/>if<sp/>omitted</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>example:<sp/>note<sp/>65<sp/>on<sp/>with<sp/>velocity<sp/>100</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_short(0x90,65,100)</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1ac5b42767502154cafb53942bd21c494e" kindref="member">_check_open</ref>()</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._output.WriteShort(status,<sp/>data1,<sp/>data2)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="classpyportmidi_1_1midi_1_1_output_1a91215eb76a95600953077b9255d45d92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1a91215eb76a95600953077b9255d45d92" kindref="member">write_sys_ex</ref>(self,<sp/>when,<sp/>msg):</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;writes<sp/>a<sp/>timestamped<sp/>system-exclusive<sp/>midi<sp/>message.</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.write_sys_ex(when,<sp/>msg)</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>-<sp/>can<sp/>be<sp/>a<sp/>*list*<sp/>or<sp/>a<sp/>*string*</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>-<sp/>a<sp/>timestamp<sp/>in<sp/>miliseconds</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>example:</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(assuming<sp/>o<sp/>is<sp/>an<sp/>onput<sp/>MIDI<sp/>stream)</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.write_sys_ex(0,&apos;\\xF0\\x7D\\x10\\x11\\x12\\x13\\xF7&apos;)</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.write_sys_ex(pyportmidi.time(),</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0xF0,0x7D,0x10,0x11,0x12,0x13,0xF7])</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_init()</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1ac5b42767502154cafb53942bd21c494e" kindref="member">_check_open</ref>()</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._output.WriteSysEx(when,<sp/>msg)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="classpyportmidi_1_1midi_1_1_output_1af264528f8d1135a711c6d3e3bdf92dbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1af264528f8d1135a711c6d3e3bdf92dbe" kindref="member">note_on</ref>(self,<sp/>note,<sp/>velocity=None,<sp/>channel<sp/>=<sp/>0):</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;turns<sp/>a<sp/>midi<sp/>note<sp/>on.<sp/><sp/>Note<sp/>must<sp/>be<sp/>off.</highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.note_on(note,<sp/>velocity=None,<sp/>channel<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Turn<sp/>a<sp/>note<sp/>on<sp/>in<sp/>the<sp/>output<sp/>stream.<sp/><sp/>The<sp/>note<sp/>must<sp/>already</highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>off<sp/>for<sp/>this<sp/>to<sp/>work<sp/>correctly.</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>velocity<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>channel<sp/>&lt;=<sp/>15):</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;Channel<sp/>not<sp/>between<sp/>0<sp/>and<sp/>15.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" kindref="member">write_short</ref>(0x90+channel,<sp/>note,<sp/>velocity)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classpyportmidi_1_1midi_1_1_output_1a1d552276c413494bc8a94dc2c3f588c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1a1d552276c413494bc8a94dc2c3f588c4" kindref="member">note_off</ref>(self,<sp/>note,<sp/>velocity=None,<sp/>channel<sp/>=<sp/>0):</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;turns<sp/>a<sp/>midi<sp/>note<sp/>off.<sp/><sp/>Note<sp/>must<sp/>be<sp/>on.</highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.note_off(note,<sp/>velocity=None,<sp/>channel<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Turn<sp/>a<sp/>note<sp/>off<sp/>in<sp/>the<sp/>output<sp/>stream.<sp/><sp/>The<sp/>note<sp/>must<sp/>already</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>on<sp/>for<sp/>this<sp/>to<sp/>work<sp/>correctly.</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>velocity<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>channel<sp/>&lt;=<sp/>15):</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;Channel<sp/>not<sp/>between<sp/>0<sp/>and<sp/>15.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" kindref="member">write_short</ref>(0x80<sp/>+<sp/>channel,<sp/>note,<sp/>velocity)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classpyportmidi_1_1midi_1_1_output_1ad2a82e8023a1dd5a18776d15cc4a9b76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_output_1ad2a82e8023a1dd5a18776d15cc4a9b76" kindref="member">set_instrument</ref>(self,<sp/>instrument_id,<sp/>channel<sp/>=<sp/>0):</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;select<sp/>an<sp/>instrument,<sp/>with<sp/>a<sp/>value<sp/>between<sp/>0<sp/>and<sp/>127</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output.set_instrument(instrument_id,<sp/>channel<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>instrument_id<sp/>&lt;=<sp/>127):</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;Undefined<sp/>instrument<sp/>id:<sp/>%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>instrument_id)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>channel<sp/>&lt;=<sp/>15):</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;Channel<sp/>not<sp/>between<sp/>0<sp/>and<sp/>15.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" kindref="member">write_short</ref>(0xc0+channel,<sp/>instrument_id)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="namespacepyportmidi_1_1midi_1ad2426758f88d23d7208984d5c99ec050" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepyportmidi_1_1midi_1ad2426758f88d23d7208984d5c99ec050" kindref="member">time</ref>():</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;returns<sp/>the<sp/>current<sp/>time<sp/>in<sp/>ms<sp/>of<sp/>the<sp/>PortMidi<sp/>timer</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pyportmidi.time():<sp/>return<sp/>time</highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>time<sp/>is<sp/>reset<sp/>to<sp/>0,<sp/>when<sp/>the<sp/>module<sp/>is<sp/>inited.</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pypm.Time()</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="classpyportmidi_1_1midi_1_1_midi_exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_midi_exception" kindref="compound">MidiException</ref>(Exception):</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;MidiException(errno)<sp/>that<sp/>can<sp/>be<sp/>raised.</highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="classpyportmidi_1_1midi_1_1_midi_exception_1ae960d2b683219c38240d25603a5762bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_midi_exception_1ae960d2b683219c38240d25603a5762bb" kindref="member">__init__</ref>(self,<sp/>value):</highlight></codeline>
<codeline lineno="561" refid="classpyportmidi_1_1midi_1_1_midi_exception_1abe32a7a0db3a0b7cd745c685bbbe7a30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpyportmidi_1_1midi_1_1_midi_exception_1abe32a7a0db3a0b7cd745c685bbbe7a30" kindref="member">parameter</ref><sp/>=<sp/>value</highlight></codeline>
<codeline lineno="562" refid="classpyportmidi_1_1midi_1_1_midi_exception_1a4e07b970a4cd4ea303d2c55406ab531f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classpyportmidi_1_1midi_1_1_midi_exception_1a4e07b970a4cd4ea303d2c55406ab531f" kindref="member">__str__</ref>(self):</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repr(self.<ref refid="classpyportmidi_1_1midi_1_1_midi_exception_1abe32a7a0db3a0b7cd745c685bbbe7a30" kindref="member">parameter</ref>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py"/>
  </compounddef>
</doxygen>
