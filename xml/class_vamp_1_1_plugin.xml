<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_vamp_1_1_plugin" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Vamp::Plugin</compoundname>
    <basecompoundref refid="class_vamp_1_1_plugin_base" prot="public" virt="non-virtual">Vamp::PluginBase</basecompoundref>
    <derivedcompoundref refid="class_amplitude_follower" prot="public" virt="non-virtual">AmplitudeFollower</derivedcompoundref>
    <derivedcompoundref refid="class_fixed_tempo_estimator" prot="public" virt="non-virtual">FixedTempoEstimator</derivedcompoundref>
    <derivedcompoundref refid="class_my_plugin" prot="public" virt="non-virtual">MyPlugin</derivedcompoundref>
    <derivedcompoundref refid="class_percussion_onset_detector" prot="public" virt="non-virtual">PercussionOnsetDetector</derivedcompoundref>
    <derivedcompoundref refid="class_power_spectrum" prot="public" virt="non-virtual">PowerSpectrum</derivedcompoundref>
    <derivedcompoundref refid="class_spectral_centroid" prot="public" virt="non-virtual">SpectralCentroid</derivedcompoundref>
    <derivedcompoundref refid="class_vamp_1_1_host_ext_1_1_plugin_rate_extractor" prot="public" virt="non-virtual">Vamp::HostExt::PluginRateExtractor</derivedcompoundref>
    <derivedcompoundref refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper" prot="public" virt="non-virtual">Vamp::HostExt::PluginWrapper</derivedcompoundref>
    <derivedcompoundref refid="class_vamp_1_1_plugin_host_adapter" prot="public" virt="non-virtual">Vamp::PluginHostAdapter</derivedcompoundref>
    <derivedcompoundref refid="class_zero_crossing" prot="public" virt="non-virtual">ZeroCrossing</derivedcompoundref>
    <includes refid="libvamp_2vamp-sdk_2plugin_8h" local="no">vamp-sdk/Plugin.h</includes>
    <innerclass refid="struct_vamp_1_1_plugin_1_1_feature" prot="public">Vamp::Plugin::Feature</innerclass>
    <innerclass refid="struct_vamp_1_1_plugin_1_1_output_descriptor" prot="public">Vamp::Plugin::OutputDescriptor</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bc" prot="public" static="no">
        <name>InputDomain</name>
        <enumvalue id="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcad4a9f31b958a43a9757af7893aa2e7ff" prot="public">
          <name>TimeDomain</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcaa30e7877ab33f76acbdca28607e6ab53" prot="public">
          <name>FrequencyDomain</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="152" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vamp_1_1_plugin_1a30f531b8fb69fac41a24e3d2a6a08ed9" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_vamp_1_1_plugin_1_1_output_descriptor" kindref="compound">OutputDescriptor</ref> &gt;</type>
        <definition>typedef std::vector&lt;OutputDescriptor&gt; Vamp::Plugin::OutputList</definition>
        <argsstring></argsstring>
        <name>OutputList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="327" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vamp_1_1_plugin_1a0730bc72c87fa02eb8d2854b233f7be1" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_vamp_1_1_plugin_1_1_feature" kindref="compound">Feature</ref> &gt;</type>
        <definition>typedef std::vector&lt;Feature&gt; Vamp::Plugin::FeatureList</definition>
        <argsstring></argsstring>
        <name>FeatureList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="385" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" prot="public" static="no">
        <type><ref refid="xllist_8c_1a03a3bd19ed9a28af3660a6c7b77249c2" kindref="member">std::map</ref>&lt; <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>, <ref refid="class_vamp_1_1_plugin_1a0730bc72c87fa02eb8d2854b233f7be1" kindref="member">FeatureList</ref> &gt;</type>
        <definition>typedef std::map&lt;int, FeatureList&gt; Vamp::Plugin::FeatureSet</definition>
        <argsstring></argsstring>
        <name>FeatureSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="387" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_vamp_1_1_plugin_1a59b9dd82a4f4eb946cd0474cc81abc23" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float Vamp::Plugin::m_inputSampleRate</definition>
        <argsstring></argsstring>
        <name>m_inputSampleRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="436" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vamp_1_1_plugin_1a42d3096f9c1f58b1876024cd8d9ab80b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Vamp::Plugin::~Plugin</definition>
        <argsstring>()</argsstring>
        <name>~Plugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="127" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>virtual bool Vamp::Plugin::initialise</definition>
        <argsstring>(size_t inputChannels, size_t stepSize, size_t blockSize)=0</argsstring>
        <name>initialise</name>
        <reimplementedby refid="class_my_plugin_1a4ab9a13bc22e053361bf7440690cc6d7">initialise</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1a349c528260622308f3850bcda8a448ab">initialise</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1aa7500a4ffbc4653baaf5101defdb37f5">initialise</reimplementedby>
        <reimplementedby refid="class_zero_crossing_1af21bbcc87a6eb7875dfab7d86222dccc">initialise</reimplementedby>
        <reimplementedby refid="class_spectral_centroid_1aab1ae16f5c68e2b319668f447908cedb">initialise</reimplementedby>
        <reimplementedby refid="class_amplitude_follower_1aeb727e44ee8ad1aceb90964d20f8d90d">initialise</reimplementedby>
        <reimplementedby refid="class_power_spectrum_1ae2d046334c4bede5be72a0d97e4dfb29">initialise</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1aa5a1f8290d8e9a315695584dcb3ad137">initialise</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1add6a2f1ee7e47bd97fa599cead14b738">initialise</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_summarising_adapter_1a1e994576d43efe103bf8f83b69716745">initialise</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter_1a72d201eca10ec73bf16e07984f58f94c">initialise</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8">initialise</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1ade0473c8fc54636431967cbf41649c1c">initialise</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>inputChannels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise a plugin to prepare it for use with the given number of input channels, step size (window increment, in sample frames) and block size (window size, in sample frames).</para><para>The input sample rate should have been already specified at construction time.</para><para>Return true for successful initialisation, false if the number of input channels, step size and/or block size cannot be supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1aad67dc9d0052417511070c4ebcfbf24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>virtual void Vamp::Plugin::reset</definition>
        <argsstring>()=0</argsstring>
        <name>reset</name>
        <reimplementedby refid="class_my_plugin_1a135adf01e28932b74f4e166f0c989c95">reset</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1a9b1075e992cd9599764ef3881fb91d1a">reset</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1ac41708397255400c6682fee6c1b3d45f">reset</reimplementedby>
        <reimplementedby refid="class_zero_crossing_1a9ae6c4a31ea027dceb1e97ead807e228">reset</reimplementedby>
        <reimplementedby refid="class_spectral_centroid_1a9b5f5581691ff8f46bb7674d8d74395c">reset</reimplementedby>
        <reimplementedby refid="class_amplitude_follower_1acebd835e80e84669df078fbd7591d8f7">reset</reimplementedby>
        <reimplementedby refid="class_power_spectrum_1a091ba21e1697ea4208f42e8295c389d9">reset</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ad19cc0614ba41cdc26ef3394c5146fe6">reset</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1a5d54c5bbd76bc27b7a243827148afeaa">reset</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_summarising_adapter_1a3402381d145d507bd26d1a67e3616911">reset</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter_1a984a12b5b4cb0be1e2f7a0aa84106c4c">reset</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a131fd9fe8a1795d7370d8a721176868a">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the plugin after use, to prepare it for another clean run. Not called for the first initialisation (i.e. initialise must also do a reset). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1adfbdde456a19b4751dfa65dfa72e5458" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bc" kindref="member">InputDomain</ref></type>
        <definition>virtual InputDomain Vamp::Plugin::getInputDomain</definition>
        <argsstring>() const  =0</argsstring>
        <name>getInputDomain</name>
        <reimplementedby refid="class_my_plugin_1a5f9677ca1cc7f2df4a30101cf2b89611">getInputDomain</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1a4f6954267696ee5bfa7dd1c4a6cfa92a">getInputDomain</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1a055689c9b41b0945e8d3cdbc3b8c3a2e">getInputDomain</reimplementedby>
        <reimplementedby refid="class_zero_crossing_1aafe2ce6ebd353a14c40db7e8e60f4051">getInputDomain</reimplementedby>
        <reimplementedby refid="class_spectral_centroid_1a0ec2cb74c1c5f6e57d0bd9dcf7c8f469">getInputDomain</reimplementedby>
        <reimplementedby refid="class_amplitude_follower_1afc07a389b5f922b944b0350fd232d2eb">getInputDomain</reimplementedby>
        <reimplementedby refid="class_power_spectrum_1ae04e0e34847a93f3444d04c802ee56ef">getInputDomain</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a031aa818fd48fd0f4b5e1bf80c032870">getInputDomain</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1a9c5239a4da67f1a426cd059e1a2856eb">getInputDomain</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter_1a376fa97a1c721255541fe35d71368976">getInputDomain</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the plugin&apos;s required input domain.</para><para>If this is TimeDomain, the samples provided to the <ref refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" kindref="member">process()</ref> function (below) will be in the time domain, as for a traditional audio processing plugin.</para><para>If this is FrequencyDomain, the host will carry out a windowed <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> of size equal to the negotiated block size on the data before passing the frequency bin data in to <ref refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" kindref="member">process()</ref>. The input data for the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> will be rotated so as to place the origin in the centre of the block. The plugin does not get to choose the window type <ndash/> the host will either let the user do so, or will use a Hanning window. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1aa529adf83f87a603954eb31407602aac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Vamp::Plugin::getPreferredBlockSize</definition>
        <argsstring>() const </argsstring>
        <name>getPreferredBlockSize</name>
        <reimplementedby refid="class_my_plugin_1aa9763dd2f57976688be8dc209c5665df">getPreferredBlockSize</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1a410c0b47c6c849d7ed9b726b84402ad0">getPreferredBlockSize</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1a68b8569b71504a0478caf990dbe30683">getPreferredBlockSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a2c62a656313a819650656643a867ad01">getPreferredBlockSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1ad5e0ea8042bdec4dd18428991117e07a">getPreferredBlockSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter_1a4cf40d09d02022b1962ff17bb0324ea5">getPreferredBlockSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a21e45180b19873f9ab69fe7a4e184a03">getPreferredBlockSize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the preferred block size (window size <ndash/> the number of sample frames passed in each block to the <ref refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" kindref="member">process()</ref> function). This should be called before <ref refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" kindref="member">initialise()</ref>.</para><para>A plugin that can handle any block size may return 0. The final block size will be set in the <ref refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" kindref="member">initialise()</ref> call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="179" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1a514c716c22f81c055f19b56c3f882567" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Vamp::Plugin::getPreferredStepSize</definition>
        <argsstring>() const </argsstring>
        <name>getPreferredStepSize</name>
        <reimplementedby refid="class_my_plugin_1aefb4cdfbd98d363bac0e4343b944a08e">getPreferredStepSize</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1a733824891e11c306a7a678534b89b968">getPreferredStepSize</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1ad450bb7e7df559ae3d68dfbfb085676f">getPreferredStepSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a0137d93d7019bacc31104836fb4d352e">getPreferredStepSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a2e66d009df69c951001e5d2786973d60">getPreferredStepSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1a859ad5d59402691daed3cf1af1899ebe">getPreferredStepSize</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter_1ad979af9f1cbf2eeb16f4eaedb4a4f565">getPreferredStepSize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the preferred step size (window increment <ndash/> the distance in sample frames between the start frames of consecutive blocks passed to the <ref refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" kindref="member">process()</ref> function) for the plugin. This should be called before <ref refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" kindref="member">initialise()</ref>.</para><para>A plugin may return 0 if it has no particular interest in the step size. In this case, the host should make the step size equal to the block size if the plugin is accepting input in the time domain. If the plugin is accepting input in the frequency domain, the host may use any step size. The final step size will be set in the <ref refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" kindref="member">initialise()</ref> call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="194" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1a267b42e866df3cf0d190893e8096f525" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Vamp::Plugin::getMinChannelCount</definition>
        <argsstring>() const </argsstring>
        <name>getMinChannelCount</name>
        <reimplementedby refid="class_my_plugin_1adaf7b214e75222cdfdbc795a36d0ca1e">getMinChannelCount</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a2b28f1cf37d46a514f1e1411a6037bf8">getMinChannelCount</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1a67d1198c0e58d3f0076d0eda599ff28d">getMinChannelCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the minimum supported number of input channels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="199" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1a2c5ab12b6fa4847cb244bd1e9cb3ae5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t Vamp::Plugin::getMaxChannelCount</definition>
        <argsstring>() const </argsstring>
        <name>getMaxChannelCount</name>
        <reimplementedby refid="class_my_plugin_1a5c9146dd98f82d9a40b37b05c509daae">getMaxChannelCount</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a985eb21f1827bfbc3950d6871b107a58">getMaxChannelCount</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1a25091905e97e39d515d8ffc1a9f2b9e0">getMaxChannelCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum supported number of input channels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="204" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1a37b9f286c79c0d682c7fdfddaebf732a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a30f531b8fb69fac41a24e3d2a6a08ed9" kindref="member">OutputList</ref></type>
        <definition>virtual OutputList Vamp::Plugin::getOutputDescriptors</definition>
        <argsstring>() const  =0</argsstring>
        <name>getOutputDescriptors</name>
        <reimplementedby refid="class_my_plugin_1a1905e7875803d51df6ffd5e7643e5db0">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_zero_crossing_1ac9d590a6feb1fc9a37d7892aefe2b688">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_spectral_centroid_1a894ca9740927102bb80b56b5e9e95877">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_amplitude_follower_1a043e3c3db77d76267cd8069e1485bf26">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_power_spectrum_1a6aac5f93e3a8c033026d739fed427242">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1aa4537aa0eb58a67d6e824d46924cf782">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1a83121c205a723fe6297e2bf8870622a4">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a02c8c01972affeea58b091335e791ace">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1ae02670cca9d25cdc4100cbe7a12e3e68">getOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a85a027f5859efb31d315205e234e94c0">getOutputDescriptors</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the outputs of this plugin. An output&apos;s index in this list is used as its numeric index when looking it up in the FeatureSet returned from the <ref refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" kindref="member">process()</ref> call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" kindref="member">FeatureSet</ref></type>
        <definition>virtual FeatureSet Vamp::Plugin::process</definition>
        <argsstring>(const float *const *inputBuffers, RealTime timestamp)=0</argsstring>
        <name>process</name>
        <reimplementedby refid="class_my_plugin_1ac2fc9b4ea10d472211bd319ecd870611">process</reimplementedby>
        <reimplementedby refid="class_zero_crossing_1abf4aaa6fd8cc03de63f4e1e8942633da">process</reimplementedby>
        <reimplementedby refid="class_spectral_centroid_1aca96c70e7e75c9e4a7db38485018914c">process</reimplementedby>
        <reimplementedby refid="class_power_spectrum_1aa5664ffc2b37a16db471fae791c1f55f">process</reimplementedby>
        <reimplementedby refid="class_amplitude_follower_1a48d0f95cac31ffd190cff89b50a2a5bd">process</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1adfd989812b3e0cb8f4b498f56a5a9614">process</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1a1cf76b0e55cf4ed3da095cffcdeaec3c">process</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1afca78043c2843c1d45019983515e23f7">process</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_summarising_adapter_1ab375afa4d24bafd57b838fee1767359f">process</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter_1a0867737693c16801d40a6adbde07ec07">process</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1a82c29a512c0587ea0121eee4b0c2a684">process</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter_1a294e663b4d9ec885791faa1b440571ed">process</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a262206b978d9de28ee4bb35f437e915e">process</reimplementedby>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>inputBuffers</declname>
        </param>
        <param>
          <type><ref refid="struct_vamp_1_1_real_time" kindref="compound">RealTime</ref></type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process a single block of input data.</para><para>If the plugin&apos;s inputDomain is TimeDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize consecutive audio samples (the host will zero-pad as necessary). The timestamp in this case will be the real time in seconds of the start of the supplied block of samples.</para><para>If the plugin&apos;s inputDomain is FrequencyDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize/2+1 consecutive pairs of real and imaginary component floats corresponding to bins 0..(blockSize/2) of the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> output. That is, bin 0 (the first pair of floats) contains the DC output, up to bin blockSize/2 which contains the Nyquist-frequency output. There will therefore be blockSize+2 floats per channel in total. The timestamp will be the real time in seconds of the centre of the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> input window (i.e. the very first block passed to process might contain the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> of half a block of zero samples and the first half-block of the actual data, with a timestamp of zero).</para><para>Return any features that have become available after this process call. (These do not necessarily have to fall within the process block, except for OneSamplePerStep outputs.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1aeca2a26e658ba0314ba90d25dd2195d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" kindref="member">FeatureSet</ref></type>
        <definition>virtual FeatureSet Vamp::Plugin::getRemainingFeatures</definition>
        <argsstring>()=0</argsstring>
        <name>getRemainingFeatures</name>
        <reimplementedby refid="class_my_plugin_1a4bc66da2111b34cfb2967805c2fa38c4">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_zero_crossing_1a70996d1b7166e303903daf92a9a37ad8">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_spectral_centroid_1a83ba39f0870a2f86837605a958dfab1a">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_power_spectrum_1ac8a9661a785d38f4c5ce8ca2d53e69f9">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_amplitude_follower_1a368606f643b88e0df0823d85e36f030c">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_percussion_onset_detector_1ad3d6767ed137783e84f842b4d4732ffa">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_fixed_tempo_estimator_1a4965cf99be77fc4d1de51e11d83936b0">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a1dce55a75a32b08fc56a52a300d9fcbe">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_summarising_adapter_1ae5005272410cdf58054e1d5e86f281cc">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_plugin_host_adapter_1ad3f5f16a89a821da2ec1186fd2062e83">getRemainingFeatures</reimplementedby>
        <reimplementedby refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a8771cba75552aaa1340b68de9bf1659c">getRemainingFeatures</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>After all blocks have been processed, calculate and return any remaining features derived from the complete input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_plugin_1abe13b3997a69fbcc09e2213faa352f91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
        <definition>virtual std::string Vamp::Plugin::getType</definition>
        <argsstring>() const </argsstring>
        <name>getType</name>
        <reimplements refid="class_vamp_1_1_plugin_base_1aec6beb4e410ee3a69d7f87c3715cd646">getType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to distinguish between <ref refid="class_vamp_1_1_plugin" kindref="compound">Vamp::Plugin</ref> and other potential sibling subclasses of <ref refid="class_vamp_1_1_plugin_base" kindref="compound">PluginBase</ref>. Do not reimplement this function in your subclass. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="430" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="430" bodyend="430"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_vamp_1_1_plugin_1a1b78c4f46c72ef345ed27f0b9bf20ac9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Vamp::Plugin::Plugin</definition>
        <argsstring>(float inputSampleRate)</argsstring>
        <name>Plugin</name>
        <param>
          <type>float</type>
          <declname>inputSampleRate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="433" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="433" bodyend="434"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_vamp_1_1_plugin" kindref="compound">Vamp::Plugin</ref> is a base class for plugin instance classes that provide feature extraction from audio or related data.</para><para>In most cases, the input will be audio and the output will be a stream of derived data at a lower sampling resolution than the input.</para><para>Note that this class inherits several abstract methods from <ref refid="class_vamp_1_1_plugin_base" kindref="compound">PluginBase</ref>. These must be implemented by the subclass.</para><para>PLUGIN LIFECYCLE</para><para><ref refid="struct_vamp_1_1_plugin_1_1_feature" kindref="compound">Feature</ref> extraction plugins are managed differently from real-time plugins (such as VST effects). The main difference is that the parameters for a feature extraction plugin are configured before the plugin is used, and do not change during use.</para><para><orderedlist>
<listitem><para>Host constructs the plugin, passing it the input sample rate. The plugin may do basic initialisation, but should not do anything computationally expensive at this point. You must make sure your plugin is cheap to construct, otherwise you&apos;ll seriously affect the startup performance of almost all hosts. If you have serious initialisation to do, the proper place is in <ref refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" kindref="member">initialise()</ref> (step 5).</para></listitem><listitem><para>Host may query the plugin&apos;s available outputs.</para></listitem><listitem><para>Host queries programs and parameter descriptors, and may set some or all of them. Parameters that are not explicitly set should take their default values as specified in the parameter descriptor. When a program is set, the parameter values may change and the host will re-query them to check.</para></listitem><listitem><para>Host queries the preferred step size, block size and number of channels. These may all vary depending on the parameter values. (Note however that you cannot make the number of distinct outputs dependent on parameter values.)</para></listitem><listitem><para><ref refid="class_vamp_1_1_plugin" kindref="compound">Plugin</ref> is properly initialised with a call to initialise. This fixes the step size, block size, and number of channels, as well as all of the parameter and program settings. If the values passed in to initialise do not match the plugin&apos;s advertised preferred values from step 4, the plugin may refuse to initialise and return false (although if possible it should accept the new values). Any computationally expensive setup code should take place here.</para></listitem><listitem><para>Host finally checks the number of values, resolution, extents etc per output (which may vary depending on the number of channels, step size and block size as well as the parameter values).</para></listitem><listitem><para>Host will repeatedly call the process method to pass in blocks of input data. This method may return features extracted from that data (if the plugin is causal).</para></listitem><listitem><para>Host will call getRemainingFeatures exactly once, after all the input data has been processed. This may return any non-causal or leftover features.</para></listitem><listitem><para>At any point after initialise was called, the host may optionally call the reset method and restart processing. (This does not mean it can change the parameters, which are fixed from initialise until destruction.)</para></listitem></orderedlist>
</para><para>A plugin does not need to handle the case where setParameter or selectProgram is called after initialise has been called. It&apos;s the host&apos;s responsibility not to do that. Similarly, the plugin may safely assume that initialise is called no more than once. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="8813">
        <label>Vamp::Plugin</label>
        <link refid="class_vamp_1_1_plugin"/>
        <childnode refid="8814" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8829">
        <label>ZeroCrossing</label>
        <link refid="class_zero_crossing"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8823">
        <label>Vamp::HostExt::PluginBufferingAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter"/>
        <childnode refid="8822" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8825">
        <label>Vamp::HostExt::PluginInputDomainAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_input_domain_adapter"/>
        <childnode refid="8822" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8819">
        <label>PowerSpectrum</label>
        <link refid="class_power_spectrum"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8817">
        <label>MyPlugin</label>
        <link refid="class_my_plugin"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8814">
        <label>Vamp::PluginBase</label>
        <link refid="class_vamp_1_1_plugin_base"/>
      </node>
      <node id="8818">
        <label>PercussionOnsetDetector</label>
        <link refid="class_percussion_onset_detector"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8820">
        <label>SpectralCentroid</label>
        <link refid="class_spectral_centroid"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8824">
        <label>Vamp::HostExt::PluginChannelAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_channel_adapter"/>
        <childnode refid="8822" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8821">
        <label>Vamp::HostExt::PluginRateExtractor</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_rate_extractor"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8828">
        <label>Vamp::PluginHostAdapter</label>
        <link refid="class_vamp_1_1_plugin_host_adapter"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8815">
        <label>AmplitudeFollower</label>
        <link refid="class_amplitude_follower"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8816">
        <label>FixedTempoEstimator</label>
        <link refid="class_fixed_tempo_estimator"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8827">
        <label>Vamp::HostExt::PluginSummarisingAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_summarising_adapter"/>
        <childnode refid="8822" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8822">
        <label>Vamp::HostExt::PluginWrapper</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper"/>
        <childnode refid="8813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8826">
        <label>Vamp::HostExt::PluginLoader::Impl::PluginDeletionNotifyAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_loader_1_1_impl_1_1_plugin_deletion_notify_adapter"/>
        <childnode refid="8822" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8830">
        <label>Vamp::Plugin</label>
        <link refid="class_vamp_1_1_plugin"/>
        <childnode refid="8831" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8831">
        <label>Vamp::PluginBase</label>
        <link refid="class_vamp_1_1_plugin_base"/>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" line="125" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/Plugin.h" bodystart="124" bodyend="437"/>
    <listofallmembers>
      <member refid="class_vamp_1_1_plugin_1a0730bc72c87fa02eb8d2854b233f7be1" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>FeatureList</name></member>
      <member refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>FeatureSet</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcaa30e7877ab33f76acbdca28607e6ab53" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>FrequencyDomain</name></member>
      <member refid="class_vamp_1_1_plugin_base_1ae20b78e081f13a5d71b17e89e05d48e2" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getCopyright</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a24e77eccf1bdfbbca3c79bb25e8799b3" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getCurrentProgram</name></member>
      <member refid="class_vamp_1_1_plugin_base_1ab210db7ce8f2eaa6cfddf2c7e64555ad" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getDescription</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a0d1947bb05097718af83eefe7a1910cd" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getIdentifier</name></member>
      <member refid="class_vamp_1_1_plugin_1adfbdde456a19b4751dfa65dfa72e5458" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getInputDomain</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a6d54bf690c421c7865dccdfd0dda23a8" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getMaker</name></member>
      <member refid="class_vamp_1_1_plugin_1a2c5ab12b6fa4847cb244bd1e9cb3ae5e" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getMaxChannelCount</name></member>
      <member refid="class_vamp_1_1_plugin_1a267b42e866df3cf0d190893e8096f525" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getMinChannelCount</name></member>
      <member refid="class_vamp_1_1_plugin_base_1ada907f5fa10e503005bdf445f03f7adf" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getName</name></member>
      <member refid="class_vamp_1_1_plugin_1a37b9f286c79c0d682c7fdfddaebf732a" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getOutputDescriptors</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a97ababcd45348ceec998d0f8e0f38bf7" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getParameter</name></member>
      <member refid="class_vamp_1_1_plugin_base_1aac3e49b3b66cacfbb768dfdf07444f21" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getParameterDescriptors</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a315c884db72db5cef0891eaccb6d12cc" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getPluginVersion</name></member>
      <member refid="class_vamp_1_1_plugin_1aa529adf83f87a603954eb31407602aac" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getPreferredBlockSize</name></member>
      <member refid="class_vamp_1_1_plugin_1a514c716c22f81c055f19b56c3f882567" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getPreferredStepSize</name></member>
      <member refid="class_vamp_1_1_plugin_base_1abb307c60bdb981d5f5af50c3c4ae84af" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getPrograms</name></member>
      <member refid="class_vamp_1_1_plugin_1aeca2a26e658ba0314ba90d25dd2195d6" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>getRemainingFeatures</name></member>
      <member refid="class_vamp_1_1_plugin_1abe13b3997a69fbcc09e2213faa352f91" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getType</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a8fd2c48291c64b790f0efb8948508dcf" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>getVampApiVersion</name></member>
      <member refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>initialise</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bc" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>InputDomain</name></member>
      <member refid="class_vamp_1_1_plugin_1a59b9dd82a4f4eb946cd0474cc81abc23" prot="protected" virt="non-virtual"><scope>Vamp::Plugin</scope><name>m_inputSampleRate</name></member>
      <member refid="class_vamp_1_1_plugin_1a30f531b8fb69fac41a24e3d2a6a08ed9" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>OutputList</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a3b6bb4bbd86affe1ca9deceea1aad4f8" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>ParameterList</name></member>
      <member refid="class_vamp_1_1_plugin_1a1b78c4f46c72ef345ed27f0b9bf20ac9" prot="protected" virt="non-virtual"><scope>Vamp::Plugin</scope><name>Plugin</name></member>
      <member refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>process</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a7f66f00437b21e5f694fe02356b12f20" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>ProgramList</name></member>
      <member refid="class_vamp_1_1_plugin_1aad67dc9d0052417511070c4ebcfbf24f" prot="public" virt="pure-virtual"><scope>Vamp::Plugin</scope><name>reset</name></member>
      <member refid="class_vamp_1_1_plugin_base_1aadd3a547ef140bae200473a9518e3353" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>selectProgram</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a6c718ce822f7b73b98940d59dcaa9366" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>setParameter</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcad4a9f31b958a43a9757af7893aa2e7ff" prot="public" virt="non-virtual"><scope>Vamp::Plugin</scope><name>TimeDomain</name></member>
      <member refid="class_vamp_1_1_plugin_1a42d3096f9c1f58b1876024cd8d9ab80b" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>~Plugin</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a3773b37c658cf22d7f135c575a28f5c5" prot="public" virt="virtual"><scope>Vamp::Plugin</scope><name>~PluginBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
