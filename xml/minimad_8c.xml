<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="minimad_8c" kind="file" language="C++">
    <compoundname>minimad.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="yes">mad.h</includes>
    <incdepgraph>
      <node id="10719">
        <label>sys/stat.h</label>
      </node>
      <node id="10720">
        <label>sys/mman.h</label>
      </node>
      <node id="10716">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c</label>
        <link refid="minimad.c"/>
        <childnode refid="10717" relation="include">
        </childnode>
        <childnode refid="10718" relation="include">
        </childnode>
        <childnode refid="10719" relation="include">
        </childnode>
        <childnode refid="10720" relation="include">
        </childnode>
        <childnode refid="10721" relation="include">
        </childnode>
      </node>
      <node id="10718">
        <label>unistd.h</label>
      </node>
      <node id="10721">
        <label>mad.h</label>
      </node>
      <node id="10717">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structbuffer" prot="public">buffer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="minimad_8c_1a7e3de0f626a5151e8e2563a9129e3cc8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int decode</definition>
        <argsstring>(unsigned char const *, unsigned long)</argsstring>
        <name>decode</name>
        <param>
          <type>unsigned char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <defname>start</defname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>long</declname>
          <defname>length</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" line="38" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" bodystart="196" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="minimad_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" line="40" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" bodystart="40" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="minimad_8c_1af36158780d8caa6c3eeb54ce21e8d12d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3" kindref="member">mad_flow</ref></type>
        <definition>static enum mad_flow input</definition>
        <argsstring>(void *data, struct mad_stream *stream)</argsstring>
        <name>input</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__stream" kindref="compound">mad_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" line="40" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" bodystart="84" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="minimad_8c_1a4b4c68b8f02c7203cf55e09059fb8b24" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>signed <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static signed int scale</definition>
        <argsstring>(mad_fixed_t sample)</argsstring>
        <name>scale</name>
        <param>
          <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" line="108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="minimad_8c_1ac3c330636663a22ed78be1f9c66b35dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3" kindref="member">mad_flow</ref></type>
        <definition>static enum mad_flow output</definition>
        <argsstring>(void *data, struct mad_header const *header, struct mad_pcm *pcm)</argsstring>
        <name>output</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__header" kindref="compound">mad_header</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__pcm" kindref="compound">mad_pcm</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" line="108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" bodystart="130" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="minimad_8c_1afa6f5ceb26bb019d69ab7b0c873d83dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3" kindref="member">mad_flow</ref></type>
        <definition>static enum mad_flow error</definition>
        <argsstring>(void *data, struct mad_stream *stream, struct mad_frame *frame)</argsstring>
        <name>error</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__stream" kindref="compound">mad_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__frame" kindref="compound">mad_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" line="108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c" bodystart="171" bodyend="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libmad<sp/>-<sp/>MPEG<sp/>audio<sp/>decoder<sp/>library</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2004<sp/>Underbit<sp/>Technologies,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>minimad.c,v<sp/>1.2<sp/>2005-09-12<sp/>07:01:30<sp/>dmazzoni<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;mad.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>perhaps<sp/>the<sp/>simplest<sp/>example<sp/>use<sp/>of<sp/>the<sp/>MAD<sp/>high-level<sp/>API.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Standard<sp/>input<sp/>is<sp/>mapped<sp/>into<sp/>memory<sp/>via<sp/>mmap(),<sp/>then<sp/>the<sp/>high-level<sp/>API</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>is<sp/>invoked<sp/>with<sp/>three<sp/>callbacks:<sp/>input,<sp/>output,<sp/>and<sp/>error.<sp/>The<sp/>output</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>callback<sp/>converts<sp/>MAD&apos;s<sp/>high-resolution<sp/>PCM<sp/>samples<sp/>to<sp/>16<sp/>bits,<sp/>then</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>writes<sp/>them<sp/>to<sp/>standard<sp/>output<sp/>in<sp/>little-endian,<sp/>stereo-interleaved</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>format.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="moxc_8c_1ae754a0f850e267dd2739e1ee8d0f031c" kindref="member">decode</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="minimad_8c_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="minimad_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cmdline_8c_1aaffeb1bf2056ea44af5b5d0ee4d6ff07" kindref="member">argc</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cmdline_8c_1ad407d5ba91709bd9b092003858600723" kindref="member">argv</ref>[])</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>stat;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdm;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fstat(STDIN_FILENO,<sp/>&amp;stat)<sp/>==<sp/>-1<sp/>||</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat.st_size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>fdm<sp/>=<sp/>mmap(0,<sp/>stat.st_size,<sp/>PROT_READ,<sp/>MAP_SHARED,<sp/>STDIN_FILENO,<sp/>0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fdm<sp/>==<sp/>MAP_FAILED)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="moxc_8c_1ae754a0f850e267dd2739e1ee8d0f031c" kindref="member">decode</ref>(fdm,<sp/>stat.st_size);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(munmap(fdm,<sp/>stat.st_size)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>private<sp/>message<sp/>structure.<sp/>A<sp/>generic<sp/>pointer<sp/>to<sp/>this<sp/>structure</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>is<sp/>passed<sp/>to<sp/>each<sp/>of<sp/>the<sp/>callback<sp/>functions.<sp/>Put<sp/>here<sp/>any<sp/>data<sp/>you<sp/>need</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>to<sp/>access<sp/>from<sp/>within<sp/>the<sp/>callbacks.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structbuffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="71" refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="72" refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>input<sp/>callback.<sp/>The<sp/>purpose<sp/>of<sp/>this<sp/>callback<sp/>is<sp/>to<sp/>(re)fill</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>the<sp/>stream<sp/>buffer<sp/>which<sp/>is<sp/>to<sp/>be<sp/>decoded.<sp/>In<sp/>this<sp/>example,<sp/>an<sp/>entire<sp/>file</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>has<sp/>been<sp/>mapped<sp/>into<sp/>memory,<sp/>so<sp/>we<sp/>just<sp/>call<sp/>mad_stream_buffer()<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>address<sp/>and<sp/>length<sp/>of<sp/>the<sp/>mapping.<sp/>When<sp/>this<sp/>callback<sp/>is<sp/>called<sp/>a<sp/>second</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>time,<sp/>we<sp/>are<sp/>finished<sp/>decoding.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3" kindref="member">mad_flow</ref><sp/>input(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__stream" kindref="compound">mad_stream</ref><sp/>*stream)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref><sp/>=<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer-&gt;<ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3ac571b8cfa11b3410216ada267dc3cc58" kindref="member">MAD_FLOW_STOP</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1ad093dc109695de5cbd7bb50b7f64249e" kindref="member">mad_stream_buffer</ref>(stream,<sp/>buffer-&gt;<ref refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" kindref="member">start</ref>,<sp/>buffer-&gt;<ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>buffer-&gt;<ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3a11b96bfcdbf1f442b96c664ccca4db75" kindref="member">MAD_FLOW_CONTINUE</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>utility<sp/>routine<sp/>performs<sp/>simple<sp/>rounding,<sp/>clipping,<sp/>and</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>scaling<sp/>of<sp/>MAD&apos;s<sp/>high-resolution<sp/>samples<sp/>down<sp/>to<sp/>16<sp/>bits.<sp/>It<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>perform<sp/>any<sp/>dithering<sp/>or<sp/>noise<sp/>shaping,<sp/>which<sp/>would<sp/>be<sp/>recommended<sp/>to</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>obtain<sp/>any<sp/>exceptional<sp/>audio<sp/>quality.<sp/>It<sp/>is<sp/>therefore<sp/>not<sp/>recommended<sp/>to</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>use<sp/>this<sp/>routine<sp/>if<sp/>high-quality<sp/>output<sp/>is<sp/>desired.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale(<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>sample)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>round<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>sample<sp/>+=<sp/>(1L<sp/>&lt;&lt;<sp/>(<ref refid="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref><sp/>-<sp/>16));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clip<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample<sp/>&gt;=<sp/><ref refid="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" kindref="member">MAD_F_ONE</ref>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>sample<sp/>=<sp/><ref refid="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" kindref="member">MAD_F_ONE</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample<sp/>&lt;<sp/>-<ref refid="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" kindref="member">MAD_F_ONE</ref>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>-<ref refid="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" kindref="member">MAD_F_ONE</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>quantize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample<sp/>&gt;&gt;<sp/>(<ref refid="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref><sp/>+<sp/>1<sp/>-<sp/>16);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>output<sp/>callback<sp/>function.<sp/>It<sp/>is<sp/>called<sp/>after<sp/>each<sp/>frame<sp/>of</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>MPEG<sp/>audio<sp/>data<sp/>has<sp/>been<sp/>completely<sp/>decoded.<sp/>The<sp/>purpose<sp/>of<sp/>this<sp/>callback</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>is<sp/>to<sp/>output<sp/>(or<sp/>play)<sp/>the<sp/>decoded<sp/>PCM<sp/>audio.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3" kindref="member">mad_flow</ref><sp/>output(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__header" kindref="compound">mad_header</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*header,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__pcm" kindref="compound">mad_pcm</ref><sp/>*pcm)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchannels,<sp/>nsamples;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*left_ch,<sp/>*right_ch;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>pcm-&gt;samplerate<sp/>contains<sp/>the<sp/>sampling<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>nchannels<sp/>=<sp/>pcm-&gt;<ref refid="structmad__pcm_1aacd49045f4b8611f28022be2ce408952" kindref="member">channels</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>nsamples<sp/><sp/>=<sp/>pcm-&gt;<ref refid="structmad__pcm_1a95e3411a4d6ec7bf2b17ff7a783eb01e" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>left_ch<sp/><sp/><sp/>=<sp/>pcm-&gt;<ref refid="structmad__pcm_1a855ec9f6dad7fad3a69d29abbe9a3ca3" kindref="member">samples</ref>[0];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>right_ch<sp/><sp/>=<sp/>pcm-&gt;<ref refid="structmad__pcm_1a855ec9f6dad7fad3a69d29abbe9a3ca3" kindref="member">samples</ref>[1];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nsamples--)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>sample(s)<sp/>in<sp/>16-bit<sp/>signed<sp/>little-endian<sp/>PCM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>scale(*left_ch++);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>putchar((sample<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>putchar((sample<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nchannels<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>scale(*right_ch++);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putchar((sample<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putchar((sample<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3a11b96bfcdbf1f442b96c664ccca4db75" kindref="member">MAD_FLOW_CONTINUE</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>error<sp/>callback<sp/>function.<sp/>It<sp/>is<sp/>called<sp/>whenever<sp/>a<sp/>decoding</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>error<sp/>occurs.<sp/>The<sp/>error<sp/>is<sp/>indicated<sp/>by<sp/>stream-&gt;error;<sp/>the<sp/>list<sp/>of</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>possible<sp/>MAD_ERROR_*<sp/>errors<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>mad.h<sp/>(or<sp/>stream.h)</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3" kindref="member">mad_flow</ref><sp/>error(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__stream" kindref="compound">mad_stream</ref><sp/>*stream,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__frame" kindref="compound">mad_frame</ref><sp/>*frame)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref><sp/>=<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;decoding<sp/>error<sp/>0x%04x<sp/>(%s)<sp/>at<sp/>byte<sp/>offset<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref>,<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a205370e53b1066e7de4aae43b794ef2e" kindref="member">mad_stream_errorstr</ref>(stream),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1a7618e13aaba1d5817d30f3aea45a3c3c" kindref="member">this_frame</ref><sp/>-<sp/>buffer-&gt;<ref refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>MAD_FLOW_BREAK<sp/>here<sp/>to<sp/>stop<sp/>decoding<sp/>(and<sp/>propagate<sp/>an<sp/>error)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libmad_2decoder_8h_1a665565932de11bfcb75513a8e61543c3a11b96bfcdbf1f442b96c664ccca4db75" kindref="member">MAD_FLOW_CONTINUE</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>function<sp/>called<sp/>by<sp/>main()<sp/>above<sp/>to<sp/>perform<sp/>all<sp/>the<sp/>decoding.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>It<sp/>instantiates<sp/>a<sp/>decoder<sp/>object<sp/>and<sp/>configures<sp/>it<sp/>with<sp/>the<sp/>input,</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>output,<sp/>and<sp/>error<sp/>callback<sp/>functions<sp/>above.<sp/>A<sp/>single<sp/>call<sp/>to</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>mad_decoder_run()<sp/>continues<sp/>until<sp/>a<sp/>callback<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>MAD_FLOW_STOP<sp/>(to<sp/>stop<sp/>decoding)<sp/>or<sp/>MAD_FLOW_BREAK<sp/>(to<sp/>stop<sp/>decoding<sp/>and</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>signal<sp/>an<sp/>error).</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="moxc_8c_1ae754a0f850e267dd2739e1ee8d0f031c" kindref="member">decode</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" kindref="member">start</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmad__decoder" kindref="compound">mad_decoder</ref><sp/>decoder;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>our<sp/>private<sp/>message<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>buffer.<ref refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" kindref="member">start</ref><sp/><sp/>=<sp/><ref refid="structbuffer_1afac3164fe025b82288dfbb36dec15374" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>buffer.<ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref><sp/>=<sp/><ref refid="structbuffer_1ac7ba3f94074d5396875f714916bf1cd1" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>configure<sp/>input,<sp/>output,<sp/>and<sp/>error<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="decoder_8c_1ac5dfba2412f045a946e065bd30904fa2" kindref="member">mad_decoder_init</ref>(&amp;decoder,<sp/>&amp;buffer,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input,<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>header<sp/>*/</highlight><highlight class="normal">,<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>filter<sp/>*/</highlight><highlight class="normal">,<sp/>output,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error,<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>message<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>decoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="decoder_8c_1a60b5da32b9034625bf2b633731299530" kindref="member">mad_decoder_run</ref>(&amp;decoder,<sp/><ref refid="libmad_2decoder_8h_1a0d55d67e9f9acf69f677f86053e88b6aa4670478d6f7c6dd89f794e9a87091ac2" kindref="member">MAD_DECODER_MODE_SYNC</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>release<sp/>the<sp/>decoder<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="decoder_8c_1acfed306c674791a62e5f7e7e7d13660a" kindref="member">mad_decoder_finish</ref>(&amp;decoder);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/minimad.c"/>
  </compounddef>
</doxygen>
