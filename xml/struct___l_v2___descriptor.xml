<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct___l_v2___descriptor" kind="struct" language="C++" prot="public">
    <compoundname>_LV2_Descriptor</compoundname>
    <includes refid="lv2_8h" local="no">lv2.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct___l_v2___descriptor_1a4d26065676fcaaf06ba1fb242de0fc72" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* _LV2_Descriptor::URI</definition>
        <argsstring></argsstring>
        <name>URI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A globally unique, case-sensitive identifier for this plugin.</para><para>This MUST be a valid URI string as defined by RFC 3986. All plugins with the same URI MUST be compatible to some degree, see <ulink url="http://lv2plug.in/ns/lv2core">http://lv2plug.in/ns/lv2core</ulink> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="172" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" prot="public" static="no" mutable="no">
        <type><ref refid="lv2_8h_1a95eafb0a5290f30bcdc8c0f8eb992eaf" kindref="member">LV2_Handle</ref>(*</type>
        <definition>LV2_Handle(* _LV2_Descriptor::instantiate) (const struct _LV2_Descriptor *descriptor, double sample_rate, const char *bundle_path, const LV2_Feature *const *features)</definition>
        <argsstring>)(const struct _LV2_Descriptor *descriptor, double sample_rate, const char *bundle_path, const LV2_Feature *const *features)</argsstring>
        <name>instantiate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiate the plugin.</para><para>Note that instance initialisation should generally occur in <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> rather than here. If a host calls <ref refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" kindref="member">instantiate()</ref>, it MUST call <ref refid="struct___l_v2___descriptor_1a5dba64bee74fd5ade089462eb20c0e43" kindref="member">cleanup()</ref> at some point in the future.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptor of the plugin to instantiate.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_rate</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_sample" kindref="compound">Sample</ref> rate, in Hz, for the new plugin instance.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bundle_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the LV2 bundle which contains this plugin binary. It MUST include the trailing directory separator (e.g. &apos;/&apos;) so that simply appending a filename will yield the path to that file in the bundle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>A NULL terminated array of LV2_Feature structs which represent the features the host supports. Plugins may refuse to instantiate if required features are not found here. However, hosts MUST NOT use this as a discovery mechanism: instead, use the RDF data to determine which features are required and do not attempt to instantiate unsupported plugins at all. This parameter MUST NOT be NULL, i.e. a host that supports no features MUST pass a single element array containing NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle for the new plugin instance, or NULL if instantiation has failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="202" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" prot="public" static="no" mutable="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*</type>
        <definition>void(* _LV2_Descriptor::connect_port) (LV2_Handle instance, uint32_t port, void *data_location)</definition>
        <argsstring>)(LV2_Handle instance, uint32_t port, void *data_location)</argsstring>
        <name>connect_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect a port on a plugin instance to a memory location.</para><para>Plugin writers should be aware that the host may elect to use the same buffer for more than one port and even use the same buffer for both input and output (see lv2:inPlaceBroken in lv2.ttl).</para><para>If the plugin has the feature lv2:hardRTCapable then there are various things that the plugin MUST NOT do within the <ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref> function; see lv2core.ttl for details.</para><para><ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref> MUST be called at least once for each port before <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> is called, unless that port is lv2:connectionOptional. The plugin must pay careful attention to the block size passed to <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> since the block allocated may only just be large enough to contain the data, and is not guaranteed to remain constant between <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> calls.</para><para><ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref> may be called more than once for a plugin instance to allow the host to change the buffers that the plugin is reading or writing. These calls may be made before or after <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> or <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> calls.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Plugin instance containing the port.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the port to connect. The host MUST NOT try to connect a port index that is not defined in the plugin&apos;s RDF data. If it does, the plugin&apos;s behaviour is undefined (a crash is likely).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_location</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data of the type defined by the port type in the plugin&apos;s RDF data (e.g. an array of float for an lv2:AudioPort). This pointer must be stored by the plugin instance and used to read/write data when <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> is called. Data present at the time of the <ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref> call MUST NOT be considered meaningful. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="241" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" prot="public" static="no" mutable="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*</type>
        <definition>void(* _LV2_Descriptor::activate) (LV2_Handle instance)</definition>
        <argsstring>)(LV2_Handle instance)</argsstring>
        <name>activate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise a plugin instance and activate it for use.</para><para>This is separated from <ref refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" kindref="member">instantiate()</ref> to aid real-time support and so that hosts can reinitialise a plugin instance by calling <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> and then <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref>. In this case the plugin instance MUST reset all state information dependent on the history of the plugin instance except for any data locations provided by <ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref>. If there is nothing for <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> to do then this field may be NULL.</para><para>When present, hosts MUST call this function once before <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> is called for the first time. This call SHOULD be made as close to the <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> call as possible and indicates to real-time plugins that they are now live, however plugins MUST NOT rely on a prompt call to <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> after <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref>.</para><para>The host MUST NOT call <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> again until <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> has been called first. If a host calls <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref>, it MUST call <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> at some point in the future. Note that <ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref> may be called before or after <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="266" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" prot="public" static="no" mutable="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*</type>
        <definition>void(* _LV2_Descriptor::run) (LV2_Handle instance, uint32_t sample_count)</definition>
        <argsstring>)(LV2_Handle instance, uint32_t sample_count)</argsstring>
        <name>run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run a plugin instance for a block.</para><para>Note that if an <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> function exists then it must be called before <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref>. If <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> is called for a plugin instance then <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> may not be called until <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> has been called again.</para><para>If the plugin has the feature lv2:hardRTCapable then there are various things that the plugin MUST NOT do within the <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> function (see lv2core.ttl for details).</para><para>As a special case, when <computeroutput>sample_count</computeroutput> is 0, the plugin should update any output ports that represent a single instant in time (e.g. control ports, but not audio ports). This is particularly useful for latent plugins, which should update their latency output port so hosts can pre-roll plugins to compute latency. Plugins MUST NOT crash when <computeroutput>sample_count</computeroutput> is 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to be run.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The block size (in samples) for which the plugin instance must run. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="291" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" prot="public" static="no" mutable="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*</type>
        <definition>void(* _LV2_Descriptor::deactivate) (LV2_Handle instance)</definition>
        <argsstring>)(LV2_Handle instance)</argsstring>
        <name>deactivate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deactivate a plugin instance (counterpart to <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref>).</para><para>Hosts MUST deactivate all activated instances after they have been <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> for the last time. This call SHOULD be made as close to the last <ref refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" kindref="member">run()</ref> call as possible and indicates to real-time plugins that they are no longer live, however plugins MUST NOT rely on prompt deactivation. If there is nothing for <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> to do then this field may be NULL</para><para>Deactivation is not similar to pausing since the plugin instance will be reinitialised by <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref>. However, <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> itself MUST NOT fully reset plugin state. For example, the host may deactivate a plugin, then store its state (using some extension to do so).</para><para>Hosts MUST NOT call <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> unless <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> was previously called. Note that <ref refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" kindref="member">connect_port()</ref> may be called before or after <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="312" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1a5dba64bee74fd5ade089462eb20c0e43" prot="public" static="no" mutable="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*</type>
        <definition>void(* _LV2_Descriptor::cleanup) (LV2_Handle instance)</definition>
        <argsstring>)(LV2_Handle instance)</argsstring>
        <name>cleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clean up a plugin instance (counterpart to <ref refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" kindref="member">instantiate()</ref>).</para><para>Once an instance of a plugin has been finished with it must be deleted using this function. The instance handle passed ceases to be valid after this call.</para><para>If <ref refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" kindref="member">activate()</ref> was called for a plugin instance then a corresponding call to <ref refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" kindref="member">deactivate()</ref> MUST be made before <ref refid="struct___l_v2___descriptor_1a5dba64bee74fd5ade089462eb20c0e43" kindref="member">cleanup()</ref> is called. Hosts MUST NOT call <ref refid="struct___l_v2___descriptor_1a5dba64bee74fd5ade089462eb20c0e43" kindref="member">cleanup()</ref> unless <ref refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" kindref="member">instantiate()</ref> was previously called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="325" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct___l_v2___descriptor_1a36da63991720b8ed2990d666b8369669" prot="public" static="no" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *(*</type>
        <definition>const void*(* _LV2_Descriptor::extension_data) (const char *uri)</definition>
        <argsstring>)(const char *uri)</argsstring>
        <name>extension_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return additional plugin data defined by some extenion.</para><para>A typical use of this facility is to return a struct containing function pointers to extend the LV2_Descriptor API.</para><para>The actual type and meaning of the returned object MUST be specified precisely by the extension. This function MUST return NULL for any unsupported URI. If a plugin does not support any extension data, this field may be NULL.</para><para>The host is never responsible for freeing the returned value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="340" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Plugin Descriptor.</para><para>This structure provides the core functions necessary to instantiate and use a plugin. </para>    </detaileddescription>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" line="164" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/lv2core/lv2.h" bodystart="164" bodyend="341"/>
    <listofallmembers>
      <member refid="struct___l_v2___descriptor_1ad6bfac334042df6d51f4f0f7c0a72241" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>activate</name></member>
      <member refid="struct___l_v2___descriptor_1a5dba64bee74fd5ade089462eb20c0e43" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>cleanup</name></member>
      <member refid="struct___l_v2___descriptor_1a7c6a66b45322444b14e6d0fc27da62d5" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>connect_port</name></member>
      <member refid="struct___l_v2___descriptor_1ab010fd53849be3de9beb99d7d936ab9c" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>deactivate</name></member>
      <member refid="struct___l_v2___descriptor_1a36da63991720b8ed2990d666b8369669" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>extension_data</name></member>
      <member refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>instantiate</name></member>
      <member refid="struct___l_v2___descriptor_1ab137135b8024e88d5de9d252534f2b9b" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>run</name></member>
      <member refid="struct___l_v2___descriptor_1a4d26065676fcaaf06ba1fb242de0fc72" prot="public" virt="non-virtual"><scope>_LV2_Descriptor</scope><name>URI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
