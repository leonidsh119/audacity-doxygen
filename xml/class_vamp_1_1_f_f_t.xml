<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_vamp_1_1_f_f_t" kind="class" language="C++" prot="public">
    <compoundname>Vamp::FFT</compoundname>
    <includes refid="lib-src_2libvamp_2vamp-sdk_2fft_8h" local="no">FFT.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_vamp_1_1_f_f_t_1a55b989403218220e13340aa2acf8c1c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::FFT::forward</definition>
        <argsstring>(unsigned int n, const double *ri, const double *ii, double *ro, double *io)</argsstring>
        <name>forward</name>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double *</type>
          <declname>ri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double *</type>
          <declname>ii</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ro</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>io</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate a forward transform of size n.</para><para>ri and ii must point to the real and imaginary component arrays of the input. For real input, ii may be NULL.</para><para>ro and io must point to enough space to receive the real and imaginary component arrays of the output.</para><para>All input and output arrays are of size n. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/FFT.h" line="72" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-sdk/FFT.cpp" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_f_f_t_1ade68f62ab5738fd0651fc9082ce13c4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::FFT::inverse</definition>
        <argsstring>(unsigned int n, const double *ri, const double *ii, double *ro, double *io)</argsstring>
        <name>inverse</name>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double *</type>
          <declname>ri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double *</type>
          <declname>ii</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ro</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>io</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate an inverse transform of size n.</para><para>ri and ii must point to the real and imaginary component arrays of the input. For real input, ii may be NULL.</para><para>ro and io must point to enough space to receive the real and imaginary component arrays of the output. The output is scaled by 1/n. The output pointers may not be NULL, even if the output is expected to be real.</para><para>All input and output arrays are of size n. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/FFT.h" line="89" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-sdk/FFT.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A simple <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> implementation provided for convenience of plugin authors.</para><para>This class provides double-precision FFTs in power-of-two sizes only. It is slower than more sophisticated library implementations. If these requirements aren&apos;t suitable, make other arrangements.</para><para>The inverse transform is scaled by 1/n.</para><para>The implementation is from Don Cross&apos;s public domain <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> code. </para>    </detaileddescription>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/FFT.h" line="59" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-sdk/FFT.h" bodystart="58" bodyend="92"/>
    <listofallmembers>
      <member refid="class_vamp_1_1_f_f_t_1a55b989403218220e13340aa2acf8c1c1" prot="public" virt="non-virtual"><scope>Vamp::FFT</scope><name>forward</name></member>
      <member refid="class_vamp_1_1_f_f_t_1ade68f62ab5738fd0651fc9082ce13c4e" prot="public" virt="non-virtual"><scope>Vamp::FFT</scope><name>inverse</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
