<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="include_2_f_l_a_c_2metadata_8h" kind="file" language="C++">
    <compoundname>metadata.h</compoundname>
    <includes refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h" local="no">sys/types.h</includes>
    <includes refid="lib-src_2libflac_2include_2_f_l_a_c_2export_8h" local="yes">export.h</includes>
    <includes refid="callback_8h" local="yes">callback.h</includes>
    <includes refid="include_2_f_l_a_c_2format_8h" local="yes">format.h</includes>
    <includedby refid="include_2_f_l_a_c_2all_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/all.h</includedby>
    <incdepgraph>
      <node id="6589">
        <label>format.h</label>
        <link refid="include_2_f_l_a_c_2format_8h"/>
        <childnode refid="6584" relation="include">
        </childnode>
        <childnode refid="6586" relation="include">
        </childnode>
      </node>
      <node id="6580">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="6581" relation="include">
        </childnode>
        <childnode refid="6582" relation="include">
        </childnode>
        <childnode refid="6583" relation="include">
        </childnode>
      </node>
      <node id="6586">
        <label>ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="6587" relation="include">
        </childnode>
      </node>
      <node id="6587">
        <label>stdint.h</label>
      </node>
      <node id="6588">
        <label>stdlib.h</label>
      </node>
      <node id="6579">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h</label>
        <link refid="include/FLAC/metadata.h"/>
        <childnode refid="6580" relation="include">
        </childnode>
        <childnode refid="6584" relation="include">
        </childnode>
        <childnode refid="6585" relation="include">
        </childnode>
        <childnode refid="6589" relation="include">
        </childnode>
      </node>
      <node id="6582">
        <label>alloca.h</label>
      </node>
      <node id="6585">
        <label>callback.h</label>
        <link refid="callback_8h"/>
        <childnode refid="6586" relation="include">
        </childnode>
        <childnode refid="6588" relation="include">
        </childnode>
      </node>
      <node id="6581">
        <label>MacTypes.h</label>
      </node>
      <node id="6583">
        <label>string.h</label>
      </node>
      <node id="6584">
        <label>export.h</label>
        <link refid="lib-src_2libflac_2include_2_f_l_a_c_2export_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6595">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/main.c</label>
        <link refid="src_2flac_2main_8c"/>
      </node>
      <node id="6596">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/plugin_xmms/plugin.c</label>
        <link refid="libflac_2src_2plugin__xmms_2plugin_8c"/>
      </node>
      <node id="6592">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/analyze.c</label>
        <link refid="analyze_8c"/>
      </node>
      <node id="6590">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h</label>
        <link refid="include/FLAC/metadata.h"/>
        <childnode refid="6591" relation="include">
        </childnode>
      </node>
      <node id="6593">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/decode.c</label>
        <link refid="libflac_2src_2flac_2decode_8c"/>
      </node>
      <node id="6591">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/all.h</label>
        <link refid="include_2_f_l_a_c_2all_8h"/>
        <childnode refid="6592" relation="include">
        </childnode>
        <childnode refid="6593" relation="include">
        </childnode>
        <childnode refid="6594" relation="include">
        </childnode>
        <childnode refid="6595" relation="include">
        </childnode>
        <childnode refid="6596" relation="include">
        </childnode>
      </node>
      <node id="6594">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/encode.c</label>
        <link refid="libflac_2src_2flac_2encode_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__flac__metadata__level1_1gac926e7d2773a05066115cac9048bbec9" prot="public" static="no">
        <name>FLAC__Metadata_SimpleIteratorStatus</name>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a33aadd73194c0d7e307d643237e0ddcd" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator is in the normal OK state </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a0a3933cb38c8957a8d5c3d1afb4766f9" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data passed into a function violated the function&apos;s usage criteria </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a20e835bbb74b4d039e598617f68d2af6" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ERROR_OPENING_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator could not open the target file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a7785f77a612be8956fbe7cab73497220" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_A_FLAC_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator could not find the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> signature at the start of the file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9af055d8c0c663e72134fe2db8037b6880" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_WRITABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator tried to write to a file that was not writable </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a14c897124887858109200723826f85b7" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_BAD_METADATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered input that does not conform to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata specification </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a088df964f0852dd7e19304e920c3ee8e" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error while reading the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2ad85a32e291d1e918692d68cc22fd40" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error while seeking in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9ac2337299c2347ca311caeaa7d71d857c" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_WRITE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error while writing the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2e073843fa99419d76a0b210da96ceb6" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_RENAME_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error renaming the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a4f855433038c576da127fc1de9d18f9b" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_UNLINK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The iterator encountered an error removing the temporary file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9aa8386ed0a20d7e91b0022d203ec3cdec" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_MEMORY_ALLOCATION_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation failed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a9d821ae65a1c5de619daa88c850906df" prot="public">
          <name>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_INTERNAL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The caller violated an assertion or an unexpected error occurred </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Status type for <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref>.</para><para>The iterator&apos;s current status can be obtained by calling <ref refid="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" kindref="member">FLAC__metadata_simple_iterator_status()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="309" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="309" bodyend="350"/>
      </memberdef>
      <memberdef kind="enum" id="group__flac__metadata__level2_1gafe2a924893b0800b020bea8160fd4531" prot="public" static="no">
        <name>FLAC__Metadata_ChainStatus</name>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a293be942ec54576f2b3c73613af968e9" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain is in the normal OK state </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1be9400982f411173af46bf0c3acbdc7" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_ILLEGAL_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data passed into a function violated the function&apos;s usage criteria </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a43d2741a650576052fa3615d8cd64d86" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_ERROR_OPENING_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain could not open the target file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a99748a4b12ed10f9368375cc8deeb143" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_NOT_A_FLAC_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain could not find the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> signature at the start of the file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ac469c6543ebb117e99064572c16672d4" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_NOT_WRITABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain tried to write to a file that was not writable </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a8efd2c76dc06308eb6eba59e1bc6300b" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_BAD_METADATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered input that does not conform to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata specification </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0525de5fb5d8aeeb4e848e33a8d503c6" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_READ_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error while reading the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a5814bc26bcf92143198b8e7f028f43a2" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_SEEK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error while seeking in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a66460c735e4745788b40889329e8489f" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_WRITE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error while writing the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af4ecf22bc3e5adf78a9c765f856efb0d" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_RENAME_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error renaming the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1cd3138ed493f6a0f5b95fb8481edd1e" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_UNLINK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error removing the temporary file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab12ec938f7556a163c609194ee0aede0" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_MEMORY_ALLOCATION_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation failed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a36b9bcf93da8e0f111738a65eab36e9d" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_INTERNAL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The caller violated an assertion or an unexpected error occurred </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab8a6aa5f115db3f07ad2ed4adbcbe060" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_INVALID_CALLBACKS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One or more of the required callbacks was NULL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0d9e64ad6514c88b8ea9e9171c42ec9a" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_READ_WRITE_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> was called on a chain read by <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks(), or <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref>/FLAC__metadata_chain_write_with_callbacks_and_tempfile() was called on a chain read by <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(). Matching read/write methods must always be used. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af86670707345e2d02cc84aec059459d0" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_WRONG_WRITE_CALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> was called when the chain write requires a tempfile; use <ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile()</ref> instead. Or, <ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile()</ref> was called when the chain write does not require a tempfile; use <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> instead. Always check <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> before writing via callbacks. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="721" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="721" bodyend="783"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flac__metadata__level1_1ga6accccddbb867dfc2eece9ee3ffecb3a" prot="public" static="no">
        <type>struct <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref></type>
        <definition>typedef struct FLAC__Metadata_SimpleIterator FLAC__Metadata_SimpleIterator</definition>
        <argsstring></argsstring>
        <name>FLAC__Metadata_SimpleIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque structure definition for the level 1 iterator type. See the <ref refid="group__flac__metadata__level1" kindref="compound">metadata level 1 module </ref> for a detailed description. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="237" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__metadata__level2_1gaec6993c60b88f222a52af86f8f47bfdf" prot="public" static="no">
        <type>struct <ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref></type>
        <definition>typedef struct FLAC__Metadata_Chain FLAC__Metadata_Chain</definition>
        <argsstring></argsstring>
        <name>FLAC__Metadata_Chain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque structure definition for the level 2 chain type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__metadata__level2_1ga9f3e135a07cdef7e51597646aa7b89b2" prot="public" static="no">
        <type>struct <ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref></type>
        <definition>typedef struct FLAC__Metadata_Iterator FLAC__Metadata_Iterator</definition>
        <argsstring></argsstring>
        <name>FLAC__Metadata_Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque structure definition for the level 2 iterator type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="719" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__flac__metadata__level1_1ga28ea4a13fcbe97a732fafb13417036bb" prot="public" static="no" mutable="no">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>FLAC_API const char* const FLAC__Metadata_SimpleIteratorStatusString[]</definition>
        <argsstring>[]</argsstring>
        <name>FLAC__Metadata_SimpleIteratorStatusString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps a FLAC__Metadata_SimpleIteratorStatus to a C string.</para><para>Using a FLAC__Metadata_SimpleIteratorStatus as the index to this array will give the string equivalent. The contents should not be modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="357" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__flac__metadata__level2_1gabb4646b4af36d17497676759767f8cc7" prot="public" static="no" mutable="no">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>FLAC_API const char* const FLAC__Metadata_ChainStatusString[]</definition>
        <argsstring>[]</argsstring>
        <name>FLAC__Metadata_ChainStatusString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps a FLAC__Metadata_ChainStatus to a C string.</para><para>Using a FLAC__Metadata_ChainStatus as the index to this array will give the string equivalent. The contents should not be modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="790" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="909" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flac__metadata__level0_1gaf248d1ccc8025b9e9d7f532b8af4ab07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_streaminfo</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata *streaminfo)</argsstring>
        <name>FLAC__metadata_get_streaminfo</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>streaminfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the STREAMINFO metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streaminfo</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to space for the STREAMINFO block. Since <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> is a simple structure with no memory allocation involved, you pass the address of an existing structure. It need not be initialized.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">streaminfo<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid STREAMINFO block was read from <emphasis>filename</emphasis>. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no STREAMINFO block. (A memory allocation error is possible because this function must set up a file decoder.) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="197" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level0_1gaf66469f31dca28837ffd3f8b0ec5c082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_tags</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata **tags)</argsstring>
        <name>FLAC__metadata_get_tags</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> **</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the VORBIS_COMMENT metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the returned pointer will be stored. The <emphasis>tags</emphasis> object must be deleted by the caller using <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">tags<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid VORBIS_COMMENT block was read from <emphasis>filename</emphasis>, and <emphasis>*tags</emphasis> will be set to the address of the metadata structure. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no VORBIS_COMMENT block, and <emphasis>*tags</emphasis> will be set to <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="178" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="217" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level0_1ga6ee2633dc179c2a0cb5fef5762faf0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_cuesheet</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata **cuesheet)</argsstring>
        <name>FLAC__metadata_get_cuesheet</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> **</type>
          <declname>cuesheet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the CUESHEET metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cuesheet</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the returned pointer will be stored. The <emphasis>cuesheet</emphasis> object must be deleted by the caller using <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">cuesheet<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid CUESHEET block was read from <emphasis>filename</emphasis>, and <emphasis>*cuesheet</emphasis> will be set to the address of the metadata structure. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no CUESHEET block, and <emphasis>*cuesheet</emphasis> will be set to <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="197" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="227" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level0_1gaa13138ab038694909964998a113817b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_picture</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata **picture, FLAC__StreamMetadata_Picture_Type type, const char *mime_type, const FLAC__byte *description, unsigned max_width, unsigned max_height, unsigned max_depth, unsigned max_colors)</argsstring>
        <name>FLAC__metadata_get_picture</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> **</type>
          <declname>picture</declname>
        </param>
        <param>
          <type><ref refid="group__flac__format_1gaf6d3e836cee023e0b8d897f1fdc9825d" kindref="member">FLAC__StreamMetadata_Picture_Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>mime_type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>description</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_width</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_height</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_colors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a PICTURE metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file. Since there can be more than one PICTURE block in a file, this function takes a number of parameters that act as constraints to the search. The PICTURE block with the largest area matching all the constraints will be returned, or <emphasis>*picture</emphasis> will be set to <computeroutput>NULL</computeroutput> if there was no such block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the returned pointer will be stored. The <emphasis>picture</emphasis> object must be deleted by the caller using <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired picture type. Use <computeroutput>-1</computeroutput> to mean &quot;any type&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired MIME type, e.g. &quot;image/jpeg&quot;. The string will be matched exactly. Use <computeroutput>NULL</computeroutput> to mean &quot;any MIME type&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired description. The string will be matched exactly. Use <computeroutput>NULL</computeroutput> to mean &quot;any
                   description&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width in pixels desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any width&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_height</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height in pixels desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any height&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum color depth in bits-per-pixel desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any depth&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_colors</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of colors desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any number of colors&quot;.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">picture<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid PICTURE block was read from <emphasis>filename</emphasis>, and <emphasis>*picture</emphasis> will be set to the address of the metadata structure. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no PICTURE block, and <emphasis>*picture</emphasis> will be set to <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="237" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="268" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga5b32f4eba211e05727428e9080f4e393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
        <definition>FLAC_API FLAC__Metadata_SimpleIterator* FLAC__metadata_simple_iterator_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_simple_iterator_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new iterator instance.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_SimpleIterator*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="365" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="361" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_simple_iterator_delete</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an iterator instance. Deletes the object pointed to by <emphasis>iterator</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="373" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="399" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__metadata__level1_1gac926e7d2773a05066115cac9048bbec9" kindref="member">FLAC__Metadata_SimpleIteratorStatus</ref></type>
        <definition>FLAC_API FLAC__Metadata_SimpleIteratorStatus FLAC__metadata_simple_iterator_status</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_status</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current status of the iterator. Call this after a function returns <computeroutput>false</computeroutput> to get the reason for the error. Also resets the status to FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_SimpleIteratorStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The current status of the iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="385" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="407" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_init</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, const char *filename, FLAC__bool read_only, FLAC__bool preserve_file_stats)</argsstring>
        <name>FLAC__metadata_simple_iterator_init</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>read_only</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>preserve_file_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the iterator to point to the first metadata block in the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_only</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will be opened in read-only mode; if <computeroutput>false</computeroutput>, the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will be opened for edit even if no edits are performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preserve_file_stats</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, the owner and modification time will be preserved even if the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is written to.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if a memory allocation error occurs, the file can&apos;t be opened, or another error occurs, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="406" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="480" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gadc654c1361b53737bab20efa3e75a0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_is_writable</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_is_writable</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is writable. If <computeroutput>false</computeroutput>, calls to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> and <ref refid="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" kindref="member">FLAC__metadata_simple_iterator_insert_block_after()</ref> will fail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para>See above. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="418" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="504" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_next</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_next</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator forward one metadata block, returning <computeroutput>false</computeroutput> if already at the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the last metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="432" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="512" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga49f495dec0f44116d66e1b79356a1160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_prev</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_prev</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator backward one metadata block, returning <computeroutput>false</computeroutput> if already at the beginning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the first metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="446" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="530" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga4dd81539fb698163209d05af13a2ec3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_is_last</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_is_last</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a flag telling if the current metadata block is the last.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the current metadata block is the last in the file, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="459" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="565" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga46e158a3f70c0e39db9c68a9ff9a2621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="macconfig_8h_1ae498af04567b740d66e09d36613c2cd8" kindref="member">off_t</ref></type>
        <definition>FLAC_API off_t FLAC__metadata_simple_iterator_get_block_offset</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block_offset</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the offset of the metadata block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>off_t</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the metadata block at the current iterator position. This is the byte offset relative to the beginning of the file of the current metadata block&apos;s header. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="475" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="574" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga4649a49d230ac8bfc3ec88f5196205bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref></type>
        <definition>FLAC_API FLAC__MetadataType FLAC__metadata_simple_iterator_get_block_type</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type of the metadata block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__MetadataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the metadata block at the current iterator position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="489" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="582" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gaad69b5d6c58c48e08dcfb3f1018c2602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> unsigned</type>
        <definition>FLAC_API unsigned FLAC__metadata_simple_iterator_get_block_length</definition>
        <argsstring>(const FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block_length</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the length of the metadata block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the metadata block at the current iterator position. The is same length as that in the <ulink url="http://xiph.org/flac/format.html#metadata_block_header">metadata block header</ulink>, i.e. the length of the metadata body that follows the header. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="506" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="591" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gaf2db2a96f7c60100d620a2eefb8360bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_get_application_id</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__byte *id)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_application_id</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the application ID of the <computeroutput>APPLICATION</computeroutput> block at the current position. This avoids reading the actual block data which can save time for large blocks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer of at least <computeroutput>4</computeroutput> bytes where the ID will be stored.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">id<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the ID was successfully read, else <computeroutput>false</computeroutput>, in which case you should check <ref refid="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" kindref="member">FLAC__metadata_simple_iterator_status()</ref> to find out why. If the status is <computeroutput>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT</computeroutput>, then the current metadata block is not an <computeroutput>APPLICATION</computeroutput> block. Otherwise if the status is <computeroutput>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR</computeroutput> or <computeroutput>FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR</computeroutput>, an I/O error occurred and the iterator can no longer be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="531" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="600" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga31c9e013b3bdc04866eee2271349fe60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata* FLAC__metadata_simple_iterator_get_block</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator)</argsstring>
        <name>FLAC__metadata_simple_iterator_get_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the metadata block at the current position. You can modify the block but must use <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> to write it back to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file.</para><para>You must call <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref> on the returned object when you are finished with it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata*</parametername>
</parameternamelist>
<parameterdescription>
<para>The current metadata block, or <computeroutput>NULL</computeroutput> if there was a memory allocation error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="549" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="627" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_set_block</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__StreamMetadata *block, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_simple_iterator_set_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a block back to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function tries to be as efficient as possible; how the block is actually written is shown by the following:</para><para>Existing block is a STREAMINFO block and the new block is a STREAMINFO block: the new block is written in place. Make sure you know what you&apos;re doing when changing the values of a STREAMINFO block.</para><para>Existing block is a STREAMINFO block and the new block is a not a STREAMINFO block: this is an error since the first block must be a STREAMINFO block. Returns <computeroutput>false</computeroutput> without altering the file.</para><para>Existing block is not a STREAMINFO block and the new block is a STREAMINFO block: this is an error since there may be only one STREAMINFO block. Returns <computeroutput>false</computeroutput> without altering the file.</para><para>Existing block and new block are the same length: the existing block will be replaced by the new block, written in place.</para><para>Existing block is longer than new block: if use_padding is <computeroutput>true</computeroutput>, the existing block will be overwritten in place with the new block followed by a PADDING block, if possible, to make the total size the same as the existing block. Remember that a padding block requires at least four bytes so if the difference in size between the new block and existing block is less than that, the entire file will have to be rewritten, using the new block&apos;s exact size. If use_padding is <computeroutput>false</computeroutput>, the entire file will be rewritten, replacing the existing block by the new block.</para><para>Existing block is shorter than new block: if use_padding is <computeroutput>true</computeroutput>, the function will try and expand the new block into the following PADDING block, if it exists and doing so won&apos;t shrink the PADDING block to less than 4 bytes. If there is no following PADDING block, or it will shrink to less than 4 bytes, or use_padding is <computeroutput>false</computeroutput>, the entire file is rewritten, replacing the existing block with the new block. Note that in this case any following PADDING block is preserved as is.</para><para>After writing the block, the iterator will remain in the same place, i.e. pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>The block to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> <programlisting><codeline><highlight class="normal">block<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if successful, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="605" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="656" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_insert_block_after</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__StreamMetadata *block, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_simple_iterator_insert_block_after</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is similar to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> except that instead of writing over an existing block, it appends a block after the existing block. <emphasis>use_padding</emphasis> is again used to tell the function to try an expand into following padding in an attempt to avoid rewriting the entire file.</para><para>This function will fail and return <computeroutput>false</computeroutput> if given a STREAMINFO block.</para><para>After writing the block, the iterator will be pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>The block to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> <programlisting><codeline><highlight class="normal">block<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if successful, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="630" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="754" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level1_1gaf0a1823f95f8097f0d2ff3f67ae30a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_simple_iterator_delete_block</definition>
        <argsstring>(FLAC__Metadata_SimpleIterator *iterator, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_simple_iterator_delete_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes the block at the current position. This will cause the entire <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to be rewritten, unless <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput>, in which case the block will be replaced by an equal-sized PADDING block. The iterator will be left pointing to the block before the one just deleted.</para><para>You may not delete the STREAMINFO block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if successful, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="835" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gafd1f4f58af29325b067ebc5dc34a0f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
        <definition>FLAC_API FLAC__Metadata_Chain* FLAC__metadata_chain_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_chain_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new chain instance.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_Chain*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="799" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1485" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga178898eef72ba9d569b1964fffcb4a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_chain_delete</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a chain instance. Deletes the object pointed to by <emphasis>chain</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="807" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1495" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__metadata__level2_1gafe2a924893b0800b020bea8160fd4531" kindref="member">FLAC__Metadata_ChainStatus</ref></type>
        <definition>FLAC_API FLAC__Metadata_ChainStatus FLAC__metadata_chain_status</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_status</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current status of the chain. Call this after a function returns <computeroutput>false</computeroutput> to get the reason for the error. Also resets the status to FLAC__METADATA_CHAIN_STATUS_OK.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_ChainStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The current status of the chain. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="819" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1504" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, const char *filename)</argsstring>
        <name>FLAC__metadata_chain_read</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file into the chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>filename</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="833" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1548" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gae7b34f2929bedea0e14ac14aca253a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read_ogg</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, const char *filename)</argsstring>
        <name>FLAC__metadata_chain_read_ogg</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from an Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file into the chain.</para><para><simplesect kind="note"><para>Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata data writing is not supported yet and <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> will fail.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>filename</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="850" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1554" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read_with_callbacks</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks)</argsstring>
        <name>FLAC__metadata_chain_read_with_callbacks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream into the chain via I/O callbacks.</para><para>The <emphasis>handle</emphasis> need only be open for reading, but must be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r&quot;</computeroutput> (or <computeroutput>&quot;rb&quot;</computeroutput> for Windows).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to read. The handle will NOT be closed after the metadata is read; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O. The mandatory callbacks are <emphasis>read</emphasis>, <emphasis>seek</emphasis>, and <emphasis>tell</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>handle</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="872" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1589" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga62c24f8d127897e5b7d00aa48f889996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read_ogg_with_callbacks</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks)</argsstring>
        <name>FLAC__metadata_chain_read_ogg_with_callbacks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from an Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream into the chain via I/O callbacks.</para><para>The <emphasis>handle</emphasis> need only be open for reading, but must be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r&quot;</computeroutput> (or <computeroutput>&quot;rb&quot;</computeroutput> for Windows).</para><para><simplesect kind="note"><para>Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata data writing is not supported yet and <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> will fail.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to read. The handle will NOT be closed after the metadata is read; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O. The mandatory callbacks are <emphasis>read</emphasis>, <emphasis>seek</emphasis>, and <emphasis>tell</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>handle</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="897" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1595" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_check_if_tempfile_needed</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_chain_check_if_tempfile_needed</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if writing the given chain would require the use of a temporary file, or if it could be written in place.</para><para>Under certain conditions, padding can be utilized so that writing edited metadata back to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file does not require rewriting the entire file. If rewriting is required, then a temporary workfile is required. When writing metadata using callbacks, you must check this function to know whether to call <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> or <ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile()</ref>. When writing with <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref>, the temporary file is handled internally.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not padding will be allowed to be used during the write. The value of <emphasis>use_padding</emphasis> given here must match the value later passed to <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> or FLAC__metadata_chain_write_with_callbacks_with_tempfile().  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if writing the current chain would require a tempfile, or <computeroutput>false</computeroutput> if metadata can be written in place. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="925" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1600" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_write</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding, FLAC__bool preserve_file_stats)</argsstring>
        <name>FLAC__metadata_chain_write</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>preserve_file_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write all metadata out to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function tries to be as efficient as possible; how the metadata is actually written is shown by the following:</para><para>If the current chain is the same size as the existing metadata, the new data is written in place.</para><para>If the current chain is longer than the existing metadata, and <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput>, and the last block is a PADDING block of sufficient length, the function will truncate the final padding block so that the overall size of the metadata is the same as the existing metadata, and then just rewrite the metadata. Otherwise, if not all of the above conditions are met, the entire <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file must be rewritten. If you want to use padding this way it is a good idea to call <ref refid="group__flac__metadata__level2_1gaa14304da1c8e706808cfafa5cbbf575b" kindref="member">FLAC__metadata_chain_sort_padding()</ref> first so that you have the maximum amount of padding to work with, unless you need to preserve ordering of the PADDING blocks for some reason.</para><para>If the current chain is shorter than the existing metadata, and <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput>, and the final block is a PADDING block, the padding is extended to make the overall size the same as the existing data. If <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput> and the last block is not a PADDING block, a new PADDING block is added to the end of the new data to make it the same size as the existing data (if possible, see the note to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> about the four byte limit) and the new data is written in place. If none of the above apply or <emphasis>use_padding</emphasis> is <computeroutput>false</computeroutput>, the entire <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is rewritten.</para><para>If <emphasis>preserve_file_stats</emphasis> is <computeroutput>true</computeroutput>, the owner and modification time will be preserved even if the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is written.</para><para>For this write function to be used, the chain must have been read with <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(), not <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preserve_file_stats</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the write succeeded, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="971" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1634" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_write_with_callbacks</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks)</argsstring>
        <name>FLAC__metadata_chain_write_with_callbacks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write all metadata out to a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream via callbacks.</para><para>(See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> for the details on how padding is used to write metadata in place if possible.)</para><para>The <emphasis>handle</emphasis> must be open for updating and be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r+&quot;</computeroutput> (or <computeroutput>&quot;r+b&quot;</computeroutput> for Windows).</para><para>For this write function to be used, the chain must have been read with <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks(), not <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(). Also, <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> must have returned <computeroutput>false</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to write. The handle will NOT be closed after the metadata is written; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O. The mandatory callbacks are <emphasis>write</emphasis> and <emphasis>seek</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the write succeeded, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1001" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1685" bodyend="1720"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_write_with_callbacks_and_tempfile</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks, FLAC__IOHandle temp_handle, FLAC__IOCallbacks temp_callbacks)</argsstring>
        <name>FLAC__metadata_chain_write_with_callbacks_and_tempfile</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>temp_handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>temp_callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write all metadata out to a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream via callbacks.</para><para>(See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> for the details on how padding is used to write metadata in place if possible.)</para><para>This version of the write-with-callbacks function must be used when <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> returns true. In this function, you must supply an I/O handle corresponding to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to edit, and a temporary handle to which the new <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will be written. It is the caller&apos;s job to move this temporary <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file on top of the original <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to complete the metadata edit.</para><para>The <emphasis>handle</emphasis> must be open for reading and be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r&quot;</computeroutput> (or <computeroutput>&quot;rb&quot;</computeroutput> for Windows).</para><para>The <emphasis>temp_handle</emphasis> must be open for writing. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;w&quot;</computeroutput> (or <computeroutput>&quot;wb&quot;</computeroutput> for Windows). It should be an empty stream, or at least positioned at the start-of-file (in which case it is the caller&apos;s duty to truncate it on return).</para><para>For this write function to be used, the chain must have been read with <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks(), not <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(). Also, <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> must have returned <computeroutput>true</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the original <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to read. The handle will NOT be closed after the metadata is written; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O on <emphasis>handle</emphasis>. The mandatory callbacks are <emphasis>read</emphasis>, <emphasis>seek</emphasis>, and <emphasis>eof</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temp_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to write. The handle will NOT be closed after the metadata is written; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temp_callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O on temp_handle. The only mandatory callback is <emphasis>write</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the write succeeded, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1052" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1722" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gab24934bc1f0e054c631a22c9b9221f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_chain_merge_padding</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_merge_padding</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge adjacent PADDING blocks into a single block.</para><para><simplesect kind="note"><para>This function does not write to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file, it only modifies the chain.</para></simplesect>
<simplesect kind="warning"><para>Any iterator on the current chain will become invalid after this call. You should delete the iterator and get a new one.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1066" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1781" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gaa14304da1c8e706808cfafa5cbbf575b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_chain_sort_padding</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_sort_padding</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will move all PADDING blocks to the end on the metadata, then merge them into a single block.</para><para><simplesect kind="note"><para>This function does not write to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file, it only modifies the chain.</para></simplesect>
<simplesect kind="warning"><para>Any iterator on the current chain will become invalid after this call. You should delete the iterator and get a new one.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1081" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1793" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gac988906d63bd2ddc910d8f0b118591f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
        <definition>FLAC_API FLAC__Metadata_Iterator* FLAC__metadata_iterator_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_iterator_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new iterator instance.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_Iterator*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1091" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1820" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga1af713d0ae3f7b761579b4fac64f0a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_iterator_delete</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an iterator instance. Deletes the object pointed to by <emphasis>iterator</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1099" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1832" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_iterator_init</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_iterator_init</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the iterator to point to the first metadata block in the given chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing and initialized (read) chain.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1110" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1839" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga3997509ae7eeea3b208700cdbbbd97ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_next</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_next</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator forward one metadata block, returning <computeroutput>false</computeroutput> if already at the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the last metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1124" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1849" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga003373a88bea6cea2df32f110a95e912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_prev</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_prev</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator backward one metadata block, returning <computeroutput>false</computeroutput> if already at the beginning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the first metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1138" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1860" bodyend="1869"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga8221ea86b62119785c774aaece48a29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref></type>
        <definition>FLAC_API FLAC__MetadataType FLAC__metadata_iterator_get_block_type</definition>
        <argsstring>(const FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_get_block_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type of the metadata block at the current position.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__MetadataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the metadata block at the current iterator position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1871" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata* FLAC__metadata_iterator_get_block</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_get_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the metadata block at the current position. You can modify the block in place but must write the chain before the changes are reflected to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. You do not need to call <ref refid="group__flac__metadata__level2_1gab40c33a0bf35a2932a5c13f5230e0d9e" kindref="member">FLAC__metadata_iterator_set_block()</ref> to reflect the changes; the pointer returned by <ref refid="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" kindref="member">FLAC__metadata_iterator_get_block()</ref> points directly into the chain.</para><para><simplesect kind="warning"><para>Do not call <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref> on the returned object; to delete a block use <ref refid="group__flac__metadata__level2_1ga18fdaae4986696dc000cae6357810f7b" kindref="member">FLAC__metadata_iterator_delete_block()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata*</parametername>
</parameternamelist>
<parameterdescription>
<para>The current metadata block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1880" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gab40c33a0bf35a2932a5c13f5230e0d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_set_block</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__StreamMetadata *block)</argsstring>
        <name>FLAC__metadata_iterator_set_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the metadata block at the current position, replacing the existing block. The new block passed in becomes owned by the chain and it will be deleted when the chain is deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a metadata block.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> <programlisting><codeline><highlight class="normal">block<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, or a memory allocation error occurs, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1188" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1888" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga18fdaae4986696dc000cae6357810f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_delete_block</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__bool replace_with_padding)</argsstring>
        <name>FLAC__metadata_iterator_delete_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>replace_with_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the current block from the chain. If <emphasis>replace_with_padding</emphasis> is <computeroutput>true</computeroutput>, the block will instead be replaced with a padding block of equal size. You can not delete the STREAMINFO block. The iterator will be left pointing to the block before the one just &quot;deleted&quot;, even if <emphasis>replace_with_padding</emphasis> is <computeroutput>true</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace_with_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1206" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1895" bodyend="1919"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga163c1b4d8fdd72c0d6fb8816b2ae9b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_insert_block_before</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__StreamMetadata *block)</argsstring>
        <name>FLAC__metadata_iterator_insert_block_before</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new block before the current block. You cannot insert a block before the first STREAMINFO block. You cannot insert a STREAMINFO block as there can be only one, the one that already exists at the head when you read in a chain. The chain takes ownership of the new block and it will be deleted when the chain is deleted. The iterator will be left pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a metadata block to insert.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, or a memory allocation error occurs, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1225" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1921" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga2f9d8e02bd2e5ffb235af0b02d347d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_insert_block_after</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__StreamMetadata *block)</argsstring>
        <name>FLAC__metadata_iterator_insert_block_after</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new block after the current block. You cannot insert a STREAMINFO block as there can be only one, the one that already exists at the head when you read in a chain. The chain takes ownership of the new block and it will be deleted when the chain is deleted. The iterator will be left pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a metadata block to insert.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, or a memory allocation error occurs, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1243" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1946" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga0d21a62648d8c5321b4b47f8ee5a52f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata* FLAC__metadata_object_new</definition>
        <argsstring>(FLAC__MetadataType type)</argsstring>
        <name>FLAC__metadata_object_new</name>
        <param>
          <type><ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new metadata object instance of the given type.</para><para>The object will be &quot;empty&quot;; i.e. values and data pointers will be <computeroutput>0</computeroutput>, with the exception of FLAC__METADATA_TYPE_VORBIS_COMMENT, which will have the vendor string set (but zero comments).</para><para>Do not pass in a value greater than or equal to <emphasis>FLAC__METADATA_TYPE_UNDEFINED</emphasis> unless you really know what you&apos;re doing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of object to create </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory or the type code is greater than FLAC__MAX_METADATA_TYPE_CODE, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1313" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="439" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga16b828b246e9af941e3e616e6bcd74c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata* FLAC__metadata_object_clone</definition>
        <argsstring>(const FLAC__StreamMetadata *object)</argsstring>
        <name>FLAC__metadata_object_clone</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a copy of an existing metadata object.</para><para>The copy is a &quot;deep&quot; copy, i.e. dynamically allocated data within the object is also copied. The caller takes ownership of the new block and is responsible for freeing it with <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object to copy.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1327" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="530" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_object_delete</definition>
        <argsstring>(FLAC__StreamMetadata *object)</argsstring>
        <name>FLAC__metadata_object_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a metadata object. Deletes the object pointed to by <emphasis>object</emphasis>.</para><para>The delete is a &quot;deep&quot; delete, i.e. dynamically allocated data within the object is also deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing object.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1338" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="696" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gac834137d4837c304ca5db4c8407900bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_is_equal</definition>
        <argsstring>(const FLAC__StreamMetadata *block1, const FLAC__StreamMetadata *block2)</argsstring>
        <name>FLAC__metadata_object_is_equal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block1</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares two metadata objects.</para><para>The compare is &quot;deep&quot;, i.e. dynamically allocated data within the object is also compared.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block1</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block2</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing object.  <programlisting><codeline><highlight class="normal">block1<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">block2<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if objects are identical, else <computeroutput>false</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1353" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="875" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga8f7fbaa68d5637e2409a053ec2ff744d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_application_set_data</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__byte *data, unsigned length, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_application_set_data</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the application data of an APPLICATION block.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the data is stored; otherwise, the object takes ownership of the pointer. The existing data will be freed if this function is successful, otherwise the original data will remain if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails.</para><para><simplesect kind="note"><para>It is safe to pass a const pointer to <emphasis>data</emphasis> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing APPLICATION object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the data to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <emphasis>data</emphasis> in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_APPLICATION<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(data<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(data<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>length<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>copy<sp/>==<sp/>false)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1376" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="909" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga836f94fa622ece4f50dadf27c7ec107a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_resize_points</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned new_num_points)</argsstring>
        <name>FLAC__metadata_object_seektable_resize_points</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>new_num_points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the seekpoint array.</para><para>If the size shrinks, elements will truncated; if it grows, new placeholder points will be added to the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_num_points</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired length of the array; may be <computeroutput>0</computeroutput>.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(object-&gt;data.seek_table.points<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.seek_table.num_points<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(object-&gt;data.seek_table.points<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.seek_table.num_points<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation error, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1393" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="935" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gae2c58ebdfb9f2b238d45971b14600944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_object_seektable_set_point</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned point_num, FLAC__StreamMetadata_SeekPoint point)</argsstring>
        <name>FLAC__metadata_object_seektable_set_point</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>point_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___seek_point" kindref="compound">FLAC__StreamMetadata_SeekPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a seekpoint in a seektable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into seekpoint array to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to set.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.seek_table.num_points<sp/>&gt;<sp/>point_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1405" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="981" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga0c658260aaffb126486f5d1e211b53e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_insert_point</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned point_num, FLAC__StreamMetadata_SeekPoint point)</argsstring>
        <name>FLAC__metadata_object_seektable_insert_point</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>point_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___seek_point" kindref="compound">FLAC__StreamMetadata_SeekPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a seekpoint into a seektable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into seekpoint array to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to set.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.seek_table.num_points<sp/>&gt;=<sp/>point_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation error, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1419" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="990" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga5a865f792845cbf22b5935c3d96568d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_delete_point</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned point_num)</argsstring>
        <name>FLAC__metadata_object_seektable_delete_point</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>point_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a seekpoint from a seektable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into seekpoint array to set.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.seek_table.num_points<sp/>&gt;<sp/>point_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation error, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1432" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1010" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga08f33e2ef85d72363dda82de3208ed1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_is_legal</definition>
        <argsstring>(const FLAC__StreamMetadata *object)</argsstring>
        <name>FLAC__metadata_object_seektable_is_legal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check a seektable to see if it conforms to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> specification. See the format specification for limits on the contents of the seektable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if seek table is illegal, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1445" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1025" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gae9d8c43dc78bde9778c4e57c5f74b025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_template_append_placeholders</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned num)</argsstring>
        <name>FLAC__metadata_object_seektable_template_append_placeholders</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a number of placeholder points to the end of a seek table.</para><para><simplesect kind="note"><para>As with the other ..._seektable_template_... functions, you should call <ref refid="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" kindref="member">FLAC__metadata_object_seektable_template_sort()</ref> when finished to make the seek table legal.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of placeholder points to append.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1462" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1033" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga9ce1940ca29d71739316cf104256c078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_template_append_point</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__uint64 sample_number)</argsstring>
        <name>FLAC__metadata_object_seektable_template_append_point</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
          <declname>sample_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a specific seek point template to the end of a seek table.</para><para><simplesect kind="note"><para>As with the other ..._seektable_template_... functions, you should call <ref refid="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" kindref="member">FLAC__metadata_object_seektable_template_sort()</ref> when finished to make the seek table legal.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The sample number of the seek point template.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1479" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1045" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gac27a59879fa8cdf47b75f8d73de82f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_template_append_points</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__uint64 sample_numbers[], unsigned num)</argsstring>
        <name>FLAC__metadata_object_seektable_template_append_points</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
          <declname>sample_numbers</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append specific seek point templates to the end of a seek table.</para><para><simplesect kind="note"><para>As with the other ..._seektable_template_... functions, you should call <ref refid="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" kindref="member">FLAC__metadata_object_seektable_template_sort()</ref> when finished to make the seek table legal.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_numbers</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of sample numbers for the seek points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of seek point templates to append.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1497" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1064" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gab96c6585578c87f6853731860e2872e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_template_append_spaced_points</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned num, FLAC__uint64 total_samples)</argsstring>
        <name>FLAC__metadata_object_seektable_template_append_spaced_points</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
          <declname>total_samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a set of evenly-spaced seek point templates to the end of a seek table.</para><para><simplesect kind="note"><para>As with the other ..._seektable_template_... functions, you should call <ref refid="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" kindref="member">FLAC__metadata_object_seektable_template_sort()</ref> when finished to make the seek table legal.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of placeholder points to append. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of samples to be encoded; the seekpoints will be spaced approximately <emphasis>total_samples</emphasis> / <emphasis>num</emphasis> samples apart.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">total_samples<sp/>&gt;<sp/>0<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1519" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1089" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gabf797b64b96808cabf1d995573680fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_template_append_spaced_points_by_samples</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned samples, FLAC__uint64 total_samples)</argsstring>
        <name>FLAC__metadata_object_seektable_template_append_spaced_points_by_samples</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>samples</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
          <declname>total_samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a set of evenly-spaced seek point templates to the end of a seek table.</para><para><simplesect kind="note"><para>As with the other ..._seektable_template_... functions, you should call <ref refid="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" kindref="member">FLAC__metadata_object_seektable_template_sort()</ref> when finished to make the seek table legal.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing SEEKTABLE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples apart to space the placeholder points. The first point will be at sample <computeroutput>0</computeroutput>, the second at sample <emphasis>samples</emphasis>, then 2*<emphasis>samples</emphasis>, and so on. As long as <emphasis>samples</emphasis> and <emphasis>total_samples</emphasis> are greater than <computeroutput>0</computeroutput>, there will always be at least one seekpoint at sample <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of samples to be encoded; the seekpoints will be spaced <emphasis>samples</emphasis> samples apart.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">samples<sp/>&gt;<sp/>0<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">total_samples<sp/>&gt;<sp/>0<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1547" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1114" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_seektable_template_sort</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__bool compact)</argsstring>
        <name>FLAC__metadata_object_seektable_template_sort</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>compact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort a seek table&apos;s seek points according to the format specification, removing duplicates.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a seek table to be sorted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compact</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>false</computeroutput>, behaves like <ref refid="group__flac__format_1gad1b0090d45a6d65a696a81261bd7fbf6" kindref="member">FLAC__format_seektable_sort()</ref>. If <computeroutput>true</computeroutput>, duplicates are deleted and the seek table is shrunk appropriately; the number of placeholder points present in the seek table will be the same after the call as before.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_SEEKTABLE<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if realloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1564" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1147" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gabfc6277c08a86329efd19572695b57e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_set_vendor_string</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__StreamMetadata_VorbisComment_Entry entry, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_set_vendor_string</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the vendor string in a VORBIS_COMMENT block.</para><para>For convenience, a trailing NUL is added to the entry if it doesn&apos;t have one already.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the entry is stored; otherwise, the object takes ownership of the <computeroutput>entry.entry</computeroutput> pointer.</para><para><simplesect kind="note"><para>If this function returns <computeroutput>false</computeroutput>, the caller still owns the pointer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry to set the vendor string to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(entry.entry<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>==<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails or <emphasis>entry</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1589" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1159" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga264611f0af9b5e09d083c1ca5495f1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_resize_comments</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned new_num_comments)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_resize_comments</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>new_num_comments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the comment array.</para><para>If the size shrinks, elements will truncated; if it grows, new empty fields will be added to the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_num_comments</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired length of the array; may be <computeroutput>0</computeroutput>.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(object-&gt;data.vorbis_comment.comments<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.vorbis_comment.num_comments<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(object-&gt;data.vorbis_comment.comments<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.vorbis_comment.num_comments<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1606" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1166" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gadf034b2c385e7932c6be2d724a0deae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_set_comment</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned comment_num, FLAC__StreamMetadata_VorbisComment_Entry entry, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_set_comment</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>comment_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a comment in a VORBIS_COMMENT block.</para><para>For convenience, a trailing NUL is added to the entry if it doesn&apos;t have one already.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the entry is stored; otherwise, the object takes ownership of the <computeroutput>entry.entry</computeroutput> pointer.</para><para><simplesect kind="note"><para>If this function returns <computeroutput>false</computeroutput>, the caller still owns the pointer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comment_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into comment array to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry to set the comment to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">comment_num<sp/>&lt;<sp/>object-&gt;data.vorbis_comment.num_comments<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(entry.entry<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>==<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails or <emphasis>entry</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1633" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1214" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga0c23f59f465f302b35a2d3ab1eae07e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_insert_comment</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned comment_num, FLAC__StreamMetadata_VorbisComment_Entry entry, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_insert_comment</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>comment_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a comment in a VORBIS_COMMENT block at the given index.</para><para>For convenience, a trailing NUL is added to the entry if it doesn&apos;t have one already.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the entry is stored; otherwise, the object takes ownership of the <computeroutput>entry.entry</computeroutput> pointer.</para><para><simplesect kind="note"><para>If this function returns <computeroutput>false</computeroutput>, the caller still owns the pointer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comment_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index at which to insert the comment. The comments at and after <emphasis>comment_num</emphasis> move right one position. To append a comment to the end, set <emphasis>comment_num</emphasis> to <computeroutput>object-&gt;data.vorbis_comment.num_comments</computeroutput> . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.vorbis_comment.num_comments<sp/>&gt;=<sp/>comment_num<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(entry.entry<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>copy<sp/>==<sp/>false)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails or <emphasis>entry</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1663" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1224" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gad04ef80ae5f852db8f3729a6ef8c1631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_append_comment</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__StreamMetadata_VorbisComment_Entry entry, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_append_comment</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a comment to a VORBIS_COMMENT block.</para><para>For convenience, a trailing NUL is added to the entry if it doesn&apos;t have one already.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the entry is stored; otherwise, the object takes ownership of the <computeroutput>entry.entry</computeroutput> pointer.</para><para><simplesect kind="note"><para>If this function returns <computeroutput>false</computeroutput>, the caller still owns the pointer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(entry.entry<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>copy<sp/>==<sp/>false)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails or <emphasis>entry</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1688" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1248" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gabef3625575b7e4c7257617a27220959a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_replace_comment</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__StreamMetadata_VorbisComment_Entry entry, FLAC__bool all, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_replace_comment</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>all</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces comments in a VORBIS_COMMENT block with a new one.</para><para>For convenience, a trailing NUL is added to the entry if it doesn&apos;t have one already.</para><para>Depending on the the value of <emphasis>all</emphasis>, either all or just the first comment whose field name(s) match the given entry&apos;s name will be replaced by the given entry. If no comments match, <emphasis>entry</emphasis> will simply be appended.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the entry is stored; otherwise, the object takes ownership of the <computeroutput>entry.entry</computeroutput> pointer.</para><para><simplesect kind="note"><para>If this function returns <computeroutput>false</computeroutput>, the caller still owns the pointer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, all comments whose field name matches <emphasis>entry&apos;s</emphasis> field name will be removed, and <emphasis>entry</emphasis> will be inserted at the position of the first matching comment. If <computeroutput>false</computeroutput>, only the first comment whose field name matches <emphasis>entry&apos;s</emphasis> field name will be replaced with <emphasis>entry</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(entry.entry<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>copy<sp/>==<sp/>false)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails or <emphasis>entry</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1723" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1255" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga2d1b309d4ca207039ad6d19bd779800f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_delete_comment</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned comment_num)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_delete_comment</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>comment_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a comment in a VORBIS_COMMENT block at the given index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comment_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the comment to delete.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.vorbis_comment.num_comments<sp/>&gt;<sp/>comment_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if realloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1736" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1300" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga0ec0c7ddd3a8832ee7a75bf47956b1c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_entry_from_name_value_pair</definition>
        <argsstring>(FLAC__StreamMetadata_VorbisComment_Entry *entry, const char *field_name, const char *field_value)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_entry_from_name_value_pair</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a Vorbis comment entry from NUL-terminated name and value strings.</para><para>On return, the filled-in <emphasis>entry-&gt;entry</emphasis> pointer will point to malloc()ed memory and shall be owned by the caller. For convenience the entry will have a terminating NUL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a Vorbis comment entry. The entry&apos;s <computeroutput>entry</computeroutput> pointer should not point to allocated memory as it will be overwritten. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name in ASCII, <computeroutput>NUL</computeroutput> terminated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The field value in UTF-8, <computeroutput>NUL</computeroutput> terminated.  <programlisting><codeline><highlight class="normal">entry<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">field_name<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">field_value<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if malloc() fails, or if <emphasis>field_name</emphasis> or <emphasis>field_value</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1757" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1322" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gaca557b35c7c1ac19e30794bcf529746b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_entry_to_name_value_pair</definition>
        <argsstring>(const FLAC__StreamMetadata_VorbisComment_Entry entry, char **field_name, char **field_value)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_entry_to_name_value_pair</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>field_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits a Vorbis comment entry into NUL-terminated name and value strings.</para><para>The returned pointers to name and value will be allocated by malloc() and shall be owned by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>An existing Vorbis comment entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of where the returned pointer to the field name will be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of where the returned pointer to the field value will be stored.  <programlisting><codeline><highlight class="normal">(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">memchr(entry.entry,<sp/>&apos;=&apos;,<sp/>entry.length)<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">field_name<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">field_value<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation fails or <emphasis>entry</emphasis> does not comply with the Vorbis comment specification, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1778" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1348" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gac31ee3de9f9931628f120cb611bb0f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_entry_matches</definition>
        <argsstring>(const FLAC__StreamMetadata_VorbisComment_Entry entry, const char *field_name, unsigned field_name_length)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_entry_matches</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>field_name_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the given Vorbis comment entry&apos;s field name matches the given field name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>An existing Vorbis comment entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <emphasis>field_name</emphasis>, not including the terminating <computeroutput>NUL</computeroutput>.  <programlisting><codeline><highlight class="normal">(entry.entry<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry.length<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the field names match, else <computeroutput>false</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1792" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1379" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gae094c1ce4f248d49e8c099661bd5288e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>FLAC_API int FLAC__metadata_object_vorbiscomment_find_entry_from</definition>
        <argsstring>(const FLAC__StreamMetadata *object, unsigned offset, const char *field_name)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_find_entry_from</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a Vorbis comment with the given field name.</para><para>The search begins at entry number <emphasis>offset</emphasis>; use an offset of 0 to search from the beginning of the comment array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset into the comment array from where to start the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of the comment to find.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">field_name<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in the comment array of the first comment whose field name matches <emphasis>field_name</emphasis>, or <computeroutput>-1</computeroutput> if no match was found. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1811" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1388" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga6812052a110800bef2f4139017501507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>FLAC_API int FLAC__metadata_object_vorbiscomment_remove_entry_matching</definition>
        <argsstring>(FLAC__StreamMetadata *object, const char *field_name)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_remove_entry_matching</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove first Vorbis comment matching the given field name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of comment to delete.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>-1</computeroutput> for memory allocation error, <computeroutput>0</computeroutput> for no matching entries, <computeroutput>1</computeroutput> for one matching entry deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1824" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1395" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga525525f5f21b1caee776cba3cfb6d72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>FLAC_API int FLAC__metadata_object_vorbiscomment_remove_entries_matching</definition>
        <argsstring>(FLAC__StreamMetadata *object, const char *field_name)</argsstring>
        <name>FLAC__metadata_object_vorbiscomment_remove_entries_matching</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>field_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all Vorbis comments matching the given field name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing VORBIS_COMMENT object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of comments to delete.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_VORBIS_COMMENT<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>-1</computeroutput> for memory allocation error, <computeroutput>0</computeroutput> for no matching entries, else the number of matching entries deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1837" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1415" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga9bc27c6ed075c29d12027079e00d9997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata_CueSheet_Track* FLAC__metadata_object_cuesheet_track_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new CUESHEET track instance.</para><para>The object will be &quot;empty&quot;; i.e. values and data pointers will be <computeroutput>0</computeroutput>.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata_CueSheet_Track*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1846" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1436" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gaf085bed12af15034839307ca04286d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata_CueSheet_Track* FLAC__metadata_object_cuesheet_track_clone</definition>
        <argsstring>(const FLAC__StreamMetadata_CueSheet_Track *object)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_clone</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a copy of an existing CUESHEET track object.</para><para>The copy is a &quot;deep&quot; copy, i.e. dynamically allocated data within the object is also copied. The caller takes ownership of the new object and is responsible for freeing it with <ref refid="group__flac__metadata__object_1ga8fbf8912add405a4b1acd510b6e27c89" kindref="member">FLAC__metadata_object_cuesheet_track_delete()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object to copy.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata_CueSheet_Track*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1861" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1441" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga8fbf8912add405a4b1acd510b6e27c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_object_cuesheet_track_delete</definition>
        <argsstring>(FLAC__StreamMetadata_CueSheet_Track *object)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a CUESHEET track object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET track object.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1869" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1467" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga57dfba89ba704574bde4e3fcd925d473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_track_resize_indices</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num, unsigned new_num_indices)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_resize_indices</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>new_num_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize a track&apos;s index point array.</para><para>If the size shrinks, elements will truncated; if it grows, new blank indices will be added to the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the track to modify. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_num_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired length of the array; may be <computeroutput>0</computeroutput>.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;<sp/>track_num<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(object-&gt;data.cue_sheet.tracks[track_num].indices<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.cue_sheet.tracks[track_num].num_indices<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(object-&gt;data.cue_sheet.tracks[track_num].indices<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.cue_sheet.tracks[track_num].num_indices<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation error, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1889" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1473" bodyend="1515"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga2f8c5d80c409eff5ebd53ccd0c6f0984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_track_insert_index</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num, unsigned index_num, FLAC__StreamMetadata_CueSheet_Index index)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_insert_index</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>index_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___index" kindref="compound">FLAC__StreamMetadata_CueSheet_Index</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert an index point in a CUESHEET track at the given index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the track to modify. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the track&apos;s index array at which to insert the index point. NOTE: this is not necessarily the same as the index point&apos;s <emphasis>number</emphasis> field. The indices at and after <emphasis>index_num</emphasis> move right one position. To append an index point to the end, set <emphasis>index_num</emphasis> to <computeroutput>object-&gt;data.cue_sheet.tracks</computeroutput>[track_num].num_indices . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index point to insert.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;<sp/>track_num<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.tracks[track_num].num_indices<sp/>&gt;=<sp/>index_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if realloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1912" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1517" bodyend="1537"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gaa1401ea99e4dc61d3eb034aed7d99602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_track_insert_blank_index</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num, unsigned index_num)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_insert_blank_index</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>index_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a blank index point in a CUESHEET track at the given index.</para><para>A blank index point is one in which all field values are zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the track to modify. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the track&apos;s index array at which to insert the index point. NOTE: this is not necessarily the same as the index point&apos;s <emphasis>number</emphasis> field. The indices at and after <emphasis>index_num</emphasis> move right one position. To append an index point to the end, set <emphasis>index_num</emphasis> to <computeroutput>object-&gt;data.cue_sheet.tracks</computeroutput>[track_num].num_indices .  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;<sp/>track_num<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.tracks[track_num].num_indices<sp/>&gt;=<sp/>index_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if realloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1936" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1539" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga9cba3429dcc863714ceb1de6952c4737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_track_delete_index</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num, unsigned index_num)</argsstring>
        <name>FLAC__metadata_object_cuesheet_track_delete_index</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>index_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete an index point in a CUESHEET track at the given index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the track array of the track to modify. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the track&apos;s index array of the index to delete. NOTE: this is not necessarily the same as the index&apos;s <emphasis>number</emphasis> field.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;<sp/>track_num<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.tracks[track_num].num_indices<sp/>&gt;<sp/>index_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if realloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1955" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1546" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1gafb0e09fdcfb08c466ceb1f6bca961177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_resize_tracks</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned new_num_tracks)</argsstring>
        <name>FLAC__metadata_object_cuesheet_resize_tracks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>new_num_tracks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the track array.</para><para>If the size shrinks, elements will truncated; if it grows, new blank tracks will be added to the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_num_tracks</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired length of the array; may be <computeroutput>0</computeroutput>.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(object-&gt;data.cue_sheet.tracks<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.cue_sheet.num_tracks<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(object-&gt;data.cue_sheet.tracks<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>object-&gt;data.cue_sheet.num_tracks<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if memory allocation error, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1972" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1565" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga682176f845b99956b3974bcc1bb63a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_set_track</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num, FLAC__StreamMetadata_CueSheet_Track *track, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_cuesheet_set_track</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref> *</type>
          <declname>track</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a track in a CUESHEET block.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the track is stored; otherwise, the object takes ownership of the <emphasis>track</emphasis> pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into track array to set. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track</parametername>
</parameternamelist>
<parameterdescription>
<para>The track to set the track to. You may safely pass in a const pointer if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">track_num<sp/>&lt;<sp/>object-&gt;data.cue_sheet.num_tracks<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(track-&gt;indices<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>track-&gt;num_indices<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(track-&gt;indices<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>track-&gt;num_indices<sp/>==<sp/>0)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1994" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1613" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga5dbdffac2cd7e327f711103c15e015ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_insert_track</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num, FLAC__StreamMetadata_CueSheet_Track *track, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_cuesheet_insert_track</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref> *</type>
          <declname>track</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a track in a CUESHEET block at the given index.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the track is stored; otherwise, the object takes ownership of the <emphasis>track</emphasis> pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index at which to insert the track. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. The tracks at and after <emphasis>track_num</emphasis> move right one position. To append a track to the end, set <emphasis>track_num</emphasis> to <computeroutput>object-&gt;data.cue_sheet.num_tracks</computeroutput> . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track</parametername>
</parameternamelist>
<parameterdescription>
<para>The track to insert. You may safely pass in a const pointer if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;=<sp/>track_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2017" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1621" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga87855591d933cd6371010a675f0bc629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_insert_blank_track</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num)</argsstring>
        <name>FLAC__metadata_object_cuesheet_insert_blank_track</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a blank track in a CUESHEET block at the given index.</para><para>A blank track is one in which all field values are zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index at which to insert the track. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field. The tracks at and after <emphasis>track_num</emphasis> move right one position. To append a track to the end, set <emphasis>track_num</emphasis> to <computeroutput>object-&gt;data.cue_sheet.num_tracks</computeroutput> .  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;=<sp/>track_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2036" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1642" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga3232bae96f19722bee19afd37fdc214d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_delete_track</definition>
        <argsstring>(FLAC__StreamMetadata *object, unsigned track_num)</argsstring>
        <name>FLAC__metadata_object_cuesheet_delete_track</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>track_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a track in a CUESHEET block at the given index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the track array of the track to delete. NOTE: this is not necessarily the same as the track&apos;s <emphasis>number</emphasis> field.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;data.cue_sheet.num_tracks<sp/>&gt;<sp/>track_num<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if realloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2051" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1649" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga1160f85e437c1a763ec0a8f372cb1390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_cuesheet_is_legal</definition>
        <argsstring>(const FLAC__StreamMetadata *object, FLAC__bool check_cd_da_subset, const char **violation)</argsstring>
        <name>FLAC__metadata_object_cuesheet_is_legal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>check_cd_da_subset</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>violation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check a cue sheet to see if it conforms to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> specification. See the format specification for limits on the contents of the cue sheet.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_cd_da_subset</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, check CUESHEET against more stringent requirements for a CD-DA (audio) disc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>violation</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of a pointer to a string. If there is a violation, a pointer to a string explanation of the violation will be returned here. <emphasis>violation</emphasis> may be <computeroutput>NULL</computeroutput> if you don&apos;t need the returned string. Do not free the returned string; it will always point to static data.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if cue sheet is illegal, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2072" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1671" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga897138ca0a985d8741f73d6657f38845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
        <definition>FLAC_API FLAC__uint32 FLAC__metadata_object_cuesheet_calculate_cddb_id</definition>
        <argsstring>(const FLAC__StreamMetadata *object)</argsstring>
        <name>FLAC__metadata_object_cuesheet_calculate_cddb_id</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate and return the CDDB/freedb ID for a cue sheet. The function assumes the cue sheet corresponds to a CD; the result is undefined if the cuesheet&apos;s is_cd bit is not set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing CUESHEET object.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_CUESHEET<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__uint32</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsigned integer representation of the CDDB/freedb ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2085" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1704" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga5db3363648b6e7693e032f200f241e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_picture_set_mime_type</definition>
        <argsstring>(FLAC__StreamMetadata *object, char *mime_type, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_picture_set_mime_type</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>mime_type</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the MIME type of a PICTURE block.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the string is stored; otherwise, the object takes ownership of the pointer. The existing string will be freed if this function is successful, otherwise the original string will remain if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails.</para><para><simplesect kind="note"><para>It is safe to pass a const pointer to <emphasis>mime_type</emphasis> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing PICTURE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the MIME type string. The string must be ASCII characters 0x20-0x7e, NUL-terminated. No validation is done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_PICTURE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">(mime_type<sp/>!=<sp/>NULL)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1726" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga5582649e395e70a4b3df510a39d70cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_picture_set_description</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__byte *description, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_picture_set_description</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the description of a PICTURE block.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the string is stored; otherwise, the object takes ownership of the pointer. The existing string will be freed if this function is successful, otherwise the original string will remain if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails.</para><para><simplesect kind="note"><para>It is safe to pass a const pointer to <emphasis>description</emphasis> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing PICTURE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the description string. The string must be valid UTF-8, NUL-terminated. No validation is done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_PICTURE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">(description<sp/>!=<sp/>NULL)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2130" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1758" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga07e5950094528e2954c06d7991d543a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_picture_set_data</definition>
        <argsstring>(FLAC__StreamMetadata *object, FLAC__byte *data, FLAC__uint32 length, FLAC__bool copy)</argsstring>
        <name>FLAC__metadata_object_picture_set_data</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the picture data of a PICTURE block.</para><para>If <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>, a copy of the data is stored; otherwise, the object takes ownership of the pointer. Also sets the <emphasis>data_length</emphasis> field of the metadata object to what is passed in as the <emphasis>length</emphasis> parameter. The existing data will be freed if this function is successful, otherwise the original data and data_length will remain if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails.</para><para><simplesect kind="note"><para>It is safe to pass a const pointer to <emphasis>data</emphasis> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing PICTURE object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the data to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <emphasis>data</emphasis> in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_PICTURE<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal"><sp/>(data<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>length<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline><highlight class="normal">(data<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>length<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>copy<sp/>==<sp/>false)<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if <emphasis>copy</emphasis> is <computeroutput>true</computeroutput> and malloc() fails, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2155" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1790" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__object_1ga2e389272f4df904e1652e79c89ca55c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_object_picture_is_legal</definition>
        <argsstring>(const FLAC__StreamMetadata *object, const char **violation)</argsstring>
        <name>FLAC__metadata_object_picture_is_legal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>violation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check a PICTURE block to see if it conforms to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> specification. See the format specification for limits on the contents of the PICTURE block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to existing PICTURE block to be checked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>violation</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of a pointer to a string. If there is a violation, a pointer to a string explanation of the violation will be returned here. <emphasis>violation</emphasis> may be <computeroutput>NULL</computeroutput> if you don&apos;t need the returned string. Do not free the returned string; it will always point to static data.  <programlisting><codeline><highlight class="normal">object<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">object-&gt;type<sp/>==<sp/>FLAC__METADATA_TYPE_PICTURE<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if PICTURE block is illegal, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="2174" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c" bodystart="1818" bodyend="1824"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module provides functions for creating and manipulating <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata blocks in memory, and three progressively more powerful interfaces for traversing and editing metadata in <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> files. </para>    </briefdescription>
    <detaileddescription>
<para>See the detailed documentation for each interface in the <ref refid="group__flac__metadata" kindref="compound">metadata </ref> module. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>libFLAC<sp/>-<sp/>Free<sp/>Lossless<sp/>Audio<sp/>Codec<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2001-2009<sp/><sp/>Josh<sp/>Coalson</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/><sp/>Xiph.Org<sp/>Foundation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Xiph.org<sp/>Foundation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>FOUNDATION<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__METADATA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__METADATA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>off_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib-src_2libflac_2include_2_f_l_a_c_2export_8h" kindref="compound">export.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="callback_8h" kindref="compound">callback.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="include_2_f_l_a_c_2format_8h" kindref="compound">format.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>(For<sp/>an<sp/>example<sp/>of<sp/>how<sp/>all<sp/>these<sp/>routines<sp/>are<sp/>used,<sp/>see<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>code<sp/>for<sp/>the<sp/>unit<sp/>tests<sp/>in<sp/>src/test_libFLAC/metadata_*.c,<sp/>or</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>metaflac<sp/>in<sp/>src/metaflac/)</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level0_1gaf248d1ccc8025b9e9d7f532b8af4ab07" kindref="member">FLAC__metadata_get_streaminfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*streaminfo);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level0_1gaf66469f31dca28837ffd3f8b0ec5c082" kindref="member">FLAC__metadata_get_tags</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>**<ref refid="namespacelv2specgen_1af2d57abb8725f566629ed73846808438" kindref="member">tags</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level0_1ga6ee2633dc179c2a0cb5fef5762faf0fd" kindref="member">FLAC__metadata_get_cuesheet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>**cuesheet);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level0_1gaa13138ab038694909964998a113817b4" kindref="member">FLAC__metadata_get_picture</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>**picture,<sp/><ref refid="group__flac__format_1gaf6d3e836cee023e0b8d897f1fdc9825d" kindref="member">FLAC__StreamMetadata_Picture_Type</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*description,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_height,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_depth,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_colors);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>\}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref>;</highlight></codeline>
<codeline lineno="303" refid="group__flac__metadata__level1_1ga6accccddbb867dfc2eece9ee3ffecb3a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="group__flac__metadata__level1_1gac926e7d2773a05066115cac9048bbec9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a33aadd73194c0d7e307d643237e0ddcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a33aadd73194c0d7e307d643237e0ddcd" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="314" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a0a3933cb38c8957a8d5c3d1afb4766f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a0a3933cb38c8957a8d5c3d1afb4766f9" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT</ref>,</highlight></codeline>
<codeline lineno="317" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a20e835bbb74b4d039e598617f68d2af6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a20e835bbb74b4d039e598617f68d2af6" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ERROR_OPENING_FILE</ref>,</highlight></codeline>
<codeline lineno="320" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a7785f77a612be8956fbe7cab73497220" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a7785f77a612be8956fbe7cab73497220" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_A_FLAC_FILE</ref>,</highlight></codeline>
<codeline lineno="323" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9af055d8c0c663e72134fe2db8037b6880" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9af055d8c0c663e72134fe2db8037b6880" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_WRITABLE</ref>,</highlight></codeline>
<codeline lineno="326" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a14c897124887858109200723826f85b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a14c897124887858109200723826f85b7" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_BAD_METADATA</ref>,</highlight></codeline>
<codeline lineno="329" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a088df964f0852dd7e19304e920c3ee8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a088df964f0852dd7e19304e920c3ee8e" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR</ref>,</highlight></codeline>
<codeline lineno="332" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2ad85a32e291d1e918692d68cc22fd40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2ad85a32e291d1e918692d68cc22fd40" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR</ref>,</highlight></codeline>
<codeline lineno="335" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9ac2337299c2347ca311caeaa7d71d857c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9ac2337299c2347ca311caeaa7d71d857c" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_WRITE_ERROR</ref>,</highlight></codeline>
<codeline lineno="338" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2e073843fa99419d76a0b210da96ceb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a2e073843fa99419d76a0b210da96ceb6" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_RENAME_ERROR</ref>,</highlight></codeline>
<codeline lineno="341" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a4f855433038c576da127fc1de9d18f9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a4f855433038c576da127fc1de9d18f9b" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_UNLINK_ERROR</ref>,</highlight></codeline>
<codeline lineno="344" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9aa8386ed0a20d7e91b0022d203ec3cdec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9aa8386ed0a20d7e91b0022d203ec3cdec" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_MEMORY_ALLOCATION_ERROR</ref>,</highlight></codeline>
<codeline lineno="347" refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a9d821ae65a1c5de619daa88c850906df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level1_1ggac926e7d2773a05066115cac9048bbec9a9d821ae65a1c5de619daa88c850906df" kindref="member">FLAC__METADATA_SIMPLE_ITERATOR_STATUS_INTERNAL_ERROR</ref></highlight></codeline>
<codeline lineno="350"><highlight class="normal">}<sp/><ref refid="group__flac__metadata__level1_1gac926e7d2773a05066115cac9048bbec9" kindref="member">FLAC__Metadata_SimpleIteratorStatus</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level1_1ga28ea4a13fcbe97a732fafb13417036bb" kindref="member">FLAC__Metadata_SimpleIteratorStatusString</ref>[];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*<ref refid="group__flac__metadata__level1_1ga5b32f4eba211e05727428e9080f4e393" kindref="member">FLAC__metadata_simple_iterator_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level1_1ga46e64734300a022bb9616b26228b0348" kindref="member">FLAC__metadata_simple_iterator_delete</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/>FLAC__Metadata_SimpleIteratorStatus<sp/><ref refid="group__flac__metadata__level1_1ga68cfafa2323154f3ee1d3061eafe109f" kindref="member">FLAC__metadata_simple_iterator_status</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1ga2a055cca4e6e06ae62517c8b0fa6e8a3" kindref="member">FLAC__metadata_simple_iterator_init</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>read_only,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>preserve_file_stats);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1gadc654c1361b53737bab20efa3e75a0fc" kindref="member">FLAC__metadata_simple_iterator_is_writable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1gacac860d14fc0ff37cc2c034d3f972320" kindref="member">FLAC__metadata_simple_iterator_next</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1ga49f495dec0f44116d66e1b79356a1160" kindref="member">FLAC__metadata_simple_iterator_prev</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1ga4dd81539fb698163209d05af13a2ec3c" kindref="member">FLAC__metadata_simple_iterator_is_last</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="macconfig_8h_1ae498af04567b740d66e09d36613c2cd8" kindref="member">off_t</ref><sp/><ref refid="group__flac__metadata__level1_1ga46e158a3f70c0e39db9c68a9ff9a2621" kindref="member">FLAC__metadata_simple_iterator_get_block_offset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref><sp/><ref refid="group__flac__metadata__level1_1ga4649a49d230ac8bfc3ec88f5196205bb" kindref="member">FLAC__metadata_simple_iterator_get_block_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level1_1gaad69b5d6c58c48e08dcfb3f1018c2602" kindref="member">FLAC__metadata_simple_iterator_get_block_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1gaf2db2a96f7c60100d620a2eefb8360bc" kindref="member">FLAC__metadata_simple_iterator_get_application_id</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator,<sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="group__flac__metadata__level1_1ga31c9e013b3bdc04866eee2271349fe60" kindref="member">FLAC__metadata_simple_iterator_get_block</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="structblock" kindref="compound">block</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1ga1239ccc5ae1dc3f7cb0e1a61707fafc6" kindref="member">FLAC__metadata_simple_iterator_insert_block_after</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="structblock" kindref="compound">block</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level1_1gaf0a1823f95f8097f0d2ff3f67ae30a88" kindref="member">FLAC__metadata_simple_iterator_delete_block</ref>(<ref refid="struct_f_l_a_c_____metadata___simple_iterator" kindref="compound">FLAC__Metadata_SimpleIterator</ref><sp/>*iterator,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>\}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref>;</highlight></codeline>
<codeline lineno="714" refid="group__flac__metadata__level2_1gaec6993c60b88f222a52af86f8f47bfdf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref>;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref>;</highlight></codeline>
<codeline lineno="719" refid="group__flac__metadata__level2_1ga9f3e135a07cdef7e51597646aa7b89b2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="group__flac__metadata__level2_1gafe2a924893b0800b020bea8160fd4531" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="722" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a293be942ec54576f2b3c73613af968e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a293be942ec54576f2b3c73613af968e9" kindref="member">FLAC__METADATA_CHAIN_STATUS_OK</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="725" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1be9400982f411173af46bf0c3acbdc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1be9400982f411173af46bf0c3acbdc7" kindref="member">FLAC__METADATA_CHAIN_STATUS_ILLEGAL_INPUT</ref>,</highlight></codeline>
<codeline lineno="728" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a43d2741a650576052fa3615d8cd64d86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a43d2741a650576052fa3615d8cd64d86" kindref="member">FLAC__METADATA_CHAIN_STATUS_ERROR_OPENING_FILE</ref>,</highlight></codeline>
<codeline lineno="731" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a99748a4b12ed10f9368375cc8deeb143" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a99748a4b12ed10f9368375cc8deeb143" kindref="member">FLAC__METADATA_CHAIN_STATUS_NOT_A_FLAC_FILE</ref>,</highlight></codeline>
<codeline lineno="734" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ac469c6543ebb117e99064572c16672d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ac469c6543ebb117e99064572c16672d4" kindref="member">FLAC__METADATA_CHAIN_STATUS_NOT_WRITABLE</ref>,</highlight></codeline>
<codeline lineno="737" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a8efd2c76dc06308eb6eba59e1bc6300b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a8efd2c76dc06308eb6eba59e1bc6300b" kindref="member">FLAC__METADATA_CHAIN_STATUS_BAD_METADATA</ref>,</highlight></codeline>
<codeline lineno="740" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0525de5fb5d8aeeb4e848e33a8d503c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0525de5fb5d8aeeb4e848e33a8d503c6" kindref="member">FLAC__METADATA_CHAIN_STATUS_READ_ERROR</ref>,</highlight></codeline>
<codeline lineno="743" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a5814bc26bcf92143198b8e7f028f43a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a5814bc26bcf92143198b8e7f028f43a2" kindref="member">FLAC__METADATA_CHAIN_STATUS_SEEK_ERROR</ref>,</highlight></codeline>
<codeline lineno="746" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a66460c735e4745788b40889329e8489f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a66460c735e4745788b40889329e8489f" kindref="member">FLAC__METADATA_CHAIN_STATUS_WRITE_ERROR</ref>,</highlight></codeline>
<codeline lineno="749" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af4ecf22bc3e5adf78a9c765f856efb0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af4ecf22bc3e5adf78a9c765f856efb0d" kindref="member">FLAC__METADATA_CHAIN_STATUS_RENAME_ERROR</ref>,</highlight></codeline>
<codeline lineno="752" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1cd3138ed493f6a0f5b95fb8481edd1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1cd3138ed493f6a0f5b95fb8481edd1e" kindref="member">FLAC__METADATA_CHAIN_STATUS_UNLINK_ERROR</ref>,</highlight></codeline>
<codeline lineno="755" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab12ec938f7556a163c609194ee0aede0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab12ec938f7556a163c609194ee0aede0" kindref="member">FLAC__METADATA_CHAIN_STATUS_MEMORY_ALLOCATION_ERROR</ref>,</highlight></codeline>
<codeline lineno="758" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a36b9bcf93da8e0f111738a65eab36e9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a36b9bcf93da8e0f111738a65eab36e9d" kindref="member">FLAC__METADATA_CHAIN_STATUS_INTERNAL_ERROR</ref>,</highlight></codeline>
<codeline lineno="761" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab8a6aa5f115db3f07ad2ed4adbcbe060" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab8a6aa5f115db3f07ad2ed4adbcbe060" kindref="member">FLAC__METADATA_CHAIN_STATUS_INVALID_CALLBACKS</ref>,</highlight></codeline>
<codeline lineno="764" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0d9e64ad6514c88b8ea9e9171c42ec9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0d9e64ad6514c88b8ea9e9171c42ec9a" kindref="member">FLAC__METADATA_CHAIN_STATUS_READ_WRITE_MISMATCH</ref>,</highlight></codeline>
<codeline lineno="773" refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af86670707345e2d02cc84aec059459d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af86670707345e2d02cc84aec059459d0" kindref="member">FLAC__METADATA_CHAIN_STATUS_WRONG_WRITE_CALL</ref></highlight></codeline>
<codeline lineno="783"><highlight class="normal">}<sp/><ref refid="group__flac__metadata__level2_1gafe2a924893b0800b020bea8160fd4531" kindref="member">FLAC__Metadata_ChainStatus</ref>;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level2_1gabb4646b4af36d17497676759767f8cc7" kindref="member">FLAC__Metadata_ChainStatusString</ref>[];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">/***********<sp/>FLAC__Metadata_Chain<sp/>***********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="group__flac__metadata__level2_1gafd1f4f58af29325b067ebc5dc34a0f69" kindref="member">FLAC__metadata_chain_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level2_1ga178898eef72ba9d569b1964fffcb4a8b" kindref="member">FLAC__metadata_chain_delete</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/>FLAC__Metadata_ChainStatus<sp/><ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1gae7b34f2929bedea0e14ac14aca253a40" kindref="member">FLAC__metadata_chain_read_ogg</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref><sp/>handle,<sp/><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref><sp/>callbacks);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga62c24f8d127897e5b7d00aa48f889996" kindref="member">FLAC__metadata_chain_read_ogg_with_callbacks</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref><sp/>handle,<sp/><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref><sp/>callbacks);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>preserve_file_stats);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding,<sp/><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref><sp/>handle,<sp/><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref><sp/>callbacks);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>use_padding,<sp/><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref><sp/>handle,<sp/><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref><sp/>callbacks,<sp/><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref><sp/>temp_handle,<sp/><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref><sp/>temp_callbacks);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level2_1gab24934bc1f0e054c631a22c9b9221f3e" kindref="member">FLAC__metadata_chain_merge_padding</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level2_1gaa14304da1c8e706808cfafa5cbbf575b" kindref="member">FLAC__metadata_chain_sort_padding</ref>(<ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">/***********<sp/>FLAC__Metadata_Iterator<sp/>***********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*<ref refid="group__flac__metadata__level2_1gac988906d63bd2ddc910d8f0b118591f7" kindref="member">FLAC__metadata_iterator_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level2_1ga1af713d0ae3f7b761579b4fac64f0a9e" kindref="member">FLAC__metadata_iterator_delete</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator,<sp/><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref><sp/>*<ref refid="struct_f_l_a_c_____metadata___iterator_1a90cbeb7616f0b9457659bdc744bf3d28" kindref="member">chain</ref>);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga3997509ae7eeea3b208700cdbbbd97ed" kindref="member">FLAC__metadata_iterator_next</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga003373a88bea6cea2df32f110a95e912" kindref="member">FLAC__metadata_iterator_prev</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref><sp/><ref refid="group__flac__metadata__level2_1ga8221ea86b62119785c774aaece48a29b" kindref="member">FLAC__metadata_iterator_get_block_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" kindref="member">FLAC__metadata_iterator_get_block</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1gab40c33a0bf35a2932a5c13f5230e0d9e" kindref="member">FLAC__metadata_iterator_set_block</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="structblock" kindref="compound">block</ref>);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga18fdaae4986696dc000cae6357810f7b" kindref="member">FLAC__metadata_iterator_delete_block</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>replace_with_padding);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga163c1b4d8fdd72c0d6fb8816b2ae9b18" kindref="member">FLAC__metadata_iterator_insert_block_before</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="structblock" kindref="compound">block</ref>);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__level2_1ga2f9d8e02bd2e5ffb235af0b02d347d47" kindref="member">FLAC__metadata_iterator_insert_block_after</ref>(<ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref><sp/>*iterator,<sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="structblock" kindref="compound">block</ref>);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>\}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="group__flac__metadata__object_1ga0d21a62648d8c5321b4b47f8ee5a52f0" kindref="member">FLAC__metadata_object_new</ref>(<ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*<ref refid="group__flac__metadata__object_1ga16b828b246e9af941e3e616e6bcd74c0" kindref="member">FLAC__metadata_object_clone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gac834137d4837c304ca5db4c8407900bb" kindref="member">FLAC__metadata_object_is_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*block1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*block2);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga8f7fbaa68d5637e2409a053ec2ff744d" kindref="member">FLAC__metadata_object_application_set_data</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga836f94fa622ece4f50dadf27c7ec107a" kindref="member">FLAC__metadata_object_seektable_resize_points</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>new_num_points);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__object_1gae2c58ebdfb9f2b238d45971b14600944" kindref="member">FLAC__metadata_object_seektable_set_point</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>point_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___seek_point" kindref="compound">FLAC__StreamMetadata_SeekPoint</ref><sp/>point);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga0c658260aaffb126486f5d1e211b53e5" kindref="member">FLAC__metadata_object_seektable_insert_point</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>point_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___seek_point" kindref="compound">FLAC__StreamMetadata_SeekPoint</ref><sp/>point);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga5a865f792845cbf22b5935c3d96568d1" kindref="member">FLAC__metadata_object_seektable_delete_point</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>point_num);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga08f33e2ef85d72363dda82de3208ed1e" kindref="member">FLAC__metadata_object_seektable_is_legal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gae9d8c43dc78bde9778c4e57c5f74b025" kindref="member">FLAC__metadata_object_seektable_template_append_placeholders</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga9ce1940ca29d71739316cf104256c078" kindref="member">FLAC__metadata_object_seektable_template_append_point</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>sample_number);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gac27a59879fa8cdf47b75f8d73de82f0e" kindref="member">FLAC__metadata_object_seektable_template_append_points</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>sample_numbers[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gab96c6585578c87f6853731860e2872e0" kindref="member">FLAC__metadata_object_seektable_template_append_spaced_points</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>total_samples);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gabf797b64b96808cabf1d995573680fe9" kindref="member">FLAC__metadata_object_seektable_template_append_spaced_points_by_samples</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="test__rw__echo_8c_1a39c8d1039645bc924aecc49d76f472a0" kindref="member">samples</ref>,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>total_samples);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gaee6a1f08321b56a3fa65af94dd7830cd" kindref="member">FLAC__metadata_object_seektable_template_sort</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>compact);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gabfc6277c08a86329efd19572695b57e6" kindref="member">FLAC__metadata_object_vorbiscomment_set_vendor_string</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga264611f0af9b5e09d083c1ca5495f1c4" kindref="member">FLAC__metadata_object_vorbiscomment_resize_comments</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>new_num_comments);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gadf034b2c385e7932c6be2d724a0deae3" kindref="member">FLAC__metadata_object_vorbiscomment_set_comment</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>comment_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga0c23f59f465f302b35a2d3ab1eae07e7" kindref="member">FLAC__metadata_object_vorbiscomment_insert_comment</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>comment_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gad04ef80ae5f852db8f3729a6ef8c1631" kindref="member">FLAC__metadata_object_vorbiscomment_append_comment</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gabef3625575b7e4c7257617a27220959a" kindref="member">FLAC__metadata_object_vorbiscomment_replace_comment</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>all,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga2d1b309d4ca207039ad6d19bd779800f" kindref="member">FLAC__metadata_object_vorbiscomment_delete_comment</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>comment_num);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga0ec0c7ddd3a8832ee7a75bf47956b1c7" kindref="member">FLAC__metadata_object_vorbiscomment_entry_from_name_value_pair</ref>(<ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>*entry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_value);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gaca557b35c7c1ac19e30794bcf529746b" kindref="member">FLAC__metadata_object_vorbiscomment_entry_to_name_value_pair</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**field_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**field_value);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gac31ee3de9f9931628f120cb611bb0f20" kindref="member">FLAC__metadata_object_vorbiscomment_entry_matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata___vorbis_comment___entry" kindref="compound">FLAC__StreamMetadata_VorbisComment_Entry</ref><sp/>entry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_name,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>field_name_length);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__object_1gae094c1ce4f248d49e8c099661bd5288e" kindref="member">FLAC__metadata_object_vorbiscomment_find_entry_from</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_name);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__object_1ga6812052a110800bef2f4139017501507" kindref="member">FLAC__metadata_object_vorbiscomment_remove_entry_matching</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_name);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__object_1ga525525f5f21b1caee776cba3cfb6d72f" kindref="member">FLAC__metadata_object_vorbiscomment_remove_entries_matching</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_name);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref><sp/>*<ref refid="group__flac__metadata__object_1ga9bc27c6ed075c29d12027079e00d9997" kindref="member">FLAC__metadata_object_cuesheet_track_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref><sp/>*<ref refid="group__flac__metadata__object_1gaf085bed12af15034839307ca04286d4f" kindref="member">FLAC__metadata_object_cuesheet_track_clone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flac__metadata__object_1ga8fbf8912add405a4b1acd510b6e27c89" kindref="member">FLAC__metadata_object_cuesheet_track_delete</ref>(<ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga57dfba89ba704574bde4e3fcd925d473" kindref="member">FLAC__metadata_object_cuesheet_track_resize_indices</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>new_num_indices);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga2f8c5d80c409eff5ebd53ccd0c6f0984" kindref="member">FLAC__metadata_object_cuesheet_track_insert_index</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___index" kindref="compound">FLAC__StreamMetadata_CueSheet_Index</ref><sp/>index);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gaa1401ea99e4dc61d3eb034aed7d99602" kindref="member">FLAC__metadata_object_cuesheet_track_insert_blank_index</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index_num);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga9cba3429dcc863714ceb1de6952c4737" kindref="member">FLAC__metadata_object_cuesheet_track_delete_index</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index_num);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1gafb0e09fdcfb08c466ceb1f6bca961177" kindref="member">FLAC__metadata_object_cuesheet_resize_tracks</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>new_num_tracks);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga682176f845b99956b3974bcc1bb63a20" kindref="member">FLAC__metadata_object_cuesheet_set_track</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref><sp/>*track,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga5dbdffac2cd7e327f711103c15e015ac" kindref="member">FLAC__metadata_object_cuesheet_insert_track</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num,<sp/><ref refid="struct_f_l_a_c_____stream_metadata___cue_sheet___track" kindref="compound">FLAC__StreamMetadata_CueSheet_Track</ref><sp/>*track,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga87855591d933cd6371010a675f0bc629" kindref="member">FLAC__metadata_object_cuesheet_insert_blank_track</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga3232bae96f19722bee19afd37fdc214d" kindref="member">FLAC__metadata_object_cuesheet_delete_track</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>track_num);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga1160f85e437c1a763ec0a8f372cb1390" kindref="member">FLAC__metadata_object_cuesheet_is_legal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>check_cd_da_subset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**violation);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/><ref refid="group__flac__metadata__object_1ga897138ca0a985d8741f73d6657f38845" kindref="member">FLAC__metadata_object_cuesheet_calculate_cddb_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga5db3363648b6e7693e032f200f241e85" kindref="member">FLAC__metadata_object_picture_set_mime_type</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga5582649e395e70a4b3df510a39d70cc5" kindref="member">FLAC__metadata_object_picture_set_description</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*description,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga07e5950094528e2954c06d7991d543a8" kindref="member">FLAC__metadata_object_picture_set_data</ref>(<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>,<sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>copy);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="group__flac__metadata__object_1ga2e389272f4df904e1652e79c89ca55c8" kindref="member">FLAC__metadata_object_picture_is_legal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**violation);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>\}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h"/>
  </compounddef>
</doxygen>
