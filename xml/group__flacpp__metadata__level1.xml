<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__flacpp__metadata__level1" kind="group">
    <compoundname>flacpp_metadata_level1</compoundname>
    <title>FLAC++/metadata.h: metadata level 1 interface</title>
    <innerclass refid="class_f_l_a_c_1_1_metadata_1_1_simple_iterator" prot="public">FLAC::Metadata::SimpleIterator</innerclass>
    <briefdescription>
<para>Level 1 metadata iterator. </para>    </briefdescription>
    <detaileddescription>
<para>The flow through the iterator in the C++ layer is similar to the C layer:<itemizedlist>
<listitem><para>Create a <ref refid="class_f_l_a_c_1_1_metadata_1_1_simple_iterator" kindref="compound">SimpleIterator</ref> instance</para></listitem><listitem><para>Check <ref refid="class_f_l_a_c_1_1_metadata_1_1_simple_iterator_1acd4f5f18a3b5f7c42677e6a234543366" kindref="member">SimpleIterator::is_valid()</ref></para></listitem><listitem><para>Call <ref refid="class_f_l_a_c_1_1_metadata_1_1_simple_iterator_1a67dc75f18d282f41696467f1fbf5c3e8" kindref="member">SimpleIterator::init()</ref> and check the return</para></listitem><listitem><para>Traverse and/or edit. Edits are written to file immediately.</para></listitem><listitem><para>Destroy the <ref refid="class_f_l_a_c_1_1_metadata_1_1_simple_iterator" kindref="compound">SimpleIterator</ref> instance</para></listitem></itemizedlist>
</para><para>The ownership of pointers in the C++ layer follows that in the C layer, i.e.<itemizedlist>
<listitem><para>The objects returned by get_block() are yours to modify, but changes are not reflected in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file until you call set_block(). The objects are also yours to delete; they are not automatically deleted when passed to set_block() or insert_block_after().</para></listitem></itemizedlist>
</para><para>See the <ref refid="group__flac__metadata__level1" kindref="compound">C layer equivalent </ref> for more. </para>    </detaileddescription>
  </compounddef>
</doxygen>
