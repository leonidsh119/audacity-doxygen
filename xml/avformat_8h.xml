<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="avformat_8h" kind="file" language="C++">
    <compoundname>avformat.h</compoundname>
    <includes local="no">time.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="avcodec_8h" local="yes">libavcodec/avcodec.h</includes>
    <includes refid="dict_8h" local="yes">libavutil/dict.h</includes>
    <includes refid="ffmpeg_2libavutil_2log_8h" local="yes">libavutil/log.h</includes>
    <includes refid="avio_8h" local="yes">avio.h</includes>
    <includes refid="ffmpeg_2libavformat_2version_8h" local="yes">libavformat/version.h</includes>
    <incdepgraph>
      <node id="3161">
        <label>mathematics.h</label>
        <link refid="mathematics_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3151" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
        <childnode refid="3162" relation="include">
        </childnode>
        <childnode refid="3163" relation="include">
        </childnode>
      </node>
      <node id="3162">
        <label>rational.h</label>
        <link refid="rational_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3150" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
      </node>
      <node id="3165">
        <label>stdarg.h</label>
      </node>
      <node id="3154">
        <label>attributes.h</label>
        <link refid="attributes_8h"/>
      </node>
      <node id="3147">
        <label>avutil.h</label>
        <link refid="avutil_8h"/>
        <childnode refid="3148" relation="include">
        </childnode>
        <childnode refid="3159" relation="include">
        </childnode>
        <childnode refid="3155" relation="include">
        </childnode>
        <childnode refid="3156" relation="include">
        </childnode>
        <childnode refid="3161" relation="include">
        </childnode>
        <childnode refid="3162" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
      </node>
      <node id="3146">
        <label>stdint.h</label>
      </node>
      <node id="3157">
        <label>libavutil/avconfig.h</label>
        <link refid="avconfig_8h"/>
      </node>
      <node id="3152">
        <label>stdlib.h</label>
      </node>
      <node id="3171">
        <label>libavutil/dict.h</label>
        <link refid="dict_8h"/>
      </node>
      <node id="3144">
        <label>errno.h</label>
      </node>
      <node id="3155">
        <label>version.h</label>
        <link refid="ffmpeg_2libavutil_2version_8h"/>
        <childnode refid="3156" relation="include">
        </childnode>
      </node>
      <node id="3172">
        <label>libavutil/frame.h</label>
        <link refid="ffmpeg_2libavutil_2frame_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3147" relation="include">
        </childnode>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3171" relation="include">
        </childnode>
        <childnode refid="3162" relation="include">
        </childnode>
        <childnode refid="3145" relation="include">
        </childnode>
        <childnode refid="3155" relation="include">
        </childnode>
      </node>
      <node id="3160">
        <label>stddef.h</label>
      </node>
      <node id="3150">
        <label>limits.h</label>
      </node>
      <node id="3174">
        <label>old_codec_ids.h</label>
        <link refid="old__codec__ids_8h"/>
        <childnode refid="3148" relation="include">
        </childnode>
      </node>
      <node id="3159">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="3144" relation="include">
        </childnode>
        <childnode refid="3160" relation="include">
        </childnode>
      </node>
      <node id="3164">
        <label>log.h</label>
        <link refid="ffmpeg_2libavutil_2log_8h"/>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3147" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
      </node>
      <node id="3153">
        <label>string.h</label>
      </node>
      <node id="3158">
        <label>mem.h</label>
        <link refid="ffmpeg_2libavutil_2mem_8h"/>
        <childnode refid="3150" relation="include">
        </childnode>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
        <childnode refid="3159" relation="include">
        </childnode>
        <childnode refid="3147" relation="include">
        </childnode>
      </node>
      <node id="3169">
        <label>libavutil/cpu.h</label>
        <link refid="ffmpeg_2libavutil_2cpu_8h"/>
        <childnode refid="3154" relation="include">
        </childnode>
      </node>
      <node id="3170">
        <label>libavutil/channel_layout.h</label>
        <link refid="channel__layout_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
      </node>
      <node id="3173">
        <label>version.h</label>
        <link refid="ffmpeg_2libavcodec_2version_8h"/>
        <childnode refid="3155" relation="include">
        </childnode>
      </node>
      <node id="3163">
        <label>intfloat.h</label>
        <link refid="intfloat_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
      </node>
      <node id="3167">
        <label>old_pix_fmts.h</label>
        <link refid="old__pix__fmts_8h"/>
      </node>
      <node id="3176">
        <label>libavformat/version.h</label>
        <link refid="ffmpeg_2libavformat_2version_8h"/>
        <childnode refid="3155" relation="include">
        </childnode>
      </node>
      <node id="3175">
        <label>avio.h</label>
        <link refid="avio_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3148" relation="include">
        </childnode>
        <childnode refid="3171" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
        <childnode refid="3176" relation="include">
        </childnode>
      </node>
      <node id="3168">
        <label>libavutil/buffer.h</label>
        <link refid="ffmpeg_2libavutil_2buffer_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
      </node>
      <node id="3141">
        <label>time.h</label>
      </node>
      <node id="3151">
        <label>math.h</label>
      </node>
      <node id="3145">
        <label>libavutil/samplefmt.h</label>
        <link refid="samplefmt_8h"/>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3147" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
      </node>
      <node id="3156">
        <label>macros.h</label>
        <link refid="ffmpeg_2libavutil_2macros_8h"/>
      </node>
      <node id="3140">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h</label>
        <link refid="avformat.h"/>
        <childnode refid="3141" relation="include">
        </childnode>
        <childnode refid="3142" relation="include">
        </childnode>
        <childnode refid="3143" relation="include">
        </childnode>
        <childnode refid="3171" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
        <childnode refid="3175" relation="include">
        </childnode>
        <childnode refid="3176" relation="include">
        </childnode>
      </node>
      <node id="3148">
        <label>common.h</label>
        <link refid="ffmpeg_2libavutil_2common_8h"/>
        <childnode refid="3144" relation="include">
        </childnode>
        <childnode refid="3149" relation="include">
        </childnode>
        <childnode refid="3150" relation="include">
        </childnode>
        <childnode refid="3151" relation="include">
        </childnode>
        <childnode refid="3146" relation="include">
        </childnode>
        <childnode refid="3142" relation="include">
        </childnode>
        <childnode refid="3152" relation="include">
        </childnode>
        <childnode refid="3153" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
        <childnode refid="3155" relation="include">
        </childnode>
        <childnode refid="3157" relation="include">
        </childnode>
        <childnode refid="3148" relation="include">
        </childnode>
        <childnode refid="3158" relation="include">
        </childnode>
      </node>
      <node id="3142">
        <label>stdio.h</label>
      </node>
      <node id="3166">
        <label>pixfmt.h</label>
        <link refid="pixfmt_8h"/>
        <childnode refid="3157" relation="include">
        </childnode>
        <childnode refid="3155" relation="include">
        </childnode>
        <childnode refid="3167" relation="include">
        </childnode>
      </node>
      <node id="3149">
        <label>inttypes.h</label>
      </node>
      <node id="3143">
        <label>libavcodec/avcodec.h</label>
        <link refid="avcodec_8h"/>
        <childnode refid="3144" relation="include">
        </childnode>
        <childnode refid="3145" relation="include">
        </childnode>
        <childnode refid="3154" relation="include">
        </childnode>
        <childnode refid="3147" relation="include">
        </childnode>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3169" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3171" relation="include">
        </childnode>
        <childnode refid="3172" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
        <childnode refid="3162" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3158" relation="include">
        </childnode>
        <childnode refid="3174" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_a_v_frac" prot="public">AVFrac</innerclass>
    <innerclass refid="struct_a_v_probe_data" prot="public">AVProbeData</innerclass>
    <innerclass refid="struct_a_v_output_format" prot="public">AVOutputFormat</innerclass>
    <innerclass refid="struct_a_v_input_format" prot="public">AVInputFormat</innerclass>
    <innerclass refid="struct_a_v_index_entry" prot="public">AVIndexEntry</innerclass>
    <innerclass refid="struct_a_v_stream" prot="public">AVStream</innerclass>
    <innerclass refid="struct_a_v_program" prot="public">AVProgram</innerclass>
    <innerclass refid="struct_a_v_chapter" prot="public">AVChapter</innerclass>
    <innerclass refid="struct_a_v_format_context" prot="public">AVFormatContext</innerclass>
    <innerclass refid="struct_a_v_packet_list" prot="public">AVPacketList</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="avformat_8h_1adeacd8263046043734062588db39bce9" prot="public" static="no">
        <name>AVPROBE_SCORE_RETRY</name>
        <initializer>(<ref refid="avformat_8h_1a24925a4d1138c3f17a7a27dd45c08920" kindref="member">AVPROBE_SCORE_MAX</ref>/4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="395" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1b33e0f3734db4299d5aff4b78f98c43" prot="public" static="no">
        <name>AVPROBE_SCORE_STREAM_RETRY</name>
        <initializer>(<ref refid="avformat_8h_1a24925a4d1138c3f17a7a27dd45c08920" kindref="member">AVPROBE_SCORE_MAX</ref>/4-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="396" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a8fef570c1a6f9c445acaf97fa2da3b7e" prot="public" static="no">
        <name>AVPROBE_SCORE_EXTENSION</name>
        <initializer>50</initializer>
        <briefdescription>
<para>score for file extension </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="398" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a24925a4d1138c3f17a7a27dd45c08920" prot="public" static="no">
        <name>AVPROBE_SCORE_MAX</name>
        <initializer>100</initializer>
        <briefdescription>
<para>maximum score </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="399" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a2cba242c83a06fff914d1c8ef4cd42ac" prot="public" static="no">
        <name>AVPROBE_PADDING_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>extra allocated bytes at the end of the probe buffer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="401" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a752cce390d480521919aa5d8be24ac0b" prot="public" static="no">
        <name>AVFMT_NOFILE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>Demuxer will use avio_open, no opened file should be provided by the caller. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="404" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1af7899d15bd762258202bdec2035d8fc8" prot="public" static="no">
        <name>AVFMT_NEEDNUMBER</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Needs &apos;d&apos; in filename. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="405" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a90e4cbd1011b989cd7db628d2eca2675" prot="public" static="no">
        <name>AVFMT_SHOW_IDS</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show format stream IDs numbers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="406" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a71f4268e7674596c14c18b4bb3e60a3e" prot="public" static="no">
        <name>AVFMT_RAWPICTURE</name>
        <initializer>0x0020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> wants <ref refid="struct_a_v_picture" kindref="compound">AVPicture</ref> structure for raw picture data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="408" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ab203c7b734e9c31b7c37d34f6e2c6aef" prot="public" static="no">
        <name>AVFMT_GLOBALHEADER</name>
        <initializer>0x0040</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> wants global header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="409" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ae4418d32b17890be22da9c5f95087168" prot="public" static="no">
        <name>AVFMT_NOTIMESTAMPS</name>
        <initializer>0x0080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not need / have any timestamps. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="410" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ad2bd0ecdd51061b300e2ab490907bb09" prot="public" static="no">
        <name>AVFMT_GENERIC_INDEX</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use generic index building code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="411" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a4d232408e799fa2b2f2705a3e8e0b4b8" prot="public" static="no">
        <name>AVFMT_TS_DISCONT</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> allows timestamp discontinuities. Note, muxers always require valid (monotone) timestamps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="412" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a4d9f21e76a3bf919c74ea40957ef21a7" prot="public" static="no">
        <name>AVFMT_VARIABLE_FPS</name>
        <initializer>0x0400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> allows variable fps. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="413" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a21abb57f90931c92c853e696cc1c358c" prot="public" static="no">
        <name>AVFMT_NODIMENSIONS</name>
        <initializer>0x0800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not need width/height </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="414" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1500ed92d07addf13d1e9dfd0fff6672" prot="public" static="no">
        <name>AVFMT_NOSTREAMS</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not require any streams </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="415" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a8f47c7c3b5763fc7199f41741d759a70" prot="public" static="no">
        <name>AVFMT_NOBINSEARCH</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not allow to fall back on binary search via read_timestamp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="416" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a860dc077e9c782de0d49a2d4d968b64a" prot="public" static="no">
        <name>AVFMT_NOGENSEARCH</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not allow to fall back on generic search </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="417" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a6286e2977286a22b622cb51cf4106541" prot="public" static="no">
        <name>AVFMT_NO_BYTE_SEEK</name>
        <initializer>0x8000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not allow seeking by bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="418" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a3b9a2012b993edb9e2ba3db6d55db1ae" prot="public" static="no">
        <name>AVFMT_ALLOW_FLUSH</name>
        <initializer>0x10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> allows flushing. If not set, the muxer will not receive a NULL packet in the write_packet function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="419" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a918dc7abf0d4f7abd36a2ea2a594feaf" prot="public" static="no">
        <name>AVFMT_TS_NONSTRICT</name>
        <initializer>0x8020000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> does not require strictly increasing timestamps, but they must still be monotonic </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="421" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a886476ebe41f52a2232ee10f97ac11d0" prot="public" static="no">
        <name>AVFMT_TS_NEGATIVE</name>
        <initializer>0x40000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> allows muxing negative timestamps. If not set the timestamp will be shifted in av_write_frame and av_interleaved_write_frame so they start from 0. The user or muxer can override this through <ref refid="struct_a_v_format_context_1a032c7d859883eddc9d87a9e3b2cc3853" kindref="member">AVFormatContext.avoid_negative_ts</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="435" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ab87b74d5eff79c28e7756f893d57c4d7" prot="public" static="no">
        <name>AVFMT_SEEK_TO_PTS</name>
        <initializer>0x4000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seeking is based on PTS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="437" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a23159bdc0b27ccf964072e30d6cc4559" prot="public" static="no">
        <name>AVINDEX_KEYFRAME</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="692" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1af09f200b4cd9bf0baa05671436eef2fb" prot="public" static="no">
        <name>AV_DISPOSITION_DEFAULT</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="698" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a5bf41aa870351bd4e912725bcaf87031" prot="public" static="no">
        <name>AV_DISPOSITION_DUB</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="699" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1aed1d78ae5604930f7465e5f48220941e" prot="public" static="no">
        <name>AV_DISPOSITION_ORIGINAL</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="700" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a3fd17d972522f10a6d73937482225482" prot="public" static="no">
        <name>AV_DISPOSITION_COMMENT</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="701" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a07792fd9060493192a4d4f25714a56d6" prot="public" static="no">
        <name>AV_DISPOSITION_LYRICS</name>
        <initializer>0x0010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="702" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a4e6b75c4d996642d88b98241f0ad2979" prot="public" static="no">
        <name>AV_DISPOSITION_KARAOKE</name>
        <initializer>0x0020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="703" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1aa72fcb393482cb6bb302d4995990bf3b" prot="public" static="no">
        <name>AV_DISPOSITION_FORCED</name>
        <initializer>0x0040</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_track" kindref="compound">Track</ref> should be used during playback by default. Useful for subtitle track that should be displayed even when user did not explicitly ask for subtitles. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="710" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a39ba22fdf89ec823243ba92bfd35c189" prot="public" static="no">
        <name>AV_DISPOSITION_HEARING_IMPAIRED</name>
        <initializer>0x0080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stream for hearing impaired audiences </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="711" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1aa8e9704bcc842236ad048062dcf45d45" prot="public" static="no">
        <name>AV_DISPOSITION_VISUAL_IMPAIRED</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stream for visual impaired audiences </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="712" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a9b09132b5af7f7f6fe54d61782373bc7" prot="public" static="no">
        <name>AV_DISPOSITION_CLEAN_EFFECTS</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stream without voice </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="713" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ab54a3e54e88a8f7d7760e60b49944e44" prot="public" static="no">
        <name>AV_DISPOSITION_ATTACHED_PIC</name>
        <initializer>0x0400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stream is stored in the file as an attached picture/&quot;cover art&quot; (e.g. APIC frame in ID3v2). The single packet associated with it will be returned among the first few packets read from the file unless seeking takes place. It can also be accessed at any time in <ref refid="struct_a_v_stream_1a8c689ee00c0dfe4313891f8a2ea21f4d" kindref="member">AVStream.attached_pic</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="720" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a51efe44185491ba0a214fe2bc92ac2a1" prot="public" static="no">
        <name>AV_DISPOSITION_CAPTIONS</name>
        <initializer>0x10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To specify text track kind (different from subtitles default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="725" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ae578ee8b851860926955855d1234f93f" prot="public" static="no">
        <name>AV_DISPOSITION_DESCRIPTIONS</name>
        <initializer>0x20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="726" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a5ff7b03b405295a7a9743cfa67369759" prot="public" static="no">
        <name>AV_DISPOSITION_METADATA</name>
        <initializer>0x40000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="727" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1c159fe90edbc7a6f0c5e9f3537bff1b" prot="public" static="no">
        <name>AV_PTS_WRAP_IGNORE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>ignore the wrap </para>        </briefdescription>
        <detaileddescription>
<para>Options for behavior on timestamp wrap detection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="732" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1adafc4c061749f2f3a6ffac6796b844f0" prot="public" static="no">
        <name>AV_PTS_WRAP_ADD_OFFSET</name>
        <initializer>1</initializer>
        <briefdescription>
<para>add the format specific offset on wrap detection </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="733" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a19520b122a38843e0ce95335ad92bb61" prot="public" static="no">
        <name>AV_PTS_WRAP_SUB_OFFSET</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>subtract the format specific offset on wrap detection </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="734" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a79d6ee9e699fd534e85543752f3cb775" prot="public" static="no">
        <name>MAX_STD_TIMEBASES</name>
        <initializer>(60*12+6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stream information used internally by av_find_stream_info() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="838" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1614829d41ffec53f2348ad30663e1b5" prot="public" static="no">
        <name>MAX_PROBE_PACKETS</name>
        <initializer>2500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of packets to buffer for codec probing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="890" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1a5362deb573c857ad801ec212ef3583" prot="public" static="no">
        <name>MAX_REORDER_DELAY</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="907" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1f70b27f61ebf7a52fd53515af132f60" prot="public" static="no">
        <name>AV_PROGRAM_RUNNING</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1009" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a42e3c3d72e561fdc501613962fccc4aa" prot="public" static="no">
        <name>AVFMTCTX_NOHEADER</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>signal that no header is present (streams are added dynamically) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1044" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a69e2c8bc119c0245ff6092f9db4d12ae" prot="public" static="no">
        <name>AVFMT_FLAG_GENPTS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>Generate missing pts even if it requires parsing future frames. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1185" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a2d5c3fab0686ccb9f517dec49048d421" prot="public" static="no">
        <name>AVFMT_FLAG_IGNIDX</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>Ignore index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1186" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a4fd189c4f2464afad342133be7bf6aeb" prot="public" static="no">
        <name>AVFMT_FLAG_NONBLOCK</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>Do not block when reading packets from input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1187" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a48978eb2565907e8794910a1178897e0" prot="public" static="no">
        <name>AVFMT_FLAG_IGNDTS</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>Ignore DTS on frames that contain both DTS &amp; PTS. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1188" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1acafe6c256110801c5bfb79da1d4ec0fa" prot="public" static="no">
        <name>AVFMT_FLAG_NOFILLIN</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>Do not infer any values from other values, just return what is stored in the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1189" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1af94b1dbe5f4e7c0ab04dc05ea18c1d81" prot="public" static="no">
        <name>AVFMT_FLAG_NOPARSE</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>Do not use AVParsers, you also must set AVFMT_FLAG_NOFILLIN as the fillin code works on frames and no parsing -&gt; no frames. Also seeking to frames can not work if parsing to find frame boundaries has been disabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1190" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1aee579ebc55f7067a964fbfd09c14e8c2" prot="public" static="no">
        <name>AVFMT_FLAG_NOBUFFER</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>Do not buffer frames when possible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1191" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ac5fdea71141dcc30346a57df75cf408e" prot="public" static="no">
        <name>AVFMT_FLAG_CUSTOM_IO</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>The caller has supplied a custom <ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref>, don&apos;t <ref refid="avio_8h_1ad71cada104a5e4365d35d45669ea03ca" kindref="member">avio_close()</ref> it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1192" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a936da4a8820e0d9206856620ee451a10" prot="public" static="no">
        <name>AVFMT_FLAG_DISCARD_CORRUPT</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>Discard frames marked corrupted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1193" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a1d9ca54477304fc143bc6594c4dec102" prot="public" static="no">
        <name>AVFMT_FLAG_FLUSH_PACKETS</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para>Flush the <ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> every packet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1194" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a3b150996e2b51660a01398a161c0cd1d" prot="public" static="no">
        <name>AVFMT_FLAG_MP4A_LATM</name>
        <initializer>0x8000</initializer>
        <briefdescription>
<para>Enable RTP MP4A-LATM payload. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1195" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a19d3097af30fbd65caa79464657ce4bd" prot="public" static="no">
        <name>AVFMT_FLAG_SORT_DTS</name>
        <initializer>0x10000</initializer>
        <briefdescription>
<para>try to interleave outputted packets by dts (using this flag can slow demuxing down) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1196" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a50b1ae2089b32bf048b79ff3bd7175f4" prot="public" static="no">
        <name>AVFMT_FLAG_PRIV_OPT</name>
        <initializer>0x20000</initializer>
        <briefdescription>
<para>Enable use of private options by delaying codec open (this could be made default once all code is converted) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1197" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ae71b7bb752351a8b326bf8c092b0e509" prot="public" static="no">
        <name>AVFMT_FLAG_KEEP_SIDE_DATA</name>
        <initializer>0x40000</initializer>
        <briefdescription>
<para>Don&apos;t merge side data but keep it separate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1198" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a3d60713d578ad1ef6505e05779c112cf" prot="public" static="no">
        <name>FF_FDEBUG_TS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1317" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a781dd9eb5ad7f95c4ad61f9ac24fce5a" prot="public" static="no">
        <name>RAW_PACKET_BUFFER_SIZE</name>
        <initializer>2500000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remaining size available for raw_packet_buffer, in bytes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1473" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ac736f8f4afc930ca1cda0b43638cc678" prot="public" static="no">
        <name>AVSEEK_FLAG_BACKWARD</name>
        <initializer>1</initializer>
        <briefdescription>
<para>seek backward </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2049" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="2058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a754de906e0da116c009846547741f869" prot="public" static="no">
        <name>AVSEEK_FLAG_BYTE</name>
        <initializer>2</initializer>
        <briefdescription>
<para>seeking based on position in bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2050" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="2059" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1a998c3af80d050fd3d4f6a209fd5a87bc" prot="public" static="no">
        <name>AVSEEK_FLAG_ANY</name>
        <initializer>4</initializer>
        <briefdescription>
<para>seek to any frame, even non-keyframes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2051" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="2060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avformat_8h_1ab83ca408a574b40c76f681b616096fc8" prot="public" static="no">
        <name>AVSEEK_FLAG_FRAME</name>
        <initializer>8</initializer>
        <briefdescription>
<para>seeking based on frame number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2052" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="2061" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91" prot="public" static="no">
        <name>AVStreamParseType</name>
        <enumvalue id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91ac715de62daa60e31ce01b9671bd35f9e" prot="public">
          <name>AVSTREAM_PARSE_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91ac21d15a27dac74ca0730b4dace71d883" prot="public">
          <name>AVSTREAM_PARSE_FULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>full parsing and repack </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a67bc09fcdeb0e05754f344fbc80856ca" prot="public">
          <name>AVSTREAM_PARSE_HEADERS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Only parse headers, do not repack. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a10f8e7a9d88b7b5e2010ffb496b6cf1a" prot="public">
          <name>AVSTREAM_PARSE_TIMESTAMPS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>full parsing and interpolation of timestamps for frames not starting on a packet boundary </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a41eb176dd7cfc095b5ea66816a75c56a" prot="public">
          <name>AVSTREAM_PARSE_FULL_ONCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>full parsing and repack of the first frame only, only implemented for H.264 currently </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a4a4190f226593e92724285f8bfef9c2e" prot="public">
          <name>AVSTREAM_PARSE_FULL_RAW</name>
          <initializer>=MKTAG(0,&apos;R&apos;,&apos;A&apos;,&apos;W&apos;)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>full parsing and repack with timestamp and position generation by parser for raw this assumes that each packet in the file contains no demuxer level headers and just codec level data, otherwise position generation would fail </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="681" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="681" bodyend="690"/>
      </memberdef>
      <memberdef kind="enum" id="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73b" prot="public" static="no">
        <name>AVDurationEstimationMethod</name>
        <enumvalue id="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73bac94465d3290399477775fe094ab8f75a" prot="public">
          <name>AVFMT_DURATION_FROM_PTS</name>
          <briefdescription>
<para>Duration accurately estimated from PTSes. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73bae92edb9576c3d6dd68f49a849a2ec6c0" prot="public">
          <name>AVFMT_DURATION_FROM_STREAM</name>
          <briefdescription>
<para>Duration estimated from a stream with a known duration. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73ba6185e1e7f8dfae85596779408ef496b2" prot="public">
          <name>AVFMT_DURATION_FROM_BITRATE</name>
          <briefdescription>
<para>Duration estimated from bitrate (less accurate) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The duration of a video can be estimated through various ways, and this enum can be used to know how the duration was estimated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1074" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1074" bodyend="1078"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="avformat_8h_1a4eb665eed89f385ab0bbbb2ce8bd8dcf" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_frac" kindref="compound">AVFrac</ref></type>
        <definition>typedef struct AVFrac  AVFrac</definition>
        <argsstring></argsstring>
        <name>AVFrac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The exact value of the fractional number is: &apos;val + num / den&apos;. num is assumed to be 0 &lt;= num &lt; den. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1afb45bd01415177fc992300e6ac2bd43c" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref></type>
        <definition>typedef struct AVProbeData  AVProbeData</definition>
        <argsstring></argsstring>
        <name>AVProbeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure contains the data a format has to probe a file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__lavf__encoding_1ga7328f2fe9ea40f836f0eea2d44f2db5e" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref></type>
        <definition>typedef struct AVOutputFormat  AVOutputFormat</definition>
        <argsstring></argsstring>
        <name>AVOutputFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__lavf__decoding_1ga41ac82c86aa114943b700dac564d2508" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref></type>
        <definition>typedef struct AVInputFormat  AVInputFormat</definition>
        <argsstring></argsstring>
        <name>AVInputFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="676" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1af1fd24b660d7d65113b919010656aa06" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_index_entry" kindref="compound">AVIndexEntry</ref></type>
        <definition>typedef struct AVIndexEntry  AVIndexEntry</definition>
        <argsstring></argsstring>
        <name>AVIndexEntry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="704" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1ad38b1f6206bec83d7b10f0c7021b4234" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_stream" kindref="compound">AVStream</ref></type>
        <definition>typedef struct AVStream  AVStream</definition>
        <argsstring></argsstring>
        <name>AVStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stream structure. New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVStream) must not be used outside libav*. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1012" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1a34b2f9ebe1e27ab10441a53dc1031e48" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_program" kindref="compound">AVProgram</ref></type>
        <definition>typedef struct AVProgram  AVProgram</definition>
        <argsstring></argsstring>
        <name>AVProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVProgram) must not be used outside libav*. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1049" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1adfe1258ac595e1f3816c500c00da4b58" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_chapter" kindref="compound">AVChapter</ref></type>
        <definition>typedef struct AVChapter  AVChapter</definition>
        <argsstring></argsstring>
        <name>AVChapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* av_format_control_message) (struct AVFormatContext *s, int type, void *data, size_t data_size)</definition>
        <argsstring>)(struct AVFormatContext *s, int type, void *data, size_t data_size)</argsstring>
        <name>av_format_control_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_callback" kindref="compound">Callback</ref> used by devices to communicate with application. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1066" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1a7bec8d592652431045d81a02fef74f28" prot="public" static="no">
        <type>struct <ref refid="avformat_8h_1a7bec8d592652431045d81a02fef74f28" kindref="member">AVFormatInternal</ref></type>
        <definition>typedef struct AVFormatInternal AVFormatInternal</definition>
        <argsstring></argsstring>
        <name>AVFormatInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1066" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1a48a7a1e3f50d90c1c868b4169cfa0561" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref></type>
        <definition>typedef struct AVFormatContext  AVFormatContext</definition>
        <argsstring></argsstring>
        <name>AVFormatContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_format" kindref="compound">Format</ref> I/O context. New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVFormatContext) must not be used outside libav*, use <ref refid="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" kindref="member">avformat_alloc_context()</ref> to create an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1559" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="avformat_8h_1a87a20e1d06255f832bdbfc8badc9648a" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref></type>
        <definition>typedef struct AVPacketList  AVPacketList</definition>
        <argsstring></argsstring>
        <name>AVPacketList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1585" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="avformat_8h_1a9d2e6f22150d98c36dcc2c6c49318019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_get_packet</definition>
        <argsstring>(AVIOContext *s, AVPacket *pkt, int size)</argsstring>
        <name>av_get_packet</name>
        <param>
          <type><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate and read the payload of a packet and initialize its fields with default values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>associated IO context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>packet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>desired payload size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;0 (read size) if OK, AVERROR_xxx otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a0e991213ccc3d642972b57a1decb797b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_append_packet</definition>
        <argsstring>(AVIOContext *s, AVPacket *pkt, int size)</argsstring>
        <name>av_append_packet</name>
        <param>
          <type><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data and append it to the current content of the <ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref>. If pkt-&gt;size is 0 this is identical to av_get_packet. Note that this uses av_grow_packet and thus involves a realloc which is inefficient. Thus this function should only be used when there is no reasonable way to know (an upper bound of) the final size.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>associated IO context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>packet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of data to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;0 (read size) if OK, AVERROR_xxx otherwise, previous data will not be lost even if an error occurs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a7de783c245b561f78c8e57448922c5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
        <definition>AVRational av_stream_get_r_frame_rate</definition>
        <argsstring>(const AVStream *s)</argsstring>
        <name>av_stream_get_r_frame_rate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1014" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1aa80eccaee483dd956fbfd95ae3be7bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_stream_set_r_frame_rate</definition>
        <argsstring>(AVStream *s, AVRational r)</argsstring>
        <name>av_stream_set_r_frame_rate</name>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1ad332941a01e30dd7d20a25f98dd69907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_format_get_probe_score</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_probe_score</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a02b77e5add312ccb0563396f4fb6dc79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
        <definition>AVCodec* av_format_get_video_codec</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_video_codec</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a4570da40de5e973587d8c75b2be0fe7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_format_set_video_codec</definition>
        <argsstring>(AVFormatContext *s, AVCodec *c)</argsstring>
        <name>av_format_set_video_codec</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a782fd30d7d2d72c1cfd9aca8efce885d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
        <definition>AVCodec* av_format_get_audio_codec</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_audio_codec</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a3c4fdc15d6ae69fdc046421711d594a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_format_set_audio_codec</definition>
        <argsstring>(AVFormatContext *s, AVCodec *c)</argsstring>
        <name>av_format_set_audio_codec</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a3b036bd91012956a06e802140d207767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
        <definition>AVCodec* av_format_get_subtitle_codec</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_subtitle_codec</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1af7d25817b7501a5a1abce5af7f796fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_format_set_subtitle_codec</definition>
        <argsstring>(AVFormatContext *s, AVCodec *c)</argsstring>
        <name>av_format_set_subtitle_codec</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1ae7e7da7c69b51e4339f4942ab76807d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_format_get_metadata_header_padding</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_metadata_header_padding</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1ae1757ab39373897605bc564366a5b2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_format_set_metadata_header_padding</definition>
        <argsstring>(AVFormatContext *s, int c)</argsstring>
        <name>av_format_set_metadata_header_padding</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a5fd65a8af1d5876c2280b822c5629f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_format_get_opaque</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_opaque</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a0ab75741a82f9f0f3340a4f460119702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_format_set_opaque</definition>
        <argsstring>(AVFormatContext *s, void *opaque)</argsstring>
        <name>av_format_set_opaque</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1ad81dc5aa7a94419da69fc98dba91056e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" kindref="member">av_format_control_message</ref></type>
        <definition>av_format_control_message av_format_get_control_message_cb</definition>
        <argsstring>(const AVFormatContext *s)</argsstring>
        <name>av_format_get_control_message_cb</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1abc5b1cdf24f51eecc24cf4b5a9c0d82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_format_set_control_message_cb</definition>
        <argsstring>(AVFormatContext *s, av_format_control_message callback)</argsstring>
        <name>av_format_set_control_message_cb</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" kindref="member">av_format_control_message</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1ac7070b68d7ca5fd577f9f835556ebeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73b" kindref="member">AVDurationEstimationMethod</ref></type>
        <definition>enum AVDurationEstimationMethod av_fmt_ctx_get_duration_estimation_method</definition>
        <argsstring>(const AVFormatContext *ctx)</argsstring>
        <name>av_fmt_ctx_get_duration_estimation_method</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the method used to set ctx-&gt;duration.</para><para><simplesect kind="return"><para>AVFMT_DURATION_FROM_PTS, AVFMT_DURATION_FROM_STREAM, or AVFMT_DURATION_FROM_BITRATE. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1gaf2d4e0fee66cef99dea2153933e6b907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned avformat_version</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_version</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the LIBAVFORMAT_VERSION_INT constant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga5f48b0398d77d8eeb45d6c649e4e3404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* avformat_configuration</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_configuration</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the libavformat build-time configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga160fef784175409f945c70e8931accc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* avformat_license</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_license</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the libavformat license. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga917265caec45ef5a0646356ed1a507e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_register_all</definition>
        <argsstring>(void)</argsstring>
        <name>av_register_all</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize libavformat and register all the muxers, demuxers and protocols. If you do not call this function, then you can select exactly which formats you want to support.</para><para><simplesect kind="see"><para><ref refid="group__lavf__core_1ga896f319308627b5b66fd41a4b1d53ae6" kindref="member">av_register_input_format()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavf__core_1gabf0629358bc40c7874932ef6f4dda6b8" kindref="member">av_register_output_format()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga896f319308627b5b66fd41a4b1d53ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_register_input_format</definition>
        <argsstring>(AVInputFormat *format)</argsstring>
        <name>av_register_input_format</name>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1gabf0629358bc40c7874932ef6f4dda6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_register_output_format</definition>
        <argsstring>(AVOutputFormat *format)</argsstring>
        <name>av_register_output_format</name>
        <param>
          <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga84542023693d61e8564c5d457979c932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_network_init</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_network_init</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do global initialization of network components. This is optional, but recommended, since it avoids the overhead of implicitly doing the setup for each session.</para><para>Calling this function will become mandatory if using network protocols at some major version bump. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga245f2875f80ce67ec3d1e0f54dacf2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_network_deinit</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_network_deinit</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Undo the initialization done by avformat_network_init. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga5a9e27c9e2b04abcf6ed2e0f9b68da4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_iformat_next</definition>
        <argsstring>(AVInputFormat *f)</argsstring>
        <name>av_iformat_next</name>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If f is NULL, returns the first registered input format, if f is non-NULL, returns the next registered input format after f or NULL if f is the last one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga9c169031f490901218b1e6bcd9993967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
        <definition>AVOutputFormat* av_oformat_next</definition>
        <argsstring>(AVOutputFormat *f)</argsstring>
        <name>av_oformat_next</name>
        <param>
          <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If f is NULL, returns the first registered output format, if f is non-NULL, returns the next registered output format after f or NULL if f is the last one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
        <definition>AVFormatContext* avformat_alloc_context</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_alloc_context</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>. <ref refid="group__lavf__core_1gac2990b13b68e831a408fce8e1d0d6445" kindref="member">avformat_free_context()</ref> can be used to free the context and everything allocated by the framework within it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1gac2990b13b68e831a408fce8e1d0d6445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void avformat_free_context</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>avformat_free_context</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> and all its streams. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>context to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1ga6030789ce395ef543306bbe933619749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> *</type>
        <definition>const AVClass* avformat_get_class</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_get_class</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> for <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.</para><para><simplesect kind="see"><para><ref refid="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" kindref="member">av_opt_find()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1gadcb0fd3e507d9b58fe78f61f8ad39827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
        <definition>AVStream* avformat_new_stream</definition>
        <argsstring>(AVFormatContext *s, const AVCodec *c)</argsstring>
        <name>avformat_new_stream</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new stream to a media file.</para><para>When demuxing, it is called by the demuxer in read_header(). If the flag AVFMTCTX_NOHEADER is set in s.ctx_flags, then it may also be called in read_packet().</para><para>When muxing, should be called by the user before <ref refid="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" kindref="member">avformat_write_header()</ref>.</para><para>User is required to call <ref refid="group__lavc__core_1gaf4daa92361efb3523ef5afeb0b54077f" kindref="member">avcodec_close()</ref> and <ref refid="group__lavf__core_1gac2990b13b68e831a408fce8e1d0d6445" kindref="member">avformat_free_context()</ref> to clean up the allocation by <ref refid="group__lavf__core_1gadcb0fd3e507d9b58fe78f61f8ad39827" kindref="member">avformat_new_stream()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the <ref refid="struct_a_v_codec_context" kindref="compound">AVCodecContext</ref> corresponding to the new stream will be initialized to use this codec. This is needed for e.g. codec-specific defaults to be set, so codec should be provided if it is known.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created stream or NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__core_1gab31f7c7c99dcadead38e8e83e0fdb828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref> *</type>
        <definition>AVProgram* av_new_program</definition>
        <argsstring>(AVFormatContext *s, int id)</argsstring>
        <name>av_new_program</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="avformat_8h_1a6ddf3d982feb45fa5081420ee911f5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_alloc_output_context2</definition>
        <argsstring>(AVFormatContext **ctx, AVOutputFormat *oformat, const char *format_name, const char *filename)</argsstring>
        <name>avformat_alloc_output_context2</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> **</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
          <declname>oformat</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>format_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> for an output format. <ref refid="group__lavf__core_1gac2990b13b68e831a408fce8e1d0d6445" kindref="member">avformat_free_context()</ref> can be used to free the context and everything allocated by the framework within it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>is set to the created format context, or to NULL in case of failure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oformat</parametername>
</parameternamelist>
<parameterdescription>
<para>format to use for allocating the context, if NULL format_name and filename are used instead </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of output format to use for allocating the context, if NULL filename is used instead </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the filename to use for allocating the context, may be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 in case of success, a negative AVERROR code in case of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga7d2f532c6653c2419b17956712fdf3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_find_input_format</definition>
        <argsstring>(const char *short_name)</argsstring>
        <name>av_find_input_format</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>short_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find <ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> based on the short name of the input format. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gad8a1268228fff3aeae0aeaa99a767a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_probe_input_format</definition>
        <argsstring>(AVProbeData *pd, int is_opened)</argsstring>
        <name>av_probe_input_format</name>
        <param>
          <type><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_opened</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the file format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pd</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be probed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_opened</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the file is already opened; determines whether demuxers with or without AVFMT_NOFILE are probed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gae8b938f6e7c3741dd27a6c171e72f33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_probe_input_format2</definition>
        <argsstring>(AVProbeData *pd, int is_opened, int *score_max)</argsstring>
        <name>av_probe_input_format2</name>
        <param>
          <type><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_opened</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>score_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the file format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pd</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be probed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_opened</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the file is already opened; determines whether demuxers with or without AVFMT_NOFILE are probed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>score_max</parametername>
</parameternamelist>
<parameterdescription>
<para>A probe score larger that this is required to accept a detection, the variable is set to the actual detection score afterwards. If the score is &lt;= AVPROBE_SCORE_MAX / 4 it is recommended to retry with a larger probe buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga7e4318244afd6c5fe55cec75d27258b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_probe_input_format3</definition>
        <argsstring>(AVProbeData *pd, int is_opened, int *score_ret)</argsstring>
        <name>av_probe_input_format3</name>
        <param>
          <type><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_opened</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>score_ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the file format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_opened</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the file is already opened; determines whether demuxers with or without AVFMT_NOFILE are probed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>score_ret</parametername>
</parameternamelist>
<parameterdescription>
<para>The score of the best detection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga69e44bd9ade0160a8cd6196aa37505ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_probe_input_buffer2</definition>
        <argsstring>(AVIOContext *pb, AVInputFormat **fmt, const char *filename, void *logctx, unsigned int offset, unsigned int max_probe_size)</argsstring>
        <name>av_probe_input_buffer2</name>
        <param>
          <type><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> *</type>
          <declname>pb</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> **</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>logctx</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>max_probe_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Probe a bytestream to determine the input format. Each time a probe returns with a score that is too low, the probe buffer size is increased and another attempt is made. When the maximum probe size is reached, the input format with the highest score is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pb</parametername>
</parameternamelist>
<parameterdescription>
<para>the bytestream to probe </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the input format is put here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the log context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset within the bytestream to probe from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_probe_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum probe buffer size (zero for default) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the score in case of success, a negative value corresponding to an the maximal score is AVPROBE_SCORE_MAX AVERROR code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga5ef11a57aa4ed1d55703b66d59afbd0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_probe_input_buffer</definition>
        <argsstring>(AVIOContext *pb, AVInputFormat **fmt, const char *filename, void *logctx, unsigned int offset, unsigned int max_probe_size)</argsstring>
        <name>av_probe_input_buffer</name>
        <param>
          <type><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> *</type>
          <declname>pb</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> **</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>logctx</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>max_probe_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="group__lavf__decoding_1ga69e44bd9ade0160a8cd6196aa37505ea" kindref="member">av_probe_input_buffer2()</ref> but returns 0 on success </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_open_input</definition>
        <argsstring>(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)</argsstring>
        <name>avformat_open_input</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> **</type>
          <declname>ps</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open an input stream and read the header. The codecs are not opened. The stream must be closed with <ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user-supplied <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> (allocated by avformat_alloc_context). May be a pointer to NULL, in which case an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> is allocated by this function and written into ps. Note that a user-supplied <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> will be freed on failure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the stream to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, this parameter forces a specific input format. Otherwise the format is autodetected. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A dictionary filled with <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> and demuxer-private options. On return this parameter will be destroyed and replaced with a dict containing options that were not found. May be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on failure.</para></simplesect>
<simplesect kind="note"><para>If you want to use custom IO, preallocate the format context and set its pb field. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga71091e146791c4d181635485447c2830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>attribute_deprecated int av_demuxer_open</definition>
        <argsstring>(AVFormatContext *ic)</argsstring>
        <name>av_demuxer_open</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gad42172e27cddafb81096939783b157bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_find_stream_info</definition>
        <argsstring>(AVFormatContext *ic, AVDictionary **options)</argsstring>
        <name>avformat_find_stream_info</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read packets of a media file to get stream information. This is useful for file formats with no headers such as MPEG. This function also computes the real framerate in case of MPEG-2 repeat frame mode. The logical file position is not changed by this function; examined packets may be buffered for later processing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, an ic.nb_streams long array of pointers to dictionaries, where i-th member contains options for codec corresponding to i-th stream. On return each dictionary will be filled with options that were not found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 if OK, AVERROR_xxx on error</para></simplesect>
<simplesect kind="note"><para>this function isn&apos;t guaranteed to open all the codecs, so options being non-empty at return is a perfectly normal behavior.</para></simplesect>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Let the user decide somehow what information is needed so that we do not waste time getting stuff the user does not need. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1866" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga9edb9ac206ed05dc5baa9d168f31de48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref> *</type>
        <definition>AVProgram* av_find_program_from_stream</definition>
        <argsstring>(AVFormatContext *ic, AVProgram *last, int s)</argsstring>
        <name>av_find_program_from_stream</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref> *</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the programs which belong to a given stream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last found program, the search will start after this program, or from the beginning if it is NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>stream index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next program which belongs to s, NULL if no program is found or the last program is not among the programs of ic. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1878" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gaa6fa468c922ff5c60a6021dcac09aff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_find_best_stream</definition>
        <argsstring>(AVFormatContext *ic, enum AVMediaType type, int wanted_stream_nb, int related_stream, AVCodec **decoder_ret, int flags)</argsstring>
        <name>av_find_best_stream</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__misc_1ga9a84bba4713dfced21a1a56163be1f48" kindref="member">AVMediaType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wanted_stream_nb</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>related_stream</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> **</type>
          <declname>decoder_ret</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the &quot;best&quot; stream in the file. The best stream is determined according to various heuristics as the most likely to be what the user expects. If the decoder parameter is non-NULL, av_find_best_stream will find the default decoder for the stream&apos;s codec; streams for which no decoder can be found are ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>stream type: video, audio, subtitles, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wanted_stream_nb</parametername>
</parameternamelist>
<parameterdescription>
<para>user-requested stream number, or -1 for automatic selection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>related_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>try to find a stream related (eg. in the same program) to this one, or -1 if none </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decoder_ret</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL, returns the decoder for the selected stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags; none are currently defined </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the non-negative stream number in case of success, AVERROR_STREAM_NOT_FOUND if no stream with the requested type could be found, AVERROR_DECODER_NOT_FOUND if streams were found but no decoder </para></simplesect>
<simplesect kind="note"><para>If av_find_best_stream returns successfully and decoder_ret is not NULL, then *decoder_ret is guaranteed to be set to a valid <ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_read_frame</definition>
        <argsstring>(AVFormatContext *s, AVPacket *pkt)</argsstring>
        <name>av_read_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the next frame of a stream. This function returns what is stored in the file, and does not validate that what is there are valid frames for the decoder. It will split what is stored in the file into frames and return one for each call. It will not omit invalid data between valid frames so as to give the decoder the maximum information possible for decoding.</para><para>If pkt-&gt;buf is NULL, then the packet is valid until the next <ref refid="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" kindref="member">av_read_frame()</ref> or until <ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input()</ref>. Otherwise the packet is valid indefinitely. In both cases the packet must be freed with av_free_packet when it is no longer needed. For video, the packet contains exactly one frame. For audio, it contains an integer number of frames if each frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames have a variable size (e.g. MPEG audio), then it contains one frame.</para><para>pkt-&gt;pts, pkt-&gt;dts and pkt-&gt;duration are always set to correct values in <ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">AVStream.time_base</ref> units (and guessed if the format cannot provide them). pkt-&gt;pts can be AV_NOPTS_VALUE if the video format has B-frames, so it is better to rely on pkt-&gt;dts if you do not decompress the payload.</para><para><simplesect kind="return"><para>0 if OK, &lt; 0 on error or end of file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1953" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gaa23f7619d8d4ea0857065d9979c75ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_seek_frame</definition>
        <argsstring>(AVFormatContext *s, int stream_index, int64_t timestamp, int flags)</argsstring>
        <name>av_seek_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek to the keyframe at timestamp. &apos;timestamp&apos; in &apos;stream_index&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_index</parametername>
</parameternamelist>
<parameterdescription>
<para>If stream_index is (-1), a default stream is selected, and timestamp is automatically converted from AV_TIME_BASE units to the stream specific time_base. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp in <ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">AVStream.time_base</ref> units or, if no stream is specified, in AV_TIME_BASE units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags which select direction and seeking mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga3b40fc8d2fda6992ae6ea2567d71ba30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_seek_file</definition>
        <argsstring>(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)</argsstring>
        <name>avformat_seek_file</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>min_ts</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>max_ts</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek to timestamp ts. Seeking will be done so that the point from which all active streams can be presented successfully will be closest to ts and within min/max_ts. Active streams are all streams that have <ref refid="struct_a_v_stream_1a492fcecc45dbbd8da51edd0124e9dd30" kindref="member">AVStream.discard</ref> &lt; AVDISCARD_ALL.</para><para>If flags contain AVSEEK_FLAG_BYTE, then all timestamps are in bytes and are the file position (this may not be supported by all demuxers). If flags contain AVSEEK_FLAG_FRAME, then all timestamps are in frames in the stream with stream_index (this may not be supported by all demuxers). Otherwise all timestamps are in units of the stream selected by stream_index or if stream_index is -1, in AV_TIME_BASE units. If flags contain AVSEEK_FLAG_ANY, then non-keyframes are treated as keyframes (this may not be supported by all demuxers). If flags contain AVSEEK_FLAG_BACKWARD, it is ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the stream which is used as time base reference </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>smallest acceptable timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>target timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>largest acceptable timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 on success, error code otherwise</para></simplesect>
<simplesect kind="note"><para>This is part of the new seek API which is still under construction. Thus do not use this yet. It may change at any time, do not expect ABI compatibility yet! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1999" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga7494bb63a59e79e9fe88eb1682d4d7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_read_play</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_read_play</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start playing a network-based stream (e.g. RTSP stream) at the current position. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2005" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga27db687592d99f25ccf81a3b3ee8da9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_read_pause</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_read_pause</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pause a network-based stream (e.g. RTSP stream).</para><para>Use <ref refid="group__lavf__decoding_1ga7494bb63a59e79e9fe88eb1682d4d7b3" kindref="member">av_read_play()</ref> to resume it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void avformat_close_input</definition>
        <argsstring>(AVFormatContext **s)</argsstring>
        <name>avformat_close_input</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> **</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close an opened input <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>. Free it and all its contents and set *s to NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_write_header</definition>
        <argsstring>(AVFormatContext *s, AVDictionary **options)</argsstring>
        <name>avformat_write_header</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate the stream private data and write the stream header to an output media file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Media file handle, must be allocated with <ref refid="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" kindref="member">avformat_alloc_context()</ref>. Its oformat field must be set to the desired output format; Its pb field must be set to an already opened <ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>An AVDictionary filled with <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> and muxer-private options. On return this parameter will be destroyed and replaced with a dict containing options that were not found. May be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative AVERROR on failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" kindref="member">av_opt_find</ref>, <ref refid="group__lavu__dict_1ga8d9c2de72b310cef8e6a28c9cd3acbbe" kindref="member">av_dict_set</ref>, <ref refid="avio_8h_1a371a670112abc5f3e15bc570da076301" kindref="member">avio_open</ref>, <ref refid="group__lavf__core_1ga9c169031f490901218b1e6bcd9993967" kindref="member">av_oformat_next</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_frame</definition>
        <argsstring>(AVFormatContext *s, AVPacket *pkt)</argsstring>
        <name>av_write_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a packet to an output media file.</para><para>This function passes the packet directly to the muxer, without any buffering or reordering. The caller is responsible for correctly interleaving the packets if the format requires it. Callers that want libavformat to handle the interleaving should call <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> instead of this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet containing the data to be written. Note that unlike <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref>, this function does not take ownership of the packet passed to it (though some muxers may make an internal reference to the input packet). <linebreak/>
 This parameter can be NULL (at any time, not just at the end), in order to immediately flush data buffered within the muxer, for muxers that buffer up data internally before writing it to the output. <linebreak/>
 Packet&apos;s <ref refid="struct_a_v_packet_1a0d1cb9b5a32b00fb6edc81ea3aae2a49" kindref="member">stream_index</ref> field must be set to the index of the corresponding stream in <ref refid="struct_a_v_format_context_1acfefb6b6cf21e87a0dcbd1a547ba2348" kindref="member">s-&gt;streams</ref>. It is very strongly recommended that timing information (<ref refid="struct_a_v_packet_1a73bde0a37f3b1efc839f11295bfbf42a" kindref="member">pts</ref>, <ref refid="struct_a_v_packet_1a85dbbd306b44b02390cd91c45e6a0f76" kindref="member">dts</ref>, <ref refid="struct_a_v_packet_1af151ba1967c37038088883cd544eeacd" kindref="member">duration</ref>) is set to correct values. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 on error, = 0 if OK, 1 if flushed and there is no more data to flush</para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_interleaved_write_frame</definition>
        <argsstring>(AVFormatContext *s, AVPacket *pkt)</argsstring>
        <name>av_interleaved_write_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a packet to an output media file ensuring correct interleaving.</para><para>This function will buffer the packets internally as needed to make sure the packets in the output file are properly interleaved in the order of increasing dts. Callers doing their own interleaving should call <ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame()</ref> instead of this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet containing the data to be written. <linebreak/>
 If the packet is reference-counted, this function will take ownership of this reference and unreference it later when it sees fit. The caller must not access the data through this reference after this function returns. If the packet is not reference-counted, libavformat will make a copy. <linebreak/>
 This parameter can be NULL (at any time, not just at the end), to flush the interleaving queues. <linebreak/>
 Packet&apos;s <ref refid="struct_a_v_packet_1a0d1cb9b5a32b00fb6edc81ea3aae2a49" kindref="member">stream_index</ref> field must be set to the index of the corresponding stream in <ref refid="struct_a_v_format_context_1acfefb6b6cf21e87a0dcbd1a547ba2348" kindref="member">s-&gt;streams</ref>. It is very strongly recommended that timing information (<ref refid="struct_a_v_packet_1a73bde0a37f3b1efc839f11295bfbf42a" kindref="member">pts</ref>, <ref refid="struct_a_v_packet_1a85dbbd306b44b02390cd91c45e6a0f76" kindref="member">dts</ref>, <ref refid="struct_a_v_packet_1af151ba1967c37038088883cd544eeacd" kindref="member">duration</ref>) is set to correct values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on error. Libavformat will always take care of freeing the packet, even if this function fails.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame()</ref>, <ref refid="struct_a_v_format_context_1a00edb6b7a31f8dabfa668334ca1f92d7" kindref="member">AVFormatContext.max_interleave_delta</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gaab766dccdff1bf323a2fc604e723b441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_uncoded_frame</definition>
        <argsstring>(AVFormatContext *s, int stream_index, AVFrame *frame)</argsstring>
        <name>av_write_uncoded_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a uncoded frame to an output media file.</para><para>The frame must be correctly interleaved according to the container specification; if not, then <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> must be used.</para><para>See <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gafe9916c601bba6827d6f9271a61260e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_interleaved_write_uncoded_frame</definition>
        <argsstring>(AVFormatContext *s, int stream_index, AVFrame *frame)</argsstring>
        <name>av_interleaved_write_uncoded_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a uncoded frame to an output media file.</para><para>If the muxer supports it, this function allows to write an <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> structure directly, without encoding it into a packet. It is mostly useful for devices and similar special muxers that use raw video or PCM data and will not serialize it into a byte stream.</para><para>To test whether it is possible to use it with a given muxer and stream, use <ref refid="group__lavf__encoding_1ga5f6bebdc8c234a5ad9740de89acb15e6" kindref="member">av_write_uncoded_frame_query()</ref>.</para><para>The caller gives up ownership of the frame and must not access it afterwards.</para><para><simplesect kind="return"><para>&gt;=0 for success, a negative code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga5f6bebdc8c234a5ad9740de89acb15e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_uncoded_frame_query</definition>
        <argsstring>(AVFormatContext *s, int stream_index)</argsstring>
        <name>av_write_uncoded_frame_query</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_test" kindref="compound">Test</ref> whether a muxer supports uncoded frame.</para><para><simplesect kind="return"><para>&gt;=0 if an uncoded frame can be written to that muxer and stream, &lt;0 if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga7f14007e7dc8f481f054b21614dfec13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_trailer</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_write_trailer</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the stream trailer to an output media file and free the file private data.</para><para>May only be called after a successful call to avformat_write_header.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, AVERROR_xxx on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga8795680bd7489e96eeb5aef5e615cacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
        <definition>AVOutputFormat* av_guess_format</definition>
        <argsstring>(const char *short_name, const char *filename, const char *mime_type)</argsstring>
        <name>av_guess_format</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>short_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>mime_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the output format in the list of registered output formats which best matches the provided parameters, or return NULL if there is no match.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>short_name</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL checks if short_name matches with the names of the registered formats </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL checks if filename terminates with the extensions of the registered formats </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL checks if mime_type matches with the MIME type of the registered formats </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gae8a1efab53a348857f209ea51037da4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref></type>
        <definition>enum AVCodecID av_guess_codec</definition>
        <argsstring>(AVOutputFormat *fmt, const char *short_name, const char *filename, const char *mime_type, enum AVMediaType type)</argsstring>
        <name>av_guess_codec</name>
        <param>
          <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>short_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>mime_type</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__misc_1ga9a84bba4713dfced21a1a56163be1f48" kindref="member">AVMediaType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the codec ID based upon muxer and filename. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga661ee0b2f3dbcaaef5d68f2f5d75e2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_get_output_timestamp</definition>
        <argsstring>(struct AVFormatContext *s, int stream, int64_t *dts, int64_t *wall)</argsstring>
        <name>av_get_output_timestamp</name>
        <param>
          <type>struct <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref> *</type>
          <declname>dts</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref> *</type>
          <declname>wall</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get timing information for the data currently output. The exact meaning of &quot;currently output&quot; depends on the format. It is mostly relevant for devices that have an internal buffer and/or work in real time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream in the media file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dts</parametername>
</parameternamelist>
<parameterdescription>
<para>DTS of the last packet output for the stream, in stream time_base units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">wall</parametername>
</parameternamelist>
<parameterdescription>
<para>absolute time when that packet whas output, in microsecond </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(ENOSYS)</ref> if the format does not support it Note: some formats or devices may not allow to measure dts and wall atomically. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gab533a6d5d830ab90573dd035002c5bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_hex_dump</definition>
        <argsstring>(FILE *f, const uint8_t *buf, int size)</argsstring>
        <name>av_hex_dump</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a nice hexadecimal dump of a buffer to the specified file stream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The file stream pointer where the dump should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__lavf__misc_1ga56f93dbd118ff5fe833a2e39b685974c" kindref="member">av_hex_dump_log</ref>, <ref refid="group__lavf__misc_1ga4b4bc622e34ccfa338a3815b99ac3073" kindref="member">av_pkt_dump2</ref>, <ref refid="group__lavf__misc_1ga1dcb8379f3263594c476a979c4d25703" kindref="member">av_pkt_dump_log2</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga56f93dbd118ff5fe833a2e39b685974c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_hex_dump_log</definition>
        <argsstring>(void *avcl, int level, const uint8_t *buf, int size)</argsstring>
        <name>av_hex_dump_log</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>avcl</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a nice hexadecimal dump of a buffer to the log.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>avcl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an arbitrary struct of which the first field is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> struct. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The importance level of the message, lower values signifying higher importance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__lavf__misc_1gab533a6d5d830ab90573dd035002c5bca" kindref="member">av_hex_dump</ref>, <ref refid="group__lavf__misc_1ga4b4bc622e34ccfa338a3815b99ac3073" kindref="member">av_pkt_dump2</ref>, <ref refid="group__lavf__misc_1ga1dcb8379f3263594c476a979c4d25703" kindref="member">av_pkt_dump_log2</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga4b4bc622e34ccfa338a3815b99ac3073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_pkt_dump2</definition>
        <argsstring>(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)</argsstring>
        <name>av_pkt_dump2</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>dump_payload</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a nice dump of a packet to the specified file stream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The file stream pointer where the dump should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>packet to dump </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dump_payload</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the payload must be displayed, too. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> that the packet belongs to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga1dcb8379f3263594c476a979c4d25703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_pkt_dump_log2</definition>
        <argsstring>(void *avcl, int level, AVPacket *pkt, int dump_payload, AVStream *st)</argsstring>
        <name>av_pkt_dump_log2</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>avcl</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>dump_payload</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a nice dump of a packet to the log.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>avcl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an arbitrary struct of which the first field is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> struct. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The importance level of the message, lower values signifying higher importance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>packet to dump </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dump_payload</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the payload must be displayed, too. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> that the packet belongs to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga27b89fa8286af6efb5a69e8db4033b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref></type>
        <definition>enum AVCodecID av_codec_get_id</definition>
        <argsstring>(const struct AVCodecTag *const *tags, unsigned int tag)</argsstring>
        <name>av_codec_get_id</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the AVCodecID for the given codec tag tag. If no codec id is found returns AV_CODEC_ID_NONE.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>list of supported codec_id-codec_tag pairs, as stored in <ref refid="struct_a_v_input_format_1a88738bb721c18df24fb4207aa2d4924a" kindref="member">AVInputFormat.codec_tag</ref> and <ref refid="struct_a_v_output_format_1ac55f4c21dd75c8c48b9de5080681eed4" kindref="member">AVOutputFormat.codec_tag</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>codec tag to match to a codec ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga126917b7ce8b4f05505098b72f4997de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>unsigned int av_codec_get_tag</definition>
        <argsstring>(const struct AVCodecTag *const *tags, enum AVCodecID id)</argsstring>
        <name>av_codec_get_tag</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the codec tag for the given codec id id. If no codec tag is found returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>list of supported codec_id-codec_tag pairs, as stored in <ref refid="struct_a_v_input_format_1a88738bb721c18df24fb4207aa2d4924a" kindref="member">AVInputFormat.codec_tag</ref> and <ref refid="struct_a_v_output_format_1ac55f4c21dd75c8c48b9de5080681eed4" kindref="member">AVOutputFormat.codec_tag</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>codec ID to match to a codec tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gabe1a7b6824078229c69b75c71053c035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_codec_get_tag2</definition>
        <argsstring>(const struct AVCodecTag *const *tags, enum AVCodecID id, unsigned int *tag)</argsstring>
        <name>av_codec_get_tag2</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the codec tag for the given codec id.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>list of supported codec_id - codec_tag pairs, as stored in <ref refid="struct_a_v_input_format_1a88738bb721c18df24fb4207aa2d4924a" kindref="member">AVInputFormat.codec_tag</ref> and <ref refid="struct_a_v_output_format_1ac55f4c21dd75c8c48b9de5080681eed4" kindref="member">AVOutputFormat.codec_tag</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>codec id that should be searched for in the list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the found tag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if id was not found in tags, &gt; 0 if it was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gaad9737492bb66aeeec37b7c7d8d90f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_find_default_stream_index</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_find_default_stream_index</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gac4cabc0d681c34b2e2c6a87a55877f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_index_search_timestamp</definition>
        <argsstring>(AVStream *st, int64_t timestamp, int flags)</argsstring>
        <name>av_index_search_timestamp</name>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the index for a specific timestamp.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para>stream that the timestamp belongs to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>timestamp to retrieve the index for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>if AVSEEK_FLAG_BACKWARD then the returned index will correspond to the timestamp which is &lt;= the requested one, if backward is 0, then it will be &gt;= if AVSEEK_FLAG_ANY seek to any frame, only keyframes otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if no such timestamp could be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga3ed7441cb4af0bdd65a4cf51bf35088e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_add_index_entry</definition>
        <argsstring>(AVStream *st, int64_t pos, int64_t timestamp, int size, int distance, int flags)</argsstring>
        <name>av_add_index_entry</name>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>distance</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an index entry into a sorted list. Update the entry if the list already contains it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>timestamp in the time base of the given stream </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga63a0579d6c2aa72470ac742bbbc1205d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_url_split</definition>
        <argsstring>(char *proto, int proto_size, char *authorization, int authorization_size, char *hostname, int hostname_size, int *port_ptr, char *path, int path_size, const char *url)</argsstring>
        <name>av_url_split</name>
        <param>
          <type>char *</type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>proto_size</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>authorization</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>authorization_size</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>hostname_size</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>port_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>path_size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split a URL string into components.</para><para>The pointers to buffers for storing individual components may be null, in order to ignore that component. Buffers for components not found are set to empty strings. If the port is not found, it is set to a negative value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the protocol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the proto buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>authorization</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the authorization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>authorization_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the authorization buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the host name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the hostname buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to store the port number in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the path buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>the URL to split </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gae2645941f2dc779c307eb6314fd39f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_dump_format</definition>
        <argsstring>(AVFormatContext *ic, int index, const char *url, int is_output)</argsstring>
        <name>av_dump_format</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>url</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga90e027a5d9006148413a1387c506cd40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_get_frame_filename</definition>
        <argsstring>(char *buf, int buf_size, const char *path, int number)</argsstring>
        <name>av_get_frame_filename</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return in &apos;buf&apos; the path with &apos;d&apos; replaced by a number.</para><para>Also handles the &apos;%0nd&apos; format where &apos;n&apos; is the total number of digits and &apos;%&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>numbered sequence string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>frame number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, -1 on format error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gac20eb319c6c46f581b5d08f5c25e763e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_filename_number_test</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>av_filename_number_test</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether filename actually is a numbered sequence generator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>possible numbered sequence string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a valid numbered sequence string, 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gaa2a7353a6bb0c8726797abd56b176af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_sdp_create</definition>
        <argsstring>(AVFormatContext *ac[], int n_files, char *buf, int size)</argsstring>
        <name>av_sdp_create</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ac</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n_files</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate an SDP for an RTP session.</para><para>Note, this overwrites the id values of AVStreams in the muxer contexts for getting unique dynamic payload types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ac</parametername>
</parameternamelist>
<parameterdescription>
<para>array of AVFormatContexts describing the RTP streams. If the array is composed by only one context, such context can contain multiple AVStreams (one <ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> per RTP stream). Otherwise, all the contexts in the array (an <ref refid="struct_a_v_codec_context" kindref="compound">AVCodecContext</ref> per RTP stream) must contain only one <ref refid="struct_a_v_stream" kindref="compound">AVStream</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_files</parametername>
</parameternamelist>
<parameterdescription>
<para>number of AVCodecContexts contained in ac </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer where the SDP will be stored (must be allocated by the caller) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, AVERROR_xxx on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga8247f49e5642dd3bd20ce6ba5a7f6466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_match_ext</definition>
        <argsstring>(const char *filename, const char *extensions)</argsstring>
        <name>av_match_ext</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a positive value if the given filename has one of the given extensions, 0 otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>file name to check against the given extensions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>a comma-separated list of filename extensions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1gada6a477d2b1d70aafea93da43a310e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_query_codec</definition>
        <argsstring>(AVOutputFormat *ofmt, enum AVCodecID codec_id, int std_compliance)</argsstring>
        <name>avformat_query_codec</name>
        <param>
          <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
          <declname>ofmt</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref></type>
          <declname>codec_id</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>std_compliance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_test" kindref="compound">Test</ref> if the given container can store a codec.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ofmt</parametername>
</parameternamelist>
<parameterdescription>
<para>container to check for compatibility </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec_id</parametername>
</parameternamelist>
<parameterdescription>
<para>codec to potentially store in container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std_compliance</parametername>
</parameternamelist>
<parameterdescription>
<para>standards compliance level, one of FF_COMPLIANCE_*</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if codec with ID codec_id can be stored in ofmt, 0 if it cannot. A negative number if this information is not available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__riff__fourcc_1ga036cfb1a22e899179f932df0cfc6c415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *</type>
        <definition>const struct AVCodecTag* avformat_get_riff_video_tags</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_get_riff_video_tags</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the table mapping RIFF FourCCs for video to libavcodec AVCodecID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__riff__fourcc_1ga8b9668cfd684804ebe7ab14b05aa3ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *</type>
        <definition>const struct AVCodecTag* avformat_get_riff_audio_tags</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_get_riff_audio_tags</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the table mapping RIFF FourCCs for audio to AVCodecID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__riff__fourcc_1ga36261b12dba43e0cba5a753ecb3d0e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *</type>
        <definition>const struct AVCodecTag* avformat_get_mov_video_tags</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_get_mov_video_tags</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the table mapping MOV FourCCs for video to libavcodec AVCodecID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__riff__fourcc_1gac389e7f9cd19570bd599a61fd1884a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> struct AVCodecTag *</type>
        <definition>const struct AVCodecTag* avformat_get_mov_audio_tags</definition>
        <argsstring>(void)</argsstring>
        <name>avformat_get_mov_audio_tags</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the table mapping MOV FourCCs for audio to AVCodecID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga0f62da0e809045bb21166013c404ce43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
        <definition>AVRational av_guess_sample_aspect_ratio</definition>
        <argsstring>(AVFormatContext *format, AVStream *stream, AVFrame *frame)</argsstring>
        <name>av_guess_sample_aspect_ratio</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the sample aspect ratio of a frame, based on both the stream and the frame aspect ratio.</para><para>Since the frame aspect ratio is set by the codec but the stream aspect ratio is set by the demuxer, these two may not be equal. This function tries to return the value that you should use if you would like to display the frame.</para><para>Basic logic is to use the stream aspect ratio if it is set to something sane otherwise use the frame aspect ratio. This way a container setting, which is usually easy to modify can override the coded value in the frames.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format context which the stream is part of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream which the frame is part of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>the frame with the aspect ratio to be determined </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the guessed (valid) sample_aspect_ratio, 0/1 if no idea </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga12c049178414cc221dfafd4e7f836dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
        <definition>AVRational av_guess_frame_rate</definition>
        <argsstring>(AVFormatContext *ctx, AVStream *stream, AVFrame *frame)</argsstring>
        <name>av_guess_frame_rate</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the frame rate, based on both the container and codec information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the format context which the stream is part of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream which the frame is part of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>the frame for which the frame rate should be determined, may be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the guessed (valid) frame rate, 0/1 if no idea </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga7e45597834e9ef3098ddb74bc5e1550c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_match_stream_specifier</definition>
        <argsstring>(AVFormatContext *s, AVStream *st, const char *spec)</argsstring>
        <name>avformat_match_stream_specifier</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the stream st contained in s is matched by the stream specifier spec.</para><para>See the &quot;stream specifiers&quot; chapter in the documentation for the syntax of spec.</para><para><simplesect kind="return"><para>&gt;0 if st is matched by spec; 0 if st is not matched by spec; AVERROR code if spec is invalid</para></simplesect>
<simplesect kind="note"><para>A stream specifier can match several streams in the format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__misc_1ga501ff1b3aa357c09da90c0effb356e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_queue_attached_pictures</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>avformat_queue_attached_pictures</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2536" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Main libavformat public API header </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>copyright<sp/>(c)<sp/>2001<sp/>Fabrice<sp/>Bellard</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>FFmpeg.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>FFmpeg;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AVFORMAT_AVFORMAT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFORMAT_AVFORMAT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FILE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="avcodec_8h" kindref="compound">libavcodec/avcodec.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">libavutil/dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ffmpeg_2libavutil_2log_8h" kindref="compound">libavutil/log.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="avio_8h" kindref="compound">avio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ffmpeg_2libavformat_2version_8h" kindref="compound">libavformat/version.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVDeviceInfoList;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/*<sp/>packet<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1a9d2e6f22150d98c36dcc2c6c49318019" kindref="member">av_get_packet</ref>(<ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*pkt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1a0e991213ccc3d642972b57a1decb797b" kindref="member">av_append_packet</ref>(<ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*pkt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>fractional<sp/>numbers<sp/>for<sp/>exact<sp/>pts<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="struct_a_v_frac" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_frac" kindref="compound">AVFrac</ref><sp/>{</highlight></codeline>
<codeline lineno="378" refid="struct_a_v_frac_1ad8a9fbef2ecee98544521815af4bb4b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="struct_a_v_frac_1ad8a9fbef2ecee98544521815af4bb4b1" kindref="member">val</ref>,<sp/><ref refid="struct_a_v_frac_1a9203429f247637d5819f1feb05c47009" kindref="member">num</ref>,<sp/><ref refid="struct_a_v_frac_1a1a56f998e04f22ca35e4385a06a04812" kindref="member">den</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}<sp/><ref refid="avformat_8h_1a4eb665eed89f385ab0bbbb2ce8bd8dcf" kindref="member">AVFrac</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">/*************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>input/output<sp/>formats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="struct_a_v_probe_data" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref><sp/>{</highlight></codeline>
<codeline lineno="390" refid="struct_a_v_probe_data_1a0e8504127aff8af25cc9f3c6400b9651" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_v_probe_data_1a0e8504127aff8af25cc9f3c6400b9651" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="391" refid="struct_a_v_probe_data_1a814cca49dda3f578ebb32d4b2f74368a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_v_probe_data_1a814cca49dda3f578ebb32d4b2f74368a" kindref="member">buf</ref>;<sp/></highlight></codeline>
<codeline lineno="392" refid="struct_a_v_probe_data_1a30309e4de25c1a411c635eab767e1e53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_probe_data_1a30309e4de25c1a411c635eab767e1e53" kindref="member">buf_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal">}<sp/><ref refid="avformat_8h_1afb45bd01415177fc992300e6ac2bd43c" kindref="member">AVProbeData</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="avformat_8h_1adeacd8263046043734062588db39bce9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVPROBE_SCORE_RETRY<sp/>(AVPROBE_SCORE_MAX/4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="avformat_8h_1a1b33e0f3734db4299d5aff4b78f98c43" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVPROBE_SCORE_STREAM_RETRY<sp/>(AVPROBE_SCORE_MAX/4-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="avformat_8h_1a8fef570c1a6f9c445acaf97fa2da3b7e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVPROBE_SCORE_EXTENSION<sp/><sp/>50<sp/></highlight></codeline>
<codeline lineno="399" refid="avformat_8h_1a24925a4d1138c3f17a7a27dd45c08920" refkind="member"><highlight class="preprocessor">#define<sp/>AVPROBE_SCORE_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>100<sp/></highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="avformat_8h_1a2cba242c83a06fff914d1c8ef4cd42ac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVPROBE_PADDING_SIZE<sp/>32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFMT_NOFILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="avformat_8h_1af7899d15bd762258202bdec2035d8fc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFMT_NEEDNUMBER<sp/><sp/><sp/><sp/>0x0002<sp/></highlight></codeline>
<codeline lineno="406" refid="avformat_8h_1a90e4cbd1011b989cd7db628d2eca2675" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_SHOW_IDS<sp/><sp/><sp/><sp/><sp/><sp/>0x0008<sp/></highlight></codeline>
<codeline lineno="407" refid="avformat_8h_1a71f4268e7674596c14c18b4bb3e60a3e" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_RAWPICTURE<sp/><sp/><sp/><sp/>0x0020<sp/></highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor">#define<sp/>AVFMT_GLOBALHEADER<sp/><sp/>0x0040<sp/></highlight></codeline>
<codeline lineno="410" refid="avformat_8h_1ab203c7b734e9c31b7c37d34f6e2c6aef" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_NOTIMESTAMPS<sp/><sp/>0x0080<sp/></highlight></codeline>
<codeline lineno="411" refid="avformat_8h_1ae4418d32b17890be22da9c5f95087168" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_GENERIC_INDEX<sp/>0x0100<sp/></highlight></codeline>
<codeline lineno="412" refid="avformat_8h_1ad2bd0ecdd51061b300e2ab490907bb09" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_TS_DISCONT<sp/><sp/><sp/><sp/>0x0200<sp/></highlight></codeline>
<codeline lineno="413" refid="avformat_8h_1a4d232408e799fa2b2f2705a3e8e0b4b8" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_VARIABLE_FPS<sp/><sp/>0x0400<sp/></highlight></codeline>
<codeline lineno="414" refid="avformat_8h_1a4d9f21e76a3bf919c74ea40957ef21a7" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_NODIMENSIONS<sp/><sp/>0x0800<sp/></highlight></codeline>
<codeline lineno="415" refid="avformat_8h_1a21abb57f90931c92c853e696cc1c358c" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_NOSTREAMS<sp/><sp/><sp/><sp/><sp/>0x1000<sp/></highlight></codeline>
<codeline lineno="416" refid="avformat_8h_1a1500ed92d07addf13d1e9dfd0fff6672" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_NOBINSEARCH<sp/><sp/><sp/>0x2000<sp/></highlight></codeline>
<codeline lineno="417" refid="avformat_8h_1a8f47c7c3b5763fc7199f41741d759a70" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_NOGENSEARCH<sp/><sp/><sp/>0x4000<sp/></highlight></codeline>
<codeline lineno="418" refid="avformat_8h_1a860dc077e9c782de0d49a2d4d968b64a" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_NO_BYTE_SEEK<sp/><sp/>0x8000<sp/></highlight></codeline>
<codeline lineno="419" refid="avformat_8h_1a6286e2977286a22b622cb51cf4106541" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_ALLOW_FLUSH<sp/><sp/>0x10000<sp/></highlight></codeline>
<codeline lineno="420" refid="avformat_8h_1a3b9a2012b993edb9e2ba3db6d55db1ae" refkind="member"><highlight class="preprocessor">#if<sp/>LIBAVFORMAT_VERSION_MAJOR<sp/>&lt;=<sp/>54</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFMT_TS_NONSTRICT<sp/>0x8020000<sp/>//we<sp/>try<sp/>to<sp/>be<sp/>compatible<sp/>to<sp/>the<sp/>ABIs<sp/>of<sp/>ffmpeg<sp/>and<sp/>major<sp/>forks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="avformat_8h_1a918dc7abf0d4f7abd36a2ea2a594feaf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFMT_TS_NONSTRICT<sp/>0x20000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor">#define<sp/>AVFMT_TS_NEGATIVE<sp/><sp/>0x40000<sp/></highlight></codeline>
<codeline lineno="437"><highlight class="preprocessor">#define<sp/>AVFMT_SEEK_TO_PTS<sp/><sp/><sp/>0x4000000<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor">typedef<sp/>struct<sp/>AVOutputFormat<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*long_name;</highlight></codeline>
<codeline lineno="451" refid="struct_a_v_output_format" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type;</highlight></codeline>
<codeline lineno="452" refid="struct_a_v_output_format_1ac3abc5f47f3465b6b7eec89c9476351c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extensions;<sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>audio_codec;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>video_codec;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>subtitle_codec;<sp/></highlight></codeline>
<codeline lineno="463" refid="struct_a_v_output_format_1a1354a9c8542b1b698157218336bd4754" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="464" refid="struct_a_v_output_format_1adc8b4d7a5f6610e1816dd522e362217c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*codec_tag;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="struct_a_v_output_format_1aad55a00e728a020c1dcfaaf695320445" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_class" kindref="compound">AVClass</ref><sp/>*priv_class;<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*****************************************************************</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>fields<sp/>below<sp/>this<sp/>line<sp/>are<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/>They</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>not<sp/>be<sp/>used<sp/>outside<sp/>of<sp/>libavformat<sp/>and<sp/>can<sp/>be<sp/>changed<sp/>and</highlight></codeline>
<codeline lineno="477" refid="struct_a_v_output_format_1ac55f4c21dd75c8c48b9de5080681eed4" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>at<sp/>will.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>New<sp/>public<sp/>fields<sp/>should<sp/>be<sp/>added<sp/>right<sp/>above.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************</highlight></codeline>
<codeline lineno="480" refid="struct_a_v_output_format_1ae030463c5c08de99f8c9e727c822ca87" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*<ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_output_format_1ad7677ef35d272b2dad5498c51b4d2204" kindref="member">priv_data_size</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="twolame_2libtwolame_2encode_8c_1a2a016df598c6f65e39016018c5bc7a4f" kindref="member">write_header</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*);</highlight></codeline>
<codeline lineno="495" refid="struct_a_v_output_format_1aa867a120bd90779111565907b327ba61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*write_packet)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*write_trailer)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*interleave_packet)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="1-single-block_8c_1a18b1d64a94008e3c56953d279b8095e2" kindref="member">in</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mm_8c_1a16c5a58c6350aaae15268b27e4e5d5ba" kindref="member">flush</ref>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*query_codec)(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>std_compliance);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref><sp/>(*get_output_timestamp)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>*dts,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>*wall);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*control_message)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="517" refid="struct_a_v_output_format_1a2622bb891412cf52010a54afb622abc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*write_uncoded_frame)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref><sp/>**frame,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context_1a32379cc371463b235d54235d4af06a15" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*get_device_list)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVDeviceInfoList<sp/>*device_list);</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}<sp/><ref refid="group__lavf__encoding_1ga7328f2fe9ea40f836f0eea2d44f2db5e" kindref="member">AVOutputFormat</ref>;</highlight></codeline>
<codeline lineno="543"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*long_name;</highlight></codeline>
<codeline lineno="556" refid="struct_a_v_input_format_1a850db3eb225e22b64f3304d72134ca0c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="563" refid="struct_a_v_input_format_1a1f67064a527941944017f1dfe65d3aa9" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extensions;</highlight></codeline>
<codeline lineno="570" refid="struct_a_v_input_format_1a1b30f6647d0c2faf38ba8786d7c3a838" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*codec_tag;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_class" kindref="compound">AVClass</ref><sp/>*priv_class;<sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*****************************************************************</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>fields<sp/>below<sp/>this<sp/>line<sp/>are<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/>They</highlight></codeline>
<codeline lineno="577" refid="struct_a_v_input_format_1ae692e27e532f664f26e2501967b09eab" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>not<sp/>be<sp/>used<sp/>outside<sp/>of<sp/>libavformat<sp/>and<sp/>can<sp/>be<sp/>changed<sp/>and</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>at<sp/>will.</highlight></codeline>
<codeline lineno="579" refid="struct_a_v_input_format_1a88738bb721c18df24fb4207aa2d4924a" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>New<sp/>public<sp/>fields<sp/>should<sp/>be<sp/>added<sp/>right<sp/>above.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************</highlight></codeline>
<codeline lineno="581" refid="struct_a_v_input_format_1afaac829559ad9e07618c01a51d8a4c5f" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*<ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_input_format_1ac12c67e8e0b7bc2b0c26ab383d9a0c76" kindref="member">raw_codec_id</ref>;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_input_format_1a195b445886775084b8e075062d33f09a" kindref="member">priv_data_size</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="struct_a_v_input_format_1a2e272c7785fdd26895b1af1867b62567" kindref="member">read_probe</ref>)(<ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref><sp/>*);</highlight></codeline>
<codeline lineno="600" refid="struct_a_v_input_format_1a195b445886775084b8e075062d33f09a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="struct_a_v_input_format_1a286d65d159570516e5ed38fcbb842d5a" kindref="member">read_header</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*);</highlight></codeline>
<codeline lineno="607" refid="struct_a_v_input_format_1a2e272c7785fdd26895b1af1867b62567" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*read_packet)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*read_close)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*read_seek)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>timestamp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context_1a32379cc371463b235d54235d4af06a15" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>(*read_timestamp)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,</highlight></codeline>
<codeline lineno="641" refid="struct_a_v_input_format_1a04a3b9ba459666bdb43628c472fa29bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>*pos,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pos_limit);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*read_play)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*);</highlight></codeline>
<codeline lineno="648" refid="struct_a_v_input_format_1ab071640466e60eddc4eee43385fb22fd" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*read_pause)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="struct_a_v_input_format_1a4e4da186feab0a2900404e77aa3631f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*read_seek2)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>min_ts,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>ts,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>max_ts,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context_1a32379cc371463b235d54235d4af06a15" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*get_device_list)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVDeviceInfoList<sp/>*device_list);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}<sp/><ref refid="group__lavf__decoding_1ga41ac82c86aa114943b700dac564d2508" kindref="member">AVInputFormat</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91" kindref="member">AVStreamParseType</ref><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91ac715de62daa60e31ce01b9671bd35f9e" kindref="member">AVSTREAM_PARSE_NONE</ref>,</highlight></codeline>
<codeline lineno="675" refid="struct_a_v_input_format_1a904104dc65359b800012d7abd01bb8e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91ac21d15a27dac74ca0730b4dace71d883" kindref="member">AVSTREAM_PARSE_FULL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a67bc09fcdeb0e05754f344fbc80856ca" kindref="member">AVSTREAM_PARSE_HEADERS</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a10f8e7a9d88b7b5e2010ffb496b6cf1a" kindref="member">AVSTREAM_PARSE_TIMESTAMPS</ref>,<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a41eb176dd7cfc095b5ea66816a75c56a" kindref="member">AVSTREAM_PARSE_FULL_ONCE</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a4a4190f226593e92724285f8bfef9c2e" kindref="member">AVSTREAM_PARSE_FULL_RAW</ref>=<ref refid="ffmpeg_2libavutil_2common_8h_1a19c68e2b5efcbab914d79db1e4fee734" kindref="member">MKTAG</ref>(0,</highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="682" refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91ac715de62daa60e31ce01b9671bd35f9e" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="683" refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91ac21d15a27dac74ca0730b4dace71d883" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a67bc09fcdeb0e05754f344fbc80856ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_index_entry" kindref="compound">AVIndexEntry</ref><sp/>{</highlight></codeline>
<codeline lineno="685" refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a10f8e7a9d88b7b5e2010ffb496b6cf1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pos;</highlight></codeline>
<codeline lineno="686" refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91a41eb176dd7cfc095b5ea66816a75c56a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>timestamp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="692" refid="struct_a_v_index_entry" refkind="compound"><highlight class="preprocessor">#define<sp/>AVINDEX_KEYFRAME<sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693" refid="struct_a_v_index_entry_1ac0dd805ffd04bb52b1a358331dd10b98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags:2;</highlight></codeline>
<codeline lineno="694" refid="struct_a_v_index_entry_1affef8bf4cd2f53a47ebc2d298d0d57c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>:30;<sp/></highlight><highlight class="comment">//Yeah,<sp/>trying<sp/>to<sp/>keep<sp/>the<sp/>size<sp/>of<sp/>this<sp/>small<sp/>to<sp/>reduce<sp/>memory<sp/>requirements<sp/>(it<sp/>is<sp/>24<sp/>vs.<sp/>32<sp/>bytes<sp/>due<sp/>to<sp/>possible<sp/>8-byte<sp/>alignment).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_distance;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="696"><highlight class="normal">}<sp/><ref refid="avformat_8h_1af1fd24b660d7d65113b919010656aa06" kindref="member">AVIndexEntry</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_DEFAULT<sp/><sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_DUB<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="avformat_8h_1a23159bdc0b27ccf964072e30d6cc4559" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_ORIGINAL<sp/><sp/>0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="struct_a_v_index_entry_1a72366fb5dae7421e41cce6ad8dd2126b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_COMMENT<sp/><sp/><sp/>0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="struct_a_v_index_entry_1a1b57d93b863a1b605461229a65ca8b52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_LYRICS<sp/><sp/><sp/><sp/>0x0010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="struct_a_v_index_entry_1add3fa33e8b3363a96fa4c62fca1bcf42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_KARAOKE<sp/><sp/><sp/>0x0020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="avformat_8h_1a07792fd9060493192a4d4f25714a56d6" refkind="member"><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_FORCED<sp/><sp/><sp/><sp/>0x0040</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="avformat_8h_1a4e6b75c4d996642d88b98241f0ad2979" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_HEARING_IMPAIRED<sp/><sp/>0x0080<sp/><sp/></highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_VISUAL_IMPAIRED<sp/><sp/><sp/>0x0100<sp/><sp/></highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_CLEAN_EFFECTS<sp/><sp/><sp/><sp/><sp/>0x0200<sp/><sp/></highlight></codeline>
<codeline lineno="720" refid="avformat_8h_1aa8e9704bcc842236ad048062dcf45d45" refkind="member"><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_ATTACHED_PIC<sp/><sp/><sp/><sp/><sp/><sp/>0x0400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="avformat_8h_1a9b09132b5af7f7f6fe54d61782373bc7" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_CAPTIONS<sp/><sp/><sp/><sp/><sp/>0x10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_DESCRIPTIONS<sp/>0x20000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_DISPOSITION_METADATA<sp/><sp/><sp/><sp/><sp/>0x40000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728" refid="avformat_8h_1ab54a3e54e88a8f7d7760e60b49944e44" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor">#define<sp/>AV_PTS_WRAP_IGNORE<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="733" refid="avformat_8h_1a51efe44185491ba0a214fe2bc92ac2a1" refkind="member"><highlight class="preprocessor">#define<sp/>AV_PTS_WRAP_ADD_OFFSET<sp/><sp/>1<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="734" refid="avformat_8h_1ae578ee8b851860926955855d1234f93f" refkind="member"><highlight class="preprocessor">#define<sp/>AV_PTS_WRAP_SUB_OFFSET<sp/><sp/>-1<sp/><sp/></highlight></codeline>
<codeline lineno="735" refid="avformat_8h_1a5ff7b03b405295a7a9743cfa67369759" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_codec_context" kindref="compound">AVCodecContext</ref><sp/>*codec;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv_data;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_frac" kindref="compound">AVFrac</ref><sp/>pts;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>time_base;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="winmain2_8h_1a4c30c8d3d1add32b5fcf4d25497a9aae" kindref="member">start_time</ref>;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>duration;</highlight></codeline>
<codeline lineno="797" refid="struct_a_v_stream_1a7c67ae70632c91df8b0f721658ec5377" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>nb_frames;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disposition;<sp/></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__decoding_1ga352363bce7d3ed82c101b3bc001d1c16" kindref="member">AVDiscard</ref><sp/>discard;<sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>sample_aspect_ratio;</highlight></codeline>
<codeline lineno="810" refid="struct_a_v_stream_1a492fcecc45dbbd8da51edd0124e9dd30" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>*metadata;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>avg_frame_rate;</highlight></codeline>
<codeline lineno="817" refid="struct_a_v_stream_1a3f19c60ac6da237cd10e4d97150c118e" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>attached_pic;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*****************************************************************</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>All<sp/>fields<sp/>below<sp/>this<sp/>line<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/>They</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>not<sp/>be<sp/>used<sp/>outside<sp/>of<sp/>libavformat<sp/>and<sp/>can<sp/>be<sp/>changed<sp/>and</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>at<sp/>will.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>New<sp/>public<sp/>fields<sp/>should<sp/>be<sp/>added<sp/>right<sp/>above.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************</highlight></codeline>
<codeline lineno="833" refid="struct_a_v_stream_1a8c689ee00c0dfe4313891f8a2ea21f4d" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor">#define<sp/>MAX_STD_TIMEBASES<sp/>(60*12+6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>last_dts;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>duration_gcd;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration_count;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>rfps_duration_sum;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>(*duration_error)[2][<ref refid="avformat_8h_1a79d6ee9e699fd534e85543752f3cb775" kindref="member">MAX_STD_TIMEBASES</ref>];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>codec_info_duration;</highlight></codeline>
<codeline lineno="846" refid="avformat_8h_1a79d6ee9e699fd534e85543752f3cb775" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>codec_info_duration_fields;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="struct_a_v_stream_1a55fa61f39b931338e5ba270f3be7a28e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found_decoder;</highlight></codeline>
<codeline lineno="854" refid="struct_a_v_stream_1a5cf5e17cd1a56b141b588225fe7cf272" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>last_duration;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>fps_first_dts;</highlight></codeline>
<codeline lineno="861" refid="struct_a_v_stream_1aa209c846f64d54a7d73fcfdea0d3df94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fps_first_dts_idx;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>fps_last_dts;</highlight></codeline>
<codeline lineno="863" refid="struct_a_v_stream_1af2a160604ac831709bc4f011a3a38410" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fps_last_dts_idx;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>*<ref refid="lib_2expat_8h_1a20806b446e455c50dc5653b7d43e3de2" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_wrap_bits;<sp/></highlight></codeline>
<codeline lineno="869" refid="struct_a_v_stream_1a7c3c240bfa2e64162c3811ffc33207ff" refkind="member"><highlight class="preprocessor">#if<sp/>FF_API_REFERENCE_DTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="struct_a_v_stream_1a4ec56efe4892728d0b767d55c1238faa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>hack<sp/>to<sp/>keep<sp/>ABI<sp/>compatibility<sp/>for<sp/>ffmpeg<sp/>and<sp/>other<sp/>applications,<sp/>which<sp/>accesses<sp/>parser<sp/>even</highlight></codeline>
<codeline lineno="871" refid="struct_a_v_stream_1ac815be62a9c05f7da2e2665ee058014b" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>though<sp/>it<sp/>should<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>do_not_use;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timestamp<sp/>generation<sp/>support:</highlight></codeline>
<codeline lineno="882"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>first_dts;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>cur_dts;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>last_IP_pts;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_IP_duration;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="struct_a_v_stream_1a1e341587fa92b173a0d6ae73fadb0409" refkind="member"><highlight class="preprocessor">#define<sp/>MAX_PROBE_PACKETS<sp/>2500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="struct_a_v_stream_1ad552f602c2113bd5152cff3c58ba1f9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probe_packets;</highlight></codeline>
<codeline lineno="892" refid="struct_a_v_stream_1af8e7b1373292e393ed210dc15aa8d2ca" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codec_info_nb_frames;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898" refid="avformat_8h_1a1614829d41ffec53f2348ad30663e1b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>av_read_frame()<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899" refid="struct_a_v_stream_1a1cd124860be31d0d275bb838ace6a98c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1afacbc85f23a50771e3801bda0a353d91" kindref="member">AVStreamParseType</ref><sp/>need_parsing;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_codec_parser_context" kindref="compound">AVCodecParserContext</ref><sp/>*<ref refid="struct_a_v_codec_parser_context_1a540286a805755b5b1f9d213f9f1d7109" kindref="member">parser</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*last_in_packet_buffer;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref><sp/>probe_data;</highlight></codeline>
<codeline lineno="907" refid="struct_a_v_stream_1acd70b72d0c0514643a5c11b2c7c8202c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_REORDER_DELAY<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908" refid="struct_a_v_stream_1a5b1079c1e244d644a86457e7e27545c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pts_buffer[<ref refid="avformat_8h_1a1a5362deb573c857ad801ec212ef3583" kindref="member">MAX_REORDER_DELAY</ref>+1];</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_index_entry" kindref="compound">AVIndexEntry</ref><sp/>*index_entries;<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_index_entries;</highlight></codeline>
<codeline lineno="913" refid="struct_a_v_stream_1ab8d53bc29f0761a3f87ec0b5ed7dc8d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_entries_allocated_size;</highlight></codeline>
<codeline lineno="914" refid="struct_a_v_stream_1a9749c451ce3c41a2345933252c4f96c6" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>r_frame_rate;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_identifier;</highlight></codeline>
<codeline lineno="934" refid="struct_a_v_stream_1ad63fb11cc1415e278e09ddc676e8a1ad" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>interleaver_chunk_size;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>interleaver_chunk_duration;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request_probe;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_to_keyframe;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_samples;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_decoded_frames;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>mux_ts_offset;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pts_wrap_reference;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_wrap_behavior;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>update_initial_durations_done;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pts_reorder_error[<ref refid="avformat_8h_1a1a5362deb573c857ad801ec212ef3583" kindref="member">MAX_REORDER_DELAY</ref>+1];</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>pts_reorder_error_count[<ref refid="avformat_8h_1a1a5362deb573c857ad801ec212ef3583" kindref="member">MAX_REORDER_DELAY</ref>+1];</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>last_dts_for_order_check;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>dts_ordered;</highlight></codeline>
<codeline lineno="1002" refid="struct_a_v_stream_1ad3e2b5f6e98424f1e5e5bfc909cee38b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>dts_misordered;</highlight></codeline>
<codeline lineno="1003" refid="struct_a_v_stream_1acd6fe77bbabf1ad6727492a2749e5275" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}<sp/><ref refid="avformat_8h_1ad38b1f6206bec83d7b10f0c7021b4234" kindref="member">AVStream</ref>;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="avformat_8h_1a7de783c245b561f78c8e57448922c5c4" kindref="member">av_stream_get_r_frame_rate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1aa80eccaee483dd956fbfd95ae3be7bde" kindref="member">av_stream_set_r_frame_rate</ref>(<ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*s,<sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>r);</highlight></codeline>
<codeline lineno="1008" refid="struct_a_v_stream_1ada8c3bd5c2de4c1b5f0895e088167e03" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009" refid="struct_a_v_stream_1a936ec7b1aa699303d20e4489ad4054e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_PROGRAM_RUNNING<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="struct_a_v_stream_1a02b107869ea9e14c784d1bfdade3ebf2" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017" refid="avformat_8h_1a1f70b27f61ebf7a52fd53515af132f60" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__decoding_1ga352363bce7d3ed82c101b3bc001d1c16" kindref="member">AVDiscard</ref><sp/>discard;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*stream_index;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nb_stream_indexes;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>*metadata;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025" refid="struct_a_v_program" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>program_num;</highlight></codeline>
<codeline lineno="1026" refid="struct_a_v_program_1a10cc799a98b37335e820b0bdb386eb95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmt_pid;</highlight></codeline>
<codeline lineno="1027" refid="struct_a_v_program_1a8c87564167b87f54be9171778d51fe49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pcr_pid;</highlight></codeline>
<codeline lineno="1028" refid="struct_a_v_program_1a9c7a07c08a1f960aaa49f3f47633af5c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029" refid="struct_a_v_program_1a7967d41af4812ed61a28762e988c7a02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*****************************************************************</highlight></codeline>
<codeline lineno="1030" refid="struct_a_v_program_1a136cf29d2aa5b0e4c6d743406c5e39d1" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>All<sp/>fields<sp/>below<sp/>this<sp/>line<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/>They</highlight></codeline>
<codeline lineno="1031" refid="struct_a_v_program_1ae9dab38d4694e3da9cba0f882f4e43d3" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>not<sp/>be<sp/>used<sp/>outside<sp/>of<sp/>libavformat<sp/>and<sp/>can<sp/>be<sp/>changed<sp/>and</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>at<sp/>will.</highlight></codeline>
<codeline lineno="1033" refid="struct_a_v_program_1a4c1539ea3c98da979b95a59a3ea163cb" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>New<sp/>public<sp/>fields<sp/>should<sp/>be<sp/>added<sp/>right<sp/>above.</highlight></codeline>
<codeline lineno="1034" refid="struct_a_v_program_1a02011963a63c291c6dc6d4eefa56cd69" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************</highlight></codeline>
<codeline lineno="1035" refid="struct_a_v_program_1a7e026323df87e84a72ec5e5c8ce341a5" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="winmain2_8h_1a4c30c8d3d1add32b5fcf4d25497a9aae" kindref="member">start_time</ref>;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>end_time;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pts_wrap_reference;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_wrap_behavior;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}<sp/><ref refid="avformat_8h_1a34b2f9ebe1e27ab10441a53dc1031e48" kindref="member">AVProgram</ref>;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFMTCTX_NOHEADER<sp/><sp/><sp/><sp/><sp/><sp/>0x0001<sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="preprocessor">typedef<sp/>struct<sp/>AVChapter<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="struct_a_v_program_1a7e539e286876577e158039f6e7678452" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1048" refid="struct_a_v_program_1aa3f8af78093a910ff766ac5af381758b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>time_base;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="convtest_8m_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>*metadata;</highlight></codeline>
<codeline lineno="1051" refid="avformat_8h_1a42e3c3d72e561fdc501613962fccc4aa" refkind="member"><highlight class="normal">}<sp/><ref refid="avformat_8h_1adfe1258ac595e1f3816c500c00da4b58" kindref="member">AVChapter</ref>;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057" refid="struct_a_v_chapter_1acb5cb6ce9bb6b9f4b970a919f4899818" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" kindref="member">av_format_control_message</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="1058" refid="struct_a_v_chapter_1a499a5062224e22249be6f2d16f74c449" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size);</highlight></codeline>
<codeline lineno="1059" refid="struct_a_v_chapter_1a998ea9c9f86547970d58f0b405d55332" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73b" kindref="member">AVDurationEstimationMethod</ref><sp/>{</highlight></codeline>
<codeline lineno="1066" refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73bac94465d3290399477775fe094ab8f75a" kindref="member">AVFMT_DURATION_FROM_PTS</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73bae92edb9576c3d6dd68f49a849a2ec6c0" kindref="member">AVFMT_DURATION_FROM_STREAM</ref>,<sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73ba6185e1e7f8dfae85596779408ef496b2" kindref="member">AVFMT_DURATION_FROM_BITRATE</ref><sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="avformat_8h_1a7bec8d592652431045d81a02fef74f28" kindref="member">AVFormatInternal</ref><sp/><ref refid="avformat_8h_1a7bec8d592652431045d81a02fef74f28" kindref="member">AVFormatInternal</ref>;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_class" kindref="compound">AVClass</ref><sp/>*av_class;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*iformat;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*oformat;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109" refid="struct_a_v_format_context_1a20d80ac07e38ff5c268d15aaf2798b98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv_data;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref><sp/>*pb;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stream<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctx_flags;<sp/></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_streams;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>**streams;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>[1024];</highlight></codeline>
<codeline lineno="1154" refid="struct_a_v_format_context_1acfefb6b6cf21e87a0dcbd1a547ba2348" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162" refid="struct_a_v_format_context_1a65a978cf0ca3c0f0da52840d2e97f9ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="winmain2_8h_1a4c30c8d3d1add32b5fcf4d25497a9aae" kindref="member">start_time</ref>;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>duration;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rate;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181" refid="struct_a_v_format_context_1ad0ea78ac48f5bb0a15a15c1c472744d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_size;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_delay;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_output_format_1aad55a00e728a020c1dcfaaf695320445" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_GENPTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0001<sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_IGNIDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0002<sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_NONBLOCK<sp/><sp/><sp/><sp/><sp/>0x0004<sp/></highlight></codeline>
<codeline lineno="1188" refid="struct_a_v_format_context_1a4f7a7b9b1313907c88e62b03f3e569e6" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_IGNDTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0008<sp/></highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_NOFILLIN<sp/><sp/><sp/><sp/><sp/>0x0010<sp/></highlight></codeline>
<codeline lineno="1190" refid="struct_a_v_format_context_1a0739c2952969d3c67788f02ea829f549" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_NOPARSE<sp/><sp/><sp/><sp/><sp/><sp/>0x0020<sp/></highlight></codeline>
<codeline lineno="1191" refid="struct_a_v_format_context_1a58422ed3d461b3440a15cf057ac5f5b7" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_NOBUFFER<sp/><sp/><sp/><sp/><sp/>0x0040<sp/></highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_CUSTOM_IO<sp/><sp/><sp/><sp/>0x0080<sp/></highlight></codeline>
<codeline lineno="1193" refid="struct_a_v_format_context_1a32379cc371463b235d54235d4af06a15" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_DISCARD_CORRUPT<sp/><sp/>0x0100<sp/></highlight></codeline>
<codeline lineno="1194" refid="avformat_8h_1a69e2c8bc119c0245ff6092f9db4d12ae" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_FLUSH_PACKETS<sp/><sp/><sp/><sp/>0x0200<sp/></highlight></codeline>
<codeline lineno="1195" refid="avformat_8h_1a2d5c3fab0686ccb9f517dec49048d421" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_MP4A_LATM<sp/><sp/><sp/><sp/>0x8000<sp/></highlight></codeline>
<codeline lineno="1196" refid="avformat_8h_1a4fd189c4f2464afad342133be7bf6aeb" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_SORT_DTS<sp/><sp/><sp/><sp/>0x10000<sp/></highlight></codeline>
<codeline lineno="1197" refid="avformat_8h_1a48978eb2565907e8794910a1178897e0" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_PRIV_OPT<sp/><sp/><sp/><sp/>0x20000<sp/></highlight></codeline>
<codeline lineno="1198" refid="avformat_8h_1acafe6c256110801c5bfb79da1d4ec0fa" refkind="member"><highlight class="preprocessor">#define<sp/>AVFMT_FLAG_KEEP_SIDE_DATA<sp/>0x40000<sp/></highlight></codeline>
<codeline lineno="1199" refid="avformat_8h_1af94b1dbe5f4e7c0ab04dc05ea18c1d81" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200" refid="avformat_8h_1aee579ebc55f7067a964fbfd09c14e8c2" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205" refid="avformat_8h_1a19d3097af30fbd65caa79464657ce4bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probesize;</highlight></codeline>
<codeline lineno="1206" refid="avformat_8h_1a50b1ae2089b32bf048b79ff3bd7175f4" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_analyze_duration;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214" refid="struct_a_v_format_context_1afcff2757459cf56050b2d908f46957b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*key;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keylen;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_programs;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref><sp/>**programs;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224" refid="struct_a_v_format_context_1a1f2c1db3070cc100938eaed81ff3767d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>video_codec_id;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>audio_codec_id;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>subtitle_codec_id;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_index_size;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_picture_buffer;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_chapters;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_chapter" kindref="compound">AVChapter</ref><sp/>**chapters;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>*metadata;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>start_time_realtime;</highlight></codeline>
<codeline lineno="1287" refid="struct_a_v_format_context_1a3019a56080ed2e3297ff25bc2ff88adf" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fps_probe_size;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_recognition;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_i_o_interrupt_c_b" kindref="compound">AVIOInterruptCB</ref><sp/>interrupt_callback;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="src_2flac_2main_8c_1a6f11ce505641910527169e5b39d693cc" kindref="member">debug</ref>;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FF_FDEBUG_TS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>max_interleave_delta;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ts_id;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>audio_preload;</highlight></codeline>
<codeline lineno="1350" refid="struct_a_v_format_context_1a5d331e9a0609a93dd4593af6c118cc4b" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_chunk_duration;</highlight></codeline>
<codeline lineno="1358" refid="struct_a_v_format_context_1ac02383c2106cca8022f8a293399aed58" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_chunk_size;</highlight></codeline>
<codeline lineno="1366" refid="struct_a_v_format_context_1ae20c589e20f22f74f1687702de6d2e8e" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_wallclock_as_timestamps;</highlight></codeline>
<codeline lineno="1374" refid="struct_a_v_format_context_1a3d8cfff712c81d1cbc725b40ce02f7e7" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>avoid_negative_ts;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>avio_flags;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73b" kindref="member">AVDurationEstimationMethod</ref><sp/>duration_estimation_method;</highlight></codeline>
<codeline lineno="1400" refid="struct_a_v_format_context_1a5e6814c9de3c272396f07e2ff18c7b27" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_initial_bytes;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>correct_ts_overflow;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seek2any;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush_packets;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436" refid="struct_a_v_format_context_1a1fdd77fff4c7df1e30ce1d42e10922e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probe_score;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*****************************************************************</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>All<sp/>fields<sp/>below<sp/>this<sp/>line<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/>They</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>not<sp/>be<sp/>used<sp/>outside<sp/>of<sp/>libavformat<sp/>and<sp/>can<sp/>be<sp/>changed<sp/>and</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>at<sp/>will.</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>New<sp/>public<sp/>fields<sp/>should<sp/>be<sp/>added<sp/>right<sp/>above.</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445" refid="struct_a_v_format_context_1a65f11f94f40f83866ebe651c8ae111cf" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*packet_buffer;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*packet_buffer_end;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>av_seek_frame()<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>data_offset;<sp/></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*raw_packet_buffer;</highlight></codeline>
<codeline lineno="1464" refid="struct_a_v_format_context_1ab39a854407abf72836e4653a982d5f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*raw_packet_buffer_end;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*parse_queue;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*parse_queue_end;</highlight></codeline>
<codeline lineno="1473" refid="struct_a_v_format_context_1a88d15460d48097522af38525fbfc2f21" refkind="member"><highlight class="preprocessor">#define<sp/>RAW_PACKET_BUFFER_SIZE<sp/>2500000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>raw_packet_buffer_remaining_size;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="1482" refid="avformat_8h_1a781dd9eb5ad7f95c4ad61f9ac24fce5a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/>offset_timebase;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a7bec8d592652431045d81a02fef74f28" kindref="member">AVFormatInternal</ref><sp/>*</highlight><highlight class="keyword">internal</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_repositioned;</highlight></codeline>
<codeline lineno="1501" refid="struct_a_v_format_context_1a8a8bec51da36db65ff864f88a85805d9" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*video_codec;</highlight></codeline>
<codeline lineno="1509" refid="struct_a_v_format_context_1a45afe89c377463a1b9446ac94b3c513b" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*audio_codec;</highlight></codeline>
<codeline lineno="1517" refid="struct_a_v_format_context_1a1891d82f7f853a16ebcba7cae939c4f0" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*subtitle_codec;</highlight></codeline>
<codeline lineno="1525" refid="struct_a_v_format_context_1ab73f76ceac8ed711c56decc2d64456f0" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>metadata_header_padding;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" kindref="member">av_format_control_message</ref><sp/>control_message_cb;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>output_ts_offset;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal">}<sp/><ref refid="avformat_8h_1a48a7a1e3f50d90c1c868b4169cfa0561" kindref="member">AVFormatContext</ref>;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552" refid="struct_a_v_format_context_1ab569e23a4966ca1f708fb498dd6b3d5f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1ad332941a01e30dd7d20a25f98dd69907" kindref="member">av_format_get_probe_score</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<sp/><ref refid="avformat_8h_1a02b77e5add312ccb0563396f4fb6dc79" kindref="member">av_format_get_video_codec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a4570da40de5e973587d8c75b2be0fe7d" kindref="member">av_format_set_video_codec</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<sp/><ref refid="avformat_8h_1a782fd30d7d2d72c1cfd9aca8efce885d" kindref="member">av_format_get_audio_codec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a3c4fdc15d6ae69fdc046421711d594a9" kindref="member">av_format_set_audio_codec</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<sp/><ref refid="avformat_8h_1a3b036bd91012956a06e802140d207767" kindref="member">av_format_get_subtitle_codec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1558" refid="struct_a_v_format_context_1a711dc3e6159c44dc31843f915b893a12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1af7d25817b7501a5a1abce5af7f796fb7" kindref="member">av_format_set_subtitle_codec</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1ae7e7da7c69b51e4339f4942ab76807d6" kindref="member">av_format_get_metadata_header_padding</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1ae1757ab39373897605bc564366a5b2af" kindref="member">av_format_set_metadata_header_padding</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a5fd65a8af1d5876c2280b822c5629f4a" kindref="member">av_format_get_opaque</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1a0ab75741a82f9f0f3340a4f460119702" kindref="member">av_format_set_opaque</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><ref refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" kindref="member">av_format_control_message</ref><sp/><ref refid="avformat_8h_1ad81dc5aa7a94419da69fc98dba91056e" kindref="member">av_format_get_control_message_cb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="avformat_8h_1abc5b1cdf24f51eecc24cf4b5a9c0d82c" kindref="member">av_format_set_control_message_cb</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="avformat_8h_1a80856b99bcf4373936fb4fba028b11ca" kindref="member">av_format_control_message</ref><sp/>callback);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1a7c2692ffa20d3e888e40e79eeda6d73b" kindref="member">AVDurationEstimationMethod</ref><sp/><ref refid="avformat_8h_1ac7070b68d7ca5fd577f9f835556ebeff" kindref="member">av_fmt_ctx_get_duration_estimation_method</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>pkt;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_v_packet_list" kindref="compound">AVPacketList</ref><sp/>*<ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">}<sp/><ref refid="avformat_8h_1a87a20e1d06255f832bdbfc8badc9648a" kindref="member">AVPacketList</ref>;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1gaf2d4e0fee66cef99dea2153933e6b907" kindref="member">avformat_version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__lavf__core_1ga5f48b0398d77d8eeb45d6c649e4e3404" kindref="member">avformat_configuration</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__lavf__core_1ga160fef784175409f945c70e8931accc8" kindref="member">avformat_license</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1ga917265caec45ef5a0646356ed1a507e3" kindref="member">av_register_all</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1ga896f319308627b5b66fd41a4b1d53ae6" kindref="member">av_register_input_format</ref>(<ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*<ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1gabf0629358bc40c7874932ef6f4dda6b8" kindref="member">av_register_output_format</ref>(<ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*<ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1ga84542023693d61e8564c5d457979c932" kindref="member">avformat_network_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1ga245f2875f80ce67ec3d1e0f54dacf2c4" kindref="member">avformat_network_deinit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/><sp/>*<ref refid="group__lavf__core_1ga5a9e27c9e2b04abcf6ed2e0f9b68da4f" kindref="member">av_iformat_next</ref>(<ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/><sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*<ref refid="group__lavf__core_1ga9c169031f490901218b1e6bcd9993967" kindref="member">av_oformat_next</ref>(<ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" kindref="member">avformat_alloc_context</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__core_1gac2990b13b68e831a408fce8e1d0d6445" kindref="member">avformat_free_context</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_class" kindref="compound">AVClass</ref><sp/>*<ref refid="group__lavf__core_1ga6030789ce395ef543306bbe933619749" kindref="member">avformat_get_class</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*<ref refid="group__lavf__core_1gadcb0fd3e507d9b58fe78f61f8ad39827" kindref="member">avformat_new_stream</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>*<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref><sp/>*<ref refid="group__lavf__core_1gab31f7c7c99dcadead38e8e83e0fdb828" kindref="member">av_new_program</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="preprocessor">#if<sp/>FF_API_ALLOC_OUTPUT_CONTEXT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*avformat_alloc_output_context(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*oformat,</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="avformat_8h_1a6ddf3d982feb45fa5081420ee911f5d5" kindref="member">avformat_alloc_output_context2</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>**ctx,<sp/><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*oformat,</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*<ref refid="group__lavf__decoding_1ga7d2f532c6653c2419b17956712fdf3da" kindref="member">av_find_input_format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*short_name);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*<ref refid="group__lavf__decoding_1gad8a1268228fff3aeae0aeaa99a767a24" kindref="member">av_probe_input_format</ref>(<ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref><sp/>*pd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_opened);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*<ref refid="group__lavf__decoding_1gae8b938f6e7c3741dd27a6c171e72f33d" kindref="member">av_probe_input_format2</ref>(<ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref><sp/>*pd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_opened,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*score_max);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*<ref refid="group__lavf__decoding_1ga7e4318244afd6c5fe55cec75d27258b2" kindref="member">av_probe_input_format3</ref>(<ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref><sp/>*pd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_opened,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*score_ret);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga69e44bd9ade0160a8cd6196aa37505ea" kindref="member">av_probe_input_buffer2</ref>(<ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref><sp/>*pb,<sp/><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>**fmt,</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*logctx,</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_probe_size);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga5ef11a57aa4ed1d55703b66d59afbd0b" kindref="member">av_probe_input_buffer</ref>(<ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref><sp/>*pb,<sp/><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>**fmt,</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*logctx,</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_probe_size);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>**ps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref><sp/>*fmt,<sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>**<ref refid="namespacewaflib_1_1_options_1a59b9c00933a268d11c1c960cd109e113" kindref="member">options</ref>);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga71091e146791c4d181635485447c2830" kindref="member">av_demuxer_open</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ic);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FF_API_FORMAT_PARAMETERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>av_find_stream_info(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ic);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1gad42172e27cddafb81096939783b157bb" kindref="member">avformat_find_stream_info</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ic,<sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>**<ref refid="namespacewaflib_1_1_options_1a59b9c00933a268d11c1c960cd109e113" kindref="member">options</ref>);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref><sp/>*<ref refid="group__lavf__decoding_1ga9edb9ac206ed05dc5baa9d168f31de48" kindref="member">av_find_program_from_stream</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ic,<sp/><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref><sp/>*<ref refid="record_8c_1a6c49eed6a71ecf58a51b1f64f4ec8e55" kindref="member">last</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1gaa6fa468c922ff5c60a6021dcac09aff9" kindref="member">av_find_best_stream</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ic,</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavu__misc_1ga9a84bba4713dfced21a1a56163be1f48" kindref="member">AVMediaType</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wanted_stream_nb,</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>related_stream,</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref><sp/>**decoder_ret,</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FF_API_READ_PACKET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>av_read_packet(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="struct_a_v_packet_list_1a2d7ef80c60c0c3a804248ab691b9c5a7" kindref="member">pkt</ref>);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" kindref="member">av_read_frame</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="struct_a_v_packet_list_1a2d7ef80c60c0c3a804248ab691b9c5a7" kindref="member">pkt</ref>);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1gaa23f7619d8d4ea0857065d9979c75ac8" kindref="member">av_seek_frame</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>timestamp,</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga3b40fc8d2fda6992ae6ea2567d71ba30" kindref="member">avformat_seek_file</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>min_ts,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>ts,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>max_ts,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga7494bb63a59e79e9fe88eb1682d4d7b3" kindref="member">av_read_play</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1ga27db687592d99f25ccf81a3b3ee8da9c" kindref="member">av_read_pause</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FF_API_CLOSE_INPUT_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>av_close_input_file(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>**s);</highlight></codeline>
<codeline lineno="2025"><highlight class="preprocessor">#if<sp/>FF_API_NEW_STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*av_new_stream(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FF_API_SET_PTS_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>av_set_pts_info(<ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_wrap_bits,</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_num,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_den);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVSEEK_FLAG_BACKWARD<sp/>1<sp/></highlight></codeline>
<codeline lineno="2050"><highlight class="preprocessor">#define<sp/>AVSEEK_FLAG_BYTE<sp/><sp/><sp/><sp/><sp/>2<sp/></highlight></codeline>
<codeline lineno="2051"><highlight class="preprocessor">#define<sp/>AVSEEK_FLAG_ANY<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/></highlight></codeline>
<codeline lineno="2052"><highlight class="preprocessor">#define<sp/>AVSEEK_FLAG_FRAME<sp/><sp/><sp/><sp/>8<sp/></highlight></codeline>
<codeline lineno="2053"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" kindref="member">avformat_write_header</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref><sp/>**<ref refid="namespacewaflib_1_1_options_1a59b9c00933a268d11c1c960cd109e113" kindref="member">options</ref>);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="struct_a_v_packet_list_1a2d7ef80c60c0c3a804248ab691b9c5a7" kindref="member">pkt</ref>);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="struct_a_v_packet_list_1a2d7ef80c60c0c3a804248ab691b9c5a7" kindref="member">pkt</ref>);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1gaab766dccdff1bf323a2fc604e723b441" kindref="member">av_write_uncoded_frame</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref><sp/>*frame);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1gafe9916c601bba6827d6f9271a61260e4" kindref="member">av_interleaved_write_uncoded_frame</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index,</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref><sp/>*frame);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1ga5f6bebdc8c234a5ad9740de89acb15e6" kindref="member">av_write_uncoded_frame_query</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_index);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1ga7f14007e7dc8f481f054b21614dfec13" kindref="member">av_write_trailer</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*<ref refid="group__lavf__encoding_1ga8795680bd7489e96eeb5aef5e615cacc" kindref="member">av_guess_format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*short_name,</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/><ref refid="group__lavf__encoding_1gae8a1efab53a348857f209ea51037da4c" kindref="member">av_guess_codec</ref>(<ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*fmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*short_name,</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mime_type,</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavu__misc_1ga9a84bba4713dfced21a1a56163be1f48" kindref="member">AVMediaType</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__encoding_1ga661ee0b2f3dbcaaef5d68f2f5d75e2d4" kindref="member">av_get_output_timestamp</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream,</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>*dts,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>*wall);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gab533a6d5d830ab90573dd035002c5bca" kindref="member">av_hex_dump</ref>(FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga56f93dbd118ff5fe833a2e39b685974c" kindref="member">av_hex_dump_log</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*avcl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga4b4bc622e34ccfa338a3815b99ac3073" kindref="member">av_pkt_dump2</ref>(FILE<sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="struct_a_v_packet_list_1a2d7ef80c60c0c3a804248ab691b9c5a7" kindref="member">pkt</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dump_payload,<sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*st);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga1dcb8379f3263594c476a979c4d25703" kindref="member">av_pkt_dump_log2</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*avcl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref><sp/>*<ref refid="struct_a_v_packet_list_1a2d7ef80c60c0c3a804248ab691b9c5a7" kindref="member">pkt</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dump_payload,</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*st);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/><ref refid="group__lavf__misc_1ga27b89fa8286af6efb5a69e8db4033b09" kindref="member">av_codec_get_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>AVCodecTag<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2specgen_1af2d57abb8725f566629ed73846808438" kindref="member">tags</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtag" kindref="compound">tag</ref>);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga126917b7ce8b4f05505098b72f4997de" kindref="member">av_codec_get_tag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>AVCodecTag<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2specgen_1af2d57abb8725f566629ed73846808438" kindref="member">tags</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gabe1a7b6824078229c69b75c71053c035" kindref="member">av_codec_get_tag2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>AVCodecTag<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2specgen_1af2d57abb8725f566629ed73846808438" kindref="member">tags</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structtag" kindref="compound">tag</ref>);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gaad9737492bb66aeeec37b7c7d8d90f2a" kindref="member">av_find_default_stream_index</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gac4cabc0d681c34b2e2c6a87a55877f0d" kindref="member">av_index_search_timestamp</ref>(<ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*st,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>timestamp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga3ed7441cb4af0bdd65a4cf51bf35088e" kindref="member">av_add_index_entry</ref>(<ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*st,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>pos,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>timestamp,</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga63a0579d6c2aa72470ac742bbbc1205d" kindref="member">av_url_split</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proto,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proto_size,</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*authorization,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>authorization_size,</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hostname_size,</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*port_ptr,</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>path_size,</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*url);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gae2645941f2dc779c307eb6314fd39f10" kindref="member">av_dump_format</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ic,</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*url,</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_output);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga90e027a5d9006148413a1387c506cd40" kindref="member">av_get_frame_filename</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size,</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gac20eb319c6c46f581b5d08f5c25e763e" kindref="member">av_filename_number_test</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gaa2a7353a6bb0c8726797abd56b176af0" kindref="member">av_sdp_create</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ac[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_files,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga8247f49e5642dd3bd20ce6ba5a7f6466" kindref="member">av_match_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extensions);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1gada6a477d2b1d70aafea93da43a310e8a" kindref="member">avformat_query_codec</ref>(<ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref><sp/>*ofmt,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref><sp/>codec_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>std_compliance);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag<sp/>*<ref refid="group__riff__fourcc_1ga036cfb1a22e899179f932df0cfc6c415" kindref="member">avformat_get_riff_video_tags</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2468"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag<sp/>*<ref refid="group__riff__fourcc_1ga8b9668cfd684804ebe7ab14b05aa3ba0" kindref="member">avformat_get_riff_audio_tags</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2472"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag<sp/>*<ref refid="group__riff__fourcc_1ga36261b12dba43e0cba5a753ecb3d0e54" kindref="member">avformat_get_mov_video_tags</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2476"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AVCodecTag<sp/>*<ref refid="group__riff__fourcc_1gac389e7f9cd19570bd599a61fd1884a4a" kindref="member">avformat_get_mov_audio_tags</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="group__lavf__misc_1ga0f62da0e809045bb21166013c404ce43" kindref="member">av_guess_sample_aspect_ratio</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*<ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*stream,<sp/><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref><sp/>*frame);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="group__lavf__misc_1ga12c049178414cc221dfafd4e7f836dea" kindref="member">av_guess_frame_rate</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*ctx,<sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*stream,<sp/><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref><sp/>*frame);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga7e45597834e9ef3098ddb74bc5e1550c" kindref="member">avformat_match_stream_specifier</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s,<sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref><sp/>*st,</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*spec);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__lavf__misc_1ga501ff1b3aa357c09da90c0effb356e45" kindref="member">avformat_queue_attached_pictures</ref>(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVFORMAT_AVFORMAT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h"/>
  </compounddef>
</doxygen>
