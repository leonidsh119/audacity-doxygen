<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classpyportmidi_1_1midi_1_1_output" kind="class" language="Python" prot="public">
    <compoundname>pyportmidi::midi::Output</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpyportmidi_1_1midi_1_1_output_1a9aa50202e4b4398ab8543249bd765918" prot="private" static="no" mutable="no">
        <type></type>
        <definition>pyportmidi.midi.Output::_aborted</definition>
        <argsstring></argsstring>
        <name>_aborted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="360" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" prot="private" static="no" mutable="no">
        <type></type>
        <definition>pyportmidi.midi.Output::_output</definition>
        <argsstring></argsstring>
        <name>_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="378" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="378" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classpyportmidi_1_1midi_1_1_output_1a2740ce8bc8861bedab98a7e56f9cdeb9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>pyportmidi.midi.Output::device_id</definition>
        <argsstring></argsstring>
        <name>device_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="381" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="381" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1acace8aa763ce6e90bc578052fc1a7c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.__init__</definition>
        <argsstring>(self, device_id, latency=0, buffer_size=4096)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classpyportmidi_1_1midi_1_1_output_1a2740ce8bc8861bedab98a7e56f9cdeb9" kindref="member">device_id</ref></type>
          <defname>device_id</defname>
        </param>
        <param>
          <type><ref refid="portmidi_2pm__test_2test_8c_1abe13b7efd223bb5d20e2f3710b43bcd2" kindref="member">latency</ref></type>
          <defname>latency</defname>
          <defval>0</defval>
        </param>
        <param>
          <type>buffer_size</type>
          <defname>buffer_size</defname>
          <defval>4096</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Output(device_id)
Output(device_id, latency = 0)
Output(device_id, buffer_size = 4096)
Output(device_id, latency, buffer_size)

The buffer_size specifies the number of output events to be 
buffered waiting for output.  (In some cases -- see below -- 
PortMidi does not buffer output at all and merely passes data 
to a lower-level API, in which case buffersize is ignored.)

latency is the delay in milliseconds applied to timestamps to determine
when the output should actually occur. (If latency is &lt; 0, 0 is 
assumed.)

If latency is zero, timestamps are ignored and all output is delivered
immediately. If latency is greater than zero, output is delayed until
the message timestamp plus the latency. (NOTE: time is measured 
relative to the time source indicated by time_proc. Timestamps are 
absolute, not relative delays or offsets.) In some cases, PortMidi 
can obtain better timing than your application by passing timestamps 
along to the device driver or hardware. Latency may also help you 
to synchronize midi data to audio data by matching midi latency to 
the audio buffer latency.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="333" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="333" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1ab239e15331b6dd26d5d131976b46dae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.close</definition>
        <argsstring>(self)</argsstring>
        <name>close</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>closes a midi stream, flushing any pending buffers.
Output.close(): return None

PortMidi attempts to close open streams when the application
exits -- this is particularly difficult under Windows.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="398" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="398" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1a1598727090193872eb21185b926030f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.abort</definition>
        <argsstring>(self)</argsstring>
        <name>abort</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>terminates outgoing messages immediately
Output.abort(): return None

The caller should immediately close the output port;
this call may result in transmission of a partial midi message.
There is no abort for Midi input because the user can simply
ignore messages in the buffer and close an input device at
any time.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="410" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="410" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1a81513a147adb67589f826852c033d251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.write</definition>
        <argsstring>(self, data)</argsstring>
        <name>write</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref></type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>writes a list of midi data to the Output
Output.write(data)

writes series of MIDI information in the form of a list:
     write([[[status &lt;,data1&gt;&lt;,data2&gt;&lt;,data3&gt;],timestamp],
    [[status &lt;,data1&gt;&lt;,data2&gt;&lt;,data3&gt;],timestamp],...])
&lt;data&gt; fields are optional
example: choose program change 1 at time 20000 and
send note 65 with velocity 100 500 ms later.
     write([[[0xc0,0,0],20000],[[0x90,60,100],20500]])
notes:
  1. timestamps will be ignored if latency = 0.
  2. To get a note to play immediately, send MIDI info with
     timestamp read from function Time.
  3. understanding optional data fields:
       write([[[0xc0,0,0],20000]]) is equivalent to
       write([[[0xc0],20000]])

Can send up to 1024 elements in your data list, otherwise an 
 IndexError exception is raised.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="430" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="430" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.write_short</definition>
        <argsstring>(self, status, data1=0, data2=0)</argsstring>
        <name>write_short</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="rfft2d_test_m_l_8m_1a1b5437a866e6f95107b07ba845bc1800" kindref="member">status</ref></type>
          <defname>status</defname>
        </param>
        <param>
          <type>data1</type>
          <defname>data1</defname>
          <defval>0</defval>
        </param>
        <param>
          <type>data2</type>
          <defname>data2</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>write_short(status &lt;, data1&gt;&lt;, data2&gt;)
Output.write_short(status)
Output.write_short(status, data1 = 0, data2 = 0)

output MIDI information of 3 bytes or less.
data fields are optional
status byte could be:
     0xc0 = program change
     0x90 = note on
     etc.
     data bytes are optional and assumed 0 if omitted
example: note 65 on with velocity 100
     write_short(0x90,65,100)
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="458" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="458" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1a91215eb76a95600953077b9255d45d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.write_sys_ex</definition>
        <argsstring>(self, when, msg)</argsstring>
        <name>write_sys_ex</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>when</type>
          <defname>when</defname>
        </param>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>writes a timestamped system-exclusive midi message.
Output.write_sys_ex(when, msg)

msg - can be a *list* or a *string*
when - a timestamp in miliseconds
example:
  (assuming o is an onput MIDI stream)
    o.write_sys_ex(0,&apos;\\xF0\\x7D\\x10\\x11\\x12\\x13\\xF7&apos;)
  is equivalent to
    o.write_sys_ex(pyportmidi.time(),
           [0xF0,0x7D,0x10,0x11,0x12,0x13,0xF7])
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="478" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="478" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1af264528f8d1135a711c6d3e3bdf92dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.note_on</definition>
        <argsstring>(self, note, velocity=None, channel=0)</argsstring>
        <name>note_on</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="handlers_8c_1a82c195c0687005edfeb733c7b5887c33" kindref="member">note</ref></type>
          <defname>note</defname>
        </param>
        <param>
          <type>velocity</type>
          <defname>velocity</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>channel</type>
          <defname>channel</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>turns a midi note on.  Note must be off.
Output.note_on(note, velocity=None, channel = 0)

Turn a note on in the output stream.  The note must already
be off for this to work correctly.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="496" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="496" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1a1d552276c413494bc8a94dc2c3f588c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.note_off</definition>
        <argsstring>(self, note, velocity=None, channel=0)</argsstring>
        <name>note_off</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="handlers_8c_1a82c195c0687005edfeb733c7b5887c33" kindref="member">note</ref></type>
          <defname>note</defname>
        </param>
        <param>
          <type>velocity</type>
          <defname>velocity</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>channel</type>
          <defname>channel</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>turns a midi note off.  Note must be on.
Output.note_off(note, velocity=None, channel = 0)

Turn a note off in the output stream.  The note must already
be on for this to work correctly.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="511" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="511" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1ad2a82e8023a1dd5a18776d15cc4a9b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output.set_instrument</definition>
        <argsstring>(self, instrument_id, channel=0)</argsstring>
        <name>set_instrument</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>instrument_id</type>
          <defname>instrument_id</defname>
        </param>
        <param>
          <type>channel</type>
          <defname>channel</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>select an instrument, with a value between 0 and 127
Output.set_instrument(instrument_id, channel = 0)</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="527" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="527" bodyend="541"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classpyportmidi_1_1midi_1_1_output_1ac5b42767502154cafb53942bd21c494e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pyportmidi.midi.Output._check_open</definition>
        <argsstring>(self)</argsstring>
        <name>_check_open</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="390" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="390" bodyend="397"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Output is used to send midi to an output device
Output(device_id)
Output(device_id, latency = 0)
Output(device_id, buffer_size = 4096)
Output(device_id, latency, buffer_size)

The buffer_size specifies the number of output events to be 
buffered waiting for output.  (In some cases -- see below -- 
PortMidi does not buffer output at all and merely passes data 
to a lower-level API, in which case buffersize is ignored.)

latency is the delay in milliseconds applied to timestamps to determine
when the output should actually occur. (If latency is &lt; 0, 0 is 
assumed.)

If latency is zero, timestamps are ignored and all output is delivered
immediately. If latency is greater than zero, output is delayed until
the message timestamp plus the latency. (NOTE: time is measured 
relative to the time source indicated by time_proc. Timestamps are 
absolute, not relative delays or offsets.) In some cases, PortMidi 
can obtain better timing than your application by passing timestamps 
along to the device driver or hardware. Latency may also help you 
to synchronize midi data to audio data by matching midi latency to 
the audio buffer latency.</verbatim> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="8138">
        <label>object</label>
      </node>
      <node id="8137">
        <label>pyportmidi.midi.Output</label>
        <link refid="classpyportmidi_1_1midi_1_1_output"/>
        <childnode refid="8138" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8140">
        <label>object</label>
      </node>
      <node id="8139">
        <label>pyportmidi.midi.Output</label>
        <link refid="classpyportmidi_1_1midi_1_1_output"/>
        <childnode refid="8140" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" line="305" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_python/pyportmidi/midi.py" bodystart="305" bodyend="542"/>
    <listofallmembers>
      <member refid="classpyportmidi_1_1midi_1_1_output_1acace8aa763ce6e90bc578052fc1a7c78" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>__init__</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a9aa50202e4b4398ab8543249bd765918" prot="private" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>_aborted</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1ac5b42767502154cafb53942bd21c494e" prot="private" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>_check_open</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a71d6ace65ea68d4020a2509e8bc1b4bd" prot="private" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>_output</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a1598727090193872eb21185b926030f2" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>abort</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1ab239e15331b6dd26d5d131976b46dae7" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>close</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a2740ce8bc8861bedab98a7e56f9cdeb9" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>device_id</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a1d552276c413494bc8a94dc2c3f588c4" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>note_off</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1af264528f8d1135a711c6d3e3bdf92dbe" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>note_on</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1ad2a82e8023a1dd5a18776d15cc4a9b76" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>set_instrument</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a81513a147adb67589f826852c033d251" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>write</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a48ad7413755bc9de8f79864167996379" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>write_short</name></member>
      <member refid="classpyportmidi_1_1midi_1_1_output_1a91215eb76a95600953077b9255d45d92" prot="public" virt="non-virtual"><scope>pyportmidi::midi::Output</scope><name>write_sys_ex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
