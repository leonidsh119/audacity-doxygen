<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="samplefmt_8h" kind="file" language="C++">
    <compoundname>samplefmt.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="avutil_8h" local="yes">avutil.h</includes>
    <includes refid="attributes_8h" local="yes">attributes.h</includes>
    <includedby refid="avcodec_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavcodec/avcodec.h</includedby>
    <includedby refid="audio__fifo_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/audio_fifo.h</includedby>
    <includedby refid="ffmpeg_2libavutil_2frame_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h</includedby>
    <includedby refid="opt_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h</includedby>
    <incdepgraph>
      <node id="4563">
        <label>mathematics.h</label>
        <link refid="mathematics_8h"/>
        <childnode refid="4546" relation="include">
        </childnode>
        <childnode refid="4552" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
        <childnode refid="4564" relation="include">
        </childnode>
        <childnode refid="4565" relation="include">
        </childnode>
      </node>
      <node id="4564">
        <label>rational.h</label>
        <link refid="rational_8h"/>
        <childnode refid="4546" relation="include">
        </childnode>
        <childnode refid="4551" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
      </node>
      <node id="4567">
        <label>stdarg.h</label>
      </node>
      <node id="4556">
        <label>attributes.h</label>
        <link refid="attributes_8h"/>
      </node>
      <node id="4547">
        <label>avutil.h</label>
        <link refid="avutil_8h"/>
        <childnode refid="4548" relation="include">
        </childnode>
        <childnode refid="4561" relation="include">
        </childnode>
        <childnode refid="4557" relation="include">
        </childnode>
        <childnode refid="4558" relation="include">
        </childnode>
        <childnode refid="4563" relation="include">
        </childnode>
        <childnode refid="4564" relation="include">
        </childnode>
        <childnode refid="4566" relation="include">
        </childnode>
        <childnode refid="4568" relation="include">
        </childnode>
      </node>
      <node id="4546">
        <label>stdint.h</label>
      </node>
      <node id="4559">
        <label>libavutil/avconfig.h</label>
        <link refid="avconfig_8h"/>
      </node>
      <node id="4554">
        <label>stdlib.h</label>
      </node>
      <node id="4549">
        <label>errno.h</label>
      </node>
      <node id="4557">
        <label>version.h</label>
        <link refid="ffmpeg_2libavutil_2version_8h"/>
        <childnode refid="4558" relation="include">
        </childnode>
      </node>
      <node id="4562">
        <label>stddef.h</label>
      </node>
      <node id="4551">
        <label>limits.h</label>
      </node>
      <node id="4561">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="4549" relation="include">
        </childnode>
        <childnode refid="4562" relation="include">
        </childnode>
      </node>
      <node id="4566">
        <label>log.h</label>
        <link refid="ffmpeg_2libavutil_2log_8h"/>
        <childnode refid="4567" relation="include">
        </childnode>
        <childnode refid="4547" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
      </node>
      <node id="4555">
        <label>string.h</label>
      </node>
      <node id="4560">
        <label>mem.h</label>
        <link refid="ffmpeg_2libavutil_2mem_8h"/>
        <childnode refid="4551" relation="include">
        </childnode>
        <childnode refid="4546" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
        <childnode refid="4561" relation="include">
        </childnode>
        <childnode refid="4547" relation="include">
        </childnode>
      </node>
      <node id="4565">
        <label>intfloat.h</label>
        <link refid="intfloat_8h"/>
        <childnode refid="4546" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
      </node>
      <node id="4569">
        <label>old_pix_fmts.h</label>
        <link refid="old__pix__fmts_8h"/>
      </node>
      <node id="4552">
        <label>math.h</label>
      </node>
      <node id="4545">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h</label>
        <link refid="samplefmt.h"/>
        <childnode refid="4546" relation="include">
        </childnode>
        <childnode refid="4547" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
      </node>
      <node id="4558">
        <label>macros.h</label>
        <link refid="ffmpeg_2libavutil_2macros_8h"/>
      </node>
      <node id="4548">
        <label>common.h</label>
        <link refid="ffmpeg_2libavutil_2common_8h"/>
        <childnode refid="4549" relation="include">
        </childnode>
        <childnode refid="4550" relation="include">
        </childnode>
        <childnode refid="4551" relation="include">
        </childnode>
        <childnode refid="4552" relation="include">
        </childnode>
        <childnode refid="4546" relation="include">
        </childnode>
        <childnode refid="4553" relation="include">
        </childnode>
        <childnode refid="4554" relation="include">
        </childnode>
        <childnode refid="4555" relation="include">
        </childnode>
        <childnode refid="4556" relation="include">
        </childnode>
        <childnode refid="4557" relation="include">
        </childnode>
        <childnode refid="4559" relation="include">
        </childnode>
        <childnode refid="4548" relation="include">
        </childnode>
        <childnode refid="4560" relation="include">
        </childnode>
      </node>
      <node id="4553">
        <label>stdio.h</label>
      </node>
      <node id="4568">
        <label>pixfmt.h</label>
        <link refid="pixfmt_8h"/>
        <childnode refid="4559" relation="include">
        </childnode>
        <childnode refid="4557" relation="include">
        </childnode>
        <childnode refid="4569" relation="include">
        </childnode>
      </node>
      <node id="4550">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4577">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/downmix_info.h</label>
        <link refid="downmix__info_8h"/>
      </node>
      <node id="4575">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/audio_fifo.h</label>
        <link refid="audio__fifo_8h"/>
      </node>
      <node id="4576">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/frame.h</label>
        <link refid="ffmpeg_2libavutil_2frame_8h"/>
        <childnode refid="4571" relation="include">
        </childnode>
        <childnode refid="4577" relation="include">
        </childnode>
        <childnode refid="4578" relation="include">
        </childnode>
      </node>
      <node id="4573">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavcodec/xvmc.h</label>
        <link refid="xvmc_8h"/>
      </node>
      <node id="4572">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavcodec/vdpau.h</label>
        <link refid="vdpau_8h"/>
      </node>
      <node id="4570">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h</label>
        <link refid="samplefmt.h"/>
        <childnode refid="4571" relation="include">
        </childnode>
        <childnode refid="4575" relation="include">
        </childnode>
        <childnode refid="4576" relation="include">
        </childnode>
        <childnode refid="4579" relation="include">
        </childnode>
      </node>
      <node id="4579">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/opt.h</label>
        <link refid="opt_8h"/>
      </node>
      <node id="4574">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h</label>
        <link refid="avformat_8h"/>
      </node>
      <node id="4578">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/stereo3d.h</label>
        <link refid="stereo3d_8h"/>
      </node>
      <node id="4571">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavcodec/avcodec.h</label>
        <link refid="avcodec_8h"/>
        <childnode refid="4572" relation="include">
        </childnode>
        <childnode refid="4573" relation="include">
        </childnode>
        <childnode refid="4574" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" prot="public" static="no">
        <name>AVSampleFormat</name>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ac5d4bb5b0fb0dc7316fb3c7a73029912" prot="public">
          <name>AV_SAMPLE_FMT_NONE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5adf0f66f21492f8fd5db6debb8b3f932a" prot="public">
          <name>AV_SAMPLE_FMT_U8</name>
          <briefdescription>
<para>unsigned 8 bits </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5aea6132df57aebc3f76e10665395c46af" prot="public">
          <name>AV_SAMPLE_FMT_S16</name>
          <briefdescription>
<para>signed 16 bits </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ab7ae6bb6718c07cd316778783a57a63b" prot="public">
          <name>AV_SAMPLE_FMT_S32</name>
          <briefdescription>
<para>signed 32 bits </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a5251d62cc3c7f18e56bc8e0c48a27903" prot="public">
          <name>AV_SAMPLE_FMT_FLT</name>
          <briefdescription>
<para>float </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ae35a2a6a7593723d9fe4bcefb2876606" prot="public">
          <name>AV_SAMPLE_FMT_DBL</name>
          <briefdescription>
<para>double </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a6ab0109a23af37e29ea3a7282c00d311" prot="public">
          <name>AV_SAMPLE_FMT_U8P</name>
          <briefdescription>
<para>unsigned 8 bits, planar </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a35eaaad9da207aa4e63fa02fd67fae68" prot="public">
          <name>AV_SAMPLE_FMT_S16P</name>
          <briefdescription>
<para>signed 16 bits, planar </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5aa215d25dfbf927aa362c837fed4b15a8" prot="public">
          <name>AV_SAMPLE_FMT_S32P</name>
          <briefdescription>
<para>signed 32 bits, planar </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a2d21c520e4ab21100b6440ec2d81ba1b" prot="public">
          <name>AV_SAMPLE_FMT_FLTP</name>
          <briefdescription>
<para>float, planar </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5adf1348382a7c7473a425e05530989ae5" prot="public">
          <name>AV_SAMPLE_FMT_DBLP</name>
          <briefdescription>
<para>double, planar </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a8c2ef4962274b33e2828fb9629c104fd" prot="public">
          <name>AV_SAMPLE_FMT_NB</name>
          <briefdescription>
<para>Number of sample formats. DO NOT USE if linking dynamically. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Audio <ref refid="struct_sample" kindref="compound">Sample</ref> Formats</para><para><simplesect kind="par"><title></title><para>The data described by the sample format is always in native-endian order. <ref refid="struct_sample" kindref="compound">Sample</ref> values can be expressed by native C types, hence the lack of a signed 24-bit sample format even though it is a common raw audio data format.</para></simplesect>
<simplesect kind="par"><title></title><para>The floating-point formats are based on full volume being in the range [-1.0, 1.0]. Any values outside this range are beyond full volume level.</para></simplesect>
<simplesect kind="par"><title></title><para>The data layout as used in <ref refid="samplefmt_8h_1a673254a62fa75dab3211caf17c73c6eb" kindref="member">av_samples_fill_arrays()</ref> and elsewhere in FFmpeg (such as <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> in libavcodec) is as follows:</para></simplesect>
For planar sample formats, each audio channel is in a separate data plane, and linesize is the buffer size, in bytes, for a single plane. All data planes must be the same size. For packed sample formats, only the first data plane is used, and samples for each channel are interleaved. In this case, linesize is the buffer size, in bytes, for the 1 plane. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="49" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" bodystart="49" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="samplefmt_8h_1a31b9d149b2de9821a65f4f5612970838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* av_get_sample_fmt_name</definition>
        <argsstring>(enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_get_sample_fmt_name</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the name of sample_fmt, or NULL if sample_fmt is not recognized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a655c989b749667468e5e839e26fe63db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
        <definition>enum AVSampleFormat av_get_sample_fmt</definition>
        <argsstring>(const char *name)</argsstring>
        <name>av_get_sample_fmt</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a sample format corresponding to name, or AV_SAMPLE_FMT_NONE on error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a8e66c3f813ea02afcaa56a8a964c749a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
        <definition>enum AVSampleFormat av_get_alt_sample_fmt</definition>
        <argsstring>(enum AVSampleFormat sample_fmt, int planar)</argsstring>
        <name>av_get_alt_sample_fmt</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>planar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the planar&lt;-&gt;packed alternative form of the given sample format, or AV_SAMPLE_FMT_NONE on error. If the passed sample_fmt is already in the requested planar/packed format, the format returned is the same as the input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a7817ec0eff4dc6fc0962f31e6d138bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
        <definition>enum AVSampleFormat av_get_packed_sample_fmt</definition>
        <argsstring>(enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_get_packed_sample_fmt</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the packed alternative form of the given sample format.</para><para>If the passed sample_fmt is already in packed format, the format returned is the same as the input.</para><para><simplesect kind="return"><para>the packed alternative form of the given sample format or AV_SAMPLE_FMT_NONE on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a82caf838259d95cc6c4fd87633bb0e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
        <definition>enum AVSampleFormat av_get_planar_sample_fmt</definition>
        <argsstring>(enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_get_planar_sample_fmt</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the planar alternative form of the given sample format.</para><para>If the passed sample_fmt is already in planar format, the format returned is the same as the input.</para><para><simplesect kind="return"><para>the planar alternative form of the given sample format or AV_SAMPLE_FMT_NONE on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1abdc8c2172c33fe9d36cbedaf3c5f83bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_get_sample_fmt_string</definition>
        <argsstring>(char *buf, int buf_size, enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_get_sample_fmt_string</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a string corresponding to the sample format with sample_fmt, or a header if sample_fmt is negative.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer where to write the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of buf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of the sample format to print the corresponding info string, or a negative value to print the corresponding header. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pointer to the filled buffer or NULL if sample_fmt is unknown or in case of other errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a28980a44eb31c96e72dacac777265e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>attribute_deprecated int av_get_bits_per_sample_fmt</definition>
        <argsstring>(enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_get_bits_per_sample_fmt</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000030"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="samplefmt_8h_1a0c3c218e1dd570ad4917c69a35a6c77d" kindref="member">av_get_bytes_per_sample()</ref> instead. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a0c3c218e1dd570ad4917c69a35a6c77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_get_bytes_per_sample</definition>
        <argsstring>(enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_get_bytes_per_sample</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return number of bytes per sample.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes per sample or zero if unknown for the given sample format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a06ba8a64dc4382c422789a5d0b6bf592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_sample_fmt_is_planar</definition>
        <argsstring>(enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_sample_fmt_is_planar</name>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the sample format is planar.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample format to inspect </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the sample format is planar, 0 if it is interleaved </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1aa7368bc4e3a366b688e81938ed55eb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_samples_get_buffer_size</definition>
        <argsstring>(int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)</argsstring>
        <name>av_samples_get_buffer_size</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>linesize</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_channels</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_samples</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the required buffer size for the given audio parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">linesize</parametername>
</parameternamelist>
<parameterdescription>
<para>calculated linesize, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of samples in a single channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size alignment (0 = default, 1 = no alignment) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>required buffer size, or negative error code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a673254a62fa75dab3211caf17c73c6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_samples_fill_arrays</definition>
        <argsstring>(uint8_t **audio_data, int *linesize, const uint8_t *buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)</argsstring>
        <name>av_samples_fill_arrays</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> **</type>
          <declname>audio_data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>linesize</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_channels</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_samples</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill plane data pointers and linesize for samples with sample format sample_fmt.</para><para>The audio_data array is filled with the pointers to the samples data planes: for planar, set the start point of each channel&apos;s data within the buffer, for packed, set the start point of the entire buffer only.</para><para>The value pointed to by linesize is set to the aligned size of each channel&apos;s data buffer for planar layout, or to the aligned size of the buffer for all channels for packed layout.</para><para>The buffer in buf must be big enough to contain all the samples (use <ref refid="samplefmt_8h_1aa7368bc4e3a366b688e81938ed55eb06" kindref="member">av_samples_get_buffer_size()</ref> to compute its minimum size), otherwise the audio_data pointers will point to invalid data.</para><para><simplesect kind="see"><para>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref> The documentation <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref> describes <ref refid="nasm_8h_1aaf57ffcfef0bee04f46c6ada2a905a8c" kindref="member">the</ref> <ref refid="sndfile__save_8m_1a511ae0b1c13f95e5f08f1a0dd3da3d93" kindref="member">data</ref> layout.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">audio_data</parametername>
</parameternamelist>
<parameterdescription>
<para>array to be filled with the pointer for each channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">linesize</parametername>
</parameternamelist>
<parameterdescription>
<para>calculated linesize, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to a buffer containing the samples </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of samples in a single channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size alignment (0 = default, 1 = no alignment) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 on success or a negative error code on failure </para></simplesect>
<xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>return minimum size in bytes required for the buffer in case of success at the next bump </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a4db4c77f928d32c7d8854732f50b8c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_samples_alloc</definition>
        <argsstring>(uint8_t **audio_data, int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)</argsstring>
        <name>av_samples_alloc</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> **</type>
          <declname>audio_data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>linesize</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_channels</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_samples</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a samples buffer for nb_samples samples, and fill data pointers and linesize accordingly. The allocated samples buffer can be freed by using av_freep(&amp;audio_data[0]) Allocated data will be initialized to silence.</para><para><simplesect kind="see"><para>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref> The documentation <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref> describes <ref refid="nasm_8h_1aaf57ffcfef0bee04f46c6ada2a905a8c" kindref="member">the</ref> <ref refid="sndfile__save_8m_1a511ae0b1c13f95e5f08f1a0dd3da3d93" kindref="member">data</ref> layout.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">audio_data</parametername>
</parameternamelist>
<parameterdescription>
<para>array to be filled with the pointer for each channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">linesize</parametername>
</parameternamelist>
<parameterdescription>
<para>aligned size for audio <ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer(s)</ref>, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>number of audio channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples per channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size alignment (0 = default, 1 = no alignment) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 on success or a negative error code on failure </para></simplesect>
<xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>return the size of the allocated buffer in case of success at the next bump </para></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="samplefmt_8h_1a673254a62fa75dab3211caf17c73c6eb" kindref="member">av_samples_fill_arrays()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="samplefmt_8h_1ae8b9f22f2f659d023f111390d9545273" kindref="member">av_samples_alloc_array_and_samples()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1ae8b9f22f2f659d023f111390d9545273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_samples_alloc_array_and_samples</definition>
        <argsstring>(uint8_t ***audio_data, int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)</argsstring>
        <name>av_samples_alloc_array_and_samples</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> ***</type>
          <declname>audio_data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>linesize</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_channels</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_samples</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a data pointers array, samples buffer for nb_samples samples, and fill data pointers and linesize accordingly.</para><para>This is the same as <ref refid="samplefmt_8h_1a4db4c77f928d32c7d8854732f50b8c04" kindref="member">av_samples_alloc()</ref>, but also allocates the data pointers array.</para><para><simplesect kind="see"><para><ref refid="samplefmt_8h_1a4db4c77f928d32c7d8854732f50b8c04" kindref="member">av_samples_alloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a5fdc6b1118f3ba7ad9ac9f67308b9597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_samples_copy</definition>
        <argsstring>(uint8_t **dst, uint8_t *const *src, int dst_offset, int src_offset, int nb_samples, int nb_channels, enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_samples_copy</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> **</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_samples</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_channels</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy samples from src to dst.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination array of pointers to data planes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source array of pointers to data planes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in samples at which the data will be written to dst </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in samples at which the data will be read from src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>number of audio channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>audio sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="samplefmt_8h_1a6f287e5c4f426a8be8a8b5b8f708a05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_samples_set_silence</definition>
        <argsstring>(uint8_t **audio_data, int offset, int nb_samples, int nb_channels, enum AVSampleFormat sample_fmt)</argsstring>
        <name>av_samples_set_silence</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> **</type>
          <declname>audio_data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_samples</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb_channels</declname>
        </param>
        <param>
          <type>enum <ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref></type>
          <declname>sample_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill an audio buffer with silence.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>audio_data</parametername>
</parameternamelist>
<parameterdescription>
<para>array of pointers to data planes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in samples at which to start filling </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to fill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>number of audio channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>audio sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h" line="253" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>FFmpeg.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>FFmpeg;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AVUTIL_SAMPLEFMT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVUTIL_SAMPLEFMT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="avutil_8h" kindref="compound">avutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="attributes_8h" kindref="compound">attributes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>{</highlight></codeline>
<codeline lineno="50" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ac5d4bb5b0fb0dc7316fb3c7a73029912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ac5d4bb5b0fb0dc7316fb3c7a73029912" kindref="member">AV_SAMPLE_FMT_NONE</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="51" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5adf0f66f21492f8fd5db6debb8b3f932a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5adf0f66f21492f8fd5db6debb8b3f932a" kindref="member">AV_SAMPLE_FMT_U8</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5aea6132df57aebc3f76e10665395c46af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5aea6132df57aebc3f76e10665395c46af" kindref="member">AV_SAMPLE_FMT_S16</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ab7ae6bb6718c07cd316778783a57a63b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ab7ae6bb6718c07cd316778783a57a63b" kindref="member">AV_SAMPLE_FMT_S32</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a5251d62cc3c7f18e56bc8e0c48a27903" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a5251d62cc3c7f18e56bc8e0c48a27903" kindref="member">AV_SAMPLE_FMT_FLT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ae35a2a6a7593723d9fe4bcefb2876606" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5ae35a2a6a7593723d9fe4bcefb2876606" kindref="member">AV_SAMPLE_FMT_DBL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a6ab0109a23af37e29ea3a7282c00d311" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a6ab0109a23af37e29ea3a7282c00d311" kindref="member">AV_SAMPLE_FMT_U8P</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a35eaaad9da207aa4e63fa02fd67fae68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a35eaaad9da207aa4e63fa02fd67fae68" kindref="member">AV_SAMPLE_FMT_S16P</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5aa215d25dfbf927aa362c837fed4b15a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5aa215d25dfbf927aa362c837fed4b15a8" kindref="member">AV_SAMPLE_FMT_S32P</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a2d21c520e4ab21100b6440ec2d81ba1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a2d21c520e4ab21100b6440ec2d81ba1b" kindref="member">AV_SAMPLE_FMT_FLTP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5adf1348382a7c7473a425e05530989ae5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5adf1348382a7c7473a425e05530989ae5" kindref="member">AV_SAMPLE_FMT_DBLP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a8c2ef4962274b33e2828fb9629c104fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5a8c2ef4962274b33e2828fb9629c104fd" kindref="member">AV_SAMPLE_FMT_NB</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="samplefmt_8h_1a31b9d149b2de9821a65f4f5612970838" kindref="member">av_get_sample_fmt_name</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/><ref refid="samplefmt_8h_1a655c989b749667468e5e839e26fe63db" kindref="member">av_get_sample_fmt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/><ref refid="samplefmt_8h_1a8e66c3f813ea02afcaa56a8a964c749a" kindref="member">av_get_alt_sample_fmt</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planar);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/><ref refid="samplefmt_8h_1a7817ec0eff4dc6fc0962f31e6d138bca" kindref="member">av_get_packed_sample_fmt</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/><ref refid="samplefmt_8h_1a82caf838259d95cc6c4fd87633bb0e19" kindref="member">av_get_planar_sample_fmt</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="samplefmt_8h_1abdc8c2172c33fe9d36cbedaf3c5f83bb" kindref="member">av_get_sample_fmt_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FF_API_GET_BITS_PER_SAMPLE_FMT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a28980a44eb31c96e72dacac777265e22" kindref="member">av_get_bits_per_sample_fmt</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a0c3c218e1dd570ad4917c69a35a6c77d" kindref="member">av_get_bytes_per_sample</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a06ba8a64dc4382c422789a5d0b6bf592" kindref="member">av_sample_fmt_is_planar</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1aa7368bc4e3a366b688e81938ed55eb06" kindref="member">av_samples_get_buffer_size</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="seqread_8c_1ac76f9a4564597bb6cf09bb24f60d4e7d" kindref="member">linesize</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_channels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_samples,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a673254a62fa75dab3211caf17c73c6eb" kindref="member">av_samples_fill_arrays</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>**audio_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="seqread_8c_1ac76f9a4564597bb6cf09bb24f60d4e7d" kindref="member">linesize</ref>,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_channels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_samples,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a4db4c77f928d32c7d8854732f50b8c04" kindref="member">av_samples_alloc</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>**audio_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="seqread_8c_1ac76f9a4564597bb6cf09bb24f60d4e7d" kindref="member">linesize</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_channels,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_samples,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1ae8b9f22f2f659d023f111390d9545273" kindref="member">av_samples_alloc_array_and_samples</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>***audio_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="seqread_8c_1ac76f9a4564597bb6cf09bb24f60d4e7d" kindref="member">linesize</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_channels,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_samples,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a5fdc6b1118f3ba7ad9ac9f67308b9597" kindref="member">av_samples_copy</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>**dst,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dst_offset,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_samples,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_channels,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1a6f287e5c4f426a8be8a8b5b8f708a05c" kindref="member">av_samples_set_silence</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>**audio_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_samples,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_channels,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>sample_fmt);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVUTIL_SAMPLEFMT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/samplefmt.h"/>
  </compounddef>
</doxygen>
