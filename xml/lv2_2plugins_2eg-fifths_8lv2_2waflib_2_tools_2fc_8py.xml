<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lv2_2plugins_2eg-fifths_8lv2_2waflib_2_tools_2fc_8py" kind="file" language="Python">
    <compoundname>fc.py</compoundname>
    <innerclass refid="classwaflib_1_1_tools_1_1fc_1_1fc" prot="public">waflib::Tools::fc::fc</innerclass>
    <innerclass refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram" prot="public">waflib::Tools::fc::fcprogram</innerclass>
    <innerclass refid="classwaflib_1_1_tools_1_1fc_1_1fcshlib" prot="public">waflib::Tools::fc::fcshlib</innerclass>
    <innerclass refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test" prot="public">waflib::Tools::fc::fcprogram_test</innerclass>
    <innerclass refid="classwaflib_1_1_tools_1_1fc_1_1fcstlib" prot="public">waflib::Tools::fc::fcstlib</innerclass>
    <innernamespace refid="namespacewaflib_1_1_tools_1_1fc">waflib::Tools::fc</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!<sp/>/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>encoding:<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WARNING!<sp/>Do<sp/>not<sp/>edit!<sp/>http://waf.googlecode.com/git/docs/wafbook/single.html#_obtaining_the_waf_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>waflib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Utils,Task,TaskGen,Logs</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_tools" kindref="compound">waflib.Tools</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ccroot,fc_config,fc_scan</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_task_gen" kindref="compound">waflib.TaskGen</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>feature,before_method,after_method,extension</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_configure" kindref="compound">waflib.Configure</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>conf</highlight></codeline>
<codeline lineno="10"><highlight class="normal">ccroot.USELIB_VARS[</highlight><highlight class="stringliteral">&apos;fc&apos;</highlight><highlight class="normal">]=set([</highlight><highlight class="stringliteral">&apos;FCFLAGS&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;DEFINES&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;INCLUDES&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="11"><highlight class="normal">ccroot.USELIB_VARS[</highlight><highlight class="stringliteral">&apos;fcprogram_test&apos;</highlight><highlight class="normal">]=ccroot.USELIB_VARS[</highlight><highlight class="stringliteral">&apos;fcprogram&apos;</highlight><highlight class="normal">]=set([</highlight><highlight class="stringliteral">&apos;LIB&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;STLIB&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LIBPATH&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;STLIBPATH&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LINKFLAGS&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;RPATH&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LINKDEPS&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="12"><highlight class="normal">ccroot.USELIB_VARS[</highlight><highlight class="stringliteral">&apos;fcshlib&apos;</highlight><highlight class="normal">]=set([</highlight><highlight class="stringliteral">&apos;LIB&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;STLIB&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LIBPATH&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;STLIBPATH&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LINKFLAGS&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;RPATH&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LINKDEPS&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="13"><highlight class="normal">ccroot.USELIB_VARS[</highlight><highlight class="stringliteral">&apos;fcstlib&apos;</highlight><highlight class="normal">]=set([</highlight><highlight class="stringliteral">&apos;ARFLAGS&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;LINKDEPS&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="14"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;fcprogram&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;fcshlib&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;fcstlib&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;fcprogram_test&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1fc_1a27d355b521fb9e2bf9fa51b4c5b86a75" kindref="member">dummy</ref>(self):</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1ab4b159e661d17937cf1be8254dedb12f" kindref="member">extension</ref>(</highlight><highlight class="stringliteral">&apos;.f&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;.f90&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;.F&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;.F90&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;.for&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;.FOR&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1fc_1a32c4c535596617f7d93fadd0607f18eb" kindref="member">fc_hook</ref>(self,node):</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.create_compiled_task(</highlight><highlight class="stringliteral">&apos;fc&apos;</highlight><highlight class="normal">,node)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1fc_1ae8fd3a39f47bdf4cb2e5d16cbdacd4e0" kindref="member">modfile</ref>(conf,name):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{</highlight><highlight class="stringliteral">&apos;lower&apos;</highlight><highlight class="normal">:name.lower()+</highlight><highlight class="stringliteral">&apos;.mod&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;lower.MOD&apos;</highlight><highlight class="normal">:name.upper()+</highlight><highlight class="stringliteral">&apos;.MOD&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;UPPER.mod&apos;</highlight><highlight class="normal">:name.upper()+</highlight><highlight class="stringliteral">&apos;.mod&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;UPPER&apos;</highlight><highlight class="normal">:name.upper()+</highlight><highlight class="stringliteral">&apos;.MOD&apos;</highlight><highlight class="normal">}[conf.env.FC_MOD_CAPITALIZATION<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="stringliteral">&apos;lower&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1fc_1a042f42940a7e5040b3d6e9c3dd3df7f4" kindref="member">get_fortran_tasks</ref>(tsk):</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>bld=tsk.generator.bld</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>tasks=bld.get_tasks_group(bld.get_group_idx(tsk.generator))</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">[x<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tasks<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(x,fc)</highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>getattr(x,</highlight><highlight class="stringliteral">&apos;nomod&apos;</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>getattr(x,</highlight><highlight class="stringliteral">&apos;mod_fortran_done&apos;</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">fc(Task.Task):</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>color=</highlight><highlight class="stringliteral">&apos;GREEN&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>run_str=</highlight><highlight class="stringliteral">&apos;${FC}<sp/>${FCFLAGS}<sp/>${FCINCPATH_ST:INCPATHS}<sp/>${FCDEFINES_ST:DEFINES}<sp/>${_FCMODOUTFLAGS}<sp/>${FC_TGT_F}${TGT[0].abspath()}<sp/>${FC_SRC_F}${SRC[0].abspath()}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>vars=[</highlight><highlight class="stringliteral">&quot;FORTRANMODPATHFLAG&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="31" refid="classwaflib_1_1_tools_1_1fc_1_1fc_1a6d914d7b3fbabb00177614858b7a2228" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fc_1a6d914d7b3fbabb00177614858b7a2228" kindref="member">scan</ref>(self):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=<ref refid="classwaflib_1_1_tools_1_1fc__scan_1_1fortran__parser" kindref="compound">fc_scan.fortran_parser</ref>(self.generator.includes_nodes)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.task=self</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.start(self.<ref refid="classwaflib_1_1_task_1_1_task_1a84db2881aae1bcc2ad19c0eecf24804c" kindref="member">inputs</ref>[0])</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Logs.verbose:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.debug(</highlight><highlight class="stringliteral">&apos;deps:<sp/>deps<sp/>for<sp/>%r:<sp/>%r;<sp/>unresolved<sp/>%r&apos;</highlight><highlight class="normal">%(self.<ref refid="classwaflib_1_1_task_1_1_task_1a84db2881aae1bcc2ad19c0eecf24804c" kindref="member">inputs</ref>,tmp.nodes,tmp.names))</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1a9842e92184417c07866419916b2b3ce3" kindref="member">return</ref>(tmp.nodes,tmp.names)</highlight></codeline>
<codeline lineno="38" refid="classwaflib_1_1_tools_1_1fc_1_1fc_1aeef17ac252180b84177f3ba9a323a9f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fc_1aeef17ac252180b84177f3ba9a323a9f8" kindref="member">runnable_status</ref>(self):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>getattr(self,</highlight><highlight class="stringliteral">&apos;mod_fortran_done&apos;</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>super(fc,self).<ref refid="classwaflib_1_1_tools_1_1fc_1_1fc_1aeef17ac252180b84177f3ba9a323a9f8" kindref="member">runnable_status</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld=self.generator.bld</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst=<ref refid="namespacewaflib_1_1_tools_1_1fc_1a042f42940a7e5040b3d6e9c3dd3df7f4" kindref="member">get_fortran_tasks</ref>(self)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tsk<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsk.mod_fortran_done=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tsk<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=tsk.runnable_status()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret==Task.ASK_LATER:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.mod_fortran_done=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Task.ASK_LATER</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ins=<ref refid="classwaflib_1_1_utils_1_1defaultdict" kindref="compound">Utils.defaultdict</ref>(set)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs=<ref refid="classwaflib_1_1_utils_1_1defaultdict" kindref="compound">Utils.defaultdict</ref>(set)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tsk<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=tsk.uid()</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bld.raw_deps[key]:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x.startswith(</highlight><highlight class="stringliteral">&apos;MOD@&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=bld.modfile(x.replace(</highlight><highlight class="stringliteral">&apos;MOD@&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node=bld.srcnode.find_or_declare(name)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsk.set_outputs(node)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs[id(node)].<ref refid="namespacelv2specgen_1a151c4ff01430f759d5894b830360b67a" kindref="member">add</ref>(tsk)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tsk<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=tsk.uid()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bld.raw_deps[key]:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x.startswith(</highlight><highlight class="stringliteral">&apos;USE@&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=bld.modfile(x.replace(</highlight><highlight class="stringliteral">&apos;USE@&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node=bld.srcnode.find_resource(name)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tsk.outputs:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bld.node_deps[key]:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld.node_deps[key].append(node)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ins[id(node)].<ref refid="namespacelv2specgen_1a151c4ff01430f759d5894b830360b67a" kindref="member">add</ref>(tsk)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ins.keys():</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ins[k]:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.run_after.update(outs[k])</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=[]</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>outs[k]:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.extend(t.outputs)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.dep_nodes.extend(tmp)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.dep_nodes.sort(key=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:x.abspath())</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tsk<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delattr(tsk,</highlight><highlight class="stringliteral">&apos;cache_sig&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>super(fc,self).<ref refid="classwaflib_1_1_tools_1_1fc_1_1fc_1aeef17ac252180b84177f3ba9a323a9f8" kindref="member">runnable_status</ref>()</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram" kindref="compound">fcprogram</ref>(<ref refid="classwaflib_1_1_tools_1_1ccroot_1_1link__task" kindref="compound">ccroot.link_task</ref>):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>color=</highlight><highlight class="stringliteral">&apos;YELLOW&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>run_str=</highlight><highlight class="stringliteral">&apos;${FC}<sp/>${LINKFLAGS}<sp/>${FCLNK_SRC_F}${SRC}<sp/>${FCLNK_TGT_F}${TGT[0].abspath()}<sp/>${RPATH_ST:RPATH}<sp/>${FCSTLIB_MARKER}<sp/>${FCSTLIBPATH_ST:STLIBPATH}<sp/>${FCSTLIB_ST:STLIB}<sp/>${FCSHLIB_MARKER}<sp/>${FCLIBPATH_ST:LIBPATH}<sp/>${FCLIB_ST:LIB}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>inst_to=</highlight><highlight class="stringliteral">&apos;${BINDIR}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcshlib" kindref="compound">fcshlib</ref>(<ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram" kindref="compound">fcprogram</ref>):</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>inst_to=</highlight><highlight class="stringliteral">&apos;${LIBDIR}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test" kindref="compound">fcprogram_test</ref>(<ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram" kindref="compound">fcprogram</ref>):</highlight></codeline>
<codeline lineno="92" refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1a913b9f380492fd2def08bdc554cdf700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1a913b9f380492fd2def08bdc554cdf700" kindref="member">can_retrieve_cache</ref>(self):</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1ac31ed0308a3b2605c1e6a7d03bceba16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1ac31ed0308a3b2605c1e6a7d03bceba16" kindref="member">runnable_status</ref>(self):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=super(fcprogram_test,self).<ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1ac31ed0308a3b2605c1e6a7d03bceba16" kindref="member">runnable_status</ref>()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret==Task.SKIP_ME:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=Task.RUN_ME</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="99" refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1ad7090713cc489c66c738ca5d8280e8e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcprogram__test_1ad7090713cc489c66c738ca5d8280e8e5" kindref="member">exec_command</ref>(self,cmd,**kw):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld=self.generator.bld</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;shell&apos;</highlight><highlight class="normal">]=isinstance(cmd,str)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;stdout&apos;</highlight><highlight class="normal">]=kw[</highlight><highlight class="stringliteral">&apos;stderr&apos;</highlight><highlight class="normal">]=Utils.subprocess.PIPE</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;cwd&apos;</highlight><highlight class="normal">]=bld.variant_dir</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld.out=bld.err=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld.to_log(</highlight><highlight class="stringliteral">&apos;command:<sp/>%s\n&apos;</highlight><highlight class="normal">%cmd)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw[</highlight><highlight class="stringliteral">&apos;output&apos;</highlight><highlight class="normal">]=0</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bld.out,bld.err)=bld.cmd_and_log(cmd,**kw)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/>,e:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">-1</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>bld.out:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld.to_log(</highlight><highlight class="stringliteral">&quot;out:<sp/>%s\n&quot;</highlight><highlight class="normal">%bld.out)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>bld.err:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld.to_log(</highlight><highlight class="stringliteral">&quot;err:<sp/>%s\n&quot;</highlight><highlight class="normal">%bld.err)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1fc_1_1fcstlib" kindref="compound">fcstlib</ref>(<ref refid="classwaflib_1_1_tools_1_1ccroot_1_1stlink__task" kindref="compound">ccroot.stlink_task</ref>):</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-fifths.lv2/waflib/Tools/fc.py"/>
  </compounddef>
</doxygen>
