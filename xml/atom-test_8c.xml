<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="atom-test_8c" kind="file" language="C++">
    <compoundname>atom-test.c</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="forge_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/forge.h</includes>
    <includes refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/util.h</includes>
    <incdepgraph>
      <node id="26609">
        <label>stdbool.h</label>
      </node>
      <node id="26599">
        <label>stdarg.h</label>
      </node>
      <node id="26602">
        <label>lv2/lv2plug.in/ns/ext/atom/forge.h</label>
        <link refid="forge_8h"/>
        <childnode refid="26603" relation="include">
        </childnode>
        <childnode refid="26604" relation="include">
        </childnode>
        <childnode refid="26607" relation="include">
        </childnode>
        <childnode refid="26610" relation="include">
        </childnode>
        <childnode refid="26609" relation="include">
        </childnode>
      </node>
      <node id="26605">
        <label>stdint.h</label>
      </node>
      <node id="26601">
        <label>stdlib.h</label>
      </node>
      <node id="26598">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c</label>
        <link refid="atom-test.c"/>
        <childnode refid="26599" relation="include">
        </childnode>
        <childnode refid="26600" relation="include">
        </childnode>
        <childnode refid="26601" relation="include">
        </childnode>
        <childnode refid="26602" relation="include">
        </childnode>
        <childnode refid="26607" relation="include">
        </childnode>
      </node>
      <node id="26606">
        <label>stddef.h</label>
      </node>
      <node id="26603">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="26610">
        <label>lv2/lv2plug.in/ns/ext/urid/urid.h</label>
        <link refid="urid_8h"/>
        <childnode refid="26605" relation="include">
        </childnode>
      </node>
      <node id="26608">
        <label>string.h</label>
      </node>
      <node id="26607">
        <label>lv2/lv2plug.in/ns/ext/atom/util.h</label>
        <link refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h"/>
        <childnode refid="26599" relation="include">
        </childnode>
        <childnode refid="26605" relation="include">
        </childnode>
        <childnode refid="26608" relation="include">
        </childnode>
        <childnode refid="26604" relation="include">
        </childnode>
        <childnode refid="26609" relation="include">
        </childnode>
      </node>
      <node id="26604">
        <label>lv2/lv2plug.in/ns/ext/atom/atom.h</label>
        <link refid="atom_8h"/>
        <childnode refid="26605" relation="include">
        </childnode>
        <childnode refid="26606" relation="include">
        </childnode>
      </node>
      <node id="26600">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="atom-test_8c_1a6821bafc3c88dfb2e433a095df9940c6" prot="public" static="no">
        <name>BUF_SIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="85" column="9"/>
      </memberdef>
      <memberdef kind="define" id="atom-test_8c_1a7ed5a5250fcb64706865f6d6f7d5f427" prot="public" static="no">
        <name>NUM_PROPS</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="86" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" prot="public" static="no" mutable="no">
        <type>char **</type>
        <definition>char** uris</definition>
        <argsstring></argsstring>
        <name>uris</name>
        <initializer>= <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="24" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="atom-test_8c_1a6cac288d3639dbff5f61ce54e5af51ff" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t n_uris</definition>
        <argsstring></argsstring>
        <name>n_uris</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="25" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="atom-test_8c_1a926651a6370abeed0ad2d73468d1af99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* copy_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>copy_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="28" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="atom-test_8c_1adbd02c36944ead955ae92eac82a8fcd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
        <definition>static LV2_URID urid_map</definition>
        <argsstring>(LV2_URID_Map_Handle handle, const char *uri)</argsstring>
        <name>urid_map</name>
        <param>
          <type><ref refid="urid_8h_1a31c6a9fffc31cd109185df2556765c4c" kindref="member">LV2_URID_Map_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="37" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" bodystart="37" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="atom-test_8c_1a0472388fb1c26caa7dacf78971797918" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int test_fail</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>test_fail</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="51" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="atom-test_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" line="62" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c" bodystart="62" bodyend="397"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2012<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="forge_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/forge.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><ref refid="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" kindref="member">uris</ref><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="25" refid="atom-test_8c_1a6cac288d3639dbff5f61ce54e5af51ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="atom-test_8c_1a6cac288d3639dbff5f61ce54e5af51ff" kindref="member">n_uris</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="28"><highlight class="normal">copy_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dup,<sp/>str,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dup;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal">urid_map(<ref refid="urid_8h_1a31c6a9fffc31cd109185df2556765c4c" kindref="member">LV2_URID_Map_Handle</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="atom-test_8c_1a6cac288d3639dbff5f61ce54e5af51ff" kindref="member">n_uris</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(<ref refid="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" kindref="member">uris</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>uri))<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" kindref="member">uris</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)realloc(<ref refid="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" kindref="member">uris</ref>,<sp/>++n_uris<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="atom-test_8c_1a42e30b2eba499e78c1647c915bdbb775" kindref="member">uris</ref>[n_uris<sp/>-<sp/>1]<sp/>=<sp/>copy_string(uri);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="atom-test_8c_1a6cac288d3639dbff5f61ce54e5af51ff" kindref="member">n_uris</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">test_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><ref refid="namespacelv2specgen_1a022f620722f1029244a92eca556aa50a" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>vfprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="atom-test_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"><ref refid="atom-test_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref><sp/><sp/><sp/><ref refid="structmap" kindref="compound">map</ref><sp/>=<sp/>{<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>urid_map<sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref><sp/>forge;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_init(&amp;forge,<sp/>&amp;map);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_Object<sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/Object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_one<sp/><sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_two<sp/><sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_three<sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_four<sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/four&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_true<sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_false<sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_path<sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_uri<sp/><sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/uri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_urid<sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/urid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_string<sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_literal<sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/literal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_tuple<sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/tuple&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_vector<sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/vector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_vector2<sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/vector2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_seq<sp/><sp/><sp/><sp/><sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/seq&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUF_SIZE<sp/><sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_PROPS<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>[<ref refid="atom-test_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_set_buffer(&amp;forge,<sp/>buf,<sp/><ref refid="atom-test_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref><sp/>obj_frame;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>obj<sp/>=<sp/>lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_object(&amp;forge,<sp/>&amp;obj_frame,<sp/>0,<sp/>eg_Object));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_one<sp/>=<sp/>(Int)1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_one);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Int</ref>*<sp/>one<sp/>=<sp/>(<ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Int</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_int(&amp;forge,<sp/>1));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(one-&gt;<ref refid="struct_l_v2___atom___int_1a7827960af4d61b2a758d5af28eaf51fc" kindref="member">body</ref><sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%d<sp/>!=<sp/>1\n&quot;</highlight><highlight class="normal">,<sp/>one-&gt;<ref refid="struct_l_v2___atom___int_1a7827960af4d61b2a758d5af28eaf51fc" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_two<sp/>=<sp/>(Long)2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_two);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___long" kindref="compound">LV2_Atom_Long</ref>*<sp/>two<sp/>=<sp/>(<ref refid="struct_l_v2___atom___long" kindref="compound">LV2_Atom_Long</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_long(&amp;forge,<sp/>2));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(two-&gt;<ref refid="struct_l_v2___atom___long_1ad5e9317cb37db6804aab62580b182a94" kindref="member">body</ref><sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%ld<sp/>!=<sp/>2\n&quot;</highlight><highlight class="normal">,<sp/>two-&gt;<ref refid="struct_l_v2___atom___long_1ad5e9317cb37db6804aab62580b182a94" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_three<sp/>=<sp/>(Float)3.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_three);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___float" kindref="compound">LV2_Atom_Float</ref>*<sp/>three<sp/>=<sp/>(<ref refid="struct_l_v2___atom___float" kindref="compound">LV2_Atom_Float</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_float(&amp;forge,<sp/>3.0<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(three-&gt;<ref refid="struct_l_v2___atom___float_1a7a13def55ea33c5d18883815c9809441" kindref="member">body</ref><sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%f<sp/>!=<sp/>3\n&quot;</highlight><highlight class="normal">,<sp/>three-&gt;<ref refid="struct_l_v2___atom___float_1a7a13def55ea33c5d18883815c9809441" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_four<sp/>=<sp/>(Double)4.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_four);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___double" kindref="compound">LV2_Atom_Double</ref>*<sp/>four<sp/>=<sp/>(<ref refid="struct_l_v2___atom___double" kindref="compound">LV2_Atom_Double</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_double(&amp;forge,<sp/>4.0));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(four-&gt;<ref refid="struct_l_v2___atom___double_1a5db15f75b7e939fa413843f99664e3ee" kindref="member">body</ref><sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%ld<sp/>!=<sp/>4\n&quot;</highlight><highlight class="normal">,<sp/>four-&gt;<ref refid="struct_l_v2___atom___double_1a5db15f75b7e939fa413843f99664e3ee" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_true<sp/>=<sp/>(Bool)1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_true);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref>*<sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref><sp/>=<sp/>(<ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_bool(&amp;forge,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="struct_l_v2___atom___int_1a7827960af4d61b2a758d5af28eaf51fc" kindref="member">body</ref><sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%ld<sp/>!=<sp/>1<sp/>(true)\n&quot;</highlight><highlight class="normal">,<sp/>t-&gt;<ref refid="struct_l_v2___atom___int_1a7827960af4d61b2a758d5af28eaf51fc" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_false<sp/>=<sp/>(Bool)0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_false);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref>*<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/>(<ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_bool(&amp;forge,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;<ref refid="struct_l_v2___atom___int_1a7827960af4d61b2a758d5af28eaf51fc" kindref="member">body</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%ld<sp/>!=<sp/>0<sp/>(false)\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;<ref refid="struct_l_v2___atom___int_1a7827960af4d61b2a758d5af28eaf51fc" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_path<sp/>=<sp/>(Path)&quot;/foo/bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/>pstr<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/foo/bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pstr_len<sp/>=<sp/>strlen(pstr);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_path);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref><sp/><sp/>=<sp/>(<ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_uri(&amp;forge,<sp/>pstr,<sp/>pstr_len));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pbody<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(path);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(pbody,<sp/>pstr))<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%s<sp/>!=<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>pbody,<sp/>pstr);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_uri<sp/>=<sp/>(URI)&quot;http://example.org/value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/>ustr<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/value&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ustr_len<sp/>=<sp/>strlen(ustr);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_uri);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*<sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref><sp/>=<sp/>(<ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_uri(&amp;forge,<sp/>ustr,<sp/>ustr_len));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ubody<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(uri);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(ubody,<sp/>ustr))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%s<sp/>!=<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>ubody,<sp/>ustr);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_urid<sp/>=<sp/>(URID)&quot;http://example.org/value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>eg_value<sp/>=<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://example.org/value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_urid);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___u_r_i_d" kindref="compound">LV2_Atom_URID</ref>*<sp/>urid<sp/>=<sp/>(<ref refid="struct_l_v2___atom___u_r_i_d" kindref="compound">LV2_Atom_URID</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_urid(&amp;forge,<sp/>eg_value));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(urid-&gt;<ref refid="struct_l_v2___atom___u_r_i_d_1a6f5957eed2cfbded3e8c6fe7524111cf" kindref="member">body</ref><sp/>!=<sp/>eg_value)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%u<sp/>!=<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>urid-&gt;<ref refid="struct_l_v2___atom___u_r_i_d_1a6f5957eed2cfbded3e8c6fe7524111cf" kindref="member">body</ref>,<sp/>eg_value);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_string<sp/>=<sp/>(String)&quot;hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_string);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_string(</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sbody<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(sbody,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%s<sp/>!=<sp/>\&quot;hello\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>sbody);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_literal<sp/>=<sp/>(Literal)&quot;hello&quot;@fr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_literal);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___literal" kindref="compound">LV2_Atom_Literal</ref>*<sp/>literal<sp/>=<sp/>(<ref refid="struct_l_v2___atom___literal" kindref="compound">LV2_Atom_Literal</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_literal(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/></highlight><highlight class="stringliteral">&quot;bonjour&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;bonjour&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>urid_map(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;http://lexvo.org/id/term/fr&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lbody<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="atom_8h_1a4a1012b7c4d59348a5e2a54c01ae8e31" kindref="member">LV2_ATOM_CONTENTS</ref>(<ref refid="struct_l_v2___atom___literal" kindref="compound">LV2_Atom_Literal</ref>,<sp/>literal);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(lbody,<sp/></highlight><highlight class="stringliteral">&quot;bonjour&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;%s<sp/>!=<sp/>\&quot;bonjour\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>lbody);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_tuple<sp/>=<sp/>&quot;foo&quot;,true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_tuple);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref><sp/>tuple_frame;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___tuple" kindref="compound">LV2_Atom_Tuple</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>tuple<sp/>=<sp/>(<ref refid="struct_l_v2___atom___tuple" kindref="compound">LV2_Atom_Tuple</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_tuple(&amp;forge,<sp/>&amp;tuple_frame));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*<sp/>tup0<sp/>=<sp/>(<ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_string(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref>*<sp/>tup1<sp/>=<sp/>(<ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_bool(&amp;forge,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_pop(&amp;forge,<sp/>&amp;tuple_frame);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>lv2_atom_tuple_begin(tuple);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lv2_atom_tuple_is_end(<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(tuple),<sp/>tuple-&gt;<ref refid="struct_l_v2___atom___tuple_1a993d7796e8772bec94e6d021974d8748" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>,<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Tuple<sp/>iterator<sp/>is<sp/>empty\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>tup0i<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)tup0,<sp/>tup0i))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>tuple<sp/>element<sp/>0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>lv2_atom_tuple_next(i);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lv2_atom_tuple_is_end(<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(tuple),<sp/>tuple-&gt;<ref refid="struct_l_v2___atom___tuple_1a993d7796e8772bec94e6d021974d8748" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>,<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Premature<sp/>end<sp/>of<sp/>tuple<sp/>iterator\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>tup1i<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)tup1,<sp/>tup1i))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>tuple<sp/>element<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>lv2_atom_tuple_next(i);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_tuple_is_end(<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(tuple),<sp/>tuple-&gt;<ref refid="struct_l_v2___atom___tuple_1a993d7796e8772bec94e6d021974d8748" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>,<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Tuple<sp/>iter<sp/>is<sp/>not<sp/>at<sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_vector<sp/>=<sp/>(Vector&lt;Int&gt;)1,2,3,4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_vector);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref><sp/>elems[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref>*<sp/>vector<sp/>=<sp/>(<ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_vector(</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>),<sp/>forge.<ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref>,<sp/>4,<sp/>elems));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>vec_body<sp/>=<sp/><ref refid="atom_8h_1a4a1012b7c4d59348a5e2a54c01ae8e31" kindref="member">LV2_ATOM_CONTENTS</ref>(<ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref>,<sp/>vector);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(elems,<sp/>vec_body,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(elems)))<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>vector\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_vector2<sp/>=<sp/>(Vector&lt;Int&gt;)1,2,3,4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_vector2);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref><sp/>vec_frame;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref>*<sp/>vector2<sp/>=<sp/>(<ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_vector_head(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>&amp;vec_frame,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>),<sp/>forge.<ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref>));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/>0;<sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(elems)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>);<sp/>++<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv2_atom_forge_int(&amp;forge,<sp/>elems[<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_pop(&amp;forge,<sp/>&amp;vec_frame);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals(&amp;vector-&gt;<ref refid="struct_l_v2___atom___vector_1a65162941b427fe7c9799cfb28a50020a" kindref="member">atom</ref>,<sp/>&amp;vector2-&gt;<ref refid="struct_l_v2___atom___vector_1a65162941b427fe7c9799cfb28a50020a" kindref="member">atom</ref>))<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Vector<sp/>!=<sp/>Vector2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg_seq<sp/>=<sp/>(Sequence)1,<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_key(&amp;forge,<sp/>eg_seq);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref><sp/>seq_frame;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref>*<sp/>seq<sp/>=<sp/>(<ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref>*)lv2_atom_forge_deref(</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;forge,<sp/>lv2_atom_forge_sequence_head(&amp;forge,<sp/>&amp;seq_frame,<sp/>0));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_frame_time(&amp;forge,<sp/>0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_int(&amp;forge,<sp/>1);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_frame_time(&amp;forge,<sp/>1);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_int(&amp;forge,<sp/>2);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_pop(&amp;forge,<sp/>&amp;seq_frame);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_pop(&amp;forge,<sp/>&amp;obj_frame);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>equality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Int</ref><sp/>itwo<sp/>=<sp/>{<sp/>{<sp/>forge.<ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>)<sp/>},<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)one,<sp/>(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)two))<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;1<sp/>==<sp/>2.0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)one,<sp/>(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)&amp;itwo))<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;1<sp/>==<sp/>2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)one,<sp/>(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)one))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;1<sp/>!=<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n_events<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1abb1a596ae5fb631dbc2c6021677bd370" kindref="member">LV2_ATOM_SEQUENCE_FOREACH</ref>(seq,<sp/>ev)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ev-&gt;time.frames<sp/>!=<sp/>n_events)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>event<sp/>%u<sp/>has<sp/>bad<sp/>time\n&quot;</highlight><highlight class="normal">,<sp/>n_events);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ev-&gt;body.type<sp/>!=<sp/>forge.<ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref>)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>event<sp/>%u<sp/>has<sp/>bad<sp/>type\n&quot;</highlight><highlight class="normal">,<sp/>n_events);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Int</ref>*)&amp;ev-&gt;body)-&gt;body<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)n_events<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Event<sp/>%u<sp/>!=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>n_events,<sp/>n_events<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_events;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n_props<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a86f07aefc191f7145846ccdf2082c7c9" kindref="member">LV2_ATOM_OBJECT_FOREACH</ref>((<ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref>*)obj,<sp/>prop)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prop-&gt;key)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>property<sp/>%u<sp/>has<sp/>no<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>n_props);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop-&gt;context)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>property<sp/>%u<sp/>has<sp/>context\n&quot;</highlight><highlight class="normal">,<sp/>n_props);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_props;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_props<sp/>!=<sp/><ref refid="atom-test_8c_1a7ed5a5250fcb64706865f6d6f7d5f427" kindref="member">NUM_PROPS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>object<sp/>has<sp/>%u<sp/>properties<sp/>!=<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_props,<sp/><ref refid="atom-test_8c_1a7ed5a5250fcb64706865f6d6f7d5f427" kindref="member">NUM_PROPS</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>one;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>two;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>three;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>four;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>affirmative;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>negative;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>urid;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>literal;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>tuple;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>vector;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>vector2;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>seq;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>matches;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;matches,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(matches));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref><sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_one,<sp/><sp/><sp/><sp/><sp/>&amp;matches.one<sp/>},</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_two,<sp/><sp/><sp/><sp/><sp/>&amp;matches.two<sp/>},</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_three,<sp/><sp/><sp/>&amp;matches.three<sp/>},</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_four,<sp/><sp/><sp/><sp/>&amp;matches.four<sp/>},</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_true,<sp/><sp/><sp/><sp/>&amp;matches.affirmative<sp/>},</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_false,<sp/><sp/><sp/>&amp;matches.negative<sp/>},</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_path,<sp/><sp/><sp/><sp/>&amp;matches.path<sp/>},</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_uri,<sp/><sp/><sp/><sp/><sp/>&amp;matches.uri<sp/>},</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_urid,<sp/><sp/><sp/><sp/>&amp;matches.urid<sp/>},</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_string,<sp/><sp/>&amp;matches.string<sp/>},</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_literal,<sp/>&amp;matches.literal<sp/>},</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_tuple,<sp/><sp/><sp/>&amp;matches.tuple<sp/>},</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_vector,<sp/><sp/>&amp;matches.vector<sp/>},</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_vector2,<sp/>&amp;matches.vector2<sp/>},</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eg_seq,<sp/><sp/><sp/><sp/><sp/>&amp;matches.seq<sp/>},</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LV2_ATOM_OBJECT_QUERY_END</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n_matches<sp/>=<sp/>lv2_atom_object_query((<ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref>*)obj,<sp/>q);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>2;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_matches<sp/>!=<sp/>n_props)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Query<sp/>failed,<sp/>%u<sp/>matches<sp/>!=<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_matches,<sp/>n_props);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)one,<sp/>matches.one))<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>one\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)two,<sp/>matches.two))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>two\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)three,<sp/>matches.three))<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>three\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)four,<sp/>matches.four))<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>four\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)t,<sp/>matches.affirmative))<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>true\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)f,<sp/>matches.negative))<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>false\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)path,<sp/>matches.path))<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>path\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)uri,<sp/>matches.uri))<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>URI\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>matches.string))<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>string\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)literal,<sp/>matches.literal))<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>literal\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)tuple,<sp/>matches.tuple))<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>tuple\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)vector,<sp/>matches.vector))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>vector\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)vector,<sp/>matches.vector2))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>vector2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_equals((<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)seq,<sp/>matches.seq))<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_fail(</highlight><highlight class="stringliteral">&quot;Bad<sp/>match<sp/>sequence\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;matches,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(matches));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_matches<sp/>=<sp/>lv2_atom_object_get((<ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref>*)obj,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_one,<sp/><sp/><sp/><sp/><sp/>&amp;matches.one,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_two,<sp/><sp/><sp/><sp/><sp/>&amp;matches.two,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_three,<sp/><sp/><sp/>&amp;matches.three,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_four,<sp/><sp/><sp/><sp/>&amp;matches.four,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_true,<sp/><sp/><sp/><sp/>&amp;matches.affirmative,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_false,<sp/><sp/><sp/>&amp;matches.negative,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_path,<sp/><sp/><sp/><sp/>&amp;matches.path,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_uri,<sp/><sp/><sp/><sp/><sp/>&amp;matches.uri,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_urid,<sp/><sp/><sp/><sp/>&amp;matches.urid,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_string,<sp/><sp/>&amp;matches.string,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_literal,<sp/>&amp;matches.literal,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_tuple,<sp/><sp/><sp/>&amp;matches.tuple,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_vector,<sp/><sp/>&amp;matches.vector,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_vector2,<sp/>&amp;matches.vector2,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eg_seq,<sp/><sp/><sp/><sp/><sp/>&amp;matches.seq,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>passed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c"/>
  </compounddef>
</doxygen>
