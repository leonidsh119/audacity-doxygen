<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lilv" kind="group">
    <compoundname>lilv</compoundname>
    <title>Lilv</title>
      <sectiondef kind="user-defined">
      <header>Node</header>
      <memberdef kind="function" id="group__lilv_1gada8ce596e1147a59d1711444c197a23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_uri_to_path</definition>
        <argsstring>(const char *uri)</argsstring>
        <name>lilv_uri_to_path</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a file URI string to a local path string. For example, &quot;file://foo/bar/baz.ttl&quot; returns &quot;/foo/bar/baz.ttl&quot;. Return value is shared and must not be deleted by caller. <simplesect kind="return"><para><computeroutput>uri</computeroutput> converted to a path, or NULL on failure (URI is not local). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="110" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/util.c" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaadc0a9397da39725b2aa7030dfea7786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_uri</definition>
        <argsstring>(LilvWorld *world, const char *uri)</argsstring>
        <name>lilv_new_uri</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new URI value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="117" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga84663ba7913d9558a163b835035b606f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_file_uri</definition>
        <argsstring>(LilvWorld *world, const char *host, const char *path)</argsstring>
        <name>lilv_new_file_uri</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new file URI value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>Host name, or NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path on host. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new node that must be freed by caller.</para></simplesect>
Relative paths are resolved against the current working directory. Note that this may yield unexpected results if <computeroutput>host</computeroutput> is another machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="130" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga579adb7c7e071bf43d8775e48e6edc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_string</definition>
        <argsstring>(LilvWorld *world, const char *str)</argsstring>
        <name>lilv_new_string</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new string value (with no language). Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="137" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga2d87a9716a851a2a2f84771875ea2c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_int</definition>
        <argsstring>(LilvWorld *world, int val)</argsstring>
        <name>lilv_new_int</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new integer value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="144" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa5a7864c4949fdf3d4bb6533144265d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_float</definition>
        <argsstring>(LilvWorld *world, float val)</argsstring>
        <name>lilv_new_float</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new floating point value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="151" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa7853e686d08c4a60cb51b3ba1e712c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_bool</definition>
        <argsstring>(LilvWorld *world, bool val)</argsstring>
        <name>lilv_new_bool</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new boolean value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="158" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_node_free</definition>
        <argsstring>(LilvNode *val)</argsstring>
        <name>lilv_node_free</name>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a LilvNode. It is safe to call this function on NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="165" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_node_duplicate</definition>
        <argsstring>(const LilvNode *val)</argsstring>
        <name>lilv_node_duplicate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate a LilvNode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="205" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3fd9df99cb05f2f061233d2839e820f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_equals</definition>
        <argsstring>(const LilvNode *value, const LilvNode *other)</argsstring>
        <name>lilv_node_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether two values are equivalent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="177" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="229" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga9ebd1062d816c40ac335e217251c173e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> char *</type>
        <definition>LILV_API char* lilv_node_get_turtle_token</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_get_turtle_token</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this value as a Turtle/SPARQL token. Returned value must be freed by caller with free(). <table rows="6" cols="2"><caption>Example Turtle Tokens</caption>
<row>
<entry thead="yes"><para>URI</para></entry><entry thead="no"><para>&lt;<ulink url="http://example.org/foo">http://example.org/foo</ulink> &gt; </para></entry></row>
<row>
<entry thead="yes"><para>QName</para></entry><entry thead="no"><para>doap:name </para></entry></row>
<row>
<entry thead="yes"><para>String</para></entry><entry thead="no"><para>&quot;this is a string&quot; </para></entry></row>
<row>
<entry thead="yes"><para>Float</para></entry><entry thead="no"><para>1.0 </para></entry></row>
<row>
<entry thead="yes"><para>Integer</para></entry><entry thead="no"><para>1 </para></entry></row>
<row>
<entry thead="yes"><para>Boolean</para></entry><entry thead="no"><para>true </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="193" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="256" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gafda5218468031732560fb468e78d18e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_uri</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the value is a URI (resource). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="199" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga4f0ffa007aa11aaf30ba37c1ac1513fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_node_as_uri</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this value as a URI string, e.g. &quot;http://example.org/foo&quot;. Valid to call only if <computeroutput>lilv_node_is_uri(value)</computeroutput> returns true. Returned value is owned by <computeroutput>value</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="207" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="299" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_blank</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_blank</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the value is a blank node (resource with no URI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="213" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga5e971c906fd65adb755dc40ece50ab47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_node_as_blank</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_blank</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this value as a blank node identifier, e.g. &quot;genid03&quot;. Valid to call only if <computeroutput>lilv_node_is_blank(value)</computeroutput> returns true. Returned value is owned by <computeroutput>value</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="221" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga8ed335e23127b0a811b53e46ebf60980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_literal</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_literal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a literal (i.e. not a URI). Returns true if <computeroutput>value</computeroutput> is a string or numeric value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="228" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="321" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga0c32acb39dedf93c651e1468e36a0e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_string</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a string literal. Returns true if <computeroutput>value</computeroutput> is a string value (and not numeric). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="235" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_node_as_string</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as a string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="241" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga5d899836a404f7421a4cfdc34cd52384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_float</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_float</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a decimal literal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="247" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga8e64cb4e51e6231d0e4cf0d04ec1bf0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> float</type>
        <definition>LILV_API float lilv_node_as_float</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_float</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as a float. Valid to call only if <computeroutput>lilv_node_is_float(value)</computeroutput> or <computeroutput>lilv_node_is_int(value)</computeroutput> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="255" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf0c597c61514221bc976b30142aaa517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_int</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_int</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is an integer literal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="261" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga375054e13a92d8317e341a84ee48fb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_node_as_int</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_int</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as an integer. Valid to call only if <computeroutput>lilv_node_is_int(value)</computeroutput> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="268" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad31f809d6311309d75a54f1d14ff9781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_bool</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_bool</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a boolean. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="274" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaca452e807f7c451491075772eb6bb92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_as_bool</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_bool</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as a bool. Valid to call only if <computeroutput>lilv_node_is_bool(value)</computeroutput> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="281" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="384" bodyend="387"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Collections</header>
      <description><para><ref refid="namespace_lilv" kindref="compound">Lilv</ref> has several collection types for holding various types of value: <itemizedlist>
<listitem>
<para>LilvPlugins (function prefix &quot;lilv_plugins_&quot;) </para></listitem>
<listitem>
<para>LilvPluginClasses (function prefix &quot;lilv_plugin_classes_&quot;) </para></listitem>
<listitem>
<para>LilvScalePoints (function prefix &quot;lilv_scale_points_&quot;) </para></listitem>
<listitem>
<para>LilvNodes (function prefix &quot;lilv_nodes_&quot;) </para></listitem>
<listitem>
<para>LilvUIs (function prefix &quot;lilv_uis_&quot;) </para></listitem>
</itemizedlist>
</para><para>Each collection type supports a similar basic API (except LilvPlugins which is internal and thus lacks a free function): <itemizedlist>
<listitem>
<para>void PREFIX_free (coll) </para></listitem>
<listitem>
<para>unsigned PREFIX_size (coll) </para></listitem>
<listitem>
<para>LilvIter* PREFIX_begin (coll) </para></listitem>
</itemizedlist>
</para></description>
      <memberdef kind="function" id="group__lilv_1ga2bb721cba50f759a9c7d549c3a9fb52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_plugin_classes_free</definition>
        <argsstring>(LilvPluginClasses *collection)</argsstring>
        <name>lilv_plugin_classes_free</name>
        <param>
          <type><ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="324" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga008f382c431be24ae9a06e7761f11a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_plugin_classes_size</definition>
        <argsstring>(const LilvPluginClasses *collection)</argsstring>
        <name>lilv_plugin_classes_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga53f542a1b0c650158ccf904f08899894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_plugin_classes_begin</definition>
        <argsstring>(const LilvPluginClasses *collection)</argsstring>
        <name>lilv_plugin_classes_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga59b6e58dfd087b6ec86886d6dbdeeab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
        <definition>LILV_API const LilvPluginClass* lilv_plugin_classes_get</definition>
        <argsstring>(const LilvPluginClasses *collection, LilvIter *i)</argsstring>
        <name>lilv_plugin_classes_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga5a2ef38b4a92c011ab300c7e2e9bf896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_plugin_classes_next</definition>
        <argsstring>(const LilvPluginClasses *collection, LilvIter *i)</argsstring>
        <name>lilv_plugin_classes_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga4ce11c313cebd2743e7e89169fed1c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugin_classes_is_end</definition>
        <argsstring>(const LilvPluginClasses *collection, LilvIter *i)</argsstring>
        <name>lilv_plugin_classes_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga24762b755734a1950b16547f26fc10c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
        <definition>LILV_API const LilvPluginClass* lilv_plugin_classes_get_by_uri</definition>
        <argsstring>(const LilvPluginClasses *classes, const LilvNode *uri)</argsstring>
        <name>lilv_plugin_classes_get_by_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
          <declname>classes</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a plugin class from <computeroutput>classes</computeroutput> by URI. Return value is shared (stored in <computeroutput>classes</computeroutput>) and must not be freed or modified by the caller in any way. <simplesect kind="return"><para>NULL if no plugin class with <computeroutput>uri</computeroutput> is found in <computeroutput>classes</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="348" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad93c3a234a5138a9b60f3666904765cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_scale_points_free</definition>
        <argsstring>(LilvScalePoints *collection)</argsstring>
        <name>lilv_scale_points_free</name>
        <param>
          <type><ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="354" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf6c7fda682f2d2f8eb0c80e758857222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_scale_points_size</definition>
        <argsstring>(const LilvScalePoints *collection)</argsstring>
        <name>lilv_scale_points_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga232ed389dd2db86589187331a59f9580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_scale_points_begin</definition>
        <argsstring>(const LilvScalePoints *collection)</argsstring>
        <name>lilv_scale_points_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac668575a200648c3cabea2836f1dda2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a582b8861d7e51d38ff769281ef4ae518" kindref="member">LilvScalePoint</ref> *</type>
        <definition>LILV_API const LilvScalePoint* lilv_scale_points_get</definition>
        <argsstring>(const LilvScalePoints *collection, LilvIter *i)</argsstring>
        <name>lilv_scale_points_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga424da1880e6dfce591bb78ca44c6b8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_scale_points_next</definition>
        <argsstring>(const LilvScalePoints *collection, LilvIter *i)</argsstring>
        <name>lilv_scale_points_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga34c0dbc2c5b1e08182f41a52fea3dee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_scale_points_is_end</definition>
        <argsstring>(const LilvScalePoints *collection, LilvIter *i)</argsstring>
        <name>lilv_scale_points_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga938f9a32ad1d4c9f8e83d21802764ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_uis_free</definition>
        <argsstring>(LilvUIs *collection)</argsstring>
        <name>lilv_uis_free</name>
        <param>
          <type><ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="374" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga1ce4a09a22d08ef940b67f151a1894fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_uis_size</definition>
        <argsstring>(const LilvUIs *collection)</argsstring>
        <name>lilv_uis_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga159e80f9bac3c7df4aa373f41332baf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_uis_begin</definition>
        <argsstring>(const LilvUIs *collection)</argsstring>
        <name>lilv_uis_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf8b779f4638a93826dd451989f594249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
        <definition>LILV_API const LilvUI* lilv_uis_get</definition>
        <argsstring>(const LilvUIs *collection, LilvIter *i)</argsstring>
        <name>lilv_uis_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga50631a9805836047aaf24a418525119f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_uis_next</definition>
        <argsstring>(const LilvUIs *collection, LilvIter *i)</argsstring>
        <name>lilv_uis_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga9fc6dce90642aa66a4c2120ca890c8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_uis_is_end</definition>
        <argsstring>(const LilvUIs *collection, LilvIter *i)</argsstring>
        <name>lilv_uis_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad46fe6df82b17906f1b5fd76918aec8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
        <definition>LILV_API const LilvUI* lilv_uis_get_by_uri</definition>
        <argsstring>(const LilvUIs *uis, const LilvNode *uri)</argsstring>
        <name>lilv_uis_get_by_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
          <declname>uis</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a UI from <computeroutput>uis</computeroutput> by URI. Return value is shared (stored in <computeroutput>uis</computeroutput>) and must not be freed or modified by the caller in any way. <simplesect kind="return"><para>NULL if no UI with <computeroutput>uri</computeroutput> is found in <computeroutput>list</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="398" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_nodes_free</definition>
        <argsstring>(LilvNodes *collection)</argsstring>
        <name>lilv_nodes_free</name>
        <param>
          <type><ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="404" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae7ca543182019e98be1770f30ca3c340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_nodes_size</definition>
        <argsstring>(const LilvNodes *collection)</argsstring>
        <name>lilv_nodes_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga75d8502c89aa8c9e091b34c6609bf171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_nodes_begin</definition>
        <argsstring>(const LilvNodes *collection)</argsstring>
        <name>lilv_nodes_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga09442229b233f19305f8c04f9e46158c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_nodes_get</definition>
        <argsstring>(const LilvNodes *collection, LilvIter *i)</argsstring>
        <name>lilv_nodes_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae9e746f1c225f84a78b28bc9e60e3ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_nodes_next</definition>
        <argsstring>(const LilvNodes *collection, LilvIter *i)</argsstring>
        <name>lilv_nodes_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab831078aa89c31016acb0c5d1ae87e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_nodes_is_end</definition>
        <argsstring>(const LilvNodes *collection, LilvIter *i)</argsstring>
        <name>lilv_nodes_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaebd31ae1b31d01968cf222fe08093c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_nodes_get_first</definition>
        <argsstring>(const LilvNodes *collection)</argsstring>
        <name>lilv_nodes_get_first</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="422" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac6e8a1c5f7b163211f995bcca3cdbc34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_nodes_contains</definition>
        <argsstring>(const LilvNodes *values, const LilvNode *value)</argsstring>
        <name>lilv_nodes_contains</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether <computeroutput>values</computeroutput> contains <computeroutput>value</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="428" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="130" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa2be123ffe13621ca66679de7524e76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_nodes_merge</definition>
        <argsstring>(const LilvNodes *a, const LilvNodes *b)</argsstring>
        <name>lilv_nodes_merge</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new LilvNodes that contains all nodes from both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="434" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="140" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga94edf28fdf572397152a4d385711805f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_plugins_size</definition>
        <argsstring>(const LilvPlugins *collection)</argsstring>
        <name>lilv_plugins_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga051618b5b7c7d7b4de3b17156b3bccde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_plugins_begin</definition>
        <argsstring>(const LilvPlugins *collection)</argsstring>
        <name>lilv_plugins_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae0590e447aadee33046ba483cd92e1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
        <definition>LILV_API const LilvPlugin* lilv_plugins_get</definition>
        <argsstring>(const LilvPlugins *collection, LilvIter *i)</argsstring>
        <name>lilv_plugins_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga95586038ef7116f92df58fb655068c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
        <definition>LILV_API LilvIter* lilv_plugins_next</definition>
        <argsstring>(const LilvPlugins *collection, LilvIter *i)</argsstring>
        <name>lilv_plugins_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa4868a470b36e5acf1af6cfb748f4f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugins_is_end</definition>
        <argsstring>(const LilvPlugins *collection, LilvIter *i)</argsstring>
        <name>lilv_plugins_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
          <declname>collection</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga61051b67ff99c9384550cc00ddcd11dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
        <definition>LILV_API const LilvPlugin* lilv_plugins_get_by_uri</definition>
        <argsstring>(const LilvPlugins *plugins, const LilvNode *uri)</argsstring>
        <name>lilv_plugins_get_by_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
          <declname>plugins</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a plugin from <computeroutput>plugins</computeroutput> by URI. Return value is shared (stored in <computeroutput>plugins</computeroutput>) and must not be freed or modified by the caller in any way. <simplesect kind="return"><para>NULL if no plugin with <computeroutput>uri</computeroutput> is found in <computeroutput>plugins</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="460" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/collections.c" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="define" id="group__lilv_1gad4848f8348d22d0cfa659ba7ed6ea1b5" prot="public" static="no">
        <name>LILV_FOREACH</name>
        <param><defname>colltype</defname></param>
        <param><defname>iter</defname></param>
        <param><defname>collection</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="lilv_8h_1ae86a2663273587d791c8b8fbb008e567" kindref="member">LilvIter</ref>* (iter) = lilv_ ## colltype ## _begin(collection); \
	     !lilv_ ## colltype ## _is_end(collection, iter); \
	     (iter) = lilv_ ## colltype ## _next(collection, iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over each element of a collection. <programlisting><codeline><highlight class="normal">LILV_FOREACH(plugin_classes,<sp/>i,<sp/>classes)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>LilvPluginClass<sp/>c<sp/>=<sp/>lilv_plugin_classes_get(classes,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="316" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>World</header>
      <description><para>The &quot;world&quot; represents all <ref refid="namespace_lilv" kindref="compound">Lilv</ref> state, and is used to discover/load/cache LV2 data (plugins, UIs, and extensions). Normal hosts which just need to load plugins by URI should simply use <ref refid="group__lilv_1ga40509571785778228c713ee4db4b047a" kindref="member">lilv_world_load_all()</ref> to discover/load the system&apos;s LV2 resources. </para></description>
      <memberdef kind="function" id="group__lilv_1ga645012b5e1ead2a439a319c0868cf35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
        <definition>LILV_API LilvWorld* lilv_world_new</definition>
        <argsstring>(void)</argsstring>
        <name>lilv_world_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a new, empty world. If initialization fails, NULL is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="478" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="27" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gabd02119421852cb7fe884eea89ec4cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_world_set_option</definition>
        <argsstring>(LilvWorld *world, const char *uri, const LilvNode *value)</argsstring>
        <name>lilv_world_set_option</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an option option for <computeroutput>world</computeroutput>.</para><para>Currently recognized options: <ref refid="group__lilv_1ga01ba858cfabdfef1b74bdc2b7dad8f61" kindref="member">LILV_OPTION_FILTER_LANG</ref> <ref refid="group__lilv_1gaf78470bbfb7422bac38ba51fe52911ed" kindref="member">LILV_OPTION_DYN_MANIFEST</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="503" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="157" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad60eddb41936cb2461fb3448dfdea083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_world_free</definition>
        <argsstring>(LilvWorld *world)</argsstring>
        <name>lilv_world_free</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the world, mwahaha. It is safe to call this function on NULL. Note that destroying <computeroutput>world</computeroutput> will destroy all the objects it contains (e.g. instances of LilvPlugin). Do not destroy the world until you are finished with all objects that came from it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="515" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="106" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga40509571785778228c713ee4db4b047a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_world_load_all</definition>
        <argsstring>(LilvWorld *world)</argsstring>
        <name>lilv_world_load_all</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load all installed LV2 bundles on the system. This is the recommended way for hosts to load LV2 data. It implements the established/standard best practice for discovering all LV2 data on the system. The environment variable LV2_PATH may be used to control where this function will look for bundles.</para><para>Hosts should use this function rather than explicitly load bundles, except in special circumstances (e.g. development utilities, or hosts that ship with special plugin bundles which are installed to a known location). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="529" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="767" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga6ebdd115ffd557c8100d8244c8f6c4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_world_load_bundle</definition>
        <argsstring>(LilvWorld *world, LilvNode *bundle_uri)</argsstring>
        <name>lilv_world_load_bundle</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>bundle_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a specific bundle. <computeroutput>bundle_uri</computeroutput> must be a fully qualified URI to the bundle directory, with the trailing slash, eg. <ulink url="file:///usr/lib/lv2/foo.lv2/">file:///usr/lib/lv2/foo.lv2/</ulink></para><para>Normal hosts should not need this function (use lilv_world_load_all).</para><para>Hosts MUST NOT attach any long-term significance to bundle paths (e.g. in save files), since there are no guarantees they will remain unchanged between (or even during) program invocations. Plugins (among other things) MUST be identified by <ref refid="struct_u_r_is" kindref="compound">URIs</ref> (not paths) in save files. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="544" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="557" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga11cbc3ff8a81faaec58e17cdee88c970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_world_unload_bundle</definition>
        <argsstring>(LilvWorld *world, LilvNode *bundle_uri)</argsstring>
        <name>lilv_world_unload_bundle</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>bundle_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unload a specific bundle.</para><para>This unloads statements loaded by <ref refid="group__lilv_1ga6ebdd115ffd557c8100d8244c8f6c4de" kindref="member">lilv_world_load_bundle()</ref>. Note that this is not necessarily all information loaded from the bundle. If any resources have been separately loaded with liv_world_load_resource(), they must be separately unloaded with <ref refid="group__lilv_1gaf9dbb29749298fc128c150ec068e43ba" kindref="member">lilv_world_unload_resource()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="556" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="637" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga2cc5fde69222a790f8aae81547156220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_world_load_resource</definition>
        <argsstring>(LilvWorld *world, const LilvNode *resource)</argsstring>
        <name>lilv_world_load_resource</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load all the data associated with the given <computeroutput>resource</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be a subject (i.e. a URI or a blank node). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of files parsed, or -1 on error</para></simplesect>
All accessible data files linked to <computeroutput>resource</computeroutput> with rdfs:seeAlso will be loaded into the world model. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="568" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="819" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf9dbb29749298fc128c150ec068e43ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_world_unload_resource</definition>
        <argsstring>(LilvWorld *world, const LilvNode *resource)</argsstring>
        <name>lilv_world_unload_resource</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unload all the data associated with the given <computeroutput>resource</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be a subject (i.e. a URI or a blank node).</para></parameterdescription>
</parameteritem>
</parameterlist>
This unloads all data loaded by a previous call to <ref refid="group__lilv_1ga2cc5fde69222a790f8aae81547156220" kindref="member">lilv_world_load_resource()</ref> with the given <computeroutput>resource</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="580" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="850" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga53462897e33933d06ffd1db9ef427039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
        <definition>LILV_API const LilvPluginClass* lilv_world_get_plugin_class</definition>
        <argsstring>(const LilvWorld *world)</argsstring>
        <name>lilv_world_get_plugin_class</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parent of all other plugin classes, lv2:Plugin. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="587" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="882" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga15ea5899a81d056542c1583210387580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
        <definition>LILV_API const LilvPluginClasses* lilv_world_get_plugin_classes</definition>
        <argsstring>(const LilvWorld *world)</argsstring>
        <name>lilv_world_get_plugin_classes</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a list of all found plugin classes. Returned list is owned by world and must not be freed by the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="594" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="888" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga438aa2990d919506dd19136dd817dc32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae2c6def8207facadef355b47b8802911" kindref="member">LilvPlugins</ref> *</type>
        <definition>LILV_API const LilvPlugins* lilv_world_get_all_plugins</definition>
        <argsstring>(const LilvWorld *world)</argsstring>
        <name>lilv_world_get_all_plugins</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a list of all found plugins. The returned list contains just enough references to query or instantiate plugins. The data for a particular plugin will not be loaded into memory until a call to an lilv_plugin_* function results in a query (at which time the data is cached with the LilvPlugin so future queries are very fast).</para><para>The returned list and the plugins it contains are owned by <computeroutput>world</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="608" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="894" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga1545945352d9baf925fe9f19d1881244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_world_find_nodes</definition>
        <argsstring>(LilvWorld *world, const LilvNode *subject, const LilvNode *predicate, const LilvNode *object)</argsstring>
        <name>lilv_world_find_nodes</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find nodes matching a triple pattern. Either <computeroutput>subject</computeroutput> or <computeroutput>object</computeroutput> may be NULL (i.e. a wildcard), but not both. <simplesect kind="return"><para>All matches for the wildcard field, or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="616" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="176" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga10e70827944086bc0d023025da457544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_world_get</definition>
        <argsstring>(LilvWorld *world, const LilvNode *subject, const LilvNode *predicate, const LilvNode *object)</argsstring>
        <name>lilv_world_get</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a single node that matches a pattern. Exactly one of <computeroutput>subject</computeroutput>, <computeroutput>predicate</computeroutput>, <computeroutput>object</computeroutput> must be NULL. This function is equivalent to lilv_nodes_get_first(lilv_world_find_nodes(...)) but simplifies the common case of only wanting a single value. <simplesect kind="return"><para>the first matching node, or NULL if no matches are found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="630" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="201" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gafae8495f56b55f2273a87e451c3b9ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_world_ask</definition>
        <argsstring>(LilvWorld *world, const LilvNode *subject, const LilvNode *predicate, const LilvNode *object)</argsstring>
        <name>lilv_world_ask</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff a statement matching a certain pattern exists.</para><para>This is useful for checking if particular statement exists without having to bother with collections and memory management.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject</parametername>
</parameternamelist>
<parameterdescription>
<para>Subject of statement, or NULL for anything. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicate (key) of statement, or NULL for anything. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object (value) of statement, or NULL for anything. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="647" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/world.c" bodystart="235" bodyend="242"/>
      </memberdef>
      <memberdef kind="define" id="group__lilv_1ga01ba858cfabdfef1b74bdc2b7dad8f61" prot="public" static="no">
        <name>LILV_OPTION_FILTER_LANG</name>
        <initializer>&quot;http://drobilla.net/<ref refid="xmltok_8c_1ab6aec1346fb6c7b2733f0f73c9536ad2" kindref="member">ns</ref>/lilv#<ref refid="record_8c_1ac92bde2b71b52b0ec8a21906c4101b41" kindref="member">filter</ref>-lang&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable/disable language filtering. Language filtering applies to any functions that return (a) value(s). With filtering enabled, <ref refid="namespace_lilv" kindref="compound">Lilv</ref> will automatically return the best value(s) for the current LANG. With filtering disabled, all matching values will be returned regardless of language tag. Filtering is enabled by default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="487" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lilv_1gaf78470bbfb7422bac38ba51fe52911ed" prot="public" static="no">
        <name>LILV_OPTION_DYN_MANIFEST</name>
        <initializer>&quot;http://drobilla.net/<ref refid="xmltok_8c_1ab6aec1346fb6c7b2733f0f73c9536ad2" kindref="member">ns</ref>/lilv#dyn-manifest&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable/disable dynamic manifest support. Dynamic manifest data will only be loaded if this option is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="493" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Plugin</header>
      <memberdef kind="function" id="group__lilv_1gaa05e5c23836908ffa2d9fc45c0985078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugin_verify</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_verify</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if <computeroutput>plugin</computeroutput> is valid. This is not a rigorous validator, but can be used to reject some malformed plugins that could cause bugs (e.g. plugins with missing required fields).</para><para>Note that normal hosts do NOT need to use this - lilv does not load invalid plugins into plugin lists. This is included for plugin testing utilities, etc. <simplesect kind="return"><para>true iff <computeroutput>plugin</computeroutput> is valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="669" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="421" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa462f4594d361e5a79e56f70c1f04d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_plugin_get_uri</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of <computeroutput>plugin</computeroutput>. Any serialization that refers to plugins should refer to them by this. Hosts SHOULD NOT save any filesystem paths, plugin indexes, etc. in saved files; save only the URI.</para><para>The URI is a globally unique identifier for one specific plugin. Two plugins with the same URI are compatible in port signature, and should be guaranteed to work in a compatible and consistent way. If a plugin is upgraded in an incompatible way (eg if it has different ports), it MUST have a different URI than it&apos;s predecessor.</para><para><simplesect kind="return"><para>A shared URI value which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="686" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga6b8302af0054d9942cc928a4229b6585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_plugin_get_bundle_uri</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_bundle_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the (resolvable) URI of the plugin&apos;s &quot;main&quot; bundle. This returns the URI of the bundle where the plugin itself was found. Note that the data for a plugin may be spread over many bundles, that is, lilv_plugin_get_data_uris may return <ref refid="struct_u_r_is" kindref="compound">URIs</ref> which are not within this bundle.</para><para>Typical hosts should not need to use this function. Note this always returns a fully qualified URI. If you want a local filesystem path, use lilv_uri_to_path. <simplesect kind="return"><para>a shared string which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="700" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga080436cfbf3b213ac7bdd4ac271abbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API const LilvNodes* lilv_plugin_get_data_uris</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_data_uris</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the (resolvable) <ref refid="struct_u_r_is" kindref="compound">URIs</ref> of the RDF data files that define a plugin. Typical hosts should not need to use this function. Note this always returns fully qualified <ref refid="struct_u_r_is" kindref="compound">URIs</ref>. If you want local filesystem paths, use lilv_uri_to_path. <simplesect kind="return"><para>a list of complete URLs eg. &quot;file:///foo/ABundle.lv2/aplug.ttl&quot;, which is shared and must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="711" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab122361bb7e48347a72adcf38c539280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_plugin_get_library_uri</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_library_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the (resolvable) URI of the shared library for <computeroutput>plugin</computeroutput>. Note this always returns a fully qualified URI. If you want a local filesystem path, use lilv_uri_to_path. <simplesect kind="return"><para>a shared string which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="720" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="340" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf0cdf34bbb28cdee19d15d689782a6e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_plugin_get_name</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_name</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of <computeroutput>plugin</computeroutput>. This returns the name (doap:name) of the plugin. The name may be translated according to the current locale, this value MUST NOT be used as a plugin identifier (use the URI for that). Returned value must be freed by the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="730" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="450" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga87106089cfc5122c4d5323cb20634ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
        <definition>LILV_API const LilvPluginClass* lilv_plugin_get_class</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_class</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the class this plugin belongs to (e.g. Filters). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="736" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="373" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab88f74ed5c9ab2a7a7d72e2546362f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_plugin_get_value</definition>
        <argsstring>(const LilvPlugin *p, const LilvNode *predicate)</argsstring>
        <name>lilv_plugin_get_value</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a value associated with the plugin in a plugin&apos;s data files. <computeroutput>predicate</computeroutput> must be either a URI or a QName.</para><para>Returns the ?object of all triples found of the form:</para><para><computeroutput>&lt;plugin-uri&gt; predicate ?object</computeroutput></para><para>May return NULL if the property was not found, or if object(s) is not sensibly represented as a LilvNodes (e.g. blank nodes). Return value must be freed by caller with <ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="751" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga573736542caf84ee945bf74b4aade20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugin_has_feature</definition>
        <argsstring>(const LilvPlugin *p, const LilvNode *feature_uri)</argsstring>
        <name>lilv_plugin_has_feature</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>feature_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a feature is supported by a plugin. This will return true if the feature is an optional or required feature of the plugin. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="760" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="689" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga11955be6f9ed180466f37034aad6c747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_plugin_get_supported_features</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_get_supported_features</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LV2 Features supported (required or optionally) by a plugin. A feature is &quot;supported&quot; by a plugin if it is required OR optional.</para><para>Since required features have special rules the host must obey, this function probably shouldn&apos;t be used by normal hosts. Using lilv_plugin_get_optional_features and lilv_plugin_get_required_features separately is best in most cases.</para><para>Returned value must be freed by caller with <ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="774" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="707" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga731529456ac40ec2b673e8fe139a26e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_plugin_get_required_features</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_get_required_features</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LV2 Features required by a plugin. If a feature is required by a plugin, hosts MUST NOT use the plugin if they do not understand (or are unable to support) that feature.</para><para>All values returned here MUST be passed to the plugin&apos;s instantiate method (along with data, if necessary, as defined by the feature specification) or plugin instantiation will fail.</para><para>Return value must be freed by caller with <ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="788" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="728" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga611acd071c9d8980fa9b4e74449f534d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_plugin_get_optional_features</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_get_optional_features</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LV2 Features optionally supported by a plugin. Hosts MAY ignore optional plugin features for whatever reasons. Plugins MUST operate (at least somewhat) if they are instantiated without being passed optional features.</para><para>Return value must be freed by caller with <ref refid="group__lilv_1gac355adeca3dc54366899b6f1ef3b0fc3" kindref="member">lilv_nodes_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="799" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="718" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga45572544f69e24cb76eb6245374f40fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugin_has_extension_data</definition>
        <argsstring>(const LilvPlugin *p, const LilvNode *uri)</argsstring>
        <name>lilv_plugin_has_extension_data</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether or not a plugin provides a specific extension data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="805" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="738" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab440c12bac6611b38fc1b8cd4fefeb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_plugin_get_extension_data</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_get_extension_data</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a sequence of all extension data provided by a plugin. This can be used to find which <ref refid="struct_u_r_is" kindref="compound">URIs</ref> lilv_instance_get_extension_data() will return a value for without instantiating the plugin. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="814" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="756" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gafcd5012a82daecb65b476d9b3152de96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>LILV_API uint32_t lilv_plugin_get_num_ports</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_get_num_ports</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of ports on this plugin. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="820" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="479" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gadd6aa2c341f27f2774da6606492400ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_plugin_get_port_ranges_float</definition>
        <argsstring>(const LilvPlugin *p, float *min_values, float *max_values, float *def_values)</argsstring>
        <name>lilv_plugin_get_port_ranges_float</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>min_values</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max_values</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>def_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the port ranges (minimum, maximum and default values) for all ports. <computeroutput>min_values</computeroutput>, <computeroutput>max_values</computeroutput> and <computeroutput>def_values</computeroutput> must either point to an array of N floats, where N is the value returned by <ref refid="group__lilv_1gafcd5012a82daecb65b476d9b3152de96" kindref="member">lilv_plugin_get_num_ports()</ref> for this plugin, or NULL. The elements of the array will be set to the the minimum, maximum and default values of the ports on this plugin, with array index corresponding to port index. If a port doesn&apos;t have a minimum, maximum or default value, or the port&apos;s type is not float, the corresponding array element will be set to NAN.</para><para>This is a convenience method for the common case of getting the range of all float ports on a plugin, and may be significantly faster than repeated calls to lilv_port_get_range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="837" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="486" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3b8af621a8ac146dc83631ca0602cfa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>LILV_API uint32_t lilv_plugin_get_num_ports_of_class</definition>
        <argsstring>(const LilvPlugin *p, const LilvNode *class_1,...)</argsstring>
        <name>lilv_plugin_get_num_ports_of_class</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>class_1</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of ports on this plugin that are members of some class(es). Note that this is a varargs function so ports fitting any type &apos;profile&apos; desired can be found quickly. REMEMBER TO TERMINATE THE PARAMETER LIST OF THIS FUNCTION WITH NULL OR VERY NASTY THINGS WILL HAPPEN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="849" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="573" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae8594e96160882afb331b833e0c2f1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>LILV_API uint32_t lilv_plugin_get_num_ports_of_class_va</definition>
        <argsstring>(const LilvPlugin *p, const LilvNode *class_1, va_list args)</argsstring>
        <name>lilv_plugin_get_num_ports_of_class_va</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>class_1</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of <ref refid="group__lilv_1ga3b8af621a8ac146dc83631ca0602cfa6" kindref="member">lilv_plugin_get_num_ports_of_class()</ref> that takes a va_list.</para><para>This function calls va_arg() on <computeroutput>args</computeroutput> but does not call va_end(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="859" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="533" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga19c0b4fb6120f413074b7062842736a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugin_has_latency</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_has_latency</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether or not the plugin introduces (and reports) latency. The index of the latency port can be found with lilv_plugin_get_latency_port() ONLY if this function returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="870" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="586" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga434a3733a0818c9c7211870c75ba0cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>LILV_API uint32_t lilv_plugin_get_latency_port_index</definition>
        <argsstring>(const LilvPlugin *p)</argsstring>
        <name>lilv_plugin_get_latency_port_index</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the index of the plugin&apos;s latency port. It is a fatal error to call this on a plugin without checking if the port exists by first calling lilv_plugin_has_latency.</para><para>Any plugin that introduces unwanted latency that should be compensated for (by hosts with the ability/need) MUST provide this port, which is a control rate output port that reports the latency for each cycle in frames. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="882" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="673" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga445ad016b3e71765a12aab39f9f9a6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
        <definition>LILV_API const LilvPort* lilv_plugin_get_port_by_index</definition>
        <argsstring>(const LilvPlugin *plugin, uint32_t index)</argsstring>
        <name>lilv_plugin_get_port_by_index</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a port on <computeroutput>plugin</computeroutput> by <computeroutput>index</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="888" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="762" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga53d4023368ee05ef2f8ddcc2a49082d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
        <definition>LILV_API const LilvPort* lilv_plugin_get_port_by_symbol</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvNode *symbol)</argsstring>
        <name>lilv_plugin_get_port_by_symbol</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a port on <computeroutput>plugin</computeroutput> by <computeroutput>symbol</computeroutput>. Note this function is slower than lilv_plugin_get_port_by_index, especially on plugins with a very large number of ports. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="897" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="773" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga66f7b3acd4721a91084abaa489cc8f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
        <definition>LILV_API const LilvPort* lilv_plugin_get_port_by_designation</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvNode *port_class, const LilvNode *designation)</argsstring>
        <name>lilv_plugin_get_port_by_designation</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>port_class</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>designation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a port on <computeroutput>plugin</computeroutput> by its lv2:designation.</para><para>The designation of a port describes the meaning, assignment, allocation or role of the port, e.g. &quot;left channel&quot; or &quot;gain&quot;. If found, the port with matching <computeroutput>port_class</computeroutput> and <computeroutput>designation</computeroutput> is be returned, otherwise NULL is returned. The <computeroutput>port_class</computeroutput> can be used to distinguish the input and output ports for a particular designation. If <computeroutput>port_class</computeroutput> is NULL, any port with the given designation will be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="911" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="646" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga72e18ca0c04b2f6b73910309d4ed7527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_plugin_get_project</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_project</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the project the plugin is a part of.</para><para>More information about the project can be read via <ref refid="group__lilv_1ga1545945352d9baf925fe9f19d1881244" kindref="member">lilv_world_find_nodes()</ref>, typically using properties from DOAP (e.g. doap:name). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="922" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="787" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga48685f055adfb693ac7a46a7ea380567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_plugin_get_author_name</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_author_name</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the full name of the plugin&apos;s author. Returns NULL if author name is not present. Returned value must be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="930" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="858" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga284e297b4b0701f09b595e90d4c2b901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_plugin_get_author_email</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_author_email</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the email address of the plugin&apos;s author. Returns NULL if author email address is not present. Returned value must be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="938" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="872" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga0786d4642a8e15c74019f05a71381524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_plugin_get_author_homepage</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_author_homepage</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the address of the plugin author&apos;s home page. Returns NULL if author homepage is not present. Returned value must be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="946" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="886" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad4bff1e2e6b3db77cc2a5c43704d6cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_plugin_is_replaced</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_is_replaced</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>plugin</computeroutput> has been replaced by another plugin.</para><para>The plugin will still be usable, but hosts should hide them from their user interfaces to prevent users from using deprecated plugins. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="955" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="900" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab1c58f561dd59b2688a3d50fb7c51d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_plugin_write_description</definition>
        <argsstring>(LilvWorld *world, const LilvPlugin *plugin, const LilvNode *base_uri, FILE *plugin_file)</argsstring>
        <name>lilv_plugin_write_description</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>base_uri</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>plugin_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the Turtle description of <computeroutput>plugin</computeroutput> to <computeroutput>plugin_file</computeroutput>.</para><para>This function is particularly useful for porting plugins in conjunction with an LV2 bridge such as NASPRO. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="964" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="1018" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga240e433315f29cf81de98904910d501d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_plugin_write_manifest_entry</definition>
        <argsstring>(LilvWorld *world, const LilvPlugin *plugin, const LilvNode *base_uri, FILE *manifest_file, const char *plugin_file_path)</argsstring>
        <name>lilv_plugin_write_manifest_entry</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>base_uri</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>manifest_file</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>plugin_file_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a manifest entry for <computeroutput>plugin</computeroutput> to <computeroutput>manifest_file</computeroutput>.</para><para>This function is intended for use with <ref refid="group__lilv_1gab1c58f561dd59b2688a3d50fb7c51d55" kindref="member">lilv_plugin_write_description()</ref> to write a complete description of a plugin to a bundle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="976" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="1057" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga6070a384fbd949ec78ae7a8e323139f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_plugin_get_related</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvNode *type)</argsstring>
        <name>lilv_plugin_get_related</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the resources related to <computeroutput>plugin</computeroutput> with lv2:appliesTo.</para><para>Some plugin-related resources are not linked directly to the plugin with rdfs:seeAlso and thus will not be automatically loaded along with the plugin data (usually for performance reasons). All such resources of the given <computeroutput>type</computeroutput> related to <computeroutput>plugin</computeroutput> can be accessed with this function.</para><para>If <computeroutput>type</computeroutput> is NULL, all such resources will be returned, regardless of type.</para><para>To actually load the data for each returned resource, use lilv_world_load_resource. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="996" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="958" bodyend="986"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Port</header>
      <memberdef kind="function" id="group__lilv_1ga2b4217e2ea80059580f62f163b5a2df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_port_get_node</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the RDF node of <computeroutput>port</computeroutput>.</para><para>Ports nodes may be may be <ref refid="struct_u_r_is" kindref="compound">URIs</ref> or blank nodes.</para><para><simplesect kind="return"><para>A shared node which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1012" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga60b499a485768d393e702f360b79e7f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_port_get_value</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port, const LilvNode *predicate)</argsstring>
        <name>lilv_port_get_value</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port analog of lilv_plugin_get_value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1019" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="115" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga478aacf9e903d75e219d8b7933033899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_port_get</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port, const LilvNode *predicate)</argsstring>
        <name>lilv_port_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a single property value of a port.</para><para>This is equivalent to lilv_nodes_get_first(lilv_port_get_value(...)) but is simpler to use in the common case of only caring about one value. The caller is responsible for freeing the returned node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1031" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="129" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad8fe51eccbdd394d79c4cfea4e2e31e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API LilvNodes* lilv_port_get_properties</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_properties</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the LV2 port properties of a port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1039" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="255" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa1c8bc52813822b3a8c72bc7c0a0d854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_port_has_property</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const LilvNode *property_uri)</argsstring>
        <name>lilv_port_has_property</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>property_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a port has a certain property. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1046" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3174411c0bb8e6d0ce49c003dd841c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_port_supports_event</definition>
        <argsstring>(const LilvPlugin *p, const LilvPort *port, const LilvNode *event_type)</argsstring>
        <name>lilv_port_supports_event</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether a port supports a certain event type.</para><para>More precisely, this returns true iff the port has an atom:supports or an ev:supportsEvent property with <computeroutput>event_type</computeroutput> as the value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1057" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="77" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga50b31f651dc86a9ae3f9728c24a432a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>LILV_API uint32_t lilv_port_get_index</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_index</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the index of a port. The index is only valid for the life of the plugin and may change between versions. For a stable identifier, use the symbol. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1067" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac88834a3a7d7c6fcdd706d5a92d7ec48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_port_get_symbol</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_symbol</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the symbol of a port. The &apos;symbol&apos; is a short string, a valid C identifier. Returned value is owned by <computeroutput>port</computeroutput> and must not be freed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1076" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga0ccf972acce75df5da6068bdbe76a24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_port_get_name</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_name</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a port. This is guaranteed to return the untranslated name (the doap:name in the data file without a language tag). Returned value must be freed by the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1086" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="157" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3f15f3d4e2bcfe24e8383979643fe2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API const LilvNodes* lilv_port_get_classes</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_classes</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all the classes of a port. This can be used to determine if a port is an input, output, audio, control, midi, etc, etc, though it&apos;s simpler to use lilv_port_is_a. The returned list does not include lv2:Port, which is implied. Returned value is shared and must not be destroyed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1097" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga67b641e2002e6b68b40bd8f7049201cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_port_is_a</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port, const LilvNode *port_class)</argsstring>
        <name>lilv_port_is_a</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>port_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if a port is of a given class (input, output, audio, etc). For convenience/performance/extensibility reasons, hosts are expected to create a LilvNode for each port class they &quot;care about&quot;. Well-known type URI strings are defined (e.g. LILV_URI_INPUT_PORT) for convenience, but this function is designed so that <ref refid="namespace_lilv" kindref="compound">Lilv</ref> is usable with any port types without requiring explicit support in <ref refid="namespace_lilv" kindref="compound">Lilv</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1109" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa57988fe95d1944202fe2b068788a998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_port_get_range</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port, LilvNode **deflt, LilvNode **min, LilvNode **max)</argsstring>
        <name>lilv_port_get_range</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>deflt</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default, minimum, and maximum values of a port.</para><para><computeroutput>def</computeroutput>, <computeroutput>min</computeroutput>, and <computeroutput>max</computeroutput> are outputs, pass pointers to uninitialized LilvNode* variables. These will be set to point at new values (which must be freed by the caller using lilv_node_free), or NULL if the value does not exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1122" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="186" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac358b3310545c99e00583696238633da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a059c9ec61f4497a433d3e6030e9a3f37" kindref="member">LilvScalePoints</ref> *</type>
        <definition>LILV_API LilvScalePoints* lilv_port_get_scale_points</definition>
        <argsstring>(const LilvPlugin *plugin, const LilvPort *port)</argsstring>
        <name>lilv_port_get_scale_points</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a772dad64b72690372c1f78314012bda5" kindref="member">LilvPort</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the scale points (enumeration values) of a port. This returns a collection of &apos;interesting&apos; named values of a port (e.g. appropriate entries for a UI selector associated with this port). Returned value may be NULL if <computeroutput>port</computeroutput> has no scale points, otherwise it must be freed by caller with <ref refid="group__lilv_1gad93c3a234a5138a9b60f3666904765cf" kindref="member">lilv_scale_points_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1136" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/port.c" bodystart="219" bodyend="252"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Plugin State</header>
      <memberdef kind="typedef" id="group__lilv_1ga1b8564e04efdcebe374b7d6d5c6ae4e0" prot="public" static="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *(*</type>
        <definition>typedef const void*(* LilvGetPortValueFunc) (const char *port_symbol, void *user_data, uint32_t *size, uint32_t *type)</definition>
        <argsstring>)(const char *port_symbol, void *user_data, uint32_t *size, uint32_t *type)</argsstring>
        <name>LilvGetPortValueFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_function" kindref="compound">Function</ref> to get a port value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user_data passed to <ref refid="group__lilv_1ga3893e8466d5db6005c5479bc2d1e86d2" kindref="member">lilv_state_new_from_instance()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>(Output) The size of the returned value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>(Output) The URID of the type of the returned value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the port value.</para></simplesect>
This function MUST set <computeroutput>size</computeroutput> and <computeroutput>type</computeroutput> appropriately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1198" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__lilv_1ga2e4d764503e2720148d87c29c1972dc3" prot="public" static="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*</type>
        <definition>typedef void(* LilvSetPortValueFunc) (const char *port_symbol, void *user_data, const void *value, uint32_t size, uint32_t type)</definition>
        <argsstring>)(const char *port_symbol, void *user_data, const void *value, uint32_t size, uint32_t type)</argsstring>
        <name>LilvSetPortValueFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_function" kindref="compound">Function</ref> to set a port value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user_data passed to <ref refid="group__lilv_1gac6d0274e7176231852d949ebd1b8f0b6" kindref="member">lilv_state_restore()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <computeroutput>value</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The URID of the type of <computeroutput>value</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the port value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1324" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga7eeb94a9e78b459177e84a6251c8e2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_world</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, const LilvNode *subject)</argsstring>
        <name>lilv_state_new_from_world</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a state snapshot from the world RDF model. This function can be used to load the default state of a plugin by passing the plugin URI as the <computeroutput>subject</computeroutput> parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject of the state description (e.g. a preset URI). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new LilvState which must be freed with <ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free()</ref>, or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1155" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="574" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gadb05ef8df3f51aff5b28d83e5d7fd097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_file</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, const LilvNode *subject, const char *path)</argsstring>
        <name>lilv_state_new_from_file</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a state snapshot from a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject of the state description (e.g. a preset URI). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the file containing the state description. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new LilvState which must be freed with <ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free()</ref>.</para></simplesect>
If <computeroutput>subject</computeroutput> is NULL, it is taken to be the URI of the file (i.e. &quot;&lt;&gt;&quot; in Turtle).</para><para>This function parses the file separately to create the state, it does not parse the file into the world model, i.e. the returned state is the only new memory consumed once this function returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1175" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="591" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga289d9bb5c189f085fc4bd938a9c0d4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_string</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, const char *str)</argsstring>
        <name>lilv_state_new_from_string</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a state snapshot from a string made by <ref refid="group__lilv_1ga98689483de36ea817380b1960bf44458" kindref="member">lilv_state_to_string()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1184" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="644" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3893e8466d5db6005c5479bc2d1e86d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
        <definition>LILV_API LilvState* lilv_state_new_from_instance</definition>
        <argsstring>(const LilvPlugin *plugin, LilvInstance *instance, LV2_URID_Map *map, const char *file_dir, const char *copy_dir, const char *link_dir, const char *save_dir, LilvGetPortValueFunc get_value, void *user_data, uint32_t flags, const LV2_Feature *const *features)</argsstring>
        <name>lilv_state_new_from_instance</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>file_dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>copy_dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>link_dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>save_dir</declname>
        </param>
        <param>
          <type><ref refid="group__lilv_1ga1b8564e04efdcebe374b7d6d5c6ae4e0" kindref="member">LilvGetPortValueFunc</ref></type>
          <declname>get_value</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new state snapshot from a plugin instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plugin</parametername>
</parameternamelist>
<parameterdescription>
<para>The plugin this state applies to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of <computeroutput>plugin</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>The map to use for mapping <ref refid="struct_u_r_is" kindref="compound">URIs</ref> in state.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of files created by the plugin earlier (or NULL). This is for hosts that support file creation at any time with state state:makePath. These files will be copied as necessary to <computeroutput>copy_dir</computeroutput> and not be referred to directly in state (a temporary directory is appropriate).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of copies of files in <computeroutput>file_dir</computeroutput> (or NULL). This directory will have the same structure as <computeroutput>file_dir</computeroutput> but with possibly modified file names to distinguish different revisions. If you only care about saving one state snapshot, it can be the same as <computeroutput>save_dir</computeroutput>. Plugin state will refer to files in this directory.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>save_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of files created by plugin during save (or NULL). If the state will be saved, this should be the bundle directory later passed to lilv_state_save.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_function" kindref="compound">Function</ref> to get port values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to <computeroutput>get_value</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory of links to external files (or NULL). A link will be made in this directory to any external files referred to in plugin state. In turn, links will be created in the save directory to these links (e.g. save_dir/file =&gt; link_dir/file =&gt; /foo/bar/file). This allows many state snapshots to share a single link to an external file, so archival (e.g. with tar -h) will not create several copies of the file. If this is not required, it can be the same as save_dir.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitwise OR of LV2_State_Flags values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>Features to pass <ref refid="struct___l_v2___state___interface_1ae564742663a6d908d9745c9eb8bdb347" kindref="member">LV2_State_Interface.save()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new LilvState which must be freed with <ref refid="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" kindref="member">lilv_state_free()</ref>.</para></simplesect>
This function may be called simultaneously with any instance function (except discovery functions) unless the threading class of that function explicitly disallows this.</para><para>To support advanced file functionality, there are several directory parameters. Simple hosts that only wish to save a single plugins state once may simply use the same directory for all of them (or pass NULL to not support files at all). The multiple parameters are necessary to support saving an instances state many times while avoiding any duplication of data.</para><para>If supported (via state:makePath passed to <ref refid="struct___l_v2___descriptor_1a2f7e1c335ddf27d3a0017207421fe9f5" kindref="member">LV2_Descriptor::instantiate()</ref>), <computeroutput>file_dir</computeroutput> should be the directory where any files created by the plugin (not during save time, e.g. during instantiation) are stored. These files will be copied to preserve their state at this time.plugin-created files are stored. <ref refid="namespace_lilv" kindref="compound">Lilv</ref> will assume any files within this directory (recursively) are created by the plugin and all other files are immutable. Note that this function does not save the state, use <ref refid="group__lilv_1gae38a5ed3424417b909163d3b64c1edb5" kindref="member">lilv_state_save()</ref> for that.</para><para>See <ulink url="http://lv2plug.in/ns/ext/state/state.h">state.h</ulink> from the LV2 <ref refid="struct_state" kindref="compound">State</ref> extension for details on the <computeroutput>flags</computeroutput> and <computeroutput>features</computeroutput> parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1267" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="323" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga70d6b6aaf421e10232ddfeebfb26fc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_state_free</definition>
        <argsstring>(LilvState *state)</argsstring>
        <name>lilv_state_free</name>
        <param>
          <type><ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1283" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1009" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae93aca68826dac502cd623e7d900a784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_state_equals</definition>
        <argsstring>(const LilvState *a, const LilvState *b)</argsstring>
        <name>lilv_state_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>a</computeroutput> is equivalent to <computeroutput>b</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1289" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1034" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga50d018031023edef372722c24260fdd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_state_get_num_properties</definition>
        <argsstring>(const LilvState *state)</argsstring>
        <name>lilv_state_get_num_properties</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of properties in <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1295" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1077" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga4552844be668aeecfa3f11f326392877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_state_get_plugin_uri</definition>
        <argsstring>(const LilvState *state)</argsstring>
        <name>lilv_state_get_plugin_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of the plugin <computeroutput>state</computeroutput> applies to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1301" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1083" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga7effbd89fcd049e29d74da1769e35f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_state_get_label</definition>
        <argsstring>(const LilvState *state)</argsstring>
        <name>lilv_state_get_label</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the label of <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1307" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1089" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga93dc2196595317603aad990804448dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_state_set_label</definition>
        <argsstring>(LilvState *state, const char *label)</argsstring>
        <name>lilv_state_set_label</name>
        <param>
          <type><ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the label of <computeroutput>state</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1313" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="1095" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac6d0274e7176231852d949ebd1b8f0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_state_restore</definition>
        <argsstring>(const LilvState *state, LilvInstance *instance, LilvSetPortValueFunc set_value, void *user_data, uint32_t flags, const LV2_Feature *const *features)</argsstring>
        <name>lilv_state_restore</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="group__lilv_1ga2e4d764503e2720148d87c29c1972dc3" kindref="member">LilvSetPortValueFunc</ref></type>
          <declname>set_value</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restore a plugin instance from a state snapshot. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to restore, which must apply to the correct plugin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of the plugin <computeroutput>state</computeroutput> applies to, or NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to set a port value (may be NULL). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to <computeroutput>set_value</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitwise OR of LV2_State_Flags values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>Features to pass <ref refid="struct___l_v2___state___interface_1af1b48ea50175bfef63d4dd35d09d90b8" kindref="member">LV2_State_Interface.restore()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will set all the properties of <computeroutput>instance</computeroutput>, if given, to the values stored in <computeroutput>state</computeroutput>. If <computeroutput>set_value</computeroutput> is provided, it will be called (with the given <computeroutput>user_data</computeroutput>) to restore each port value, otherwise the host must restore the port values itself (using lilv_state_get_port_value) in order to completely restore <computeroutput>state</computeroutput>.</para><para>If the state has properties and <computeroutput>instance</computeroutput> is given, this function is in the &quot;instantiation&quot; threading class, i.e. it MUST NOT be called simultaneously with any function on the same plugin instance. If the state has no properties, only port values are set via <computeroutput>set_value</computeroutput>.</para><para>See <ulink url="http://lv2plug.in/ns/ext/state/state.h">state.h</ulink> from the LV2 <ref refid="struct_state" kindref="compound">State</ref> extension for details on the <computeroutput>flags</computeroutput> and <computeroutput>features</computeroutput> parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1354" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="399" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gae38a5ed3424417b909163d3b64c1edb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_state_save</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, LV2_URID_Unmap *unmap, const LilvState *state, const char *uri, const char *dir, const char *filename)</argsstring>
        <name>lilv_state_save</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a23cd7da781ba055d6a1362a320c1d451" kindref="member">LV2_URID_Unmap</ref> *</type>
          <declname>unmap</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save state to a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unmap</parametername>
</parameternamelist>
<parameterdescription>
<para>URID unmapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_state" kindref="compound">State</ref> to save. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>URI of state, may be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the bundle directory to save into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the state file relative to <computeroutput>dir</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
The format of state on disk is compatible with that defined in the LV2 preset extension, i.e. this function may be used to save presets which can be loaded by any host.</para><para>If <computeroutput>uri</computeroutput> is NULL, the preset URI will be a file URI, but the bundle can safely be moved (i.e. the state file will use &quot;&lt;&gt;&quot; as the subject). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1379" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="929" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga98689483de36ea817380b1960bf44458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> char *</type>
        <definition>LILV_API char* lilv_state_to_string</definition>
        <argsstring>(LilvWorld *world, LV2_URID_Map *map, LV2_URID_Unmap *unmap, const LilvState *state, const char *uri, const char *base_uri)</argsstring>
        <name>lilv_state_to_string</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a23cd7da781ba055d6a1362a320c1d451" kindref="member">LV2_URID_Unmap</ref> *</type>
          <declname>unmap</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a0a1c6a8e4a6fc887682becf3a43b625d" kindref="member">LilvState</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>base_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save state to a string. This function does not use the filesystem.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>URID mapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unmap</parametername>
</parameternamelist>
<parameterdescription>
<para>URID unmapper. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to serialize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>URI for the state description (mandatory). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>Base URI for serialisation. Unless you know what you are doing, pass NULL for this, otherwise the state may not be restorable via <ref refid="group__lilv_1ga289d9bb5c189f085fc4bd938a9c0d4cb" kindref="member">lilv_state_new_from_string()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1400" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c" bodystart="984" bodyend="1006"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Scale Point</header>
      <memberdef kind="function" id="group__lilv_1gacf72c12ce63b1904a3027552515c226b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_scale_point_get_label</definition>
        <argsstring>(const LilvScalePoint *point)</argsstring>
        <name>lilv_scale_point_get_label</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a582b8861d7e51d38ff769281ef4ae518" kindref="member">LilvScalePoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the label of this scale point (enumeration value) Returned value is owned by <computeroutput>point</computeroutput> and must not be freed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1418" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/scalepoint.c" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf64223c52368882fa3121ff369b19126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_scale_point_get_value</definition>
        <argsstring>(const LilvScalePoint *point)</argsstring>
        <name>lilv_scale_point_get_value</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a582b8861d7e51d38ff769281ef4ae518" kindref="member">LilvScalePoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of this scale point (enumeration value) Returned value is owned by <computeroutput>point</computeroutput> and must not be freed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1425" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/scalepoint.c" bodystart="40" bodyend="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Plugin Class</header>
      <memberdef kind="function" id="group__lilv_1ga01f07e0a32914844dae78c0bd3e8d036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_plugin_class_get_parent_uri</definition>
        <argsstring>(const LilvPluginClass *plugin_class)</argsstring>
        <name>lilv_plugin_class_get_parent_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
          <declname>plugin_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of this class&apos; superclass. Returned value is owned by <computeroutput>plugin_class</computeroutput> and must not be freed by caller. Returned value may be NULL, if class has no parent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1439" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/pluginclass.c" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga06cd3c02c5276d78797d3782fc952cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_plugin_class_get_uri</definition>
        <argsstring>(const LilvPluginClass *plugin_class)</argsstring>
        <name>lilv_plugin_class_get_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
          <declname>plugin_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of this plugin class. Returned value is owned by <computeroutput>plugin_class</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1446" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/pluginclass.c" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab9655154e2edcd72ad1d244767e444b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_plugin_class_get_label</definition>
        <argsstring>(const LilvPluginClass *plugin_class)</argsstring>
        <name>lilv_plugin_class_get_label</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
          <declname>plugin_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the label of this plugin class, ie &quot;Oscillators&quot;. Returned value is owned by <computeroutput>plugin_class</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1453" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/pluginclass.c" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gac9165a547996dc5637086190c78283a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1a1ef5389c0a24cb8e0adcf971d2d12f0e" kindref="member">LilvPluginClasses</ref> *</type>
        <definition>LILV_API LilvPluginClasses* lilv_plugin_class_get_children</definition>
        <argsstring>(const LilvPluginClass *plugin_class)</argsstring>
        <name>lilv_plugin_class_get_children</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94da06d43a4f980af280b9d8bf4ae1f0" kindref="member">LilvPluginClass</ref> *</type>
          <declname>plugin_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the subclasses of this plugin class. Returned value must be freed by caller with <ref refid="group__lilv_1ga2bb721cba50f759a9c7d549c3a9fb52a" kindref="member">lilv_plugin_classes_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1460" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/pluginclass.c" bodystart="71" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Plugin Instance</header>
      <memberdef kind="function" id="group__lilv_1ga10eec215ea5fa4fa45d0508e840f3c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
        <definition>LILV_API LilvInstance* lilv_plugin_instantiate</definition>
        <argsstring>(const LilvPlugin *plugin, double sample_rate, const LV2_Feature *const *features)</argsstring>
        <name>lilv_plugin_instantiate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sample_rate</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1a78d13b607443404459db283371723234" kindref="member">LV2_Feature</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiate a plugin. The returned value is a lightweight handle for an LV2 plugin instance, it does not refer to <computeroutput>plugin</computeroutput>, or any other <ref refid="namespace_lilv" kindref="compound">Lilv</ref> state. The caller must eventually free it with <ref refid="group__lilv_1gadad7cb14d78818de84d642c39a0c19d8" kindref="member">lilv_instance_free()</ref>. <computeroutput>features</computeroutput> is a NULL-terminated array of features the host supports. NULL may be passed if the host supports no additional features. <simplesect kind="return"><para>NULL if instantiation failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1499" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/instance.c" bodystart="25" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gadad7cb14d78818de84d642c39a0c19d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_instance_free</definition>
        <argsstring>(LilvInstance *instance)</argsstring>
        <name>lilv_instance_free</name>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a plugin instance. It is safe to call this function on NULL. <computeroutput>instance</computeroutput> is invalid after this call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1509" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/instance.c" bodystart="113" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa708f4c4ee8d2749039f18dd74ae74c0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>static const char* lilv_instance_get_uri</definition>
        <argsstring>(const LilvInstance *instance)</argsstring>
        <name>lilv_instance_get_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of the plugin which <computeroutput>instance</computeroutput> is an instance of. Returned string is shared and must not be modified or deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1518" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1518" bodyend="1521"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga09030c327c1e786a654708d17ae86811" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lilv_instance_connect_port</definition>
        <argsstring>(LilvInstance *instance, uint32_t port_index, void *data_location)</argsstring>
        <name>lilv_instance_connect_port</name>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>port_index</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data_location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect a port to a data location. This may be called regardless of whether the plugin is activated, activation and deactivation does not destroy port connections. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1529" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1529" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gafed8d6f23496a5601cbbfa69b0081e53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lilv_instance_activate</definition>
        <argsstring>(LilvInstance *instance)</argsstring>
        <name>lilv_instance_activate</name>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activate a plugin instance. This resets all state information in the plugin, except for port data locations (as set by lilv_instance_connect_port). This MUST be called before calling lilv_instance_run. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1544" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1544" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa03e923f97a5556898370b7daa267bc5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lilv_instance_run</definition>
        <argsstring>(LilvInstance *instance, uint32_t sample_count)</argsstring>
        <name>lilv_instance_run</name>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>sample_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run <computeroutput>instance</computeroutput> for <computeroutput>sample_count</computeroutput> frames. If the hint lv2:hardRTCapable is set for this plugin, this function is guaranteed not to block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1556" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1556" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gab95606d0c53ec2324e3be981df1d41ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lilv_instance_deactivate</definition>
        <argsstring>(LilvInstance *instance)</argsstring>
        <name>lilv_instance_deactivate</name>
        <param>
          <type><ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deactivate a plugin instance. Note that to run the plugin after this you must activate it, which will reset all state information (except port connections). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1568" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1568" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad776b6017c2b29722434f2bd25237f77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static const void* lilv_instance_get_extension_data</definition>
        <argsstring>(const LilvInstance *instance, const char *uri)</argsstring>
        <name>lilv_instance_get_extension_data</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get extension data from the plugin instance. The type and semantics of the data returned is specific to the particular extension, though in all cases it is shared and must not be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1580" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1580" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga74697c527d48e1115751f330fd128c2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lv2_8h_1ac9db79f137f126ef10ef707b6de85a78" kindref="member">LV2_Descriptor</ref> *</type>
        <definition>static const LV2_Descriptor* lilv_instance_get_descriptor</definition>
        <argsstring>(const LilvInstance *instance)</argsstring>
        <name>lilv_instance_get_descriptor</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LV2_Descriptor of the plugin instance. Normally hosts should not need to access the LV2_Descriptor directly, use the lilv_instance_* functions.</para><para>The returned descriptor is shared and must not be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1597" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1597" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gabf661061e9ccddae15f13ddfd41a2b3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lv2_8h_1a95eafb0a5290f30bcdc8c0f8eb992eaf" kindref="member">LV2_Handle</ref></type>
        <definition>static LV2_Handle lilv_instance_get_handle</definition>
        <argsstring>(const LilvInstance *instance)</argsstring>
        <name>lilv_instance_get_handle</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1acdb0d241e2506a6f59bd2d8dd427b99c" kindref="member">LilvInstance</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LV2_Handle of the plugin instance. Normally hosts should not need to access the LV2_Handle directly, use the lilv_instance_* functions.</para><para>The returned handle is shared and must not be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1610" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1610" bodyend="1613"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Plugin UI</header>
      <memberdef kind="typedef" id="group__lilv_1gabe16181bb064cb9e09519d15430c0f62" prot="public" static="no">
        <type>unsigned(*</type>
        <definition>typedef unsigned(* LilvUISupportedFunc) (const char *container_type_uri, const char *ui_type_uri)</definition>
        <argsstring>)(const char *container_type_uri, const char *ui_type_uri)</argsstring>
        <name>LilvUISupportedFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_function" kindref="compound">Function</ref> to determine whether a UI type is supported.</para><para>This is provided by the user and must return non-zero iff using a UI of type <computeroutput>ui_type_uri</computeroutput> in a container of type <computeroutput>container_type_uri</computeroutput> is supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1663" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" bodystart="1663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga420636169dd115cf90b2e136309bbca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1af0d073c97d807e531f174ce2ee1b5492" kindref="member">LilvUIs</ref> *</type>
        <definition>LILV_API LilvUIs* lilv_plugin_get_uis</definition>
        <argsstring>(const LilvPlugin *plugin)</argsstring>
        <name>lilv_plugin_get_uis</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a94e36303167a78a0c392f881136b461b" kindref="member">LilvPlugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all UIs for <computeroutput>plugin</computeroutput>. Returned value must be freed by caller using <ref refid="group__lilv_1ga938f9a32ad1d4c9f8e83d21802764ba2" kindref="member">lilv_uis_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1628" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/plugin.c" bodystart="906" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga47bad236205f9247176442b3483d23ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_ui_get_uri</definition>
        <argsstring>(const LilvUI *ui)</argsstring>
        <name>lilv_ui_get_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI of a Plugin UI. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ui</parametername>
</parameternamelist>
<parameterdescription>
<para>The Plugin UI </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared value which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1636" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/ui.c" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gace150176f3c6ea0dd2a1a197c0bbbeaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a256c2c4443307f320de24bb31198df83" kindref="member">LilvNodes</ref> *</type>
        <definition>LILV_API const LilvNodes* lilv_ui_get_classes</definition>
        <argsstring>(const LilvUI *ui)</argsstring>
        <name>lilv_ui_get_classes</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the types (<ref refid="struct_u_r_is" kindref="compound">URIs</ref> of RDF classes) of a Plugin UI. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ui</parametername>
</parameternamelist>
<parameterdescription>
<para>The Plugin UI </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared value which must not be modified or freed.</para></simplesect>
Note that in most cases lilv_ui_is_supported should be used which finds the UI type, avoding the need to use this function (and type specific logic). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1647" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/ui.c" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga420cd7c6dd1edb02dc0c61d1a58e7985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_ui_is_a</definition>
        <argsstring>(const LilvUI *ui, const LilvNode *class_uri)</argsstring>
        <name>lilv_ui_is_a</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
          <declname>ui</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>class_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a plugin UI has a given type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ui</parametername>
</parameternamelist>
<parameterdescription>
<para>The Plugin UI </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>class_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI of the LV2 UI type to check this UI against </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1655" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/ui.c" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga4424197618e4ccac17b7006e54753cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> unsigned</type>
        <definition>LILV_API unsigned lilv_ui_is_supported</definition>
        <argsstring>(const LilvUI *ui, LilvUISupportedFunc supported_func, const LilvNode *container_type, const LilvNode **ui_type)</argsstring>
        <name>lilv_ui_is_supported</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
          <declname>ui</declname>
        </param>
        <param>
          <type><ref refid="group__lilv_1gabe16181bb064cb9e09519d15430c0f62" kindref="member">LilvUISupportedFunc</ref></type>
          <declname>supported_func</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>container_type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> **</type>
          <declname>ui_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff a Plugin UI is supported as a given widget type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ui</parametername>
</parameternamelist>
<parameterdescription>
<para>The Plugin UI </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>supported_func</parametername>
</parameternamelist>
<parameterdescription>
<para>User provided supported predicate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget type to host the UI within. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ui_type</parametername>
</parameternamelist>
<parameterdescription>
<para>(Output) If non-NULL, set to the native type of the UI which is owned by <computeroutput>ui</computeroutput> and must not be freed by the caller. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The embedding quality level returned by <computeroutput>supported_func</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1676" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/ui.c" bodystart="68" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga1f8c8224db86f61d1ec0968e85ea3f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_ui_get_bundle_uri</definition>
        <argsstring>(const LilvUI *ui)</argsstring>
        <name>lilv_ui_get_bundle_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI for a Plugin UI&apos;s bundle. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ui</parametername>
</parameternamelist>
<parameterdescription>
<para>The Plugin UI </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared value which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1687" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/ui.c" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gada80af09d7f40b543f3e7c2a0152a001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API const LilvNode* lilv_ui_get_binary_uri</definition>
        <argsstring>(const LilvUI *ui)</argsstring>
        <name>lilv_ui_get_binary_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1a42d32f453a79ab1c944daa6436f22dde" kindref="member">LilvUI</ref> *</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the URI for a Plugin UI&apos;s shared library. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ui</parametername>
</parameternamelist>
<parameterdescription>
<para>The Plugin UI </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared value which must not be modified or freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/lilv/lilv.h" line="1695" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/ui.c" bodystart="108" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="namespace_lilv" kindref="compound">Lilv</ref> is a simple yet powerful C API for using LV2 plugins.</para><para>For more information about LV2, see <ulink url="http://lv2plug.in">http://lv2plug.in</ulink>. For more information about <ref refid="namespace_lilv" kindref="compound">Lilv</ref>, see <ulink url="http://drobilla.net/software/lilv">http://drobilla.net/software/lilv</ulink>. </para>    </detaileddescription>
  </compounddef>
</doxygen>
