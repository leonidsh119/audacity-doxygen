<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lilv_2src_2node_8c" kind="file" language="C++">
    <compoundname>node.c</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="lilv__internal_8h" local="yes">lilv_internal.h</includes>
    <incdepgraph>
      <node id="24546">
        <label>lilv_internal.h</label>
        <link refid="lilv__internal_8h"/>
        <childnode refid="24547" relation="include">
        </childnode>
        <childnode refid="24548" relation="include">
        </childnode>
        <childnode refid="24544" relation="include">
        </childnode>
        <childnode refid="24549" relation="include">
        </childnode>
        <childnode refid="24551" relation="include">
        </childnode>
        <childnode refid="24552" relation="include">
        </childnode>
        <childnode refid="24556" relation="include">
        </childnode>
        <childnode refid="24557" relation="include">
        </childnode>
        <childnode refid="24559" relation="include">
        </childnode>
        <childnode refid="24560" relation="include">
        </childnode>
      </node>
      <node id="24555">
        <label>stdbool.h</label>
      </node>
      <node id="24553">
        <label>stdarg.h</label>
      </node>
      <node id="24558">
        <label>zix/common.h</label>
      </node>
      <node id="24550">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="24548" relation="include">
        </childnode>
      </node>
      <node id="24548">
        <label>stdint.h</label>
      </node>
      <node id="24544">
        <label>stdlib.h</label>
      </node>
      <node id="24552">
        <label>serd/serd.h</label>
        <link refid="serd_8h"/>
        <childnode refid="24553" relation="include">
        </childnode>
        <childnode refid="24547" relation="include">
        </childnode>
        <childnode refid="24548" relation="include">
        </childnode>
        <childnode refid="24554" relation="include">
        </childnode>
        <childnode refid="24555" relation="include">
        </childnode>
      </node>
      <node id="24547">
        <label>stddef.h</label>
      </node>
      <node id="24543">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="24556">
        <label>sord/sord.h</label>
        <link refid="sord_8h"/>
        <childnode refid="24547" relation="include">
        </childnode>
        <childnode refid="24548" relation="include">
        </childnode>
        <childnode refid="24554" relation="include">
        </childnode>
        <childnode refid="24552" relation="include">
        </childnode>
        <childnode refid="24555" relation="include">
        </childnode>
      </node>
      <node id="24562">
        <label>lv2/lv2plug.in/ns/ext/urid/urid.h</label>
        <link refid="urid_8h"/>
        <childnode refid="24548" relation="include">
        </childnode>
      </node>
      <node id="24545">
        <label>string.h</label>
      </node>
      <node id="24549">
        <label>float.h</label>
        <link refid="float_8h"/>
        <childnode refid="24550" relation="include">
        </childnode>
      </node>
      <node id="24542">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c</label>
        <link refid="lilv/src/node.c"/>
        <childnode refid="24543" relation="include">
        </childnode>
        <childnode refid="24544" relation="include">
        </childnode>
        <childnode refid="24545" relation="include">
        </childnode>
        <childnode refid="24546" relation="include">
        </childnode>
      </node>
      <node id="24560">
        <label>lilv/lilv.h</label>
        <link refid="lilv_8h"/>
        <childnode refid="24553" relation="include">
        </childnode>
        <childnode refid="24547" relation="include">
        </childnode>
        <childnode refid="24548" relation="include">
        </childnode>
        <childnode refid="24554" relation="include">
        </childnode>
        <childnode refid="24561" relation="include">
        </childnode>
        <childnode refid="24562" relation="include">
        </childnode>
        <childnode refid="24555" relation="include">
        </childnode>
      </node>
      <node id="24559">
        <label>lilv_config.h</label>
      </node>
      <node id="24561">
        <label>lv2/lv2plug.in/ns/lv2core/lv2.h</label>
        <link refid="lv2_8h"/>
        <childnode refid="24548" relation="include">
        </childnode>
      </node>
      <node id="24554">
        <label>stdio.h</label>
      </node>
      <node id="24557">
        <label>zix/tree.h</label>
        <link refid="lilv_2src_2zix_2tree_8h"/>
        <childnode refid="24547" relation="include">
        </childnode>
        <childnode refid="24558" relation="include">
        </childnode>
      </node>
      <node id="24551">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lilv_2src_2node_8c_1a266ab2dd56f3dfa72887c936b8b2376f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lilv_node_set_numerics_from_string</definition>
        <argsstring>(LilvNode *val, size_t len)</argsstring>
        <name>lilv_node_set_numerics_from_string</name>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="24" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="24" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LilvNode* lilv_node_new</definition>
        <argsstring>(LilvWorld *world, LilvNodeType type, const char *str)</argsstring>
        <name>lilv_node_new</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536" kindref="member">LilvNodeType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Note that if <computeroutput>type</computeroutput> is numeric or boolean, the returned value is corrupt until lilv_node_set_numerics_from_string is called. It is not automatically called from here to avoid overhead and imprecision when the exact string value is known. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="53" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="53" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="lilv_2src_2node_8c_1ab85cc3ce5e142d7141219b15353ee671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LilvNode* lilv_node_new_from_node</definition>
        <argsstring>(LilvWorld *world, const SordNode *node)</argsstring>
        <name>lilv_node_new_from_node</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new LilvNode from <computeroutput>node</computeroutput>, or return NULL if impossible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="98" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="98" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaadc0a9397da39725b2aa7030dfea7786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_uri</definition>
        <argsstring>(LilvWorld *world, const char *uri)</argsstring>
        <name>lilv_new_uri</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new URI value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="151" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga84663ba7913d9558a163b835035b606f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_file_uri</definition>
        <argsstring>(LilvWorld *world, const char *host, const char *path)</argsstring>
        <name>lilv_new_file_uri</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new file URI value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>Host name, or NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path on host. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new node that must be freed by caller.</para></simplesect>
Relative paths are resolved against the current working directory. Note that this may yield unexpected results if <computeroutput>host</computeroutput> is another machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="157" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga579adb7c7e071bf43d8775e48e6edc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_string</definition>
        <argsstring>(LilvWorld *world, const char *str)</argsstring>
        <name>lilv_new_string</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new string value (with no language). Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="170" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga2d87a9716a851a2a2f84771875ea2c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_int</definition>
        <argsstring>(LilvWorld *world, int val)</argsstring>
        <name>lilv_new_int</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new integer value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="176" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa5a7864c4949fdf3d4bb6533144265d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_float</definition>
        <argsstring>(LilvWorld *world, float val)</argsstring>
        <name>lilv_new_float</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new floating point value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="186" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaa7853e686d08c4a60cb51b3ba1e712c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_new_bool</definition>
        <argsstring>(LilvWorld *world, bool val)</argsstring>
        <name>lilv_new_bool</name>
        <param>
          <type><ref refid="lilv_8h_1a91c1745aa6ffca2b6b87c56df6c5ab86" kindref="member">LilvWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new boolean value. Returned value must be freed by caller with <ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="196" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
        <definition>LILV_API LilvNode* lilv_node_duplicate</definition>
        <argsstring>(const LilvNode *val)</argsstring>
        <name>lilv_node_duplicate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate a LilvNode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="205" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="205" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>LILV_API void lilv_node_free</definition>
        <argsstring>(LilvNode *val)</argsstring>
        <name>lilv_node_free</name>
        <param>
          <type><ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a LilvNode. It is safe to call this function on NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga3fd9df99cb05f2f061233d2839e820f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_equals</definition>
        <argsstring>(const LilvNode *value, const LilvNode *other)</argsstring>
        <name>lilv_node_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether two values are equivalent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="229" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="229" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga9ebd1062d816c40ac335e217251c173e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> char *</type>
        <definition>LILV_API char* lilv_node_get_turtle_token</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_get_turtle_token</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this value as a Turtle/SPARQL token. Returned value must be freed by caller with free(). <table rows="6" cols="2"><caption>Example Turtle Tokens</caption>
<row>
<entry thead="yes"><para>URI</para></entry><entry thead="no"><para>&lt;<ulink url="http://example.org/foo">http://example.org/foo</ulink> &gt; </para></entry></row>
<row>
<entry thead="yes"><para>QName</para></entry><entry thead="no"><para>doap:name </para></entry></row>
<row>
<entry thead="yes"><para>String</para></entry><entry thead="no"><para>&quot;this is a string&quot; </para></entry></row>
<row>
<entry thead="yes"><para>Float</para></entry><entry thead="no"><para>1.0 </para></entry></row>
<row>
<entry thead="yes"><para>Integer</para></entry><entry thead="no"><para>1 </para></entry></row>
<row>
<entry thead="yes"><para>Boolean</para></entry><entry thead="no"><para>true </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="256" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="256" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gafda5218468031732560fb468e78d18e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_uri</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the value is a URI (resource). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="293" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga4f0ffa007aa11aaf30ba37c1ac1513fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_node_as_uri</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_uri</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this value as a URI string, e.g. &quot;http://example.org/foo&quot;. Valid to call only if <computeroutput>lilv_node_is_uri(value)</computeroutput> returns true. Returned value is owned by <computeroutput>value</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="299" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="299" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_blank</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_blank</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the value is a blank node (resource with no URI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="307" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga5e971c906fd65adb755dc40ece50ab47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_node_as_blank</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_blank</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this value as a blank node identifier, e.g. &quot;genid03&quot;. Valid to call only if <computeroutput>lilv_node_is_blank(value)</computeroutput> returns true. Returned value is owned by <computeroutput>value</computeroutput> and must not be freed by caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="313" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga8ed335e23127b0a811b53e46ebf60980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_literal</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_literal</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a literal (i.e. not a URI). Returns true if <computeroutput>value</computeroutput> is a string or numeric value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="321" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="321" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga0c32acb39dedf93c651e1468e36a0e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_string</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a string literal. Returns true if <computeroutput>value</computeroutput> is a string value (and not numeric). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="337" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>LILV_API const char* lilv_node_as_string</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as a string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="343" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaf0c597c61514221bc976b30142aaa517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_int</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_int</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is an integer literal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="349" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga375054e13a92d8317e341a84ee48fb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>LILV_API int lilv_node_as_int</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_int</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as an integer. Valid to call only if <computeroutput>lilv_node_is_int(value)</computeroutput> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="355" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga5d899836a404f7421a4cfdc34cd52384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_float</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_float</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a decimal literal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="361" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1ga8e64cb4e51e6231d0e4cf0d04ec1bf0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> float</type>
        <definition>LILV_API float lilv_node_as_float</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_float</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as a float. Valid to call only if <computeroutput>lilv_node_is_float(value)</computeroutput> or <computeroutput>lilv_node_is_int(value)</computeroutput> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="367" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gad31f809d6311309d75a54f1d14ff9781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_is_bool</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_is_bool</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this value is a boolean. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="378" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="group__lilv_1gaca452e807f7c451491075772eb6bb92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>LILV_API bool lilv_node_as_bool</definition>
        <argsstring>(const LilvNode *value)</argsstring>
        <name>lilv_node_as_bool</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lilv_8h_1ae183dca3dca5368d34dbd863a405437b" kindref="member">LilvNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return <computeroutput>value</computeroutput> as a bool. Valid to call only if <computeroutput>lilv_node_is_bool(value)</computeroutput> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" line="384" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c" bodystart="384" bodyend="387"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2007-2014<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lilv__internal_8h" kindref="compound">lilv_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">lilv_node_set_numerics_from_string(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endptr;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(val-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a88765c511671b9d36db89fb74fc88956" kindref="member">LILV_VALUE_BLANK</ref>:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a5761a24617811b35f52076994d8d8b26" kindref="member">LILV_VALUE_BLOB</ref>:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref><sp/>=<sp/>strtol(str,<sp/>&amp;endptr,<sp/>10);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1a73d438924503dfcf0935be5c925a0172" kindref="member">float_val</ref><sp/>=<sp/><ref refid="group__serd_1gaf763f9aee7bfba6f051963dae8a8d3c7" kindref="member">serd_strtod</ref>(str,<sp/>&amp;endptr);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1ae0425c0f22aa7235a5f5ada6d82638be" kindref="member">bool_val</ref><sp/>=<sp/>!strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="53" refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" refkind="member"><highlight class="normal"><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536" kindref="member">LilvNodeType</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>val<sp/>=<sp/>(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1ad5dad43f2a5a7fd3f20f4474db93508c" kindref="member">world</ref><sp/>=<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/><sp/>=<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>ustr<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)str;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" kindref="member">sord_new_uri</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>ustr);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a88765c511671b9d36db89fb74fc88956" kindref="member">LILV_VALUE_BLANK</ref>:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1ga465202db49656e1c1df531391a75fc15" kindref="member">sord_new_blank</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>ustr);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1gaf4a386554304e783089ba263d7537932" kindref="member">sord_new_literal</ref>(world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>ustr,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1gaf4a386554304e783089ba263d7537932" kindref="member">sord_new_literal</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a514c88eb691e7568e3c4d758214cf492" kindref="member">xsd_integer</ref>,<sp/>ustr,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1gaf4a386554304e783089ba263d7537932" kindref="member">sord_new_literal</ref>(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a454e1ec6c712b8fcd8b7719f7eac49eb" kindref="member">xsd_decimal</ref>,<sp/>ustr,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1gaf4a386554304e783089ba263d7537932" kindref="member">sord_new_literal</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1af728f79030739f922a368b303da14205" kindref="member">xsd_boolean</ref>,<sp/>ustr,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a5761a24617811b35f52076994d8d8b26" kindref="member">LILV_VALUE_BLOB</ref>:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/>=<sp/><ref refid="group__sord_1gaf4a386554304e783089ba263d7537932" kindref="member">sord_new_literal</ref>(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a20f9af8d69aec67c7cf0b81cd03fe9d5" kindref="member">xsd_base64Binary</ref>,<sp/>ustr,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(val);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="98" refid="lilv_2src_2node_8c_1ab85cc3ce5e142d7141219b15353ee671" refkind="member"><highlight class="normal"><ref refid="lilv_2src_2node_8c_1ab85cc3ce5e142d7141219b15353ee671" kindref="member">lilv_node_new_from_node</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><ref refid="structnode" kindref="compound">node</ref>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><sp/><sp/><sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sord_node_impl" kindref="compound">SordNode</ref>*<sp/><sp/><sp/><sp/>datatype_uri<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536" kindref="member">LilvNodeType</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga34de2b7b44fbd614e7831c9c1b6d114e" kindref="member">sord_node_get_type</ref>(node))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154a7335bbadcb5084cedd7957d7d772aaa5" kindref="member">SORD_URI</ref>:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1ad5dad43f2a5a7fd3f20f4474db93508c" kindref="member">world</ref><sp/>=<sp/>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*)world;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/><sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(node);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154aa469e5ec95b931bc4c5adaa7752b9f0a" kindref="member">SORD_BLANK</ref>:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1ad5dad43f2a5a7fd3f20f4474db93508c" kindref="member">world</ref><sp/>=<sp/>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*)world;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/><sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a88765c511671b9d36db89fb74fc88956" kindref="member">LILV_VALUE_BLANK</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/><sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(node);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154a9d48171e6a7a4b4533af3539052d6dfd" kindref="member">SORD_LITERAL</ref>:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datatype_uri<sp/>=<sp/><ref refid="group__sord_1gaa6fd74ff5079ab6d60d174eedc373b13" kindref="member">sord_node_get_datatype</ref>(node);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datatype_uri)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(datatype_uri,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1af728f79030739f922a368b303da14205" kindref="member">xsd_boolean</ref>))</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(datatype_uri,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a454e1ec6c712b8fcd8b7719f7eac49eb" kindref="member">xsd_decimal</ref>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(datatype_uri,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1adac47200cd8df990860ce15fbe7a03e5" kindref="member">xsd_double</ref>))</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(datatype_uri,<sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a514c88eb691e7568e3c4d758214cf492" kindref="member">xsd_integer</ref>))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(datatype_uri,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world-&gt;<ref refid="struct_lilv_world_impl_1a24b83785b1723099aabccb42c697954e" kindref="member">uris</ref>.<ref refid="struct_lilv_world_impl_1a20f9af8d69aec67c7cf0b81cd03fe9d5" kindref="member">xsd_base64Binary</ref>))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a5761a24617811b35f52076994d8d8b26" kindref="member">LILV_VALUE_BLOB</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lilv__internal_8h_1acc82b20fe084dcdaae2eb95863d320b8" kindref="member">LILV_ERRORF</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>datatype<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(datatype_uri));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world,<sp/>type,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1ga414bd4926765816493f35b42b008e30b" kindref="member">sord_node_get_string_counted</ref>(node,<sp/>&amp;len));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lilv_node_set_numerics_from_string(result,<sp/>len);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="151" refid="group__lilv_1gaadc0a9397da39725b2aa7030dfea7786" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaadc0a9397da39725b2aa7030dfea7786" kindref="member">lilv_new_uri</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>,<sp/>uri);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="157" refid="group__lilv_1ga84663ba7913d9558a163b835035b606f" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga84663ba7913d9558a163b835035b606f" kindref="member">lilv_new_file_uri</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>abs_path<sp/>=<sp/><ref refid="lilv__internal_8h_1a12938cb06b918c214d427b9397878429" kindref="member">lilv_path_absolute</ref>(path);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gafeaacb37341cb84e36b8ada129691d39" kindref="member">serd_node_new_file_uri</ref>(</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)abs_path,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)host,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>ret<sp/>=<sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__serd_1ga037ef71317b8afff0a020072099cd14f" kindref="member">serd_node_free</ref>(&amp;s);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>free(abs_path);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="170" refid="group__lilv_1ga579adb7c7e071bf43d8775e48e6edc06" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga579adb7c7e071bf43d8775e48e6edc06" kindref="member">lilv_new_string</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>,<sp/>str);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="176" refid="group__lilv_1ga2d87a9716a851a2a2f84771875ea2c6b" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga2d87a9716a851a2a2f84771875ea2c6b" kindref="member">lilv_new_int</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[32];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="win_2msvc_2switches_8h_1aa367b75c5aed883fef5befbdf04835a4" kindref="member">snprintf</ref>(str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(str),<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>val);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>ret<sp/>=<sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>,<sp/>str);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>ret-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="186" refid="group__lilv_1gaa5a7864c4949fdf3d4bb6533144265d1" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaa5a7864c4949fdf3d4bb6533144265d1" kindref="member">lilv_new_float</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[32];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="win_2msvc_2switches_8h_1aa367b75c5aed883fef5befbdf04835a4" kindref="member">snprintf</ref>(str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(str),<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>val);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>ret<sp/>=<sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>,<sp/>str);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>ret-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1a73d438924503dfcf0935be5c925a0172" kindref="member">float_val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="196" refid="group__lilv_1gaa7853e686d08c4a60cb51b3ba1e712c3" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaa7853e686d08c4a60cb51b3ba1e712c3" kindref="member">lilv_new_bool</ref>(<ref refid="struct_lilv_world_impl" kindref="compound">LilvWorld</ref>*<sp/><ref refid="namespacelv2__list_1a39bc711f56fd3393bf9013f08a1e5719" kindref="member">world</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>ret<sp/>=<sp/><ref refid="lilv_2src_2node_8c_1acdceb77a0f885444e319e0681a1cc69a" kindref="member">lilv_node_new</ref>(world,<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>ret-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1ae0425c0f22aa7235a5f5ada6d82638be" kindref="member">bool_val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*</highlight></codeline>
<codeline lineno="205" refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gad85bca25ea40812ce8c4222ba40d63d2" kindref="member">lilv_node_duplicate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>val)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!val)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>result<sp/>=<sp/>(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1ad5dad43f2a5a7fd3f20f4474db93508c" kindref="member">world</ref><sp/>=<sp/>val-&gt;<ref refid="struct_lilv_node_impl_1ad5dad43f2a5a7fd3f20f4474db93508c" kindref="member">world</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref><sp/><sp/>=<sp/><ref refid="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" kindref="member">sord_node_copy</ref>(val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref><sp/><sp/><sp/>=<sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/><sp/>=<sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaf4677b15cf1df3ef833f7ef4b6a7511e" kindref="member">lilv_node_free</ref>(<ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>val)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" kindref="member">sord_node_free</ref>(val-&gt;<ref refid="struct_lilv_node_impl_1ad5dad43f2a5a7fd3f20f4474db93508c" kindref="member">world</ref>-&gt;<ref refid="struct_lilv_world_impl_1a568e68967d35a64821393e5015e826cf" kindref="member">world</ref>,<sp/>val-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(val);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="group__lilv_1ga3fd9df99cb05f2f061233d2839e820f1" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga3fd9df99cb05f2f061233d2839e820f1" kindref="member">lilv_node_equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/>other)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>other<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>other<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>!=<sp/>other-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a88765c511671b9d36db89fb74fc88956" kindref="member">LILV_VALUE_BLANK</ref>:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a5761a24617811b35f52076994d8d8b26" kindref="member">LILV_VALUE_BLOB</ref>:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" kindref="member">sord_node_equals</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>,<sp/>other-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref><sp/>==<sp/>other-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1a73d438924503dfcf0935be5c925a0172" kindref="member">float_val</ref><sp/>==<sp/>other-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1a73d438924503dfcf0935be5c925a0172" kindref="member">float_val</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1ae0425c0f22aa7235a5f5ada6d82638be" kindref="member">bool_val</ref><sp/>==<sp/>other-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1ae0425c0f22aa7235a5f5ada6d82638be" kindref="member">bool_val</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>shouldn&apos;t<sp/>get<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="256" refid="group__lilv_1ga9ebd1062d816c40ac335e217251c173e" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga9ebd1062d816c40ac335e217251c173e" kindref="member">lilv_node_get_turtle_token</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str<sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_serd_node" kindref="compound">SerdNode</ref><sp/><sp/><sp/><sp/><ref refid="structnode" kindref="compound">node</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/><sp/><sp/><sp/>=<sp/>strlen(str)<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)calloc(len,<sp/>1);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="win_2msvc_2switches_8h_1aa367b75c5aed883fef5befbdf04835a4" kindref="member">snprintf</ref>(result,<sp/>len,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a88765c511671b9d36db89fb74fc88956" kindref="member">LILV_VALUE_BLANK</ref>:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/><sp/><sp/><sp/>=<sp/>strlen(str)<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)calloc(len,<sp/>1);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="win_2msvc_2switches_8h_1aa367b75c5aed883fef5befbdf04835a4" kindref="member">snprintf</ref>(result,<sp/>len,<sp/></highlight><highlight class="stringliteral">&quot;_:%s&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a5761a24617811b35f52076994d8d8b26" kindref="member">LILV_VALUE_BLOB</ref>:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="lilv__internal_8h_1aa4aebab9433d5c2b75ab6922a020f631" kindref="member">lilv_strdup</ref>(str);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gae2a0afeb436855f98c26e2bec0ab2d09" kindref="member">serd_node_new_integer</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)node.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/>=<sp/><ref refid="group__serd_1gaed31dfb8fedccfb82eb7c7b5f81931eb" kindref="member">serd_node_new_decimal</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1a73d438924503dfcf0935be5c925a0172" kindref="member">float_val</ref>,<sp/>8);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)node.<ref refid="struct_serd_node_1a50033bcc22d7a31e8515088ebf7d50ed" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="group__lilv_1gafda5218468031732560fb468e78d18e4" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gafda5218468031732560fb468e78d18e4" kindref="member">lilv_node_is_uri</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>==<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a42a582c0c70f2f4f5cc283fdf6a1ea71" kindref="member">LILV_VALUE_URI</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="299" refid="group__lilv_1ga4f0ffa007aa11aaf30ba37c1ac1513fd" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga4f0ffa007aa11aaf30ba37c1ac1513fd" kindref="member">lilv_node_as_uri</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__lilv_1gafda5218468031732560fb468e78d18e4" kindref="member">lilv_node_is_uri</ref>(value)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" kindref="member">lilv_node_is_blank</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>==<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a88765c511671b9d36db89fb74fc88956" kindref="member">LILV_VALUE_BLANK</ref>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="313" refid="group__lilv_1ga5e971c906fd65adb755dc40ece50ab47" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga5e971c906fd65adb755dc40ece50ab47" kindref="member">lilv_node_as_blank</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__lilv_1gacaeccfdb01560b5f46ce1a8777145ce5" kindref="member">lilv_node_is_blank</ref>(value)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="group__lilv_1ga8ed335e23127b0a811b53e46ebf60980" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga8ed335e23127b0a811b53e46ebf60980" kindref="member">lilv_node_is_literal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>:</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="group__lilv_1ga0c32acb39dedf93c651e1468e36a0e19" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga0c32acb39dedf93c651e1468e36a0e19" kindref="member">lilv_node_is_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>==<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a1a9bf6957d1bf50dbf67afd234917319" kindref="member">LILV_VALUE_STRING</ref>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="343" refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga1291c27ac72d962f3522d8ee7fbe3db0" kindref="member">lilv_node_as_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="group__sord_1gaaac09d1114d46785f01bed6e48728c18" kindref="member">sord_node_get_string</ref>(value-&gt;<ref refid="struct_lilv_node_impl_1a10b31ad2e47d09fcb23089c5706e84c0" kindref="member">node</ref>)<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="group__lilv_1gaf0c597c61514221bc976b30142aaa517" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaf0c597c61514221bc976b30142aaa517" kindref="member">lilv_node_is_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>==<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ae7b8d1a2e9ede6aa8cb87c1652ad5da1" kindref="member">LILV_VALUE_INT</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="group__lilv_1ga375054e13a92d8317e341a84ee48fb53" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga375054e13a92d8317e341a84ee48fb53" kindref="member">lilv_node_as_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__lilv_1gaf0c597c61514221bc976b30142aaa517" kindref="member">lilv_node_is_int</ref>(value)<sp/>?<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref><sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="group__lilv_1ga5d899836a404f7421a4cfdc34cd52384" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga5d899836a404f7421a4cfdc34cd52384" kindref="member">lilv_node_is_float</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>==<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536ad9944c0a4b131762acbc07f3cc1d6e54" kindref="member">LILV_VALUE_FLOAT</ref>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="group__lilv_1ga8e64cb4e51e6231d0e4cf0d04ec1bf0f" refkind="member"><highlight class="normal"><ref refid="group__lilv_1ga8e64cb4e51e6231d0e4cf0d04ec1bf0f" kindref="member">lilv_node_as_float</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<ref refid="group__lilv_1ga5d899836a404f7421a4cfdc34cd52384" kindref="member">lilv_node_is_float</ref>(value)<sp/>||<sp/><ref refid="group__lilv_1gaf0c597c61514221bc976b30142aaa517" kindref="member">lilv_node_is_int</ref>(value));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__lilv_1ga5d899836a404f7421a4cfdc34cd52384" kindref="member">lilv_node_is_float</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1a73d438924503dfcf0935be5c925a0172" kindref="member">float_val</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>lilv_node_is_int(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1aab7e8d7b76fd5bd1cf7c99c3262ff959" kindref="member">int_val</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="group__lilv_1gad31f809d6311309d75a54f1d14ff9781" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gad31f809d6311309d75a54f1d14ff9781" kindref="member">lilv_node_is_bool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a0aa1bfe76dbd81a2ede605dbb93b0dc1" kindref="member">type</ref><sp/>==<sp/><ref refid="lilv__internal_8h_1a21e43999c8cf40e85363d0e848eb6536a3d7a6ae624cbeb01585fc07efa0a3df7" kindref="member">LILV_VALUE_BOOL</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="lilv_8h_1aa5182eee7ddff96862d0171967ee6f77" kindref="member">LILV_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="group__lilv_1gaca452e807f7c451491075772eb6bb92a" refkind="member"><highlight class="normal"><ref refid="group__lilv_1gaca452e807f7c451491075772eb6bb92a" kindref="member">lilv_node_as_bool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_lilv_node_impl" kindref="compound">LilvNode</ref>*<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__lilv_1gad31f809d6311309d75a54f1d14ff9781" kindref="member">lilv_node_is_bool</ref>(value)<sp/>?<sp/>value-&gt;<ref refid="struct_lilv_node_impl_1a41960922e4be49a41b54aa7655e679e2" kindref="member">val</ref>.<ref refid="struct_lilv_node_impl_1ae0425c0f22aa7235a5f5ada6d82638be" kindref="member">bool_val</ref><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/node.c"/>
  </compounddef>
</doxygen>
