<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavf__encoding" kind="group">
    <compoundname>lavf_encoding</compoundname>
    <title>Muxing</title>
    <innerclass refid="struct_a_v_output_format" prot="public">AVOutputFormat</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__lavf__encoding_1ga7328f2fe9ea40f836f0eea2d44f2db5e" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref></type>
        <definition>typedef struct AVOutputFormat  AVOutputFormat</definition>
        <argsstring></argsstring>
        <name>AVOutputFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="542" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_write_header</definition>
        <argsstring>(AVFormatContext *s, AVDictionary **options)</argsstring>
        <name>avformat_write_header</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate the stream private data and write the stream header to an output media file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Media file handle, must be allocated with <ref refid="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" kindref="member">avformat_alloc_context()</ref>. Its oformat field must be set to the desired output format; Its pb field must be set to an already opened <ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>An AVDictionary filled with <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> and muxer-private options. On return this parameter will be destroyed and replaced with a dict containing options that were not found. May be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative AVERROR on failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__avoptions_1gae31ae7fb20113b00108d0ecf53f25664" kindref="member">av_opt_find</ref>, <ref refid="group__lavu__dict_1ga8d9c2de72b310cef8e6a28c9cd3acbbe" kindref="member">av_dict_set</ref>, <ref refid="avio_8h_1a371a670112abc5f3e15bc570da076301" kindref="member">avio_open</ref>, <ref refid="group__lavf__core_1ga9c169031f490901218b1e6bcd9993967" kindref="member">av_oformat_next</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_frame</definition>
        <argsstring>(AVFormatContext *s, AVPacket *pkt)</argsstring>
        <name>av_write_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a packet to an output media file.</para><para>This function passes the packet directly to the muxer, without any buffering or reordering. The caller is responsible for correctly interleaving the packets if the format requires it. Callers that want libavformat to handle the interleaving should call <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> instead of this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet containing the data to be written. Note that unlike <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref>, this function does not take ownership of the packet passed to it (though some muxers may make an internal reference to the input packet). <linebreak/>
 This parameter can be NULL (at any time, not just at the end), in order to immediately flush data buffered within the muxer, for muxers that buffer up data internally before writing it to the output. <linebreak/>
 Packet&apos;s <ref refid="struct_a_v_packet_1a0d1cb9b5a32b00fb6edc81ea3aae2a49" kindref="member">stream_index</ref> field must be set to the index of the corresponding stream in <ref refid="struct_a_v_format_context_1acfefb6b6cf21e87a0dcbd1a547ba2348" kindref="member">s-&gt;streams</ref>. It is very strongly recommended that timing information (<ref refid="struct_a_v_packet_1a73bde0a37f3b1efc839f11295bfbf42a" kindref="member">pts</ref>, <ref refid="struct_a_v_packet_1a85dbbd306b44b02390cd91c45e6a0f76" kindref="member">dts</ref>, <ref refid="struct_a_v_packet_1af151ba1967c37038088883cd544eeacd" kindref="member">duration</ref>) is set to correct values. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 on error, = 0 if OK, 1 if flushed and there is no more data to flush</para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_interleaved_write_frame</definition>
        <argsstring>(AVFormatContext *s, AVPacket *pkt)</argsstring>
        <name>av_interleaved_write_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a packet to an output media file ensuring correct interleaving.</para><para>This function will buffer the packets internally as needed to make sure the packets in the output file are properly interleaved in the order of increasing dts. Callers doing their own interleaving should call <ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame()</ref> instead of this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet containing the data to be written. <linebreak/>
 If the packet is reference-counted, this function will take ownership of this reference and unreference it later when it sees fit. The caller must not access the data through this reference after this function returns. If the packet is not reference-counted, libavformat will make a copy. <linebreak/>
 This parameter can be NULL (at any time, not just at the end), to flush the interleaving queues. <linebreak/>
 Packet&apos;s <ref refid="struct_a_v_packet_1a0d1cb9b5a32b00fb6edc81ea3aae2a49" kindref="member">stream_index</ref> field must be set to the index of the corresponding stream in <ref refid="struct_a_v_format_context_1acfefb6b6cf21e87a0dcbd1a547ba2348" kindref="member">s-&gt;streams</ref>. It is very strongly recommended that timing information (<ref refid="struct_a_v_packet_1a73bde0a37f3b1efc839f11295bfbf42a" kindref="member">pts</ref>, <ref refid="struct_a_v_packet_1a85dbbd306b44b02390cd91c45e6a0f76" kindref="member">dts</ref>, <ref refid="struct_a_v_packet_1af151ba1967c37038088883cd544eeacd" kindref="member">duration</ref>) is set to correct values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on error. Libavformat will always take care of freeing the packet, even if this function fails.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame()</ref>, <ref refid="struct_a_v_format_context_1a00edb6b7a31f8dabfa668334ca1f92d7" kindref="member">AVFormatContext.max_interleave_delta</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gaab766dccdff1bf323a2fc604e723b441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_uncoded_frame</definition>
        <argsstring>(AVFormatContext *s, int stream_index, AVFrame *frame)</argsstring>
        <name>av_write_uncoded_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a uncoded frame to an output media file.</para><para>The frame must be correctly interleaved according to the container specification; if not, then <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> must be used.</para><para>See <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gafe9916c601bba6827d6f9271a61260e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_interleaved_write_uncoded_frame</definition>
        <argsstring>(AVFormatContext *s, int stream_index, AVFrame *frame)</argsstring>
        <name>av_interleaved_write_uncoded_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a uncoded frame to an output media file.</para><para>If the muxer supports it, this function allows to write an <ref refid="struct_a_v_frame" kindref="compound">AVFrame</ref> structure directly, without encoding it into a packet. It is mostly useful for devices and similar special muxers that use raw video or PCM data and will not serialize it into a byte stream.</para><para>To test whether it is possible to use it with a given muxer and stream, use <ref refid="group__lavf__encoding_1ga5f6bebdc8c234a5ad9740de89acb15e6" kindref="member">av_write_uncoded_frame_query()</ref>.</para><para>The caller gives up ownership of the frame and must not access it afterwards.</para><para><simplesect kind="return"><para>&gt;=0 for success, a negative code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga5f6bebdc8c234a5ad9740de89acb15e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_uncoded_frame_query</definition>
        <argsstring>(AVFormatContext *s, int stream_index)</argsstring>
        <name>av_write_uncoded_frame_query</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_test" kindref="compound">Test</ref> whether a muxer supports uncoded frame.</para><para><simplesect kind="return"><para>&gt;=0 if an uncoded frame can be written to that muxer and stream, &lt;0 if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga7f14007e7dc8f481f054b21614dfec13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_write_trailer</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_write_trailer</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the stream trailer to an output media file and free the file private data.</para><para>May only be called after a successful call to avformat_write_header.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, AVERROR_xxx on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga8795680bd7489e96eeb5aef5e615cacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
        <definition>AVOutputFormat* av_guess_format</definition>
        <argsstring>(const char *short_name, const char *filename, const char *mime_type)</argsstring>
        <name>av_guess_format</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>short_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>mime_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the output format in the list of registered output formats which best matches the provided parameters, or return NULL if there is no match.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>short_name</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL checks if short_name matches with the names of the registered formats </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL checks if filename terminates with the extensions of the registered formats </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL checks if mime_type matches with the MIME type of the registered formats </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1gae8a1efab53a348857f209ea51037da4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__lavc__core_1gaadca229ad2c20e060a14fec08a5cc7ce" kindref="member">AVCodecID</ref></type>
        <definition>enum AVCodecID av_guess_codec</definition>
        <argsstring>(AVOutputFormat *fmt, const char *short_name, const char *filename, const char *mime_type, enum AVMediaType type)</argsstring>
        <name>av_guess_codec</name>
        <param>
          <type><ref refid="struct_a_v_output_format" kindref="compound">AVOutputFormat</ref> *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>short_name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>mime_type</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__misc_1ga9a84bba4713dfced21a1a56163be1f48" kindref="member">AVMediaType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the codec ID based upon muxer and filename. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__encoding_1ga661ee0b2f3dbcaaef5d68f2f5d75e2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_get_output_timestamp</definition>
        <argsstring>(struct AVFormatContext *s, int stream, int64_t *dts, int64_t *wall)</argsstring>
        <name>av_get_output_timestamp</name>
        <param>
          <type>struct <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref> *</type>
          <declname>dts</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref> *</type>
          <declname>wall</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get timing information for the data currently output. The exact meaning of &quot;currently output&quot; depends on the format. It is mostly relevant for devices that have an internal buffer and/or work in real time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream in the media file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dts</parametername>
</parameternamelist>
<parameterdescription>
<para>DTS of the last packet output for the stream, in stream time_base units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">wall</parametername>
</parameternamelist>
<parameterdescription>
<para>absolute time when that packet whas output, in microsecond </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, <ref refid="group__lavu__error_1gae4bb6f165973d09584e0ec0f335f69ca" kindref="member">AVERROR(ENOSYS)</ref> if the format does not support it Note: some formats or devices may not allow to measure dts and wall atomically. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2238" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Muxers take encoded data in the form of <ref refid="struct_a_v_packet" kindref="compound">AVPackets</ref> and write it into files or other output bytestreams in the specified container format.</para><para>The main API functions for muxing are <ref refid="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" kindref="member">avformat_write_header()</ref> for writing the file header, <ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame()</ref> / <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> for writing the packets and <ref refid="group__lavf__encoding_1ga7f14007e7dc8f481f054b21614dfec13" kindref="member">av_write_trailer()</ref> for finalizing the file.</para><para>At the beginning of the muxing process, the caller must first call <ref refid="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" kindref="member">avformat_alloc_context()</ref> to create a muxing context. The caller then sets up the muxer by filling the various fields in this context:</para><para><itemizedlist>
<listitem><para>The <ref refid="struct_a_v_format_context_1a20d80ac07e38ff5c268d15aaf2798b98" kindref="member">oformat</ref> field must be set to select the muxer that will be used.</para></listitem><listitem><para>Unless the format is of the AVFMT_NOFILE type, the <ref refid="struct_a_v_format_context_1a1e7324262b6b78522e52064daaa7bc87" kindref="member">pb</ref> field must be set to an opened IO context, either returned from <ref refid="avio_8h_1ade8a63980569494c99593ebf0d1e891b" kindref="member">avio_open2()</ref> or a custom one.</para></listitem><listitem><para>Unless the format is of the AVFMT_NOSTREAMS type, at least one stream must be created with the <ref refid="group__lavf__core_1gadcb0fd3e507d9b58fe78f61f8ad39827" kindref="member">avformat_new_stream()</ref> function. The caller should fill the <ref refid="struct_a_v_stream_1a56f20051fb99339cc588cd3a07ab8c96" kindref="member">stream codec context</ref> information, such as the codec <ref refid="struct_a_v_codec_context_1a3f99ca3115c44e6d7772c9384faf15e6" kindref="member">type</ref>, <ref refid="struct_a_v_codec_context_1adc5f65d6099fd8339c1580c091777223" kindref="member">id</ref> and other parameters (e.g. width / height, the pixel or sample format, etc.) as known. The <ref refid="struct_a_v_codec_context_1ab7bfeb9fa5840aac090e2b0bd0ef7589" kindref="member">codec timebase</ref> should be set to the timebase that the caller desires to use for this stream (note that the timebase actually used by the muxer can be different, as will be described later).</para></listitem><listitem><para>The caller may fill in additional information, such as <ref refid="struct_a_v_format_context_1a3019a56080ed2e3297ff25bc2ff88adf" kindref="member">global</ref> or <ref refid="struct_a_v_stream_1a50d250a128a3da9ce3d135e84213fb82" kindref="member">per-stream</ref> metadata, <ref refid="struct_a_v_format_context_1ac17d5fc2dcdb00806cc83b02d9f940f3" kindref="member">chapters</ref>, <ref refid="struct_a_v_format_context_1a4c2c5a4c758966349ff513e95154d062" kindref="member">programs</ref>, etc. as described in the <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> documentation. Whether such information will actually be stored in the output depends on what the container format and the muxer support.</para></listitem></itemizedlist>
</para><para>When the muxing context is fully set up, the caller must call <ref refid="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" kindref="member">avformat_write_header()</ref> to initialize the muxer internals and write the file header. Whether anything actually is written to the IO context at this step depends on the muxer, but this function must always be called. Any muxer private options must be passed in the options parameter to this function.</para><para>The data is then sent to the muxer by repeatedly calling <ref refid="group__lavf__encoding_1gaa85cc1774f18f306cd20a40fc50d0b36" kindref="member">av_write_frame()</ref> or <ref refid="group__lavf__encoding_1ga37352ed2c63493c38219d935e71db6c1" kindref="member">av_interleaved_write_frame()</ref> (consult those functions&apos; documentation for discussion on the difference between them; only one of them may be used with a single muxing context, they should not be mixed). Do note that the timing information on the packets sent to the muxer must be in the corresponding <ref refid="struct_a_v_stream" kindref="compound">AVStream</ref>&apos;s timebase. That timebase is set by the muxer (in the <ref refid="group__lavf__encoding_1ga78d4e734fecb1d2385536e6dd5b7b9f5" kindref="member">avformat_write_header()</ref> step) and may be different from the timebase the caller set on the codec context.</para><para>Once all the data has been written, the caller must call <ref refid="group__lavf__encoding_1ga7f14007e7dc8f481f054b21614dfec13" kindref="member">av_write_trailer()</ref> to flush any buffered packets and finalize the output file, then close the IO context (if any) and finally free the muxing context with <ref refid="group__lavf__core_1gac2990b13b68e831a408fce8e1d0d6445" kindref="member">avformat_free_context()</ref>. </para>    </detaileddescription>
  </compounddef>
</doxygen>
