<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="phasevocoder_8c" kind="file" language="C++">
    <compoundname>phasevocoder.c</compoundname>
    <includes local="yes">stdio.h</includes>
    <includes local="yes">stdlib.h</includes>
    <includes refid="xlisp_8h" local="yes">xlisp.h</includes>
    <includes refid="sound_8h" local="yes">sound.h</includes>
    <includes refid="falloc_8h" local="yes">falloc.h</includes>
    <includes refid="cext_8h" local="yes">cext.h</includes>
    <includes refid="pvshell_8h" local="yes">pvshell.h</includes>
    <includes refid="phasevocoder_8h" local="yes">phasevocoder.h</includes>
    <incdepgraph>
      <node id="12745">
        <label>stdlib.h</label>
      </node>
      <node id="12748">
        <label>setjmp.h</label>
      </node>
      <node id="12761">
        <label>pvshell.h</label>
        <link refid="pvshell_8h"/>
      </node>
      <node id="12743">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c</label>
        <link refid="phasevocoder.c"/>
        <childnode refid="12744" relation="include">
        </childnode>
        <childnode refid="12745" relation="include">
        </childnode>
        <childnode refid="12746" relation="include">
        </childnode>
        <childnode refid="12750" relation="include">
        </childnode>
        <childnode refid="12758" relation="include">
        </childnode>
        <childnode refid="12753" relation="include">
        </childnode>
        <childnode refid="12761" relation="include">
        </childnode>
        <childnode refid="12762" relation="include">
        </childnode>
      </node>
      <node id="12762">
        <label>phasevocoder.h</label>
        <link refid="phasevocoder_8h"/>
      </node>
      <node id="12758">
        <label>falloc.h</label>
        <link refid="falloc_8h"/>
        <childnode refid="12759" relation="include">
        </childnode>
        <childnode refid="12760" relation="include">
        </childnode>
      </node>
      <node id="12746">
        <label>xlisp.h</label>
        <link refid="xlisp_8h"/>
        <childnode refid="12745" relation="include">
        </childnode>
        <childnode refid="12744" relation="include">
        </childnode>
        <childnode refid="12747" relation="include">
        </childnode>
        <childnode refid="12748" relation="include">
        </childnode>
        <childnode refid="12749" relation="include">
        </childnode>
      </node>
      <node id="12757">
        <label>cleanup.h</label>
        <link refid="cleanup_8h"/>
      </node>
      <node id="12756">
        <label>mem.h</label>
        <link refid="libnyquist_2nyquist_2cmt_2mem_8h"/>
      </node>
      <node id="12755">
        <label>string.h</label>
      </node>
      <node id="12759">
        <label>cque.h</label>
        <link refid="cque_8h"/>
      </node>
      <node id="12750">
        <label>sound.h</label>
        <link refid="sound_8h"/>
        <childnode refid="12751" relation="include">
        </childnode>
        <childnode refid="12752" relation="include">
        </childnode>
      </node>
      <node id="12751">
        <label>math.h</label>
      </node>
      <node id="12754">
        <label>switches.h</label>
      </node>
      <node id="12752">
        <label>stdefs.h</label>
        <link refid="stdefs_8h"/>
        <childnode refid="12753" relation="include">
        </childnode>
      </node>
      <node id="12749">
        <label>xldmem.h</label>
        <link refid="xldmem_8h"/>
      </node>
      <node id="12747">
        <label>ctype.h</label>
      </node>
      <node id="12760">
        <label>debug.h</label>
        <link refid="libnyquist_2nyquist_2nyqsrc_2debug_8h"/>
      </node>
      <node id="12744">
        <label>stdio.h</label>
      </node>
      <node id="12753">
        <label>cext.h</label>
        <link refid="cext_8h"/>
        <childnode refid="12754" relation="include">
        </childnode>
        <childnode refid="12744" relation="include">
        </childnode>
        <childnode refid="12755" relation="include">
        </childnode>
        <childnode refid="12751" relation="include">
        </childnode>
        <childnode refid="12756" relation="include">
        </childnode>
        <childnode refid="12757" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="phasevocoder_8c_1a47a168bafa183fb5d1d303541e360600" prot="public" static="no">
        <name>X_VALUE</name>
        <initializer>state[0] /* <ref refid="rfft2d_test_m_l_8m_1a4124bc0a9335c27f086f24ba207a4912" kindref="member">a</ref> parameter <ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="19" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="phasevocoder_8c_1aba62d94641a70fcc76e8e454a549a147" prot="public" static="no">
        <name>F_COUNT</name>
        <initializer>state[1] /* counts <ref refid="test__w__saw8_8c_1a54185623a5a093f671a73e5fba6197a1" kindref="member">samples</ref> <ref refid="rfft2d_test_m_l_8m_1ad1fb8d92192e22cbe6298e4a2c65a711" kindref="member">of</ref> <ref refid="checksum_8c_1ae747d72a1a803f5ff4a4b2602857d93b" kindref="member">f</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="20" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="phasevocoder_8c_1a555111e6a90961d8957aa3a74b4fbd66" prot="public" static="no">
        <name>G_COUNT</name>
        <initializer>state[2] /* counts <ref refid="test__w__saw8_8c_1a54185623a5a093f671a73e5fba6197a1" kindref="member">samples</ref> <ref refid="rfft2d_test_m_l_8m_1ad1fb8d92192e22cbe6298e4a2c65a711" kindref="member">of</ref> g */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="21" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="phasevocoder_8c_1a3c92103dfe1dd8b54525a92cb373adc0" prot="public" static="no">
        <name>G_PREV</name>
        <initializer>state[3] /* previous <ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref> <ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref> g */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="22" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="phasevocoder_8c_1a196a01e81bc2e4c01b7f25158cd70ef1" prot="public" static="no">
        <name>G_NEXT</name>
        <initializer>state[4] /* <ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref> (current?) <ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref> <ref refid="nasm_8h_1a5f350118b553429484632e5603292389" kindref="member">from</ref> g */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="23" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="phasevocoder_8c_1ada9a110ad69b68bd73d8071145c803fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long pv_fetch</definition>
        <argsstring>(pvshell_type susp, sample_block_values_type out, long *n)</argsstring>
        <name>pv_fetch</name>
        <param>
          <type><ref refid="pvshell_8h_1a2abbe679bcf7d1af7475c74dc44c9d35" kindref="member">pvshell_type</ref></type>
          <declname>susp</declname>
        </param>
        <param>
          <type><ref refid="sound_8h_1a83d17f7b465d1591f27cd28fc5eb8a03" kindref="member">sample_block_values_type</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="33" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="33" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="phasevocoder_8c_1a0e4e0f10a8db0d59355649e22ab604b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8h_1a792cec4ed9d6d636d342d9365ba265ea" kindref="member">sound_type</ref></type>
        <definition>sound_type snd_phasevocoder</definition>
        <argsstring>(sound_type f, sound_type g, double x)</argsstring>
        <name>snd_phasevocoder</name>
        <param>
          <type><ref refid="sound_8h_1a792cec4ed9d6d636d342d9365ba265ea" kindref="member">sound_type</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="sound_8h_1a792cec4ed9d6d636d342d9365ba265ea" kindref="member">sound_type</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" line="78" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c" bodystart="78" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>phasevocoder.c<sp/>--<sp/>this<sp/>is<sp/>a<sp/>stub<sp/>showing<sp/>how<sp/>you<sp/>might<sp/>hook<sp/>a</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>phase<sp/>vocoder<sp/>into<sp/>Nyquist<sp/>using<sp/>pvshell</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>mips</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xlisp_8h" kindref="compound">xlisp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sound_8h" kindref="compound">sound.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="falloc_8h" kindref="compound">falloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cext_8h" kindref="compound">cext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pvshell_8h" kindref="compound">pvshell.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="phasevocoder_8h" kindref="compound">phasevocoder.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>use<sp/>the<sp/>state[]<sp/>info<sp/>for<sp/>sample<sp/>interpolation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="phasevocoder_8c_1a47a168bafa183fb5d1d303541e360600" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>X_VALUE<sp/>state[0]<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="phasevocoder_8c_1aba62d94641a70fcc76e8e454a549a147" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>F_COUNT<sp/>state[1]<sp/></highlight><highlight class="comment">/*<sp/>counts<sp/>samples<sp/>of<sp/>f<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="phasevocoder_8c_1a555111e6a90961d8957aa3a74b4fbd66" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>G_COUNT<sp/>state[2]<sp/></highlight><highlight class="comment">/*<sp/>counts<sp/>samples<sp/>of<sp/>g<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="phasevocoder_8c_1a3c92103dfe1dd8b54525a92cb373adc0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>G_PREV<sp/><sp/>state[3]<sp/></highlight><highlight class="comment">/*<sp/>previous<sp/>value<sp/>from<sp/>g<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="phasevocoder_8c_1a196a01e81bc2e4c01b7f25158cd70ef1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>G_NEXT<sp/><sp/>state[4]<sp/></highlight><highlight class="comment">/*<sp/>next<sp/>(current?)<sp/>value<sp/>from<sp/>g<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>invariant:<sp/>G_NEXT<sp/>is<sp/>the<sp/>G_COUNT&apos;th<sp/>sample<sp/>of<sp/>g<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pv_fetch<sp/>--<sp/>this<sp/>is<sp/>an<sp/>example,<sp/>but<sp/>it<sp/>doesn&apos;t<sp/>really<sp/>do</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>phase<sp/>vocoding.<sp/>Instead,<sp/>it<sp/>will<sp/>just<sp/>multiply<sp/>f,<sp/>g,<sp/>and<sp/>x</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>To<sp/>make<sp/>things<sp/>a<sp/>bit<sp/>more<sp/>interesting,<sp/>we<sp/>will<sp/>assume<sp/>g<sp/>has</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>an<sp/>arbitrary<sp/>sample<sp/>rate<sp/>with<sp/>respect<sp/>to<sp/>f,<sp/>and<sp/>will<sp/>interpolate.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="phasevocoder_8c_1ada9a110ad69b68bd73d8071145c803fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="phasevocoder_8c_1ada9a110ad69b68bd73d8071145c803fb" kindref="member">pv_fetch</ref>(<ref refid="structpvshell__struct" kindref="compound">pvshell_type</ref><sp/>susp,<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sound_8h_1a83d17f7b465d1591f27cd28fc5eb8a03" kindref="member">sample_block_values_type</ref><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*n)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>new_flags;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sound_8h_1a3a9d1d4a1c153390d2401a6e9f71b32c" kindref="member">sample_type</ref><sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>in<sp/>DSP<sp/>terms,<sp/>this<sp/>is<sp/>poor<sp/>code<sp/>because<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>division<sp/>operations<sp/>--<sp/>it<sp/>could<sp/>be<sp/>made<sp/>faster<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>get<sp/>a<sp/>value<sp/>from<sp/>g,<sp/>first<sp/>compute<sp/>the<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f_time<sp/>=<sp/>susp-&gt;F_COUNT<sp/>/<sp/>susp-&gt;<ref refid="structpvshell__struct_1a5af3be8603e108a163e017a1cf5a7d7f" kindref="member">f</ref>-&gt;<ref refid="structsound__struct_1aafecd01e13520f7fb83fe8e2ac2cd026" kindref="member">sr</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>compute<sp/>g<sp/>count<sp/>that<sp/>is<sp/>past<sp/>the<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_count<sp/>=<sp/>f_time<sp/>*<sp/>susp-&gt;<ref refid="structpvshell__struct_1a9d9b8958ca305d3038b5ac9878e13707" kindref="member">g</ref>-&gt;<ref refid="structsound__struct_1aafecd01e13520f7fb83fe8e2ac2cd026" kindref="member">sr</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(susp-&gt;G_COUNT<sp/>&lt;<sp/>g_count)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pvshell_8h_1aef2156e6a929c9bc9e5c99c86f5c2b99" kindref="member">PVSHELL_TEST_G</ref>(susp);<sp/></highlight><highlight class="comment">/*<sp/>prepare<sp/>to<sp/>get<sp/>a<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ignore<sp/>flags<sp/>from<sp/>g<sp/>--<sp/>we<sp/>could,<sp/>if<sp/>we<sp/>wanted,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>terminate<sp/>when<sp/>either<sp/>f<sp/>or<sp/>g<sp/>terminated,<sp/>etc.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susp-&gt;G_PREV<sp/>=<sp/>susp-&gt;G_NEXT;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susp-&gt;G_NEXT<sp/>=<sp/><ref refid="pvshell_8h_1a358fbb29bea1d40ef5a647471d665b5f" kindref="member">PVSHELL_FETCH_G</ref>(susp);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susp-&gt;G_COUNT++;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>interpolate<sp/>to<sp/>get<sp/>the<sp/>value<sp/>of<sp/>g<sp/>at<sp/>f_time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>susp-&gt;G_PREV<sp/>+<sp/>(susp-&gt;G_NEXT<sp/>-<sp/>susp-&gt;G_PREV)<sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(g_count<sp/>-<sp/>(susp-&gt;G_COUNT<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_flags<sp/>=<sp/><ref refid="pvshell_8h_1a6e39fda86379fcb1b843cc33322b0125" kindref="member">PVSHELL_TEST_F</ref>(susp);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susp-&gt;<ref refid="structpvshell__struct_1ad3e2e526c433ea8cc6ba1e500ece9020" kindref="member">flags</ref><sp/>|=<sp/>new_flags;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_flags)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/><ref refid="pvshell_8h_1a10535d9ee94461d7ad4008d761d403f4" kindref="member">PVSHELL_FETCH_F</ref>(susp);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susp-&gt;F_COUNT++;<sp/></highlight><highlight class="comment">/*<sp/>count<sp/>how<sp/>many<sp/>samples<sp/>we<sp/>have<sp/>taken<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>we<sp/>have<sp/>f,<sp/>g,<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>f<sp/>*<sp/>g<sp/>*<sp/>susp-&gt;X_VALUE;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i<sp/>is<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>we<sp/>acutally<sp/>computed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>*n<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>computed<sp/>samples,<sp/>we<sp/>want<sp/>to<sp/>return<sp/>them<sp/>before</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>returning<sp/>flags<sp/>that<sp/>say<sp/>we&apos;re<sp/>done<sp/>or<sp/>stopped</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>?<sp/>0<sp/>:<sp/>susp-&gt;<ref refid="structpvshell__struct_1ad3e2e526c433ea8cc6ba1e500ece9020" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="phasevocoder_8h_1a0e4e0f10a8db0d59355649e22ab604b4" refkind="member"><highlight class="normal"><ref refid="structsound__struct" kindref="compound">sound_type</ref><sp/><ref refid="phasevocoder_8c_1a0e4e0f10a8db0d59355649e22ab604b4" kindref="member">snd_phasevocoder</ref>(<ref refid="structsound__struct" kindref="compound">sound_type</ref><sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>,<sp/><ref refid="structsound__struct" kindref="compound">sound_type</ref><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we&apos;re<sp/>using<sp/>5<sp/>doubles<sp/>of<sp/>state.<sp/>The<sp/>first<sp/>is<sp/>a<sp/>parameter,</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>the<sp/>rest<sp/>are<sp/>initialized<sp/>to<sp/>zero<sp/>except<sp/>for<sp/>state[2],</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>aka<sp/>G_COUNT.<sp/>This<sp/>is<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>we<sp/>have<sp/>read<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>from<sp/>G.<sp/>Since<sp/>we&apos;re<sp/>interpolating<sp/>we<sp/>need<sp/>a<sp/>one-sample</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>lookahead,<sp/>and<sp/>initializing<sp/>the<sp/>count<sp/>to<sp/>-1<sp/>causes<sp/>an<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>extra<sp/>fetch<sp/>and<sp/>hence<sp/>1-sample<sp/>lookahead.<sp/>This<sp/>state<sp/>is<sp/>copied</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>into<sp/>the<sp/>pvshell<sp/>structure,<sp/>so<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>vector<sp/>on<sp/>the<sp/>heap.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>state[5]<sp/>=<sp/>{0,<sp/>0,<sp/>-1,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>state[0]<sp/>=<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>f<sp/>and<sp/>g<sp/>do<sp/>not<sp/>start<sp/>at<sp/>the<sp/>same<sp/>time,<sp/>we<sp/>should<sp/>really</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>should<sp/>do<sp/>something<sp/>about<sp/>it,<sp/>but<sp/>we&apos;ll<sp/>just<sp/>throw<sp/>an<sp/>error.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Be<sp/>careful<sp/>to<sp/>allow<sp/>small<sp/>differences<sp/>(within<sp/>one<sp/>sample).</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(f-&gt;<ref refid="structsound__struct_1a397d52ba2da4602200e85f49f62f28ea" kindref="member">t0</ref><sp/>-<sp/>g-&gt;<ref refid="structsound__struct_1a397d52ba2da4602200e85f49f62f28ea" kindref="member">t0</ref>)<sp/>*<sp/>f-&gt;<ref refid="structsound__struct_1aafecd01e13520f7fb83fe8e2ac2cd026" kindref="member">sr</ref><sp/>&gt;<sp/>0.5)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="xldbug_8c_1aaebeabdcebf1b39c984723f1727ddeed" kindref="member">xlfail</ref>(</highlight><highlight class="stringliteral">&quot;phasevocoder<sp/>inputs<sp/>must<sp/>start<sp/>at<sp/>the<sp/>same<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>the<sp/>same<sp/>sample<sp/>rate<sp/>and<sp/>start<sp/>time<sp/>as<sp/>f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pvshell_8c_1a4df96702e4184ba02abfa9d9cbdddd75" kindref="member">snd_make_pvshell</ref>(</highlight><highlight class="stringliteral">&quot;snd_phasevocoder&quot;</highlight><highlight class="normal">,<sp/>f-&gt;<ref refid="structsound__struct_1aafecd01e13520f7fb83fe8e2ac2cd026" kindref="member">sr</ref>,<sp/>f-&gt;<ref refid="structsound__struct_1a397d52ba2da4602200e85f49f62f28ea" kindref="member">t0</ref>,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="phasevocoder_8c_1ada9a110ad69b68bd73d8071145c803fb" kindref="member">pv_fetch</ref>,<sp/>f,<sp/>g,<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(state)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(state[0]));</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/nyqsrc/phasevocoder.c"/>
  </compounddef>
</doxygen>
