<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="timecode_8h" kind="file" language="C++">
    <compoundname>timecode.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="rational_8h" local="yes">rational.h</includes>
    <incdepgraph>
      <node id="4692">
        <label>rational.h</label>
        <link refid="rational_8h"/>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4694">
        <label>attributes.h</label>
        <link refid="attributes_8h"/>
      </node>
      <node id="4691">
        <label>stdint.h</label>
      </node>
      <node id="4690">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h</label>
        <link refid="timecode.h"/>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
      </node>
      <node id="4693">
        <label>limits.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_a_v_timecode" prot="public">AVTimecode</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="timecode_8h_1a60186b13997e64a4aca71ff641634f9d" prot="public" static="no">
        <name>AV_TIMECODE_STR_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="33" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="timecode_8h_1ad0e6464512b7849a2d14593708079219" prot="public" static="no">
        <name>AVTimecodeFlag</name>
        <enumvalue id="timecode_8h_1ad0e6464512b7849a2d14593708079219a4cacf5e87e2f19987c5e931be20a5c33" prot="public">
          <name>AV_TIMECODE_FLAG_DROPFRAME</name>
          <initializer>= 1&lt;&lt;0</initializer>
          <briefdescription>
<para>timecode is drop frame </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="timecode_8h_1ad0e6464512b7849a2d14593708079219abf78793ae8e9e28a4f85bb1a76992f1b" prot="public">
          <name>AV_TIMECODE_FLAG_24HOURSMAX</name>
          <initializer>= 1&lt;&lt;1</initializer>
          <briefdescription>
<para>timecode wraps after 24 hours </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="timecode_8h_1ad0e6464512b7849a2d14593708079219a373f53f5f7544e479b6c6b36b254fc8d" prot="public">
          <name>AV_TIMECODE_FLAG_ALLOWNEGATIVE</name>
          <initializer>= 1&lt;&lt;2</initializer>
          <briefdescription>
<para>negative time values are allowed </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="35" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" bodystart="35" bodyend="39"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="timecode_8h_1aef6b950d708ea805b970c16e71a97869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_timecode_adjust_ntsc_framenum2</definition>
        <argsstring>(int framenum, int fps)</argsstring>
        <name>av_timecode_adjust_ntsc_framenum2</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>framenum</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>fps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adjust frame number for NTSC drop frame time code.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>framenum</parametername>
</parameternamelist>
<parameterdescription>
<para>frame number to adjust </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fps</parametername>
</parameternamelist>
<parameterdescription>
<para>frame per second, 30 or 60 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>adjusted frame number </para></simplesect>
<simplesect kind="warning"><para>adjustment is only valid in NTSC 29.97 and 59.94 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1ae3045b65cc54f72e9d53d3c97a5f4da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>uint32_t av_timecode_get_smpte_from_framenum</definition>
        <argsstring>(const AVTimecode *tc, int framenum)</argsstring>
        <name>av_timecode_get_smpte_from_framenum</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref> *</type>
          <declname>tc</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>framenum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert frame number to SMPTE 12M binary representation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tc</parametername>
</parameternamelist>
<parameterdescription>
<para>timecode data correctly initialized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>framenum</parametername>
</parameternamelist>
<parameterdescription>
<para>frame number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the SMPTE binary representation</para></simplesect>
<simplesect kind="note"><para>Frame number adjustment is automatically done in case of drop timecode, you do NOT have to call <ref refid="timecode_8h_1aef6b950d708ea805b970c16e71a97869" kindref="member">av_timecode_adjust_ntsc_framenum2()</ref>. </para></simplesect>
<simplesect kind="note"><para>The frame number is relative to tc-&gt;start. </para></simplesect>
<simplesect kind="note"><para>Color frame (CF), binary group flags (BGF) and biphase mark polarity correction (PC) bits are set to zero. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1a8cadcdf7e38091651068f70adb94f867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_timecode_make_string</definition>
        <argsstring>(const AVTimecode *tc, char *buf, int framenum)</argsstring>
        <name>av_timecode_make_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref> *</type>
          <declname>tc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>framenum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load timecode string in buf.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer, must be at least AV_TIMECODE_STR_SIZE long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tc</parametername>
</parameternamelist>
<parameterdescription>
<para>timecode data correctly initialized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>framenum</parametername>
</parameternamelist>
<parameterdescription>
<para>frame number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buf parameter</para></simplesect>
<simplesect kind="note"><para>Timecode representation can be a negative timecode and have more than 24 hours, but will only be honored if the flags are correctly set. </para></simplesect>
<simplesect kind="note"><para>The frame number is relative to tc-&gt;start. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1a24963ec8df5712caa8c30b046804d866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_timecode_make_smpte_tc_string</definition>
        <argsstring>(char *buf, uint32_t tcsmpte, int prevent_df)</argsstring>
        <name>av_timecode_make_smpte_tc_string</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>tcsmpte</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>prevent_df</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the timecode string from the SMPTE timecode format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer, must be at least AV_TIMECODE_STR_SIZE long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tcsmpte</parametername>
</parameternamelist>
<parameterdescription>
<para>the 32-bit SMPTE timecode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prevent_df</parametername>
</parameternamelist>
<parameterdescription>
<para>prevent the use of a drop flag when it is known the DF bit is arbitrary </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buf parameter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1a671b3f88e40043bb521550f911cd6b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_timecode_make_mpeg_tc_string</definition>
        <argsstring>(char *buf, uint32_t tc25bit)</argsstring>
        <name>av_timecode_make_mpeg_tc_string</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>tc25bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the timecode string from the 25-bit timecode format (MPEG GOP format).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer, must be at least AV_TIMECODE_STR_SIZE long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tc25bit</parametername>
</parameternamelist>
<parameterdescription>
<para>the 25-bits timecode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buf parameter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1ad279cd982964a2f8cc7adfa01533b412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_timecode_init</definition>
        <argsstring>(AVTimecode *tc, AVRational rate, int flags, int frame_start, void *log_ctx)</argsstring>
        <name>av_timecode_init</name>
        <param>
          <type><ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref> *</type>
          <declname>tc</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
          <declname>rate</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>frame_start</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>log_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init a timecode struct with the passed parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an arbitrary struct of which the first field is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> struct (used for av_log) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tc</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an allocated <ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>frame rate in rational form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>miscellaneous flags such as drop frame, +24 hours, ... (see AVTimecodeFlag) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the first frame number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, AVERROR otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1a02596c9d431329a3acc646c943b1c800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_timecode_init_from_string</definition>
        <argsstring>(AVTimecode *tc, AVRational rate, const char *str, void *log_ctx)</argsstring>
        <name>av_timecode_init_from_string</name>
        <param>
          <type><ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref> *</type>
          <declname>tc</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
          <declname>rate</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>log_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse timecode representation (hh:mm:ss[:;.]ff).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an arbitrary struct of which the first field is a pointer to an <ref refid="struct_a_v_class" kindref="compound">AVClass</ref> struct (used for av_log). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tc</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an allocated <ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>frame rate in rational form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>timecode string which will determine the frame start </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, AVERROR otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timecode_8h_1ae181c7f842ad64c2e75c320e46f4edfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_timecode_check_frame_rate</definition>
        <argsstring>(AVRational rate)</argsstring>
        <name>av_timecode_check_frame_rate</name>
        <param>
          <type><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref></type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the timecode feature is available for the given frame rate</para><para><simplesect kind="return"><para>0 if supported, &lt;0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h" line="138" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Timecode helpers header </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2006<sp/>Smartjog<sp/>S.A.S,<sp/>Baptiste<sp/>Coudurier<sp/>&lt;baptiste.coudurier@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2011-2012<sp/>Smartjog<sp/>S.A.S,<sp/>Clément<sp/>Bœsch<sp/>&lt;clement.boesch@smartjog.com&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>FFmpeg.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>FFmpeg;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">#ifndef<sp/>AVUTIL_TIMECODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVUTIL_TIMECODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rational_8h" kindref="compound">rational.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="timecode_8h_1a60186b13997e64a4aca71ff641634f9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AV_TIMECODE_STR_SIZE<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="timecode_8h_1ad0e6464512b7849a2d14593708079219" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="timecode_8h_1ad0e6464512b7849a2d14593708079219" kindref="member">AVTimecodeFlag</ref><sp/>{</highlight></codeline>
<codeline lineno="36" refid="timecode_8h_1ad0e6464512b7849a2d14593708079219a4cacf5e87e2f19987c5e931be20a5c33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="timecode_8h_1ad0e6464512b7849a2d14593708079219a4cacf5e87e2f19987c5e931be20a5c33" kindref="member">AV_TIMECODE_FLAG_DROPFRAME</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;0,<sp/></highlight></codeline>
<codeline lineno="37" refid="timecode_8h_1ad0e6464512b7849a2d14593708079219abf78793ae8e9e28a4f85bb1a76992f1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="timecode_8h_1ad0e6464512b7849a2d14593708079219abf78793ae8e9e28a4f85bb1a76992f1b" kindref="member">AV_TIMECODE_FLAG_24HOURSMAX</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;1,<sp/></highlight></codeline>
<codeline lineno="38" refid="timecode_8h_1ad0e6464512b7849a2d14593708079219a373f53f5f7544e479b6c6b36b254fc8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="timecode_8h_1ad0e6464512b7849a2d14593708079219a373f53f5f7544e479b6c6b36b254fc8d" kindref="member">AV_TIMECODE_FLAG_ALLOWNEGATIVE</ref><sp/><sp/>=<sp/>1&lt;&lt;2,<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="struct_a_v_timecode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42" refid="struct_a_v_timecode_1af467d05fd293b6206e635e453b1f524a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_timecode_1af467d05fd293b6206e635e453b1f524a" kindref="member">start</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="struct_a_v_timecode_1a76c634043ddfaa9b5772af8286e76216" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_a_v_timecode_1a76c634043ddfaa9b5772af8286e76216" kindref="member">flags</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44" refid="struct_a_v_timecode_1a96510357827972576efb578725affb89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="struct_a_v_timecode_1a96510357827972576efb578725affb89" kindref="member">rate</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45" refid="struct_a_v_timecode_1a4f51e07f80e11263ccfb5efafdab5024" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_timecode_1a4f51e07f80e11263ccfb5efafdab5024" kindref="member">fps</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="timecode_8h_1aef6b950d708ea805b970c16e71a97869" kindref="member">av_timecode_adjust_ntsc_framenum2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>framenum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fps);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="timecode_8h_1ae3045b65cc54f72e9d53d3c97a5f4da5" kindref="member">av_timecode_get_smpte_from_framenum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref><sp/>*tc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>framenum);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="timecode_8h_1a8cadcdf7e38091651068f70adb94f867" kindref="member">av_timecode_make_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref><sp/>*tc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>framenum);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="timecode_8h_1a24963ec8df5712caa8c30b046804d866" kindref="member">av_timecode_make_smpte_tc_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>tcsmpte,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevent_df);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="timecode_8h_1a671b3f88e40043bb521550f911cd6b16" kindref="member">av_timecode_make_mpeg_tc_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>tc25bit);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="timecode_8h_1ad279cd982964a2f8cc7adfa01533b412" kindref="member">av_timecode_init</ref>(<ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref><sp/>*tc,<sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1a960ad82c3ba394a46f17f5f6146c93ea" kindref="member">rate</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*log_ctx);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="timecode_8h_1a02596c9d431329a3acc646c943b1c800" kindref="member">av_timecode_init_from_string</ref>(<ref refid="struct_a_v_timecode" kindref="compound">AVTimecode</ref><sp/>*tc,<sp/><ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1a960ad82c3ba394a46f17f5f6146c93ea" kindref="member">rate</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*log_ctx);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="timecode_8h_1ae181c7f842ad64c2e75c320e46f4edfc" kindref="member">av_timecode_check_frame_rate</ref>(<ref refid="struct_a_v_rational" kindref="compound">AVRational</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1a960ad82c3ba394a46f17f5f6146c93ea" kindref="member">rate</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVUTIL_TIMECODE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/timecode.h"/>
  </compounddef>
</doxygen>
