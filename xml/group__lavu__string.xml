<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavu__string" kind="group">
    <compoundname>lavu_string</compoundname>
    <title>String Manipulation</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__lavu__string_1gaef885958293f07153383f99db573ff5a" prot="public" static="no">
        <name>AVEscapeMode</name>
        <enumvalue id="group__lavu__string_1ggaef885958293f07153383f99db573ff5aa342d7bf60c9a7cb7a886f70f81ac5071" prot="public">
          <name>AV_ESCAPE_MODE_AUTO</name>
          <briefdescription>
<para>Use auto-selected escaping mode. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lavu__string_1ggaef885958293f07153383f99db573ff5aa8b2d26951a9e06d8f7c12977a204eaf9" prot="public">
          <name>AV_ESCAPE_MODE_BACKSLASH</name>
          <briefdescription>
<para>Use backslash escaping. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lavu__string_1ggaef885958293f07153383f99db573ff5aa84da6c323003df474c690ccf5d4e5d67" prot="public">
          <name>AV_ESCAPE_MODE_QUOTE</name>
          <briefdescription>
<para>Use single-quote escaping. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="271" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="271" bodyend="275"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavu__string_1ga6135a12628e2b6a63c8d3d9b3a742b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_strstart</definition>
        <argsstring>(const char *str, const char *pfx, const char **ptr)</argsstring>
        <name>av_strstart</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>pfx</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return non-zero if pfx is a prefix of str. If it is, *ptr is set to the address of the first character in str after the prefix.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>input string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfx</parametername>
</parameternamelist>
<parameterdescription>
<para>prefix to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>updated if the prefix is matched inside str </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-zero if the prefix matches, zero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1gacd29ff1f7e62230a113c88fa10d3f5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_stristart</definition>
        <argsstring>(const char *str, const char *pfx, const char **ptr)</argsstring>
        <name>av_stristart</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>pfx</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return non-zero if pfx is a prefix of str independent of case. If it is, *ptr is set to the address of the first character in str after the prefix.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>input string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfx</parametername>
</parameternamelist>
<parameterdescription>
<para>prefix to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>updated if the prefix is matched inside str </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-zero if the prefix matches, zero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga47e14424edfb96d3f6bf0fca96a76fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_stristr</definition>
        <argsstring>(const char *haystack, const char *needle)</argsstring>
        <name>av_stristr</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>haystack</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>needle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locate the first case-independent occurrence in the string haystack of the string needle. A zero-length string needle is considered to match at the start of haystack.</para><para>This function is a case-insensitive version of the standard strstr().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>haystack</parametername>
</parameternamelist>
<parameterdescription>
<para>string to search in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>needle</parametername>
</parameternamelist>
<parameterdescription>
<para>string to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the located match within haystack or a null pointer if no match </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga827486f333df7bc9a4e7f9bd212ba472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_strnstr</definition>
        <argsstring>(const char *haystack, const char *needle, size_t hay_length)</argsstring>
        <name>av_strnstr</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>haystack</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hay_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locate the first occurrence of the string needle in the string haystack where not more than hay_length characters are searched. A zero-length string needle is considered to match at the start of haystack.</para><para>This function is a length-limited version of the standard strstr().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>haystack</parametername>
</parameternamelist>
<parameterdescription>
<para>string to search in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>needle</parametername>
</parameternamelist>
<parameterdescription>
<para>string to search for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hay_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of string to search in </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the located match within haystack or a null pointer if no match </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga716447ae73b612bcf3a405b9b4608f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t av_strlcpy</definition>
        <argsstring>(char *dst, const char *src, size_t size)</argsstring>
        <name>av_strlcpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the string src to dst, but no more than size - 1 bytes, and null-terminate dst.</para><para>This function is the same as BSD strlcpy().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of destination buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of src</para></simplesect>
<simplesect kind="warning"><para>since the return value is the length of src, src absolutely <emphasis>must</emphasis> be a properly 0-terminated string, otherwise this will read beyond the end of the buffer and possibly crash. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga193877ba459faf314c3d285b6082cf73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t av_strlcat</definition>
        <argsstring>(char *dst, const char *src, size_t size)</argsstring>
        <name>av_strlcat</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append the string src to the string dst, but to a total length of no more than size - 1 bytes, and null-terminate dst.</para><para>This function is similar to BSD strlcat(), but differs when size &lt;= strlen(dst).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of destination buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the total length of src and dst</para></simplesect>
<simplesect kind="warning"><para>since the return value use the length of src and dst, these absolutely <emphasis>must</emphasis> be a properly 0-terminated strings, otherwise this will read beyond the end of the buffer and possibly crash. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1gae264e2caf6ad1ca830ce3f2b49abdf50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t av_strlcatf</definition>
        <argsstring>(char *dst, size_t size, const char *fmt,...) av_printf_format(3</argsstring>
        <name>av_strlcatf</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append output to a string, according to a format. Never write out of the destination buffer, and always put a terminating 0 within the buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (string to which the output is appended) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>total size of the destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-compatible format string, specifying how the following parameters are used </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the string that would have been generated if enough space had been available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga1cb2a3929575d28a415dc02b917ecc01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t static size_t</type>
        <definition>size_t static size_t av_strnlen</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>av_strnlen</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the count of continuous non zero chars starting from the beginning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of characters to check in the string, that is the maximum value which is returned by the function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="140" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga0a8e3f4a2a3039c441bd0826e4727462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_asprintf</definition>
        <argsstring>(const char *fmt,...) av_printf_format(1</argsstring>
        <name>av_asprintf</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print arguments following specified format into a large enough auto allocated buffer. It is similar to GNU asprintf(). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-compatible format string, specifying how the following parameters are used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the allocated string </para></simplesect>
<simplesect kind="note"><para>You have to free the string yourself with <ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga45d0395a448bc186baf081933ea816c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char char *</type>
        <definition>char char* av_d2str</definition>
        <argsstring>(double d)</argsstring>
        <name>av_d2str</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a number to a av_malloced string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga7b438169b430f6edf4f4451d867a9218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_get_token</definition>
        <argsstring>(const char **buf, const char *term)</argsstring>
        <name>av_get_token</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unescape the given string until a non escaped terminating char, and return the token corresponding to the unescaped string.</para><para>The normal \ and &apos; escaping is supported. Leading and trailing whitespaces are removed, unless they are escaped with &apos;\&apos; or are enclosed between &apos;&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to parse, buf will be updated to point to the terminating char </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>a 0-terminated list of terminating chars </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the malloced unescaped string, which must be av_freed by the user, NULL in case of allocation failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga3d4270f4ed651c414e2850090b9b77c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* av_strtok</definition>
        <argsstring>(char *s, const char *delim, char **saveptr)</argsstring>
        <name>av_strtok</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>saveptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split the string into several tokens which can be accessed by successive calls to <ref refid="group__lavu__string_1ga3d4270f4ed651c414e2850090b9b77c4" kindref="member">av_strtok()</ref>.</para><para>A token is defined as a sequence of characters not belonging to the set specified in delim.</para><para>On the first call to <ref refid="group__lavu__string_1ga3d4270f4ed651c414e2850090b9b77c4" kindref="member">av_strtok()</ref>, s should point to the string to parse, and the value of saveptr is ignored. In subsequent calls, s should be NULL, and saveptr should be unchanged since the previous call.</para><para>This function is similar to strtok_r() defined in POSIX.1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to parse, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>0-terminated list of token delimiters, must be non-NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saveptr</parametername>
</parameternamelist>
<parameterdescription>
<para>user-provided pointer which points to stored information necessary for <ref refid="group__lavu__string_1ga3d4270f4ed651c414e2850090b9b77c4" kindref="member">av_strtok()</ref> to continue scanning the same string. saveptr is updated to point to the next character after the first delimiter found, or to NULL if the string was terminated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the found token, or NULL when no token is found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga99c146fb2512c81128de3787e8c5df82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_isdigit</definition>
        <argsstring>(int c)</argsstring>
        <name>av_isdigit</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent conversion of ASCII isdigit. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1gaef38d29ca3e476219b2d0d90b99522da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_isgraph</definition>
        <argsstring>(int c)</argsstring>
        <name>av_isgraph</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent conversion of ASCII isgraph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1gabaff995bffa1668b17a9dbcde8ec7fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_isspace</definition>
        <argsstring>(int c)</argsstring>
        <name>av_isspace</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent conversion of ASCII isspace. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga262a3d80561e29b145f794ddd4ce6bf3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int av_toupper</definition>
        <argsstring>(int c)</argsstring>
        <name>av_toupper</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent conversion of ASCII characters to uppercase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="221" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga1f7e6b40b0547c47b644d5534fa18198" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int av_tolower</definition>
        <argsstring>(int c)</argsstring>
        <name>av_tolower</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent conversion of ASCII characters to lowercase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="231" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="231" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga444bf6bfebcb20a08e1a9ef00553f2c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_isxdigit</definition>
        <argsstring>(int c)</argsstring>
        <name>av_isxdigit</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent conversion of ASCII isxdigit. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga4c60b7d4ce023a6466bc033e31c5349c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_strcasecmp</definition>
        <argsstring>(const char *a, const char *b)</argsstring>
        <name>av_strcasecmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent case-insensitive compare. <simplesect kind="note"><para>This means only ASCII-range characters are case-insensitive </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1gaea8a7c8c2832c11e753fbfc0d1464970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_strncasecmp</definition>
        <argsstring>(const char *a, const char *b, size_t n)</argsstring>
        <name>av_strncasecmp</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locale-independent case-insensitive compare. <simplesect kind="note"><para>This means only ASCII-range characters are case-insensitive </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga1fe5db82a1f7639434fc01bf83919096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* av_basename</definition>
        <argsstring>(const char *path)</argsstring>
        <name>av_basename</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread safe basename. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path, on DOS both \ and / are considered separators. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the basename substring. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1gac50facc4ebec4a3a4a06c058a71bc027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* av_dirname</definition>
        <argsstring>(char *path)</argsstring>
        <name>av_dirname</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread safe dirname. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path, on DOS both \ and / are considered separators. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the path with the separator replaced by the string terminator or &quot;.&quot;. </para></simplesect>
<simplesect kind="note"><para>the function may change the input string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga3781b9212ada2863274cf1def2743d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_escape</definition>
        <argsstring>(char **dst, const char *src, const char *special_chars, enum AVEscapeMode mode, int flags)</argsstring>
        <name>av_escape</name>
        <param>
          <type>char **</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>special_chars</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__string_1gaef885958293f07153383f99db573ff5a" kindref="member">AVEscapeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape string in src, and put the escaped string in an allocated string in *dst, which must be freed with <ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where an allocated string is put </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>string to escape, must be non-NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>special_chars</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing the special characters which need to be escaped, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>escape mode to employ, see AV_ESCAPE_MODE_* macros. Any unknown value for mode will be considered equivalent to AV_ESCAPE_MODE_BACKSLASH, but this behaviour can change without notice. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags which control how to escape, see AV_ESCAPE_FLAG_ macros </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the allocated string, or a negative error code in case of error </para></simplesect>
<simplesect kind="see"><para><ref refid="bprint_8h_1a14ec58eeaa6d4a3571cd9f0ffb873e62" kindref="member">av_bprint_escape()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__string_1ga4b48c16f6614091a8ea6b3e3836b541a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_utf8_decode</definition>
        <argsstring>(int32_t *codep, const uint8_t **bufp, const uint8_t *buf_end, unsigned int flags)</argsstring>
        <name>av_utf8_decode</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref> *</type>
          <declname>codep</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> **</type>
          <declname>bufp</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>buf_end</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read and decode a single UTF-8 code point (character) from the buffer in *buf, and update *buf to point to the next byte to decode.</para><para>In case of an invalid byte sequence, the pointer will be updated to the next byte after the invalid sequence and the function will return an error code.</para><para>Depending on the specified flags, the function will also fail in case the decoded code point does not belong to a valid range.</para><para><simplesect kind="note"><para>For speed-relevant code a carefully implemented use of <ref refid="ffmpeg_2libavutil_2common_8h_1a1a2fd8cd42afb00c9f69562f52b1ae4b" kindref="member">GET_UTF8()</ref> may be preferred.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codep</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer used to return the parsed code in case of success. The value in *codep is set even in case the range check fails. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the address the first byte of the sequence to decode, updated by the function to point to the byte next after the decoded sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_end</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the end of the buffer, points to the next byte past the last in the buffer. This is used to avoid buffer overreads (in case of an unfinished UTF-8 sequence towards the end of the buffer). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>a collection of AV_UTF8_FLAG_* flags </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 in case a sequence was successfully read, a negative value in case of invalid sequence </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="349" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__lavu__string_1ga84ac09ffcff9c3c42c35db1f8477cc17" prot="public" static="no">
        <name>AV_ESCAPE_FLAG_WHITESPACE</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Consider spaces special and escape them even in the middle of the string.</para><para>This is equivalent to adding the whitespace characters to the special characters lists, except it is guaranteed to use the exact same list of whitespace characters as the rest of libavutil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="285" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__string_1ga24963cc06a1b89194ba8a2fe013a7d7d" prot="public" static="no">
        <name>AV_ESCAPE_FLAG_STRICT</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape only specified special characters. Without this flag, escape also any characters that may be considered special by <ref refid="group__lavu__string_1ga7b438169b430f6edf4f4451d867a9218" kindref="member">av_get_token()</ref>, such as the single quote. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="292" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__string_1ga61b431e73b72949c839788914a599207" prot="public" static="no">
        <name>AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES</name>
        <initializer>1</initializer>
        <briefdescription>
<para>accept codepoints over 0x10FFFF </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="313" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__string_1gadc5f344d3eafe34e9c3169b1178e137b" prot="public" static="no">
        <name>AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS</name>
        <initializer>2</initializer>
        <briefdescription>
<para>accept non-characters - 0xFFFE and 0xFFFF </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="314" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__string_1ga39a93e11907ca4b116d8d179cbdb570d" prot="public" static="no">
        <name>AV_UTF8_FLAG_ACCEPT_SURROGATES</name>
        <initializer>4</initializer>
        <briefdescription>
<para>accept UTF-16 surrogates codes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="315" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__string_1gaecaf936b2eb2f3c410869e235650229b" prot="public" static="no">
        <name>AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES</name>
        <initializer>8</initializer>
        <briefdescription>
<para>exclude control codes not accepted by XML </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="316" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lavu__string_1ga4825349f5346880c6ac32b0847e9a73a" prot="public" static="no">
        <name>AV_UTF8_FLAG_ACCEPT_ALL</name>
        <initializer><ref refid="group__lavu__string_1ga61b431e73b72949c839788914a599207" kindref="member">AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES</ref>|<ref refid="group__lavu__string_1gadc5f344d3eafe34e9c3169b1178e137b" kindref="member">AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS</ref>|<ref refid="group__lavu__string_1ga39a93e11907ca4b116d8d179cbdb570d" kindref="member">AV_UTF8_FLAG_ACCEPT_SURROGATES</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" line="318" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/avstring.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
