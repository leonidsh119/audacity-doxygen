<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_sequence_8cpp" kind="file" language="C++">
    <compoundname>Sequence.cpp</compoundname>
    <includes refid="_audacity_8h" local="yes">Audacity.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="float_8h" local="no">float.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">wx/dynarray.h</includes>
    <includes local="no">wx/intl.h</includes>
    <includes local="no">wx/filefn.h</includes>
    <includes local="no">wx/ffile.h</includes>
    <includes local="no">wx/log.h</includes>
    <includes refid="_sequence_8h" local="yes">Sequence.h</includes>
    <includes refid="_block_file_8h" local="yes">BlockFile.h</includes>
    <includes refid="_o_d_decode_block_file_8h" local="yes">blockfile/ODDecodeBlockFile.h</includes>
    <includes refid="_dir_manager_8h" local="yes">DirManager.h</includes>
    <includes refid="_simple_block_file_8h" local="yes">blockfile/SimpleBlockFile.h</includes>
    <includes refid="_silent_block_file_8h" local="yes">blockfile/SilentBlockFile.h</includes>
    <incdepgraph>
      <node id="53836">
        <label>wx/dir.h</label>
      </node>
      <node id="53843">
        <label>wx/choice.h</label>
      </node>
      <node id="53797">
        <label>wx/filefn.h</label>
      </node>
      <node id="53818">
        <label>wx/hashmap.h</label>
      </node>
      <node id="53871">
        <label>toolbars/SelectionBarListener.h</label>
        <link refid="_selection_bar_listener_8h"/>
      </node>
      <node id="53869">
        <label>wx/gauge.h</label>
      </node>
      <node id="53837">
        <label>wx/event.h</label>
      </node>
      <node id="53798">
        <label>wx/ffile.h</label>
      </node>
      <node id="53858">
        <label>audacity/ModuleInterface.h</label>
        <link refid="_module_interface_8h"/>
        <childnode refid="53805" relation="include">
        </childnode>
        <childnode refid="53850" relation="include">
        </childnode>
        <childnode refid="53859" relation="include">
        </childnode>
      </node>
      <node id="53821">
        <label>ODTask.h</label>
        <link refid="_o_d_task_8h"/>
        <childnode refid="53810" relation="include">
        </childnode>
        <childnode refid="53812" relation="include">
        </childnode>
        <childnode refid="53822" relation="include">
        </childnode>
        <childnode refid="53801" relation="include">
        </childnode>
        <childnode refid="53878" relation="include">
        </childnode>
      </node>
      <node id="53876">
        <label>wx/dcclient.h</label>
      </node>
      <node id="53835">
        <label>wx/cmdline.h</label>
      </node>
      <node id="53792">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="53793" relation="include">
        </childnode>
      </node>
      <node id="53849">
        <label>audacity/EffectInterface.h</label>
        <link refid="_effect_interface_8h"/>
        <childnode refid="53805" relation="include">
        </childnode>
        <childnode refid="53850" relation="include">
        </childnode>
        <childnode refid="53851" relation="include">
        </childnode>
        <childnode refid="53852" relation="include">
        </childnode>
        <childnode refid="53847" relation="include">
        </childnode>
      </node>
      <node id="53865">
        <label>../Internat.h</label>
        <link refid="_internat_8h"/>
        <childnode refid="53806" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53866" relation="include">
        </childnode>
      </node>
      <node id="53807">
        <label>xml/XMLTagHandler.h</label>
        <link refid="_x_m_l_tag_handler_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53808" relation="include">
        </childnode>
        <childnode refid="53809" relation="include">
        </childnode>
      </node>
      <node id="53793">
        <label>stdint.h</label>
      </node>
      <node id="53827">
        <label>TrackPanelListener.h</label>
        <link refid="_track_panel_listener_8h"/>
      </node>
      <node id="53826">
        <label>wx/wxchar.h</label>
      </node>
      <node id="53875">
        <label>wx/frame.h</label>
      </node>
      <node id="53810">
        <label>ondemand/ODTaskThread.h</label>
        <link refid="_o_d_task_thread_8h"/>
        <childnode refid="53811" relation="include">
        </childnode>
        <childnode refid="53789" relation="include">
        </childnode>
      </node>
      <node id="53851">
        <label>audacity/ConfigInterface.h</label>
        <link refid="_config_interface_8h"/>
        <childnode refid="53805" relation="include">
        </childnode>
      </node>
      <node id="53819">
        <label>wx/utils.h</label>
      </node>
      <node id="53868">
        <label>wx/evtloop.h</label>
      </node>
      <node id="53823">
        <label>Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="53804" relation="include">
        </childnode>
      </node>
      <node id="53841">
        <label>wx/timer.h</label>
      </node>
      <node id="53788">
        <label>C:/_dev/OpenU/Audacity/audacity/src/Sequence.cpp</label>
        <link refid="Sequence.cpp"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53790" relation="include">
        </childnode>
        <childnode refid="53791" relation="include">
        </childnode>
        <childnode refid="53794" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53796" relation="include">
        </childnode>
        <childnode refid="53797" relation="include">
        </childnode>
        <childnode refid="53798" relation="include">
        </childnode>
        <childnode refid="53799" relation="include">
        </childnode>
        <childnode refid="53800" relation="include">
        </childnode>
        <childnode refid="53812" relation="include">
        </childnode>
        <childnode refid="53814" relation="include">
        </childnode>
        <childnode refid="53816" relation="include">
        </childnode>
        <childnode refid="53815" relation="include">
        </childnode>
        <childnode refid="53879" relation="include">
        </childnode>
      </node>
      <node id="53824">
        <label>ViewInfo.h</label>
        <link refid="_view_info_8h"/>
        <childnode refid="53801" relation="include">
        </childnode>
        <childnode refid="53825" relation="include">
        </childnode>
      </node>
      <node id="53864">
        <label>../Shuttle.h</label>
        <link refid="_shuttle_8h"/>
      </node>
      <node id="53854">
        <label>wx/fileconf.h</label>
      </node>
      <node id="53856">
        <label>map</label>
      </node>
      <node id="53859">
        <label>audacity/PluginInterface.h</label>
        <link refid="_plugin_interface_8h"/>
        <childnode refid="53805" relation="include">
        </childnode>
        <childnode refid="53851" relation="include">
        </childnode>
        <childnode refid="53849" relation="include">
        </childnode>
        <childnode refid="53850" relation="include">
        </childnode>
        <childnode refid="53857" relation="include">
        </childnode>
        <childnode refid="53858" relation="include">
        </childnode>
      </node>
      <node id="53872">
        <label>toolbars/SpectralSelectionBarListener.h</label>
        <link refid="_spectral_selection_bar_listener_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
      </node>
      <node id="53870">
        <label>wx/stattext.h</label>
      </node>
      <node id="53840">
        <label>wx/socket.h</label>
      </node>
      <node id="53874">
        <label>wx/generic/dragimgg.h</label>
      </node>
      <node id="53850">
        <label>audacity/IdentInterface.h</label>
        <link refid="_ident_interface_8h"/>
        <childnode refid="53805" relation="include">
        </childnode>
      </node>
      <node id="53817">
        <label>wx/list.h</label>
      </node>
      <node id="53814">
        <label>blockfile/ODDecodeBlockFile.h</label>
        <link refid="_o_d_decode_block_file_8h"/>
        <childnode refid="53815" relation="include">
        </childnode>
        <childnode refid="53812" relation="include">
        </childnode>
        <childnode refid="53810" relation="include">
        </childnode>
        <childnode refid="53816" relation="include">
        </childnode>
        <childnode refid="53820" relation="include">
        </childnode>
        <childnode refid="53811" relation="include">
        </childnode>
      </node>
      <node id="53832">
        <label>wx/menu.h</label>
      </node>
      <node id="53804">
        <label>wx/defs.h</label>
      </node>
      <node id="53845">
        <label>wx/window.h</label>
      </node>
      <node id="53796">
        <label>wx/intl.h</label>
      </node>
      <node id="53867">
        <label>../widgets/ProgressDialog.h</label>
        <link refid="_progress_dialog_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53804" relation="include">
        </childnode>
        <childnode refid="53847" relation="include">
        </childnode>
        <childnode refid="53868" relation="include">
        </childnode>
        <childnode refid="53869" relation="include">
        </childnode>
        <childnode refid="53870" relation="include">
        </childnode>
        <childnode refid="53819" relation="include">
        </childnode>
      </node>
      <node id="53820">
        <label>../ondemand/ODDecodeTask.h</label>
        <link refid="_o_d_decode_task_8h"/>
        <childnode refid="53801" relation="include">
        </childnode>
        <childnode refid="53821" relation="include">
        </childnode>
        <childnode refid="53810" relation="include">
        </childnode>
      </node>
      <node id="53862">
        <label>wx/bmpbuttn.h</label>
      </node>
      <node id="53805">
        <label>audacity/Types.h</label>
        <link refid="include_2audacity_2_types_8h"/>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53806" relation="include">
        </childnode>
      </node>
      <node id="53812">
        <label>BlockFile.h</label>
        <link refid="_block_file_8h"/>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53798" relation="include">
        </childnode>
        <childnode refid="53813" relation="include">
        </childnode>
        <childnode refid="53807" relation="include">
        </childnode>
        <childnode refid="53809" relation="include">
        </childnode>
        <childnode refid="53803" relation="include">
        </childnode>
      </node>
      <node id="53855">
        <label>../PluginManager.h</label>
        <link refid="_plugin_manager_8h"/>
        <childnode refid="53804" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53854" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53856" relation="include">
        </childnode>
        <childnode refid="53849" relation="include">
        </childnode>
        <childnode refid="53857" relation="include">
        </childnode>
        <childnode refid="53858" relation="include">
        </childnode>
        <childnode refid="53859" relation="include">
        </childnode>
      </node>
      <node id="53847">
        <label>wx/dialog.h</label>
      </node>
      <node id="53813">
        <label>wx/filename.h</label>
      </node>
      <node id="53846">
        <label>effects/EffectManager.h</label>
        <link refid="_effect_manager_8h"/>
        <childnode refid="53823" relation="include">
        </childnode>
        <childnode refid="53843" relation="include">
        </childnode>
        <childnode refid="53847" relation="include">
        </childnode>
        <childnode refid="53837" relation="include">
        </childnode>
        <childnode refid="53848" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53849" relation="include">
        </childnode>
        <childnode refid="53855" relation="include">
        </childnode>
        <childnode refid="53860" relation="include">
        </childnode>
      </node>
      <node id="53800">
        <label>Sequence.h</label>
        <link refid="_sequence_8h"/>
        <childnode refid="53801" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53803" relation="include">
        </childnode>
        <childnode refid="53807" relation="include">
        </childnode>
        <childnode refid="53809" relation="include">
        </childnode>
        <childnode refid="53810" relation="include">
        </childnode>
        <childnode refid="53805" relation="include">
        </childnode>
      </node>
      <node id="53852">
        <label>audacity/EffectAutomationParameters.h</label>
        <link refid="_effect_automation_parameters_8h"/>
        <childnode refid="53853" relation="include">
        </childnode>
        <childnode refid="53835" relation="include">
        </childnode>
        <childnode refid="53854" relation="include">
        </childnode>
        <childnode refid="53796" relation="include">
        </childnode>
      </node>
      <node id="53829">
        <label>commands/CommandManager.h</label>
        <link refid="_command_manager_8h"/>
        <childnode refid="53823" relation="include">
        </childnode>
        <childnode refid="53830" relation="include">
        </childnode>
        <childnode refid="53801" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53832" relation="include">
        </childnode>
        <childnode refid="53818" relation="include">
        </childnode>
        <childnode refid="53833" relation="include">
        </childnode>
        <childnode refid="53807" relation="include">
        </childnode>
        <childnode refid="53805" relation="include">
        </childnode>
      </node>
      <node id="53789">
        <label>Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="53844">
        <label>wx/grid.h</label>
      </node>
      <node id="53791">
        <label>float.h</label>
        <link refid="float_8h"/>
        <childnode refid="53792" relation="include">
        </childnode>
      </node>
      <node id="53801">
        <label>vector</label>
      </node>
      <node id="53860">
        <label>Effect.h</label>
        <link refid="src_2effects_2_effect_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53830" relation="include">
        </childnode>
        <childnode refid="53861" relation="include">
        </childnode>
        <childnode refid="53862" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53796" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53863" relation="include">
        </childnode>
        <childnode refid="53851" relation="include">
        </childnode>
        <childnode refid="53849" relation="include">
        </childnode>
        <childnode refid="53823" relation="include">
        </childnode>
        <childnode refid="53825" relation="include">
        </childnode>
        <childnode refid="53864" relation="include">
        </childnode>
        <childnode refid="53865" relation="include">
        </childnode>
        <childnode refid="53867" relation="include">
        </childnode>
      </node>
      <node id="53795">
        <label>wx/dynarray.h</label>
      </node>
      <node id="53822">
        <label>../Project.h</label>
        <link refid="_project_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53823" relation="include">
        </childnode>
        <childnode refid="53816" relation="include">
        </childnode>
        <childnode refid="53824" relation="include">
        </childnode>
        <childnode refid="53827" relation="include">
        </childnode>
        <childnode refid="53828" relation="include">
        </childnode>
        <childnode refid="53829" relation="include">
        </childnode>
        <childnode refid="53846" relation="include">
        </childnode>
        <childnode refid="53807" relation="include">
        </childnode>
        <childnode refid="53871" relation="include">
        </childnode>
        <childnode refid="53872" relation="include">
        </childnode>
        <childnode refid="53804" relation="include">
        </childnode>
        <childnode refid="53837" relation="include">
        </childnode>
        <childnode refid="53799" relation="include">
        </childnode>
        <childnode refid="53873" relation="include">
        </childnode>
        <childnode refid="53874" relation="include">
        </childnode>
        <childnode refid="53875" relation="include">
        </childnode>
        <childnode refid="53796" relation="include">
        </childnode>
        <childnode refid="53876" relation="include">
        </childnode>
        <childnode refid="53877" relation="include">
        </childnode>
      </node>
      <node id="53857">
        <label>audacity/ImporterInterface.h</label>
        <link refid="_importer_interface_8h"/>
        <childnode refid="53805" relation="include">
        </childnode>
        <childnode refid="53851" relation="include">
        </childnode>
        <childnode refid="53850" relation="include">
        </childnode>
      </node>
      <node id="53802">
        <label>wx/string.h</label>
      </node>
      <node id="53833">
        <label>../AudacityApp.h</label>
        <link refid="_audacity_app_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53834" relation="include">
        </childnode>
        <childnode refid="53835" relation="include">
        </childnode>
        <childnode refid="53836" relation="include">
        </childnode>
        <childnode refid="53837" relation="include">
        </childnode>
        <childnode refid="53838" relation="include">
        </childnode>
        <childnode refid="53796" relation="include">
        </childnode>
        <childnode refid="53839" relation="include">
        </childnode>
        <childnode refid="53799" relation="include">
        </childnode>
        <childnode refid="53840" relation="include">
        </childnode>
        <childnode refid="53841" relation="include">
        </childnode>
        <childnode refid="53842" relation="include">
        </childnode>
        <childnode refid="53810" relation="include">
        </childnode>
        <childnode refid="53823" relation="include">
        </childnode>
      </node>
      <node id="53848">
        <label>wx/listbox.h</label>
      </node>
      <node id="53799">
        <label>wx/log.h</label>
      </node>
      <node id="53794">
        <label>math.h</label>
      </node>
      <node id="53816">
        <label>../DirManager.h</label>
        <link refid="_dir_manager_8h"/>
        <childnode refid="53817" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53813" relation="include">
        </childnode>
        <childnode refid="53818" relation="include">
        </childnode>
        <childnode refid="53819" relation="include">
        </childnode>
        <childnode refid="53805" relation="include">
        </childnode>
        <childnode refid="53807" relation="include">
        </childnode>
      </node>
      <node id="53825">
        <label>SelectedRegion.h</label>
        <link refid="_selected_region_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53823" relation="include">
        </childnode>
        <childnode refid="53804" relation="include">
        </childnode>
        <childnode refid="53826" relation="include">
        </childnode>
        <childnode refid="53794" relation="include">
        </childnode>
      </node>
      <node id="53806">
        <label>wx/arrstr.h</label>
      </node>
      <node id="53878">
        <label>wx/wx.h</label>
      </node>
      <node id="53839">
        <label>wx/snglinst.h</label>
      </node>
      <node id="53811">
        <label>wx/thread.h</label>
      </node>
      <node id="53873">
        <label>wx/dragimag.h</label>
      </node>
      <node id="53815">
        <label>SimpleBlockFile.h</label>
        <link refid="_simple_block_file_8h"/>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53813" relation="include">
        </childnode>
        <childnode refid="53812" relation="include">
        </childnode>
        <childnode refid="53816" relation="include">
        </childnode>
        <childnode refid="53809" relation="include">
        </childnode>
      </node>
      <node id="53879">
        <label>blockfile/SilentBlockFile.h</label>
        <link refid="_silent_block_file_8h"/>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53813" relation="include">
        </childnode>
        <childnode refid="53812" relation="include">
        </childnode>
        <childnode refid="53816" relation="include">
        </childnode>
      </node>
      <node id="53863">
        <label>wx/tglbtn.h</label>
      </node>
      <node id="53830">
        <label>../MemoryX.h</label>
        <link refid="_memory_x_8h"/>
        <childnode refid="53831" relation="include">
        </childnode>
      </node>
      <node id="53842">
        <label>widgets/FileHistory.h</label>
        <link refid="_file_history_8h"/>
        <childnode refid="53804" relation="include">
        </childnode>
        <childnode refid="53843" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53837" relation="include">
        </childnode>
        <childnode refid="53844" relation="include">
        </childnode>
        <childnode refid="53802" relation="include">
        </childnode>
        <childnode refid="53845" relation="include">
        </childnode>
      </node>
      <node id="53861">
        <label>set</label>
      </node>
      <node id="53877">
        <label>Menus.h</label>
        <link refid="_menus_8h"/>
        <childnode refid="53823" relation="include">
        </childnode>
      </node>
      <node id="53834">
        <label>wx/app.h</label>
        <link refid="app_8h"/>
      </node>
      <node id="53866">
        <label>wx/longlong.h</label>
      </node>
      <node id="53790">
        <label>algorithm</label>
      </node>
      <node id="53808">
        <label>stdio.h</label>
      </node>
      <node id="53803">
        <label>SampleFormat.h</label>
        <link refid="_sample_format_8h"/>
        <childnode refid="53789" relation="include">
        </childnode>
        <childnode refid="53804" relation="include">
        </childnode>
        <childnode refid="53805" relation="include">
        </childnode>
      </node>
      <node id="53853">
        <label>locale.h</label>
      </node>
      <node id="53838">
        <label>wx/docview.h</label>
      </node>
      <node id="53831">
        <label>memory</label>
      </node>
      <node id="53809">
        <label>XMLWriter.h</label>
        <link refid="_x_m_l_writer_8h"/>
        <childnode refid="53806" relation="include">
        </childnode>
        <childnode refid="53795" relation="include">
        </childnode>
        <childnode refid="53798" relation="include">
        </childnode>
      </node>
      <node id="53828">
        <label>AudioIOListener.h</label>
        <link refid="_audio_i_o_listener_8h"/>
        <childnode refid="53802" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Implements classes <ref refid="class_sequence" kindref="compound">Sequence</ref> and <ref refid="class_seq_block" kindref="compound">SeqBlock</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Sequence.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">*******************************************************************/</highlight><highlight class="comment">/****************************************************************/</highlight><highlight class="comment">/****************************************************************/</highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_audacity_8h" kindref="compound">Audacity.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="float_8h" kindref="compound">float.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/dynarray.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/intl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/filefn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/ffile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_sequence_8h" kindref="compound">Sequence.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_block_file_8h" kindref="compound">BlockFile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_d_decode_block_file_8h" kindref="compound">blockfile/ODDecodeBlockFile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_dir_manager_8h" kindref="compound">DirManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_simple_block_file_8h" kindref="compound">blockfile/SimpleBlockFile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_silent_block_file_8h" kindref="compound">blockfile/SilentBlockFile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sequence::sMaxDiskBlockSize<sp/>=<sp/>1048576;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sequence<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_sequence_1a7b70a4e19965a2cd8916d3d4d4b4de73" refkind="member"><highlight class="normal"><ref refid="class_sequence_1a7b70a4e19965a2cd8916d3d4d4b4de73" kindref="member">Sequence::Sequence</ref>(<ref refid="class_dir_manager" kindref="compound">DirManager</ref><sp/>*<sp/>projDirManager,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>:<sp/>mDirManager(projDirManager)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>,<sp/>mSampleFormat(format)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>,<sp/>mMinSamples(sMaxDiskBlockSize<sp/>/<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>,<sp/>mMaxSamples(mMinSamples<sp/>*<sp/>2)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a0021fa0d115f9751ba352812e8e23b16" kindref="member">Ref</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>essentially<sp/>a<sp/>copy<sp/>constructor<sp/>-<sp/>but<sp/>you<sp/>must<sp/>pass<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>project&apos;s<sp/>DirManager,<sp/>because<sp/>we<sp/>might<sp/>be<sp/>copying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>one<sp/>project<sp/>to<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_sequence_1a480538220e6df755a8005978b92c1dc4" refkind="member"><highlight class="normal"><ref refid="class_sequence_1a7b70a4e19965a2cd8916d3d4d4b4de73" kindref="member">Sequence::Sequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref><sp/>&amp;orig,<sp/><ref refid="class_dir_manager" kindref="compound">DirManager</ref><sp/>*projDirManager)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>:<sp/>mDirManager(projDirManager)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>,<sp/>mSampleFormat(orig.mSampleFormat)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>,<sp/>mMinSamples(orig.mMinSamples)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>,<sp/>mMaxSamples(orig.mMaxSamples)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a0021fa0d115f9751ba352812e8e23b16" kindref="member">Ref</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bResult<sp/>=<sp/><ref refid="class_sequence_1ae1be03bcb01e4cc477de4d1cf8eae19c" kindref="member">Paste</ref>(0,<sp/>&amp;orig);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(bResult);<sp/></highlight><highlight class="comment">//<sp/>TO<sp/>DO:<sp/>Actually<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)bResult;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_sequence_1aee09a7d70c3ab523fed85da94ea1366f" refkind="member"><highlight class="normal"><ref refid="class_sequence_1aee09a7d70c3ab523fed85da94ea1366f" kindref="member">Sequence::~Sequence</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>DerefAllFiles();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sequence::DerefAllFiles()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>nn<sp/>=<sp/>mBlock.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>nn;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*&amp;<sp/>pOldFile<sp/>=<sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].f;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pOldFile)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>(pOldFile);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pOldFile<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="class_sequence_1ab55738fa6a1ca2941242bae22a37c343" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_sequence_1ab55738fa6a1ca2941242bae22a37c343" kindref="member">Sequence::GetMaxBlockSize</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mMaxSamples;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="class_sequence_1a288621003a85ced979a1614e70948477" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_sequence_1a288621003a85ced979a1614e70948477" kindref="member">Sequence::GetIdealBlockSize</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="104"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mMaxSamples;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="class_sequence_1a83e597af16f1c332a7bdb4d5cc863e58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a83e597af16f1c332a7bdb4d5cc863e58" kindref="member">Sequence::Lock</ref>()</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mBlock.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;Lock();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="class_sequence_1ae3a164d14d88ec0d5e4fd43c34167be6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1ae3a164d14d88ec0d5e4fd43c34167be6" kindref="member">Sequence::CloseLock</ref>()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mBlock.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;CloseLock();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_sequence_1a92a9bf270ef273c359fc16323f3b3c02" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a92a9bf270ef273c359fc16323f3b3c02" kindref="member">Sequence::Unlock</ref>()</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mBlock.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;Unlock();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="class_sequence_1aaec26c4f850a02c6f66bad8184d61d95" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="class_sequence_1aaec26c4f850a02c6f66bad8184d61d95" kindref="member">Sequence::GetSampleFormat</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="133"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSampleFormat;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment">bool<sp/>Sequence::SetSampleFormat(sampleFormat<sp/>format)</highlight></codeline>
<codeline lineno="139"><highlight class="comment">{</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(mBlock.size()<sp/>&gt;<sp/>0<sp/>||<sp/>mNumSamples<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>mSampleFormat<sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="145"><highlight class="comment">}</highlight></codeline>
<codeline lineno="146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_sequence_1a1e12ecfc5cb063fb6984e10445abc287" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a1e12ecfc5cb063fb6984e10445abc287" kindref="member">Sequence::ConvertToSampleFormat</ref>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pbChanged)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(pbChanged);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>*pbChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Caller<sp/>should<sp/>check<sp/>this<sp/>no-change<sp/>case<sp/>before<sp/>calling;<sp/>we<sp/>ignore<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/>mSampleFormat)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mBlock.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat<sp/>=<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pbChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>oldFormat<sp/>=<sp/>mSampleFormat;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>mSampleFormat<sp/>=<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>oldMinSamples<sp/>=<sp/>mMinSamples,<sp/>oldMaxSamples<sp/>=<sp/>mMaxSamples;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>the<sp/>same<sp/>calculations<sp/>as<sp/>in<sp/>the<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>mMinSamples<sp/>=<sp/>sMaxDiskBlockSize<sp/>/<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>mMaxSamples<sp/>=<sp/>mMinSamples<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_block_array" kindref="compound">BlockArray</ref><sp/>newBlockArray;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>ratio<sp/>of<sp/>old<sp/>to<sp/>NEW<sp/>mMaxSamples<sp/>to<sp/>make<sp/>a<sp/>reasonable<sp/>guess<sp/>at<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>newBlockArray.reserve(1<sp/>+<sp/>mBlock.size()<sp/>*<sp/>((float)oldMaxSamples<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)mMaxSamples));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSuccess<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>bufferOld(mMaxSamples,<sp/>oldFormat);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>bufferNew(mMaxSamples,<sp/>format);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0,<sp/>nn<sp/>=<sp/>mBlock.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>nn<sp/>&amp;&amp;<sp/>bSuccess;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;oldSeqBlock<sp/>=<sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref>*<sp/>oldBlockFile<sp/>=<sp/>oldSeqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>=<sp/>oldBlockFile-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bSuccess<sp/>=<sp/>(oldBlockFile-&gt;<ref refid="class_block_file_1ad1355b9c8421a6f1a6b6d8cf3d3f073e" kindref="member">ReadData</ref>(bufferOld.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>oldFormat,<sp/>0,<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bSuccess)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a2819d83a15a7623e52e6562b3329471c" kindref="member">CopySamples</ref>(bufferOld.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>oldFormat,<sp/>bufferNew.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>this<sp/>fix<sp/>for<sp/>http://bugzilla.audacityteam.org/show_bug.cgi?id=451,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>Blockify,<sp/>allows<sp/>(len<sp/>&lt;<sp/>mMinSamples).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>happen<sp/>consistently<sp/>when<sp/>going<sp/>from<sp/>more<sp/>bytes<sp/>per<sp/>sample<sp/>to<sp/>fewer...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>create<sp/>a<sp/>block<sp/>that&apos;s<sp/>smaller<sp/>than<sp/>mMinSamples,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shouldn&apos;t<sp/>be<sp/>allowed,<sp/>but<sp/>we<sp/>agreed<sp/>it&apos;s<sp/>okay<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vvv<sp/>ANSWER-ME:<sp/>Does<sp/>this<sp/>cause<sp/>any<sp/>bugs,<sp/>or<sp/>failures<sp/>on<sp/>write,<sp/>elsewhere?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>If<sp/>so,<sp/>need<sp/>to<sp/>special-case<sp/>(len<sp/>&lt;<sp/>mMinSamples)<sp/>and<sp/>start<sp/>combining<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>from<sp/>the<sp/>old<sp/>blocks...<sp/>Oh<sp/>no!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>Blockify<sp/>will<sp/>handle<sp/>the<sp/>cases<sp/>where<sp/>len<sp/>&gt;<sp/>the<sp/>NEW<sp/>mMaxSamples.<sp/>Previous<sp/>code<sp/>did<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>blockstart<sp/>=<sp/>oldSeqBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prevSize<sp/>=<sp/>newBlockArray.size();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Blockify(newBlockArray,<sp/>blockstart,<sp/>bufferNew.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bSuccess<sp/>=<sp/>(newBlockArray.size()<sp/>&gt;<sp/>prevSize);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bSuccess)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pbChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bSuccess)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalidate<sp/>all<sp/>the<sp/>old,<sp/>non-aliased<sp/>block<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>files<sp/>will<sp/>be<sp/>converted<sp/>at<sp/>save,<sp/>per<sp/>comment<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DerefAllFiles();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>with<sp/>NEW<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock.swap(newBlockArray);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>vvvvv<sp/>We<sp/>*should<sp/>do<sp/>the<sp/>following,<sp/>but<sp/>TrackPanel::OnFormatChange()<sp/>doesn&apos;t<sp/>actually<sp/>check<sp/>the<sp/>conversion<sp/>results,</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>just<sp/>assumes<sp/>the<sp/>conversion<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TODO:<sp/>Uncomment<sp/>this<sp/>section<sp/>when<sp/>TrackPanel::OnFormatChange()<sp/>is<sp/>upgraded<sp/>to<sp/>check<sp/>the<sp/>results.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRL:<sp/><sp/>I<sp/>don&apos;t<sp/>understand<sp/>why<sp/>the<sp/>comment<sp/>above<sp/>justifies<sp/>leaving<sp/>the<sp/>sequence<sp/>in<sp/>an<sp/>inconsistent<sp/>state.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>this<sp/>function<sp/>must<sp/>fail,<sp/>better<sp/>to<sp/>leave<sp/>it<sp/>as<sp/>a<sp/>no-op<sp/>on<sp/>this<sp/>sequence.<sp/><sp/>I<sp/>am<sp/>uncommenting<sp/>the</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>below,<sp/>and<sp/>adding<sp/>one<sp/>to<sp/>revert<sp/>mMinSamples<sp/>too.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Conversion<sp/>failed.<sp/>Revert<sp/>these<sp/>member<sp/>vars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat<sp/>=<sp/>oldFormat;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mMaxSamples<sp/>=<sp/>oldMaxSamples;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mMinSamples<sp/>=<sp/>oldMinSamples;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pbChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Revert<sp/>overall<sp/>change<sp/>flag,<sp/>in<sp/>case<sp/>we<sp/>had<sp/>some<sp/>partial<sp/>success<sp/>in<sp/>the<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>bSuccess<sp/>&amp;=<sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Sequence::ConvertToSampleFormat()&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bSuccess;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="class_sequence_1a775f3d1f96cc27db99b53651cb4e44b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a775f3d1f96cc27db99b53651cb4e44b9" kindref="member">Sequence::GetMinMax</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>outMin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>outMax)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="249"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0<sp/>||<sp/>mBlock.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*outMin<sp/>=<sp/>float(0.0);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FLT_MAX?<sp/><sp/>So<sp/>it<sp/>doesn&apos;t<sp/>look<sp/>like<sp/>a<sp/>spurious<sp/>&apos;0&apos;<sp/>to<sp/>a<sp/>caller?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*outMax<sp/>=<sp/>float(0.0);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-FLT_MAX?<sp/><sp/>So<sp/>it<sp/>doesn&apos;t<sp/>look<sp/>like<sp/>a<sp/>spurious<sp/>&apos;0&apos;<sp/>to<sp/>a<sp/>caller?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref><sp/>=<sp/>FLT_MAX;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref><sp/>=<sp/>-FLT_MAX;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block0<sp/>=<sp/>FindBlock(start);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block1<sp/>=<sp/>FindBlock(start<sp/>+<sp/>len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>l0,<sp/>maxl0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>calculate<sp/>the<sp/>min/max<sp/>of<sp/>the<sp/>blocks<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>this<sp/>region;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>very<sp/>fast<sp/>because<sp/>we<sp/>have<sp/>the<sp/>min/max<sp/>of<sp/>every<sp/>entire<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>in<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref><sp/>=<sp/>block0<sp/>+<sp/>1;<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref><sp/>&lt;<sp/>block1;<sp/>++<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blockMin,<sp/>blockMax,<sp/>blockRMS;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>].f-&gt;GetMinMax(&amp;blockMin,<sp/>&amp;blockMax,<sp/>&amp;blockRMS);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockMin<sp/>&lt;<sp/>min)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>blockMin;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockMax<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>blockMax;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>take<sp/>the<sp/>first<sp/>and<sp/>last<sp/>blocks<sp/>into<sp/>account,<sp/>noting<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>selection<sp/>may<sp/>only<sp/>partly<sp/>overlap<sp/>these<sp/>blocks.<sp/><sp/>If<sp/>the<sp/>overall<sp/>min/max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>either<sp/>of<sp/>these<sp/>blocks<sp/>is<sp/>within<sp/>min...max,<sp/>then<sp/>we<sp/>can<sp/>ignore<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>we<sp/>need<sp/>read<sp/>some<sp/>samples<sp/>and<sp/>summaries<sp/>from<sp/>disk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>block0Min,<sp/>block0Max,<sp/>block0RMS;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;theBlock<sp/>=<sp/>mBlock[block0];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>theFile<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(&amp;block0Min,<sp/>&amp;block0Max,<sp/>&amp;block0RMS);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block0Min<sp/>&lt;<sp/>min<sp/>||<sp/>block0Max<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>start<sp/>-<sp/>theBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l0<sp/>=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxl0<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>theFile-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>-<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(maxl0<sp/>&lt;=<sp/>mMaxSamples);<sp/></highlight><highlight class="comment">//<sp/>Vaughan,<sp/>2011-10-19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l0<sp/>&gt;<sp/>maxl0)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l0<sp/>=<sp/>maxl0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>partialMin,<sp/>partialMax,<sp/>partialRMS;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(s0,<sp/>l0,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;partialMin,<sp/>&amp;partialMax,<sp/>&amp;partialRMS);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(partialMin<sp/>&lt;<sp/>min)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>partialMin;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(partialMax<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>partialMax;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block1<sp/>&gt;<sp/>block0)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>block1Min,<sp/>block1Max,<sp/>block1RMS;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;theBlock<sp/>=<sp/>mBlock[block1];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>theFile<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(&amp;block1Min,<sp/>&amp;block1Max,<sp/>&amp;block1RMS);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block1Min<sp/>&lt;<sp/>min<sp/>||<sp/>block1Max<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l0<sp/>=<sp/>(start<sp/>+<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>-<sp/>theBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(l0<sp/>&lt;=<sp/>mMaxSamples);<sp/></highlight><highlight class="comment">//<sp/>Vaughan,<sp/>2011-10-19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>partialMin,<sp/>partialMax,<sp/>partialRMS;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(s0,<sp/>l0,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;partialMin,<sp/>&amp;partialMax,<sp/>&amp;partialRMS);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(partialMin<sp/>&lt;<sp/>min)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>partialMin;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(partialMax<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>partialMax;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/>*outMin<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>*outMax<sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="class_sequence_1a1d924cd0aff2b0156afd7e83626776df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a1d924cd0aff2b0156afd7e83626776df" kindref="member">Sequence::GetRMS</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>outRMS)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="337"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len<sp/>is<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>that<sp/>we<sp/>want<sp/>the<sp/>rms<sp/>of.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>may<sp/>be<sp/>longer<sp/>than<sp/>a<sp/>block,<sp/>and<sp/>the<sp/>code<sp/>is<sp/>carefully<sp/>set<sp/>up<sp/>to<sp/>handle<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0<sp/>||<sp/>mBlock.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*outRMS<sp/>=<sp/>float(0.0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumsq<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>cumulative<sp/>length<sp/>of<sp/>the<sp/>bits<sp/>we<sp/>have<sp/>the<sp/>ms<sp/>of<sp/>so<sp/>far,<sp/>and<sp/>should<sp/>end<sp/>up<sp/>==<sp/>len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block0<sp/>=<sp/>FindBlock(start);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block1<sp/>=<sp/>FindBlock(start<sp/>+<sp/>len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>l0,<sp/>maxl0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>calculate<sp/>the<sp/>rms<sp/>of<sp/>the<sp/>blocks<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>this<sp/>region;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>very<sp/>fast<sp/>because<sp/>we<sp/>have<sp/>the<sp/>rms<sp/>of<sp/>every<sp/>entire<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>in<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref><sp/>=<sp/>block0<sp/>+<sp/>1;<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref><sp/>&lt;<sp/>block1;<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blockMin,<sp/>blockMax,<sp/>blockRMS;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;theBlock<sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>theFile<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(&amp;blockMin,<sp/>&amp;blockMax,<sp/>&amp;blockRMS);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>fileLen<sp/>=<sp/>theFile-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>+=<sp/>blockRMS<sp/>*<sp/>blockRMS<sp/>*<sp/>fileLen;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>fileLen;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>take<sp/>the<sp/>first<sp/>and<sp/>last<sp/>blocks<sp/>into<sp/>account,<sp/>noting<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>selection<sp/>may<sp/>only<sp/>partly<sp/>overlap<sp/>these<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>we<sp/>need<sp/>read<sp/>some<sp/>samples<sp/>and<sp/>summaries<sp/>from<sp/>disk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;theBlock<sp/>=<sp/>mBlock[block0];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>theFile<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>start<sp/>-<sp/>theBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l0<sp/>=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxl0<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>theFile-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>-<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(maxl0<sp/>&lt;=<sp/>mMaxSamples);<sp/></highlight><highlight class="comment">//<sp/>Vaughan,<sp/>2011-10-19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l0<sp/>&gt;<sp/>maxl0)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l0<sp/>=<sp/>maxl0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>partialMin,<sp/>partialMax,<sp/>partialRMS;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(s0,<sp/>l0,<sp/>&amp;partialMin,<sp/>&amp;partialMax,<sp/>&amp;partialRMS);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>+=<sp/>partialRMS<sp/>*<sp/>partialRMS<sp/>*<sp/>l0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>l0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block1<sp/>&gt;<sp/>block0)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;theBlock<sp/>=<sp/>mBlock[block1];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>theFile<sp/>=<sp/>theBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l0<sp/>=<sp/>(start<sp/>+<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>-<sp/>theBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(l0<sp/>&lt;=<sp/>mMaxSamples);<sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/>I<sp/>think<sp/>Vaughan<sp/>missed<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>partialMin,<sp/>partialMax,<sp/>partialRMS;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theFile-&gt;<ref refid="class_block_file_1ab69b57d79727454d7cea8d1f204791ba" kindref="member">GetMinMax</ref>(s0,<sp/>l0,<sp/>&amp;partialMin,<sp/>&amp;partialMax,<sp/>&amp;partialRMS);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>+=<sp/>partialRMS<sp/>*<sp/>partialRMS<sp/>*<sp/>l0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>l0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/>catch<sp/>bugs<sp/>like<sp/>1320:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(length<sp/>==<sp/>len);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/>*outRMS<sp/>=<sp/>sqrt(sumsq/length);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="class_sequence_1a2ddb679457dc9059bb328f194cdbe6b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a2ddb679457dc9059bb328f194cdbe6b3" kindref="member">Sequence::Copy</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s1,<sp/><ref refid="class_sequence" kindref="compound">Sequence</ref><sp/>**<ref refid="namespacelv2specgen_1af69976955f051ccef12ad2f85392e818" kindref="member">dest</ref>)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/>*dest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s0<sp/>&gt;=<sp/>s1<sp/>||<sp/>s0<sp/>&gt;=<sp/>mNumSamples<sp/>||<sp/>s1<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b0<sp/>=<sp/>FindBlock(s0);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>FindBlock(s1<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(b0<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(b0<sp/>&lt;<sp/>numBlocks);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(b1<sp/>&lt;<sp/>numBlocks);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/>wxUnusedVar(numBlocks);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(b0<sp/>&lt;=<sp/>b1);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>*dest<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a7b70a4e19965a2cd8916d3d4d4b4de73" kindref="member">Sequence</ref>(mDirManager,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>(*dest)-&gt;mBlock.reserve(b1<sp/>-<sp/>b0<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/><ref refid="recplay_8c_1adbbab5cb2248179d231690a1a02ff977" kindref="member">buffer</ref>(mMaxSamples,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklen;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;block0<sp/>=<sp/>mBlock[b0];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s0<sp/>!=<sp/>block0.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>block0.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocklen<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(s1,<sp/>block0.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>file-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>())<sp/>-<sp/>s0;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(file-&gt;<ref refid="class_block_file_1a9969d478c861eae0bdb98b71176906cf" kindref="member">IsAlias</ref>()<sp/>||<sp/>(blocklen<sp/>&lt;=<sp/>mMaxSamples));<sp/></highlight><highlight class="comment">//<sp/>Vaughan,<sp/>2012-02-29</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(b0,<sp/>buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>s0,<sp/>blocklen);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*dest)-&gt;Append(buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>blocklen);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--b0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>blocks<sp/>in<sp/>the<sp/>middle,<sp/>copy<sp/>the<sp/>blockfiles<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bb<sp/>=<sp/>b0<sp/>+<sp/>1;<sp/>bb<sp/>&lt;<sp/>b1;<sp/>++bb)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*dest)-&gt;AppendBlock(mBlock[bb]);<sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>ref<sp/>count<sp/>or<sp/>duplicate<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>last<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1<sp/>&gt;<sp/>b0)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[b1];</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocklen<sp/>=<sp/>(s1<sp/>-<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(file-&gt;<ref refid="class_block_file_1a9969d478c861eae0bdb98b71176906cf" kindref="member">IsAlias</ref>()<sp/>||<sp/>(blocklen<sp/>&lt;=<sp/>mMaxSamples));<sp/></highlight><highlight class="comment">//<sp/>Vaughan,<sp/>2012-02-29</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocklen<sp/>&lt;<sp/>file-&gt;GetLength())<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(b1,<sp/>buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>,<sp/>blocklen);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*dest)-&gt;Append(buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>blocklen);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case,<sp/>copy<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*dest)-&gt;AppendBlock(block);<sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>ref<sp/>count<sp/>or<sp/>duplicate<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Sequence::Copy()&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Overflows(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>numSamples)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numSamples<sp/>&gt;<sp/>wxLL(9223372036854775807);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="class_sequence_1ae1be03bcb01e4cc477de4d1cf8eae19c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1ae1be03bcb01e4cc477de4d1cf8eae19c" kindref="member">Sequence::Paste</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref><sp/>*src)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>&lt;<sp/>0)<sp/>||<sp/>(s<sp/>&gt;<sp/>mNumSamples))</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Sequence::Paste:<sp/>sampleCount<sp/>s<sp/>%s<sp/>is<sp/>&lt;<sp/>0<sp/>or<sp/>&gt;<sp/>mNumSamples<sp/>%s).&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Why<sp/>bother<sp/>with<sp/>Internat<sp/>when<sp/>the<sp/>above<sp/>is<sp/>just<sp/>wxT?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)s).ToDouble(),<sp/>0).c_str(),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)mNumSamples).ToDouble(),<sp/>0).c_str());</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Overflows(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mNumSamples)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)src-&gt;mNumSamples)))</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Sequence::Paste:<sp/>mNumSamples<sp/>%s<sp/>+<sp/>src-&gt;mNumSamples<sp/>%s<sp/>would<sp/>overflow.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Why<sp/>bother<sp/>with<sp/>Internat<sp/>when<sp/>the<sp/>above<sp/>is<sp/>just<sp/>wxT?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)mNumSamples).ToDouble(),<sp/>0).c_str(),</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)src-&gt;mNumSamples).ToDouble(),<sp/>0).c_str());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src-&gt;mSampleFormat<sp/>!=<sp/>mSampleFormat)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Sequence::Paste:<sp/>Sample<sp/>format<sp/>to<sp/>be<sp/>pasted,<sp/>%s,<sp/>does<sp/>not<sp/>match<sp/>destination<sp/>format,<sp/>%s.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1aa1e05d8c243fe96c1bee978d1ec73b57" kindref="member">GetSampleFormatStr</ref>(src-&gt;mSampleFormat),<sp/><ref refid="_sample_format_8cpp_1aa1e05d8c243fe96c1bee978d1ec73b57" kindref="member">GetSampleFormatStr</ref>(src-&gt;mSampleFormat));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_block_array" kindref="compound">BlockArray</ref><sp/>&amp;srcBlock<sp/>=<sp/>src-&gt;mBlock;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>addedLen<sp/>=<sp/>src-&gt;mNumSamples;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srcNumBlocks<sp/>=<sp/>srcBlock.size();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleSize<sp/>=<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addedLen<sp/>==<sp/>0<sp/>||<sp/>srcNumBlocks<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numBlocks<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s<sp/>==<sp/>mNumSamples<sp/>&amp;&amp;<sp/>mBlock.back().f-&gt;GetLength()<sp/>&gt;=<sp/>mMinSamples))<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>this<sp/>track<sp/>is<sp/>currently<sp/>empty,<sp/>or<sp/>it&apos;s<sp/>safe<sp/>to<sp/>append</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>onto<sp/>the<sp/>end<sp/>because<sp/>the<sp/>current<sp/>last<sp/>block<sp/>is<sp/>longer<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>srcNumBlocks;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendBlock(srcBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]);<sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>ref<sp/>count<sp/>or<sp/>duplicate<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Paste<sp/>branch<sp/>one&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref><sp/>=<sp/>(s<sp/>==<sp/>mNumSamples)<sp/>?<sp/>mBlock.size()<sp/>-<sp/>1<sp/>:<sp/>FindBlock(s);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/>wxASSERT((b<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(b<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)numBlocks));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pBlock<sp/>=<sp/>&amp;mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref><sp/>=<sp/>pBlock-&gt;<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>largerBlockLen<sp/>=<sp/>addedLen<sp/>+<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/>when<sp/>insertion<sp/>point<sp/>is<sp/>the<sp/>first<sp/>sample<sp/>of<sp/>a<sp/>block,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>following<sp/>test<sp/>fails,<sp/>perhaps<sp/>we<sp/>could<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>coalescence<sp/>with<sp/>the<sp/>previous<sp/>block<sp/>is<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(largerBlockLen<sp/>&lt;=<sp/>mMaxSamples)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>we<sp/>can<sp/>fit<sp/>all<sp/>of<sp/>the<sp/>NEW<sp/>samples<sp/>inside<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>block!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>*pBlock;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/><ref refid="recplay_8c_1adbbab5cb2248179d231690a1a02ff977" kindref="member">buffer</ref>(largerBlockLen,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splitPoint<sp/>=<sp/>s<sp/>-<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>block,<sp/>0,<sp/>splitPoint);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src-&gt;<ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(0,<sp/>buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>splitPoint*sampleSize,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat,<sp/>0,<sp/>addedLen);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>(splitPoint<sp/>+<sp/>addedLen)*sampleSize,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat,<sp/>block,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitPoint,<sp/>length<sp/>-<sp/>splitPoint);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1aa266307a85c575953e6e83954e7d7007" kindref="member">NewSimpleBlockFile</ref>(buffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>largerBlockLen,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>(block.f);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block.f<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>b<sp/>+<sp/>1;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>numBlocks;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>+=<sp/>addedLen;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/>addedLen;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Paste<sp/>branch<sp/>two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>three:<sp/>if<sp/>we<sp/>are<sp/>inserting<sp/>four<sp/>or<sp/>fewer<sp/>blocks,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>simplest<sp/>to<sp/>just<sp/>lump<sp/>all<sp/>the<sp/>data<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>one<sp/>big<sp/>block<sp/>along<sp/>with<sp/>the<sp/>split<sp/>block,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>resplit<sp/>it<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_block_array" kindref="compound">BlockArray</ref><sp/>newBlock;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/>newBlock.reserve(numBlocks<sp/>+<sp/>srcNumBlocks<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/>newBlock.insert(newBlock.end(),<sp/>mBlock.begin(),<sp/>mBlock.begin()<sp/>+<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;splitBlock<sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>splitLen<sp/>=<sp/>splitBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splitPoint<sp/>=<sp/>s<sp/>-<sp/>splitBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcNumBlocks<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>sum<sp/>=<sp/>splitLen<sp/>+<sp/>addedLen;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>sumBuffer(sum,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(sumBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>splitBlock,<sp/>0,<sp/>splitPoint);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src-&gt;<ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(0,<sp/>sumBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>splitPoint<sp/>*<sp/>sampleSize,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>addedLen);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(sumBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>(splitPoint<sp/>+<sp/>addedLen)<sp/>*<sp/>sampleSize,<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitBlock,<sp/>splitPoint,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitLen<sp/>-<sp/>splitPoint);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Blockify(newBlock,<sp/>splitBlock.start,<sp/>sumBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>sum);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>final<sp/>case<sp/>is<sp/>that<sp/>we&apos;re<sp/>inserting<sp/>at<sp/>least<sp/>five<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>divide<sp/>these<sp/>into<sp/>three<sp/>groups:<sp/>the<sp/>first<sp/>two<sp/>get<sp/>merged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>first<sp/>half<sp/>of<sp/>the<sp/>split<sp/>block,<sp/>the<sp/>middle<sp/>ones<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copied<sp/>in<sp/>as<sp/>is,<sp/>and<sp/>the<sp/>last<sp/>two<sp/>get<sp/>merged<sp/>with<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>half<sp/>of<sp/>the<sp/>split<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>srcFirstTwoLen<sp/>=</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcBlock[0].f-&gt;GetLength()<sp/>+<sp/>srcBlock[1].f-&gt;GetLength();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>leftLen<sp/>=<sp/>splitPoint<sp/>+<sp/>srcFirstTwoLen;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;penultimate<sp/>=<sp/>srcBlock[srcNumBlocks<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>srcLastTwoLen<sp/>=</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>penultimate.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>+</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcBlock[srcNumBlocks<sp/>-<sp/>1].f-&gt;GetLength();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>rightSplit<sp/>=<sp/>splitBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>-<sp/>splitPoint;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>rightLen<sp/>=<sp/>rightSplit<sp/>+<sp/>srcLastTwoLen;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>sampleBuffer(<ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(leftLen,<sp/>rightLen),<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(sampleBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>splitBlock,<sp/>0,<sp/>splitPoint);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src-&gt;<ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(0,<sp/>sampleBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>splitPoint*sampleSize,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat,<sp/>0,<sp/>srcFirstTwoLen);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Blockify(newBlock,<sp/>splitBlock.start,<sp/>sampleBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>leftLen);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>srcNumBlocks<sp/>-<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>srcBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>mDirManager-&gt;<ref refid="class_dir_manager_1adb7d04370b8fee46d6c47c3dc39f8e93" kindref="member">CopyBlockFile</ref>(block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Handle<sp/>this<sp/>better,<sp/>alert<sp/>the<sp/>user<sp/>of<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(file,<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>s));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>lastStart<sp/>=<sp/>penultimate.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src-&gt;<ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(srcNumBlocks<sp/>-<sp/>2,<sp/>sampleBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastStart,<sp/>srcLastTwoLen);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(sampleBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>srcLastTwoLen<sp/>*<sp/>sampleSize,<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitBlock,<sp/>splitPoint,<sp/>rightSplit);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Blockify(newBlock,<sp/>s<sp/>+<sp/>lastStart,<sp/>sampleBuffer.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>rightLen);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>(splitBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>remaining<sp/>blocks<sp/>to<sp/>NEW<sp/>block<sp/>array<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>NEW<sp/>block<sp/>array<sp/>in<sp/>for<sp/>the<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>b<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>numBlocks;<sp/>i++)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newBlock.push_back(mBlock[i].Plus(addedLen));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/>mBlock.swap(newBlock);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/>addedLen;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Paste<sp/>branch<sp/>three&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="class_sequence_1a6ee7c8ee2f05c5fd9493ced6b45324a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a6ee7c8ee2f05c5fd9493ced6b45324a9" kindref="member">Sequence::SetSilence</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1abe72411eeff43e0f5117f6ebacc92b51" kindref="member">Set</ref>(<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>mSampleFormat,<sp/>s0,<sp/>len);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="class_sequence_1a86ac563170d801f8e682830f6631ce9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a86ac563170d801f8e682830f6631ce9c" kindref="member">Sequence::InsertSilence</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Overflows(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mNumSamples)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)len)))</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>NEW<sp/>track<sp/>containing<sp/>as<sp/>much<sp/>silence<sp/>as<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>insert,<sp/>and<sp/>then<sp/>call<sp/>Paste<sp/>to<sp/>do<sp/>the<sp/>insertion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>use<sp/>of<sp/>a<sp/>SilentBlockFile,<sp/>which<sp/>takes<sp/>up<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>space<sp/>on<sp/>disk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref><sp/>sTrack(mDirManager,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>idealSamples<sp/>=<sp/><ref refid="class_sequence_1a288621003a85ced979a1614e70948477" kindref="member">GetIdealBlockSize</ref>();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/>sTrack.mBlock.reserve((len<sp/>+<sp/>idealSamples<sp/>-<sp/>1)<sp/>/<sp/>idealSamples);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*silentFile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>idealSamples)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>silentFile<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_silent_block_file" kindref="compound">SilentBlockFile</ref>(idealSamples);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>idealSamples)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sTrack.mBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(silentFile,<sp/>pos));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a0021fa0d115f9751ba352812e8e23b16" kindref="member">Ref</ref>(silentFile);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>idealSamples;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>idealSamples;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(silentFile)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>(silentFile);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sTrack.mBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_silent_block_file" kindref="compound">SilentBlockFile</ref>(len),<sp/>pos));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/>sTrack.mNumSamples<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bResult<sp/>=<sp/><ref refid="class_sequence_1ae1be03bcb01e4cc477de4d1cf8eae19c" kindref="member">Paste</ref>(s0,<sp/>&amp;sTrack);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(bResult);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bResult<sp/>&amp;&amp;<sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;InsertSilence&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="class_sequence_1ab76497eaab7caa6e0b20004ba864e368" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1ab76497eaab7caa6e0b20004ba864e368" kindref="member">Sequence::AppendAlias</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;fullPath,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useOD)</highlight></codeline>
<codeline lineno="712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Overflows(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mNumSamples)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)len)))</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>newBlock(</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useOD?</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1ae4254de2bedca82280668dc9a2d1edae" kindref="member">NewODAliasBlockFile</ref>(fullPath,<sp/>start,<sp/>len,<sp/>channel):</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a171297c240a2d68c83d8433216077624" kindref="member">NewAliasBlockFile</ref>(fullPath,<sp/>start,<sp/>len,<sp/>channel),</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/>mBlock.push_back(newBlock);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="class_sequence_1ade1c5fab5696a0d39b56a4a60909bce9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1ade1c5fab5696a0d39b56a4a60909bce9" kindref="member">Sequence::AppendCoded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;fName,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decodeType)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Overflows(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mNumSamples)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)len)))</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>newBlock(</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1aadf5b74287199e922247269c41e850bd" kindref="member">NewODDecodeBlockFile</ref>(fName,<sp/>start,<sp/>len,<sp/>channel,<sp/>decodeType),</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/>mBlock.push_back(newBlock);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Sequence::AppendBlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Overflows(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mNumSamples)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)b.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>())))</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>newBlock(</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1adb7d04370b8fee46d6c47c3dc39f8e93" kindref="member">CopyBlockFile</ref>(b.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>),<sp/></highlight><highlight class="comment">//<sp/>Bump<sp/>ref<sp/>count<sp/>if<sp/>not<sp/>locked,<sp/>else<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newBlock.f)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Handle<sp/>this<sp/>better,<sp/>alert<sp/>the<sp/>user<sp/>of<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Don&apos;t<sp/>need<sp/>to<sp/>Ref<sp/>because<sp/>it<sp/>was<sp/>done<sp/>by<sp/>CopyBlockFile,<sp/>above...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//mDirManager-&gt;Ref(newBlock.f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/>mBlock.push_back(newBlock);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/>newBlock.f-&gt;GetLength();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>do<sp/>a<sp/>consistency<sp/>check<sp/>here<sp/>because<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>gets<sp/>called<sp/>in<sp/>an<sp/>inner<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="class_sequence_1a4d5686aaba2fb7bc284d07e196085f84" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a4d5686aaba2fb7bc284d07e196085f84" kindref="member">Sequence::GetODFlags</ref>()</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mBlock.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].f;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file-&gt;<ref refid="class_block_file_1a8908840cad2f547172b3a2373f9dd347" kindref="member">IsDataAvailable</ref>())</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>(static_cast&lt;ODDecodeBlockFile*&gt;(file))-&gt;GetDecodeType();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file-&gt;<ref refid="class_block_file_1ada91556581464e844478f51762f50a70" kindref="member">IsSummaryAvailable</ref>())</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/><ref refid="class_o_d_task_1a5cb005afe9c31c34738c6d20da077d78a36e0f57063d422bebdf739f3cd6a7acc" kindref="member">ODTask::eODPCMSummary</ref>;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="class_sequence_1aab2ccf5d73433f7b1ebb21fbd98fbc4b" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_sequence_1aab2ccf5d73433f7b1ebb21fbd98fbc4b" kindref="member">Sequence::GetBlockStart</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="structposition" kindref="compound">position</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="789"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>FindBlock(position);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>].start;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794" refid="class_sequence_1a76954c104c6d8649510340c47595a870" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_sequence_1a76954c104c6d8649510340c47595a870" kindref="member">Sequence::GetBestBlockSize</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="795"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>returns<sp/>a<sp/>nice<sp/>number<sp/>of<sp/>samples<sp/>you<sp/>should<sp/>try<sp/>to<sp/>grab<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>big<sp/>chunk<sp/>in<sp/>order<sp/>to<sp/>land<sp/>on<sp/>a<sp/>block<sp/>boundary,<sp/>based<sp/>on<sp/>the<sp/>starting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sample.<sp/><sp/>The<sp/>value<sp/>returned<sp/>will<sp/>always<sp/>be<sp/>nonzero<sp/>and<sp/>will<sp/>be<sp/>no<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>value<sp/>of<sp/>GetMaxBlockSize()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0<sp/>||<sp/>start<sp/>&gt;=<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mMaxSamples;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>FindBlock(start);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>result<sp/>=<sp/>(block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>-<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(result<sp/>&lt;<sp/>mMinSamples<sp/>&amp;&amp;<sp/>b+1&lt;numBlocks<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((length<sp/>=<sp/>mBlock[b+1].<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;GetLength())<sp/>+<sp/>result)<sp/>&lt;=<sp/>mMaxSamples)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(result<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>result<sp/>&lt;=<sp/>mMaxSamples);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822" refid="class_sequence_1ab3b26c4bf10a39489659903f71027555" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1ab3b26c4bf10a39489659903f71027555" kindref="member">Sequence::HandleXMLTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="structtag" kindref="compound">tag</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>**attrs)</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>nValue;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>waveblock<sp/>tag<sp/>and<sp/>its<sp/>attributes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;waveblock&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>wb;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>attrs,<sp/>which<sp/>is<sp/>a<sp/>null-terminated<sp/>list<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attribute-value<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*attrs)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*attr<sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>these<sp/>attributes<sp/>have<sp/>non-negative<sp/>integer<sp/>counts<sp/>of<sp/>samples,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>test<sp/>&amp;<sp/>convert<sp/>here,<sp/>making<sp/>sure<sp/>that<sp/>values<sp/>&gt;<sp/>2^31<sp/>are<sp/>OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>long<sp/>clips<sp/>will<sp/>need<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>strValue<sp/>=<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1aeef4556c638f9979f6d739154ecd18f6" kindref="member">XMLValueChecker::IsGoodInt64</ref>(strValue)<sp/>||<sp/>!strValue.ToLongLong(&amp;nValue)<sp/>||<sp/>(nValue<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Sequence<sp/>has<sp/>bad<sp/>%s<sp/>attribute<sp/>value,<sp/>%s,<sp/>that<sp/>should<sp/>be<sp/>a<sp/>positive<sp/>integer.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr,<sp/>strValue.c_str());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(attr,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wb.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>=<sp/>nValue;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vaughan,<sp/>2011-10-10:<sp/>I<sp/>don&apos;t<sp/>think<sp/>we<sp/>ever<sp/>write<sp/>a<sp/>&quot;len&quot;<sp/>attribute<sp/>for<sp/>&quot;waveblock&quot;<sp/>tag,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>I<sp/>think<sp/>this<sp/>is<sp/>actually<sp/>legacy<sp/>code,<sp/>or<sp/>something<sp/>intended,<sp/>but<sp/>not<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Anyway,<sp/>might<sp/>as<sp/>well<sp/>leave<sp/>this<sp/>code<sp/>in,<sp/>especially<sp/>now<sp/>that<sp/>it<sp/>has<sp/>the<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>against<sp/>mMaxSamples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref><sp/>(!wxStrcmp(attr,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;len&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mMaxSamples<sp/>should<sp/>already<sp/>have<sp/>been<sp/>set<sp/>by<sp/>calls<sp/>to<sp/>the<sp/>&quot;sequence&quot;<sp/>clause<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>check<sp/>intended<sp/>here<sp/>was<sp/>already<sp/>done<sp/>in<sp/>DirManager::HandleXMLTag(),<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>let<sp/>the<sp/>block<sp/>be<sp/>built,<sp/>then<sp/>checked<sp/>against<sp/>mMaxSamples,<sp/>and<sp/>deleted<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>size<sp/>of<sp/>the<sp/>block<sp/>is<sp/>bigger<sp/>than<sp/>mMaxSamples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nValue<sp/>&gt;<sp/>mMaxSamples)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1adb68575ff738011aeb0e9b71e02ae296" kindref="member">SetLoadingBlockLength</ref>(nValue);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock.push_back(wb);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a1b3cbf6e25369cb85f27dbc4c24e1686" kindref="member">SetLoadingTarget</ref>(&amp;mBlock,<sp/>mBlock.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>sequence<sp/>tag<sp/>and<sp/>its<sp/>attributes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*attrs)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*attr<sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>strValue<sp/>=<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>promote<sp/>string,<sp/>we<sp/>need<sp/>this<sp/>for<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(attr,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;maxsamples&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>attribute<sp/>is<sp/>a<sp/>sample<sp/>count,<sp/>so<sp/>can<sp/>be<sp/>64bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1aeef4556c638f9979f6d739154ecd18f6" kindref="member">XMLValueChecker::IsGoodInt64</ref>(strValue)<sp/>||<sp/>!strValue.ToLongLong(&amp;nValue)<sp/>||<sp/>(nValue<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dominic,<sp/>12/10/2006:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Let&apos;s<sp/>check<sp/>that<sp/>maxsamples<sp/>is<sp/>&gt;=<sp/>1024<sp/>and<sp/>&lt;=<sp/>64<sp/>*<sp/>1024<sp/>*<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>that&apos;s<sp/>a<sp/>pretty<sp/>wide<sp/>range<sp/>of<sp/>reasonable<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nValue<sp/>&lt;<sp/>1024)<sp/>||<sp/>(nValue<sp/>&gt;<sp/>64<sp/>*<sp/>1024<sp/>*<sp/>1024))</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMaxSamples<sp/>=<sp/>nValue;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Is<sp/>the<sp/>following<sp/>really<sp/>okay?<sp/><sp/>DirManager<sp/>might<sp/>be<sp/>shared<sp/>across<sp/>projects!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Yes,<sp/>because<sp/>it<sp/>only<sp/>affects<sp/>DirManager&apos;s<sp/>behavior<sp/>in<sp/>opening<sp/>the<sp/>project.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1aa6b221608613b76f1fced79c5d9e560a" kindref="member">SetLoadingMaxSamples</ref>(mMaxSamples);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(attr,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;sampleformat&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>attribute<sp/>is<sp/>a<sp/>sample<sp/>format,<sp/>normal<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fValue;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1adc0cf9db4d3e99dfdc8c82144e129103" kindref="member">XMLValueChecker::IsGoodInt</ref>(strValue)<sp/>||<sp/>!strValue.ToLong(&amp;fValue)<sp/>||<sp/>(fValue<sp/>&lt;<sp/>0)<sp/>||<sp/>!<ref refid="class_x_m_l_value_checker_1aa2082800dc3344f71c300628875daa57" kindref="member">XMLValueChecker::IsValidSampleFormat</ref>(fValue))</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat<sp/>=<sp/>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref>)fValue;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(attr,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;numsamples&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>attribute<sp/>is<sp/>a<sp/>sample<sp/>count,<sp/>so<sp/>can<sp/>be<sp/>64bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1aeef4556c638f9979f6d739154ecd18f6" kindref="member">XMLValueChecker::IsGoodInt64</ref>(strValue)<sp/>||<sp/>!strValue.ToLongLong(&amp;nValue)<sp/>||<sp/>(nValue<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples<sp/>=<sp/>nValue;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>((mMinSamples<sp/>!=<sp/>sMaxDiskBlockSize<sp/>/<sp/>SAMPLE_SIZE(mSampleFormat)<sp/>/<sp/>2)<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(mMaxSamples<sp/>!=<sp/>mMinSamples<sp/>*<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>mErrorOpening<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="class_sequence_1a99693c4627c80b6a9b7ff31427ca63ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a99693c4627c80b6a9b7ff31427ca63ba" kindref="member">Sequence::HandleXMLEndTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="structtag" kindref="compound">tag</ref>)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>sequence<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>replace<sp/>missing<sp/>blockfiles<sp/>with<sp/>SilentBlockFiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0,<sp/>nn<sp/>=<sp/>mBlock.size();<sp/>b<sp/>&lt;<sp/>nn;<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>nn<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>mBlock[b+1].start<sp/>-<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>mNumSamples<sp/>-<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>mMaxSamples)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>be<sp/>why<sp/>the<sp/>blockfile<sp/>failed,<sp/>so<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>silent<sp/>replacement<sp/>to<sp/>mMaxSamples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Sequence<sp/>has<sp/>missing<sp/>block<sp/>file<sp/>with<sp/>length<sp/>%s<sp/>&gt;<sp/>mMaxSamples<sp/>%s.\n<sp/><sp/><sp/><sp/><sp/><sp/>Setting<sp/>length<sp/>to<sp/>mMaxSamples.<sp/>This<sp/>will<sp/>likely<sp/>cause<sp/>some<sp/>block<sp/>files<sp/>to<sp/>be<sp/>considered<sp/>orphans.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Why<sp/>bother<sp/>with<sp/>Internat<sp/>when<sp/>the<sp/>above<sp/>is<sp/>just<sp/>wxT?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)len).ToDouble(),<sp/>0).c_str(),</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)mMaxSamples).ToDouble(),<sp/>0).c_str());</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>mMaxSamples;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_silent_block_file" kindref="compound">SilentBlockFile</ref>(len);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Gap<sp/>detected<sp/>in<sp/>project<sp/>file.<sp/>Replacing<sp/>missing<sp/>block<sp/>file<sp/>with<sp/>silence.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>make<sp/>sure<sp/>that<sp/>start<sp/>times<sp/>and<sp/>lengths<sp/>are<sp/>consistent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>numSamples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0,<sp/>nn<sp/>=<sp/>mBlock.size();<sp/>b<sp/>&lt;<sp/>nn;<sp/><sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>!=<sp/>numSamples)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxString<sp/>sFileAndExtension<sp/>=<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a07fa90d9e26b0f5c4bc76716aff0fa87" kindref="member">GetFileName</ref>().GetFullName();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sFileAndExtension.IsEmpty())</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFileAndExtension<sp/>=<sp/>wxT(</highlight><highlight class="stringliteral">&quot;(replaced<sp/>with<sp/>silence)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFileAndExtension<sp/>=<sp/>wxT(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>sFileAndExtension<sp/>+<sp/>wxT(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Gap<sp/>detected<sp/>in<sp/>project<sp/>file.\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Start<sp/>(%s)<sp/>for<sp/>block<sp/>file<sp/>%s<sp/>is<sp/>not<sp/>one<sp/>sample<sp/>past<sp/>end<sp/>of<sp/>previous<sp/>block<sp/>(%s).\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Moving<sp/>start<sp/>so<sp/>blocks<sp/>are<sp/>contiguous.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Why<sp/>bother<sp/>with<sp/>Internat<sp/>when<sp/>the<sp/>above<sp/>is<sp/>just<sp/>wxT?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)(block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>)).ToDouble(),<sp/>0).c_str(),</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFileAndExtension.c_str(),</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)numSamples).ToDouble(),<sp/>0).c_str());</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>=<sp/>numSamples;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numSamples<sp/>+=<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mNumSamples<sp/>!=<sp/>numSamples)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Gap<sp/>detected<sp/>in<sp/>project<sp/>file.<sp/>Correcting<sp/>sequence<sp/>sample<sp/>count<sp/>from<sp/>%s<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>Why<sp/>bother<sp/>with<sp/>Internat<sp/>when<sp/>the<sp/>above<sp/>is<sp/>just<sp/>wxT?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)mNumSamples).ToDouble(),<sp/>0).c_str(),</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)numSamples).ToDouble(),<sp/>0).c_str());</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples<sp/>=<sp/>numSamples;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mErrorOpening<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020" refid="class_sequence_1a1c05db534bf15c98ebc3fc3c80f40a83" refkind="member"><highlight class="normal"><ref refid="class_x_m_l_tag_handler" kindref="compound">XMLTagHandler</ref><sp/>*<ref refid="class_sequence_1a1c05db534bf15c98ebc3fc3c80f40a83" kindref="member">Sequence::HandleXMLChild</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="structtag" kindref="compound">tag</ref>)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;waveblock&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a53b61cdeea9d402c138255e8da989afe" kindref="member">SetLoadingFormat</ref>(mSampleFormat);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mDirManager;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030" refid="class_sequence_1acdeb9f7a294755d24348a07b4d690b5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1acdeb9f7a294755d24348a07b4d690b5e" kindref="member">Sequence::WriteXML</ref>(<ref refid="class_x_m_l_writer" kindref="compound">XMLWriter</ref><sp/>&amp;xmlFile)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a38abb8ecc4a15db0272d43ff8bec1369" kindref="member">StartTag</ref>(wxT(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a631a2d04a50680a64f0ae48a61d4a4d1" kindref="member">WriteAttr</ref>(wxT(</highlight><highlight class="stringliteral">&quot;maxsamples&quot;</highlight><highlight class="normal">),<sp/>mMaxSamples);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a631a2d04a50680a64f0ae48a61d4a4d1" kindref="member">WriteAttr</ref>(wxT(</highlight><highlight class="stringliteral">&quot;sampleformat&quot;</highlight><highlight class="normal">),<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a631a2d04a50680a64f0ae48a61d4a4d1" kindref="member">WriteAttr</ref>(wxT(</highlight><highlight class="stringliteral">&quot;numsamples&quot;</highlight><highlight class="normal">),<sp/>mNumSamples);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>mBlock.size();<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;bb<sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>http://bugzilla.audacityteam.org/show_bug.cgi?id=451.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>don&apos;t<sp/>check<sp/>against<sp/>mMaxSamples<sp/>for<sp/>AliasBlockFiles,<sp/>because<sp/>if<sp/>you<sp/>convert<sp/>sample<sp/>format,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mMaxSample<sp/>gets<sp/>changed<sp/>to<sp/>match<sp/>the<sp/>format,<sp/>but<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>in<sp/>the<sp/>aliased<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>not<sp/>changed<sp/>(because<sp/>sample<sp/>format<sp/>conversion<sp/>was<sp/>not<sp/>actually<sp/>done<sp/>in<sp/>the<sp/>aliased<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bb.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a9969d478c861eae0bdb98b71176906cf" kindref="member">IsAlias</ref>()<sp/>&amp;&amp;<sp/>(bb.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>&gt;<sp/>mMaxSamples))</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxString<sp/>sMsg<sp/>=</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxString::Format(</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="locale__hack_8h_1a32a3cf3d9dd914f5aeeca5423c157934" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Sequence<sp/>has<sp/>block<sp/>file<sp/>with<sp/>length<sp/>%s<sp/>&gt;<sp/>mMaxSamples<sp/>%s.\nTruncating<sp/>to<sp/>mMaxSamples.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)bb.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()).ToDouble(),<sp/>0).c_str(),</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_internat_1a333f7a2e572730a3b4d46d41f4cd0bb1" kindref="member">Internat::ToString</ref>(((wxLongLong)mMaxSamples).ToDouble(),<sp/>0).c_str());</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxMessageBox(sMsg,<sp/><ref refid="locale__hack_8h_1a32a3cf3d9dd914f5aeeca5423c157934" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Warning<sp/>-<sp/>Length<sp/>in<sp/>Writing<sp/>Sequence&quot;</highlight><highlight class="normal">),<sp/>wxICON_EXCLAMATION<sp/>|<sp/>wxOK);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(sMsg);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bb.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a9a6903a5c87598f8dc92041351a271d8" kindref="member">SetLength</ref>(mMaxSamples);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a38abb8ecc4a15db0272d43ff8bec1369" kindref="member">StartTag</ref>(wxT(</highlight><highlight class="stringliteral">&quot;waveblock&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a631a2d04a50680a64f0ae48a61d4a4d1" kindref="member">WriteAttr</ref>(wxT(</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">),<sp/>bb.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bb.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a62527189fe371325e23f3802f20282f8" kindref="member">SaveXML</ref>(xmlFile);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a5c4e63c2c9762b6a04ad4e48bb117678" kindref="member">EndTag</ref>(wxT(</highlight><highlight class="stringliteral">&quot;waveblock&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a5c4e63c2c9762b6a04ad4e48bb117678" kindref="member">EndTag</ref>(wxT(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sequence::FindBlock(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1071"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>mNumSamples);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>lo<sp/>=<sp/>0,<sp/>loSamples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>hi<sp/>=<sp/>numBlocks,<sp/>hiSamples<sp/>=<sp/>mNumSamples;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>guess;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>not<sp/>a<sp/>binary<sp/>search,<sp/>but<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dictionary<sp/>search<sp/>where<sp/>we<sp/>guess<sp/>something<sp/>smarter<sp/>than<sp/>the<sp/>binary<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>unsearched<sp/>area,<sp/>since<sp/>samples<sp/>are<sp/>usually<sp/>proportional<sp/>to<sp/>block<sp/>file<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frac<sp/>=<sp/>double(pos<sp/>-<sp/>loSamples)<sp/>/<sp/>(hiSamples<sp/>-<sp/>loSamples);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guess<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(hi<sp/>-<sp/>1,<sp/>lo<sp/>+<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>(frac<sp/>*<sp/>(hi<sp/>-<sp/>lo)));</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[guess];</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(lo<sp/>&lt;=<sp/>guess<sp/>&amp;&amp;<sp/>guess<sp/>&lt;<sp/>hi<sp/>&amp;&amp;<sp/>lo<sp/>&lt;<sp/>hi);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(lo<sp/>!=<sp/>guess);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>guess;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hiSamples<sp/>=<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>nextStart<sp/>=<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>nextStart)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(guess<sp/>&lt;<sp/>hi<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>guess<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loSamples<sp/>=<sp/>nextStart;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rval<sp/>=<sp/>guess;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(rval<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>rval<sp/>&lt;<sp/>numBlocks<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>&gt;=<sp/>mBlock[rval].<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>&lt;<sp/>mBlock[rval].<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>+<sp/>mBlock[rval].<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;GetLength());</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rval;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Sequence::Read(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;b,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1121"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/>b.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>+<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len &lt;= f-&gt;</ref>GetLength());</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>f-&gt;<ref refid="class_block_file_1ad1355b9c8421a6f1a6b6d8cf3d3f073e" kindref="member">ReadData</ref>(<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>len)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogWarning(wxT(</highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>read<sp/>%ld<sp/>samples,<sp/>got<sp/>%d<sp/>samples.&quot;</highlight><highlight class="normal">),<sp/>len,<sp/>result);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a3e6207a5663cc3daa9e7792476af8f6e" kindref="member">ClearSamples</ref>(<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/>result,<sp/>len-result);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Sequence::CopyWrite(<ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>&amp;scratch,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;b,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>ever<sp/>write<sp/>to<sp/>an<sp/>existing<sp/>block;<sp/>to<sp/>support<sp/>Undo,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>copy<sp/>the<sp/>old<sp/>block<sp/>entirely<sp/>into<sp/>memory,<sp/>dereference<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>change,<sp/>and<sp/>then<sp/>write<sp/>the<sp/>NEW<sp/>block<sp/>to<sp/>disk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref><sp/>=<sp/>b.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(length<sp/>&lt;=<sp/>mMaxSamples);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>+<sp/>len<sp/>&lt;=<sp/>length);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleSize<sp/>=<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>,<sp/>0,<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>memcpy(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>*sampleSize,<sp/><ref refid="recplay_8c_1adbbab5cb2248179d231690a1a02ff977" kindref="member">buffer</ref>,<sp/>len*sampleSize);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>oldBlockFile<sp/>=<sp/>b.f;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/>b.f<sp/>=<sp/>mDirManager-&gt;<ref refid="class_dir_manager_1aa266307a85c575953e6e83954e7d7007" kindref="member">NewSimpleBlockFile</ref>(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>(oldBlockFile);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166" refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Sequence::Get</ref>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1168"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>mNumSamples)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0<sp/>||<sp/>start<sp/>&gt;<sp/>mNumSamples<sp/>||</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+<sp/>len<sp/>&gt;<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>FindBlock(start);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Get</ref>(b,<sp/>buffer,<sp/>format,<sp/>start,<sp/>len);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a047ff72fc3914414cbb6e20316e0ede9" kindref="member">Sequence::Get</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1183"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>bstart<sp/>=<sp/>(<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>-<sp/>(block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>blen<sp/>=</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(len,<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>-<sp/>bstart);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/>block,<sp/>bstart,<sp/>blen);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>blen;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>+=<sp/>(blen<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(<ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>));</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>+=<sp/>blen;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pass<sp/>NULL<sp/>to<sp/>set<sp/>silence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202" refid="class_sequence_1abe72411eeff43e0f5117f6ebacc92b51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1abe72411eeff43e0f5117f6ebacc92b51" kindref="member">Sequence::Set</ref>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0<sp/>||<sp/>start<sp/>&gt;=<sp/>mNumSamples<sp/>||</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start+len<sp/>&gt;<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>scratch(mMaxSamples,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>temp;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer<sp/>&amp;&amp;<sp/>format<sp/>!=<sp/>mSampleFormat)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(<ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(len,<sp/>mMaxSamples),<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>FindBlock(start);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;<ref refid="structblock" kindref="compound">block</ref><sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>bstart<sp/>=<sp/>start<sp/>-<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>fileLength<sp/>=<sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blen<sp/>=</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(len,<sp/>fileLength<sp/>-<sp/>bstart);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/>mSampleFormat)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyWrite(scratch,<sp/>buffer,<sp/>block,<sp/>bstart,<sp/>blen);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>do:<sp/>remove<sp/>the<sp/>extra<sp/>movement.<sp/><sp/>Can<sp/>we<sp/>copy-samples<sp/>within<sp/>CopyWrite?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a2819d83a15a7623e52e6562b3329471c" kindref="member">CopySamples</ref>(buffer,<sp/>format,<sp/>temp.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>blen);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyWrite(scratch,<sp/>temp.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>block,<sp/>bstart,<sp/>blen);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>(blen<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(format));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it&apos;s<sp/>a<sp/>full<sp/>block<sp/>of<sp/>silence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>block.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blen<sp/>==<sp/>fileLength)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;<ref refid="class_dir_manager_1a496ce0b8a108560c43a912cecc2cbec9" kindref="member">Deref</ref>(block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_silent_block_file" kindref="compound">SilentBlockFile</ref>(blen);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Odd<sp/>partial<sp/>blocks<sp/>of<sp/>silence<sp/>at<sp/>start<sp/>or<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(blen,<sp/>format);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a3e6207a5663cc3daa9e7792476af8f6e" kindref="member">ClearSamples</ref>(temp.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/>0,<sp/>blen);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>write<sp/>silence<sp/>just<sp/>to<sp/>the<sp/>portion<sp/>of<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyWrite(scratch,<sp/>temp.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>block,<sp/>bstart,<sp/>blen);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>blen;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>blen;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Set&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MinMaxSumsq</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/>MinMaxSumsq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*pv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divisor)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref><sp/>=<sp/>FLT_MAX,<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref><sp/>=<sp/>-FLT_MAX,<sp/>sumsq<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(divisor)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>holds<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>*pv++;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref><sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>+=<sp/>v<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>256:</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>65536:</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>holds<sp/>triples<sp/>of<sp/>min,<sp/>max,<sp/>and<sp/>rms<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>*pv++;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref><sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>*pv++;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>*pv++;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>+=<sp/>v<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumsq;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303" refid="class_sequence_1af1b05e45add8f1fd6a43e4ed562fb625" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1af1b05e45add8f1fd6a43e4ed562fb625" kindref="member">Sequence::GetWaveDisplay</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">min</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*rms,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>bl,</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>*where)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0<sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>(0),<sp/>where[0]);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s0<sp/>&gt;=<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>None<sp/>of<sp/>the<sp/>samples<sp/>asked<sp/>for<sp/>are<sp/>in<sp/>range.<sp/>Abandon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>where[len<sp/>-<sp/>1]<sp/>==<sp/>where[len],<sp/>raise<sp/>the<sp/>limit<sp/>by<sp/>one,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>load<sp/>at<sp/>least<sp/>one<sp/>pixel<sp/>for<sp/>column<sp/>len<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>unless<sp/>the<sp/>mNumSamples<sp/>ceiling<sp/>applies,<sp/>and<sp/>then<sp/>there<sp/>are<sp/>other<sp/>defenses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s1<sp/>=</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(mNumSamples,<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(1<sp/>+<sp/>where[len<sp/>-<sp/>1],<sp/>where[len]));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[mMaxSamples];</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>srcX<sp/>=<sp/>s0;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>nextSrcX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastRmsDenom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastDivisor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>whereNow<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(s1<sp/>-<sp/>1,<sp/>where[0]);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>whereNext<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>block<sp/>files,<sp/>opening<sp/>and<sp/>reading<sp/>and<sp/>closing<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>more<sp/>than<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block0<sp/>=<sp/>FindBlock(s0);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>block0;<sp/>b<sp/>&lt;<sp/>nBlocks;<sp/>++<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;<sp/>block0)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcX<sp/>=<sp/>nextSrcX;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcX<sp/>&gt;=<sp/>s1)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>range<sp/>of<sp/>sample<sp/>values<sp/>for<sp/>this<sp/>block<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>in<sp/>the<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;seqBlock<sp/>=<sp/>mBlock[<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>=<sp/>seqBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextSrcX<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(s1,<sp/>start<sp/>+<sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>());</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>column<sp/>for<sp/>pixel<sp/>p<sp/>covers<sp/>samples<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where[p]<sp/>up<sp/>to<sp/>but<sp/>excluding<sp/>where[p<sp/>+<sp/>1].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>range<sp/>of<sp/>pixels<sp/>covered<sp/>by<sp/>the<sp/>current<sp/>block<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Their<sp/>starting<sp/>samples<sp/>covered<sp/>by<sp/>it,<sp/>to<sp/>be<sp/>exact)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextPixel;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextSrcX<sp/>&gt;=<sp/>s1)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextPixel<sp/>=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextPixel<sp/>=<sp/>pixel;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Taking<sp/>min<sp/>with<sp/>s1<sp/>-<sp/>1,<sp/>here<sp/>and<sp/>elsewhere,<sp/>is<sp/>another<sp/>defense</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>sure<sp/>the<sp/>last<sp/>pixel<sp/>column<sp/>gets<sp/>at<sp/>least<sp/>one<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nextPixel<sp/>&lt;<sp/>len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(whereNext<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(s1<sp/>-<sp/>1,<sp/>where[nextPixel]))<sp/>&lt;<sp/>nextSrcX)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nextPixel;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextPixel<sp/>==<sp/>pixel)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>entire<sp/>block&apos;s<sp/>samples<sp/>fall<sp/>within<sp/>one<sp/>pixel<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>it&apos;s<sp/>a<sp/>rare<sp/>odd<sp/>block<sp/>at<sp/>the<sp/>end,<sp/>or<sp/>else,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>be<sp/>really<sp/>zoomed<sp/>out!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Omit<sp/>the<sp/>entire<sp/>block&apos;s<sp/>contents<sp/>from<sp/>min/max/rms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculation,<sp/>which<sp/>is<sp/>not<sp/>correct,<sp/>but<sp/>correctness<sp/>might<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>worth<sp/>the<sp/>compute<sp/>time<sp/>if<sp/>this<sp/>happens<sp/>every<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column.<sp/>--<sp/>PRL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextPixel<sp/>==<sp/>len)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whereNext<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decide<sp/>the<sp/>summary<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesPerPixel<sp/>=</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double(whereNext<sp/>-<sp/>whereNow)<sp/>/<sp/>(nextPixel<sp/>-<sp/>pixel);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divisor<sp/>=</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(samplesPerPixel<sp/>&gt;=<sp/>65536)<sp/>?<sp/>65536</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(samplesPerPixel<sp/>&gt;=<sp/>256)<sp/>?<sp/>256</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockStatus<sp/>=<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>samples<sp/>or<sp/>triples<sp/>are<sp/>needed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>startPosition<sp/>=</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>(0),<sp/>(srcX<sp/>-<sp/>start)<sp/>/<sp/>divisor);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>inclusiveEndPosition<sp/>=</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>((mMaxSamples<sp/>/<sp/>divisor)<sp/>-<sp/>1,<sp/>(nextSrcX<sp/>-<sp/>1<sp/>-<sp/>start)<sp/>/<sp/>divisor);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>num<sp/>=<sp/>1<sp/>+<sp/>inclusiveEndPosition<sp/>-<sp/>startPosition;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What?<sp/><sp/>There<sp/>was<sp/>a<sp/>zero<sp/>length<sp/>block<sp/>file?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>some<sp/>defense<sp/>against<sp/>this<sp/>case<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pixel<sp/>&lt;<sp/>nextPixel)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min[pixel]<sp/>=<sp/>max[pixel]<sp/>=<sp/>rms[pixel]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl[pixel]<sp/>=<sp/>blockStatus;</highlight><highlight class="comment">//MC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pixel;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>from<sp/>the<sp/>block<sp/>file<sp/>or<sp/>its<sp/>summary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(divisor)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read((<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>)temp,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>,<sp/>seqBlock,<sp/>startPosition,<sp/>num);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>256:</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>triples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>to<sp/>see<sp/>if<sp/>summary<sp/>data<sp/>has<sp/>been<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1ada91556581464e844478f51762f50a70" kindref="member">IsSummaryAvailable</ref>())</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a3f7acc98f1761d78cccbd031314a33ea" kindref="member">Read256</ref>(temp,<sp/>startPosition,<sp/>num);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//otherwise,<sp/>mark<sp/>the<sp/>display<sp/>as<sp/>not<sp/>yet<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockStatus<sp/>=<sp/>-1<sp/>-<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>65536:</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>triples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>to<sp/>see<sp/>if<sp/>summary<sp/>data<sp/>has<sp/>been<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1ada91556581464e844478f51762f50a70" kindref="member">IsSummaryAvailable</ref>())</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1acf929dfa98eab1cbd93b7d79394bc141" kindref="member">Read64K</ref>(temp,<sp/>startPosition,<sp/>num);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//otherwise,<sp/>mark<sp/>the<sp/>display<sp/>as<sp/>not<sp/>yet<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockStatus<sp/>=<sp/>-1<sp/>-<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>filePosition<sp/>=<sp/>startPosition;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>pixel<sp/>column<sp/>might<sp/>straddle<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>so,<sp/>impute<sp/>some<sp/>of<sp/>the<sp/>data<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&gt;<sp/>block0<sp/>&amp;&amp;<sp/>pixel<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>midPosition<sp/>=<sp/>(whereNow<sp/>-<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>)<sp/>/<sp/>divisor;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff(midPosition<sp/>-<sp/>filePosition);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinMaxSumsq<sp/>values(temp,<sp/>diff,<sp/>divisor);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastPixel<sp/>=<sp/>pixel<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;lastMin<sp/>=<sp/>min[lastPixel];</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastMin<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(lastMin,<sp/>values.min);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;lastMax<sp/>=<sp/>max[lastPixel];</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastMax<sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(lastMax,<sp/>values.max);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;lastRms<sp/>=<sp/>rms[lastPixel];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastNumSamples<sp/>=<sp/>lastRmsDenom<sp/>*<sp/>lastDivisor;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastRms<sp/>=<sp/>sqrt(</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lastRms<sp/>*<sp/>lastRms<sp/>*<sp/>lastNumSamples<sp/>+<sp/>values.sumsq<sp/>*<sp/>divisor)<sp/>/</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lastNumSamples<sp/>+<sp/>diff<sp/>*<sp/>divisor)</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filePosition<sp/>=<sp/>midPosition;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>file<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rmsDenom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>filePosition<sp/>&lt;=<sp/>inclusiveEndPosition;)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>range<sp/>of<sp/>pixel<sp/>columns<sp/>for<sp/>this<sp/>file<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(normally<sp/>just<sp/>one,<sp/>but<sp/>maybe<sp/>more<sp/>when<sp/>zoomed<sp/>very<sp/>close)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>range<sp/>of<sp/>positions<sp/>for<sp/>those<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(normally<sp/>one<sp/>or<sp/>more,<sp/>for<sp/>that<sp/>one<sp/>column)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelX<sp/>=<sp/>pixel<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>positionX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pixelX<sp/>&lt;<sp/>nextPixel<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filePosition<sp/>==</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(positionX<sp/>=<sp/>(<ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(s1<sp/>-<sp/>1,<sp/>where[pixelX])<sp/>-<sp/>start)<sp/>/<sp/>divisor)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pixelX;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixelX<sp/>&gt;=<sp/>nextPixel)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positionX<sp/>=<sp/>1<sp/>+<sp/>inclusiveEndPosition;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>results<sp/>to<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmsDenom<sp/>=<sp/>(positionX<sp/>-<sp/>filePosition);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(rmsDenom<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pv<sp/>=</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>+<sp/>(filePosition<sp/>-<sp/>startPosition)<sp/>*<sp/>(divisor<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>3);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinMaxSumsq<sp/>values(pv,<sp/>rmsDenom,<sp/>divisor);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(&amp;min[pixel],<sp/>&amp;min[pixelX],<sp/>values.min);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(&amp;max[pixel],<sp/>&amp;max[pixelX],<sp/>values.max);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(&amp;bl[pixel],<sp/>&amp;bl[pixelX],<sp/>blockStatus);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(&amp;rms[pixel],<sp/>&amp;rms[pixelX],<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)sqrt(values.sumsq<sp/>/<sp/>rmsDenom));</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>pixelX;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filePosition<sp/>=<sp/>positionX;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(pixel<sp/>==<sp/>nextPixel);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>whereNow<sp/>=<sp/>whereNext;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>nextPixel;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastDivisor<sp/>=<sp/>divisor;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastRmsDenom<sp/>=<sp/>rmsDenom;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>block<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(pixel<sp/>==<sp/>len);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>temp;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499" refid="class_sequence_1a0826d8843aea5a86cacc4960e8454583" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_sequence_1a0826d8843aea5a86cacc4960e8454583" kindref="member">Sequence::GetIdealAppendLen</ref>()</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref><sp/>=<sp/><ref refid="class_sequence_1ab55738fa6a1ca2941242bae22a37c343" kindref="member">GetMaxBlockSize</ref>();</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numBlocks<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>lastBlockLen<sp/>=<sp/>mBlock.back().f-&gt;GetLength();</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastBlockLen<sp/>==<sp/>max)</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max<sp/>-<sp/>lastBlockLen;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514" refid="class_sequence_1af9f0194f9270cd7dda4e2629d3f05515" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1af9f0194f9270cd7dda4e2629d3f05515" kindref="member">Sequence::Append</ref>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/><ref refid="class_x_m_l_writer" kindref="compound">XMLWriter</ref>*<sp/>blockFileLog<sp/></highlight><highlight class="comment">/*=NULL*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Overflows(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mNumSamples)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)len)))</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>last<sp/>block<sp/>is<sp/>not<sp/>full,<sp/>we<sp/>need<sp/>to<sp/>add<sp/>samples<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>*pLastBlock;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>buffer2(mMaxSamples,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numBlocks<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(length<sp/>=</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pLastBlock<sp/>=<sp/>&amp;mBlock.back())-&gt;<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;GetLength())<sp/>&lt;<sp/>mMinSamples)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;lastBlock<sp/>=<sp/>*pLastBlock;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>addLen<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(mMaxSamples<sp/>-<sp/>length,<sp/>len);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(buffer2.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>lastBlock,<sp/>0,<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a2819d83a15a7623e52e6562b3329471c" kindref="member">CopySamples</ref>(buffer,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer2.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>length<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat),</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addLen);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLastBlockLen<sp/>=<sp/>length<sp/>+<sp/>addLen;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>newLastBlock(</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;NewSimpleBlockFile(buffer2.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>newLastBlockLen,<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockFileLog<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>),</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastBlock.start</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockFileLog)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_simple_block_file" kindref="compound">SimpleBlockFile</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newLastBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)-&gt;SaveXML(*blockFileLog);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;Deref(lastBlock.f);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastBlock<sp/>=<sp/>newLastBlock;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>addLen;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/>addLen;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>addLen<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(format);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>the<sp/>rest<sp/>as<sp/>NEW<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>idealSamples<sp/>=<sp/><ref refid="class_sequence_1a288621003a85ced979a1614e70948477" kindref="member">GetIdealBlockSize</ref>();</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref><sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(idealSamples,<sp/>len);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*pFile;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/>mSampleFormat)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pFile<sp/>=<sp/>mDirManager-&gt;NewSimpleBlockFile(buffer,<sp/>l,<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockFileLog<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a2819d83a15a7623e52e6562b3329471c" kindref="member">CopySamples</ref>(buffer,<sp/>format,<sp/>buffer2.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pFile<sp/>=<sp/>mDirManager-&gt;NewSimpleBlockFile(buffer2.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>,<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockFileLog<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockFileLog)</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_simple_block_file" kindref="compound">SimpleBlockFile</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pFile)-&gt;SaveXML(*blockFileLog);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(pFile,<sp/>mNumSamples));</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>l<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(format);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JKC:<sp/>During<sp/>generate<sp/>we<sp/>use<sp/>Append<sp/>again<sp/>and<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>generating<sp/>a<sp/>long<sp/>sequence<sp/>this<sp/>test<sp/>would<sp/>give<sp/>O(n^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>performance<sp/>-<sp/>not<sp/>good!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERY_SLOW_CHECKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Append&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sequence::Blockify(<ref refid="class_block_array" kindref="compound">BlockArray</ref><sp/>&amp;list,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(len<sp/>+<sp/>(mMaxSamples<sp/>-<sp/>1))<sp/>/<sp/>mMaxSamples;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/>list.reserve(list.size()<sp/>+<sp/>num);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>num;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref><sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>*<sp/>len<sp/>/<sp/>num;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>=<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref><sp/>+<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLen<sp/>=<sp/>((<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>+<sp/>1)<sp/>*<sp/>len<sp/>/<sp/>num)<sp/>-<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/>bufStart<sp/>=<sp/><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>+<sp/>(offset<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat));</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref><sp/>=<sp/>mDirManager-&gt;NewSimpleBlockFile(bufStart,<sp/>newLen,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list.push_back(b);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614" refid="class_sequence_1a935d75f6972115c5a6ca335601780aaf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a935d75f6972115c5a6ca335601780aaf" kindref="member">Sequence::Delete</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0<sp/>||<sp/>start<sp/>&lt;<sp/>0<sp/>||<sp/>start<sp/>&gt;=<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>add<sp/>a<sp/>ref-deref<sp/>mechanism<sp/>to<sp/>SeqBlock/BlockArray<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>make<sp/>this<sp/>a<sp/>critical<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//On-demand<sp/>threads<sp/>iterate<sp/>over<sp/>the<sp/>mBlocks<sp/>and<sp/>the<sp/>GUI<sp/>thread<sp/>deletes<sp/>them,<sp/>so<sp/>for<sp/>now<sp/>put<sp/>a<sp/>mutex<sp/>here<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//both<sp/>functions,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_sequence_1_1_delete_update_mutex_locker" kindref="compound">DeleteUpdateMutexLocker</ref><sp/>locker(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b0<sp/>=<sp/>FindBlock(start);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>FindBlock(start<sp/>+<sp/>len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleSize<sp/>=<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(mSampleFormat);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>if<sp/>the<sp/>samples<sp/>to<sp/>DELETE<sp/>are<sp/>all<sp/>within<sp/>a<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>and<sp/>the<sp/>resulting<sp/>length<sp/>is<sp/>not<sp/>too<sp/>small,<sp/>perform<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deletion<sp/>within<sp/>this<sp/>block:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>*pBlock;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>buffer<sp/>for<sp/>reuse<sp/>in<sp/>various<sp/>branches<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>scratch;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>size<sp/>that<sp/>will<sp/>ever<sp/>be<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>scratchSize<sp/>=<sp/>mMaxSamples<sp/>+<sp/>mMinSamples;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b0<sp/>==<sp/>b1<sp/>&amp;&amp;<sp/>(length<sp/>=<sp/>(pBlock<sp/>=<sp/>&amp;mBlock[b0])-&gt;<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;GetLength())<sp/>-<sp/>len<sp/>&gt;=<sp/>mMinSamples)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;b<sp/>=<sp/>*pBlock;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos<sp/>=<sp/>start<sp/>-<sp/>b.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>newLen<sp/>=<sp/>length<sp/>-<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scratch.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(scratchSize,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>,<sp/>0,<sp/>pos);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>(pos<sp/>*<sp/>sampleSize),<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b,<sp/>pos<sp/>+<sp/>len,<sp/>newLen<sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>oldFile<sp/>=<sp/>b.f;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;NewSimpleBlockFile(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>newLen,<sp/>mSampleFormat),</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.start</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;Deref(oldFile);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>b0<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numBlocks;<sp/>j++)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBlock[j].start<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamples<sp/>-=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Delete<sp/>-<sp/>branch<sp/>one&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>NEW<sp/>array<sp/>of<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_block_array" kindref="compound">BlockArray</ref><sp/>newBlock;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/>newBlock.reserve(numBlocks<sp/>-<sp/>(b1<sp/>-<sp/>b0)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>blocks<sp/>before<sp/>the<sp/>deletion<sp/>point<sp/>over<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>NEW<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/>newBlock.insert(newBlock.end(),<sp/>mBlock.begin(),<sp/>mBlock.begin()<sp/>+<sp/>b0);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>grab<sp/>the<sp/>samples<sp/>in<sp/>block<sp/>b0<sp/>before<sp/>the<sp/>deletion<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>preBuffer.<sp/><sp/>If<sp/>this<sp/>is<sp/>enough<sp/>samples<sp/>for<sp/>its<sp/>own<sp/>block,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>if<sp/>this<sp/>would<sp/>be<sp/>the<sp/>first<sp/>block<sp/>in<sp/>the<sp/>array,<sp/>write<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>combine<sp/>it<sp/>with<sp/>the<sp/>previous<sp/>block<sp/>(splitting<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>50/50<sp/>if<sp/>necessary).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;preBlock<sp/>=<sp/>mBlock[b0];</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>preBufferLen<sp/>=<sp/>start<sp/>-<sp/>preBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preBufferLen)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preBufferLen<sp/>&gt;=<sp/>mMinSamples<sp/>||<sp/>b0<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(scratchSize,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>preBlock,<sp/>0,<sp/>preBufferLen);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pFile<sp/>=</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;NewSimpleBlockFile(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>preBufferLen,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(pFile,<sp/>preBlock.start));</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;prepreBlock<sp/>=<sp/>mBlock[b0<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>prepreLen<sp/>=<sp/>prepreBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>sum<sp/>=<sp/>prepreLen<sp/>+<sp/>preBufferLen;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(scratchSize,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>prepreBlock,<sp/>0,<sp/>prepreLen);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>prepreLen*sampleSize,<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preBlock,<sp/>0,<sp/>preBufferLen);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newBlock.erase(newBlock.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Blockify(newBlock,<sp/>prepreBlock.start,<sp/>scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>sum);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;Deref(prepreBlock.f);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sample<sp/>where<sp/>we<sp/>begin<sp/>deletion<sp/>happens<sp/>to<sp/>fall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>on<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b0<sp/>!=<sp/>b1)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;Deref(preBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>DELETE<sp/>blocks<sp/>strictly<sp/>between<sp/>b0<sp/>and<sp/>b1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>b0<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>b1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;Deref(mBlock[i].<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>symmetrically,<sp/>grab<sp/>the<sp/>samples<sp/>in<sp/>block<sp/>b1<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deletion<sp/>point<sp/>into<sp/>postBuffer.<sp/><sp/>If<sp/>this<sp/>is<sp/>enough<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>its<sp/>own<sp/>block,<sp/>or<sp/>if<sp/>this<sp/>would<sp/>be<sp/>the<sp/>last<sp/>block<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>array,<sp/>write<sp/>it<sp/>out.<sp/><sp/>Otherwise<sp/>combine<sp/>it<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subsequent<sp/>block<sp/>(splitting<sp/>them<sp/>50/50<sp/>if<sp/>necessary).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;postBlock<sp/>=<sp/>mBlock[b1];</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>postBufferLen<sp/>=</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(postBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref><sp/>+<sp/>postBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>())<sp/>-<sp/>(start<sp/>+<sp/>len);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(postBufferLen)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(postBufferLen<sp/>&gt;=<sp/>mMinSamples<sp/>||<sp/>b1<sp/>==<sp/>numBlocks<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>use<sp/>of<sp/>scratch,<sp/>can<sp/>ask<sp/>for<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(postBufferLen,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos<sp/>=<sp/>(start<sp/>+<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>-<sp/>postBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>postBlock,<sp/>pos,<sp/>postBufferLen);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block_file" kindref="compound">BlockFile</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;NewSimpleBlockFile(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>postBufferLen,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(file,<sp/>start));</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;postpostBlock<sp/>=<sp/>mBlock[b1<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>postpostLen<sp/>=<sp/>postpostBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>sum<sp/>=<sp/>postpostLen<sp/>+<sp/>postBufferLen;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>use<sp/>of<sp/>scratch,<sp/>can<sp/>ask<sp/>for<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(sum,<sp/>mSampleFormat);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos<sp/>=<sp/>(start<sp/>+<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>-<sp/>postBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>mSampleFormat,<sp/>postBlock,<sp/>pos,<sp/>postBufferLen);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>()<sp/>+<sp/>(postBufferLen<sp/>*<sp/>sampleSize),<sp/>mSampleFormat,</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>postpostBlock,<sp/>0,<sp/>postpostLen);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Blockify(newBlock,<sp/>start,<sp/>scratch.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>(),<sp/>sum);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1++;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDirManager-&gt;Deref(postpostBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sample<sp/>where<sp/>we<sp/>begin<sp/>deletion<sp/>happens<sp/>to<sp/>fall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>on<sp/>the<sp/>end<sp/>of<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/>mDirManager-&gt;Deref(postBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>remaining<sp/>blocks<sp/>over<sp/>from<sp/>the<sp/>old<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>b1<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>numBlocks;<sp/>i++)</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newBlock.push_back(mBlock[i].Plus(-len));</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substitute<sp/>our<sp/>NEW<sp/>array<sp/>for<sp/>the<sp/>old<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/>mBlock.swap(newBlock);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>total<sp/>number<sp/>of<sp/>samples<sp/>and<sp/>do<sp/>a<sp/>consistency<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/>mNumSamples<sp/>-=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;Delete<sp/>-<sp/>branch<sp/>two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784" refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">Sequence::ConsistencyCheck</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*whereStr)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1785"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBlocks<sp/>=<sp/>mBlock.size();</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bError<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>!bError<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>numBlocks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;seqBlock<sp/>=<sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>seqBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bError)</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(wxT(</highlight><highlight class="stringliteral">&quot;***<sp/>Consistency<sp/>check<sp/>failed<sp/>after<sp/>%s.<sp/>***&quot;</highlight><highlight class="normal">),<sp/>whereStr);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxString<sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sequence_1a32342ce367e16a6219798b1fe8ae90e4" kindref="member">DebugPrintf</ref>(&amp;str);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(wxT(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">),<sp/>str.c_str());</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(wxT(</highlight><highlight class="stringliteral">&quot;***<sp/>Please<sp/>report<sp/>this<sp/>error<sp/>to<sp/>feedback@audacityteam.org.<sp/>***\n\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Recommended<sp/>course<sp/>of<sp/>action:\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxT(</highlight><highlight class="stringliteral">&quot;Undo<sp/>the<sp/>failed<sp/>operation(s),<sp/>then<sp/>export<sp/>or<sp/>save<sp/>your<sp/>work<sp/>and<sp/>quit.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!bError;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818" refid="class_sequence_1a32342ce367e16a6219798b1fe8ae90e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a32342ce367e16a6219798b1fe8ae90e4" kindref="member">Sequence::DebugPrintf</ref>(wxString<sp/>*<ref refid="namespacelv2specgen_1af69976955f051ccef12ad2f85392e818" kindref="member">dest</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1819"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mBlock.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_seq_block" kindref="compound">SeqBlock</ref><sp/>&amp;seqBlock<sp/>=<sp/>mBlock[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>+=<sp/>wxString::Format</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(wxT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Block<sp/>%3u:<sp/>start<sp/>%8lld,<sp/>len<sp/>%8lld,<sp/>refs<sp/>%d,<sp/>&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>seqBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref><sp/>?<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>()<sp/>:<sp/>0,</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref><sp/>?<sp/>mDirManager-&gt;GetRefCount(seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>+=<sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a07fa90d9e26b0f5c4bc76716aff0fa87" kindref="member">GetFileName</ref>().GetFullName();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>+=<sp/>wxT(</highlight><highlight class="stringliteral">&quot;&lt;missing<sp/>block<sp/>file&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pos<sp/>!=<sp/>seqBlock.<ref refid="class_seq_block_1a38a34e33b7c97b7b2e55163644b9028f" kindref="member">start</ref>)<sp/>||<sp/>!seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>+=<sp/>wxT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>ERROR\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>+=<sp/>wxT(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>seqBlock.<ref refid="class_seq_block_1afc9b7e81170d82463b8849815b2cf2a2" kindref="member">f</ref>-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>mNumSamples)</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>+=<sp/>wxString::Format</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(wxT(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>mNumSamples<sp/>=<sp/>%lld\n&quot;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>mNumSamples);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851" refid="class_sequence_1a2ddf277686a187d37f233459a3be2f27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a2ddf277686a187d37f233459a3be2f27" kindref="member">Sequence::SetMaxDiskBlockSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/>sMaxDiskBlockSize<sp/>=<sp/>bytes;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856" refid="class_sequence_1af7b222a1fd51ccbe23abcaffbf8217d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1af7b222a1fd51ccbe23abcaffbf8217d7" kindref="member">Sequence::GetMaxDiskBlockSize</ref>()</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sMaxDiskBlockSize;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861" refid="class_sequence_1a9ad751b836c640c477ed4d13367a6e50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequence_1a9ad751b836c640c477ed4d13367a6e50" kindref="member">Sequence::AppendBlockFile</ref>(<ref refid="class_block_file" kindref="compound">BlockFile</ref>*<sp/>blockFile)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>assume<sp/>blockFile<sp/>has<sp/>the<sp/>correct<sp/>ref<sp/>count<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/>mBlock.push_back(<ref refid="class_seq_block" kindref="compound">SeqBlock</ref>(blockFile,<sp/>mNumSamples));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/>mNumSamples<sp/>+=<sp/>blockFile-&gt;<ref refid="class_block_file_1a93fa23bb9606cafba976f2c0b818719c" kindref="member">GetLength</ref>();</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRL:<sp/><sp/>I<sp/>hoisted<sp/>the<sp/>intended<sp/>consistency<sp/>check<sp/>out<sp/>of<sp/>the<sp/>inner<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>RecordingRecoveryHandler::HandleXMLEndTag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERY_SLOW_CHECKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sequence_1aca3140ac69df7391fb27f8cdd8ad5807" kindref="member">ConsistencyCheck</ref>(wxT(</highlight><highlight class="stringliteral">&quot;AppendBlockFile&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/Sequence.cpp"/>
  </compounddef>
</doxygen>
