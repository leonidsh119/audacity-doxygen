<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_matrix_8h" kind="file" language="C++">
    <compoundname>Matrix.h</compoundname>
    <includedby refid="_interpolate_audio_8cpp" local="yes">C:/_dev/OpenU/Audacity/audacity/src/InterpolateAudio.cpp</includedby>
    <includedby refid="_matrix_8cpp" local="yes">C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp</includedby>
    <invincdepgraph>
      <node id="48230">
        <label>C:/_dev/OpenU/Audacity/audacity/src/InterpolateAudio.cpp</label>
        <link refid="_interpolate_audio_8cpp"/>
      </node>
      <node id="48229">
        <label>C:/_dev/OpenU/Audacity/audacity/src/Matrix.h</label>
        <link refid="Matrix.h"/>
        <childnode refid="48230" relation="include">
        </childnode>
        <childnode refid="48231" relation="include">
        </childnode>
      </node>
      <node id="48231">
        <label>C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp</label>
        <link refid="_matrix_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_vector" prot="public">Vector</innerclass>
    <innerclass refid="class_matrix" prot="public">Matrix</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_matrix_8h_1a5ac6ed01b14bafb22766429ff8fd364e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool InvertMatrix</definition>
        <argsstring>(const Matrix &amp;input, Matrix &amp;Minv)</argsstring>
        <name>InvertMatrix</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>Minv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="81" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="336" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a04c3d9fa1972bf94783c234b6a60ac1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix TransposeMatrix</definition>
        <argsstring>(const Matrix &amp;M)</argsstring>
        <name>TransposeMatrix</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="83" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="326" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1ad9d7d99dd654271cd8d9be5b1558e67d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix IdentityMatrix</definition>
        <argsstring>(int N)</argsstring>
        <name>IdentityMatrix</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="85" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a4dba5586909542d9eb8baca2e2968178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator+</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="87" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="168" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a37e080fb6b5cd0fbb3e8b050b1f0e9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator-</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="88" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="89" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="188" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1aa1b2ebf52f824a2f3f66294af21e8748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;left, double right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>double</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="90" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a747d1a9a186333551108b2b977fc05e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector VectorSubset</definition>
        <argsstring>(const Vector &amp;other, int start, int len)</argsstring>
        <name>VectorSubset</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="92" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a369d6797b81674bd4b20fdf61e973ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector VectorConcatenate</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>VectorConcatenate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="93" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="216" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a893421561a23302eb92798d13f6cc7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;left, const Matrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="95" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="227" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a7ffca444240a3659ff0a4d326c5985d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Matrix &amp;left, const Vector &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="96" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="240" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1ac82b2ffb982879784a901be332961065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="98" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="253" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1afce00b1883e38645f3045313c03e66d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(const Matrix &amp;left, const double right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="99" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1aaa106b7c384fadadf2f7a6fb00e8d35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix ScalarMultiply</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>ScalarMultiply</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="102" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1ae93cae6a77d5f451d2dc1cddc228fc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix MatrixMultiply</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>MatrixMultiply</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="103" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="287" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a06577f4513972338dd8da6140cc419a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix MatrixSubset</definition>
        <argsstring>(const Matrix &amp;M, int startRow, int numRows, int startCol, int numCols)</argsstring>
        <name>MatrixSubset</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>startRow</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>numRows</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>startCol</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>numCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="105" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="301" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a5afff3fbc8a497f41fc2d145bc45df37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix MatrixConcatenateCols</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>MatrixConcatenateCols</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h" line="108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="312" bodyend="324"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>General routine to interpolate (or even extrapolate small amounts) audio when a few of the samples are bad. Works great for a few dozen bad samples, but not so well with hundreds. Uses the least-squares autoregression (LSAR) algorithm, as described in: </para>    </briefdescription>
    <detaileddescription>
<para>Holds both the <ref refid="class_matrix" kindref="compound">Matrix</ref> and <ref refid="class_vector" kindref="compound">Vector</ref> classes, supporting linear algebra operations, including matrix inversion. Used by InterpolateAudio.</para><para>Simon Godsill, Peter Rayner, and Olivier Cappe. Digital Audio Restoration. Berlin: Springer, 1998.</para><para>This is the same work used by Gnome Wave Cleaner (GWC), however this implementation is original.</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Matrix.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">*******************************************************************/</highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__AUDACITY_MATRIX__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__AUDACITY_MATRIX__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/>copyFrom);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy=</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="class_vector_1a31810b59e0d9106aa17ecf6ae1cfbaf1" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a2eb3c49587a4f12cade7895ccb73f6a0" kindref="member">~Vector</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="class_vector_1a8cc4aefe1d880f18feac3426ea8d933e" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="class_vector_1a8cc4aefe1d880f18feac3426ea8d933e" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mData[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];<sp/>}</highlight></codeline>
<codeline lineno="42" refid="class_vector_1a15ef8f477b54c1f09081862d38c8e61a" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a15ef8f477b54c1f09081862d38c8e61a" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mData[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];<sp/>}</highlight></codeline>
<codeline lineno="43" refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mN;<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a459d9172b7e4d79c154aacc0ff4848b6" kindref="member">Sum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mN;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mData;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mCopy;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_matrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>copyFrom);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_matrix" kindref="compound">Matrix</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/><ref refid="class_vector_1a31810b59e0d9106aa17ecf6ae1cfbaf1" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="class_matrix_1aa003e1b32017f269672db252d8c421a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="class_matrix_1aa003e1b32017f269672db252d8c421a9" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];<sp/>}</highlight></codeline>
<codeline lineno="65" refid="class_matrix_1a0023b4d8a4be2bd07bcdb8bf0f78ee21" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="class_matrix_1a0023b4d8a4be2bd07bcdb8bf0f78ee21" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];<sp/>}</highlight></codeline>
<codeline lineno="66" refid="class_matrix_1adc52ae10fdf495191d3267d658978772" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mRows;<sp/>}</highlight></codeline>
<codeline lineno="67" refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCols;<sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SwapRows(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a459d9172b7e4d79c154aacc0ff4848b6" kindref="member">Sum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mRows;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mCols;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>**mRowVec;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_matrix_8h_1a5ac6ed01b14bafb22766429ff8fd364e" kindref="member">InvertMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>input,<sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>Minv);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1a04c3d9fa1972bf94783c234b6a60ac1b" kindref="member">TransposeMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1ad9d7d99dd654271cd8d9be5b1558e67d" kindref="member">IdentityMatrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a4dba5586909542d9eb8baca2e2968178" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a37e080fb6b5cd0fbb3e8b050b1f0e9d3" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a747d1a9a186333551108b2b977fc05e6" kindref="member">VectorSubset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a369d6797b81674bd4b20fdf61e973ec6" kindref="member">VectorConcatenate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/>right);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1a4dba5586909542d9eb8baca2e2968178" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>operator*<sp/>on<sp/>matrices<sp/>due<sp/>to<sp/>ambiguity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1aaa106b7c384fadadf2f7a6fb00e8d35f" kindref="member">ScalarMultiply</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1ae93cae6a77d5f451d2dc1cddc228fc31" kindref="member">MatrixMultiply</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1a06577f4513972338dd8da6140cc419a1" kindref="member">MatrixSubset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;M,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startRow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numRows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startCol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numCols);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8h_1a5afff3fbc8a497f41fc2d145bc45df37" kindref="member">MatrixConcatenateCols</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>right);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_matrix_8h_1a5ac6ed01b14bafb22766429ff8fd364e" kindref="member">InvertMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>M,<sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>Minv);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__AUDACITY_MATRIX__</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.h"/>
  </compounddef>
</doxygen>
