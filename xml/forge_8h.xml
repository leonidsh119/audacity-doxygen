<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="forge_8h" kind="file" language="C++">
    <compoundname>forge.h</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes refid="atom_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/atom.h</includes>
    <includes refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/util.h</includes>
    <includes refid="urid_8h" local="yes">lv2/lv2plug.in/ns/ext/urid/urid.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="state_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c</includedby>
    <includedby refid="atom-test_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c</includedby>
    <includedby refid="lv2_2lv2_2plugins_2eg-sampler_8lv2_2sampler_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler.c</includedby>
    <includedby refid="sampler__ui_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler_ui.c</includedby>
    <includedby refid="eg-scope_8lv2_2uris_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/uris.h</includedby>
    <includedby refid="sratom_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/sratom/sratom.h</includedby>
    <includedby refid="sratom_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/src/sratom.c</includedby>
    <includedby refid="sratom__test_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/tests/sratom_test.c</includedby>
    <incdepgraph>
      <node id="26642">
        <label>stdbool.h</label>
      </node>
      <node id="26640">
        <label>stdarg.h</label>
      </node>
      <node id="26634">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h</label>
        <link refid="forge.h"/>
        <childnode refid="26635" relation="include">
        </childnode>
        <childnode refid="26636" relation="include">
        </childnode>
        <childnode refid="26639" relation="include">
        </childnode>
        <childnode refid="26643" relation="include">
        </childnode>
        <childnode refid="26642" relation="include">
        </childnode>
      </node>
      <node id="26637">
        <label>stdint.h</label>
      </node>
      <node id="26638">
        <label>stddef.h</label>
      </node>
      <node id="26635">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="26643">
        <label>lv2/lv2plug.in/ns/ext/urid/urid.h</label>
        <link refid="urid_8h"/>
        <childnode refid="26637" relation="include">
        </childnode>
      </node>
      <node id="26641">
        <label>string.h</label>
      </node>
      <node id="26639">
        <label>lv2/lv2plug.in/ns/ext/atom/util.h</label>
        <link refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h"/>
        <childnode refid="26640" relation="include">
        </childnode>
        <childnode refid="26637" relation="include">
        </childnode>
        <childnode refid="26641" relation="include">
        </childnode>
        <childnode refid="26636" relation="include">
        </childnode>
        <childnode refid="26642" relation="include">
        </childnode>
      </node>
      <node id="26636">
        <label>lv2/lv2plug.in/ns/ext/atom/atom.h</label>
        <link refid="atom_8h"/>
        <childnode refid="26637" relation="include">
        </childnode>
        <childnode refid="26638" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="26644">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h</label>
        <link refid="forge.h"/>
        <childnode refid="26645" relation="include">
        </childnode>
        <childnode refid="26646" relation="include">
        </childnode>
        <childnode refid="26647" relation="include">
        </childnode>
        <childnode refid="26648" relation="include">
        </childnode>
        <childnode refid="26649" relation="include">
        </childnode>
        <childnode refid="26652" relation="include">
        </childnode>
        <childnode refid="26653" relation="include">
        </childnode>
        <childnode refid="26654" relation="include">
        </childnode>
      </node>
      <node id="26653">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/src/sratom.c</label>
        <link refid="sratom_8c"/>
      </node>
      <node id="26646">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c</label>
        <link refid="atom-test_8c"/>
      </node>
      <node id="26649">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/uris.h</label>
        <link refid="eg-scope_8lv2_2uris_8h"/>
        <childnode refid="26650" relation="include">
        </childnode>
        <childnode refid="26651" relation="include">
        </childnode>
      </node>
      <node id="26652">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/sratom/sratom.h</label>
        <link refid="sratom_8h"/>
        <childnode refid="26645" relation="include">
        </childnode>
        <childnode refid="26653" relation="include">
        </childnode>
        <childnode refid="26654" relation="include">
        </childnode>
      </node>
      <node id="26650">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope.c</label>
        <link refid="examploscope_8c"/>
      </node>
      <node id="26647">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler.c</label>
        <link refid="lv2_2lv2_2plugins_2eg-sampler_8lv2_2sampler_8c"/>
      </node>
      <node id="26648">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler_ui.c</label>
        <link refid="sampler__ui_8c"/>
      </node>
      <node id="26654">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/tests/sratom_test.c</label>
        <link refid="sratom__test_8c"/>
      </node>
      <node id="26645">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c</label>
        <link refid="state_8c"/>
      </node>
      <node id="26651">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope_ui.c</label>
        <link refid="examploscope__ui_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct___l_v2___atom___forge___frame" prot="public">_LV2_Atom_Forge_Frame</innerclass>
    <innerclass refid="struct_l_v2___atom___forge" prot="public">LV2_Atom_Forge</innerclass>
      <sectiondef kind="user-defined">
      <header>Object Stack</header>
      <memberdef kind="function" id="forge_8h_1a0614723db5b4995426e63ec60b5e583f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_push</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame, LV2_Atom_Forge_Ref ref)</argsstring>
        <name>lv2_atom_forge_push</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push a stack frame. This is done automatically by container functions (which take a stack frame pointer), but may be called by the user to push the top level container when writing to an existing Atom. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="182" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="182" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a7fcc0de4440ca566c1a4199fdedb6819" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lv2_atom_forge_pop</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame)</argsstring>
        <name>lv2_atom_forge_pop</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pop a stack frame. This must be called when a container is finished. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="194" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a676fb26bff334dc0368518d3140248ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_forge_top_is</definition>
        <argsstring>(LV2_Atom_Forge *forge, uint32_t type)</argsstring>
        <name>lv2_atom_forge_top_is</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff the top of the stack has the given type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="202" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a54121318f3d1871d792f9dc96c450ded" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_forge_is_object_type</definition>
        <argsstring>(const LV2_Atom_Forge *forge, uint32_t type)</argsstring>
        <name>lv2_atom_forge_is_object_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>type</computeroutput> is an atom:Object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="210" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a90a4298265663c61f69e43512fa37ebc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_forge_is_blank</definition>
        <argsstring>(const LV2_Atom_Forge *forge, uint32_t type, const LV2_Atom_Object_Body *body)</argsstring>
        <name>lv2_atom_forge_is_blank</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>type</computeroutput> is an atom:Object with a blank ID. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="219" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="219" bodyend="225"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Output Configuration</header>
      <memberdef kind="function" id="forge_8h_1aa3acc6d834553b8f7d62b447163d5fa4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lv2_atom_forge_set_buffer</definition>
        <argsstring>(LV2_Atom_Forge *forge, uint8_t *buf, size_t size)</argsstring>
        <name>lv2_atom_forge_set_buffer</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the output buffer where <computeroutput>forge</computeroutput> will write atoms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="128" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="235" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1af61a8bb4f4cbddefd86c81169158d22d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lv2_atom_forge_set_sink</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Sink sink, LV2_Atom_Forge_Deref_Func deref, LV2_Atom_Forge_Sink_Handle handle)</argsstring>
        <name>lv2_atom_forge_set_sink</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a613887c9f1f3d5ebd94b49eaf7cc6f94" kindref="member">LV2_Atom_Forge_Sink</ref></type>
          <declname>sink</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1ac5c410365728df8fbb2dbf0c15421b1a" kindref="member">LV2_Atom_Forge_Deref_Func</ref></type>
          <declname>deref</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a19874fcf063508aa5069ee22fd494676" kindref="member">LV2_Atom_Forge_Sink_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the sink function where <computeroutput>forge</computeroutput> will write output.</para><para>The return value of forge functions is an LV2_Atom_Forge_Ref which is an integer type safe to use as a pointer but is otherwise opaque. The sink function must return a ref that can be dereferenced to access as least sizeof(LV2_Atom) bytes of the written data, so sizes can be updated. For ringbuffers, this should be possible as long as the size of the buffer is a multiple of sizeof(LV2_Atom), since atoms are always aligned.</para><para>Note that 0 is an invalid reference, so if you are using a buffer offset be sure to offset it such that 0 is never a valid reference. You will get confusing errors otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="261" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="261" bodyend="272"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Low Level Output</header>
      <memberdef kind="function" id="forge_8h_1a57a521ab2048dc849f2958969975c40c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_raw</definition>
        <argsstring>(LV2_Atom_Forge *forge, const void *data, uint32_t size)</argsstring>
        <name>lv2_atom_forge_raw</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write raw output. This is used internally, but is also useful for writing atom types not explicitly supported by the forge API. Note the caller is responsible for ensuring the output is approriately padded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="286" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="286" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a5406cdf51fc81a494a69a6a266ddd300" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lv2_atom_forge_pad</definition>
        <argsstring>(LV2_Atom_Forge *forge, uint32_t written)</argsstring>
        <name>lv2_atom_forge_pad</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>written</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pad output accordingly so next write is 64-bit aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="308" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a7e7571d6c9e5b4b2b041ab6b08707956" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_write</definition>
        <argsstring>(LV2_Atom_Forge *forge, const void *data, uint32_t size)</argsstring>
        <name>lv2_atom_forge_write</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write raw output, padding to 64-bits as necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="317" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="317" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a2dd45f714257335d0c23bbd3672eec8a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_string_body</definition>
        <argsstring>(LV2_Atom_Forge *forge, const char *str, uint32_t len)</argsstring>
        <name>lv2_atom_forge_string_body</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a null-terminated string body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="328" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="328" bodyend="337"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Atom Output</header>
      <memberdef kind="function" id="forge_8h_1ac6486d8ab1b94fca4e36d358f6de2920" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_atom</definition>
        <argsstring>(LV2_Atom_Forge *forge, uint32_t size, uint32_t type)</argsstring>
        <name>lv2_atom_forge_atom</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Atom header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="347" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="347" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a674fc19297102974ecc5940fdf7704e6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_primitive</definition>
        <argsstring>(LV2_Atom_Forge *forge, const LV2_Atom *a)</argsstring>
        <name>lv2_atom_forge_primitive</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a primitive (fixed-size) atom. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="355" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="355" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a11a8911957f5caf277f0ed1156fda4a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_int</definition>
        <argsstring>(LV2_Atom_Forge *forge, int32_t val)</argsstring>
        <name>lv2_atom_forge_int</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Int. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="367" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="367" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a4d85561ef1b6f91b2d5e65f0efc3cbf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_long</definition>
        <argsstring>(LV2_Atom_Forge *forge, int64_t val)</argsstring>
        <name>lv2_atom_forge_long</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Long. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="375" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="375" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1ae97e8dff794cbd1e12202e3eddbaff6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_float</definition>
        <argsstring>(LV2_Atom_Forge *forge, float val)</argsstring>
        <name>lv2_atom_forge_float</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Float. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="383" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="383" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a7f0533978a1972197362b692a4e25c13" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_double</definition>
        <argsstring>(LV2_Atom_Forge *forge, double val)</argsstring>
        <name>lv2_atom_forge_double</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Double. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="391" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="391" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a226d076fa415fe84c6ca92a81b7f7738" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_bool</definition>
        <argsstring>(LV2_Atom_Forge *forge, bool val)</argsstring>
        <name>lv2_atom_forge_bool</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Bool. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="399" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="399" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a6cccf9dabe079506add027ec0d6c0fed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_urid</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_URID id)</argsstring>
        <name>lv2_atom_forge_urid</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:URID. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="407" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1aa2a3a050ce2a7d0705f28a57d1d3f029" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_typed_string</definition>
        <argsstring>(LV2_Atom_Forge *forge, uint32_t type, const char *str, uint32_t len)</argsstring>
        <name>lv2_atom_forge_typed_string</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom compatible with atom:String. Used internally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="415" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="415" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1aa1be0a73cbcd550a177915b04dc000f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_string</definition>
        <argsstring>(LV2_Atom_Forge *forge, const char *str, uint32_t len)</argsstring>
        <name>lv2_atom_forge_string</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:String. Note that <computeroutput>str</computeroutput> need not be NULL terminated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="434" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a08f31ba50b2e4711210064a0bd845b0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_uri</definition>
        <argsstring>(LV2_Atom_Forge *forge, const char *uri, uint32_t len)</argsstring>
        <name>lv2_atom_forge_uri</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:URI. Note that <computeroutput>uri</computeroutput> need not be NULL terminated. This does not map the URI, but writes the complete URI string. To write a mapped URI, use lv2_atom_forge_urid(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="445" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1ab31ceda1d6d8c35bedf66f4221c0cac2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_path</definition>
        <argsstring>(LV2_Atom_Forge *forge, const char *path, uint32_t len)</argsstring>
        <name>lv2_atom_forge_path</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Path. Note that <computeroutput>path</computeroutput> need not be NULL terminated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="452" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1ae065b5249deafda66cdf71445f9a9f94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_literal</definition>
        <argsstring>(LV2_Atom_Forge *forge, const char *str, uint32_t len, uint32_t datatype, uint32_t lang)</argsstring>
        <name>lv2_atom_forge_literal</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an atom:Literal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="459" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="459" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a31643be138cdfdbcb59b7ab715d3c39e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_vector_head</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame, uint32_t child_size, uint32_t child_type)</argsstring>
        <name>lv2_atom_forge_vector_head</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>child_size</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>child_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start an atom:<ref refid="class_vector" kindref="compound">Vector</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="484" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="484" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1af8bc0af459096923beb6b8a591577792" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_vector</definition>
        <argsstring>(LV2_Atom_Forge *forge, uint32_t child_size, uint32_t child_type, uint32_t n_elems, const void *elems)</argsstring>
        <name>lv2_atom_forge_vector</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>child_size</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>child_type</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>n_elems</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>elems</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a complete atom:<ref refid="class_vector" kindref="compound">Vector</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="499" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="499" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a0178725a4ccb3140f7f2f5a933e9ca9a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_tuple</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame)</argsstring>
        <name>lv2_atom_forge_tuple</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the header of an atom:Tuple.</para><para>The passed frame will be initialised to represent this tuple. To complete the tuple, write a sequence of atoms, then pop the frame with lv2_atom_forge_pop().</para><para>For example: <programlisting><codeline><highlight class="normal">//<sp/>Write<sp/>tuple<sp/>(1,<sp/>2.0)</highlight></codeline>
<codeline><highlight class="normal">LV2_Atom_Forge_Frame<sp/>frame;</highlight></codeline>
<codeline><highlight class="normal">LV2_Atom*<sp/>tup<sp/>=<sp/>(LV2_Atom*)lv2_atom_forge_tuple(forge,<sp/>&amp;frame);</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_int32(forge,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_float(forge,<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_pop(forge,<sp/>&amp;frame);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="535" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="535" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1af7a97fac49324f999ef540c0a6ed8907" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_object</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame, LV2_URID id, LV2_URID otype)</argsstring>
        <name>lv2_atom_forge_object</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>otype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the header of an atom:Object.</para><para>The passed frame will be initialised to represent this object. To complete the object, write a sequence of properties, then pop the frame with lv2_atom_forge_pop().</para><para>For example: <programlisting><codeline><highlight class="normal">LV2_URID<sp/>eg_Cat<sp/><sp/>=<sp/>map(&quot;http://example.org/Cat&quot;);</highlight></codeline>
<codeline><highlight class="normal">LV2_URID<sp/>eg_name<sp/>=<sp/>map(&quot;http://example.org/name&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Start<sp/>object<sp/>with<sp/>type<sp/>eg_Cat<sp/>and<sp/>blank<sp/>ID</highlight></codeline>
<codeline><highlight class="normal">LV2_Atom_Forge_Frame<sp/>frame;</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_object(forge,<sp/>&amp;frame,<sp/>0,<sp/>eg_Cat);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Append<sp/>property<sp/>eg:name<sp/>=<sp/>&quot;Hobbes&quot;</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_key(forge,<sp/>eg_name);</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_string(forge,<sp/>&quot;Hobbes&quot;,<sp/>strlen(&quot;Hobbes&quot;));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Finish<sp/>object</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_forge_pop(forge,<sp/>&amp;frame);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="567" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="567" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1aa5faabaea6f918b9d7bd04a5585d01b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a976bd670260944af923aaf658758a2a2" kindref="member">LV2_ATOM_FORGE_DEPRECATED</ref> <ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_ATOM_FORGE_DEPRECATED LV2_Atom_Forge_Ref lv2_atom_forge_resource</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame, LV2_URID id, LV2_URID otype)</argsstring>
        <name>lv2_atom_forge_resource</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>otype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The same as lv2_atom_forge_object(), but for object:Resource.</para><para>This function is deprecated and should not be used in new code. Use lv2_atom_forge_object() directly instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="588" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="588" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a22d0b912bceeb8a3c4df9b81e5bc974f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a976bd670260944af923aaf658758a2a2" kindref="member">LV2_ATOM_FORGE_DEPRECATED</ref> <ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_ATOM_FORGE_DEPRECATED LV2_Atom_Forge_Ref lv2_atom_forge_blank</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame, uint32_t id, LV2_URID otype)</argsstring>
        <name>lv2_atom_forge_blank</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>otype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The same as lv2_atom_forge_object(), but for object:Blank.</para><para>This function is deprecated and should not be used in new code. Use lv2_atom_forge_object() directly instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="609" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="609" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1ac08676ed8b00e873621bbb724159bc2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_key</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_URID key)</argsstring>
        <name>lv2_atom_forge_key</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a property key in an Object, to be followed by the value.</para><para>See lv2_atom_forge_object() documentation for an example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="628" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="628" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a6a3a125887d6f59d06121996a4f0b292" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_property_head</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_URID key, LV2_URID context)</argsstring>
        <name>lv2_atom_forge_property_head</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref></type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the header for a property body in an object, with context.</para><para>If you do not need the context, which is almost certainly the case, use the simpler lv2_atom_forge_key() instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="642" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="642" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a4f7e59bed349eff1fc39f85c045e9884" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_sequence_head</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Frame *frame, uint32_t unit)</argsstring>
        <name>lv2_atom_forge_sequence_head</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the header for a <ref refid="class_sequence" kindref="compound">Sequence</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="654" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="654" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1adad7ec2f2d581c926b01958417ba84ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_frame_time</definition>
        <argsstring>(LV2_Atom_Forge *forge, int64_t frames)</argsstring>
        <name>lv2_atom_forge_frame_time</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the time stamp header of an Event (in a <ref refid="class_sequence" kindref="compound">Sequence</ref>) in audio frames. After this, call the appropriate forge method(s) to write the body. Note the returned reference is to an <ref refid="struct_l_v2___event" kindref="compound">LV2_Event</ref> which is NOT an Atom. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="672" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="672" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a323113618cd70855a5d42647a50e09c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
        <definition>static LV2_Atom_Forge_Ref lv2_atom_forge_beat_time</definition>
        <argsstring>(LV2_Atom_Forge *forge, double beats)</argsstring>
        <name>lv2_atom_forge_beat_time</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the time stamp header of an Event (in a <ref refid="class_sequence" kindref="compound">Sequence</ref>) in beats. After this, call the appropriate forge method(s) to write the body. Note the returned reference is to an <ref refid="struct_l_v2___event" kindref="compound">LV2_Event</ref> which is NOT an Atom. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="683" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="683" bodyend="686"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="forge_8h_1a976bd670260944af923aaf658758a2a2" prot="public" static="no">
        <name>LV2_ATOM_FORGE_DEPRECATED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="54" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="forge_8h_1a19874fcf063508aa5069ee22fd494676" prot="public" static="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>typedef void* LV2_Atom_Forge_Sink_Handle</definition>
        <argsstring></argsstring>
        <name>LV2_Atom_Forge_Sink_Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle for LV2_Atom_Forge_Sink. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="73" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" prot="public" static="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a0fbe4a4f8dd857ee04923a901f27465f" kindref="member">intptr_t</ref></type>
        <definition>typedef intptr_t LV2_Atom_Forge_Ref</definition>
        <argsstring></argsstring>
        <name>LV2_Atom_Forge_Ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reference to a chunk of written output. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="76" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="forge_8h_1a613887c9f1f3d5ebd94b49eaf7cc6f94" prot="public" static="no">
        <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref>(*</type>
        <definition>typedef LV2_Atom_Forge_Ref(* LV2_Atom_Forge_Sink) (LV2_Atom_Forge_Sink_Handle handle, const void *buf, uint32_t size)</definition>
        <argsstring>)(LV2_Atom_Forge_Sink_Handle handle, const void *buf, uint32_t size)</argsstring>
        <name>LV2_Atom_Forge_Sink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sink function for writing output. See lv2_atom_forge_set_sink(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="79" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="forge_8h_1ac5c410365728df8fbb2dbf0c15421b1a" prot="public" static="no">
        <type><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *(*</type>
        <definition>typedef LV2_Atom*(* LV2_Atom_Forge_Deref_Func) (LV2_Atom_Forge_Sink_Handle handle, LV2_Atom_Forge_Ref ref)</definition>
        <argsstring>)(LV2_Atom_Forge_Sink_Handle handle, LV2_Atom_Forge_Ref ref)</argsstring>
        <name>LV2_Atom_Forge_Deref_Func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_function" kindref="compound">Function</ref> for resolving a reference. See lv2_atom_forge_set_sink(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="85" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="forge_8h_1a17754ac32fadfa54b73978e8a535065b" prot="public" static="no">
        <type>struct <ref refid="struct___l_v2___atom___forge___frame" kindref="compound">_LV2_Atom_Forge_Frame</ref></type>
        <definition>typedef struct _LV2_Atom_Forge_Frame  LV2_Atom_Forge_Frame</definition>
        <argsstring></argsstring>
        <name>LV2_Atom_Forge_Frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A stack frame used for keeping track of nested Atom containers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="93" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="forge_8h_1a46e188829c31ce100e232d33c0277581" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lv2_atom_forge_init</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_URID_Map *map)</argsstring>
        <name>lv2_atom_forge_init</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="urid_8h_1afefb42cd271f750506a8739f73c098c5" kindref="member">LV2_URID_Map</ref> *</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise <computeroutput>forge</computeroutput>.</para><para><ref refid="struct_u_r_is" kindref="compound">URIs</ref> will be mapped using <computeroutput>map</computeroutput> and stored, a reference to <computeroutput>map</computeroutput> itself is not held. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="137" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="137" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="forge_8h_1a795f3dd640d9fa235926e1dd8217c43a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
        <definition>static LV2_Atom* lv2_atom_forge_deref</definition>
        <argsstring>(LV2_Atom_Forge *forge, LV2_Atom_Forge_Ref ref)</argsstring>
        <name>lv2_atom_forge_deref</name>
        <param>
          <type><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref> *</type>
          <declname>forge</declname>
        </param>
        <param>
          <type><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" line="161" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h" bodystart="161" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An API for constructing LV2 atoms.</para><para>This file provides an API for constructing Atoms which makes it relatively simple to build nested atoms of arbitrary complexity without requiring dynamic memory allocation.</para><para>The API is based on successively appending the appropriate pieces to build a complete Atom. The size of containers is automatically updated. Functions that begin a container return (via their frame argument) a stack frame which must be popped when the container is finished.</para><para>All output is written to a user-provided buffer or sink function. This makes it popssible to create create atoms on the stack, on the heap, in LV2 port buffers, in a ringbuffer, or elsewhere, all using the same API.</para><para>This entire API is realtime safe if used with a buffer or a realtime safe sink, except lv2_atom_forge_init() which is only realtime safe if the URI map function is.</para><para>Note these functions are all static inline, do not take their address.</para><para>This header is non-normative, it is provided for convenience. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2008-2014<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor">#ifndef<sp/>LV2_ATOM_FORGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LV2_ATOM_FORGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atom_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/atom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="urid_8h" kindref="compound">lv2/lv2plug.in/ns/ext/urid/urid.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__GNUC__<sp/>&gt;<sp/>3<sp/>||<sp/>(__GNUC__<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>LV2_ATOM_FORGE_DEPRECATED<sp/>__attribute__((__deprecated__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="forge_8h_1a976bd670260944af923aaf658758a2a2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>LV2_ATOM_FORGE_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>deprecation<sp/>warnings<sp/>for<sp/>Blank<sp/>and<sp/>Resource</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdeprecated-declarations&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdeprecated-declarations&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="forge_8h_1a19874fcf063508aa5069ee22fd494676" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="forge_8h_1a19874fcf063508aa5069ee22fd494676" kindref="member">LV2_Atom_Forge_Sink_Handle</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a0fbe4a4f8dd857ee04923a901f27465f" kindref="member">intptr_t</ref><sp/><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref></highlight></codeline>
<codeline lineno="80" refid="forge_8h_1a613887c9f1f3d5ebd94b49eaf7cc6f94" refkind="member"><highlight class="normal">(*<ref refid="forge_8h_1a613887c9f1f3d5ebd94b49eaf7cc6f94" kindref="member">LV2_Atom_Forge_Sink</ref>)(LV2_Atom_Forge_Sink_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*</highlight></codeline>
<codeline lineno="86" refid="forge_8h_1ac5c410365728df8fbb2dbf0c15421b1a" refkind="member"><highlight class="normal">(*LV2_Atom_Forge_Deref_Func)(LV2_Atom_Forge_Sink_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="struct___l_v2___atom___forge___frame" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">_LV2_Atom_Forge_Frame</ref><sp/>{</highlight></codeline>
<codeline lineno="91" refid="struct___l_v2___atom___forge___frame_1a35d90dd9d8f32700e3e69bb84aade946" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">_LV2_Atom_Forge_Frame</ref>*<sp/><ref refid="struct___l_v2___atom___forge___frame_1a35d90dd9d8f32700e3e69bb84aade946" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="92" refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/><ref refid="forge_8h_1a17754ac32fadfa54b73978e8a535065b" kindref="member">LV2_Atom_Forge_Frame</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="struct_l_v2___atom___forge" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97" refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="98" refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="99" refid="struct_l_v2___atom___forge_1a25e51f11cd8055598ba53e8622c68b74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_l_v2___atom___forge_1a25e51f11cd8055598ba53e8622c68b74" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="struct_l_v2___atom___forge_1a5c86ff2977c7b68800a91ec29bbf64af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="forge_8h_1a613887c9f1f3d5ebd94b49eaf7cc6f94" kindref="member">LV2_Atom_Forge_Sink</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___forge_1a5c86ff2977c7b68800a91ec29bbf64af" kindref="member">sink</ref>;</highlight></codeline>
<codeline lineno="102" refid="struct_l_v2___atom___forge_1a8de4639169c21d3eb417163eefa3f812" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="forge_8h_1ac5c410365728df8fbb2dbf0c15421b1a" kindref="member">LV2_Atom_Forge_Deref_Func</ref><sp/><sp/><ref refid="struct_l_v2___atom___forge_1a8de4639169c21d3eb417163eefa3f812" kindref="member">deref</ref>;</highlight></codeline>
<codeline lineno="103" refid="struct_l_v2___atom___forge_1a953cf7ee1d8a4793ad0a3b95aaf2e0cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Sink_Handle<sp/><ref refid="struct_l_v2___atom___forge_1a953cf7ee1d8a4793ad0a3b95aaf2e0cd" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/><ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="struct_l_v2___atom___forge_1a641cb7eb7ab7fb6e8cda5b349b6d60a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>Blank<sp/><ref refid="struct_l_v2___atom___forge_1a641cb7eb7ab7fb6e8cda5b349b6d60a8" kindref="member">LV2_ATOM_FORGE_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="108" refid="struct_l_v2___atom___forge_1aa9edbb6b79c332e24810530fde3797d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1aa9edbb6b79c332e24810530fde3797d1" kindref="member">Bool</ref>;</highlight></codeline>
<codeline lineno="109" refid="struct_l_v2___atom___forge_1a34f0a317c1586b5ac2b69606e52421ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a34f0a317c1586b5ac2b69606e52421ed" kindref="member">Chunk</ref>;</highlight></codeline>
<codeline lineno="110" refid="struct_l_v2___atom___forge_1a7f3a264907ebcb9629c0fcab0bbad30f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a7f3a264907ebcb9629c0fcab0bbad30f" kindref="member">Double</ref>;</highlight></codeline>
<codeline lineno="111" refid="struct_l_v2___atom___forge_1a00e18b90ae1a1ea6cef061c1572aad5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a00e18b90ae1a1ea6cef061c1572aad5e" kindref="member">Float</ref>;</highlight></codeline>
<codeline lineno="112" refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref>;</highlight></codeline>
<codeline lineno="113" refid="struct_l_v2___atom___forge_1a4ddfa8596ca6067c0eb5203a945e395a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a4ddfa8596ca6067c0eb5203a945e395a" kindref="member">Long</ref>;</highlight></codeline>
<codeline lineno="114" refid="struct_l_v2___atom___forge_1adecbead2046bf6421ee2918d376af36a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1adecbead2046bf6421ee2918d376af36a" kindref="member">Literal</ref>;</highlight></codeline>
<codeline lineno="115" refid="struct_l_v2___atom___forge_1aeb34e038d80078e2d86cf6dfcf81e4ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1aeb34e038d80078e2d86cf6dfcf81e4ee" kindref="member">Object</ref>;</highlight></codeline>
<codeline lineno="116" refid="struct_l_v2___atom___forge_1a85302bd09eaf23908243f4e1f5c09a51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a85302bd09eaf23908243f4e1f5c09a51" kindref="member">Path</ref>;</highlight></codeline>
<codeline lineno="117" refid="struct_l_v2___atom___forge_1a266bf7ee4c8b059631a303b64975042c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a266bf7ee4c8b059631a303b64975042c" kindref="member">Property</ref>;</highlight></codeline>
<codeline lineno="118" refid="struct_l_v2___atom___forge_1a83e1b24b62ec20dd2649c4587fe467b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/>Resource<sp/><ref refid="struct_l_v2___atom___forge_1a83e1b24b62ec20dd2649c4587fe467b7" kindref="member">LV2_ATOM_FORGE_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="119" refid="struct_l_v2___atom___forge_1ab7f59a27275a83a6a597a89462b055ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1ab7f59a27275a83a6a597a89462b055ee" kindref="member">Sequence</ref>;</highlight></codeline>
<codeline lineno="120" refid="struct_l_v2___atom___forge_1ac03dd46bff7d441a84486f1f5a6ce5b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1ac03dd46bff7d441a84486f1f5a6ce5b7" kindref="member">String</ref>;</highlight></codeline>
<codeline lineno="121" refid="struct_l_v2___atom___forge_1a74ef1b76c8ddb112647f320d5a6cb431" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a74ef1b76c8ddb112647f320d5a6cb431" kindref="member">Tuple</ref>;</highlight></codeline>
<codeline lineno="122" refid="struct_l_v2___atom___forge_1a91872b378897e24591c536b80b2ab03a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a91872b378897e24591c536b80b2ab03a" kindref="member">URI</ref>;</highlight></codeline>
<codeline lineno="123" refid="struct_l_v2___atom___forge_1ae72229c35e9a57d20de9b17eda8f2d59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1ae72229c35e9a57d20de9b17eda8f2d59" kindref="member">URID</ref>;</highlight></codeline>
<codeline lineno="124" refid="struct_l_v2___atom___forge_1a27f8ab6881b64f049207749c72910588" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><ref refid="struct_l_v2___atom___forge_1a27f8ab6881b64f049207749c72910588" kindref="member">Vector</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">lv2_atom_forge_set_buffer(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">lv2_atom_forge_init(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="struct___l_v2___u_r_i_d___map" kindref="compound">LV2_URID_Map</ref>*<sp/><ref refid="structmap" kindref="compound">map</ref>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_set_buffer(forge,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;Blank<sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a696299af522a697b15c6e545808a5d72" kindref="member">LV2_ATOM__Blank</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1aa9edbb6b79c332e24810530fde3797d1" kindref="member">Bool</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a901598dc5f7485b537232c4bd99409df" kindref="member">LV2_ATOM__Bool</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a34f0a317c1586b5ac2b69606e52421ed" kindref="member">Chunk</ref><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a4ef986cbc5c6a52806eb1a9f34a02bb5" kindref="member">LV2_ATOM__Chunk</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a7f3a264907ebcb9629c0fcab0bbad30f" kindref="member">Double</ref><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a7231a3d17078c693d8064260147cdcdc" kindref="member">LV2_ATOM__Double</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a00e18b90ae1a1ea6cef061c1572aad5e" kindref="member">Float</ref><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a28aafd3e85544ce99d45b31234cb0650" kindref="member">LV2_ATOM__Float</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a5b27afec587b34533a5ba6bd4a0e4be5" kindref="member">LV2_ATOM__Int</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a4ddfa8596ca6067c0eb5203a945e395a" kindref="member">Long</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1ae8ba607e8158843f738fbb2c45792cb1" kindref="member">LV2_ATOM__Long</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1adecbead2046bf6421ee2918d376af36a" kindref="member">Literal</ref><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1ae7cd692d11e3c5a98a5b77ecd7a39dad" kindref="member">LV2_ATOM__Literal</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1aeb34e038d80078e2d86cf6dfcf81e4ee" kindref="member">Object</ref><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a1542e5ad14a4840351fa34e9502f2b4c" kindref="member">LV2_ATOM__Object</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a85302bd09eaf23908243f4e1f5c09a51" kindref="member">Path</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1aced2e05e2e5fa9688fa1c96fc7f590f7" kindref="member">LV2_ATOM__Path</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a266bf7ee4c8b059631a303b64975042c" kindref="member">Property</ref><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a53d1f56c7ef1f76916e70edab083ef44" kindref="member">LV2_ATOM__Property</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;Resource<sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1ae2fbcf81d6ef9b00ace562e0941ca507" kindref="member">LV2_ATOM__Resource</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab7f59a27275a83a6a597a89462b055ee" kindref="member">Sequence</ref><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1ae5559c8b29f35636654e62ebb5400273" kindref="member">LV2_ATOM__Sequence</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ac03dd46bff7d441a84486f1f5a6ce5b7" kindref="member">String</ref><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a7f60aca203a53cdb8f59d02a5ab1d0c0" kindref="member">LV2_ATOM__String</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a74ef1b76c8ddb112647f320d5a6cb431" kindref="member">Tuple</ref><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1ab2f9e217933225b9d0e1639476c0c5e3" kindref="member">LV2_ATOM__Tuple</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a91872b378897e24591c536b80b2ab03a" kindref="member">URI</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1ad5205922133b50ad06de7e49c66740cd" kindref="member">LV2_ATOM__URI</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae72229c35e9a57d20de9b17eda8f2d59" kindref="member">URID</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1a682293e6d657ff55fbd29c92a6c964c6" kindref="member">LV2_ATOM__URID</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a27f8ab6881b64f049207749c72910588" kindref="member">Vector</ref><sp/><sp/><sp/>=<sp/>map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a560d625bc0aacd00fd8e6e1e2915bf1a" kindref="member">map</ref>(map-&gt;<ref refid="struct___l_v2___u_r_i_d___map_1a19150b0e12e748ddc70a039c8557a4ce" kindref="member">handle</ref>,<sp/><ref refid="atom_8h_1aa92cf6933b610355401857d6f8af256a" kindref="member">LV2_ATOM__Vector</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*</highlight></codeline>
<codeline lineno="161"><highlight class="normal">lv2_atom_forge_deref(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/>LV2_Atom_Forge_Ref<sp/><ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" kindref="member">buf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)<ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8de4639169c21d3eb417163eefa3f812" kindref="member">deref</ref>(forge-&gt;<ref refid="struct_l_v2___atom___forge_1a953cf7ee1d8a4793ad0a3b95aaf2e0cd" kindref="member">handle</ref>,<sp/>ref);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="182"><highlight class="normal">lv2_atom_forge_push(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/><sp/><sp/><sp/>ref)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="struct___l_v2___atom___forge___frame_1a35d90dd9d8f32700e3e69bb84aade946" kindref="member">parent</ref><sp/>=<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref><sp/><sp/>=<sp/>frame;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">lv2_atom_forge_pop(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(frame<sp/>==<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref><sp/>=<sp/>frame-&gt;<ref refid="struct___l_v2___atom___forge___frame_1a35d90dd9d8f32700e3e69bb84aade946" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">lv2_atom_forge_top_is(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref><sp/>&amp;&amp;<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref>-&gt;<ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lv2_atom_forge_deref(forge,<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref>-&gt;<ref refid="struct___l_v2___atom___forge___frame_1ae4d7dc1067426985649b99b871841a01" kindref="member">ref</ref>)-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref><sp/>==<sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">lv2_atom_forge_is_object_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1aeb34e038d80078e2d86cf6dfcf81e4ee" kindref="member">Object</ref><sp/>||</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>==<sp/>forge-&gt;Blank<sp/>||</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>==<sp/>forge-&gt;Resource);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">lv2_atom_forge_is_blank(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>*<sp/>body)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>forge-&gt;Blank<sp/>||</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type<sp/>==<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1aeb34e038d80078e2d86cf6dfcf81e4ee" kindref="member">Object</ref><sp/>&amp;&amp;<sp/>body-&gt;<ref refid="struct_l_v2___atom___object___body_1a234a147977d0bd89c66da1901fcf418b" kindref="member">id</ref><sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">lv2_atom_forge_set_buffer(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" kindref="member">buf</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="xlglob_8c_1a6d3f7f126151ca554ba001d63c9721f9" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a25e51f11cd8055598ba53e8622c68b74" kindref="member">size</ref><sp/><sp/><sp/>=<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)size;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8de4639169c21d3eb417163eefa3f812" kindref="member">deref</ref><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a5c86ff2977c7b68800a91ec29bbf64af" kindref="member">sink</ref><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a953cf7ee1d8a4793ad0a3b95aaf2e0cd" kindref="member">handle</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">lv2_atom_forge_set_sink(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="forge_8h_1a613887c9f1f3d5ebd94b49eaf7cc6f94" kindref="member">LV2_Atom_Forge_Sink</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sink,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="forge_8h_1ac5c410365728df8fbb2dbf0c15421b1a" kindref="member">LV2_Atom_Forge_Deref_Func</ref><sp/><sp/>deref,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Sink_Handle<sp/>handle)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" kindref="member">buf</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a25e51f11cd8055598ba53e8622c68b74" kindref="member">size</ref><sp/><sp/><sp/>=<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8de4639169c21d3eb417163eefa3f812" kindref="member">deref</ref><sp/><sp/>=<sp/>deref;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a5c86ff2977c7b68800a91ec29bbf64af" kindref="member">sink</ref><sp/><sp/><sp/>=<sp/>sink;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a953cf7ee1d8a4793ad0a3b95aaf2e0cd" kindref="member">handle</ref><sp/>=<sp/>handle;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref><sp/><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="286"><highlight class="normal">lv2_atom_forge_raw(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forge-&gt;<ref refid="struct_l_v2___atom___forge_1a5c86ff2977c7b68800a91ec29bbf64af" kindref="member">sink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a5c86ff2977c7b68800a91ec29bbf64af" kindref="member">sink</ref>(forge-&gt;<ref refid="struct_l_v2___atom___forge_1a953cf7ee1d8a4793ad0a3b95aaf2e0cd" kindref="member">handle</ref>,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(<ref refid="forge_8h_1a272218ba2d84c66ec458cf7069933ea9" kindref="member">LV2_Atom_Forge_Ref</ref>)forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" kindref="member">buf</ref><sp/>+<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>mem<sp/>=<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab6236f0f581165cf959188212cf98860" kindref="member">buf</ref><sp/>+<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref><sp/>(forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref><sp/>+<sp/>size<sp/>&gt;<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a25e51f11cd8055598ba53e8622c68b74" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae729e5f2aa15b926622091df5edb1e2c" kindref="member">offset</ref><sp/>+=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(mem,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a8d1567f516b51cd49e2dd0b1b5285ab7" kindref="member">stack</ref>;<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>;<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref><sp/>=<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;parent)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv2_atom_forge_deref(forge,<sp/><ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>-&gt;ref)-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>+=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">lv2_atom_forge_pad(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>written)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>pad<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>pad_size<sp/>=<sp/>lv2_atom_pad_size(written)<sp/>-<sp/>written;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>lv2_atom_forge_raw(forge,<sp/>&amp;pad,<sp/>pad_size);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="317"><highlight class="normal">lv2_atom_forge_write(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>size)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/>out<sp/>=<sp/>lv2_atom_forge_raw(forge,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv2_atom_forge_pad(forge,<sp/>size);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="328"><highlight class="normal">lv2_atom_forge_string_body(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/>out<sp/>=<sp/>lv2_atom_forge_raw(forge,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>&amp;&amp;<sp/>(out<sp/>=<sp/>lv2_atom_forge_raw(forge,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv2_atom_forge_pad(forge,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="347"><highlight class="normal">lv2_atom_forge_atom(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>size,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>type)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref><sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref><sp/>=<sp/>{<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/>type<sp/>};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_raw(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="355"><highlight class="normal">lv2_atom_forge_primitive(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>a)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lv2_atom_forge_top_is(forge,<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a27f8ab6881b64f049207749c72910588" kindref="member">Vector</ref>))<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_raw(forge,<sp/><ref refid="atom_8h_1aff0faa2323c0ac3f44a10a1b310b5ac0" kindref="member">LV2_ATOM_BODY_CONST</ref>(a),<sp/>a-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_write(</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>a,<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>)<sp/>+<sp/>a-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="367"><highlight class="normal">lv2_atom_forge_int(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Int</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(val),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a6602b2a9838bb2349ac42e4deb84fc4b" kindref="member">Int</ref><sp/>},<sp/>val<sp/>};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_primitive(forge,<sp/>&amp;a.<ref refid="struct_l_v2___atom___int_1a7b44df9a39a8647b7895822fbc29de94" kindref="member">atom</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="375"><highlight class="normal">lv2_atom_forge_long(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___long" kindref="compound">LV2_Atom_Long</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(val),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a4ddfa8596ca6067c0eb5203a945e395a" kindref="member">Long</ref><sp/>},<sp/>val<sp/>};</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_primitive(forge,<sp/>&amp;a.<ref refid="struct_l_v2___atom___long_1a130c3e85522ccdafc82ebcaf6b84ee0d" kindref="member">atom</ref>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="383"><highlight class="normal">lv2_atom_forge_float(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___float" kindref="compound">LV2_Atom_Float</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(val),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a00e18b90ae1a1ea6cef061c1572aad5e" kindref="member">Float</ref><sp/>},<sp/>val<sp/>};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_primitive(forge,<sp/>&amp;a.<ref refid="struct_l_v2___atom___float_1abf54a176efbfb5bf29d0e427f0698c7c" kindref="member">atom</ref>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="391"><highlight class="normal">lv2_atom_forge_double(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___double" kindref="compound">LV2_Atom_Double</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(val),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a7f3a264907ebcb9629c0fcab0bbad30f" kindref="member">Double</ref><sp/>},<sp/>val<sp/>};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_primitive(forge,<sp/>&amp;a.<ref refid="struct_l_v2___atom___double_1a95acf11686342f970023e7fb0018f083" kindref="member">atom</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="399"><highlight class="normal">lv2_atom_forge_bool(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___int" kindref="compound">LV2_Atom_Bool</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1aa9edbb6b79c332e24810530fde3797d1" kindref="member">Bool</ref><sp/>},<sp/>val<sp/>?<sp/>1<sp/>:<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_primitive(forge,<sp/>&amp;a.<ref refid="struct_l_v2___atom___int_1a7b44df9a39a8647b7895822fbc29de94" kindref="member">atom</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="407"><highlight class="normal">lv2_atom_forge_urid(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___u_r_i_d" kindref="compound">LV2_Atom_URID</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(id),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ae72229c35e9a57d20de9b17eda8f2d59" kindref="member">URID</ref><sp/>},<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_primitive(forge,<sp/>&amp;a.<ref refid="struct_l_v2___atom___u_r_i_d_1ad38ff3bf680e1cc9c1c71725d2127b1a" kindref="member">atom</ref>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="415"><highlight class="normal">lv2_atom_forge_typed_string(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>str,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___string" kindref="compound">LV2_Atom_String</ref><sp/>a<sp/><sp/><sp/>=<sp/>{<sp/>{<sp/>len<sp/>+<sp/>1,<sp/>type<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/><sp/><sp/><sp/>out<sp/>=<sp/>lv2_atom_forge_raw(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_forge_string_body(forge,<sp/>str,<sp/>len))<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>atom<sp/>=<sp/>lv2_atom_forge_deref(forge,<sp/>out);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>=<sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="434"><highlight class="normal">lv2_atom_forge_string(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>len)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_typed_string(forge,<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ac03dd46bff7d441a84486f1f5a6ce5b7" kindref="member">String</ref>,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="445"><highlight class="normal">lv2_atom_forge_uri(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a5a9fdd6c2606370ad12f24c078ac6585" kindref="member">uri</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>len)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_typed_string(forge,<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a91872b378897e24591c536b80b2ab03a" kindref="member">URI</ref>,<sp/>uri,<sp/>len);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="452"><highlight class="normal">lv2_atom_forge_path(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>len)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_typed_string(forge,<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a85302bd09eaf23908243f4e1f5c09a51" kindref="member">Path</ref>,<sp/>path,<sp/>len);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="459"><highlight class="normal">lv2_atom_forge_literal(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>str,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datatype,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacewaflib_1_1_tools_1_1qt4_1a1410657c327d97e1b283cb08a32121f4" kindref="member">lang</ref>)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___literal" kindref="compound">LV2_Atom_Literal</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___literal" kindref="compound">LV2_Atom_Literal</ref>)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>)<sp/>+<sp/>len<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1adecbead2046bf6421ee2918d376af36a" kindref="member">Literal</ref><sp/>},</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>datatype,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lang<sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/>out<sp/>=<sp/>lv2_atom_forge_raw(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lv2_atom_forge_string_body(forge,<sp/>str,<sp/>len))<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>atom<sp/>=<sp/>lv2_atom_forge_deref(forge,<sp/>out);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>=<sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="484"><highlight class="normal">lv2_atom_forge_vector_head(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_size,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_type)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___vector___body" kindref="compound">LV2_Atom_Vector_Body</ref>),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a27f8ab6881b64f049207749c72910588" kindref="member">Vector</ref><sp/>},</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>child_size,<sp/>child_type<sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_push(</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>frame,<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)));</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="499"><highlight class="normal">lv2_atom_forge_vector(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_size,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_type,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_elems,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>elems)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___vector" kindref="compound">LV2_Atom_Vector</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___vector___body" kindref="compound">LV2_Atom_Vector_Body</ref>)<sp/>+<sp/>n_elems<sp/>*<sp/>child_size),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a27f8ab6881b64f049207749c72910588" kindref="member">Vector</ref><sp/>},</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>child_size,<sp/>child_type<sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_Atom_Forge_Ref<sp/>out<sp/>=<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv2_atom_forge_write(forge,<sp/>elems,<sp/>child_size<sp/>*<sp/>n_elems);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="535"><highlight class="normal">lv2_atom_forge_tuple(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___tuple" kindref="compound">LV2_Atom_Tuple</ref><sp/>a<sp/>=<sp/>{<sp/>{<sp/>0,<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1a74ef1b76c8ddb112647f320d5a6cb431" kindref="member">Tuple</ref><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_push(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>frame,<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)));</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="567"><highlight class="normal">lv2_atom_forge_object(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otype)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1aeb34e038d80078e2d86cf6dfcf81e4ee" kindref="member">Object</ref><sp/>},</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>id,<sp/>otype<sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_push(</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>frame,<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)));</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><ref refid="forge_8h_1a976bd670260944af923aaf658758a2a2" kindref="member">LV2_ATOM_FORGE_DEPRECATED</ref></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="588"><highlight class="normal">lv2_atom_forge_resource(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otype)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>),<sp/>forge-&gt;Resource<sp/>},</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>id,<sp/>otype<sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_push(</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>frame,<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)));</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><ref refid="forge_8h_1a976bd670260944af923aaf658758a2a2" kindref="member">LV2_ATOM_FORGE_DEPRECATED</ref></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="609"><highlight class="normal">lv2_atom_forge_blank(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otype)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>),<sp/>forge-&gt;Blank<sp/>},</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>id,<sp/>otype<sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_push(</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>frame,<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)));</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="628"><highlight class="normal">lv2_atom_forge_key(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref><sp/>a<sp/>=<sp/>{<sp/>key,<sp/>0,<sp/>{<sp/>0,<sp/>0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/>2<sp/>*<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>));</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="642"><highlight class="normal">lv2_atom_forge_property_head(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="urid_8h_1a5ff0630d245539e9f6dca10ff3c40fae" kindref="member">LV2_URID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcontext" kindref="compound">context</ref>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref><sp/>a<sp/>=<sp/>{<sp/>key,<sp/><ref refid="lib_2expat_8h_1afe0934df1732463fe5378d8c8724edc6" kindref="member">context</ref>,<sp/>{<sp/>0,<sp/>0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/>2<sp/>*<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>));</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="654"><highlight class="normal">lv2_atom_forge_sequence_head(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___l_v2___atom___forge___frame" kindref="compound">LV2_Atom_Forge_Frame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit)</highlight></codeline>
<codeline lineno="657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref><sp/>a<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref>),<sp/>forge-&gt;<ref refid="struct_l_v2___atom___forge_1ab7f59a27275a83a6a597a89462b055ee" kindref="member">Sequence</ref><sp/>},</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>unit,<sp/>0<sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_push(</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forge,<sp/>frame,<sp/>lv2_atom_forge_write(forge,<sp/>&amp;a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)));</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="672"><highlight class="normal">lv2_atom_forge_frame_time(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>frames)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_write(forge,<sp/>&amp;frames,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(frames));</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LV2_Atom_Forge_Ref</highlight></codeline>
<codeline lineno="683"><highlight class="normal">lv2_atom_forge_beat_time(<ref refid="struct_l_v2___atom___forge" kindref="compound">LV2_Atom_Forge</ref>*<sp/>forge,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beats)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lv2_atom_forge_write(forge,<sp/>&amp;beats,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(beats));</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>LV2_ATOM_FORGE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h"/>
  </compounddef>
</doxygen>
