<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="alloc_8h" kind="file" language="C++">
    <compoundname>alloc.h</compoundname>
    <includes local="no">limits.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="libflac_2include_2share_2compat_8h" local="yes">share/compat.h</includes>
    <includedby refid="libflac_2src_2flac_2encode_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/encode.c</includedby>
    <includedby refid="foreign__metadata_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c</includedby>
    <includedby refid="src_2flac_2main_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/main.c</includedby>
    <includedby refid="lib_f_l_a_c_2bitwriter_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c</includedby>
    <includedby refid="lib_f_l_a_c_2md5_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/md5.c</includedby>
    <includedby refid="memory_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/memory.c</includedby>
    <includedby refid="metadata__iterators_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c</includedby>
    <includedby refid="lib_f_l_a_c_2metadata__object_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c</includedby>
    <includedby refid="ogg__helper_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/ogg_helper.c</includedby>
    <includedby refid="stream__decoder_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/stream_decoder.c</includedby>
    <includedby refid="stream__encoder_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/stream_encoder.c</includedby>
    <includedby refid="lib_f_l_a_c_09_09_2metadata_8cpp" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC++/metadata.cpp</includedby>
    <includedby refid="operations_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/metaflac/operations.c</includedby>
    <includedby refid="options_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/metaflac/options.c</includedby>
    <includedby refid="libflac_2src_2metaflac_2utils_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/metaflac/utils.c</includedby>
    <includedby refid="tags_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/plugin_common/tags.c</includedby>
    <includedby refid="alloc_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/grabbag/alloc.c</includedby>
    <includedby refid="picture_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/grabbag/picture.c</includedby>
    <includedby refid="share_2utf8_2charset_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c</includedby>
    <includedby refid="libflac_2src_2share_2utf8_2utf8_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/utf8.c</includedby>
    <incdepgraph>
      <node id="6989">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="6990" relation="include">
        </childnode>
        <childnode refid="6991" relation="include">
        </childnode>
        <childnode refid="6992" relation="include">
        </childnode>
      </node>
      <node id="6994">
        <label>stdarg.h</label>
      </node>
      <node id="6986">
        <label>stdlib.h</label>
      </node>
      <node id="6991">
        <label>alloca.h</label>
      </node>
      <node id="6985">
        <label>limits.h</label>
      </node>
      <node id="6990">
        <label>MacTypes.h</label>
      </node>
      <node id="6992">
        <label>string.h</label>
      </node>
      <node id="6993">
        <label>utime.h</label>
      </node>
      <node id="6984">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h</label>
        <link refid="alloc.h"/>
        <childnode refid="6985" relation="include">
        </childnode>
        <childnode refid="6986" relation="include">
        </childnode>
        <childnode refid="6987" relation="include">
        </childnode>
      </node>
      <node id="6988">
        <label>unistd.h</label>
      </node>
      <node id="6987">
        <label>share/compat.h</label>
        <link refid="libflac_2include_2share_2compat_8h"/>
        <childnode refid="6988" relation="include">
        </childnode>
        <childnode refid="6989" relation="include">
        </childnode>
        <childnode refid="6993" relation="include">
        </childnode>
        <childnode refid="6994" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6997">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/foreign_metadata.c</label>
        <link refid="foreign__metadata_8c"/>
      </node>
      <node id="7008">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/metaflac/operations.c</label>
        <link refid="operations_8c"/>
      </node>
      <node id="6998">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/main.c</label>
        <link refid="src_2flac_2main_8c"/>
      </node>
      <node id="7003">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_object.c</label>
        <link refid="lib_f_l_a_c_2metadata__object_8c"/>
      </node>
      <node id="7014">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/charset.c</label>
        <link refid="share_2utf8_2charset_8c"/>
      </node>
      <node id="7010">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/metaflac/utils.c</label>
        <link refid="libflac_2src_2metaflac_2utils_8c"/>
      </node>
      <node id="7012">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/grabbag/alloc.c</label>
        <link refid="alloc_8c"/>
      </node>
      <node id="7001">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/memory.c</label>
        <link refid="memory_8c"/>
      </node>
      <node id="7004">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/ogg_helper.c</label>
        <link refid="ogg__helper_8c"/>
      </node>
      <node id="7000">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/md5.c</label>
        <link refid="lib_f_l_a_c_2md5_8c"/>
      </node>
      <node id="6995">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h</label>
        <link refid="alloc.h"/>
        <childnode refid="6996" relation="include">
        </childnode>
        <childnode refid="6997" relation="include">
        </childnode>
        <childnode refid="6998" relation="include">
        </childnode>
        <childnode refid="6999" relation="include">
        </childnode>
        <childnode refid="7000" relation="include">
        </childnode>
        <childnode refid="7001" relation="include">
        </childnode>
        <childnode refid="7002" relation="include">
        </childnode>
        <childnode refid="7003" relation="include">
        </childnode>
        <childnode refid="7004" relation="include">
        </childnode>
        <childnode refid="7005" relation="include">
        </childnode>
        <childnode refid="7006" relation="include">
        </childnode>
        <childnode refid="7007" relation="include">
        </childnode>
        <childnode refid="7008" relation="include">
        </childnode>
        <childnode refid="7009" relation="include">
        </childnode>
        <childnode refid="7010" relation="include">
        </childnode>
        <childnode refid="7011" relation="include">
        </childnode>
        <childnode refid="7012" relation="include">
        </childnode>
        <childnode refid="7013" relation="include">
        </childnode>
        <childnode refid="7014" relation="include">
        </childnode>
        <childnode refid="7015" relation="include">
        </childnode>
      </node>
      <node id="7015">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/utf8/utf8.c</label>
        <link refid="libflac_2src_2share_2utf8_2utf8_8c"/>
      </node>
      <node id="7007">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC++/metadata.cpp</label>
        <link refid="lib_f_l_a_c_09_09_2metadata_8cpp"/>
      </node>
      <node id="7011">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/plugin_common/tags.c</label>
        <link refid="tags_8c"/>
      </node>
      <node id="6999">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c</label>
        <link refid="lib_f_l_a_c_2bitwriter_8c"/>
      </node>
      <node id="7009">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/metaflac/options.c</label>
        <link refid="options_8c"/>
      </node>
      <node id="7013">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/grabbag/picture.c</label>
        <link refid="picture_8c"/>
      </node>
      <node id="7005">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/stream_decoder.c</label>
        <link refid="stream__decoder_8c"/>
      </node>
      <node id="7002">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c</label>
        <link refid="metadata__iterators_8c"/>
      </node>
      <node id="6996">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/encode.c</label>
        <link refid="libflac_2src_2flac_2encode_8c"/>
      </node>
      <node id="7006">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/stream_encoder.c</label>
        <link refid="stream__encoder_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" prot="public" static="no">
        <name>SIZE_MAX</name>
        <initializer>SIZE_T_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="63" column="22" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="alloc_8h_1ae18935803119d3d7baf044726e834648" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_</definition>
        <argsstring>(size_t size)</argsstring>
        <name>safe_malloc_</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1aecf0c0bcae45c27878918c0bcf9a5237" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_calloc_</definition>
        <argsstring>(size_t nmemb, size_t size)</argsstring>
        <name>safe_calloc_</name>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="77" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1a3eeb4db835d1376ea6cd1f53b14405cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_add_2op_</definition>
        <argsstring>(size_t size1, size_t size2)</argsstring>
        <name>safe_malloc_add_2op_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="86" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1a77d52b33abace9607e978e23b755f4aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_add_3op_</definition>
        <argsstring>(size_t size1, size_t size2, size_t size3)</argsstring>
        <name>safe_malloc_add_3op_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="94" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1a750d40bf07a202fd1fd91357475fb377" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_add_4op_</definition>
        <argsstring>(size_t size1, size_t size2, size_t size3, size_t size4)</argsstring>
        <name>safe_malloc_add_4op_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="105" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1aa11d1f79cba19e57d23d353baec34f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* safe_malloc_mul_2op_</definition>
        <argsstring>(size_t size1, size_t size2)</argsstring>
        <name>safe_malloc_mul_2op_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="119" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/share/grabbag/alloc.c" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1a1481eb01a3f1da7a7caca9f316e5f946" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_mul_3op_</definition>
        <argsstring>(size_t size1, size_t size2, size_t size3)</argsstring>
        <name>safe_malloc_mul_3op_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="121" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="121" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1aa45439502f8816de0c2a5f5260c49d60" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_mul2add_</definition>
        <argsstring>(size_t size1, size_t size2, size_t size3)</argsstring>
        <name>safe_malloc_mul2add_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="134" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="134" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1ac42c89b540be38cd1f7bf536a014601a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_malloc_muladd2_</definition>
        <argsstring>(size_t size1, size_t size2, size_t size3)</argsstring>
        <name>safe_malloc_muladd2_</name>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="144" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="144" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1ac17393658f3e3fd1a7152a3dbab4f8c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_realloc_add_2op_</definition>
        <argsstring>(void *ptr, size_t size1, size_t size2)</argsstring>
        <name>safe_realloc_add_2op_</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="156" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1afd64522990b26544ecd3039e315341fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_realloc_add_3op_</definition>
        <argsstring>(void *ptr, size_t size1, size_t size2, size_t size3)</argsstring>
        <name>safe_realloc_add_3op_</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="164" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="164" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1a841fe7b5ad03a76fe89a82fb22d9fa86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_realloc_add_4op_</definition>
        <argsstring>(void *ptr, size_t size1, size_t size2, size_t size3, size_t size4)</argsstring>
        <name>safe_realloc_add_4op_</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="175" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="175" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1a8bb2d8179389762266dc1124b429d8c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_realloc_mul_2op_</definition>
        <argsstring>(void *ptr, size_t size1, size_t size2)</argsstring>
        <name>safe_realloc_mul_2op_</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="189" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="alloc_8h_1ae77524225e608386a43e382ffd845ae3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* safe_realloc_muladd2_</definition>
        <argsstring>(void *ptr, size_t size1, size_t size2, size_t size3)</argsstring>
        <name>safe_realloc_muladd2_</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" line="199" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h" bodystart="199" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>alloc<sp/>-<sp/>Convenience<sp/>routines<sp/>for<sp/>safely<sp/>allocating<sp/>memory</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2007-2009<sp/><sp/>Josh<sp/>Coalson</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/><sp/>Xiph.Org<sp/>Foundation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Xiph.org<sp/>Foundation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>FOUNDATION<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__SHARE__ALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__SHARE__ALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>for<sp/>c++<sp/>you<sp/>may<sp/>have<sp/>to<sp/>#define<sp/>__STDC_LIMIT_MACROS<sp/>1<sp/>real<sp/>early</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>before<sp/>#including<sp/>this<sp/>file,<sp/><sp/>otherwise<sp/>SIZE_MAX<sp/>might<sp/>not<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>SIZE_MAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_STDINT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>SIZE_MAX<sp/>in<sp/>case<sp/>limits.h<sp/>didn&apos;t<sp/>get<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>size_t,<sp/>malloc(),<sp/>etc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2include_2share_2compat_8h" kindref="compound">share/compat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIZE_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>SIZE_T_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SIZE_T_MAX<sp/>0xffffffffffffffffui64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>SIZE_T_MAX<sp/>0xffffffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>SIZE_MAX<sp/>SIZE_T_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>avoid<sp/>malloc()ing<sp/>0<sp/>bytes,<sp/>see:</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>https://www.securecoding.cert.org/confluence/display/seccode/MEM04-A.+Do+not+make+assumptions+about+the+result+of+allocating+0+bytes?focusedCommentId=5407003</highlight></codeline>
<codeline lineno="68"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>malloc(0)<sp/>is<sp/>undefined;<sp/>FLAC<sp/>src<sp/>convention<sp/>is<sp/>to<sp/>always<sp/>allocate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size++;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_calloc_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref><sp/>||<sp/>!size)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(1);<sp/></highlight><highlight class="comment">/*<sp/>malloc(0)<sp/>is<sp/>undefined;<sp/>FLAC<sp/>src<sp/>convention<sp/>is<sp/>to<sp/>always<sp/>allocate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calloc(<ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*@@@@<sp/>there&apos;s<sp/>probably<sp/>a<sp/>better<sp/>way<sp/>to<sp/>prevent<sp/>overflows<sp/>when<sp/>allocating<sp/>untrusted<sp/>sums<sp/>but<sp/>this<sp/>works<sp/>for<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_add_2op_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safe_malloc_(size2);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_add_3op_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>size3<sp/>+=<sp/>size2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3<sp/>&lt;<sp/>size2)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safe_malloc_(size3);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_add_4op_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size4)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>size3<sp/>+=<sp/>size2;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3<sp/>&lt;<sp/>size2)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>size4<sp/>+=<sp/>size3;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size4<sp/>&lt;<sp/>size3)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safe_malloc_(size4);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="alloc_8h_1aa11d1f79cba19e57d23d353baec34f04" kindref="member">safe_malloc_mul_2op_</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2)<sp/>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_mul_3op_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size1<sp/>||<sp/>!size2<sp/>||<sp/>!size3)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(1);<sp/></highlight><highlight class="comment">/*<sp/>malloc(0)<sp/>is<sp/>undefined;<sp/>FLAC<sp/>src<sp/>convention<sp/>is<sp/>to<sp/>always<sp/>allocate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size1<sp/>&gt;<sp/><ref refid="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/>size2)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>size1<sp/>*=<sp/>size2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size1<sp/>&gt;<sp/><ref refid="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/>size3)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size1*size3);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>size1*size2<sp/>+<sp/>size3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_mul2add_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size1<sp/>||<sp/>!size2)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safe_malloc_(size3);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size1<sp/>&gt;<sp/><ref refid="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/>size2)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safe_malloc_add_2op_(size1*size2,<sp/>size3);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>size1<sp/>*<sp/>(size2<sp/>+<sp/>size3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_malloc_muladd2_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size1<sp/>||<sp/>(!size2<sp/>&amp;&amp;<sp/>!size3))</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(1);<sp/></highlight><highlight class="comment">/*<sp/>malloc(0)<sp/>is<sp/>undefined;<sp/>FLAC<sp/>src<sp/>convention<sp/>is<sp/>to<sp/>always<sp/>allocate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size3;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size3)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size1<sp/>&gt;<sp/><ref refid="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/>size2)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size1*size2);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_realloc_add_2op_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size1;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>size2);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_realloc_add_3op_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size1;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>size3<sp/>+=<sp/>size2;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3<sp/>&lt;<sp/>size2)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>size3);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_realloc_add_4op_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size4)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>size3<sp/>+=<sp/>size2;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3<sp/>&lt;<sp/>size2)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>size4<sp/>+=<sp/>size3;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size4<sp/>&lt;<sp/>size3)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>size4);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_realloc_mul_2op_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size1<sp/>||<sp/>!size2)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>preserve<sp/>POSIX<sp/>realloc(ptr,<sp/>0)<sp/>semantics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size1<sp/>&gt;<sp/><ref refid="alloc_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/>size2)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>size1*size2);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>size1<sp/>*<sp/>(size2<sp/>+<sp/>size3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*safe_realloc_muladd2_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size3)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size1<sp/>||<sp/>(!size2<sp/>&amp;&amp;<sp/>!size3))</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>preserve<sp/>POSIX<sp/>realloc(ptr,<sp/>0)<sp/>semantics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>size2<sp/>+=<sp/>size3;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size2<sp/>&lt;<sp/>size3)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safe_realloc_mul_2op_(ptr,<sp/>size1,<sp/>size2);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/share/alloc.h"/>
  </compounddef>
</doxygen>
