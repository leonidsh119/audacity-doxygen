<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_image_manipulation_8cpp" kind="file" language="C++">
    <compoundname>ImageManipulation.cpp</compoundname>
    <includes local="no">wx/image.h</includes>
    <includes refid="_image_manipulation_8h" local="yes">ImageManipulation.h</includes>
    <incdepgraph>
      <node id="46478">
        <label>ImageManipulation.h</label>
        <link refid="_image_manipulation_8h"/>
        <childnode refid="46479" relation="include">
        </childnode>
        <childnode refid="46480" relation="include">
        </childnode>
        <childnode refid="46481" relation="include">
        </childnode>
      </node>
      <node id="46485">
        <label>wx/font.h</label>
      </node>
      <node id="46477">
        <label>wx/image.h</label>
      </node>
      <node id="46479">
        <label>wx/defs.h</label>
      </node>
      <node id="46480">
        <label>wx/colour.h</label>
      </node>
      <node id="46482">
        <label>Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="46484">
        <label>wx/dynarray.h</label>
      </node>
      <node id="46481">
        <label>Theme.h</label>
        <link refid="_theme_8h"/>
        <childnode refid="46482" relation="include">
        </childnode>
        <childnode refid="46483" relation="include">
        </childnode>
        <childnode refid="46480" relation="include">
        </childnode>
        <childnode refid="46479" relation="include">
        </childnode>
        <childnode refid="46484" relation="include">
        </childnode>
        <childnode refid="46485" relation="include">
        </childnode>
        <childnode refid="46477" relation="include">
        </childnode>
      </node>
      <node id="46476">
        <label>C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp</label>
        <link refid="ImageManipulation.cpp"/>
        <childnode refid="46477" relation="include">
        </childnode>
        <childnode refid="46478" relation="include">
        </childnode>
      </node>
      <node id="46483">
        <label>wx/bitmap.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_image_manipulation_8cpp_1aa6bd083eef3ee572d75ca3daf219bce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* ChangeImageColour</definition>
        <argsstring>(wxImage *srcImage, wxColour &amp;dstColour)</argsstring>
        <name>ChangeImageColour</name>
        <param>
          <type>wxImage *</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>wxColour &amp;</type>
          <declname>dstColour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This looks at the first pixel in the image, and shifts the entire image by the vector difference between that pixel and the dstColour. For better control, use ChangeImageColour(wxImage, wxColour*, wxColour*) below </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="33" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1a793a5acd8cc19e96b3a4d3a2b5a2f8a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* ChangeImageColour</definition>
        <argsstring>(wxImage *srcImage, wxColour &amp;srcColour, wxColour &amp;dstColour)</argsstring>
        <name>ChangeImageColour</name>
        <param>
          <type>wxImage *</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>wxColour &amp;</type>
          <declname>srcColour</declname>
        </param>
        <param>
          <type>wxColour &amp;</type>
          <declname>dstColour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This will explicitly shift the image color from srcColour to dstColour. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="43" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="43" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1ac23a65457a5125d8da5efc82d9184ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* OverlayImage</definition>
        <argsstring>(wxImage *background, wxImage *foreground, wxImage *mask, int xoff, int yoff)</argsstring>
        <name>OverlayImage</name>
        <param>
          <type>wxImage *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>wxImage *</type>
          <declname>foreground</declname>
        </param>
        <param>
          <type>wxImage *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>xoff</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>yoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes a background image, foreground image, and mask (i.e. the alpha channel for the foreground), and returns an NEW image where the foreground has been overlaid onto the background using alpha-blending, at location (xoff, yoff). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="101" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="101" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1a3a5f7b2ccc4bd2f2b880a6ed4c76deb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* OverlayImage</definition>
        <argsstring>(teBmps eBack, teBmps eForeground, int xoff, int yoff)</argsstring>
        <name>OverlayImage</name>
        <param>
          <type><ref refid="_theme_8h_1a2beab2c3ca8cfcbb2cc0a1e27138dcf4" kindref="member">teBmps</ref></type>
          <declname>eBack</declname>
        </param>
        <param>
          <type><ref refid="_theme_8h_1a2beab2c3ca8cfcbb2cc0a1e27138dcf4" kindref="member">teBmps</ref></type>
          <declname>eForeground</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>xoff</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>yoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes a background image, foreground image, and mask (i.e. the alpha channel for the foreground), and returns an NEW image where the foreground has been overlaid onto the background using alpha-blending, at location (xoff, yoff). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="167" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="167" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1ac6edd2596a2c73cc989d68a4591a7418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* CreateBackground</definition>
        <argsstring>(int width, int height, wxColour colour)</argsstring>
        <name>CreateBackground</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>wxColour</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="237" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="237" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1abc858b485f59c22ee5754f7450200692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* CreateAquaBackground</definition>
        <argsstring>(int width, int height, int offset)</argsstring>
        <name>CreateAquaBackground</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="260" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="260" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1a160922780305a1c92c475c37d677b441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage *</type>
        <definition>wxImage* CreateSysBackground</definition>
        <argsstring>(int width, int height, int WXUNUSED(offset), wxColour colour)</argsstring>
        <name>CreateSysBackground</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> </type>
          <declname>WXUNUSED</declname>
          <array>offset</array>
        </param>
        <param>
          <type>wxColour</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="280" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="280" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1ac0eaa65f6cfd97f7b7eac9ecc5732ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PasteSubImage</definition>
        <argsstring>(wxImage *background, wxImage *foreground, int xoff, int yoff)</argsstring>
        <name>PasteSubImage</name>
        <param>
          <type>wxImage *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>wxImage *</type>
          <declname>foreground</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>xoff</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>yoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pastes one image into another including the alpha channel. Differs from OverlayImage in that: Happens in place to existing background image. Pastes image on top; no blending with existing background is done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="294" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="294" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="_image_manipulation_8cpp_1a751be86b4facbf3a6fc095ab65ff1572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxImage</type>
        <definition>wxImage GetSubImageWithAlpha</definition>
        <argsstring>(const wxImage &amp;Src, const wxRect &amp;rect)</argsstring>
        <name>GetSubImageWithAlpha</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxImage &amp;</type>
          <declname>Src</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a rectangle from within another image, INCLUDING the alpha channel <xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>in wxWidgets, wxImage::GetSubImage should do this itself. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" line="351" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp" bodystart="351" bodyend="409"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Provides Image Manipulation functions.</para><para>wxWidgets misses some important functions involving cutting and pasting bitmaps, and (in version 2.6.1) is patchy in support of alpha channel. This collection of functions fills that gap. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>ImageManipulation.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>James<sp/>Crook</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>wxWidgets<sp/>license<sp/>(Dominic<sp/>to<sp/>confirm).</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">********************************************************************/</highlight><highlight class="comment">/*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_image_manipulation_8h" kindref="compound">ImageManipulation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="_image_manipulation_8h_1aa6bd083eef3ee572d75ca3daf219bce0" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1aa6bd083eef3ee572d75ca3daf219bce0" kindref="member">ChangeImageColour</ref>(wxImage<sp/>*<sp/>srcImage,<sp/>wxColour<sp/>&amp;<sp/>dstColour)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src<sp/>=<sp/>srcImage-&gt;GetData();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>wxColour<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>c.Set(src[0],<sp/>src[1],<sp/>src[2]);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_image_manipulation_8cpp_1aa6bd083eef3ee572d75ca3daf219bce0" kindref="member">ChangeImageColour</ref>(srcImage,<sp/>c,<sp/>dstColour);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="_image_manipulation_8h_1a793a5acd8cc19e96b3a4d3a2b5a2f8a4" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1aa6bd083eef3ee572d75ca3daf219bce0" kindref="member">ChangeImageColour</ref>(wxImage<sp/>*<sp/>srcImage,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxColour<sp/>&amp;<sp/>srcColour,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxColour<sp/>&amp;<sp/>dstColour)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>takes<sp/>a<sp/>source<sp/>image,<sp/>which<sp/>it<sp/>assumes<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>grayscale,<sp/>and<sp/>smoothly<sp/>changes<sp/>the<sp/>overall<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>specified<sp/>color,<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NEW<sp/>image.<sp/><sp/>This<sp/>works<sp/>well<sp/>for<sp/>grayscale<sp/>3D<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Audacity<sp/>uses<sp/>this<sp/>routines<sp/>to<sp/>make<sp/>the<sp/>buttons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(skip-start,<sp/>play,<sp/>stop,<sp/>record,<sp/>skip-end)<sp/>adapt<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>color<sp/>scheme<sp/>of<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src<sp/>=<sp/>srcImage-&gt;GetData();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>srcImage-&gt;GetWidth();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>srcImage-&gt;GetHeight();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>*<sp/>dstImage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImage(width,<sp/>height);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>dstImage-&gt;GetData();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>source<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srcVal[3],<sp/>srcOpp[3];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>srcVal[0]<sp/>=<sp/>srcColour.Red();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>srcVal[1]<sp/>=<sp/>srcColour.Green();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>srcVal[2]<sp/>=<sp/>srcColour.Blue();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dstVal[3],<sp/>dstOpp[3];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>dstVal[0]<sp/>=<sp/>dstColour.Red();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>dstVal[1]<sp/>=<sp/>dstColour.Green();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>dstVal[2]<sp/>=<sp/>dstColour.Blue();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcOpp[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>256<sp/>-<sp/>srcVal[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];<sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>zero!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstOpp[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>255<sp/>-<sp/>dstVal[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>width<sp/>*<sp/>height<sp/>*<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>*src;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;=<sp/>srcVal[c])</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dst++<sp/>=<sp/>dstVal[<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>+<sp/>dstOpp[<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>*<sp/>(s<sp/>-<sp/>srcVal[<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>])<sp/>/<sp/>srcOpp[c];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dst++<sp/>=<sp/>dstVal[<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>*<sp/>s<sp/>/<sp/>srcVal[<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src++;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(c<sp/>+<sp/>1)<sp/>%<sp/>3;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dstImage;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="_image_manipulation_8h_1ac23a65457a5125d8da5efc82d9184ebc" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1ac23a65457a5125d8da5efc82d9184ebc" kindref="member">OverlayImage</ref>(wxImage<sp/>*<sp/>background,<sp/>wxImage<sp/>*<sp/>foreground,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxImage<sp/>*<sp/><ref refid="structmask" kindref="compound">mask</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xoff,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yoff)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bg<sp/>=<sp/>background-&gt;GetData();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fg<sp/>=<sp/>foreground-&gt;GetData();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mk<sp/>=<sp/>mask-&gt;GetData();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgWidth<sp/>=<sp/>background-&gt;GetWidth();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgHeight<sp/>=<sp/>background-&gt;GetHeight();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fgWidth<sp/>=<sp/>foreground-&gt;GetWidth();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fgHeight<sp/>=<sp/>foreground-&gt;GetHeight();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mkWidth<sp/>=<sp/>mask-&gt;GetWidth();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mkHeight<sp/>=<sp/>mask-&gt;GetHeight();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Now,<sp/>determine<sp/>the<sp/>dimensions<sp/>of<sp/>the<sp/>images<sp/>to<sp/>be<sp/>masked<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//on<sp/>top<sp/>of<sp/>the<sp/>background.<sp/><sp/>This<sp/>should<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>area<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//smaller<sp/>of<sp/>the<sp/>foreground<sp/>and<sp/>the<sp/>mask,<sp/>as<sp/>long<sp/>as<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//within<sp/>the<sp/>area<sp/>of<sp/>the<sp/>background,<sp/>given<sp/>the<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Make<sp/>sure<sp/>the<sp/>foreground<sp/>size<sp/>is<sp/>no<sp/>bigger<sp/>than<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wCutoff<sp/>=<sp/>(fgWidth<sp/>&lt;<sp/>mkWidth)<sp/>?<sp/>fgWidth<sp/>:<sp/>mkWidth;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hCutoff<sp/>=<sp/>(fgHeight<sp/>&lt;<sp/>mkHeight)<sp/>?<sp/>fgHeight<sp/>:<sp/>mkHeight;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>masked<sp/>foreground<sp/>+<sp/>offset<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>background,<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>only<sp/>occur<sp/>within<sp/>these<sp/>bounds<sp/>of<sp/>the<sp/>foreground<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>wCutoff<sp/>=<sp/>(bgWidth<sp/>-<sp/>xoff<sp/>&gt;<sp/>wCutoff)<sp/>?<sp/>wCutoff<sp/>:<sp/>bgWidth<sp/>-<sp/>xoff;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/>hCutoff<sp/>=<sp/>(bgHeight<sp/>-<sp/>yoff<sp/>&gt;<sp/>hCutoff)<sp/>?<sp/>hCutoff<sp/>:<sp/>bgHeight<sp/>-<sp/>yoff;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Make<sp/>a<sp/>NEW<sp/>image<sp/>the<sp/>size<sp/>of<sp/>the<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>*<sp/>dstImage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImage(bgWidth,<sp/>bgHeight);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>dstImage-&gt;GetData();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>memcpy(dst,<sp/>bg,<sp/>bgWidth<sp/>*<sp/>bgHeight<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>the<sp/>foreground<sp/>image<sp/>bit<sp/>by<sp/>bit<sp/>and<sp/>mask<sp/>it<sp/>on<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>background,<sp/>at<sp/>an<sp/>offset<sp/>of<sp/>xoff,yoff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BUT...Don&apos;t<sp/>go<sp/>beyond<sp/>the<sp/>size<sp/>of<sp/>the<sp/>background<sp/>image,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>foreground<sp/>image,<sp/>or<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/>y;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>hCutoff;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bkp<sp/>=<sp/>bg<sp/>+<sp/>3<sp/>*<sp/>((y<sp/>+<sp/>yoff)<sp/>*<sp/>bgWidth<sp/>+<sp/>xoff);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dstp<sp/>=<sp/>dst<sp/>+<sp/>3<sp/>*<sp/>((y<sp/>+<sp/>yoff)<sp/>*<sp/>bgWidth<sp/>+<sp/>xoff);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>wCutoff;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>mk[3<sp/>*<sp/>(y<sp/>*<sp/>mkWidth<sp/>+<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opp<sp/>=<sp/>255<sp/>-<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref><sp/>=<sp/>0;<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref><sp/>&lt;<sp/>3;<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>++)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstp[x<sp/>*<sp/>3<sp/>+<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>=</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((bkp[x<sp/>*<sp/>3<sp/>+<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>*<sp/>opp)<sp/>+</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fg[3<sp/>*<sp/>(y<sp/>*<sp/>fgWidth<sp/>+<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)<sp/>+<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>*<sp/>value))<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dstImage;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="_image_manipulation_8h_1a3a5f7b2ccc4bd2f2b880a6ed4c76deb3" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1ac23a65457a5125d8da5efc82d9184ebc" kindref="member">OverlayImage</ref>(<ref refid="_theme_8h_1a2beab2c3ca8cfcbb2cc0a1e27138dcf4" kindref="member">teBmps</ref><sp/>eBack,<sp/><ref refid="_theme_8h_1a2beab2c3ca8cfcbb2cc0a1e27138dcf4" kindref="member">teBmps</ref><sp/>eForeground,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xoff,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yoff)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>imgBack(<ref refid="_theme_8cpp_1a778dd1fa4ed7e54e48ec7b65aba2363e" kindref="member">theTheme</ref>.<ref refid="class_theme_base_1a2243773f651603c2855bd3562801d680" kindref="member">Image</ref>(<sp/>eBack<sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>imgFore(<ref refid="_theme_8cpp_1a778dd1fa4ed7e54e48ec7b65aba2363e" kindref="member">theTheme</ref>.<ref refid="class_theme_base_1a2243773f651603c2855bd3562801d680" kindref="member">Image</ref>(<sp/>eForeground<sp/>));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TMP:<sp/>dmazzoni<sp/>-<sp/>just<sp/>so<sp/>the<sp/>code<sp/>runs<sp/>even<sp/>though<sp/>not<sp/>all<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>images<sp/>have<sp/>transparency...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!imgFore.HasAlpha())</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImage(imgBack);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<sp/>imgFore.HasAlpha()<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bg<sp/>=<sp/>imgBack.GetData();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fg<sp/>=<sp/>imgFore.GetData();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mk<sp/>=<sp/>imgFore.GetAlpha();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgWidth<sp/>=<sp/>imgBack.GetWidth();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgHeight<sp/>=<sp/>imgBack.GetHeight();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fgWidth<sp/>=<sp/>imgFore.GetWidth();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fgHeight<sp/>=<sp/>imgFore.GetHeight();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Now,<sp/>determine<sp/>the<sp/>dimensions<sp/>of<sp/>the<sp/>images<sp/>to<sp/>be<sp/>masked<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//on<sp/>top<sp/>of<sp/>the<sp/>background.<sp/><sp/>This<sp/>should<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>area<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//smaller<sp/>of<sp/>the<sp/>foreground<sp/>and<sp/>the<sp/>mask,<sp/>as<sp/>long<sp/>as<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//within<sp/>the<sp/>area<sp/>of<sp/>the<sp/>background,<sp/>given<sp/>the<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Make<sp/>sure<sp/>the<sp/>foreground<sp/>size<sp/>is<sp/>no<sp/>bigger<sp/>than<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wCutoff<sp/>=<sp/>fgWidth;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hCutoff<sp/>=<sp/>fgHeight;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>masked<sp/>foreground<sp/>+<sp/>offset<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>background,<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>only<sp/>occur<sp/>within<sp/>these<sp/>bounds<sp/>of<sp/>the<sp/>foreground<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>wCutoff<sp/>=<sp/>(bgWidth<sp/>-<sp/>xoff<sp/>&gt;<sp/>wCutoff)<sp/>?<sp/>wCutoff<sp/>:<sp/>bgWidth<sp/>-<sp/>xoff;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>hCutoff<sp/>=<sp/>(bgHeight<sp/>-<sp/>yoff<sp/>&gt;<sp/>hCutoff)<sp/>?<sp/>hCutoff<sp/>:<sp/>bgHeight<sp/>-<sp/>yoff;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Make<sp/>a<sp/>NEW<sp/>image<sp/>the<sp/>size<sp/>of<sp/>the<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>*<sp/>dstImage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImage(bgWidth,<sp/>bgHeight);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>dstImage-&gt;GetData();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/>memcpy(dst,<sp/>bg,<sp/>bgWidth<sp/>*<sp/>bgHeight<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>the<sp/>foreground<sp/>image<sp/>bit<sp/>by<sp/>bit<sp/>and<sp/>mask<sp/>it<sp/>on<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>background,<sp/>at<sp/>an<sp/>offset<sp/>of<sp/>xoff,yoff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BUT...Don&apos;t<sp/>go<sp/>beyond<sp/>the<sp/>size<sp/>of<sp/>the<sp/>background<sp/>image,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>foreground<sp/>image,<sp/>or<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/>y;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>hCutoff;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bkp<sp/>=<sp/>bg<sp/>+<sp/>3<sp/>*<sp/>((y<sp/>+<sp/>yoff)<sp/>*<sp/>bgWidth<sp/>+<sp/>xoff);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dstp<sp/>=<sp/>dst<sp/>+<sp/>3<sp/>*<sp/>((y<sp/>+<sp/>yoff)<sp/>*<sp/>bgWidth<sp/>+<sp/>xoff);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>wCutoff;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>mk[(y<sp/>*<sp/>fgWidth<sp/>+<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)];</highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>multiply<sp/>by<sp/>3...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opp<sp/>=<sp/>255<sp/>-<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref><sp/>=<sp/>0;<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref><sp/>&lt;<sp/>3;<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>++)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstp[x<sp/>*<sp/>3<sp/>+<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>=</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((bkp[x<sp/>*<sp/>3<sp/>+<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>*<sp/>opp)<sp/>+</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fg[3<sp/>*<sp/>(y<sp/>*<sp/>fgWidth<sp/>+<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)<sp/>+<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>*<sp/>value))<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dstImage;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>image<sp/>with<sp/>a<sp/>solid<sp/>background<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="_image_manipulation_8h_1ac6edd2596a2c73cc989d68a4591a7418" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1ac6edd2596a2c73cc989d68a4591a7418" kindref="member">CreateBackground</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>wxColour<sp/>colour)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>*<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImage(width,<sp/>height);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srcVal[3];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/>srcVal[0]<sp/>=<sp/>colour.Red();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/>srcVal[1]<sp/>=<sp/>colour.Green();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/>srcVal[2]<sp/>=<sp/>colour.Blue();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/>ip<sp/>=<sp/>i-&gt;GetData();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x=0;<sp/>x&lt;width*height;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ip++<sp/>=<sp/>srcVal[0];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ip++<sp/>=<sp/>srcVal[1];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ip++<sp/>=<sp/>srcVal[2];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>image<sp/>with<sp/>the<sp/>Mac<sp/>OS<sp/>X<sp/>Aqua<sp/>stripes,<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="_image_manipulation_8h_1abc858b485f59c22ee5754f7450200692" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1abc858b485f59c22ee5754f7450200692" kindref="member">CreateAquaBackground</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>*image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImage(width,<sp/>height);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip<sp/>=<sp/>image-&gt;GetData();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>val[4]<sp/>=<sp/>{231,<sp/>239,<sp/>255,<sp/>239};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/>y;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y=0;<sp/>y&lt;height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>val[(y+<ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)%4];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x=0;<sp/>x&lt;width*3;<sp/>x++)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ip++<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_AQUA_THEME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1a160922780305a1c92c475c37d677b441" kindref="member">CreateSysBackground</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/>wxColour<sp/>colour)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="_image_manipulation_8cpp_1a160922780305a1c92c475c37d677b441" refkind="member"><highlight class="normal">wxImage<sp/>*<ref refid="_image_manipulation_8cpp_1a160922780305a1c92c475c37d677b441" kindref="member">CreateSysBackground</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WXUNUSED(<ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>),<sp/>wxColour<sp/>colour)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>USE_AQUA_THEME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_image_manipulation_8cpp_1abc858b485f59c22ee5754f7450200692" kindref="member">CreateAquaBackground</ref>(width,<sp/>height,<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_image_manipulation_8cpp_1ac6edd2596a2c73cc989d68a4591a7418" kindref="member">CreateBackground</ref>(width,<sp/>height,<sp/>colour);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="_image_manipulation_8h_1a12aeac7ebea02381c5e1252a14b2b3a7" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_image_manipulation_8cpp_1ac0eaa65f6cfd97f7b7eac9ecc5732ad6" kindref="member">PasteSubImage</ref>(<sp/>wxImage<sp/>*<sp/>background,<sp/>wxImage<sp/>*<sp/>foreground,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xoff,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yoff<sp/>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bg<sp/>=<sp/>background-&gt;GetData();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fg<sp/>=<sp/>foreground-&gt;GetData();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bgAlpha<sp/>=<sp/>background-&gt;HasAlpha()<sp/>?<sp/>background-&gt;GetAlpha()<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fgAlpha<sp/>=<sp/>foreground-&gt;HasAlpha()<sp/>?<sp/>foreground-&gt;GetAlpha()<sp/>:<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>testing...<sp/>Set<sp/>as<sp/>if<sp/>no<sp/>alpha<sp/>in<sp/>foreground....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fgAlpha<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgWidth<sp/>=<sp/>background-&gt;GetWidth();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgHeight<sp/>=<sp/>background-&gt;GetHeight();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fgWidth<sp/>=<sp/>foreground-&gt;GetWidth();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fgHeight<sp/>=<sp/>foreground-&gt;GetHeight();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wCutoff<sp/>=<sp/>fgWidth;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hCutoff<sp/>=<sp/>fgHeight;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>masked<sp/>foreground<sp/>+<sp/>offset<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>background,<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>only<sp/>occur<sp/>within<sp/>these<sp/>bounds<sp/>of<sp/>the<sp/>foreground<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>wCutoff<sp/>=<sp/>(bgWidth<sp/>-<sp/>xoff<sp/>&gt;<sp/>wCutoff)<sp/>?<sp/>wCutoff<sp/>:<sp/>bgWidth<sp/>-<sp/>xoff;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>hCutoff<sp/>=<sp/>(bgHeight<sp/>-<sp/>yoff<sp/>&gt;<sp/>hCutoff)<sp/>?<sp/>hCutoff<sp/>:<sp/>bgHeight<sp/>-<sp/>yoff;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>the<sp/>foreground<sp/>image<sp/>bit<sp/>by<sp/>bit<sp/>and<sp/>place<sp/>it<sp/>on<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>background,<sp/>at<sp/>an<sp/>offset<sp/>of<sp/>xoff,yoff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>go<sp/>beyond<sp/>the<sp/>size<sp/>of<sp/>the<sp/>background<sp/>image,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>foreground<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bkp;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fgp;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bgAlphap;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fgAlphap;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>hCutoff;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RGB<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bkp<sp/>=<sp/>bg<sp/>+<sp/>3<sp/>*<sp/>((y<sp/>+<sp/>yoff)<sp/>*<sp/>bgWidth<sp/>+<sp/>xoff);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fgp<sp/>=<sp/>fg<sp/>+<sp/>3<sp/>*<sp/>(<sp/>y<sp/>*<sp/>fgWidth);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>bkp,<sp/>fgp,<sp/>3<sp/>*<sp/>wCutoff<sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alpha<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>bgAlpha<sp/>)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bgAlphap<sp/>=<sp/>bgAlpha<sp/>+<sp/>((y+yoff)<sp/>*<sp/>bgWidth<sp/>+<sp/>xoff<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fgAlpha<sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fgAlphap<sp/>=<sp/>fgAlpha<sp/>+<sp/>(y<sp/>*<sp/>fgWidth<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>bgAlphap,<sp/>fgAlphap,<sp/>wCutoff<sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>bgAlphap,<sp/>255,<sp/>wCutoff<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="_image_manipulation_8h_1a751be86b4facbf3a6fc095ab65ff1572" refkind="member"><highlight class="normal">wxImage<sp/><ref refid="_image_manipulation_8cpp_1a751be86b4facbf3a6fc095ab65ff1572" kindref="member">GetSubImageWithAlpha</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxImage<sp/>&amp;<sp/>Src,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxRect<sp/>&amp;rect<sp/>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//First<sp/>part<sp/>of<sp/>this<sp/>code<sp/>is<sp/>lifted<sp/>from<sp/>wxImage::GetSubImage()<sp/>source<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/>wxImage<sp/>image;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>wxCHECK_MSG(<sp/>Src.Ok(),<sp/>image,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;invalid<sp/>image&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>wxCHECK_MSG(<sp/>(rect.GetLeft()&gt;=0)<sp/>&amp;&amp;<sp/>(rect.GetTop()&gt;=0)<sp/>&amp;&amp;<sp/>(</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rect.GetRight()&lt;=Src.GetWidth())<sp/>&amp;&amp;<sp/>(rect.GetBottom()&lt;=Src.GetHeight()),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;invalid<sp/>subimage<sp/>size&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subwidth=rect.GetWidth();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subheight=rect.GetHeight();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>image.Create(<sp/>subwidth,<sp/>subheight,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*subdata<sp/>=<sp/>image.GetData(),<sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>=Src.GetData();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/>wxCHECK_MSG(<sp/>subdata,<sp/>image,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>create<sp/>image&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JKC:<sp/>Quick<sp/>hack<sp/>-<sp/>don&apos;t<sp/>deal<sp/>with<sp/>masks<sp/>-<sp/>need<sp/>to<sp/>understand<sp/>macro<sp/>M_IMGDATA<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(Src.M_IMGDATA-&gt;m_hasMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>image.SetMaskColour(<sp/>Src.M_IMGDATA-&gt;m_maskRed,<sp/>Src.M_IMGDATA-&gt;m_maskGreen,<sp/>Src.M_IMGDATA-&gt;m_maskBlue<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subleft=3*rect.GetLeft();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width=3*Src.GetWidth();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>subwidth*=3;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>+=rect.GetTop()*width+subleft;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>subheight;<sp/>++j)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>subdata,<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/>subwidth);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdata+=subwidth;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>+=width;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>so<sp/>we&apos;ve<sp/>copied<sp/>the<sp/>RGB<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>do<sp/>the<sp/>Alpha<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<sp/>Src.HasAlpha()<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/>image.InitAlpha();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>subleft/=3;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>width/=3;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>subwidth/=3;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref><sp/>=Src.GetAlpha();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/>subdata<sp/>=image.GetAlpha();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>+=rect.GetTop()*width+subleft;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>subheight;<sp/>++j)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>subdata,<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/>subwidth);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdata+=subwidth;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>+=width;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/ImageManipulation.cpp"/>
  </compounddef>
</doxygen>
