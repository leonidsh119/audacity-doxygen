<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="java_binding" kind="page">
    <compoundname>java_binding</compoundname>
    <title>JPortAudio Java Binding</title>
    <detaileddescription>
<para><emphasis>Note: this page has not been reviewed, and may contain errors.</emphasis></para><sect1 id="java_binding_1java_draft">
<title>DRAFT - IN PROGRESS</title>
<para>9/4/12 JPortAudio is very new and should be considered an &quot;alpha&quot; release. The building of JPortAudio will eventually be integrated into the Makefile as an optional build.</para><para>Currently JPortAudio is only supported for Windows and Macintosh. Please contact us if you want to help with porting Linux.</para><para>For reference documentation of the JPortAudio API see: <ref refid="classcom_1_1portaudio_1_1_port_audio" kindref="compound">com.portaudio.PortAudio</ref></para><para>For an example see: <ref refid="_play_sine_8java" kindref="compound">PlaySine.java</ref></para></sect1>
<sect1 id="java_binding_1java_comp_windows">
<title>Building JPortAudio on Windows</title>
<para>Build the Java code using the Eclipse project in &quot;jportaudio&quot;. <ref refid="class_export" kindref="compound">Export</ref> as &quot;jportaudio.jar&quot;.</para><para>If you modify the JNI API then you will need to regenerate the JNI .h files using:</para><para><programlisting><codeline><highlight class="normal">cd<sp/>bindings/java/scripts</highlight></codeline>
<codeline><highlight class="normal">make_header.bat</highlight></codeline>
</programlisting></para><para>Build the JNI DLL using the Visual Studio 2010 solution in &quot;java/c/build/vs2010/PortAudioJNI&quot;.</para></sect1>
<sect1 id="java_binding_1java_use_windows">
<title>Using JPortAudio on Windows</title>
<para>Put the &quot;jportaudio.jar&quot; in the classpath for your application. Place the following libraries where they can be found, typically in the same folder as your application.</para><para><itemizedlist>
<listitem><para>portaudio_x86.dll</para></listitem><listitem><para>portaudio_x64.dll</para></listitem><listitem><para>jportaudio_x86.dll</para></listitem><listitem><para>jportaudio_x64.dll</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="java_binding_1java_comp_max">
<title>Building JPortAudio on Mac</title>
<para>These are notes from building JPortAudio on a Mac with 10.6.8 and XCode 4.</para><para>I created a target of type &apos;C&apos; library.</para><para>I added the regular PortAudio frameworks plus the JavaVM framework.</para><para>I modified <ref refid="com__portaudio___port_audio_8h" kindref="compound">com_portaudio_PortAudio.h</ref> and <ref refid="com__portaudio___blocking_stream_8h" kindref="compound">com_portaudio_BlockingStream.h</ref> so that jni.h could found.</para><para><programlisting><codeline><highlight class="normal">#if<sp/>defined(__APPLE__)</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;JavaVM/jni.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;jni.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
</programlisting></para><para>This is bad because those header files are autogenerated and will be overwritten. We need a better solution for this.</para><para>I had trouble finding the &quot;libjportaudio.jnilib&quot;. So I added a Build Phase that copied the library to &quot;/Users/phil/Library/Java/Extensions&quot;.</para><para>On the Mac we can create a universal library for both 32 and 64-bit JVMs. So in the JAR file I will open &quot;jportaudio&quot; on Apple. ON WIndows I will continue to open &quot;jportaudio_x64&quot; and &quot;jportaudio_x86&quot;. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
