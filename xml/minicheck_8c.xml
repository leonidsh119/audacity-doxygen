<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="minicheck_8c" kind="file" language="C++">
    <compoundname>minicheck.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">setjmp.h</includes>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes refid="minicheck_8h" local="yes">minicheck.h</includes>
    <incdepgraph>
      <node id="2786">
        <label>stdlib.h</label>
      </node>
      <node id="2787">
        <label>setjmp.h</label>
      </node>
      <node id="2788">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="2784">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c</label>
        <link refid="minicheck.c"/>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2788" relation="include">
        </childnode>
        <childnode refid="2789" relation="include">
        </childnode>
      </node>
      <node id="2789">
        <label>minicheck.h</label>
        <link refid="minicheck_8h"/>
      </node>
      <node id="2785">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="minicheck_8c_1af874a28e8c6b92a261021f526f4f8378" prot="public" static="yes" mutable="no">
        <type>jmp_buf</type>
        <definition>jmp_buf env</definition>
        <argsstring></argsstring>
        <name>env</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="85" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="minicheck_8c_1a95054b9edee6a2adff4025b55dee47d1" prot="public" static="yes" mutable="no">
        <type>char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
        <definition>char const* _check_current_function</definition>
        <argsstring></argsstring>
        <name>_check_current_function</name>
        <initializer>= <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="87" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="minicheck_8c_1a4546661918c106631828b97f76856b63" prot="public" static="yes" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int _check_current_lineno</definition>
        <argsstring></argsstring>
        <name>_check_current_lineno</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="88" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="minicheck_8c_1a5a5d905c8d4f58a913e604c763c092c8" prot="public" static="yes" mutable="no">
        <type>char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
        <definition>char const* _check_current_filename</definition>
        <argsstring></argsstring>
        <name>_check_current_filename</name>
        <initializer>= <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="89" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="minicheck_8c_1ac0364145d15035af36b5352d8ca4f812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_suite" kindref="compound">Suite</ref> *</type>
        <definition>Suite* suite_create</definition>
        <argsstring>(char *name)</argsstring>
        <name>suite_create</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="16" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="16" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1ad4e14093705c7e3a3ae748b870e66749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_t_case" kindref="compound">TCase</ref> *</type>
        <definition>TCase* tcase_create</definition>
        <argsstring>(char *name)</argsstring>
        <name>tcase_create</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="26" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1a66648bfc9417afedcd6d2c8b52887f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void suite_add_tcase</definition>
        <argsstring>(Suite *suite, TCase *tc)</argsstring>
        <name>suite_add_tcase</name>
        <param>
          <type><ref refid="struct_suite" kindref="compound">Suite</ref> *</type>
          <declname>suite</declname>
        </param>
        <param>
          <type><ref refid="struct_t_case" kindref="compound">TCase</ref> *</type>
          <declname>tc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="36" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="36" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1acc3f7785efa3fe0cad15aed48868f019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void tcase_add_checked_fixture</definition>
        <argsstring>(TCase *tc, tcase_setup_function setup, tcase_teardown_function teardown)</argsstring>
        <name>tcase_add_checked_fixture</name>
        <param>
          <type><ref refid="struct_t_case" kindref="compound">TCase</ref> *</type>
          <declname>tc</declname>
        </param>
        <param>
          <type><ref refid="minicheck_8h_1af6dd219406a27a8d84abbc86206bc324" kindref="member">tcase_setup_function</ref></type>
          <declname>setup</declname>
        </param>
        <param>
          <type><ref refid="minicheck_8h_1ad27f883682f83ad17500cf2c3b97453d" kindref="member">tcase_teardown_function</ref></type>
          <declname>teardown</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="47" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1a1d4a4f4bb800e34ceee3ac87b64d9739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void tcase_add_test</definition>
        <argsstring>(TCase *tc, tcase_test_function test)</argsstring>
        <name>tcase_add_test</name>
        <param>
          <type><ref refid="struct_t_case" kindref="compound">TCase</ref> *</type>
          <declname>tc</declname>
        </param>
        <param>
          <type><ref refid="minicheck_8h_1a384507a3dd67f42525c072669f5ef124" kindref="member">tcase_test_function</ref></type>
          <declname>test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="57" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="57" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1a8a9a377dae5bd20d542ae6ff85417566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_s_runner" kindref="compound">SRunner</ref> *</type>
        <definition>SRunner* srunner_create</definition>
        <argsstring>(Suite *suite)</argsstring>
        <name>srunner_create</name>
        <param>
          <type><ref refid="struct_suite" kindref="compound">Suite</ref> *</type>
          <declname>suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="76" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1a595b10dcf11647011724765e78e64bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void _check_set_test_info</definition>
        <argsstring>(char const *function, char const *filename, int lineno)</argsstring>
        <name>_check_set_test_info</name>
        <param>
          <type>char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>lineno</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="92" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1ab8714919c7197cd2ac3fc107332834ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void add_failure</definition>
        <argsstring>(SRunner *runner, int verbosity)</argsstring>
        <name>add_failure</name>
        <param>
          <type><ref refid="struct_s_runner" kindref="compound">SRunner</ref> *</type>
          <declname>runner</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>verbosity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="101" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1aaec9e4aebe95779618aacd4882ca8546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void srunner_run_all</definition>
        <argsstring>(SRunner *runner, int verbosity)</argsstring>
        <name>srunner_run_all</name>
        <param>
          <type><ref refid="struct_s_runner" kindref="compound">SRunner</ref> *</type>
          <declname>runner</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>verbosity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="111" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="111" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1a1fe3a194cf0178701ad3325f52f46902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void _fail_unless</definition>
        <argsstring>(int condition, const char *file, int line, char *msg)</argsstring>
        <name>_fail_unless</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="159" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1ae3c6140d0c4d0d3e88fc64dcef082f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int srunner_ntests_failed</definition>
        <argsstring>(SRunner *runner)</argsstring>
        <name>srunner_ntests_failed</name>
        <param>
          <type><ref refid="struct_s_runner" kindref="compound">SRunner</ref> *</type>
          <declname>runner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="minicheck_8c_1af346d71f2d70a17cfa401e4a85ad7793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void srunner_free</definition>
        <argsstring>(SRunner *runner)</argsstring>
        <name>srunner_free</name>
        <param>
          <type><ref refid="struct_s_runner" kindref="compound">SRunner</ref> *</type>
          <declname>runner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" line="178" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c" bodystart="178" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Miniature<sp/>re-implementation<sp/>of<sp/>the<sp/>&quot;check&quot;<sp/>library.</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>intended<sp/>to<sp/>support<sp/>just<sp/>enough<sp/>of<sp/>check<sp/>to<sp/>run<sp/>the<sp/>Expat</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>tests.<sp/><sp/>This<sp/>interface<sp/>is<sp/>based<sp/>entirely<sp/>on<sp/>the<sp/>portion<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>check<sp/>library<sp/>being<sp/>used.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;setjmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="minicheck_8h" kindref="compound">minicheck.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="struct_suite" kindref="compound">Suite</ref><sp/>*</highlight></codeline>
<codeline lineno="16" refid="minicheck_8h_1ac0364145d15035af36b5352d8ca4f812" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1ac0364145d15035af36b5352d8ca4f812" kindref="member">suite_create</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_suite" kindref="compound">Suite</ref><sp/>*suite<sp/>=<sp/>(<ref refid="struct_suite" kindref="compound">Suite</ref><sp/>*)<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_suite" kindref="compound">Suite</ref>));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(suite<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suite-&gt;<ref refid="struct_suite_1a440288d83bbf5b214d14f4379162f388" kindref="member">name</ref><sp/>=<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suite;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*</highlight></codeline>
<codeline lineno="26" refid="minicheck_8h_1ad4e14093705c7e3a3ae748b870e66749" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1ad4e14093705c7e3a3ae748b870e66749" kindref="member">tcase_create</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*tc<sp/>=<sp/>(<ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*)<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_t_case" kindref="compound">TCase</ref>));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1a112c9a3b3e73275738a789d5f6758c8e" kindref="member">name</ref><sp/>=<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tc;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="minicheck_8h_1a66648bfc9417afedcd6d2c8b52887f74" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1a66648bfc9417afedcd6d2c8b52887f74" kindref="member">suite_add_tcase</ref>(<ref refid="struct_suite" kindref="compound">Suite</ref><sp/>*suite,<sp/><ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*tc)<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(suite<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(tc<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(tc-&gt;<ref refid="struct_t_case_1a8d56f03bc84c7dab23e390902e7992e8" kindref="member">next_tcase</ref><sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1a8d56f03bc84c7dab23e390902e7992e8" kindref="member">next_tcase</ref><sp/>=<sp/>suite-&gt;<ref refid="struct_suite_1ab72ccee796b21f574ddbeb114b19e050" kindref="member">tests</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>suite-&gt;<ref refid="struct_suite_1ab72ccee796b21f574ddbeb114b19e050" kindref="member">tests</ref><sp/>=<sp/>tc;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="minicheck_8h_1a79a637b92a05ef87ef0193b20185c744" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1acc3f7785efa3fe0cad15aed48868f019" kindref="member">tcase_add_checked_fixture</ref>(<ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*tc,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1af6dd219406a27a8d84abbc86206bc324" kindref="member">tcase_setup_function</ref><sp/><ref refid="namespacesetup" kindref="compound">setup</ref>,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1ad27f883682f83ad17500cf2c3b97453d" kindref="member">tcase_teardown_function</ref><sp/>teardown)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(tc<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1aa9b64bff7661f76f093240b74ad1dbe8" kindref="member">setup</ref><sp/>=<sp/><ref refid="launch_8c_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1ad4f1e0d9f95b5a4ea4edee3f5952da3e" kindref="member">teardown</ref><sp/>=<sp/>teardown;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="minicheck_8h_1a1d4a4f4bb800e34ceee3ac87b64d9739" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1a1d4a4f4bb800e34ceee3ac87b64d9739" kindref="member">tcase_add_test</ref>(<ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*tc,<sp/><ref refid="minicheck_8h_1a384507a3dd67f42525c072669f5ef124" kindref="member">tcase_test_function</ref><sp/><ref refid="patest__multi__sine_8c_1a4e1a7dd05b97e23b3dd1aed354405b63" kindref="member">test</ref>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(tc<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc-&gt;<ref refid="struct_t_case_1a92481912b4d610eac7f45f563bf9e4d9" kindref="member">allocated</ref><sp/>==<sp/>tc-&gt;<ref refid="struct_t_case_1a9077ace853866e23d4c0d3ef01832994" kindref="member">ntests</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nalloc<sp/>=<sp/>tc-&gt;<ref refid="struct_t_case_1a92481912b4d610eac7f45f563bf9e4d9" kindref="member">allocated</ref><sp/>+<sp/>100;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="minicheck_8h_1a384507a3dd67f42525c072669f5ef124" kindref="member">tcase_test_function</ref>)<sp/>*<sp/>nalloc;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1a384507a3dd67f42525c072669f5ef124" kindref="member">tcase_test_function</ref><sp/>*new_tests<sp/>=<sp/>realloc(tc-&gt;<ref refid="struct_t_case_1a002f38ddf6c5d8f3b6fe72cc1cc2384f" kindref="member">tests</ref>,<sp/>new_size);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(new_tests<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_tests<sp/>!=<sp/>tc-&gt;<ref refid="struct_t_case_1a002f38ddf6c5d8f3b6fe72cc1cc2384f" kindref="member">tests</ref>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tc-&gt;<ref refid="struct_t_case_1a002f38ddf6c5d8f3b6fe72cc1cc2384f" kindref="member">tests</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1a002f38ddf6c5d8f3b6fe72cc1cc2384f" kindref="member">tests</ref><sp/>=<sp/>new_tests;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1a92481912b4d610eac7f45f563bf9e4d9" kindref="member">allocated</ref><sp/>=<sp/>nalloc;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1a002f38ddf6c5d8f3b6fe72cc1cc2384f" kindref="member">tests</ref>[tc-&gt;<ref refid="struct_t_case_1a9077ace853866e23d4c0d3ef01832994" kindref="member">ntests</ref>]<sp/>=<sp/><ref refid="patest__multi__sine_8c_1a4e1a7dd05b97e23b3dd1aed354405b63" kindref="member">test</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1a9077ace853866e23d4c0d3ef01832994" kindref="member">ntests</ref>++;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="struct_s_runner" kindref="compound">SRunner</ref><sp/>*</highlight></codeline>
<codeline lineno="76" refid="minicheck_8h_1a8a9a377dae5bd20d542ae6ff85417566" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1a8a9a377dae5bd20d542ae6ff85417566" kindref="member">srunner_create</ref>(<ref refid="struct_suite" kindref="compound">Suite</ref><sp/>*suite)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_runner" kindref="compound">SRunner</ref><sp/>*runner<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_s_runner" kindref="compound">SRunner</ref>));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runner<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runner-&gt;<ref refid="struct_s_runner_1a25e6f4691d777f9b136b917f299fd6fe" kindref="member">suite</ref><sp/>=<sp/>suite;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>runner;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>jmp_buf<sp/>env;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*_check_current_function<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_check_current_lineno<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*_check_current_filename<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="minicheck_8h_1a595b10dcf11647011724765e78e64bb6" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1a595b10dcf11647011724765e78e64bb6" kindref="member">_check_set_test_info</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1a33da238465b6abf419d74a21401282f7" kindref="member">lineno</ref>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>_check_current_function<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>_check_current_lineno<sp/>=<sp/><ref refid="seqread_8c_1a33da238465b6abf419d74a21401282f7" kindref="member">lineno</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>_check_current_filename<sp/>=<sp/><ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">add_failure(<ref refid="struct_s_runner" kindref="compound">SRunner</ref><sp/>*runner,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>runner-&gt;<ref refid="struct_s_runner_1a944e13c4dd33236d98012ad9a3222eb2" kindref="member">nfailures</ref>++;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity<sp/>&gt;=<sp/><ref refid="minicheck_8h_1a3f2f47a724c6832a8c17c360cc65c67c" kindref="member">CK_VERBOSE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%s:%d:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>_check_current_filename,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_check_current_lineno,<sp/>_check_current_function);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="minicheck_8h_1aaec9e4aebe95779618aacd4882ca8546" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1aaec9e4aebe95779618aacd4882ca8546" kindref="member">srunner_run_all</ref>(<ref refid="struct_s_runner" kindref="compound">SRunner</ref><sp/>*runner,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_suite" kindref="compound">Suite</ref><sp/>*suite;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_case" kindref="compound">TCase</ref><sp/>*tc;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(runner<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>suite<sp/>=<sp/>runner-&gt;<ref refid="struct_s_runner_1a25e6f4691d777f9b136b917f299fd6fe" kindref="member">suite</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>tc<sp/>=<sp/>suite-&gt;<ref refid="struct_suite_1ab72ccee796b21f574ddbeb114b19e050" kindref="member">tests</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tc<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tc-&gt;<ref refid="struct_t_case_1a9077ace853866e23d4c0d3ef01832994" kindref="member">ntests</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runner-&gt;<ref refid="struct_s_runner_1a0b60b601fb3ce9011b974fba73aaef75" kindref="member">nchecks</ref>++;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc-&gt;<ref refid="struct_t_case_1aa9b64bff7661f76f093240b74ad1dbe8" kindref="member">setup</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(env))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_failure(runner,<sp/>verbosity);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1aa9b64bff7661f76f093240b74ad1dbe8" kindref="member">setup</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>test<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(env))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_failure(runner,<sp/>verbosity);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tc-&gt;<ref refid="struct_t_case_1a002f38ddf6c5d8f3b6fe72cc1cc2384f" kindref="member">tests</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>])();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>teardown<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc-&gt;<ref refid="struct_t_case_1ad4f1e0d9f95b5a4ea4edee3f5952da3e" kindref="member">teardown</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(env))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_failure(runner,<sp/>verbosity);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="struct_t_case_1ad4f1e0d9f95b5a4ea4edee3f5952da3e" kindref="member">teardown</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc<sp/>=<sp/>tc-&gt;<ref refid="struct_t_case_1a8d56f03bc84c7dab23e390902e7992e8" kindref="member">next_tcase</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbosity)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passed<sp/>=<sp/>runner-&gt;<ref refid="struct_s_runner_1a0b60b601fb3ce9011b974fba73aaef75" kindref="member">nchecks</ref><sp/>-<sp/>runner-&gt;<ref refid="struct_s_runner_1a944e13c4dd33236d98012ad9a3222eb2" kindref="member">nfailures</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>percentage<sp/>=<sp/>((double)<sp/>passed)<sp/>/<sp/>runner-&gt;<ref refid="struct_s_runner_1a0b60b601fb3ce9011b974fba73aaef75" kindref="member">nchecks</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>display<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(percentage<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%d%%:<sp/>Checks:<sp/>%d,<sp/>Failed:<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display,<sp/>runner-&gt;<ref refid="struct_s_runner_1a0b60b601fb3ce9011b974fba73aaef75" kindref="member">nchecks</ref>,<sp/>runner-&gt;<ref refid="struct_s_runner_1a944e13c4dd33236d98012ad9a3222eb2" kindref="member">nfailures</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="minicheck_8h_1a1fe3a194cf0178701ad3325f52f46902" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1a1fe3a194cf0178701ad3325f52f46902" kindref="member">_fail_unless</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>condition,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>print<sp/>the<sp/>error<sp/>message<sp/>so<sp/>it<sp/>isn&apos;t<sp/>lost.<sp/><sp/>In<sp/>this<sp/>case,</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>have<sp/>a<sp/>failure,<sp/>so<sp/>there&apos;s<sp/>no<sp/>reason<sp/>to<sp/>be<sp/>quiet<sp/>about<sp/>what</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>is.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>msg);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>longjmp(env,<sp/>1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="minicheck_8h_1ae3c6140d0c4d0d3e88fc64dcef082f74" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1ae3c6140d0c4d0d3e88fc64dcef082f74" kindref="member">srunner_ntests_failed</ref>(<ref refid="struct_s_runner" kindref="compound">SRunner</ref><sp/>*runner)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(runner<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>runner-&gt;<ref refid="struct_s_runner_1a944e13c4dd33236d98012ad9a3222eb2" kindref="member">nfailures</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="minicheck_8h_1af346d71f2d70a17cfa401e4a85ad7793" refkind="member"><highlight class="normal"><ref refid="minicheck_8c_1af346d71f2d70a17cfa401e4a85ad7793" kindref="member">srunner_free</ref>(<ref refid="struct_s_runner" kindref="compound">SRunner</ref><sp/>*runner)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>free(runner-&gt;<ref refid="struct_s_runner_1a25e6f4691d777f9b136b917f299fd6fe" kindref="member">suite</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>free(runner);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/minicheck.c"/>
  </compounddef>
</doxygen>
