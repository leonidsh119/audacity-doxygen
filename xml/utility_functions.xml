<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="utility_functions" kind="page">
    <compoundname>utility_functions</compoundname>
    <title>Utility Functions</title>
    <detaileddescription>
<para>In addition to the functions described elsewhere in this tutorial, PortAudio provides a number of Utility functions that are useful in a variety of circumstances. You&apos;ll want to read the <ref refid="portaudio_8h" kindref="compound">portaudio.h</ref> reference, which documents the entire V19 API for details, but we&apos;ll try to cover the basics here.</para><sect1 id="utility_functions_1tut_util2">
<title>Version Information</title>
<para>PortAudio offers two functions to determine the PortAudio Version. This is most useful when you are using PortAudio as a dynamic library, but it may also be useful at other times.</para><para><programlisting><codeline><highlight class="normal">int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pa_GetVersion<sp/>(void)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char<sp/>*<sp/><sp/><sp/><sp/>Pa_GetVersionText<sp/>(void)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="utility_functions_1tut_util3">
<title>Error Text</title>
<para>PortAudio allows you to get error text from an error number.</para><para><programlisting><codeline><highlight class="normal">const<sp/>char<sp/>*<sp/><sp/><sp/><sp/>Pa_GetErrorText<sp/>(PaError<sp/>errorCode)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="utility_functions_1tut_util4">
<title>Stream State</title>
<para>PortAudio Streams exist in 3 states: Active, Stopped, and <ref refid="class_callback" kindref="compound">Callback</ref> Stopped. If a stream is in callback stopped state, you&apos;ll need to stop it before you can start it again. If you need to query the state of a PortAudio stream, there are two functions for doing so:</para><para><programlisting><codeline><highlight class="normal">PaError<sp/><sp/><sp/><sp/><sp/>Pa_IsStreamStopped<sp/>(PaStream<sp/>*stream)</highlight></codeline>
<codeline><highlight class="normal">PaError<sp/><sp/><sp/><sp/><sp/>Pa_IsStreamActive<sp/>(PaStream<sp/>*stream)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="utility_functions_1tut_util5">
<title>Stream Info</title>
<para>If you need to retrieve info about a given stream, such as latency, and sample rate info, there&apos;s a function for that too:</para><para><programlisting><codeline><highlight class="normal">const<sp/>PaStreamInfo<sp/>*<sp/><sp/><sp/><sp/>Pa_GetStreamInfo<sp/>(PaStream<sp/>*stream)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="utility_functions_1tut_util6">
<title>Stream Time</title>
<para>If you need to synchronise other activities such as display updates or MIDI output with the PortAudio callback you need to know the current time according to the same timebase used by the stream callback timestamps.</para><para><programlisting><codeline><highlight class="normal">PaTime<sp/><sp/>Pa_GetStreamTime<sp/>(PaStream<sp/>*stream)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="utility_functions_1tut_util6CPU">
<title>Usage</title>
<para>To determine how much CPU is being used by the callback, use these:</para><para><programlisting><codeline><highlight class="normal">double<sp/><sp/>Pa_GetStreamCpuLoad<sp/>(PaStream<sp/>*stream)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="utility_functions_1tut_util7">
<title>Other utilities</title>
<para>These functions allow you to determine the size of a sample from its format and sleep for a given amount of time. The sleep function should not be used for precise timing or synchronization because it makes few guarantees about the exact length of time it waits. It is most useful for testing.</para><para><programlisting><codeline><highlight class="normal">PaError<sp/>Pa_GetSampleSize<sp/>(PaSampleFormat<sp/>format)</highlight></codeline>
<codeline><highlight class="normal">void<sp/><sp/><sp/><sp/>Pa_Sleep<sp/>(long<sp/>msec)</highlight></codeline>
</programlisting></para><para>Previous: <ref refid="terminating_portaudio" kindref="compound">Closing a Stream and Terminating PortAudio</ref> | Next: <ref refid="querying_devices" kindref="compound">Enumerating and Querying PortAudio Devices</ref> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
