<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__flac__callbacks" kind="group">
    <compoundname>flac_callbacks</compoundname>
    <title>FLAC/callback.h: I/O callback structures</title>
    <innerclass refid="struct_f_l_a_c_____i_o_callbacks" prot="public">FLAC__IOCallbacks</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" prot="public" static="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>typedef void* FLAC__IOHandle</definition>
        <argsstring></argsstring>
        <name>FLAC__IOHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the opaque handle type used by the callbacks. Typically this is a <computeroutput>FILE*</computeroutput> or address of a file descriptor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="89" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga49d95218a6c09b215cd92cc96de71bf9" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* FLAC__IOCallback_Read) (void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</definition>
        <argsstring>)(void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the read callback. The signature and semantics match POSIX fread() implementations and can generally be used interchangeably.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the read buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the records to be read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records to be read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="102" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1gad991792235879aecae289b56a112e1b8" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* FLAC__IOCallback_Write) (const void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</definition>
        <argsstring>)(const void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Write</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the write callback. The signature and semantics match POSIX fwrite() implementations and can generally be used interchangeably.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the write buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the records to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records written. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="115" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1gab3942bbbd6ae09bcefe7cb3a0060c49c" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* FLAC__IOCallback_Seek) (FLAC__IOHandle handle, FLAC__int64 offset, int whence)</definition>
        <argsstring>)(FLAC__IOHandle handle, FLAC__int64 offset, int whence)</argsstring>
        <name>FLAC__IOCallback_Seek</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the seek callback. The signature and semantics mostly match POSIX fseek() WITH ONE IMPORTANT EXCEPTION: the offset is a 64-bit type whereas fseek() is generally &apos;long&apos; and 32-bits wide.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position, relative to <emphasis>whence</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whence</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>SEEK_SET</computeroutput>, <computeroutput>SEEK_CUR</computeroutput>, or <computeroutput>SEEK_END</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>0</computeroutput> on success, <computeroutput>-1</computeroutput> on error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="128" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga45314930cabc2e9c04867eae6bca309f" prot="public" static="no">
        <type><ref refid="ordinals_8h_1a12b57f75f760b9062a13bcda1bdb3f3e" kindref="member">FLAC__int64</ref>(*</type>
        <definition>typedef FLAC__int64(* FLAC__IOCallback_Tell) (FLAC__IOHandle handle)</definition>
        <argsstring>)(FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Tell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the tell callback. The signature and semantics mostly match POSIX ftell() WITH ONE IMPORTANT EXCEPTION: the offset is a 64-bit type whereas ftell() is generally &apos;long&apos; and 32-bits wide.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__int64</parametername>
</parameternamelist>
<parameterdescription>
<para>The current position on success, <computeroutput>-1</computeroutput> on error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="139" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga00ae3b3d373e691908e9539ebf720675" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* FLAC__IOCallback_Eof) (FLAC__IOHandle handle)</definition>
        <argsstring>)(FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the EOF callback. The signature and semantics mostly match POSIX feof() but WATCHOUT: on many systems, feof() is a macro, so in this case a wrapper function must be provided instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>0</computeroutput> if not at end of file, nonzero if at end of file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga0032267fac38220689778833e08f7387" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* FLAC__IOCallback_Close) (FLAC__IOHandle handle)</definition>
        <argsstring>)(FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the close callback. The signature and semantics match POSIX <ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose()</ref> implementations and can generally be used interchangeably.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>0</computeroutput> on success, <computeroutput>EOF</computeroutput> on error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="160" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module defines the structures for describing I/O callbacks to the other <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> interfaces. </para>    </briefdescription>
    <detaileddescription>
<para>The purpose of the I/O callback functions is to create a common way for the metadata interfaces to handle I/O.</para><para>Originally the metadata interfaces required filenames as the way of specifying <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> files to operate on. This is problematic in some environments so there is an additional option to specify a set of callbacks for doing I/O on the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file, instead of the filename.</para><para>In addition to the callbacks, a FLAC__IOHandle type is defined as an opaque structure for a data source.</para><para>The callback function prototypes are similar (but not identical) to the stdio functions fread, fwrite, fseek, ftell, feof, and fclose. If you use stdio streams to implement the callbacks, you can pass fread, fwrite, and fclose anywhere a FLAC__IOCallback_Read, FLAC__IOCallback_Write, or FLAC__IOCallback_Close is required, and a FILE* anywhere a FLAC__IOHandle is required. <simplesect kind="warning"><para>You generally CANNOT directly use fseek or ftell for FLAC__IOCallback_Seek or FLAC__IOCallback_Tell since on most systems these use 32-bit offsets and <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> requires 64-bit offsets to deal with large files. You will have to find an equivalent function (e.g. ftello), or write a wrapper. The same is true for feof() since this is usually implemented as a macro, not as a function whose address can be taken. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
