<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="layer12_8c" kind="file" language="C++">
    <compoundname>layer12.c</compoundname>
    <includes refid="libmad_2global_8h" local="yes">global.h</includes>
    <includes refid="libmad_2fixed_8h" local="yes">fixed.h</includes>
    <includes refid="bit_8h" local="yes">bit.h</includes>
    <includes refid="stream_8h" local="yes">stream.h</includes>
    <includes refid="libmad_2frame_8h" local="yes">frame.h</includes>
    <includes refid="layer12_8h" local="yes">layer12.h</includes>
    <includes local="yes">sf_table.dat</includes>
    <includes local="yes">qc_table.dat</includes>
    <incdepgraph>
      <node id="10678">
        <label>frame.h</label>
        <link refid="libmad_2frame_8h"/>
        <childnode refid="10675" relation="include">
        </childnode>
        <childnode refid="10679" relation="include">
        </childnode>
        <childnode refid="10677" relation="include">
        </childnode>
      </node>
      <node id="10676">
        <label>bit.h</label>
        <link refid="bit_8h"/>
      </node>
      <node id="10674">
        <label>global.h</label>
        <link refid="libmad_2global_8h"/>
      </node>
      <node id="10677">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="10676" relation="include">
        </childnode>
      </node>
      <node id="10682">
        <label>qc_table.dat</label>
      </node>
      <node id="10679">
        <label>timer.h</label>
        <link refid="timer_8h"/>
      </node>
      <node id="10673">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c</label>
        <link refid="layer12.c"/>
        <childnode refid="10674" relation="include">
        </childnode>
        <childnode refid="10675" relation="include">
        </childnode>
        <childnode refid="10676" relation="include">
        </childnode>
        <childnode refid="10677" relation="include">
        </childnode>
        <childnode refid="10678" relation="include">
        </childnode>
        <childnode refid="10680" relation="include">
        </childnode>
        <childnode refid="10681" relation="include">
        </childnode>
        <childnode refid="10682" relation="include">
        </childnode>
      </node>
      <node id="10680">
        <label>layer12.h</label>
        <link refid="layer12_8h"/>
        <childnode refid="10677" relation="include">
        </childnode>
        <childnode refid="10678" relation="include">
        </childnode>
      </node>
      <node id="10675">
        <label>fixed.h</label>
        <link refid="libmad_2fixed_8h"/>
      </node>
      <node id="10681">
        <label>sf_table.dat</label>
      </node>
    </incdepgraph>
    <innerclass refid="structquantclass" prot="public">quantclass</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="layer12_8c_1a308d9dd2c0028ddb184b455bbd7865de" prot="public" static="no">
        <name>CHAR_BIT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="31" column="13" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="layer12_8c_1a40fff2e246c6e97a37992fbc9bbeb1fd" prot="public" static="yes" mutable="no">
        <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>mad_fixed_t const sf_table[64]</definition>
        <argsstring>[64]</argsstring>
        <name>sf_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="45" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1aee2a044fdb78aaeaca747c87e44fbdaf" prot="public" static="yes" mutable="no">
        <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>mad_fixed_t const linear_table[14]</definition>
        <argsstring>[14]</argsstring>
        <name>linear_table</name>
        <initializer>= {
  <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x15555555),  
  MAD_F(0x12492492),  
  MAD_F(0x11111111),  
  MAD_F(0x10842108),  
  MAD_F(0x10410410),  
  MAD_F(0x10204081),  
  MAD_F(0x10101010),  
  MAD_F(0x10080402),  
  MAD_F(0x10040100),  
  MAD_F(0x10020040),  
  MAD_F(0x10010010),  
  MAD_F(0x10008004),  
  MAD_F(0x10004001),  
  MAD_F(0x10002000)   
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="53" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1a6e51104237381e118e16da8bba73fd18" prot="public" static="no" mutable="no">
        <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>unsigned int sblimit</definition>
        <argsstring></argsstring>
        <name>sblimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="219" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1a3d068fcaeba2952f732add81df7788ad" prot="public" static="no" mutable="no">
        <type>unsigned char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>unsigned char const offsets[30]</definition>
        <argsstring>[30]</argsstring>
        <name>offsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1aa448c398b3f223eff683f62689032189" prot="public" static="yes" mutable="no">
        <type>struct @81</type>
        <definition>struct @81 sbquant_table[5]</definition>
        <argsstring>[5]</argsstring>
        <name>sbquant_table</name>
        <initializer>= {
  
  { 27, { 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3,	
	  3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0 } },
  
  { 30, { 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3,	
	  3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0 } },
  
  {  8, { 5, 5, 2, 2, 2, 2, 2, 2 } },				
  
  { 12, { 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 } },		
  
  { 30, { 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,	
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="235" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short nbal</definition>
        <argsstring></argsstring>
        <name>nbal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="240" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short offset</definition>
        <argsstring></argsstring>
        <name>offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="241" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1aac13889c705f3e6c1b36aa43443113b9" prot="public" static="yes" mutable="no">
        <type>struct @82</type>
        <definition>struct @82 bitalloc_table[8]</definition>
        <argsstring>[8]</argsstring>
        <name>bitalloc_table</name>
        <initializer>= {
  { 2, 0 },  
  { 2, 3 },  
  { 3, 3 },  
  { 3, 1 },  
  { 4, 2 },  
  { 4, 3 },  
  { 4, 4 },  
  { 4, 5 }   
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="251" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1a2a7f1f76006b831a333e86b73263a304" prot="public" static="yes" mutable="no">
        <type>unsigned char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>unsigned char const offset_table[6][15]</definition>
        <argsstring>[6][15]</argsstring>
        <name>offset_table</name>
        <initializer>= {
  { 0, 1, 16                                             },  
  { 0, 1,  2, 3, 4, 5, 16                                },  
  { 0, 1,  2, 3, 4, 5,  6, 7,  8,  9, 10, 11, 12, 13, 14 },  
  { 0, 1,  3, 4, 5, 6,  7, 8,  9, 10, 11, 12, 13, 14, 15 },  
  { 0, 1,  2, 3, 4, 5,  6, 7,  8,  9, 10, 11, 12, 13, 16 },  
  { 0, 2,  4, 5, 6, 7,  8, 9, 10, 11, 12, 13, 14, 15, 16 }   
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="255" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="layer12_8c_1a0400edd0f3ba27bd9e0a2dbdd0450677" prot="public" static="yes" mutable="no">
        <type>struct quantclass</type>
        <definition>struct quantclass qc_table[17]</definition>
        <argsstring>[17]</argsstring>
        <name>qc_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="274" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="layer12_8c_1a58603ae8e977189d055affe2714ffdd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        <definition>static mad_fixed_t I_sample</definition>
        <argsstring>(struct mad_bitptr *ptr, unsigned int nb)</argsstring>
        <name>I_sample</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="75" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="75" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="layer12_8c_1addf1465dacfe2ad0539442f426528f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int mad_layer_I</definition>
        <argsstring>(struct mad_stream *stream, struct mad_frame *frame)</argsstring>
        <name>mad_layer_I</name>
        <param>
          <type>struct <ref refid="structmad__stream" kindref="compound">mad_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__frame" kindref="compound">mad_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="104" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="104" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="layer12_8c_1a31c0b2e9b2da84e2277a69497ee9775f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void II_samples</definition>
        <argsstring>(struct mad_bitptr *ptr, struct quantclass const *quantclass, mad_fixed_t output[3])</argsstring>
        <name>II_samples</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>struct quantclass <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>quantclass</declname>
        </param>
        <param>
          <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
          <declname>output</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="281" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="281" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="layer12_8c_1a80759b0311c429b4b7521b514c8b5f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int mad_layer_II</definition>
        <argsstring>(struct mad_stream *stream, struct mad_frame *frame)</argsstring>
        <name>mad_layer_II</name>
        <param>
          <type>struct <ref refid="structmad__stream" kindref="compound">mad_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__frame" kindref="compound">mad_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" line="331" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c" bodystart="331" bodyend="536"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libmad<sp/>-<sp/>MPEG<sp/>audio<sp/>decoder<sp/>library</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2004<sp/>Underbit<sp/>Technologies,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>layer12.c,v<sp/>1.3<sp/>2006-10-19<sp/>10:44:19<sp/>msmeyer<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="libmad_2global_8h" kindref="compound">global.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>HAVE_LIMITS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="layer12_8c_1a308d9dd2c0028ddb184b455bbd7865de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CHAR_BIT<sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="libmad_2fixed_8h" kindref="compound">fixed.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="bit_8h" kindref="compound">bit.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="stream_8h" kindref="compound">stream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="libmad_2frame_8h" kindref="compound">frame.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="layer12_8h" kindref="compound">layer12.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>scalefactor<sp/>table</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>used<sp/>in<sp/>both<sp/>Layer<sp/>I<sp/>and<sp/>Layer<sp/>II<sp/>decoding</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf_table[64]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;sf_table.dat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Layer<sp/>I<sp/>-------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>linear<sp/>scaling<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linear_table[14]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x15555555),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^2<sp/><sp/>/<sp/>(2^2<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.33333333333333<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x12492492),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^3<sp/><sp/>/<sp/>(2^3<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.14285714285714<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x11111111),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^4<sp/><sp/>/<sp/>(2^4<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.06666666666667<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10842108),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^5<sp/><sp/>/<sp/>(2^5<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.03225806451613<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10410410),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^6<sp/><sp/>/<sp/>(2^6<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.01587301587302<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10204081),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^7<sp/><sp/>/<sp/>(2^7<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.00787401574803<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10101010),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^8<sp/><sp/>/<sp/>(2^8<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.00392156862745<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10080402),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^9<sp/><sp/>/<sp/>(2^9<sp/><sp/>-<sp/>1)<sp/>==<sp/>1.00195694716243<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10040100),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^10<sp/>/<sp/>(2^10<sp/>-<sp/>1)<sp/>==<sp/>1.00097751710655<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10020040),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^11<sp/>/<sp/>(2^11<sp/>-<sp/>1)<sp/>==<sp/>1.00048851978505<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10010010),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^12<sp/>/<sp/>(2^12<sp/>-<sp/>1)<sp/>==<sp/>1.00024420024420<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10008004),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^13<sp/>/<sp/>(2^13<sp/>-<sp/>1)<sp/>==<sp/>1.00012208521548<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10004001),<sp/><sp/></highlight><highlight class="comment">/*<sp/>2^14<sp/>/<sp/>(2^14<sp/>-<sp/>1)<sp/>==<sp/>1.00006103888177<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10002000)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2^15<sp/>/<sp/>(2^15<sp/>-<sp/>1)<sp/>==<sp/>1.00003051850948<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>I_sample()</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>decode<sp/>one<sp/>requantized<sp/>Layer<sp/>I<sp/>sample<sp/>from<sp/>a<sp/>bitstream</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>I_sample(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>sample;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(ptr,<sp/>nb);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>invert<sp/>most<sp/>significant<sp/>bit,<sp/>extend<sp/>sign,<sp/>then<sp/>scale<sp/>to<sp/>fixed<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>sample<sp/>^=<sp/>1<sp/>&lt;&lt;<sp/>(nb<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>sample<sp/>|=<sp/>-(sample<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(nb<sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>sample<sp/>&lt;&lt;=<sp/><ref refid="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref><sp/>-<sp/>(nb<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>requantize<sp/>the<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>s&apos;&apos;<sp/>=<sp/>(2^nb<sp/>/<sp/>(2^nb<sp/>-<sp/>1))<sp/>*<sp/>(s&apos;&apos;&apos;<sp/>+<sp/>2^(-nb<sp/>+<sp/>1))<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>sample<sp/>+=<sp/><ref refid="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" kindref="member">MAD_F_ONE</ref><sp/>&gt;&gt;<sp/>(nb<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>(sample,<sp/>linear_table[nb<sp/>-<sp/>2]);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>s&apos;<sp/>=<sp/>factor<sp/>*<sp/>s&apos;&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>(to<sp/>be<sp/>performed<sp/>by<sp/>caller)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>layer-&gt;I()</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>decode<sp/>a<sp/>single<sp/>Layer<sp/>I<sp/>frame</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="layer12_8h_1a5a8aefe25dd116b84d081fcf395549ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1addf1465dacfe2ad0539442f426528f57" kindref="member">mad_layer_I</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__stream" kindref="compound">mad_stream</ref><sp/>*stream,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__frame" kindref="compound">mad_frame</ref><sp/>*frame)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmad__header" kindref="compound">mad_header</ref><sp/>*header<sp/>=<sp/>&amp;frame-&gt;<ref refid="structmad__frame_1a65c2d01fcd43fefff994d61c55433307" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch,<sp/>bound,<sp/>ch,<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/>sb,<sp/>nb;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>allocation[2][32],<sp/>scalefactor[2][32];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>nch<sp/>=<sp/><ref refid="libmad_2frame_8h_1a6a4e08eee60222536dac401c12cf73ad" kindref="member">MAD_NCHANNELS</ref>(header);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>bound<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1a766a554a9ab575209f4bbd595e4f942c" kindref="member">mode</ref><sp/>==<sp/><ref refid="libmad_2frame_8h_1a8ea365ef0335b4cb80e1cc78bb00c611a3c64d6a476e31e78176c7363883bab67" kindref="member">MAD_MODE_JOINT_STEREO</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structmad__header_1ac7b0399dfabb2192aa1ed7ef07a7c7a7" kindref="member">flags</ref><sp/>|=<sp/><ref refid="libmad_2frame_8h_1a7859c0a3efa8b1c360f5c2376baf051ead72d0ef369967494e0195d0bce32b5c4" kindref="member">MAD_FLAG_I_STEREO</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>bound<sp/>=<sp/>4<sp/>+<sp/>header-&gt;<ref refid="structmad__header_1a1ba44705779d2ce1160f092cd3d2a158" kindref="member">mode_extension</ref><sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>CRC<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1ac7b0399dfabb2192aa1ed7ef07a7c7a7" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="libmad_2frame_8h_1a7859c0a3efa8b1c360f5c2376baf051ea2cf90693fcae6053976907946cfa5b9f" kindref="member">MAD_FLAG_PROTECTION</ref>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structmad__header_1a8ea6796703f278702c76098af6ccd762" kindref="member">crc_check</ref><sp/>=</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bit_8c_1a138aa4083765054f0ae501be5872a03c" kindref="member">mad_bit_crc</ref>(stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>4<sp/>*<sp/>(bound<sp/>*<sp/>nch<sp/>+<sp/>(32<sp/>-<sp/>bound)),</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structmad__header_1a8ea6796703f278702c76098af6ccd762" kindref="member">crc_check</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1a8ea6796703f278702c76098af6ccd762" kindref="member">crc_check</ref><sp/>!=<sp/>header-&gt;<ref refid="structmad__header_1a56c1726d166d76d55ee09fb681f1ace9" kindref="member">crc_target</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>!(frame-&gt;<ref refid="structmad__frame_1a9a7cdd4253810f2ec5ff5bace7144e53" kindref="member">options</ref><sp/>&amp;<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a950bf8e3371138ceb9649d45e9a96340a55c155a5b847fef1b431a46c491cb78d" kindref="member">MAD_OPTION_IGNORECRC</ref>))<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a03f249e372a63a329b780307f4e2c2dfa700b1dd168a779097fea06e378353aee" kindref="member">MAD_ERROR_BADCRC</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>bit<sp/>allocations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>bound;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>==<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a03f249e372a63a329b780307f4e2c2dfa481daf8bff25297756cf8083c1b7204c" kindref="member">MAD_ERROR_BADBITALLOC</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocation[ch][sb]<sp/>=<sp/>nb<sp/>?<sp/>nb<sp/>+<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>bound;<sp/>sb<sp/>&lt;<sp/>32;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>nb<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>==<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a03f249e372a63a329b780307f4e2c2dfa481daf8bff25297756cf8083c1b7204c" kindref="member">MAD_ERROR_BADBITALLOC</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>allocation[0][sb]<sp/>=</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>allocation[1][sb]<sp/>=<sp/>nb<sp/>?<sp/>nb<sp/>+<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>scalefactors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>32;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocation[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>scalefactor[ch][sb]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(OPT_STRICT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Scalefactor<sp/>index<sp/>63<sp/>does<sp/>not<sp/>appear<sp/>in<sp/>Table<sp/>B.1<sp/>of</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>ISO/IEC<sp/>11172-3.<sp/>Nonetheless,<sp/>other<sp/>implementations<sp/>accept<sp/>it,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>we<sp/>only<sp/>reject<sp/>it<sp/>if<sp/>OPT_STRICT<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scalefactor[ch][sb]<sp/>==<sp/>63)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a03f249e372a63a329b780307f4e2c2dfa0191e0cbfad382296da168f532cc648e" kindref="member">MAD_ERROR_BADSCALEFACTOR</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>12;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>bound;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>allocation[ch][sb];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>][sb]<sp/>=<sp/>nb<sp/>?</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>(I_sample(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>nb),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_table[scalefactor[ch][sb]])<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>bound;<sp/>sb<sp/>&lt;<sp/>32;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nb<sp/>=<sp/>allocation[0][sb]))<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>sample;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>I_sample(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>nb);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>][sb]<sp/>=</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>(sample,<sp/>sf_table[scalefactor[ch][sb]]);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][s][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Layer<sp/>II<sp/>------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>possible<sp/>quantization<sp/>per<sp/>subband<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219" refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="220" refid="layer12_8c_1a3d068fcaeba2952f732add81df7788ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a3d068fcaeba2952f732add81df7788ad" kindref="member">offsets</ref>[30];</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sbquant_table[5]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ISO/IEC<sp/>11172-3<sp/>Table<sp/>B.2a<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{<sp/>27,<sp/>{<sp/>7,<sp/>7,<sp/>7,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ISO/IEC<sp/>11172-3<sp/>Table<sp/>B.2b<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>{<sp/>30,<sp/>{<sp/>7,<sp/>7,<sp/>7,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>6,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ISO/IEC<sp/>11172-3<sp/>Table<sp/>B.2c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>{<sp/><sp/>8,<sp/>{<sp/>5,<sp/>5,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2<sp/>}<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ISO/IEC<sp/>11172-3<sp/>Table<sp/>B.2d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>{<sp/>12,<sp/>{<sp/>5,<sp/>5,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2<sp/>}<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ISO/IEC<sp/>13818-3<sp/>Table<sp/>B.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>{<sp/>30,<sp/>{<sp/>4,<sp/>4,<sp/>4,<sp/>4,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal">};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>bit<sp/>allocation<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240" refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>;</highlight></codeline>
<codeline lineno="241" refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bitalloc_table[8]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>{<sp/>2,<sp/>0<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>{<sp/>2,<sp/>3<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>{<sp/>3,<sp/>3<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{<sp/>3,<sp/>1<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{<sp/>4,<sp/>2<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{<sp/>4,<sp/>3<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{<sp/>4,<sp/>4<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>{<sp/>4,<sp/>5<sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>7<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>offsets<sp/>into<sp/>quantization<sp/>class<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_table[6][15]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>1,<sp/>16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>1,<sp/><sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>1,<sp/><sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/><sp/>6,<sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>1,<sp/><sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/><sp/>7,<sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>1,<sp/><sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/><sp/>6,<sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>16<sp/>},<sp/><sp/></highlight><highlight class="comment">/*<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>2,<sp/><sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/><sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16<sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>quantization<sp/>class<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">quantclass<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>nlevels;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>group;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>C;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="libnyquist_2nyquist_2nyqsrc_2add_8c_1af316c33cc298530f245e8b55330e86b5" kindref="member">D</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qc_table[17]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;qc_table.dat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>II_samples()</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>decode<sp/>three<sp/>requantized<sp/>Layer<sp/>II<sp/>samples<sp/>from<sp/>a<sp/>bitstream</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>II_samples(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>*ptr,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>quantclass<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*quantclass,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="namespacelv2specgen_1a653e2b7722801dea4d25040ac958b631" kindref="member">output</ref>[3])</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/>sample[3];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nb<sp/>=<sp/>quantclass-&gt;group))<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>,<sp/>nlevels;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>degrouping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(ptr,<sp/>quantclass-&gt;bits);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>nlevels<sp/>=<sp/>quantclass-&gt;nlevels;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>]<sp/>=<sp/>c<sp/>%<sp/>nlevels;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>/=<sp/>nlevels;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>quantclass-&gt;bits;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample[s]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(ptr,<sp/>nb);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>requantized;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invert<sp/>most<sp/>significant<sp/>bit,<sp/>extend<sp/>sign,<sp/>then<sp/>scale<sp/>to<sp/>fixed<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>requantized<sp/><sp/>=<sp/>sample[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>]<sp/>^<sp/>(1<sp/>&lt;&lt;<sp/>(nb<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>requantized<sp/>|=<sp/>-(requantized<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(nb<sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>requantized<sp/>&lt;&lt;=<sp/><ref refid="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref><sp/>-<sp/>(nb<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>requantize<sp/>the<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>s&apos;&apos;<sp/>=<sp/>C<sp/>*<sp/>(s&apos;&apos;&apos;<sp/>+<sp/>D)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>output[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>]<sp/>=<sp/><ref refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>(requantized<sp/>+<sp/>quantclass-&gt;D,<sp/>quantclass-&gt;C);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>s&apos;<sp/>=<sp/>factor<sp/>*<sp/>s&apos;&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(to<sp/>be<sp/>performed<sp/>by<sp/>caller)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>layer-&gt;II()</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>decode<sp/>a<sp/>single<sp/>Layer<sp/>II<sp/>frame</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="layer12_8h_1a88dc7db9eb6a9a04fb2a0993fc0571f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a80759b0311c429b4b7521b514c8b5f89" kindref="member">mad_layer_II</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__stream" kindref="compound">mad_stream</ref><sp/>*stream,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__frame" kindref="compound">mad_frame</ref><sp/>*frame)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmad__header" kindref="compound">mad_header</ref><sp/>*header<sp/>=<sp/>&amp;frame-&gt;<ref refid="structmad__frame_1a65c2d01fcd43fefff994d61c55433307" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>start;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>,<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>,<sp/>nch,<sp/>bound,<sp/>gr,<sp/>ch,<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/>sb;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="layer12_8c_1a3d068fcaeba2952f732add81df7788ad" kindref="member">offsets</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>allocation[2][32],<sp/>scfsi[2][32],<sp/>scalefactor[2][32][3];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="test__rw__echo_8c_1a39c8d1039645bc924aecc49d76f472a0" kindref="member">samples</ref>[3];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>nch<sp/>=<sp/><ref refid="libmad_2frame_8h_1a6a4e08eee60222536dac401c12cf73ad" kindref="member">MAD_NCHANNELS</ref>(header);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1ac7b0399dfabb2192aa1ed7ef07a7c7a7" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="libmad_2frame_8h_1a7859c0a3efa8b1c360f5c2376baf051ea3acf380d524284c96b17b4566bab6a29" kindref="member">MAD_FLAG_LSF_EXT</ref>)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1ac7b0399dfabb2192aa1ed7ef07a7c7a7" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="libmad_2frame_8h_1a7859c0a3efa8b1c360f5c2376baf051ea52b9f7065011b92f10e94ae52e31049b" kindref="member">MAD_FLAG_FREEFORMAT</ref>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>freeformat;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bitrate_per_channel;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>bitrate_per_channel<sp/>=<sp/>header-&gt;<ref refid="structmad__header_1aa26b0a9c946065e7b39df10c4e8f3995" kindref="member">bitrate</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nch<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitrate_per_channel<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(OPT_STRICT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ISO/IEC<sp/>11172-3<sp/>allows<sp/>only<sp/>single<sp/>channel<sp/>mode<sp/>for<sp/>32,<sp/>48,<sp/>56,<sp/>and</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>80<sp/>kbps<sp/>bitrates<sp/>in<sp/>Layer<sp/>II,<sp/>but<sp/>some<sp/>encoders<sp/>ignore<sp/>this</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>restriction.<sp/>We<sp/>enforce<sp/>it<sp/>if<sp/>OPT_STRICT<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitrate_per_channel<sp/>&lt;=<sp/>28000<sp/>||<sp/>bitrate_per_channel<sp/>==<sp/>40000)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="stream_8h_1a03f249e372a63a329b780307f4e2c2dfacb7ec64c35640e7ebc7c4c2085649438" kindref="member">MAD_ERROR_BADMODE</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>nch<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>relax<sp/>restriction,<sp/>those<sp/>files<sp/>do<sp/>import<sp/>fine!<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitrate_per_channel<sp/>&gt;<sp/>192000)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>ISO/IEC<sp/>11172-3<sp/>does<sp/>not<sp/>allow<sp/>single<sp/>channel<sp/>mode<sp/>for<sp/>224,<sp/>256,</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>320,<sp/>or<sp/>384<sp/>kbps<sp/>bitrates<sp/>in<sp/>Layer<sp/>II.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="stream_8h_1a03f249e372a63a329b780307f4e2c2dfacb7ec64c35640e7ebc7c4c2085649438" kindref="member">MAD_ERROR_BADMODE</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitrate_per_channel<sp/>&lt;=<sp/>48000)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(header-&gt;<ref refid="structmad__header_1ac6ca4dc0cbab5c4a7014bb8c26b9d06e" kindref="member">samplerate</ref><sp/>==<sp/>32000)<sp/>?<sp/>3<sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitrate_per_channel<sp/>&lt;=<sp/>80000)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>freeformat:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(header-&gt;<ref refid="structmad__header_1ac6ca4dc0cbab5c4a7014bb8c26b9d06e" kindref="member">samplerate</ref><sp/>==<sp/>48000)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>sblimit<sp/>=<sp/>sbquant_table[index].sblimit;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>offsets<sp/>=<sp/>sbquant_table[index].offsets;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>bound<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1a766a554a9ab575209f4bbd595e4f942c" kindref="member">mode</ref><sp/>==<sp/><ref refid="libmad_2frame_8h_1a8ea365ef0335b4cb80e1cc78bb00c611a3c64d6a476e31e78176c7363883bab67" kindref="member">MAD_MODE_JOINT_STEREO</ref>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structmad__header_1ac7b0399dfabb2192aa1ed7ef07a7c7a7" kindref="member">flags</ref><sp/>|=<sp/><ref refid="libmad_2frame_8h_1a7859c0a3efa8b1c360f5c2376baf051ead72d0ef369967494e0195d0bce32b5c4" kindref="member">MAD_FLAG_I_STEREO</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>bound<sp/>=<sp/>4<sp/>+<sp/>header-&gt;<ref refid="structmad__header_1a1ba44705779d2ce1160f092cd3d2a158" kindref="member">mode_extension</ref><sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bound<sp/>&gt;<sp/>sblimit)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>bound<sp/>=<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>bit<sp/>allocations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>bound;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>nbal<sp/>=<sp/>bitalloc_table[offsets[sb]].nbal;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocation[ch][sb]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>nbal);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>bound;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>nbal<sp/>=<sp/>bitalloc_table[offsets[sb]].nbal;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>allocation[0][sb]<sp/>=</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>allocation[1][sb]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>nbal);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>scalefactor<sp/>selection<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocation[ch][sb])</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>scfsi[ch][sb]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>CRC<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1ac7b0399dfabb2192aa1ed7ef07a7c7a7" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="libmad_2frame_8h_1a7859c0a3efa8b1c360f5c2376baf051ea2cf90693fcae6053976907946cfa5b9f" kindref="member">MAD_FLAG_PROTECTION</ref>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structmad__header_1a8ea6796703f278702c76098af6ccd762" kindref="member">crc_check</ref><sp/>=</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bit_8c_1a138aa4083765054f0ae501be5872a03c" kindref="member">mad_bit_crc</ref>(start,<sp/><ref refid="bit_8c_1aa71656ef69d19e3a9b81e4ab5deaf98a" kindref="member">mad_bit_length</ref>(&amp;start,<sp/>&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>),</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structmad__header_1a8ea6796703f278702c76098af6ccd762" kindref="member">crc_check</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structmad__header_1a8ea6796703f278702c76098af6ccd762" kindref="member">crc_check</ref><sp/>!=<sp/>header-&gt;<ref refid="structmad__header_1a56c1726d166d76d55ee09fb681f1ace9" kindref="member">crc_target</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>!(frame-&gt;<ref refid="structmad__frame_1a9a7cdd4253810f2ec5ff5bace7144e53" kindref="member">options</ref><sp/>&amp;<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a950bf8e3371138ceb9649d45e9a96340a55c155a5b847fef1b431a46c491cb78d" kindref="member">MAD_OPTION_IGNORECRC</ref>))<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a03f249e372a63a329b780307f4e2c2dfa700b1dd168a779097fea06e378353aee" kindref="member">MAD_ERROR_BADCRC</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>scalefactors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocation[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>scalefactor[ch][sb][0]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(scfsi[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][2]<sp/>=</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][1]<sp/>=</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][0];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][1]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][2]<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scfsi[ch][sb]<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][1]<sp/>=<sp/>scalefactor[ch][sb][scfsi[ch][sb]<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(OPT_STRICT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Scalefactor<sp/>index<sp/>63<sp/>does<sp/>not<sp/>appear<sp/>in<sp/>Table<sp/>B.1<sp/>of</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>ISO/IEC<sp/>11172-3.<sp/>Nonetheless,<sp/>other<sp/>implementations<sp/>accept<sp/>it,</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>we<sp/>only<sp/>reject<sp/>it<sp/>if<sp/>OPT_STRICT<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scalefactor[ch][sb][0]<sp/>==<sp/>63<sp/>||</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][1]<sp/>==<sp/>63<sp/>||</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalefactor[ch][sb][2]<sp/>==<sp/>63)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="structmad__stream_1ac9a8e6b43a422325e581d73d28bb538a" kindref="member">error</ref><sp/>=<sp/><ref refid="lib-src_2libmad_2msvc_09_09_2mad_8h_1a03f249e372a63a329b780307f4e2c2dfa0191e0cbfad382296da168f532cc648e" kindref="member">MAD_ERROR_BADSCALEFACTOR</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>0;<sp/>gr<sp/>&lt;<sp/>12;<sp/>++gr)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>bound;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((index<sp/>=<sp/>allocation[ch][sb]))<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>offset_table[bitalloc_table[offsets[sb]].offset][index<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>II_samples(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>&amp;qc_table[index],<sp/>samples);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][3<sp/>*<sp/>gr<sp/>+<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>][sb]<sp/>=</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>(samples[s],<sp/>sf_table[scalefactor[ch][sb][gr<sp/>/<sp/>4]]);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][3<sp/>*<sp/>gr<sp/>+<sp/>s][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>bound;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((index<sp/>=<sp/>allocation[0][sb]))<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>offset_table[bitalloc_table[offsets[sb]].offset][index<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>II_samples(&amp;stream-&gt;<ref refid="structmad__stream_1a987cf5a3e8ab950311e7afeda3ef34db" kindref="member">ptr</ref>,<sp/>&amp;qc_table[index],<sp/>samples);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][3<sp/>*<sp/>gr<sp/>+<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>][sb]<sp/>=</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>(samples[s],<sp/>sf_table[scalefactor[ch][sb][gr<sp/>/<sp/>4]]);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][3<sp/>*<sp/>gr<sp/>+<sp/>s][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>3;<sp/>++<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>sblimit;<sp/>sb<sp/>&lt;<sp/>32;<sp/>++sb)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structmad__frame_1a9c70d94f445671d5d7cf09bbbc9cbfef" kindref="member">sbsample</ref>[ch][3<sp/>*<sp/>gr<sp/>+<sp/>s][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c"/>
  </compounddef>
</doxygen>
