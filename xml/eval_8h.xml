<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="eval_8h" kind="file" language="C++">
    <compoundname>eval.h</compoundname>
    <includes refid="avutil_8h" local="yes">avutil.h</includes>
    <incdepgraph>
      <node id="3773">
        <label>mathematics.h</label>
        <link refid="mathematics_8h"/>
        <childnode refid="3762" relation="include">
        </childnode>
        <childnode refid="3761" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3774" relation="include">
        </childnode>
        <childnode refid="3775" relation="include">
        </childnode>
      </node>
      <node id="3774">
        <label>rational.h</label>
        <link refid="rational_8h"/>
        <childnode refid="3762" relation="include">
        </childnode>
        <childnode refid="3760" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
      </node>
      <node id="3777">
        <label>stdarg.h</label>
      </node>
      <node id="3766">
        <label>attributes.h</label>
        <link refid="attributes_8h"/>
      </node>
      <node id="3756">
        <label>avutil.h</label>
        <link refid="avutil_8h"/>
        <childnode refid="3757" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3773" relation="include">
        </childnode>
        <childnode refid="3774" relation="include">
        </childnode>
        <childnode refid="3776" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
      </node>
      <node id="3762">
        <label>stdint.h</label>
      </node>
      <node id="3769">
        <label>libavutil/avconfig.h</label>
        <link refid="avconfig_8h"/>
      </node>
      <node id="3764">
        <label>stdlib.h</label>
      </node>
      <node id="3758">
        <label>errno.h</label>
      </node>
      <node id="3767">
        <label>version.h</label>
        <link refid="ffmpeg_2libavutil_2version_8h"/>
        <childnode refid="3768" relation="include">
        </childnode>
      </node>
      <node id="3772">
        <label>stddef.h</label>
      </node>
      <node id="3760">
        <label>limits.h</label>
      </node>
      <node id="3755">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h</label>
        <link refid="eval.h"/>
        <childnode refid="3756" relation="include">
        </childnode>
      </node>
      <node id="3771">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="3758" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
      </node>
      <node id="3776">
        <label>log.h</label>
        <link refid="ffmpeg_2libavutil_2log_8h"/>
        <childnode refid="3777" relation="include">
        </childnode>
        <childnode refid="3756" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
      </node>
      <node id="3765">
        <label>string.h</label>
      </node>
      <node id="3770">
        <label>mem.h</label>
        <link refid="ffmpeg_2libavutil_2mem_8h"/>
        <childnode refid="3760" relation="include">
        </childnode>
        <childnode refid="3762" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3756" relation="include">
        </childnode>
      </node>
      <node id="3775">
        <label>intfloat.h</label>
        <link refid="intfloat_8h"/>
        <childnode refid="3762" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
      </node>
      <node id="3779">
        <label>old_pix_fmts.h</label>
        <link refid="old__pix__fmts_8h"/>
      </node>
      <node id="3761">
        <label>math.h</label>
      </node>
      <node id="3768">
        <label>macros.h</label>
        <link refid="ffmpeg_2libavutil_2macros_8h"/>
      </node>
      <node id="3757">
        <label>common.h</label>
        <link refid="ffmpeg_2libavutil_2common_8h"/>
        <childnode refid="3758" relation="include">
        </childnode>
        <childnode refid="3759" relation="include">
        </childnode>
        <childnode refid="3760" relation="include">
        </childnode>
        <childnode refid="3761" relation="include">
        </childnode>
        <childnode refid="3762" relation="include">
        </childnode>
        <childnode refid="3763" relation="include">
        </childnode>
        <childnode refid="3764" relation="include">
        </childnode>
        <childnode refid="3765" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3757" relation="include">
        </childnode>
        <childnode refid="3770" relation="include">
        </childnode>
      </node>
      <node id="3763">
        <label>stdio.h</label>
      </node>
      <node id="3778">
        <label>pixfmt.h</label>
        <link refid="pixfmt_8h"/>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3779" relation="include">
        </childnode>
      </node>
      <node id="3759">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="eval_8h_1ac09a495d176de152a38347ca8ba069a8" prot="public" static="no">
        <type>struct <ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref></type>
        <definition>typedef struct AVExpr AVExpr</definition>
        <argsstring></argsstring>
        <name>AVExpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" line="100" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="eval_8h_1a2d19271d518d49f3cb2df8c347856b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_expr_parse_and_eval</definition>
        <argsstring>(double *res, const char *s, const char *const *const_names, const double *const_values, const char *const *func1_names, double(*const *funcs1)(void *, double), const char *const *func2_names, double(*const *funcs2)(void *, double, double), void *opaque, int log_offset, void *log_ctx)</argsstring>
        <name>av_expr_parse_and_eval</name>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>const_names</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double *</type>
          <declname>const_values</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>func1_names</declname>
        </param>
        <param>
          <type>double(**)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *, double)</type>
          <declname>funcs1</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>func2_names</declname>
        </param>
        <param>
          <type>double(**)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *, double, double)</type>
          <declname>funcs2</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>log_offset</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>log_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse and evaluate an expression. Note, this is significantly slower than <ref refid="eval_8h_1a569b6171b99e02f899d9ba8b5545cc27" kindref="member">av_expr_eval()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a double where is put the result value of the expression, or NAN in case of error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>expression as a zero terminated string, for example &quot;1+2^3+5*5+sin(2/3)&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const_names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of zero terminated strings of constant identifiers, for example {&quot;PI&quot;, &quot;E&quot;, 0} </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const_values</parametername>
</parameternamelist>
<parameterdescription>
<para>a zero terminated array of values for the identifiers from const_names </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func1_names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of zero terminated strings of funcs1 identifiers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcs1</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of function pointers for functions which take 1 argument </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func2_names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of zero terminated strings of funcs2 identifiers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcs2</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of function pointers for functions which take 2 arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer which will be passed to all functions from funcs1 and funcs2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>parent logging context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 in case of success, a negative value corresponding to an AVERROR code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="eval_8h_1ad3bf8f3330d1fd139de2ca156c313f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_expr_parse</definition>
        <argsstring>(AVExpr **expr, const char *s, const char *const *const_names, const char *const *func1_names, double(*const *funcs1)(void *, double), const char *const *func2_names, double(*const *funcs2)(void *, double, double), int log_offset, void *log_ctx)</argsstring>
        <name>av_expr_parse</name>
        <param>
          <type><ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref> **</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>const_names</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>func1_names</declname>
        </param>
        <param>
          <type>double(**)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *, double)</type>
          <declname>funcs1</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>func2_names</declname>
        </param>
        <param>
          <type>double(**)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *, double, double)</type>
          <declname>funcs2</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>log_offset</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>log_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse an expression.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer where is put an AVExpr containing the parsed value in case of successful parsing, or NULL otherwise. The pointed to AVExpr must be freed with <ref refid="eval_8h_1a01c05d7049a9208c2b22147a3f16c58c" kindref="member">av_expr_free()</ref> by the user when it is not needed anymore. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>expression as a zero terminated string, for example &quot;1+2^3+5*5+sin(2/3)&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const_names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of zero terminated strings of constant identifiers, for example {&quot;PI&quot;, &quot;E&quot;, 0} </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func1_names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of zero terminated strings of funcs1 identifiers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcs1</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of function pointers for functions which take 1 argument </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func2_names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of zero terminated strings of funcs2 identifiers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcs2</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated array of function pointers for functions which take 2 arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>parent logging context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 in case of success, a negative value corresponding to an AVERROR code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="eval_8h_1a569b6171b99e02f899d9ba8b5545cc27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double av_expr_eval</definition>
        <argsstring>(AVExpr *e, const double *const_values, void *opaque)</argsstring>
        <name>av_expr_eval</name>
        <param>
          <type><ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double *</type>
          <declname>const_values</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluate a previously parsed expression.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const_values</parametername>
</parameternamelist>
<parameterdescription>
<para>a zero terminated array of values for the identifiers from <ref refid="eval_8h_1ad3bf8f3330d1fd139de2ca156c313f34" kindref="member">av_expr_parse()</ref> const_names </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer which will be passed to all functions from funcs1 and funcs2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the expression </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="eval_8h_1a01c05d7049a9208c2b22147a3f16c58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_expr_free</definition>
        <argsstring>(AVExpr *e)</argsstring>
        <name>av_expr_free</name>
        <param>
          <type><ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a parsed expression previously created with <ref refid="eval_8h_1ad3bf8f3330d1fd139de2ca156c313f34" kindref="member">av_expr_parse()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="eval_8h_1a7d21905c92ee5af0bb529d2daf8cb7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double av_strtod</definition>
        <argsstring>(const char *numstr, char **tail)</argsstring>
        <name>av_strtod</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>numstr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the string in numstr and return its value as a double. If the string is empty, contains only whitespaces, or does not contain an initial substring that has the expected syntax for a floating-point number, no conversion is performed. In this case, returns a value of zero and the value returned in tail is the value of numstr.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numstr</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing a number, may contain one of the International System number postfixes, for example &apos;K&apos;, &apos;M&apos;, &apos;G&apos;. If &apos;i&apos; is appended after the postfix, powers of 2 are used instead of powers of 10. The &apos;B&apos; postfix multiplies the value for 8, and can be appended after another postfix or used alone. This allows using for example &apos;KB&apos;, &apos;MiB&apos;, &apos;G&apos; and &apos;B&apos; as postfix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL puts here the pointer to the char next after the last parsed character </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h" line="111" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>simple arithmetic expression evaluator </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2002<sp/>Michael<sp/>Niedermayer<sp/>&lt;michaelni@gmx.at&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>FFmpeg.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>FFmpeg<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>FFmpeg;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor">#ifndef<sp/>AVUTIL_EVAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVUTIL_EVAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="avutil_8h" kindref="compound">avutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref><sp/><ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="eval_8h_1a2d19271d518d49f3cb2df8c347856b18" kindref="member">av_expr_parse_and_eval</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*const_names,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*const_values,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*func1_names,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*funcs1)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*func2_names,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*funcs2)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log_offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*log_ctx);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="eval_8h_1ad3bf8f3330d1fd139de2ca156c313f34" kindref="member">av_expr_parse</ref>(<ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref><sp/>**expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*const_names,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*func1_names,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*funcs1)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*func2_names,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*funcs2)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log_offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*log_ctx);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="eval_8h_1a569b6171b99e02f899d9ba8b5545cc27" kindref="member">av_expr_eval</ref>(<ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref><sp/>*<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*const_values,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="eval_8h_1a01c05d7049a9208c2b22147a3f16c58c" kindref="member">av_expr_free</ref>(<ref refid="eval_8h_1ac09a495d176de152a38347ca8ba069a8" kindref="member">AVExpr</ref><sp/>*<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="eval_8h_1a7d21905c92ee5af0bb529d2daf8cb7c3" kindref="member">av_strtod</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*numstr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**tail);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVUTIL_EVAL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/eval.h"/>
  </compounddef>
</doxygen>
