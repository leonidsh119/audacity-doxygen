<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__sord" kind="group">
    <compoundname>sord</compoundname>
    <title>Sord</title>
      <sectiondef kind="user-defined">
      <header>World</header>
      <memberdef kind="function" id="group__sord_1gaed6f1a14a2d2750435bff14fc644e8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
        <definition>SORD_API SordWorld* sord_world_new</definition>
        <argsstring>(void)</argsstring>
        <name>sord_world_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="namespace_sord" kindref="compound">Sord</ref> World. It is safe to use multiple worlds in one process, though no data (e.g. nodes) can be shared between worlds, and this should be avoided if possible for performance reasons. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="189" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gacc90d35094a70d4acfb2ba1ce00cfbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_world_free</definition>
        <argsstring>(SordWorld *world)</argsstring>
        <name>sord_world_free</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free <computeroutput>world</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="157" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf3939f3c6c19044e41f66622fd079762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_world_set_error_sink</definition>
        <argsstring>(SordWorld *world, SerdErrorSink error_sink, void *handle)</argsstring>
        <name>sord_world_set_error_sink</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1ga925d2fda236697a3e643b307ffe242e5" kindref="member">SerdErrorSink</ref></type>
          <declname>error_sink</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a function to be called when errors occur.</para><para>The <computeroutput>error_sink</computeroutput> will be called with <computeroutput>handle</computeroutput> as its first argument. If no error function is set, errors are printed to stderr. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="167" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="220" bodyend="226"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Node</header>
      <memberdef kind="function" id="group__sord_1ga6cee4ab8de97cd6bca7e1587c837fdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_new_uri</definition>
        <argsstring>(SordWorld *world, const uint8_t *uri)</argsstring>
        <name>sord_new_uri</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a URI node from a string.</para><para>Note this function measures <computeroutput>str</computeroutput>, which is a common bottleneck. Use sord_node_from_serd_node instead if <computeroutput>str</computeroutput> is already measured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="185" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1026" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaaeeb39f050f7e68aee42d79d5c4ce621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_new_relative_uri</definition>
        <argsstring>(SordWorld *world, const uint8_t *str, const uint8_t *base_uri)</argsstring>
        <name>sord_new_relative_uri</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>base_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a URI node from a relative URI string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="192" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1033" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga465202db49656e1c1df531391a75fc15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_new_blank</definition>
        <argsstring>(SordWorld *world, const uint8_t *str)</argsstring>
        <name>sord_new_blank</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a blank node from a string.</para><para>Note this function measures <computeroutput>str</computeroutput>, which is a common bottleneck. Use sord_node_from_serd_node instead if <computeroutput>str</computeroutput> is already measured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="204" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1063" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf4a386554304e783089ba263d7537932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_new_literal</definition>
        <argsstring>(SordWorld *world, SordNode *datatype, const uint8_t *str, const char *lang)</argsstring>
        <name>sord_new_literal</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a literal node from a string.</para><para>Note this function measures <computeroutput>str</computeroutput>, which is a common bottleneck. Use sord_node_from_serd_node instead if <computeroutput>str</computeroutput> is already measured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="214" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1091" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga719bb3ccc2c8091b1ae7b4266f65890a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_node_copy</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_copy</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a node (obtain a reference).</para><para>Node that since nodes are interned and reference counted, this does not actually create a deep copy of <computeroutput>node</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="227" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1193" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga89d2f20cde1d09361a73f596ba45b57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_node_free</definition>
        <argsstring>(SordWorld *world, SordNode *node)</argsstring>
        <name>sord_node_free</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a node (drop a reference). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="234" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1180" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga34de2b7b44fbd614e7831c9c1b6d114e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga69e82f5abb700cfbde0c9ee8d3574154" kindref="member">SordNodeType</ref></type>
        <definition>SORD_API SordNodeType sord_node_get_type</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the type of a node (SORD_URI, SORD_BLANK, or SORD_LITERAL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="241" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="921" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaaac09d1114d46785f01bed6e48728c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
        <definition>SORD_API const uint8_t* sord_node_get_string</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_string</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the string value of a node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="248" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="937" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga414bd4926765816493f35b42b008e30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
        <definition>SORD_API const uint8_t* sord_node_get_string_counted</definition>
        <argsstring>(const SordNode *node, size_t *len)</argsstring>
        <name>sord_node_get_string_counted</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the string value of a node, and set <computeroutput>len</computeroutput> to its length. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="255" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="943" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga0f0d52d14ece45c5b8b4c28e0d885798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>SORD_API const char* sord_node_get_language</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_language</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the language of a literal node (or NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="262" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="950" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaa6fd74ff5079ab6d60d174eedc373b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_node_get_datatype</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_datatype</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the datatype URI of a literal node (or NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="269" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="959" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga46af5ce521ba3e558cc4bcfd3b61d4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__serd_1gafa75ae761bd7490db787b2f9e237595a" kindref="member">SerdNodeFlags</ref></type>
        <definition>SORD_API SerdNodeFlags sord_node_get_flags</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_get_flags</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the flags (string attributes) of a node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="276" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="965" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gae686e38224ff87bd0946b21e84fef1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_node_is_inline_object</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_is_inline_object</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff node can be serialised as an inline object.</para><para>More specifically, this returns true iff the node is the object field of exactly one statement, and therefore can be inlined since it needn&apos;t be referred to by name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="287" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="971" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga7b57ce59639dbf22e48d59e71667b6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_node_equals</definition>
        <argsstring>(const SordNode *a, const SordNode *b)</argsstring>
        <name>sord_node_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>a</computeroutput> is equal to <computeroutput>b</computeroutput>.</para><para>Note this is much faster than comparing the node&apos;s strings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="296" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga497e0859abcc9e6e39c5bcbfcc7c9f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
        <definition>SORD_API const SerdNode* sord_node_to_serd_node</definition>
        <argsstring>(const SordNode *node)</argsstring>
        <name>sord_node_to_serd_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a SordNode as a <ref refid="struct_serd_node" kindref="compound">SerdNode</ref>.</para><para>The returned node is shared and must not be freed or modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="306" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1174" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9367640305491801ab3bed714aeb5448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_node_from_serd_node</definition>
        <argsstring>(SordWorld *world, SerdEnv *env, const SerdNode *node, const SerdNode *datatype, const SerdNode *lang)</argsstring>
        <name>sord_node_from_serd_node</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new SordNode from a <ref refid="struct_serd_node" kindref="compound">SerdNode</ref>.</para><para>The returned node must be freed using sord_node_free. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="315" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1103" bodyend="1171"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Model</header>
      <memberdef kind="function" id="group__sord_1gac2d10de1c3b21b17c2d7eed4a5c7fd55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
        <definition>SORD_API SordModel* sord_new</definition>
        <argsstring>(SordWorld *world, unsigned indices, bool graphs)</argsstring>
        <name>sord_new</name>
        <param>
          <type><ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>graphs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new model.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>The world in which to make this model.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>SordIndexOption flags (e.g. SORD_SPO|SORD_OPS). Be sure to enable an index where the most significant <ref refid="structnode" kindref="compound">node(s)</ref> are not variables in your queries (e.g. to make (? P O) queries, enable either SORD_OPS or SORD_POS).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graphs</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, store (and index) graph contexts. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="340" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="629" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9e43e4eb96045ce7a07997267c813a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_free</definition>
        <argsstring>(SordModel *model)</argsstring>
        <name>sord_free</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close and free <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="349" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="713" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga27a0540b02602c5aeb3db056f903e6af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
        <definition>SORD_API SordWorld* sord_get_world</definition>
        <argsstring>(SordModel *model)</argsstring>
        <name>sord_get_world</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the world associated with <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="356" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga97b4cb950f59a16efec5767c80f03a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> size_t</type>
        <definition>SORD_API size_t sord_num_nodes</definition>
        <argsstring>(const SordWorld *world)</argsstring>
        <name>sord_num_nodes</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga133d918ec58f829198b2cf65f250ed69" kindref="member">SordWorld</ref> *</type>
          <declname>world</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of nodes stored in <computeroutput>world</computeroutput>.</para><para>Nodes are included in this count iff they are a part of a quad in <computeroutput>world</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="365" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="757" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga8f9c599ef7e60a5fd0af126a5f983cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> size_t</type>
        <definition>SORD_API size_t sord_num_quads</definition>
        <argsstring>(const SordModel *model)</argsstring>
        <name>sord_num_quads</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of quads stored in <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="372" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="751" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf85f5c99b6cb5a6f2a7267d86cc17de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>SORD_API SordIter* sord_begin</definition>
        <argsstring>(const SordModel *model)</argsstring>
        <name>sord_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an iterator to the start of <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="379" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="763" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga76e5cc69be0fb45c8cdfb4c9a2450fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>SORD_API SordIter* sord_find</definition>
        <argsstring>(SordModel *model, const SordQuad pat)</argsstring>
        <name>sord_find</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>pat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for statements by a quad pattern. <simplesect kind="return"><para>an iterator to the first match, or NULL if no matches found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="387" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="809" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga2e4c3af6cfb6ef748e9f934669c06312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
        <definition>SORD_API SordIter* sord_search</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_search</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for statements by nodes. <simplesect kind="return"><para>an iterator to the first match, or NULL if no matches found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="395" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="841" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga1f930d35ae80d0f5cb9bb3122a4d8152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API SordNode* sord_get</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_get</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for a single node that matches a pattern. Exactly one of <computeroutput>s</computeroutput>, <computeroutput>p</computeroutput>, <computeroutput>o</computeroutput> must be NULL. This function is mainly useful for predicates that only have one value. The returned node must be freed using sord_node_free. <simplesect kind="return"><para>the first matching node, or NULL if no matches are found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="409" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="852" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gadd60c013214cb56e8b4f1ba0f245e696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_ask</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_ask</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff a statement exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="420" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="877" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga6c1d2d5abb7216c424d14611140954be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>SORD_API uint64_t sord_count</definition>
        <argsstring>(SordModel *model, const SordNode *s, const SordNode *p, const SordNode *o, const SordNode *g)</argsstring>
        <name>sord_count</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of matching statements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="431" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="888" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga27c89030392c62427533afd03a64a4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_contains</definition>
        <argsstring>(SordModel *model, const SordQuad pat)</argsstring>
        <name>sord_contains</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>pat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if <computeroutput>model</computeroutput> contains a triple pattern. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="442" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="904" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf302459de8a5474600b6f3e0eb4ea3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_add</definition>
        <argsstring>(SordModel *model, const SordQuad quad)</argsstring>
        <name>sord_add</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>quad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a quad to a model. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="449" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1209" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga15109faf500fa7d7e898e319bdb67c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_remove</definition>
        <argsstring>(SordModel *model, const SordQuad quad)</argsstring>
        <name>sord_remove</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>quad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a quad from a model.</para><para>Note that is it illegal to remove while iterating over <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="458" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="1239" bodyend="1265"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inserter</header>
      <memberdef kind="function" id="group__sord_1gabc6475c35efee1928bf84be7ba248b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__sord_1ga766743eaebfadb5a5a5d94af6226eb75" kindref="member">SordInserter</ref> *</type>
        <definition>SORD_API SordInserter* sord_inserter_new</definition>
        <argsstring>(SordModel *model, SerdEnv *env)</argsstring>
        <name>sord_inserter_new</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an inserter for writing statements to a model. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="471" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaeb4b9a6c189853b1ca4f589933014744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_inserter_free</definition>
        <argsstring>(SordInserter *inserter)</argsstring>
        <name>sord_inserter_free</name>
        <param>
          <type><ref refid="group__sord_1ga766743eaebfadb5a5a5d94af6226eb75" kindref="member">SordInserter</ref> *</type>
          <declname>inserter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an inserter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="479" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gaf319ea2490efb4721170e544791d130f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__serd_1ga104d544e48b6282ef2447bb3ac7c330d" kindref="member">SerdStatus</ref></type>
        <definition>SORD_API SerdStatus sord_inserter_set_base_uri</definition>
        <argsstring>(SordInserter *inserter, const SerdNode *uri)</argsstring>
        <name>sord_inserter_set_base_uri</name>
        <param>
          <type><ref refid="group__sord_1ga766743eaebfadb5a5a5d94af6226eb75" kindref="member">SordInserter</ref> *</type>
          <declname>inserter</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current base URI for writing to the model.</para><para>Note this function can be safely casted to SerdBaseSink. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="488" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga0123e49d8644f57361fcd95f7ee0f178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__serd_1ga104d544e48b6282ef2447bb3ac7c330d" kindref="member">SerdStatus</ref></type>
        <definition>SORD_API SerdStatus sord_inserter_set_prefix</definition>
        <argsstring>(SordInserter *inserter, const SerdNode *name, const SerdNode *uri)</argsstring>
        <name>sord_inserter_set_prefix</name>
        <param>
          <type><ref refid="group__sord_1ga766743eaebfadb5a5a5d94af6226eb75" kindref="member">SordInserter</ref> *</type>
          <declname>inserter</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a namespace prefix for writing to the model.</para><para>Note this function can be safely casted to SerdPrefixSink. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="498" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9fb240d01d6516ba071b7217d792ef68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__serd_1ga104d544e48b6282ef2447bb3ac7c330d" kindref="member">SerdStatus</ref></type>
        <definition>SORD_API SerdStatus sord_inserter_write_statement</definition>
        <argsstring>(SordInserter *inserter, SerdStatementFlags flags, const SerdNode *graph, const SerdNode *subject, const SerdNode *predicate, const SerdNode *object, const SerdNode *object_datatype, const SerdNode *object_lang)</argsstring>
        <name>sord_inserter_write_statement</name>
        <param>
          <type><ref refid="group__sord_1ga766743eaebfadb5a5a5d94af6226eb75" kindref="member">SordInserter</ref> *</type>
          <declname>inserter</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1ga77f5ab7cef4fbc88591eaa9970fcddad" kindref="member">SerdStatementFlags</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>object_datatype</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_serd_node" kindref="compound">SerdNode</ref> *</type>
          <declname>object_lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a statement to the model.</para><para>Note this function can be safely casted to SerdStatementSink. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="509" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="63" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iteration</header>
      <memberdef kind="function" id="group__sord_1ga87ae8158572802b02a1d3f81fb20e54a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_iter_get</definition>
        <argsstring>(const SordIter *iter, SordQuad quad)</argsstring>
        <name>sord_iter_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>quad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set <computeroutput>quad</computeroutput> to the quad pointed to by <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="529" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="435" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga34db8db692181aca9ffc5506861f95cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>SORD_API const SordNode* sord_iter_get_node</definition>
        <argsstring>(const SordIter *iter, SordQuadIndex index)</argsstring>
        <name>sord_iter_get_node</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1gad8ed181fe76f9085ba4188988527c633" kindref="member">SordQuadIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a field of the quad pointed to by <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="536" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gae1b0324b3bda64356fd9c351035d53b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
        <definition>SORD_API const SordModel* sord_iter_get_model</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_get_model</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the store pointed to by <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="543" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga9e505568184171df51514d436bff4a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_iter_next</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_next</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment <computeroutput>iter</computeroutput> to point to the next statement. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="550" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="450" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga287f3764973d96c2f1df566abf569f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_iter_end</definition>
        <argsstring>(const SordIter *iter)</argsstring>
        <name>sord_iter_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>iter</computeroutput> is at the end of its range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="557" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga6450c3214e90ffffc47f756e66d66037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>SORD_API void sord_iter_free</definition>
        <argsstring>(SordIter *iter)</argsstring>
        <name>sord_iter_free</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free <computeroutput>iter</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="564" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="514" bodyend="520"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Utilities</header>
      <memberdef kind="function" id="group__sord_1ga6276430f3de7c4c4ab8e53ef2c452f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_quad_match</definition>
        <argsstring>(const SordQuad x, const SordQuad y)</argsstring>
        <name>sord_quad_match</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1gac79773a042527877d00158c75a41bab2" kindref="member">SordQuad</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match two quads (using ID comparison only).</para><para>This function is a straightforward and fast equivalence match with wildcard support (ID 0 is a wildcard). It does not actually read node data. <simplesect kind="return"><para>true iff <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> match. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="581" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/sord.c" bodystart="287" bodyend="290"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Serialisation</header>
      <memberdef kind="function" id="group__sord_1gad18f6cefc887a7fdcd4a0a02f9c382e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="group__serd_1ga69c709eacb062f9e7777726ec80b2796" kindref="member">SerdReader</ref> *</type>
        <definition>SORD_API SerdReader* sord_new_reader</definition>
        <argsstring>(SordModel *model, SerdEnv *env, SerdSyntax syntax, SordNode *graph)</argsstring>
        <name>sord_new_reader</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaea4226dd80abea7afa05986f195d4755" kindref="member">SerdEnv</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1ga42683406fcfa9046b28dd951cefd3391" kindref="member">SerdSyntax</ref></type>
          <declname>syntax</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a reader that will read into <computeroutput>model</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="594" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="94" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1ga0f18c2f00df8b705db63df1058296a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_write</definition>
        <argsstring>(SordModel *model, SerdWriter *writer, SordNode *graph)</argsstring>
        <name>sord_write</name>
        <param>
          <type><ref refid="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" kindref="member">SordModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaaaa09490e19dff0180251f1e2524e6f0" kindref="member">SerdWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type><ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a model to a writer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="604" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__sord_1gab77fdaf578d114d670e4823a366aa039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sord_8h_1a1a2e27663366eb6ff41e062a0a880f48" kindref="member">SORD_API</ref> <ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>SORD_API bool sord_write_iter</definition>
        <argsstring>(SordIter *iter, SerdWriter *writer)</argsstring>
        <name>sord_write_iter</name>
        <param>
          <type><ref refid="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" kindref="member">SordIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type><ref refid="group__serd_1gaaaa09490e19dff0180251f1e2524e6f0" kindref="member">SerdWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a range to a writer.</para><para>This increments <computeroutput>iter</computeroutput> to its end, then frees it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="615" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/src/syntax.c" bodystart="190" bodyend="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__sord_1gad8ed181fe76f9085ba4188988527c633" prot="public" static="no">
        <name>SordQuadIndex</name>
        <enumvalue id="group__sord_1ggad8ed181fe76f9085ba4188988527c633a7329717c7624be0d208bdc20c236e33d" prot="public">
          <name>SORD_SUBJECT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subject </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggad8ed181fe76f9085ba4188988527c633a0df0a36753303d1d8a55487296a050bb" prot="public">
          <name>SORD_PREDICATE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Predicate (a.k.a. &quot;key&quot;) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggad8ed181fe76f9085ba4188988527c633a42de0f7687921dc2cd840a122636ff13" prot="public">
          <name>SORD_OBJECT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Object (a.k.a. &quot;value&quot;) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggad8ed181fe76f9085ba4188988527c633abbbc8097939ddffc0c29cf266a75ba34" prot="public">
          <name>SORD_GRAPH</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Graph (a.k.a. &quot;context&quot;) </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index into a SordQuad. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="109" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group__sord_1ga69e82f5abb700cfbde0c9ee8d3574154" prot="public" static="no">
        <name>SordNodeType</name>
        <enumvalue id="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154a7335bbadcb5084cedd7957d7d772aaa5" prot="public">
          <name>SORD_URI</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>URI </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154aa469e5ec95b931bc4c5adaa7752b9f0a" prot="public">
          <name>SORD_BLANK</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Blank node identifier </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1gga69e82f5abb700cfbde0c9ee8d3574154a9d48171e6a7a4b4533af3539052d6dfd" prot="public">
          <name>SORD_LITERAL</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Literal (string with optional lang or datatype) </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of a node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="119" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="enum" id="group__sord_1gaf490691787913fb85293d05eab00a735" prot="public" static="no">
        <name>SordIndexOption</name>
        <enumvalue id="group__sord_1ggaf490691787913fb85293d05eab00a735a51f0e1357612884f7bb7fb3ab151b3a7" prot="public">
          <name>SORD_SPO</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subject, Predicate, Object </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggaf490691787913fb85293d05eab00a735a0563a6b699e660c4af64090ea78b15f1" prot="public">
          <name>SORD_SOP</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subject, Object, Predicate </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggaf490691787913fb85293d05eab00a735a4220624a00f2828d33e1a1cd45e18634" prot="public">
          <name>SORD_OPS</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Object, Predicate, Subject </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggaf490691787913fb85293d05eab00a735aa569988c75894fb61b19640d0a0c7fd7" prot="public">
          <name>SORD_OSP</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Object, Subject, Predicate </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggaf490691787913fb85293d05eab00a735a6aeeb1ec2f793f490e7df6f40527b550" prot="public">
          <name>SORD_PSO</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Predicate, Subject, Object </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sord_1ggaf490691787913fb85293d05eab00a735a525ecd60da9d897e74b683f8b50c911d" prot="public">
          <name>SORD_POS</name>
          <initializer>= 1 &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Predicate, Object, Subject </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="128" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="128" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__sord_1ga133d918ec58f829198b2cf65f250ed69" prot="public" static="no">
        <type>struct <ref refid="struct_sord_world_impl" kindref="compound">SordWorldImpl</ref></type>
        <definition>typedef struct SordWorldImpl SordWorld</definition>
        <argsstring></argsstring>
        <name>SordWorld</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_sord" kindref="compound">Sord</ref> World. The World represents all library state, including interned strings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sord_1gaea018cfebfedd10280b1d8dd6d650a28" prot="public" static="no">
        <type>struct <ref refid="struct_sord_model_impl" kindref="compound">SordModelImpl</ref></type>
        <definition>typedef struct SordModelImpl SordModel</definition>
        <argsstring></argsstring>
        <name>SordModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_sord" kindref="compound">Sord</ref> Model.</para><para>A model is an indexed set of Quads (i.e. it can contain several RDF graphs). It may be searched using various patterns depending on which indices are enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sord_1ga766743eaebfadb5a5a5d94af6226eb75" prot="public" static="no">
        <type>struct <ref refid="struct_sord_inserter_impl" kindref="compound">SordInserterImpl</ref></type>
        <definition>typedef struct SordInserterImpl SordInserter</definition>
        <argsstring></argsstring>
        <name>SordInserter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Model Inserter.</para><para>An inserter is used for writing statements to a model using the Serd sink interface. This makes it simple to write to a model directly using a SerdReader, or any other code that writes statements to a SerdStatementSink. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sord_1ga59314650e0ab9b1cdeebc0bf7a0419fa" prot="public" static="no">
        <type>struct <ref refid="struct_sord_iter_impl" kindref="compound">SordIterImpl</ref></type>
        <definition>typedef struct SordIterImpl SordIter</definition>
        <argsstring></argsstring>
        <name>SordIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Model Iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" prot="public" static="no">
        <type>struct <ref refid="struct_sord_node_impl" kindref="compound">SordNodeImpl</ref></type>
        <definition>typedef struct SordNodeImpl SordNode</definition>
        <argsstring></argsstring>
        <name>SordNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RDF Node. A Node is a component of a Quad. Nodes may be <ref refid="struct_u_r_is" kindref="compound">URIs</ref>, blank nodes, or (in the case of quad objects only) string literals. Literal nodes may have an associate language or datatype (but not both). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sord_1gac79773a042527877d00158c75a41bab2" prot="public" static="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="group__sord_1ga804ac7d56d9fdea50f2d1e7278b1f82b" kindref="member">SordNode</ref> *</type>
        <definition>typedef const SordNode* SordQuad[4]</definition>
        <argsstring>[4]</argsstring>
        <name>SordQuad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quad of nodes (a statement), or a quad pattern.</para><para>Nodes are ordered (S P O G). The ID of the default graph is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" line="104" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sord/sord/sord.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A lightweight RDF model library.</para><para><ref refid="namespace_sord" kindref="compound">Sord</ref> stores RDF (subject object predicate context) quads, where the context may be omitted (to represent triples in the default graph). </para>    </detaileddescription>
  </compounddef>
</doxygen>
