<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavf__decoding" kind="group">
    <compoundname>lavf_decoding</compoundname>
    <title>Demuxing</title>
    <innerclass refid="struct_a_v_input_format" prot="public">AVInputFormat</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__lavf__decoding_1ga41ac82c86aa114943b700dac564d2508" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref></type>
        <definition>typedef struct AVInputFormat  AVInputFormat</definition>
        <argsstring></argsstring>
        <name>AVInputFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="676" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavf__decoding_1ga7d2f532c6653c2419b17956712fdf3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_find_input_format</definition>
        <argsstring>(const char *short_name)</argsstring>
        <name>av_find_input_format</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>short_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find <ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> based on the short name of the input format. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gad8a1268228fff3aeae0aeaa99a767a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_probe_input_format</definition>
        <argsstring>(AVProbeData *pd, int is_opened)</argsstring>
        <name>av_probe_input_format</name>
        <param>
          <type><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_opened</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the file format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pd</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be probed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_opened</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the file is already opened; determines whether demuxers with or without AVFMT_NOFILE are probed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gae8b938f6e7c3741dd27a6c171e72f33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_probe_input_format2</definition>
        <argsstring>(AVProbeData *pd, int is_opened, int *score_max)</argsstring>
        <name>av_probe_input_format2</name>
        <param>
          <type><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_opened</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>score_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the file format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pd</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be probed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_opened</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the file is already opened; determines whether demuxers with or without AVFMT_NOFILE are probed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>score_max</parametername>
</parameternamelist>
<parameterdescription>
<para>A probe score larger that this is required to accept a detection, the variable is set to the actual detection score afterwards. If the score is &lt;= AVPROBE_SCORE_MAX / 4 it is recommended to retry with a larger probe buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga7e4318244afd6c5fe55cec75d27258b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
        <definition>AVInputFormat* av_probe_input_format3</definition>
        <argsstring>(AVProbeData *pd, int is_opened, int *score_ret)</argsstring>
        <name>av_probe_input_format3</name>
        <param>
          <type><ref refid="struct_a_v_probe_data" kindref="compound">AVProbeData</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>is_opened</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>score_ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guess the file format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_opened</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the file is already opened; determines whether demuxers with or without AVFMT_NOFILE are probed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>score_ret</parametername>
</parameternamelist>
<parameterdescription>
<para>The score of the best detection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga69e44bd9ade0160a8cd6196aa37505ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_probe_input_buffer2</definition>
        <argsstring>(AVIOContext *pb, AVInputFormat **fmt, const char *filename, void *logctx, unsigned int offset, unsigned int max_probe_size)</argsstring>
        <name>av_probe_input_buffer2</name>
        <param>
          <type><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> *</type>
          <declname>pb</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> **</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>logctx</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>max_probe_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Probe a bytestream to determine the input format. Each time a probe returns with a score that is too low, the probe buffer size is increased and another attempt is made. When the maximum probe size is reached, the input format with the highest score is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pb</parametername>
</parameternamelist>
<parameterdescription>
<para>the bytestream to probe </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the input format is put here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the log context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset within the bytestream to probe from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_probe_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum probe buffer size (zero for default) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the score in case of success, a negative value corresponding to an the maximal score is AVPROBE_SCORE_MAX AVERROR code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga5ef11a57aa4ed1d55703b66d59afbd0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_probe_input_buffer</definition>
        <argsstring>(AVIOContext *pb, AVInputFormat **fmt, const char *filename, void *logctx, unsigned int offset, unsigned int max_probe_size)</argsstring>
        <name>av_probe_input_buffer</name>
        <param>
          <type><ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> *</type>
          <declname>pb</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> **</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>logctx</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>max_probe_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="group__lavf__decoding_1ga69e44bd9ade0160a8cd6196aa37505ea" kindref="member">av_probe_input_buffer2()</ref> but returns 0 on success </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_open_input</definition>
        <argsstring>(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)</argsstring>
        <name>avformat_open_input</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> **</type>
          <declname>ps</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_input_format" kindref="compound">AVInputFormat</ref> *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open an input stream and read the header. The codecs are not opened. The stream must be closed with <ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user-supplied <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> (allocated by avformat_alloc_context). May be a pointer to NULL, in which case an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> is allocated by this function and written into ps. Note that a user-supplied <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> will be freed on failure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the stream to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, this parameter forces a specific input format. Otherwise the format is autodetected. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A dictionary filled with <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> and demuxer-private options. On return this parameter will be destroyed and replaced with a dict containing options that were not found. May be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on failure.</para></simplesect>
<simplesect kind="note"><para>If you want to use custom IO, preallocate the format context and set its pb field. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga71091e146791c4d181635485447c2830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="attributes_8h_1aa6d076561d3a9eea4729ee632652de02" kindref="member">attribute_deprecated</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>attribute_deprecated int av_demuxer_open</definition>
        <argsstring>(AVFormatContext *ic)</argsstring>
        <name>av_demuxer_open</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gad42172e27cddafb81096939783b157bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_find_stream_info</definition>
        <argsstring>(AVFormatContext *ic, AVDictionary **options)</argsstring>
        <name>avformat_find_stream_info</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="group__lavu__dict_1ga1d7cc0833bee918994a600556410315f" kindref="member">AVDictionary</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read packets of a media file to get stream information. This is useful for file formats with no headers such as MPEG. This function also computes the real framerate in case of MPEG-2 repeat frame mode. The logical file position is not changed by this function; examined packets may be buffered for later processing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, an ic.nb_streams long array of pointers to dictionaries, where i-th member contains options for codec corresponding to i-th stream. On return each dictionary will be filled with options that were not found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 if OK, AVERROR_xxx on error</para></simplesect>
<simplesect kind="note"><para>this function isn&apos;t guaranteed to open all the codecs, so options being non-empty at return is a perfectly normal behavior.</para></simplesect>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Let the user decide somehow what information is needed so that we do not waste time getting stuff the user does not need. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1866" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga9edb9ac206ed05dc5baa9d168f31de48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref> *</type>
        <definition>AVProgram* av_find_program_from_stream</definition>
        <argsstring>(AVFormatContext *ic, AVProgram *last, int s)</argsstring>
        <name>av_find_program_from_stream</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_program" kindref="compound">AVProgram</ref> *</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the programs which belong to a given stream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last found program, the search will start after this program, or from the beginning if it is NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>stream index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next program which belongs to s, NULL if no program is found or the last program is not among the programs of ic. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1878" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gaa6fa468c922ff5c60a6021dcac09aff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_find_best_stream</definition>
        <argsstring>(AVFormatContext *ic, enum AVMediaType type, int wanted_stream_nb, int related_stream, AVCodec **decoder_ret, int flags)</argsstring>
        <name>av_find_best_stream</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>enum <ref refid="group__lavu__misc_1ga9a84bba4713dfced21a1a56163be1f48" kindref="member">AVMediaType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wanted_stream_nb</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>related_stream</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref> **</type>
          <declname>decoder_ret</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the &quot;best&quot; stream in the file. The best stream is determined according to various heuristics as the most likely to be what the user expects. If the decoder parameter is non-NULL, av_find_best_stream will find the default decoder for the stream&apos;s codec; streams for which no decoder can be found are ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>stream type: video, audio, subtitles, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wanted_stream_nb</parametername>
</parameternamelist>
<parameterdescription>
<para>user-requested stream number, or -1 for automatic selection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>related_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>try to find a stream related (eg. in the same program) to this one, or -1 if none </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decoder_ret</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL, returns the decoder for the selected stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags; none are currently defined </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the non-negative stream number in case of success, AVERROR_STREAM_NOT_FOUND if no stream with the requested type could be found, AVERROR_DECODER_NOT_FOUND if streams were found but no decoder </para></simplesect>
<simplesect kind="note"><para>If av_find_best_stream returns successfully and decoder_ret is not NULL, then *decoder_ret is guaranteed to be set to a valid <ref refid="struct_a_v_codec" kindref="compound">AVCodec</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_read_frame</definition>
        <argsstring>(AVFormatContext *s, AVPacket *pkt)</argsstring>
        <name>av_read_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the next frame of a stream. This function returns what is stored in the file, and does not validate that what is there are valid frames for the decoder. It will split what is stored in the file into frames and return one for each call. It will not omit invalid data between valid frames so as to give the decoder the maximum information possible for decoding.</para><para>If pkt-&gt;buf is NULL, then the packet is valid until the next <ref refid="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" kindref="member">av_read_frame()</ref> or until <ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input()</ref>. Otherwise the packet is valid indefinitely. In both cases the packet must be freed with av_free_packet when it is no longer needed. For video, the packet contains exactly one frame. For audio, it contains an integer number of frames if each frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames have a variable size (e.g. MPEG audio), then it contains one frame.</para><para>pkt-&gt;pts, pkt-&gt;dts and pkt-&gt;duration are always set to correct values in <ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">AVStream.time_base</ref> units (and guessed if the format cannot provide them). pkt-&gt;pts can be AV_NOPTS_VALUE if the video format has B-frames, so it is better to rely on pkt-&gt;dts if you do not decompress the payload.</para><para><simplesect kind="return"><para>0 if OK, &lt; 0 on error or end of file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1953" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gaa23f7619d8d4ea0857065d9979c75ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_seek_frame</definition>
        <argsstring>(AVFormatContext *s, int stream_index, int64_t timestamp, int flags)</argsstring>
        <name>av_seek_frame</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek to the keyframe at timestamp. &apos;timestamp&apos; in &apos;stream_index&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_index</parametername>
</parameternamelist>
<parameterdescription>
<para>If stream_index is (-1), a default stream is selected, and timestamp is automatically converted from AV_TIME_BASE units to the stream specific time_base. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp in <ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">AVStream.time_base</ref> units or, if no stream is specified, in AV_TIME_BASE units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags which select direction and seeking mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;= 0 on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga3b40fc8d2fda6992ae6ea2567d71ba30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int avformat_seek_file</definition>
        <argsstring>(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)</argsstring>
        <name>avformat_seek_file</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>stream_index</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>min_ts</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>max_ts</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek to timestamp ts. Seeking will be done so that the point from which all active streams can be presented successfully will be closest to ts and within min/max_ts. Active streams are all streams that have <ref refid="struct_a_v_stream_1a492fcecc45dbbd8da51edd0124e9dd30" kindref="member">AVStream.discard</ref> &lt; AVDISCARD_ALL.</para><para>If flags contain AVSEEK_FLAG_BYTE, then all timestamps are in bytes and are the file position (this may not be supported by all demuxers). If flags contain AVSEEK_FLAG_FRAME, then all timestamps are in frames in the stream with stream_index (this may not be supported by all demuxers). Otherwise all timestamps are in units of the stream selected by stream_index or if stream_index is -1, in AV_TIME_BASE units. If flags contain AVSEEK_FLAG_ANY, then non-keyframes are treated as keyframes (this may not be supported by all demuxers). If flags contain AVSEEK_FLAG_BACKWARD, it is ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>media file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the stream which is used as time base reference </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>smallest acceptable timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>target timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>largest acceptable timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;=0 on success, error code otherwise</para></simplesect>
<simplesect kind="note"><para>This is part of the new seek API which is still under construction. Thus do not use this yet. It may change at any time, do not expect ABI compatibility yet! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="1999" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga7494bb63a59e79e9fe88eb1682d4d7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_read_play</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_read_play</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start playing a network-based stream (e.g. RTSP stream) at the current position. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2005" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1ga27db687592d99f25ccf81a3b3ee8da9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_read_pause</definition>
        <argsstring>(AVFormatContext *s)</argsstring>
        <name>av_read_pause</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pause a network-based stream (e.g. RTSP stream).</para><para>Use <ref refid="group__lavf__decoding_1ga7494bb63a59e79e9fe88eb1682d4d7b3" kindref="member">av_read_play()</ref> to resume it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void avformat_close_input</definition>
        <argsstring>(AVFormatContext **s)</argsstring>
        <name>avformat_close_input</name>
        <param>
          <type><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> **</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close an opened input <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>. Free it and all its contents and set *s to NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavformat/avformat.h" line="2029" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Demuxers read a media file and split it into chunks of data (<emphasis>packets</emphasis>). A <ref refid="struct_a_v_packet" kindref="compound">packet</ref> contains one or more encoded frames which belongs to a single elementary stream. In the lavf API this process is represented by the <ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input()</ref> function for opening a file, <ref refid="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" kindref="member">av_read_frame()</ref> for reading a single packet and finally <ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input()</ref>, which does the cleanup.</para><sect1 id="group__lavf__decoding_1lavf_decoding_open">
<title>Opening a media file</title>
<para>The minimum information required to open a file is its URL or filename, which is passed to <ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input()</ref>, as in the following code: <programlisting><codeline><highlight class="normal">const<sp/>char<sp/><sp/><sp/><sp/>*url<sp/>=<sp/>&quot;in.mp3&quot;;</highlight></codeline>
<codeline><highlight class="normal">AVFormatContext<sp/>*s<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>ret<sp/>=<sp/>avformat_open_input(&amp;s,<sp/>url,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(ret<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
</programlisting> The above code attempts to allocate an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>, open the specified file (autodetecting the format) and read the header, exporting the information stored there into s. Some formats do not have a header or do not store enough information there, so it is recommended that you call the <ref refid="group__lavf__decoding_1gad42172e27cddafb81096939783b157bb" kindref="member">avformat_find_stream_info()</ref> function which tries to read and decode a few frames to find missing information.</para><para>In some cases you might want to preallocate an <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> yourself with <ref refid="group__lavf__core_1gac7a91abf2f59648d995894711f070f62" kindref="member">avformat_alloc_context()</ref> and do some tweaking on it before passing it to <ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input()</ref>. One such case is when you want to use custom functions for reading input data instead of lavf internal I/O layer. To do that, create your own <ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref> with <ref refid="avio_8h_1a853f5149136a27ffba3207d8520172a5" kindref="member">avio_alloc_context()</ref>, passing your reading callbacks to it. Then set the <emphasis>pb</emphasis> field of your <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> to newly created <ref refid="struct_a_v_i_o_context" kindref="compound">AVIOContext</ref>.</para><para>Since the format of the opened file is in general not known until after <ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input()</ref> has returned, it is not possible to set demuxer private options on a preallocated context. Instead, the options should be passed to <ref refid="group__lavf__decoding_1ga10a404346c646e4ab58f4ed798baca32" kindref="member">avformat_open_input()</ref> wrapped in an AVDictionary: <programlisting><codeline><highlight class="normal">AVDictionary<sp/>*options<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">av_dict_set(&amp;options,<sp/>&quot;video_size&quot;,<sp/>&quot;640x480&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">av_dict_set(&amp;options,<sp/>&quot;pixel_format&quot;,<sp/>&quot;rgb24&quot;,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(avformat_open_input(&amp;s,<sp/>url,<sp/>NULL,<sp/>&amp;options)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline><highlight class="normal">av_dict_free(&amp;options);</highlight></codeline>
</programlisting> This code passes the private options &apos;video_size&apos; and &apos;pixel_format&apos; to the demuxer. They would be necessary for e.g. the rawvideo demuxer, since it cannot know how to interpret raw video data otherwise. If the format turns out to be something different than raw video, those options will not be recognized by the demuxer and therefore will not be applied. Such unrecognized options are then returned in the options dictionary (recognized options are consumed). The calling program can handle such unrecognized options as it wishes, e.g. <programlisting><codeline><highlight class="normal">AVDictionaryEntry<sp/>*e;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(e<sp/>=<sp/>av_dict_get(options,<sp/>&quot;&quot;,<sp/>NULL,<sp/>AV_DICT_IGNORE_SUFFIX))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Option<sp/>%s<sp/>not<sp/>recognized<sp/>by<sp/>the<sp/>demuxer.\n&quot;,<sp/>e-&gt;key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>After you have finished reading the file, you must close it with <ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input()</ref>. It will free everything associated with the file.</para></sect1>
<sect1 id="group__lavf__decoding_1lavf_decoding_read">
<title>Reading from an opened file</title>
<para>Reading data from an opened <ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref> is done by repeatedly calling <ref refid="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" kindref="member">av_read_frame()</ref> on it. Each call, if successful, will return an <ref refid="struct_a_v_packet" kindref="compound">AVPacket</ref> containing encoded data for one <ref refid="struct_a_v_stream" kindref="compound">AVStream</ref>, identified by <ref refid="struct_a_v_packet_1a0d1cb9b5a32b00fb6edc81ea3aae2a49" kindref="member">AVPacket.stream_index</ref>. This packet may be passed straight into the libavcodec decoding functions <ref refid="group__lavc__decoding_1ga99ee61b6dcffb7817a275d39da58cc74" kindref="member">avcodec_decode_video2()</ref>, <ref refid="group__lavc__decoding_1ga834bb1b062fbcc2de4cf7fb93f154a3e" kindref="member">avcodec_decode_audio4()</ref> or <ref refid="group__lavc__decoding_1ga47db1b7f294b9f92684401b9c66a7c4b" kindref="member">avcodec_decode_subtitle2()</ref> if the caller wishes to decode the data.</para><para><ref refid="struct_a_v_packet_1a73bde0a37f3b1efc839f11295bfbf42a" kindref="member">AVPacket.pts</ref>, <ref refid="struct_a_v_packet_1a85dbbd306b44b02390cd91c45e6a0f76" kindref="member">AVPacket.dts</ref> and <ref refid="struct_a_v_packet_1af151ba1967c37038088883cd544eeacd" kindref="member">AVPacket.duration</ref> timing information will be set if known. They may also be unset (i.e. AV_NOPTS_VALUE for pts/dts, 0 for duration) if the stream does not provide them. The timing information will be in <ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">AVStream.time_base</ref> units, i.e. it has to be multiplied by the timebase to convert them to seconds.</para><para>If <ref refid="struct_a_v_packet_1a3bf81872813551fe9343dd0e09993e38" kindref="member">AVPacket.buf</ref> is set on the returned packet, then the packet is allocated dynamically and the user may keep it indefinitely. Otherwise, if <ref refid="struct_a_v_packet_1a3bf81872813551fe9343dd0e09993e38" kindref="member">AVPacket.buf</ref> is NULL, the packet data is backed by a static storage somewhere inside the demuxer and the packet is only valid until the next <ref refid="group__lavf__decoding_1ga4fdb3084415a82e3810de6ee60e46a61" kindref="member">av_read_frame()</ref> call or closing the file. If the caller requires a longer lifetime, <ref refid="group__lavc__packet_1ga04c83bc8a685960564a169f3a050b915" kindref="member">av_dup_packet()</ref> will make an <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref>ed copy of it. In both cases, the packet must be freed with <ref refid="group__lavc__packet_1gae65881462e78f98b268f34661d921ee0" kindref="member">av_free_packet()</ref> when it is no longer needed.</para></sect1>
<sect1 id="group__lavf__decoding_1lavf_decoding_seek">
<title>Seeking</title>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
