<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="audioreader_8cpp" kind="file" language="C++">
    <compoundname>audioreader.cpp</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="sautils_8h" local="yes">sautils.h</includes>
    <includes local="no">fstream</includes>
    <includes refid="allegro_8h" local="yes">allegro.h</includes>
    <includes refid="audioreader_8h" local="yes">audioreader.h</includes>
    <includes refid="scorealign_8h" local="yes">scorealign.h</includes>
    <incdepgraph>
      <node id="19050">
        <label>allegro.h</label>
        <link refid="allegro_8h"/>
        <childnode refid="19043" relation="include">
        </childnode>
        <childnode refid="19051" relation="include">
        </childnode>
        <childnode refid="19052" relation="include">
        </childnode>
      </node>
      <node id="19044">
        <label>stdlib.h</label>
      </node>
      <node id="19042">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/audioreader.cpp</label>
        <link refid="audioreader.cpp"/>
        <childnode refid="19043" relation="include">
        </childnode>
        <childnode refid="19044" relation="include">
        </childnode>
        <childnode refid="19045" relation="include">
        </childnode>
        <childnode refid="19046" relation="include">
        </childnode>
        <childnode refid="19047" relation="include">
        </childnode>
        <childnode refid="19048" relation="include">
        </childnode>
        <childnode refid="19049" relation="include">
        </childnode>
        <childnode refid="19050" relation="include">
        </childnode>
        <childnode refid="19053" relation="include">
        </childnode>
        <childnode refid="19054" relation="include">
        </childnode>
      </node>
      <node id="19054">
        <label>scorealign.h</label>
        <link refid="scorealign_8h"/>
      </node>
      <node id="19053">
        <label>audioreader.h</label>
        <link refid="audioreader_8h"/>
      </node>
      <node id="19043">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="19049">
        <label>fstream</label>
      </node>
      <node id="19052">
        <label>ostream</label>
      </node>
      <node id="19046">
        <label>string.h</label>
      </node>
      <node id="19047">
        <label>math.h</label>
      </node>
      <node id="19048">
        <label>sautils.h</label>
        <link refid="sautils_8h"/>
      </node>
      <node id="19045">
        <label>stdio.h</label>
      </node>
      <node id="19051">
        <label>istream</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>audioreader.cpp<sp/>--<sp/>reads<sp/>sequence<sp/>of<sp/>overlapping<sp/>windows</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>14-Jul-08<sp/><sp/>RBD</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sautils_8h" kindref="compound">sautils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="allegro_8h" kindref="compound">allegro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="audioreader_8h" kindref="compound">audioreader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scorealign_8h" kindref="compound">scorealign.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_audio__reader_1ae91a82ce414add504469c6423618098c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_audio__reader_1ae91a82ce414add504469c6423618098c" kindref="member">Audio_reader::read_window</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reads<sp/>the<sp/>next<sp/>window<sp/>of<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>first<sp/>time,<sp/>fill<sp/>half<sp/>the<sp/>window<sp/>with<sp/>zeros<sp/>and<sp/>the<sp/>second<sp/>half<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>data<sp/>from<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>that,<sp/>shift<sp/>the<sp/>window<sp/>by<sp/>hop_size<sp/>and<sp/>fill<sp/>the<sp/>end<sp/>of<sp/>the<sp/>window<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>with<sp/>hop_size<sp/>new<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>window<sp/>is<sp/>actually<sp/>constructed<sp/>in<sp/>temp_data,<sp/>then<sp/>copied<sp/>to<sp/>data.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>That<sp/>way,<sp/>the<sp/>caller<sp/>can<sp/>apply<sp/>a<sp/>smoothing<sp/>function<sp/>to<sp/>data<sp/>and<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>still<sp/>have<sp/>a<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>returns<sp/>false<sp/>on<sp/>the<sp/>next<sp/>call<sp/>when<sp/>detecting<sp/>that<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>is<sp/>no<sp/>more<sp/>samples,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data<sp/>--<sp/>the<sp/>window<sp/>to<sp/>be<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>temp_data<sp/>--<sp/>since<sp/>we<sp/>destroy<sp/>data<sp/>by<sp/>windowing,<sp/>temp_data<sp/>saves<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>overlapping<sp/>samples<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>read<sp/>them<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>samples_per_frame<sp/>--<sp/>must<sp/>be<sp/>even,<sp/>note<sp/>that<sp/>first<sp/>window<sp/>is<sp/>padded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>half-full<sp/>with<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hop_samples<sp/>--<sp/>additional<sp/>samples<sp/>read<sp/>each<sp/>time<sp/>after<sp/>the<sp/>first<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frames_read;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>frames<sp/>did<sp/>we<sp/>read?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hop<sp/>=<sp/>hop_samples;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reading_first_window)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hop<sp/>=<sp/>samples_per_frame<sp/>/<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>time<sp/>we<sp/>read<sp/>more<sp/>data<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>end<sp/>of<sp/>temp_data,<sp/>which<sp/>will<sp/>shift<sp/>to<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(temp_data<sp/>+<sp/>hop,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>(samples_per_frame<sp/>-<sp/>hop));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reading_first_window<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>reading<sp/>in<sp/>new<sp/>sounds,<sp/>shift<sp/>temp_data<sp/>by<sp/>hop_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(temp_data,<sp/>temp_data<sp/>+<sp/>hop,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(samples_per_frame<sp/>-<sp/>hop)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>frames_read<sp/>=<sp/>read(temp_data<sp/>+<sp/>samples_per_frame<sp/>-<sp/>hop,<sp/>hop);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>any<sp/>leftovers<sp/>(happens<sp/>at<sp/>last<sp/>frame):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;check<sp/>fr<sp/>%i<sp/><sp/>hs<sp/>%i<sp/>ws<sp/>%i<sp/>&quot;,frames_read,hop_size,window_size);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(temp_data<sp/>+<sp/>samples_per_frame<sp/>-<sp/>hop<sp/>+<sp/>frames_read,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>(hop<sp/>-<sp/>frames_read));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(samples_per_frame<sp/>-<sp/>frames_read<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>copy<sp/>temp_data<sp/>to<sp/>data<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/>temp_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>samples_per_frame);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames_read<sp/>!=<sp/>hop<sp/>&amp;&amp;<sp/>reading_last_window<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reading_last_window<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reading_last_window<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="class_audio__reader_1ab1f926053058d6bbc6ebf869aeb8d6bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_audio__reader_1ab1f926053058d6bbc6ebf869aeb8d6bc" kindref="member">Audio_reader::calculate_parameters</ref>(<ref refid="class_scorealign" kindref="compound">Scorealign</ref><sp/>&amp;<ref refid="lib-src_2libscorealign_2main_8cpp_1a1aa9083626d69f94349750d974f0359a" kindref="member">sa</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mm_8c_1ab421ea2a103f8a57c338dc30e3cf4f6b" kindref="member">verbose</ref>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sample_rate<sp/>=<sp/>get_sample_rate();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pcm_frames<sp/>=<sp/>get_frames();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>make<sp/>sure<sp/>samples_per_frame<sp/>is<sp/>even,<sp/>to<sp/>keep<sp/>things<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consistent<sp/>we&apos;ll<sp/>change<sp/>hopsize_samples<sp/>the<sp/>same<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>samples_per_frame<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(sa.<ref refid="class_scorealign_1a303f57cd6200fd229f7f92fb0bfa95bc" kindref="member">window_size</ref><sp/>*<sp/>sample_rate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples_per_frame<sp/>%<sp/>2<sp/>==<sp/>1)<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_per_frame<sp/>=<sp/>samples_per_frame<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*=============================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>hop_samples<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)(sa.<ref refid="class_scorealign_1a47f51125e3cb2018d1baa349be161be7" kindref="member">frame_period</ref><sp/>*<sp/>sample_rate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hop_samples<sp/>%<sp/>2<sp/>==<sp/>1)<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hop_samples<sp/>=<sp/>hop_samples<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_frame_period<sp/>=<sp/>(hop_samples<sp/>/<sp/>sample_rate);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>stored<sp/>back<sp/>in<sp/>a<sp/>field<sp/>in<sp/>sa<sp/>as<sp/>well<sp/>as<sp/>here<sp/>in<sp/>the<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>frame_count=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>ceil(((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>pcm_frames<sp/>/<sp/>hop_samples<sp/>+<sp/>1));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;frame_count<sp/>=<sp/>frame_count;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_data<sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>samples_per_frame);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(temp_data,<sp/>0,<sp/>samples_per_frame<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(temp_data[0]));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(temp_data);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/audioreader.cpp"/>
  </compounddef>
</doxygen>
