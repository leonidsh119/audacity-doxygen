<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="2-stream_8_c" kind="file" language="C++">
    <compoundname>2-stream.C</compoundname>
    <includes refid="soxr_8h" local="no">soxr.h</includes>
    <includes refid="examples-common_8h" local="yes">examples-common.h</includes>
    <incdepgraph>
      <node id="21007">
        <label>stdlib.h</label>
      </node>
      <node id="21003">
        <label>errno.h</label>
      </node>
      <node id="21000">
        <label>stddef.h</label>
      </node>
      <node id="21002">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="21004">
        <label>limits.h</label>
      </node>
      <node id="21008">
        <label>string.h</label>
      </node>
      <node id="20998">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/2-stream.C</label>
        <link refid="2-stream.C"/>
        <childnode refid="20999" relation="include">
        </childnode>
        <childnode refid="21001" relation="include">
        </childnode>
      </node>
      <node id="21005">
        <label>math.h</label>
      </node>
      <node id="21001">
        <label>examples-common.h</label>
        <link refid="examples-common_8h"/>
        <childnode refid="21002" relation="include">
        </childnode>
        <childnode refid="21003" relation="include">
        </childnode>
        <childnode refid="21004" relation="include">
        </childnode>
        <childnode refid="21005" relation="include">
        </childnode>
        <childnode refid="21000" relation="include">
        </childnode>
        <childnode refid="21006" relation="include">
        </childnode>
        <childnode refid="21007" relation="include">
        </childnode>
        <childnode refid="21008" relation="include">
        </childnode>
      </node>
      <node id="20999">
        <label>soxr.h</label>
        <link refid="soxr_8h"/>
        <childnode refid="21000" relation="include">
        </childnode>
      </node>
      <node id="21006">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="2-stream_8_c_1a58c391d4fe581fb9e15cf5c89099f1d7" prot="public" static="no">
        <name>buf_total_len</name>
        <initializer>15000  /* <ref refid="devicetopology_8h_1aab6c7474a070d22bf61ccf21b532412fad8ff8dfc9381018e97fce86d909f8975" kindref="member">In</ref> samples. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/2-stream.C" line="25" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="2-stream_8_c_1afe6cf7ee8dc50d0bc3da26fd0a7c7d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int main</definition>
        <argsstring>(int argc, char const *arg[])</argsstring>
        <name>main</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>arg</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/2-stream.C" line="18" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/2-stream.C" bodystart="18" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>SoX<sp/>Resampler<sp/>Library<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2007-13<sp/>robs@users.sourceforge.net</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licence<sp/>for<sp/>this<sp/>file:<sp/>LGPL<sp/>v2.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>LICENCE<sp/>for<sp/>details.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Example<sp/>2:<sp/>resample<sp/>a<sp/>raw,<sp/>single-channel,<sp/>floating-point<sp/>data<sp/>stream<sp/>from</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>stdin<sp/>to<sp/>stdout.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>The<sp/>application<sp/>uses<sp/>the<sp/>single<sp/>function<sp/>`soxr_process&apos;<sp/>for<sp/>both<sp/>input<sp/>and</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>output<sp/>to/from<sp/>the<sp/>resampler;<sp/>compared<sp/>to<sp/>the<sp/>`input<sp/>function&apos;<sp/>approach</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(illustrated<sp/>in<sp/>example<sp/>3)<sp/>this<sp/>requires<sp/>that<sp/>the<sp/>application<sp/>implements</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>more<sp/>logic,<sp/>but<sp/>one<sp/>less<sp/>function.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Arguments<sp/>are:<sp/>INPUT-RATE<sp/>OUTPUT-RATE</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="soxr_8h" kindref="compound">soxr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="examples-common_8h" kindref="compound">examples-common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="2-stream_8_c_1afe6cf7ee8dc50d0bc3da26fd0a7c7d67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="2-stream_8_c_1afe6cf7ee8dc50d0bc3da26fd0a7c7d67" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cmdline_8c_1aaffeb1bf2056ea44af5b5d0ee4d6ff07" kindref="member">argc</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>arg[])</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>irate<sp/>=<sp/>argc<sp/>&gt;<sp/>1?<sp/><ref refid="xlread_8c_1ad37d469faf1f38a3c35d1253575a513a" kindref="member">atof</ref>(arg[1])<sp/>:<sp/>96000.;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>orate<sp/>=<sp/>argc<sp/>&gt;<sp/>2?<sp/><ref refid="xlread_8c_1ad37d469faf1f38a3c35d1253575a513a" kindref="member">atof</ref>(arg[2])<sp/>:<sp/>44100.;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>resampling<sp/>input<sp/>and<sp/>output<sp/>buffers<sp/>in<sp/>proportion<sp/>to<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>output<sp/>rates:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>buf_total_len<sp/>15000<sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>samples.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>olen<sp/>=<sp/>(size_t)(orate<sp/>*<sp/><ref refid="2-stream_8_c_1a58c391d4fe581fb9e15cf5c89099f1d7" kindref="member">buf_total_len</ref><sp/>/<sp/>(irate<sp/>+<sp/>orate)<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ilen<sp/>=<sp/><ref refid="2-stream_8_c_1a58c391d4fe581fb9e15cf5c89099f1d7" kindref="member">buf_total_len</ref><sp/>-<sp/>olen;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>osize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float),<sp/>isize<sp/>=<sp/>osize;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>obuf<sp/>=<sp/>malloc(osize<sp/>*<sp/>olen);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ibuf<sp/>=<sp/>malloc(isize<sp/>*<sp/>ilen);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>odone,<sp/>written,<sp/>need_input<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="soxr_8h_1a9c0f6f8249a04c1ccb71881e2b0b6937" kindref="member">soxr_error_t</ref><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>stream<sp/>resampler:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="structsoxr" kindref="compound">soxr_t</ref><sp/><ref refid="structsoxr" kindref="compound">soxr</ref><sp/>=<sp/><ref refid="soxr_8c_1a763983e4a1f00869383ba22421b768e5" kindref="member">soxr_create</ref>(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>irate,<sp/>orate,<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>rate,<sp/>output<sp/>rate,<sp/>#<sp/>of<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;error,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>report<sp/>any<sp/>error<sp/>during<sp/>creation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>configuration<sp/>defaults.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>all<sp/>is<sp/>well,<sp/>run<sp/>the<sp/>resampler:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="examples-common_8h_1ae8f98482924f7cbfd7a7b7f926b9bb17" kindref="member">USE_STD_STDIO</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Resample<sp/>in<sp/>blocks:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_input)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>one<sp/>block<sp/>into<sp/>the<sp/>buffer,<sp/>ready<sp/>to<sp/>be<sp/>resampled:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilen1<sp/>=<sp/>fread(ibuf,<sp/>isize,<sp/>ilen,<sp/>stdin);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ilen1)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>is<sp/>no<sp/>(more)<sp/>input<sp/>data<sp/>available,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ibuf);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>ibuf<sp/>to<sp/>NULL,<sp/>to<sp/>indicate<sp/>end-of-input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibuf<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>the<sp/>resampler.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>data<sp/>from<sp/>the<sp/>input<sp/>buffer<sp/>into<sp/>the<sp/>resampler,<sp/>and<sp/>resample</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>produce<sp/>as<sp/>much<sp/>output<sp/>as<sp/>is<sp/>possible<sp/>to<sp/>the<sp/>given<sp/>output<sp/>buffer:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/><ref refid="soxr_8c_1a853769187cb96f9e89aadcfe8a0deb10" kindref="member">soxr_process</ref>(soxr,<sp/>ibuf,<sp/>ilen1,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>obuf,<sp/>olen,<sp/>&amp;odone);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>written<sp/>=<sp/>fwrite(obuf,<sp/>osize,<sp/>odone,<sp/><ref refid="namespacewaflib_1_1ansiterm_1acf95a6e21629de2ca2b5716f5089f3f0" kindref="member">stdout</ref>);<sp/></highlight><highlight class="comment">/*<sp/>Consume<sp/>output.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>actual<sp/>amount<sp/>of<sp/>data<sp/>output<sp/>is<sp/>less<sp/>than<sp/>that<sp/>requested,<sp/>and</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>have<sp/>not<sp/>already<sp/>reached<sp/>the<sp/>end<sp/>of<sp/>the<sp/>input<sp/>data,<sp/>then<sp/>supply<sp/>some</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>more<sp/>input<sp/>next<sp/>time<sp/>round<sp/>the<sp/>loop:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>need_input<sp/>=<sp/>odone<sp/>&lt;<sp/>olen<sp/>&amp;&amp;<sp/>ibuf;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!error<sp/>&amp;&amp;<sp/>(need_input<sp/>||<sp/>written));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tidy<sp/>up:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="soxr_8c_1af3bff5e9b256197fd02730fea110a5ea" kindref="member">soxr_delete</ref>(soxr);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>free(obuf),<sp/>free(ibuf);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Diagnostics:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%-26s<sp/>%s;<sp/>I/O:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>arg[0],</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="soxr_8h_1a2f44b4b77b6b4f69d9b4fae79c14bcea" kindref="member">soxr_strerror</ref>(error),<sp/>errno?<sp/>strerror(errno)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>||<sp/>errno;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/2-stream.C"/>
  </compounddef>
</doxygen>
