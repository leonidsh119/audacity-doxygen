<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_o_d_decode_f_fmpeg_task_8cpp" kind="file" language="C++">
    <compoundname>ODDecodeFFmpegTask.cpp</compoundname>
    <includes refid="_audacity_8h" local="yes">../Audacity.h</includes>
    <includes local="no">wx/wxprec.h</includes>
    <includes local="no">wx/window.h</includes>
    <includes refid="_experimental_8h" local="yes">../Experimental.h</includes>
    <incdepgraph>
      <node id="49483">
        <label>../Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="49484" relation="include">
        </childnode>
      </node>
      <node id="49481">
        <label>wx/wxprec.h</label>
      </node>
      <node id="49484">
        <label>wx/defs.h</label>
      </node>
      <node id="49482">
        <label>wx/window.h</label>
      </node>
      <node id="49480">
        <label>../Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="49479">
        <label>C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODDecodeFFmpegTask.cpp</label>
        <link refid="ODDecodeFFmpegTask.cpp"/>
        <childnode refid="49480" relation="include">
        </childnode>
        <childnode refid="49481" relation="include">
        </childnode>
        <childnode refid="49482" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>Audacity(R)<sp/>is<sp/>copyright<sp/>(c)<sp/>1999-2012<sp/>Audacity<sp/>Team.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>License:<sp/>GPL<sp/>v2.<sp/><sp/>See<sp/>License.txt.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>ODDecodeFFmpegTask.cpp</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>Michael<sp/>Chinen</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Audacity.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>before<sp/>FFmpeg.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/wxprec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>compilers<sp/>that<sp/>support<sp/>precompilation,<sp/>includes<sp/>&quot;wx/wx.h&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WX_PRECOMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>your<sp/>minimal<sp/>set<sp/>of<sp/>headers<sp/>here,<sp/>or<sp/>wx.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/window.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Experimental.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_FFMPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_OD_FFMPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../FFmpeg.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>brings<sp/>in<sp/>avcodec.h,<sp/>avformat.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../import/ImportFFmpeg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="class_f_fmpeg_libs" kindref="compound">FFmpegLibs</ref><sp/>*FFmpegLibsInst;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_d_decode_f_fmpeg_task_8h" kindref="compound">ODDecodeFFmpegTask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ODFFMPEG_SEEKING_TEST_UNKNOWN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ODFFMPEG_SEEKING_TEST_FAILED<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ODFFMPEG_SEEKING_TEST_SUCCESS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kMaxSamplesInCache<sp/>4410000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//struct<sp/>for<sp/>caching<sp/>the<sp/>decoded<sp/>samples<sp/>to<sp/>be<sp/>used<sp/>over<sp/>multiple<sp/>blockfiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_FFmpegDecodeCache</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>;</highlight><highlight class="comment">//interleaved<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numChannels;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><ref refid="samplefmt_8h_1af9a51ca15301871723577c730b5865c5" kindref="member">AVSampleFormat</ref><sp/>samplefmt;<sp/></highlight><highlight class="comment">//<sp/>input<sp/>(from<sp/>libav)<sp/>sample<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/>FFMpegDecodeCache;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//------<sp/>ODFFmpegDecoder<sp/>declaration<sp/>and<sp/>defs<sp/>-<sp/>here<sp/>because<sp/>we<sp/>strip<sp/>dependencies<sp/>from<sp/>.h<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ODFFmpegDecoder<sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_o_d_file_decoder" kindref="compound">ODFileDecoder</ref></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>ODFFmpegDecoder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>fileName,<sp/>streamContext**<sp/>scs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numStreams,<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>***<sp/>channels,<sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>*<sp/>formatContext,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamIndex);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ODFFmpegDecoder();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Decode(<ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>&amp;<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>&amp;<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReadHeader()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SeekingAllowed()<sp/>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertCache(FFMpegDecodeCache*<sp/>cache);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//puts<sp/>the<sp/>actual<sp/>audio<sp/>samples<sp/>into<sp/>the<sp/>blockfile&apos;s<sp/>data<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FillDataFromCache(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/>&amp;<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>outFormat,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>&amp;<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>&amp;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>streamContext*<sp/>ReadNextFrame();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DecodeFrame(streamContext<sp/>*sc,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flushing);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mNumStreams;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>streamContext<sp/><sp/><sp/><sp/><sp/><sp/><sp/>**mScs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_wave_track" kindref="compound">WaveTrack</ref>***<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mChannels;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref><sp/><sp/><sp/><sp/><sp/><sp/>*mFormatContext;<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;FFMpegDecodeCache*&gt;<sp/>mDecodeCache;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamplesInCache;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentPos;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>index<sp/>of<sp/>the<sp/>next<sp/>sample<sp/>to<sp/>be<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentLen;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//length<sp/>of<sp/>the<sp/>last<sp/>packet<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSeekingAllowedStatus;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStreamIndex;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//------<sp/>ODDecodeFFmpegTask<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">ODDecodeFFmpegTask::ODDecodeFFmpegTask(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>scs,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numStreams,<sp/><ref refid="class_wave_track" kindref="compound">WaveTrack</ref>***<sp/>channels,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>formatContext,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamIndex)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>mScs=scs;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>mNumStreams=numStreams;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>mChannels=channels;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>mFormatContext<sp/>=<sp/>formatContext;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>mStreamIndex<sp/>=<sp/>streamIndex;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>we<sp/>probably<sp/>need<sp/>to<sp/>create<sp/>a<sp/>NEW<sp/>WaveTrack***<sp/>pointer<sp/>and<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//same<sp/>for<sp/>streamContext,<sp/>but<sp/>we<sp/>should<sp/>also<sp/>use<sp/>a<sp/>ref<sp/>counting<sp/>system<sp/>-<sp/>this<sp/>should<sp/>be<sp/>added<sp/>to<sp/>streamContext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>mScs<sp/>=<sp/>(streamContext**)malloc(sizeof(streamContext**)*mFormatContext-&gt;nb_streams);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">ODDecodeFFmpegTask::~ODDecodeFFmpegTask()</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="class_o_d_task" kindref="compound">ODTask</ref>*<sp/>ODDecodeFFmpegTask::Clone()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>need<sp/>to<sp/>create<sp/>copies<sp/>of<sp/>mScs.<sp/><sp/>It<sp/>would<sp/>be<sp/>better<sp/>to<sp/>use<sp/>a<sp/>reference<sp/>counter<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>ODDecodeFFmpegTask*<sp/><ref refid="group__flacpp__metadata__object_1gaea2484b59c72f4cce8366f25133f5d51" kindref="member">clone</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ODDecodeFFmpegTask((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)mScs,mNumStreams,mChannels,mFormatContext,mStreamIndex);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>clone-&gt;mDemandSample=GetDemandSample();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>decoders<sp/>and<sp/>blockfiles<sp/>should<sp/>not<sp/>be<sp/>copied.<sp/><sp/>They<sp/>are<sp/>created<sp/>as<sp/>the<sp/>task<sp/>runs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__flacpp__metadata__object_1gaea2484b59c72f4cce8366f25133f5d51" kindref="member">clone</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//compare<sp/>to<sp/>FLACImportPlugin::Open(wxString<sp/>filename)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="class_o_d_file_decoder" kindref="compound">ODFileDecoder</ref>*<sp/>ODDecodeFFmpegTask::CreateFileDecoder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>fileName)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>file<sp/>for<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>ODFFmpegDecoder<sp/>*decoder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ODFFmpegDecoder(fileName,<sp/>(streamContext**)<sp/>mScs,mNumStreams,mChannels,(<ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>*)mFormatContext,<sp/>mStreamIndex);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>mDecoders.push_back(decoder);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decoder;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ODFFmpegDecoder::SeekingAllowed()</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>if(ODFFMPEG_SEEKING_TEST_UNKNOWN<sp/>!=<sp/>mSeekingAllowedStatus)</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>mSeekingAllowedStatus<sp/>==<sp/>ODFFMPEG_SEEKING_TEST_SUCCESS;</highlight></codeline>
<codeline lineno="158"><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/>//we<sp/>can<sp/>seek<sp/>if<sp/>the<sp/>following<sp/>checks<sp/>pass:</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>//-sample<sp/>rate<sp/>is<sp/>less<sp/>than<sp/>the<sp/>reciprocal<sp/>of<sp/>the<sp/>time_base<sp/>of<sp/>the<sp/>seeking<sp/>stream.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>//-a<sp/>seek<sp/>test<sp/>has<sp/>been<sp/>made<sp/>and<sp/>dts<sp/>updates<sp/>as<sp/>expected.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>//we<sp/>want<sp/>to<sp/>clone<sp/>this<sp/>to<sp/>run<sp/>a<sp/>seek<sp/>test.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/>AVFormatContext*<sp/>ic<sp/>=<sp/>(AVFormatContext*)mFormatContext;</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/>bool<sp/><sp/>audioStreamExists<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/>AVStream*<sp/>st;</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>//test<sp/>the<sp/>audio<sp/>stream(s)</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ic-&gt;nb_streams;<sp/>i++)</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ic-&gt;streams[i]-&gt;codec-&gt;codec_type<sp/>==<sp/>AVMEDIA_TYPE_AUDIO)</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>audioStreamExists<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st<sp/>=<sp/>ic-&gt;streams[i];</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(st-&gt;duration<sp/>&lt;=<sp/>0<sp/>||<sp/>st-&gt;codec-&gt;sample_rate<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>test_failed;</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>the<sp/>time<sp/>base<sp/>reciprocal<sp/>is<sp/>less<sp/>than<sp/>the<sp/>sample<sp/>rate<sp/>it<sp/>means<sp/>we<sp/>can&apos;t<sp/>accurately<sp/>represent<sp/>a<sp/>sample<sp/>with<sp/>the<sp/>timestamp<sp/>in<sp/>av.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>time_base_inv<sp/>=<sp/>((float)st-&gt;time_base.den/st-&gt;time_base.num);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(time_base_inv<sp/>&lt;<sp/>st-&gt;codec-&gt;sample_rate)</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>test_failed;</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/>if(!audioStreamExists)</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>test_failed;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/>//TODO:<sp/>now<sp/>try<sp/>a<sp/>seek<sp/>and<sp/>see<sp/>if<sp/>dts/pts<sp/>(decode/presentation<sp/>timestamp)<sp/>is<sp/>updated<sp/>as<sp/>we<sp/>expected<sp/>it<sp/>to<sp/>be.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/>//This<sp/>should<sp/>be<sp/>done<sp/>using<sp/>a<sp/>NEW<sp/>AVFormatContext<sp/>clone<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>ruin<sp/>the<sp/>file<sp/>pointer<sp/>if<sp/>we<sp/>fail.</highlight></codeline>
<codeline lineno="189"><highlight class="comment">//<sp/><sp/><sp/>url_fseek(mFormatContext-&gt;pb,0,SEEK_SET);</highlight></codeline>
<codeline lineno="190"><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/>AVFormatContext*<sp/>tempContext;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/>int<sp/>err;</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/>err<sp/>=<sp/>ufile_fopen_input(&amp;tempContext,<sp/>mFName);</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(err<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>test_failed;</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>err<sp/>=<sp/>avformat_find_stream_info(tempContext,<sp/>NULL);</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(err<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>test_failed;</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>if(av_seek_frame(tempContext,<sp/>st-&gt;index,<sp/>0,<sp/>0)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>mSeekingAllowedStatus<sp/>=<sp/>ODFFMPEG_SEEKING_TEST_SUCCESS;</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tempContext)<sp/>avformat_close_input(&amp;tempContext);</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SeekingAllowed();</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(tempContext)<sp/>avformat_close_input(&amp;tempContext);</highlight></codeline>
<codeline lineno="213"><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">test_failed:</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/>mSeekingAllowedStatus<sp/>=<sp/>ODFFMPEG_SEEKING_TEST_FAILED;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>return<sp/>SeekingAllowed();</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//------<sp/>ODDecodeFFmpegFileDecoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">ODFFmpegDecoder::ODFFmpegDecoder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;<sp/>fileName,<sp/>streamContext**<sp/>scs,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numStreams,<ref refid="class_wave_track" kindref="compound">WaveTrack</ref>***<sp/>channels,<sp/><ref refid="struct_a_v_format_context" kindref="compound">AVFormatContext</ref>*<sp/>formatContext,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamIndex)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">:<ref refid="class_o_d_file_decoder" kindref="compound">ODFileDecoder</ref>(fileName),</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//mSamplesDone(0),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">mNumStreams(numStreams),</highlight></codeline>
<codeline lineno="226"><highlight class="normal">mScs(scs),</highlight></codeline>
<codeline lineno="227"><highlight class="normal">mFormatContext(formatContext),</highlight></codeline>
<codeline lineno="228"><highlight class="normal">mNumSamplesInCache(0),</highlight></codeline>
<codeline lineno="229"><highlight class="normal">mCurrentLen(0),</highlight></codeline>
<codeline lineno="230"><highlight class="normal">mSeekingAllowedStatus(ODFFMPEG_SEEKING_TEST_UNKNOWN),</highlight></codeline>
<codeline lineno="231"><highlight class="normal">mStreamIndex(streamIndex)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/>PickFFmpegLibs();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>a<sp/>shallow<sp/>copy<sp/>of<sp/>the<sp/>2d<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/>mChannels<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_track" kindref="compound">WaveTrack</ref><sp/>**[mNumStreams];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>0;<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>&lt;<sp/>mNumStreams;<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mChannels[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_track" kindref="compound">WaveTrack</ref><sp/>*[mScs[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>]-&gt;m_stream-&gt;codec-&gt;channels];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>mScs[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>]-&gt;m_stream-&gt;codec-&gt;channels;<sp/>c++)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mChannels[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>][<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>]<sp/>=<sp/>channels[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>][<ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>current<sp/>stream<sp/>start<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>stream_delay<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mScs[streamIndex]-&gt;m_stream-&gt;start_time<sp/>!=<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref>(<ref refid="group__lavu__time_1ga2eaefe702f95f619ea6f2d08afa01be1" kindref="member">AV_NOPTS_VALUE</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mScs[streamIndex]-&gt;m_stream-&gt;start_time<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream_delay<sp/>=<sp/>mScs[streamIndex]-&gt;m_stream-&gt;start_time;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/>mCurrentPos<sp/>=<sp/>double(stream_delay)<sp/>/<sp/><ref refid="group__lavu__time_1gaa11ed202b70e1f52bac809811a910e2a" kindref="member">AV_TIME_BASE</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>add<sp/>a<sp/>ref<sp/>counter<sp/>to<sp/>scs?<sp/><sp/>This<sp/>will<sp/>be<sp/>necessary<sp/>if<sp/>we<sp/>want<sp/>to<sp/>allow<sp/>copy<sp/>and<sp/>paste<sp/>of<sp/>not-yet<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//ODDecodeBlockFiles<sp/>that<sp/>point<sp/>to<sp/>FFmpeg<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//we<sp/>have<sp/>taken<sp/>ownership,<sp/>so<sp/>DELETE<sp/>the<sp/>ffmpeg<sp/>stuff<sp/>allocated<sp/>in<sp/>ImportFFmpeg<sp/>that<sp/>was<sp/>given<sp/>to<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">ODFFmpegDecoder::~ODFFmpegDecoder()</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FFmpegLibsInst-&gt;ValidLibsLoaded())</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFormatContext)<sp/><ref refid="group__lavf__decoding_1gae804b99aec044690162b8b9b110236a4" kindref="member">avformat_close_input</ref>(&amp;mFormatContext);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavu__log_1ga14034761faf581a8b9ed6ef19b313708" kindref="member">av_log_set_callback</ref>(<ref refid="group__lavu__log_1ga5bd132d2e4ac6f9843ef6d8e3c05050a" kindref="member">av_log_default_callback</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mNumStreams;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mScs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;m_decodedAudioSamples<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free</ref>(mScs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;m_decodedAudioSamples);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mScs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>free(mScs);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//DELETE<sp/>our<sp/>caches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(mDecodeCache.size())</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(mDecodeCache[0]-&gt;<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mDecodeCache[0];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeCache.erase(mDecodeCache.begin());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//free<sp/>the<sp/>channel<sp/>pointer<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>0;<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>&lt;<sp/>mNumStreams;<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>mChannels[<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>mChannels;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/>DropFFmpegLibs();</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//we<sp/>read<sp/>the<sp/>file<sp/>from<sp/>left<sp/>to<sp/>right,<sp/>so<sp/>in<sp/>some<sp/>cases<sp/>it<sp/>makes<sp/>more<sp/>sense<sp/>not<sp/>to<sp/>seek<sp/>and<sp/>just<sp/>carry<sp/>on<sp/>the<sp/>decode<sp/>if<sp/>the<sp/>gap<sp/>is<sp/>small<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//this<sp/>value<sp/>controls<sp/>this<sp/>amount.<sp/><sp/>this<sp/>should<sp/>be<sp/>a<sp/>value<sp/>that<sp/>is<sp/>much<sp/>larger<sp/>than<sp/>the<sp/>payload<sp/>for<sp/>a<sp/>single<sp/>packet,<sp/>and<sp/>around<sp/>block<sp/>file<sp/>size<sp/>around<sp/>1-10<sp/>secs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kDecodeSampleAllowance<sp/>400000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//number<sp/>of<sp/>jump<sp/>backwards<sp/>seeks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kMaxSeekRewindAttempts<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ODFFmpegDecoder::Decode(<ref refid="class_sample_buffer" kindref="compound">SampleBuffer</ref><sp/>&amp;<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>&amp;<sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>format<sp/>=<sp/>mScs[mStreamIndex]-&gt;m_osamplefmt;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>data.<ref refid="class_sample_buffer_1ac099db2fd16e9e472e4036e220be8110" kindref="member">Allocate</ref>(len,<sp/>format);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/>bufStart<sp/>=<sp/>data.<ref refid="class_sample_buffer_1a67109e75aa852d6196692e683d248dcd" kindref="member">ptr</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>streamContext*<sp/>sc<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;start<sp/>%llu<sp/>len<sp/>%llu\n&quot;,<sp/>start,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>update<sp/>this<sp/>to<sp/>work<sp/>with<sp/>seek<sp/>-<sp/>this<sp/>only<sp/>works<sp/>linearly<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mCurrentPos<sp/>&gt;<sp/>start<sp/>&amp;&amp;<sp/>mCurrentPos<sp/><sp/>&lt;=<sp/>start+len<sp/>+<sp/>kDecodeSampleAllowance)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>next<sp/>call<sp/>takes<sp/>data,<sp/>start<sp/>and<sp/>len<sp/>as<sp/>reference<sp/>variables<sp/>and<sp/>updates<sp/>them<sp/>to<sp/>reflect<sp/>the<sp/>NEW<sp/>area<sp/>that<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FillDataFromCache(bufStart,<sp/>format,<sp/>start,len,channel);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>seeking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//look<sp/>at<sp/>the<sp/>decoding<sp/>timestamp<sp/>and<sp/>see<sp/>if<sp/>the<sp/>next<sp/>sample<sp/>that<sp/>will<sp/>be<sp/>decoded<sp/>is<sp/>not<sp/>the<sp/>next<sp/>sample<sp/>we<sp/>need.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>&amp;&amp;<sp/>(mCurrentPos<sp/>&gt;<sp/>start<sp/>+<sp/>len<sp/><sp/>||<sp/>mCurrentPos<sp/>+<sp/>kDecodeSampleAllowance<sp/>&lt;<sp/>start<sp/>)<sp/>&amp;&amp;<sp/>SeekingAllowed())<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sc<sp/>=<sp/>mScs[mStreamIndex];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_v_stream" kindref="compound">AVStream</ref>*<sp/>st<sp/>=<sp/>sc-&gt;m_stream;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stindex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>targetts;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;attempting<sp/>seek<sp/>to<sp/>%llu\n&quot;,<sp/>start);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>have<sp/>to<sp/>find<sp/>the<sp/>index<sp/>for<sp/>this<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mFormatContext-&gt;nb_streams;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mFormatContext-&gt;streams[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>==<sp/>sc-&gt;m_stream<sp/>)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stindex<sp/>=<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stindex<sp/>&gt;=0)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numAttempts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reset<sp/>mCurrentPos<sp/>to<sp/>a<sp/>bogus<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentPos<sp/>=<sp/>start+len<sp/>+1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(numAttempts++<sp/>&lt;<sp/>kMaxSeekRewindAttempts<sp/>&amp;&amp;<sp/>mCurrentPos<sp/>&gt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>want<sp/>to<sp/>move<sp/>slightly<sp/>before<sp/>the<sp/>start<sp/>of<sp/>the<sp/>block<sp/>file,<sp/>but<sp/>not<sp/>too<sp/>far<sp/>ahead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetts<sp/>=<sp/>(start-kDecodeSampleAllowance*numAttempts/kMaxSeekRewindAttempts)<sp/><sp/>*<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)st-&gt;<ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">time_base</ref>.<ref refid="struct_a_v_rational_1aee46bdac67d965ac0a4204e753f910c3" kindref="member">den</ref>/(st-&gt;<ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">time_base</ref>.<ref refid="struct_a_v_rational_1ae9a98c10a301c5e937095105b6f0fdb9" kindref="member">num</ref><sp/>*<sp/>st-&gt;<ref refid="struct_a_v_stream_1a56f20051fb99339cc588cd3a07ab8c96" kindref="member">codec</ref>-&gt;<ref refid="struct_a_v_codec_context_1a8ff0b000c463361e234af48d03aadfc0" kindref="member">sample_rate</ref><sp/>));</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(targetts&lt;0)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetts=0;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;attempting<sp/>seek<sp/>to<sp/>%llu,<sp/>attempts<sp/>%d\n&quot;,<sp/>targetts,<sp/>numAttempts);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__lavf__decoding_1gaa23f7619d8d4ea0857065d9979c75ac8" kindref="member">av_seek_frame</ref>(mFormatContext,stindex,targetts,0)<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>out<sp/>the<sp/>dts<sp/>we&apos;ve<sp/>seekd<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>actualDecodeStart<sp/>=<sp/>0.5<sp/>+<sp/>st-&gt;<ref refid="struct_a_v_stream_1a56f20051fb99339cc588cd3a07ab8c96" kindref="member">codec</ref>-&gt;<ref refid="struct_a_v_codec_context_1a8ff0b000c463361e234af48d03aadfc0" kindref="member">sample_rate</ref><sp/>*<sp/>st-&gt;<ref refid="struct_a_v_stream_1ad552f602c2113bd5152cff3c58ba1f9f" kindref="member">cur_dts</ref><sp/><sp/>*<sp/>((double)st-&gt;<ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">time_base</ref>.<ref refid="struct_a_v_rational_1ae9a98c10a301c5e937095105b6f0fdb9" kindref="member">num</ref>/st-&gt;<ref refid="struct_a_v_stream_1a9db755451f14e2bf590d4b85d82b32e6" kindref="member">time_base</ref>.<ref refid="struct_a_v_rational_1aee46bdac67d965ac0a4204e753f910c3" kindref="member">den</ref>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>mostly<sp/>safe<sp/>because<sp/>den<sp/>is<sp/>usually<sp/>1<sp/>or<sp/>low<sp/>number<sp/>but<sp/>check<sp/>for<sp/>high<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentPos<sp/>=<sp/>actualDecodeStart;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seeking<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>seek<sp/>was<sp/>past<sp/>our<sp/>desired<sp/>position,<sp/>rewind<sp/>a<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;seek<sp/>ok<sp/>to<sp/>%llu<sp/>samps,<sp/>float:<sp/>%f\n&quot;,actualDecodeStart,actualDecodeStartDouble);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;seek<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mCurrentPos&gt;start){</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSeekingAllowedStatus<sp/>=<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>)ODFFMPEG_SEEKING_TEST_FAILED;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url_fseek(mFormatContext-&gt;pb,sc-&gt;m_pkt.pos,SEEK_SET);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;seek<sp/>fail,<sp/>reverting<sp/>to<sp/>previous<sp/>pos\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>firstpass<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>decode<sp/>up<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>blockfile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len&gt;0<sp/>&amp;&amp;<sp/>(mCurrentPos<sp/>&lt;<sp/>start+len)<sp/>&amp;&amp;<sp/>(sc<sp/>=<sp/>ReadNextFrame())<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReadNextFrame<sp/>returns<sp/>1<sp/>if<sp/>stream<sp/>is<sp/>not<sp/>to<sp/>be<sp/>imported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc<sp/>!=<sp/>(streamContext*)1)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>out<sp/>the<sp/>dts<sp/>we&apos;ve<sp/>seekd<sp/>to.<sp/><sp/>can&apos;t<sp/>use<sp/>the<sp/>stream-&gt;cur_dts<sp/>because<sp/>it<sp/>is<sp/>faulty.<sp/><sp/>also<sp/>note<sp/>that<sp/>until<sp/>we<sp/>do<sp/>the<sp/>first<sp/>seek,<sp/>pkt.dts<sp/>can<sp/>be<sp/>false<sp/>and<sp/>will<sp/>change<sp/>for<sp/>the<sp/>same<sp/>samples<sp/>after<sp/>the<sp/>initial<sp/>seek.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>actualDecodeStart<sp/>=<sp/>mCurrentPos;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>adjacent<sp/>samples,<sp/>so<sp/>don&apos;t<sp/>use<sp/>dts<sp/>most<sp/>of<sp/>the<sp/>time<sp/>which<sp/>will<sp/>leave<sp/>gaps<sp/>between<sp/>frames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>some<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>other<sp/>case<sp/>for<sp/>inserting<sp/>silence<sp/>is<sp/>for<sp/>initial<sp/>offset<sp/>and<sp/>ImportFFmpeg.cpp<sp/>does<sp/>this<sp/>for<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seeking)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualDecodeStart<sp/>=<sp/>0.52<sp/>+<sp/>(sc-&gt;m_stream-&gt;codec-&gt;sample_rate<sp/>*<sp/>sc-&gt;m_pkt.dts</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>((double)sc-&gt;m_stream-&gt;time_base.num<sp/>/<sp/>sc-&gt;m_stream-&gt;time_base.den));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>mostly<sp/>safe<sp/>because<sp/>den<sp/>is<sp/>usually<sp/>1<sp/>or<sp/>low<sp/>number<sp/>but<sp/>check<sp/>for<sp/>high<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hack<sp/>to<sp/>get<sp/>rounding<sp/>to<sp/>work<sp/>to<sp/>neareset<sp/>frame<sp/>size<sp/>since<sp/>dts<sp/>isn&apos;t<sp/>exact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc-&gt;m_stream-&gt;codec-&gt;frame_size)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualDecodeStart<sp/>=<sp/>((actualDecodeStart<sp/>+<sp/>sc-&gt;m_stream-&gt;codec-&gt;frame_size/2)<sp/>/<sp/>sc-&gt;m_stream-&gt;codec-&gt;frame_size)<sp/>*<sp/>sc-&gt;m_stream-&gt;codec-&gt;frame_size;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>for<sp/>the<sp/>next<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seeking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(actualDecodeStart<sp/>!=<sp/>mCurrentPos)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;ts<sp/>not<sp/>matching<sp/>-<sp/>now:%llu<sp/>,<sp/>last:%llu,<sp/>lastlen:%llu,<sp/>start<sp/>%llu,<sp/>len<sp/>%llu\n&quot;</highlight><highlight class="normal">,actualDecodeStart,<sp/>mCurrentPos,<sp/>mCurrentLen,<sp/>start,<sp/>len);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we&apos;ve<sp/>skipped<sp/>over<sp/>some<sp/>samples,<sp/>fill<sp/>the<sp/>gap<sp/>with<sp/>silence.<sp/><sp/>This<sp/>could<sp/>happen<sp/>often<sp/>in<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(actualDecodeStart&gt;start<sp/>&amp;&amp;<sp/>firstpass)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>for<sp/>the<sp/>leading<sp/>silence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amt<sp/>=<sp/>actualDecodeStart<sp/>-<sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFMpegDecodeCache*<sp/>cache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FFMpegDecodeCache;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;skipping/zeroing<sp/>%i<sp/>samples.<sp/>-<sp/>now:%llu<sp/>(%f),<sp/>last:%llu,<sp/>lastlen:%llu,<sp/>start<sp/>%llu,<sp/>len<sp/>%llu\n&quot;,amt,actualDecodeStart,<sp/>actualDecodeStartdouble,<sp/>mCurrentPos,<sp/>mCurrentLen,<sp/>start,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//put<sp/>it<sp/>in<sp/>the<sp/>cache<sp/>so<sp/>the<sp/>other<sp/>channels<sp/>can<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;numChannels<sp/>=<sp/>sc-&gt;m_stream-&gt;codec-&gt;channels;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;len<sp/>=<sp/>amt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;start=<ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8<sp/>bit<sp/>and<sp/>16<sp/>bit<sp/>audio<sp/>output<sp/>from<sp/>ffmpeg<sp/>means</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16<sp/>bit<sp/>int<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>bit<sp/>int,<sp/>float,<sp/>double<sp/>mean<sp/>float<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;samplefmt<sp/>=<sp/>SAMPLE_FMT_S16;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;samplefmt<sp/>=<sp/>SAMPLE_FMT_FLT;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;samplePtr<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)<sp/>malloc(amt<sp/>*<sp/>cache-&gt;numChannels<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(format));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(cache-&gt;samplePtr,<sp/>0,<sp/>amt<sp/>*<sp/>cache-&gt;numChannels<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(format));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InsertCache(cache);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstpass=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentPos<sp/>=<sp/>actualDecodeStart;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//decode<sp/>the<sp/>entire<sp/>packet<sp/>(unused<sp/>bits<sp/>get<sp/>saved<sp/>in<sp/>cache,<sp/>so<sp/>as<sp/>long<sp/>as<sp/>cache<sp/>size<sp/>limit<sp/>is<sp/>bigger<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//largest<sp/>packet<sp/>size,<sp/>we&apos;re<sp/>ok.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sc-&gt;m_pktRemainingSiz<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>cache<sp/>with<sp/>decoded<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DecodeFrame(sc,</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>after<sp/>frame<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc-&gt;m_pktValid)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavc__packet_1gae65881462e78f98b268f34661d921ee0" kindref="member">av_free_packet</ref>(&amp;sc-&gt;m_pkt);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc-&gt;m_pktValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>the<sp/>decoders<sp/>if<sp/>we&apos;re<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!sc<sp/>||<sp/>sc<sp/>==<sp/>(streamContext*)<sp/>1)&amp;&amp;<sp/>len&gt;0)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>mNumStreams;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DecodeFrame(mScs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mScs[i]-&gt;m_pktValid)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lavc__packet_1gae65881462e78f98b268f34661d921ee0" kindref="member">av_free_packet</ref>(&amp;mScs[i]-&gt;m_pkt);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mScs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;m_pktValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>next<sp/>call<sp/>takes<sp/>data,<sp/>start<sp/>and<sp/>len<sp/>as<sp/>reference<sp/>variables<sp/>and<sp/>updates<sp/>them<sp/>to<sp/>reflect<sp/>the<sp/>NEW<sp/>area<sp/>that<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/>FillDataFromCache(bufStart,<sp/>format,<sp/>start,<sp/>len,<sp/>channel);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CHECK:<sp/>not<sp/>sure<sp/>if<sp/>we<sp/>need<sp/>this.<sp/><sp/>In<sp/>any<sp/>case<sp/>it<sp/>has<sp/>to<sp/>be<sp/>updated<sp/>for<sp/>the<sp/>NEW<sp/>float<sp/>case<sp/>(not<sp/>just<sp/>int16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>for<sp/>some<sp/>reason<sp/>we<sp/>couldn&apos;t<sp/>get<sp/>the<sp/>samples,<sp/>fill<sp/>them<sp/>with<sp/>silence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/>int16_t*<sp/>outBuf<sp/>=<sp/>(int16_t*)<sp/>bufStart;</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;len;i++)</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>outBuf[i]=0;</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//puts<sp/>the<sp/>actual<sp/>audio<sp/>samples<sp/>into<sp/>the<sp/>blockfile&apos;s<sp/>data<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>minimum<sp/>amount<sp/>of<sp/>cache<sp/>entries<sp/>necessary<sp/>to<sp/>warrant<sp/>a<sp/>binary<sp/>search.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kODFFmpegSearchThreshold<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//also<sp/>updates<sp/>data<sp/>and<sp/>len<sp/>to<sp/>reflect<sp/>NEW<sp/>unfilled<sp/>area<sp/>-<sp/>start<sp/>is<sp/>unmodified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ODFFmpegDecoder::FillDataFromCache(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/>&amp;<sp/>data,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>outFormat,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>&amp;start,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>&amp;<sp/>len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mDecodeCache.size()<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplesFilled=0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>a<sp/>search<sp/>for<sp/>the<sp/>best<sp/>position<sp/>to<sp/>start<sp/>at.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Guess<sp/>that<sp/>the<sp/>array<sp/>is<sp/>evenly<sp/>spaced<sp/>from<sp/>end<sp/>to<sp/>end<sp/>-<sp/>(dictionary<sp/>sort)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//assumes<sp/>the<sp/>array<sp/>is<sp/>sorted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//all<sp/>we<sp/>need<sp/>for<sp/>this<sp/>to<sp/>work<sp/>is<sp/>a<sp/>location<sp/>in<sp/>the<sp/>cache<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//that<sp/>has<sp/>a<sp/>start<sp/>time<sp/>of<sp/>less<sp/>than<sp/>our<sp/>start<sp/>sample,<sp/>but<sp/>try<sp/>to<sp/>get<sp/>closer<sp/>with<sp/>binary<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>searchStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>searchEnd<sp/>=<sp/>mDecodeCache.size();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guess;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(searchEnd&gt;kODFFmpegSearchThreshold)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>just<sp/>guess<sp/>that<sp/>the<sp/>cache<sp/>is<sp/>contiguous<sp/>and<sp/>we<sp/>can<sp/>just<sp/>use<sp/>math<sp/>to<sp/>figure<sp/>it<sp/>out<sp/>like<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//by<sp/>guessing<sp/>where<sp/>our<sp/>hit<sp/>will<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(searchStart+1&lt;searchEnd)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guess<sp/>=<sp/>(searchStart+searchEnd)/2;</highlight><highlight class="comment">//find<sp/>a<sp/>midpoint.<sp/>//searchStart+<sp/>(searchEnd-searchStart)*<sp/><sp/>((float)start<sp/>-<sp/>mDecodeCache[searchStart]-&gt;start<sp/>)/mDecodeCache[searchEnd]-&gt;start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>want<sp/>guess<sp/>to<sp/>point<sp/>at<sp/>the<sp/>first<sp/>index<sp/>that<sp/>hits<sp/>even<sp/>if<sp/>there<sp/>are<sp/>duplicate<sp/>start<sp/>times<sp/>(which<sp/>can<sp/>happen)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mDecodeCache[guess]-&gt;start+mDecodeCache[guess]-&gt;len<sp/>&gt;=<sp/>start)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchEnd<sp/>=<sp/>--guess;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchStart<sp/>=<sp/>guess;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>a<sp/>sorted<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=searchStart;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)mDecodeCache.size();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>for<sp/>a<sp/>cache<sp/>hit<sp/>-<sp/>be<sp/>careful<sp/>to<sp/>include<sp/>the<sp/>first/last<sp/>sample<sp/>an<sp/>nothing<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>only<sp/>accept<sp/>cache<sp/>hits<sp/>that<sp/>touch<sp/>either<sp/>end<sp/>-<sp/>no<sp/>piecing<sp/>out<sp/>of<sp/>the<sp/>middle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>way<sp/>the<sp/>amount<sp/>to<sp/>be<sp/>decoded<sp/>remains<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start<sp/>&lt;<sp/>mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start+mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+<sp/>len<sp/>&gt;<sp/>mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*<sp/>outBuf;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outBuf<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)data;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reject<sp/>buffers<sp/>that<sp/>would<sp/>split<sp/>us<sp/>into<sp/>two<sp/>pieces<sp/>because<sp/>we<sp/>don&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//a<sp/>method<sp/>of<sp/>dealing<sp/>with<sp/>this<sp/>yet,<sp/>and<sp/>it<sp/>won&apos;t<sp/>happen<sp/>very<sp/>often.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start&lt;mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start<sp/>&amp;&amp;<sp/>start+len<sp/><sp/>&gt;<sp/>mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start+mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;len)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplesHit;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hitStartInCache;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hitStartInRequest;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChannels<sp/>=<sp/>mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;numChannels;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samplesHit<sp/>=<sp/><ref refid="ffmpeg_2libavutil_2common_8h_1a0f84cbd7fd810cd678157c98cbfad4b0" kindref="member">FFMIN</ref>(start+len,mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start+mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;len)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="ffmpeg_2libavutil_2common_8h_1a9960bd6780a9b16a216a57be1ee04359" kindref="member">FFMAX</ref>(mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start,start);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>the<sp/>start<sp/>of<sp/>the<sp/>hit<sp/>relative<sp/>to<sp/>the<sp/>cache<sp/>buffer<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hitStartInCache<sp/><sp/><sp/>=<sp/><ref refid="ffmpeg_2libavutil_2common_8h_1a9960bd6780a9b16a216a57be1ee04359" kindref="member">FFMAX</ref>(0,start-mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>also<sp/>need<sp/>to<sp/>find<sp/>out<sp/>which<sp/>end<sp/>was<sp/>hit<sp/>-<sp/>if<sp/>it<sp/>is<sp/>the<sp/>tail<sp/>only<sp/>we<sp/>need<sp/>to<sp/>update<sp/>from<sp/>a<sp/>later<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hitStartInRequest<sp/>=<sp/>start<sp/>&lt;mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start?len<sp/>-<sp/>samplesHit:<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>outIndex,inIndex;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;samplesHit;j++)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outIndex<sp/>=<sp/>hitStartInRequest<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inIndex<sp/>=<sp/>(hitStartInCache<sp/>+<sp/>j)<sp/>*<sp/>nChannels<sp/>+<sp/>channel;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;samplefmt)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAMPLE_FMT_U8:</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;u8<sp/>in<sp/>%llu<sp/>out<sp/>%llu<sp/>cachelen<sp/>%llu<sp/>outLen<sp/>%llu\n&quot;,<sp/>inIndex,<sp/>outIndex,<sp/>mDecodeCache[i]-&gt;len,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a044293bfeff56852a28ed6c2cfbb2649" kindref="member">int16_t</ref><sp/>*)outBuf)[outIndex]<sp/>=<sp/>(<ref refid="examples-common_8h_1aba47ebc2ca6caf60d3de4971843aa4cf" kindref="member">int16_t</ref>)<sp/>(((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;samplePtr)[inIndex]<sp/>-<sp/>0x80)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAMPLE_FMT_S16:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;u16<sp/>in<sp/>%llu<sp/>out<sp/>%llu<sp/>cachelen<sp/>%llu<sp/>outLen<sp/>%llu\n&quot;,<sp/>inIndex,<sp/>outIndex,<sp/>mDecodeCache[i]-&gt;len,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a044293bfeff56852a28ed6c2cfbb2649" kindref="member">int16_t</ref><sp/>*)outBuf)[outIndex]<sp/>=<sp/>((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a044293bfeff56852a28ed6c2cfbb2649" kindref="member">int16_t</ref>*)mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>)[inIndex];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAMPLE_FMT_S32:</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;s32<sp/>in<sp/>%llu<sp/>out<sp/>%llu<sp/>cachelen<sp/>%llu<sp/>outLen<sp/>%llu\n&quot;,<sp/>inIndex,<sp/>outIndex,<sp/>mDecodeCache[i]-&gt;len,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)outBuf)[outIndex]<sp/>=<sp/>(float)<sp/>((<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>*)mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;samplePtr)[inIndex]<sp/>*<sp/>(1.0<sp/>/<sp/>(1<sp/>&lt;&lt;<sp/>31));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAMPLE_FMT_FLT:</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;f<sp/>in<sp/>%llu<sp/>out<sp/>%llu<sp/>cachelen<sp/>%llu<sp/>outLen<sp/>%llu\n&quot;,<sp/>inIndex,<sp/>outIndex,<sp/>mDecodeCache[i]-&gt;len,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)outBuf)[outIndex]<sp/>=<sp/>(float)<sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;samplePtr)[inIndex];</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAMPLE_FMT_DBL:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;dbl<sp/>in<sp/>%llu<sp/>out<sp/>%llu<sp/>cachelen<sp/>%llu<sp/>outLen<sp/>%llu\n&quot;,<sp/>inIndex,<sp/>outIndex,<sp/>mDecodeCache[i]-&gt;len,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)outBuf)[outIndex]<sp/>=<sp/>(float)<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;samplePtr)[inIndex];</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;ODDecodeFFMPEG<sp/>TASK<sp/>unrecognized<sp/>sample<sp/>format\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>cursor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samplesFilled<sp/>+=<sp/>samplesHit;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>input<sp/>start/len<sp/>params<sp/>-<sp/>if<sp/>the<sp/>end<sp/>was<sp/>hit<sp/>we<sp/>can<sp/>take<sp/>off<sp/>just<sp/>len.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//otherwise,<sp/>we<sp/>can<sp/>assume<sp/>only<sp/>the<sp/>front<sp/>of<sp/>the<sp/>request<sp/>buffer<sp/>was<sp/>hit<sp/>since<sp/>we<sp/>don&apos;t<sp/>allow<sp/>it<sp/>to<sp/>be<sp/>split.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start<sp/>&lt;<sp/>mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len-=samplesHit;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>update<sp/>data<sp/>pointer<sp/>too-<sp/>but<sp/>it<sp/>is<sp/>a<sp/>typedef&apos;d<sp/>char*<sp/>so<sp/>be<sp/>careful<sp/>with<sp/>the<sp/>pointer<sp/>math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data+=<sp/>samplesHit<sp/>*<sp/>(<ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(outFormat)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start+=samplesHit;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=samplesHit;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we&apos;ve<sp/>had<sp/>our<sp/>fill,<sp/>leave.<sp/><sp/>if<sp/>we&apos;ve<sp/>passed<sp/>the<sp/>point<sp/>which<sp/>can<sp/>have<sp/>hits,<sp/>leave.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len&lt;=0<sp/>||<sp/><sp/>mDecodeCache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]-&gt;start<sp/>&gt;<sp/>start+len)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>samplesFilled;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//these<sp/>next<sp/>few<sp/>look<sp/>highly<sp/>refactorable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//get<sp/>the<sp/>right<sp/>stream<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">streamContext*<sp/>ODFFmpegDecoder::ReadNextFrame()</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>import_ffmpeg_read_next_frame(mFormatContext,<sp/>mScs,<sp/>mNumStreams);</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ODFFmpegDecoder::DecodeFrame(streamContext<sp/>*sc,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flushing)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>import_ffmpeg_decode_frame(sc,<sp/>flushing);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>sc-&gt;m_frameValid)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stick<sp/>it<sp/>in<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO-<sp/>consider<sp/>growing/unioning<sp/>a<sp/>few<sp/>cache<sp/>buffers<sp/>like<sp/>WaveCache<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//however<sp/>we<sp/>can&apos;t<sp/>use<sp/>wavecache<sp/>as<sp/>it<sp/>isn&apos;t<sp/>going<sp/>to<sp/>handle<sp/>our<sp/>stereo<sp/>interleaved<sp/>part,<sp/>and<sp/>isn&apos;t<sp/>for<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//However<sp/>if<sp/>other<sp/>ODDecode<sp/>tasks<sp/>need<sp/>this,<sp/>we<sp/>should<sp/>do<sp/>a<sp/>NEW<sp/>class<sp/>for<sp/>caching.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FFMpegDecodeCache*<sp/>cache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FFMpegDecodeCache;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//len<sp/>is<sp/>number<sp/>of<sp/>samples<sp/>per<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;numChannels<sp/>=<sp/>sc-&gt;m_stream-&gt;codec-&gt;channels;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;len<sp/>=<sp/>(sc-&gt;m_decodedAudioSamplesValidSiz<sp/>/<sp/>sc-&gt;m_samplesize)<sp/>/<sp/>cache-&gt;numChannels;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;start<sp/>=<sp/>mCurrentPos;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;samplePtr<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)<sp/>malloc(sc-&gt;m_decodedAudioSamplesValidSiz);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;samplefmt<sp/>=<sp/>sc-&gt;m_samplefmt;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(cache-&gt;samplePtr,<sp/>sc-&gt;m_decodedAudioSamples,<sp/>sc-&gt;m_decodedAudioSamplesValidSiz);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InsertCache(cache);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ODFFmpegDecoder::InsertCache(FFMpegDecodeCache*<sp/>cache)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>searchStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>searchEnd<sp/>=<sp/>mDecodeCache.size();<sp/></highlight><highlight class="comment">//size()<sp/>is<sp/>also<sp/>a<sp/>valid<sp/>insert<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guess<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>just<sp/>guess<sp/>that<sp/>the<sp/>cache<sp/>is<sp/>contiguous<sp/>and<sp/>we<sp/>can<sp/>just<sp/>use<sp/>math<sp/>to<sp/>figure<sp/>it<sp/>out<sp/>like<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//by<sp/>guessing<sp/>where<sp/>our<sp/>hit<sp/>will<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>printf(&quot;inserting<sp/>cache<sp/>start<sp/>%llu,<sp/>mCurrentPos<sp/>%llu\n&quot;,<sp/>cache-&gt;start,<sp/>mCurrentPos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(searchStart&lt;searchEnd)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guess<sp/>=<sp/>(searchStart+searchEnd)/2;</highlight><highlight class="comment">//searchStart+<sp/>(searchEnd-searchStart)*<sp/><sp/>((float)cache-&gt;start<sp/>-<sp/>mDecodeCache[searchStart]-&gt;start<sp/>)/mDecodeCache[searchEnd]-&gt;start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>greater<sp/>than<sp/>OR<sp/>equals<sp/>because<sp/>we<sp/>want<sp/>to<sp/>insert<sp/>infront<sp/>of<sp/>old<sp/>dupes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mDecodeCache[guess]-&gt;start&gt;=<sp/>cache-&gt;start)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(mDecodeCache[guess]-&gt;start<sp/>==<sp/>cache-&gt;start)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;dupe!<sp/>start<sp/>cache<sp/>%llu<sp/>start<sp/>NEW<sp/>cache<sp/>%llu,<sp/>mCurrentPos<sp/>%llu\n&quot;,mDecodeCache[guess]-&gt;start,<sp/>cache-&gt;start,<sp/>mCurrentPos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchEnd<sp/>=<sp/>guess;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchStart<sp/>=<sp/>++guess;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/>mCurrentLen<sp/>=<sp/>cache-&gt;len;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/>mCurrentPos=cache-&gt;start+cache-&gt;len;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/>mDecodeCache.insert(mDecodeCache.begin()+guess,<sp/>cache);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>mDecodeCache.push_back(cache);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>mNumSamplesInCache+=cache-&gt;len;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>cache<sp/>is<sp/>too<sp/>big,<sp/>drop<sp/>some.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(mNumSamplesInCache&gt;kMaxSamplesInCache)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dropindex;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//drop<sp/>which<sp/>ever<sp/>index<sp/>is<sp/>further<sp/>from<sp/>our<sp/>newly<sp/>added<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dropindex<sp/>=<sp/>(guess<sp/>&gt;<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)mDecodeCache.size()/2)<sp/>?<sp/>0<sp/>:<sp/>(mDecodeCache.size()-1);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mNumSamplesInCache-=mDecodeCache[dropindex]-&gt;len;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(mDecodeCache[dropindex]-&gt;<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mDecodeCache[dropindex];</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mDecodeCache.erase(mDecodeCache.begin()+dropindex);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//EXPERIMENTAL_OD_FFMPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//USE_FFMPEG</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/ondemand/ODDecodeFFmpegTask.cpp"/>
  </compounddef>
</doxygen>
