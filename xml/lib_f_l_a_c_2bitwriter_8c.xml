<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lib_f_l_a_c_2bitwriter_8c" kind="file" language="C++">
    <compoundname>bitwriter.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="lib_f_l_a_c_2include_2private_2bitwriter_8h" local="yes">private/bitwriter.h</includes>
    <includes refid="libflac_2src_2lib_f_l_a_c_2include_2private_2crc_8h" local="yes">private/crc.h</includes>
    <includes refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h" local="yes">private/macros.h</includes>
    <includes refid="assert_8h" local="yes">FLAC/assert.h</includes>
    <includes refid="alloc_8h" local="yes">share/alloc.h</includes>
    <includes refid="libflac_2include_2share_2compat_8h" local="yes">share/compat.h</includes>
    <includes refid="include_2share_2endswap_8h" local="yes">share/endswap.h</includes>
    <incdepgraph>
      <node id="7904">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="7905" relation="include">
        </childnode>
        <childnode refid="7906" relation="include">
        </childnode>
        <childnode refid="7892" relation="include">
        </childnode>
      </node>
      <node id="7908">
        <label>stdarg.h</label>
      </node>
      <node id="7895">
        <label>FLAC/ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="7896" relation="include">
        </childnode>
      </node>
      <node id="7896">
        <label>stdint.h</label>
      </node>
      <node id="7891">
        <label>stdlib.h</label>
      </node>
      <node id="7899">
        <label>FLAC/assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="7906">
        <label>alloca.h</label>
      </node>
      <node id="7898">
        <label>private/macros.h</label>
        <link refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h"/>
      </node>
      <node id="7901">
        <label>limits.h</label>
      </node>
      <node id="7905">
        <label>MacTypes.h</label>
      </node>
      <node id="7892">
        <label>string.h</label>
      </node>
      <node id="7907">
        <label>utime.h</label>
      </node>
      <node id="7900">
        <label>share/alloc.h</label>
        <link refid="alloc_8h"/>
        <childnode refid="7901" relation="include">
        </childnode>
        <childnode refid="7891" relation="include">
        </childnode>
        <childnode refid="7902" relation="include">
        </childnode>
      </node>
      <node id="7909">
        <label>share/endswap.h</label>
        <link refid="include_2share_2endswap_8h"/>
      </node>
      <node id="7903">
        <label>unistd.h</label>
      </node>
      <node id="7890">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c</label>
        <link refid="libFLAC/bitwriter.c"/>
        <childnode refid="7891" relation="include">
        </childnode>
        <childnode refid="7892" relation="include">
        </childnode>
        <childnode refid="7893" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7898" relation="include">
        </childnode>
        <childnode refid="7899" relation="include">
        </childnode>
        <childnode refid="7900" relation="include">
        </childnode>
        <childnode refid="7902" relation="include">
        </childnode>
        <childnode refid="7909" relation="include">
        </childnode>
      </node>
      <node id="7902">
        <label>share/compat.h</label>
        <link refid="libflac_2include_2share_2compat_8h"/>
        <childnode refid="7903" relation="include">
        </childnode>
        <childnode refid="7904" relation="include">
        </childnode>
        <childnode refid="7907" relation="include">
        </childnode>
        <childnode refid="7908" relation="include">
        </childnode>
      </node>
      <node id="7893">
        <label>private/bitwriter.h</label>
        <link refid="lib_f_l_a_c_2include_2private_2bitwriter_8h"/>
        <childnode refid="7894" relation="include">
        </childnode>
        <childnode refid="7895" relation="include">
        </childnode>
      </node>
      <node id="7894">
        <label>stdio.h</label>
      </node>
      <node id="7897">
        <label>private/crc.h</label>
        <link refid="libflac_2src_2lib_f_l_a_c_2include_2private_2crc_8h"/>
        <childnode refid="7895" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_f_l_a_c_____bit_writer" prot="public">FLAC__BitWriter</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lib_f_l_a_c_2bitwriter_8c_1a7fef7566120d2dee49ee62c239ad7e7e" prot="public" static="no">
        <name>FLAC__BYTES_PER_WORD</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="50" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" prot="public" static="no">
        <name>FLAC__BITS_PER_WORD</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="51" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_f_l_a_c_2bitwriter_8c_1a2bb3f532a0f74bb43b56557eb2ce2d95" prot="public" static="no">
        <name>FLAC__WORD_ALL_ONES</name>
        <initializer>((<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)0xffffffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="52" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" prot="public" static="no">
        <name>SWAP_BE_WORD_TO_HOST</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="include_2share_2endswap_8h_1a54e3d0aec5f31f61d06cdfbc4e900b34" kindref="member">ENDSWAP_32</ref>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="57" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_f_l_a_c_2bitwriter_8c_1a089f7f12cbe92626d103e5138b1f5950" prot="public" static="no">
        <name>FLAC__WORDS_TO_BITS</name>
        <param><defname>words</defname></param>
        <initializer>((words) * <ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="70" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_f_l_a_c_2bitwriter_8c_1a629f9f3ae8cfc4486af0c19f5a454c50" prot="public" static="no">
        <name>FLAC__TOTAL_BITS</name>
        <param><defname>bw</defname></param>
        <initializer>(<ref refid="lib_f_l_a_c_2bitwriter_8c_1a089f7f12cbe92626d103e5138b1f5950" kindref="member">FLAC__WORDS_TO_BITS</ref>((bw)-&gt;words) + (bw)-&gt;<ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="71" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lib_f_l_a_c_2bitwriter_8c_1a79be042ec35359839615528edbc291cd" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned</type>
        <definition>const unsigned FLAC__BITWRITER_DEFAULT_CAPACITY</definition>
        <argsstring></argsstring>
        <name>FLAC__BITWRITER_DEFAULT_CAPACITY</name>
        <initializer>= 32768u / sizeof(uint32_t)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="66" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lib_f_l_a_c_2bitwriter_8c_1abf3cab7ad7b7a9f7d37fadd7ca7c41d4" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned</type>
        <definition>const unsigned FLAC__BITWRITER_DEFAULT_INCREMENT</definition>
        <argsstring></argsstring>
        <name>FLAC__BITWRITER_DEFAULT_INCREMENT</name>
        <initializer>= 4096u / sizeof(uint32_t)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="68" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a053ee02b8aa7584d3bb68799b1aa84e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>static FLAC__bool bitwriter_grow_</definition>
        <argsstring>(FLAC__BitWriter *bw, unsigned bits_to_add)</argsstring>
        <name>bitwriter_grow_</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bits_to_add</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="85" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="85" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a5fc61c80dcebd2952f82a85c60aee991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
        <definition>FLAC__BitWriter* FLAC__bitwriter_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__bitwriter_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="125" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1ad85e484a6ff0d1b2574d4b0aee8ed901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__bitwriter_delete</definition>
        <argsstring>(FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="132" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="132" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a4dc781481918d9d0c56a37af3dfcef03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_init</definition>
        <argsstring>(FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_init</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="146" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1aaeb12fad07c064e44a14351a01f3833f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__bitwriter_free</definition>
        <argsstring>(FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_free</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="159" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a656d5ee37bb5f3554e686b04cb475568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__bitwriter_clear</definition>
        <argsstring>(FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_clear</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="170" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a460924ef86cc0a6b8122997ddf71c9b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__bitwriter_dump</definition>
        <argsstring>(const FLAC__BitWriter *bw, FILE *out)</argsstring>
        <name>FLAC__bitwriter_dump</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="175" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="175" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1ad99980277a8483f0fede948b37a1eb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_get_write_crc16</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__uint16 *crc)</argsstring>
        <name>FLAC__bitwriter_get_write_crc16</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a0fbaee65d056a075245dcd0c903fb94c" kindref="member">FLAC__uint16</ref> *</type>
          <declname>crc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="199" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1af8bd66581d80d350d1c93519fef9ea88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_get_write_crc8</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__byte *crc)</argsstring>
        <name>FLAC__bitwriter_get_write_crc8</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>crc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="214" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="214" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a851f7741f456446fa2e6819f94767a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_is_byte_aligned</definition>
        <argsstring>(const FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_is_byte_aligned</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="229" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a8ace42b3b1b27ae3bbaa1c6a8b7fa8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned FLAC__bitwriter_get_input_bits_unconsumed</definition>
        <argsstring>(const FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_get_input_bits_unconsumed</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="234" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a0852b436da2d39699a54a40b0fc6835c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_get_buffer</definition>
        <argsstring>(FLAC__BitWriter *bw, const FLAC__byte **buffer, size_t *bytes)</argsstring>
        <name>FLAC__bitwriter_get_buffer</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="239" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="239" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a9c2545c28e17227bcf6385fa7b496e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void FLAC__bitwriter_release_buffer</definition>
        <argsstring>(FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_release_buffer</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="259" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="259" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_zeroes</definition>
        <argsstring>(FLAC__BitWriter *bw, unsigned bits)</argsstring>
        <name>FLAC__bitwriter_write_zeroes</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="267" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="267" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_raw_uint32</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__uint32 val, unsigned bits)</argsstring>
        <name>FLAC__bitwriter_write_raw_uint32</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="305" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="305" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a8f4c590e6465920a256600ae62843dfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_raw_int32</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__int32 val, unsigned bits)</argsstring>
        <name>FLAC__bitwriter_write_raw_int32</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="344" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="344" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1aa14cf60a67862de38f8e8299099a5b6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_raw_uint64</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__uint64 val, unsigned bits)</argsstring>
        <name>FLAC__bitwriter_write_raw_uint64</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="353" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="353" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a55b1078146573cf88fada185233e0105" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_raw_uint32_little_endian</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__uint32 val)</argsstring>
        <name>FLAC__bitwriter_write_raw_uint32_little_endian</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="365" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="365" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1aa12bc7844abb59dd5842eb96c5cbd7e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_byte_block</definition>
        <argsstring>(FLAC__BitWriter *bw, const FLAC__byte vals[], unsigned nvals)</argsstring>
        <name>FLAC__bitwriter_write_byte_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref></type>
          <declname>vals</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nvals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="381" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="381" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1aabfd19bdf430b36ffc2e6f2902b97d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_unary_unsigned</definition>
        <argsstring>(FLAC__BitWriter *bw, unsigned val)</argsstring>
        <name>FLAC__bitwriter_write_unary_unsigned</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="394" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="394" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a32335202ee18a7c960066bf1aff458e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned FLAC__bitwriter_rice_bits</definition>
        <argsstring>(FLAC__int32 val, unsigned parameter)</argsstring>
        <name>FLAC__bitwriter_rice_bits</name>
        <param>
          <type><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="404" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="404" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a5b528462ff1f9b21833d93b43612ca82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_rice_signed</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__int32 val, unsigned parameter)</argsstring>
        <name>FLAC__bitwriter_write_rice_signed</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="480" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="480" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a1affdfdfdbaf243b7426cc2d04eaf2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_rice_signed_block</definition>
        <argsstring>(FLAC__BitWriter *bw, const FLAC__int32 *vals, unsigned nvals, unsigned parameter)</argsstring>
        <name>FLAC__bitwriter_write_rice_signed_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref> *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nvals</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="506" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="506" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1ade687d0d2f1c0617bce678cd652a44e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_utf8_uint32</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__uint32 val)</argsstring>
        <name>FLAC__bitwriter_write_utf8_uint32</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="721" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="721" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a21e089ece69e48b647214e30b0435b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_write_utf8_uint64</definition>
        <argsstring>(FLAC__BitWriter *bw, FLAC__uint64 val)</argsstring>
        <name>FLAC__bitwriter_write_utf8_uint64</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="767" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="767" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="lib_f_l_a_c_2bitwriter_8c_1a0d6e3fded44c6f4d172692be31c13de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC__bool FLAC__bitwriter_zero_pad_to_byte_boundary</definition>
        <argsstring>(FLAC__BitWriter *bw)</argsstring>
        <name>FLAC__bitwriter_zero_pad_to_byte_boundary</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref> *</type>
          <declname>bw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" line="822" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c" bodystart="822" bodyend="829"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>libFLAC<sp/>-<sp/>Free<sp/>Lossless<sp/>Audio<sp/>Codec<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2009<sp/><sp/>Josh<sp/>Coalson</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/><sp/>Xiph.Org<sp/>Foundation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Xiph.org<sp/>Foundation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>FOUNDATION<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_f_l_a_c_2include_2private_2bitwriter_8h" kindref="compound">private/bitwriter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2src_2lib_f_l_a_c_2include_2private_2crc_8h" kindref="compound">private/crc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2src_2lib_f_l_a_c_2include_2private_2macros_8h" kindref="compound">private/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assert_8h" kindref="compound">FLAC/assert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="alloc_8h" kindref="compound">share/alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libflac_2include_2share_2compat_8h" kindref="compound">share/compat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="include_2share_2endswap_8h" kindref="compound">share/endswap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Things<sp/>should<sp/>be<sp/>fastest<sp/>when<sp/>this<sp/>matches<sp/>the<sp/>machine<sp/>word<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>if<sp/>you<sp/>change<sp/>this<sp/>you<sp/>must<sp/>also<sp/>change<sp/>the<sp/>following<sp/>#defines<sp/>down<sp/>to<sp/>SWAP_BE_WORD_TO_HOST<sp/>below<sp/>to<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>there<sp/>are<sp/>a<sp/>few<sp/>places<sp/>where<sp/>the<sp/>code<sp/>will<sp/>not<sp/>work<sp/>unless<sp/>uint32_t<sp/>is<sp/>&gt;=<sp/>32<sp/>bits<sp/>wide<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="lib_f_l_a_c_2bitwriter_8c_1a7fef7566120d2dee49ee62c239ad7e7e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__BYTES_PER_WORD<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__BITS_PER_WORD<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="lib_f_l_a_c_2bitwriter_8c_1a2bb3f532a0f74bb43b56557eb2ce2d95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__WORD_ALL_ONES<sp/>((FLAC__uint32)0xffffffff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SWAP_BE_WORD_TO_HOST<sp/>swaps<sp/>bytes<sp/>in<sp/>a<sp/>uint32_t<sp/>(which<sp/>is<sp/>always<sp/>big-endian)<sp/>if<sp/>necessary<sp/>to<sp/>match<sp/>host<sp/>byte<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SWAP_BE_WORD_TO_HOST(x)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SWAP_BE_WORD_TO_HOST(x)<sp/>ENDSWAP_32(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>The<sp/>default<sp/>capacity<sp/>here<sp/>doesn&apos;t<sp/>matter<sp/>too<sp/>much.<sp/><sp/>The<sp/>buffer<sp/>always<sp/>grows</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>to<sp/>hold<sp/>whatever<sp/>is<sp/>written<sp/>to<sp/>it.<sp/><sp/>Usually<sp/>the<sp/>encoder<sp/>will<sp/>stop<sp/>adding<sp/>at</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>a<sp/>frame<sp/>or<sp/>metadata<sp/>block,<sp/>then<sp/>write<sp/>that<sp/>out<sp/>and<sp/>clear<sp/>the<sp/>buffer<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>next<sp/>one.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FLAC__BITWRITER_DEFAULT_CAPACITY<sp/>=<sp/>32768u<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>);<sp/></highlight><highlight class="comment">/*<sp/>size<sp/>in<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>When<sp/>growing,<sp/>increment<sp/>4K<sp/>at<sp/>a<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FLAC__BITWRITER_DEFAULT_INCREMENT<sp/>=<sp/>4096u<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>);<sp/></highlight><highlight class="comment">/*<sp/>size<sp/>in<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="lib_f_l_a_c_2bitwriter_8c_1a089f7f12cbe92626d103e5138b1f5950" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__WORDS_TO_BITS(words)<sp/>((words)<sp/>*<sp/>FLAC__BITS_PER_WORD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="lib_f_l_a_c_2bitwriter_8c_1a629f9f3ae8cfc4486af0c19f5a454c50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__TOTAL_BITS(bw)<sp/>(FLAC__WORDS_TO_BITS((bw)-&gt;words)<sp/>+<sp/>(bw)-&gt;bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="struct_f_l_a_c_____bit_writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>{</highlight></codeline>
<codeline lineno="74" refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>*<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="75" refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref>;<sp/></highlight><highlight class="comment">/*<sp/>accumulator;<sp/>bits<sp/>are<sp/>right-justified;<sp/>when<sp/>full,<sp/>accum<sp/>is<sp/>appended<sp/>to<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>;<sp/></highlight><highlight class="comment">/*<sp/>capacity<sp/>of<sp/>buffer<sp/>in<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>;<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>complete<sp/>words<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>used<sp/>bits<sp/>in<sp/>accum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>WATCHOUT:<sp/>The<sp/>current<sp/>implementation<sp/>only<sp/>grows<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SUNPRO_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>bitwriter_grow_(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits_to_add)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>new_capacity;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>*new_buffer;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>total<sp/>words<sp/>needed<sp/>to<sp/>store<sp/>&apos;bits_to_add&apos;<sp/>additional<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>new_capacity<sp/>=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>+<sp/>((bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+<sp/>bits_to_add<sp/>+<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>-<sp/>1)<sp/>/<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>it&apos;s<sp/>possible<sp/>(due<sp/>to<sp/>pessimism<sp/>in<sp/>the<sp/>growth<sp/>estimation<sp/>that</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>leads<sp/>to<sp/>this<sp/>call)<sp/>that<sp/>we<sp/>don&apos;t<sp/>actually<sp/>need<sp/>to<sp/>grow</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>&gt;=<sp/>new_capacity)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>round<sp/>up<sp/>capacity<sp/>increase<sp/>to<sp/>the<sp/>nearest<sp/>FLAC__BITWRITER_DEFAULT_INCREMENT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((new_capacity<sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>)<sp/>%<sp/>FLAC__BITWRITER_DEFAULT_INCREMENT)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_capacity<sp/>+=<sp/>FLAC__BITWRITER_DEFAULT_INCREMENT<sp/>-<sp/>((new_capacity<sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>)<sp/>%<sp/>FLAC__BITWRITER_DEFAULT_INCREMENT);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>we<sp/>got<sp/>everything<sp/>right<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>==<sp/>(new_capacity<sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>)<sp/>%<sp/>FLAC__BITWRITER_DEFAULT_INCREMENT);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(new_capacity<sp/>&gt;<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(new_capacity<sp/>&gt;=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>+<sp/>((bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+<sp/>bits_to_add<sp/>+<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>-<sp/>1)<sp/>/<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>new_buffer<sp/>=<sp/>safe_realloc_mul_2op_(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>),<sp/></highlight><highlight class="comment">/*times*/</highlight><highlight class="normal">new_capacity);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_buffer<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref><sp/>=<sp/>new_buffer;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>=<sp/>new_capacity;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>Class<sp/>constructor/destructor</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a5fc61c80dcebd2952f82a85c60aee991" refkind="member"><highlight class="normal"><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*<ref refid="lib_f_l_a_c_2bitwriter_8c_1a5fc61c80dcebd2952f82a85c60aee991" kindref="member">FLAC__bitwriter_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>calloc()<sp/>sets<sp/>all<sp/>members<sp/>to<sp/>0<sp/>for<sp/>us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bw;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1ad85e484a6ff0d1b2574d4b0aee8ed901" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1ad85e484a6ff0d1b2574d4b0aee8ed901" kindref="member">FLAC__bitwriter_delete</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aaeb12fad07c064e44a14351a01f3833f" kindref="member">FLAC__bitwriter_free</ref>(bw);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>free(bw);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>Public<sp/>class<sp/>methods</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a4dc781481918d9d0c56a37af3dfcef03" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a4dc781481918d9d0c56a37af3dfcef03" kindref="member">FLAC__bitwriter_init</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>=<sp/>FLAC__BITWRITER_DEFAULT_CAPACITY;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)<sp/>*<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1aaeb12fad07c064e44a14351a01f3833f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aaeb12fad07c064e44a14351a01f3833f" kindref="member">FLAC__bitwriter_free</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a656d5ee37bb5f3554e686b04cb475568" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a656d5ee37bb5f3554e686b04cb475568" kindref="member">FLAC__bitwriter_clear</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a460924ef86cc0a6b8122997ddf71c9b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a460924ef86cc0a6b8122997ddf71c9b1" kindref="member">FLAC__bitwriter_dump</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/>FILE<sp/>*<ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;bitwriter<sp/>is<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;bitwriter:<sp/>capacity=%u<sp/>words=%u<sp/>bits=%u<sp/>total_bits=%u\n&quot;</highlight><highlight class="normal">,<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>,<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>,<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>,<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a629f9f3ae8cfc4486af0c19f5a454c50" kindref="member">FLAC__TOTAL_BITS</ref>(bw));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;%08X:<sp/>&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;%01u&quot;</highlight><highlight class="normal">,<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[i]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(FLAC__BITS_PER_WORD-j-1))<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;%08X:<sp/>&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;%01u&quot;</highlight><highlight class="normal">,<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>-j-1))<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1ad99980277a8483f0fede948b37a1eb30" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1ad99980277a8483f0fede948b37a1eb30" kindref="member">FLAC__bitwriter_get_write_crc16</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a0fbaee65d056a075245dcd0c903fb94c" kindref="member">FLAC__uint16</ref><sp/>*crc)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>((bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>assert<sp/>that<sp/>we&apos;re<sp/>byte-aligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a0852b436da2d39699a54a40b0fc6835c" kindref="member">FLAC__bitwriter_get_buffer</ref>(bw,<sp/>&amp;buffer,<sp/>&amp;bytes))</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>*crc<sp/>=<sp/>(<ref refid="ordinals_8h_1a0fbaee65d056a075245dcd0c903fb94c" kindref="member">FLAC__uint16</ref>)<ref refid="libflac_2src_2lib_f_l_a_c_2crc_8c_1a7b374cf78005ecaa55463be292166042" kindref="member">FLAC__crc16</ref>(buffer,<sp/>bytes);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a9c2545c28e17227bcf6385fa7b496e64" kindref="member">FLAC__bitwriter_release_buffer</ref>(bw);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1af8bd66581d80d350d1c93519fef9ea88" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1af8bd66581d80d350d1c93519fef9ea88" kindref="member">FLAC__bitwriter_get_write_crc8</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*crc)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>*<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>((bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>assert<sp/>that<sp/>we&apos;re<sp/>byte-aligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a0852b436da2d39699a54a40b0fc6835c" kindref="member">FLAC__bitwriter_get_buffer</ref>(bw,<sp/>&amp;buffer,<sp/>&amp;bytes))</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>*crc<sp/>=<sp/><ref refid="libflac_2src_2lib_f_l_a_c_2crc_8c_1a224605b3f184cb09c38a5e5d0553ba41" kindref="member">FLAC__crc8</ref>(buffer,<sp/>bytes);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a9c2545c28e17227bcf6385fa7b496e64" kindref="member">FLAC__bitwriter_release_buffer</ref>(bw);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a851f7741f456446fa2e6819f94767a2b" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a851f7741f456446fa2e6819f94767a2b" kindref="member">FLAC__bitwriter_is_byte_aligned</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a8ace42b3b1b27ae3bbaa1c6a8b7fa8b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a8ace42b3b1b27ae3bbaa1c6a8b7fa8b9" kindref="member">FLAC__bitwriter_get_input_bits_unconsumed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a629f9f3ae8cfc4486af0c19f5a454c50" kindref="member">FLAC__TOTAL_BITS</ref>(bw);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a0852b436da2d39699a54a40b0fc6835c" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a0852b436da2d39699a54a40b0fc6835c" kindref="member">FLAC__bitwriter_get_buffer</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>**<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytes)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>((bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>protection<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>have<sp/>bits<sp/>in<sp/>the<sp/>accumulator<sp/>we<sp/>have<sp/>to<sp/>flush<sp/>those<sp/>to<sp/>the<sp/>buffer<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>&lt;=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>==<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>&amp;&amp;<sp/>!bitwriter_grow_(bw,<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>append<sp/>bits<sp/>as<sp/>complete<sp/>word<sp/>to<sp/>buffer,<sp/>but<sp/>don&apos;t<sp/>change<sp/>bw-&gt;accum<sp/>or<sp/>bw-&gt;bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>]<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" kindref="member">SWAP_BE_WORD_TO_HOST</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;<sp/>(<ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>-bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>we<sp/>can<sp/>just<sp/>return<sp/>what<sp/>we<sp/>have<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer<sp/>=<sp/>(<ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref>*)bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>*bytes<sp/>=<sp/>(<ref refid="lib_f_l_a_c_2bitwriter_8c_1a7fef7566120d2dee49ee62c239ad7e7e" kindref="member">FLAC__BYTES_PER_WORD</ref><sp/>*<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>)<sp/>+<sp/>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a9c2545c28e17227bcf6385fa7b496e64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a9c2545c28e17227bcf6385fa7b496e64" kindref="member">FLAC__bitwriter_release_buffer</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do.<sp/><sp/>in<sp/>the<sp/>future,<sp/>strict<sp/>checking<sp/>of<sp/>a<sp/>&apos;writer-is-in-</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>get-mode&apos;<sp/>flag<sp/>could<sp/>be<sp/>added<sp/>everywhere<sp/>and<sp/>then<sp/>cleared<sp/>here</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)bw;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a289a5fd39585a6f75c9e0480553dac20" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>slightly<sp/>pessimistic<sp/>size<sp/>check<sp/>but<sp/>faster<sp/>than<sp/>&quot;&lt;=<sp/>bw-&gt;words<sp/>+<sp/>(bw-&gt;bits+bits+FLAC__BITS_PER_WORD-1)/FLAC__BITS_PER_WORD&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>&lt;=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>+<sp/>bits<sp/>&amp;&amp;<sp/>!bitwriter_grow_(bw,<sp/>bits))</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>part<sp/>gets<sp/>to<sp/>word<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>flac_min(<ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>,<sp/>bits);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>n;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>==<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" kindref="member">SWAP_BE_WORD_TO_HOST</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>whole<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bits<sp/>&gt;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>any<sp/>leftovers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a539dc154c61b6524c6fc68fdcbdc28a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>left;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>code<sp/>does<sp/>not<sp/>work<sp/>with<sp/>&lt;32bit<sp/>words;<sp/>we<sp/>can<sp/>make<sp/>things<sp/>much<sp/>faster<sp/>with<sp/>this<sp/>assertion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(<ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>&gt;=<sp/>32);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(bits<sp/>&lt;=<sp/>32);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>slightly<sp/>pessimistic<sp/>size<sp/>check<sp/>but<sp/>faster<sp/>than<sp/>&quot;&lt;=<sp/>bw-&gt;words<sp/>+<sp/>(bw-&gt;bits+bits+FLAC__BITS_PER_WORD-1)/FLAC__BITS_PER_WORD&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>&lt;=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>+<sp/>bits<sp/>&amp;&amp;<sp/>!bitwriter_grow_(bw,<sp/>bits))</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>|=<sp/>val;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+=<sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>if<sp/>bw-&gt;bits<sp/>==<sp/>0,<sp/>left==FLAC__BITS_PER_WORD<sp/>and<sp/>bw-&gt;accum&lt;&lt;=left<sp/>is<sp/>a<sp/>NOP<sp/>instead<sp/>of<sp/>setting<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>left;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>|=<sp/>val<sp/>&gt;&gt;<sp/>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>bits<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" kindref="member">SWAP_BE_WORD_TO_HOST</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" kindref="member">SWAP_BE_WORD_TO_HOST</ref>(val);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a8f4c590e6465920a256600ae62843dfa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a8f4c590e6465920a256600ae62843dfa" kindref="member">FLAC__bitwriter_write_raw_int32</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero-out<sp/>unused<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&lt;<sp/>32)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>&amp;=<sp/>(~(0xffffffff<sp/>&lt;&lt;<sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)val,<sp/>bits);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1aa14cf60a67862de38f8e8299099a5b6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aa14cf60a67862de38f8e8299099a5b6a" kindref="member">FLAC__bitwriter_write_raw_uint64</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>could<sp/>be<sp/>a<sp/>little<sp/>faster<sp/>but<sp/>it&apos;s<sp/>not<sp/>used<sp/>for<sp/>much<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&gt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&gt;&gt;32),<sp/>bits-32)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)val,<sp/>32);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)val,<sp/>bits);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a55b1078146573cf88fada185233e0105" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a55b1078146573cf88fada185233e0105" kindref="member">FLAC__bitwriter_write_raw_uint32_little_endian</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>val)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>that<sp/>fast<sp/>as<sp/>currently<sp/>it<sp/>is<sp/>only<sp/>used<sp/>for<sp/>vorbis<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>val<sp/>&amp;<sp/>0xff,<sp/>8))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(val&gt;&gt;8)<sp/>&amp;<sp/>0xff,<sp/>8))</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(val&gt;&gt;16)<sp/>&amp;<sp/>0xff,<sp/>8))</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>val&gt;&gt;24,<sp/>8))</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1aa12bc7844abb59dd5842eb96c5cbd7e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aa12bc7844abb59dd5842eb96c5cbd7e4" kindref="member">FLAC__bitwriter_write_byte_block</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>vals[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nvals)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>could<sp/>be<sp/>faster<sp/>but<sp/>currently<sp/>we<sp/>don&apos;t<sp/>need<sp/>it<sp/>to<sp/>be<sp/>since<sp/>it&apos;s<sp/>only<sp/>used<sp/>for<sp/>writing<sp/>metadata<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvals;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(vals[i]),<sp/>8))</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1aabfd19bdf430b36ffc2e6f2902b97d89" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aabfd19bdf430b36ffc2e6f2902b97d89" kindref="member">FLAC__bitwriter_write_unary_unsigned</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>32)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>1,<sp/>++val);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>val)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a32335202ee18a7c960066bf1aff458e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a32335202ee18a7c960066bf1aff458e3" kindref="member">FLAC__bitwriter_rice_bits</ref>(<ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>uval;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)*8);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fold<sp/>signed<sp/>to<sp/>unsigned;<sp/>actual<sp/>formula<sp/>is:<sp/>negative(v)?<sp/>-2v-1<sp/>:<sp/>2v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(val&lt;&lt;1)<sp/>^<sp/>(val&gt;&gt;31);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>parameter<sp/>+<sp/>(uval<sp/>&gt;&gt;<sp/>parameter);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>UNUSED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FLAC__bitwriter_golomb_bits_signed(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>,<sp/>msbs,<sp/>uval;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fold<sp/>signed<sp/>to<sp/>unsigned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(unsigned)(((-(++val))<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(unsigned)(val<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>FLAC__bitmath_ilog2(parameter);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parameter<sp/>==<sp/>1u&lt;&lt;k)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(k<sp/>&lt;=<sp/>30);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbs<sp/>=<sp/>uval<sp/>&gt;&gt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>1<sp/>+<sp/>k<sp/>+<sp/>msbs;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>,<sp/>r,<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(k+1))<sp/>-<sp/>parameter;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>uval<sp/>/<sp/>parameter;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>uval<sp/>-<sp/>(q<sp/>*<sp/>parameter);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>1<sp/>+<sp/>q<sp/>+<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>&gt;=<sp/>d)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits++;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FLAC__bitwriter_golomb_bits_unsigned(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uval,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>,<sp/>msbs;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>FLAC__bitmath_ilog2(parameter);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parameter<sp/>==<sp/>1u&lt;&lt;k)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(k<sp/>&lt;=<sp/>30);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbs<sp/>=<sp/>uval<sp/>&gt;&gt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>1<sp/>+<sp/>k<sp/>+<sp/>msbs;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>,<sp/>r,<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(k+1))<sp/>-<sp/>parameter;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>uval<sp/>/<sp/>parameter;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>uval<sp/>-<sp/>(q<sp/>*<sp/>parameter);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>1<sp/>+<sp/>q<sp/>+<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>&gt;=<sp/>d)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits++;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UNUSED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a5b528462ff1f9b21833d93b43612ca82" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a5b528462ff1f9b21833d93b43612ca82" kindref="member">FLAC__bitwriter_write_rice_signed</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_bits,<sp/>interesting_bits,<sp/>msbs;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>uval,<sp/>pattern;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&lt;<sp/>8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uval));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fold<sp/>signed<sp/>to<sp/>unsigned;<sp/>actual<sp/>formula<sp/>is:<sp/>negative(v)?<sp/>-2v-1<sp/>:<sp/>2v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(val&lt;&lt;1)<sp/>^<sp/>(val&gt;&gt;31);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>msbs<sp/>=<sp/>uval<sp/>&gt;&gt;<sp/>parameter;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>interesting_bits<sp/>=<sp/>1<sp/>+<sp/>parameter;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>total_bits<sp/>=<sp/>interesting_bits<sp/>+<sp/>msbs;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>parameter;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern<sp/>|=<sp/>(uval<sp/>&amp;<sp/>((1&lt;&lt;parameter)-1));<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_bits<sp/>&lt;=<sp/>32)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>pattern,<sp/>total_bits);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>msbs)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>MSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>pattern,<sp/>interesting_bits);<sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>and<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a1affdfdfdbaf243b7426cc2d04eaf2e3" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a1affdfdfdbaf243b7426cc2d04eaf2e3" kindref="member">FLAC__bitwriter_write_rice_signed_block</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>*vals,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nvals,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>mask1<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a2bb3f532a0f74bb43b56557eb2ce2d95" kindref="member">FLAC__WORD_ALL_ONES</ref><sp/>&lt;&lt;<sp/>parameter;<sp/></highlight><highlight class="comment">/*<sp/>we<sp/>val|=mask1<sp/>to<sp/>set<sp/>the<sp/>stop<sp/>bit<sp/>above<sp/>it...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>mask2<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a2bb3f532a0f74bb43b56557eb2ce2d95" kindref="member">FLAC__WORD_ALL_ONES</ref><sp/>&gt;&gt;<sp/>(31-parameter);<sp/></highlight><highlight class="comment">/*<sp/>...then<sp/>mask<sp/>off<sp/>the<sp/>bits<sp/>above<sp/>the<sp/>stop<sp/>bit<sp/>with<sp/>val&amp;=mask2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>uval;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>left;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lsbits<sp/>=<sp/>1<sp/>+<sp/>parameter;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>msbits;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&lt;<sp/>8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)-1);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>WATCHOUT:<sp/>code<sp/>does<sp/>not<sp/>work<sp/>with<sp/>&lt;32bit<sp/>words;<sp/>we<sp/>can<sp/>make<sp/>things<sp/>much<sp/>faster<sp/>with<sp/>this<sp/>assertion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(<ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>&gt;=<sp/>32);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(nvals)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fold<sp/>signed<sp/>to<sp/>unsigned;<sp/>actual<sp/>formula<sp/>is:<sp/>negative(v)?<sp/>-2v-1<sp/>:<sp/>2v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(*vals&lt;&lt;1)<sp/>^<sp/>(*vals&gt;&gt;31);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbits<sp/>=<sp/>uval<sp/>&gt;&gt;<sp/>parameter;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;&amp;<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+<sp/>msbits<sp/>+<sp/>lsbits<sp/>&lt;<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>i.e.<sp/>if<sp/>the<sp/>whole<sp/>thing<sp/>fits<sp/>in<sp/>the<sp/>current<sp/>uint32_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>^^^<sp/>if<sp/>bw-&gt;bits<sp/>is<sp/>0<sp/>then<sp/>we<sp/>may<sp/>have<sp/>filled<sp/>the<sp/>buffer<sp/>and<sp/>have<sp/>no<sp/>free<sp/>uint32_t<sp/>to<sp/>work<sp/>in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+<sp/>msbits<sp/>+<sp/>lsbits;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>|=<sp/>mask1;<sp/></highlight><highlight class="comment">/*<sp/>set<sp/>stop<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>&amp;=<sp/>mask2;<sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>off<sp/>unused<sp/>top<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>msbits<sp/>+<sp/>lsbits;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>|=<sp/>uval;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>slightly<sp/>pessimistic<sp/>size<sp/>check<sp/>but<sp/>faster<sp/>than<sp/>&quot;&lt;=<sp/>bw-&gt;words<sp/>+<sp/>(bw-&gt;bits+msbits+lsbits+FLAC__BITS_PER_WORD-1)/FLAC__BITS_PER_WORD&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OPT:<sp/>pessimism<sp/>may<sp/>cause<sp/>flurry<sp/>of<sp/>false<sp/>calls<sp/>to<sp/>grow_<sp/>which<sp/>eat<sp/>up<sp/>all<sp/>savings<sp/>before<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1aece58c99ff9ff4a2680deee41a422448" kindref="member">capacity</ref><sp/>&lt;=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref><sp/>+<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+<sp/>msbits<sp/>+<sp/>1</highlight><highlight class="comment">/*lsbits<sp/>always<sp/>fit<sp/>in<sp/>1<sp/>uint32_t*/</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!bitwriter_grow_(bw,<sp/>msbits+lsbits))</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msbits)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>part<sp/>gets<sp/>to<sp/>word<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msbits<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>msbits;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+=<sp/>msbits;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>break1;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>left;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbits<sp/>-=<sp/>left;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" kindref="member">SWAP_BE_WORD_TO_HOST</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>whole<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(msbits<sp/>&gt;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbits<sp/>-=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>any<sp/>leftovers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msbits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>msbits;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal">break1:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>|=<sp/>mask1;<sp/></highlight><highlight class="comment">/*<sp/>set<sp/>stop<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>&amp;=<sp/>mask2;<sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>off<sp/>unused<sp/>top<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref><sp/>-<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lsbits<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>lsbits;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>|=<sp/>uval;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>+=<sp/>lsbits;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>bw-&gt;bits<sp/>==<sp/>0,<sp/>left==FLAC__BITS_PER_WORD<sp/>which<sp/>will<sp/>always</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>be<sp/>&gt;<sp/>lsbits<sp/>(because<sp/>of<sp/>previous<sp/>assertions)<sp/>so<sp/>it<sp/>would<sp/>have</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>triggered<sp/>the<sp/>(lsbits&lt;left)<sp/>case<sp/>above.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(left<sp/>&lt;<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aea11f2954ff740c8de5039d89ad89999" kindref="member">FLAC__BITS_PER_WORD</ref>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>&lt;&lt;=<sp/>left;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>|=<sp/>uval<sp/>&gt;&gt;<sp/>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>=<sp/>lsbits<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>[bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a03780c7567c8b0da65ad1651e81b85b1" kindref="member">words</ref>++]<sp/>=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a3f56349a14908953c8006f33d1df6674" kindref="member">SWAP_BE_WORD_TO_HOST</ref>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1abbfbd68ac3abfc1351a75c0af1b20feb" kindref="member">accum</ref><sp/>=<sp/>uval;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals++;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvals--;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>UNUSED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>FLAC__bitwriter_write_golomb_signed(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_bits,<sp/>msbs,<sp/>uval;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fold<sp/>signed<sp/>to<sp/>unsigned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(unsigned)(((-(++val))<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uval<sp/>=<sp/>(unsigned)(val<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>FLAC__bitmath_ilog2(parameter);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parameter<sp/>==<sp/>1u&lt;&lt;k)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(k<sp/>&lt;=<sp/>30);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbs<sp/>=<sp/>uval<sp/>&gt;&gt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_bits<sp/>=<sp/>1<sp/>+<sp/>k<sp/>+<sp/>msbs;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>|=<sp/>(uval<sp/>&amp;<sp/>((1u&lt;&lt;<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>)-1));<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_bits<sp/>&lt;=<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>pattern,<sp/>total_bits))</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>MSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>msbs))</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>and<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>pattern,<sp/>k+1))</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>,<sp/>r,<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(k+1))<sp/>-<sp/>parameter;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>uval<sp/>/<sp/>parameter;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>uval<sp/>-<sp/>(q<sp/>*<sp/>parameter);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>MSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>q))</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>1,<sp/>1))</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>&gt;=<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>r+d,<sp/>k+1))</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>r,<sp/>k))</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>FLAC__bitwriter_write_golomb_unsigned(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uval,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parameter)</highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_bits,<sp/>msbs;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(parameter<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>FLAC__bitmath_ilog2(parameter);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parameter<sp/>==<sp/>1u&lt;&lt;k)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pattern;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(k<sp/>&lt;=<sp/>30);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msbs<sp/>=<sp/>uval<sp/>&gt;&gt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_bits<sp/>=<sp/>1<sp/>+<sp/>k<sp/>+<sp/>msbs;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>1<sp/>&lt;&lt;<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>|=<sp/>(uval<sp/>&amp;<sp/>((1u&lt;&lt;<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>)-1));<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_bits<sp/>&lt;=<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>pattern,<sp/>total_bits))</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>MSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>msbs))</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>and<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>pattern,<sp/>k+1))</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>,<sp/>r,<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(k+1))<sp/>-<sp/>parameter;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>uval<sp/>/<sp/>parameter;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>uval<sp/>-<sp/>(q<sp/>*<sp/>parameter);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>MSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>q))</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>unary<sp/>end<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>1,<sp/>1))</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>the<sp/>binary<sp/>LSBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>&gt;=<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>r+d,<sp/>k+1))</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>r,<sp/>k))</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UNUSED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1ade687d0d2f1c0617bce678cd652a44e6" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1ade687d0d2f1c0617bce678cd652a44e6" kindref="member">FLAC__bitwriter_write_utf8_uint32</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>val)</highlight></codeline>
<codeline lineno="722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(!(val<sp/>&amp;<sp/>0x80000000));<sp/></highlight><highlight class="comment">/*<sp/>this<sp/>version<sp/>only<sp/>handles<sp/>31<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>val,<sp/>8);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x800)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xC0<sp/>|<sp/>(val&gt;&gt;6),<sp/>8);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xE0<sp/>|<sp/>(val&gt;&gt;12),<sp/>8);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x200000)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xF0<sp/>|<sp/>(val&gt;&gt;18),<sp/>8);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x4000000)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xF8<sp/>|<sp/>(val&gt;&gt;24),<sp/>8);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;18)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xFC<sp/>|<sp/>(val&gt;&gt;30),<sp/>8);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;24)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;18)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a21e089ece69e48b647214e30b0435b06" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a21e089ece69e48b647214e30b0435b06" kindref="member">FLAC__bitwriter_write_utf8_uint64</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>val)</highlight></codeline>
<codeline lineno="768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(0<sp/>!=<sp/>bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1a67f6b62b61e9b81735a22deefca7b620" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1abbb0225e0bf865be91804deedce4511e" kindref="member">FLAC__ASSERT</ref>(!(val<sp/>&amp;<sp/><ref refid="libflac_2include_2share_2compat_8h_1a25da3a6f2ef60b834f872d6f1532c6db" kindref="member">FLAC__U64L</ref>(0xFFFFFFF000000000)));<sp/></highlight><highlight class="comment">/*<sp/>this<sp/>version<sp/>only<sp/>handles<sp/>36<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)val,<sp/>8);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x800)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xC0<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&gt;&gt;6),<sp/>8);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xE0<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&gt;&gt;12),<sp/>8);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x200000)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xF0<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&gt;&gt;18),<sp/>8);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x4000000)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xF8<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&gt;&gt;24),<sp/>8);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;18)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0x80000000)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xFC<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&gt;&gt;30),<sp/>8);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;24)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;18)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0xFE,<sp/>8);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;30)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;24)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;18)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;12)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)((val&gt;&gt;6)&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>&amp;=<sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a539dc154c61b6524c6fc68fdcbdc28a3" kindref="member">FLAC__bitwriter_write_raw_uint32</ref>(bw,<sp/>0x80<sp/>|<sp/>(<ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref>)(val&amp;0x3F),<sp/>8);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822" refid="lib_f_l_a_c_2include_2private_2bitwriter_8h_1a0d6e3fded44c6f4d172692be31c13de9" refkind="member"><highlight class="normal"><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a0d6e3fded44c6f4d172692be31c13de9" kindref="member">FLAC__bitwriter_zero_pad_to_byte_boundary</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw)</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0-pad<sp/>to<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7u)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(bw,<sp/>8<sp/>-<sp/>(bw-&gt;<ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref><sp/>&amp;<sp/>7u));</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>functions<sp/>are<sp/>declared<sp/>inline<sp/>in<sp/>this<sp/>file<sp/>but<sp/>are<sp/>also<sp/>callable<sp/>as</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>externs<sp/>from<sp/>elsewhere.</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*<sp/>According<sp/>to<sp/>the<sp/>C99<sp/>spec,<sp/>section<sp/>6.7.4,<sp/>simply<sp/>providing<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*<sp/>prototype<sp/>in<sp/>a<sp/>header<sp/>file<sp/>without<sp/>&apos;inline&apos;<sp/>and<sp/>making<sp/>the<sp/>function<sp/>inline</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/>in<sp/>this<sp/>file<sp/>should<sp/>be<sp/>sufficient.</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/>Unfortunately,<sp/>the<sp/>Microsoft<sp/>VS<sp/>compiler<sp/>doesn&apos;t<sp/>pick<sp/>them<sp/>up<sp/>externally.<sp/>To</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*<sp/>fix<sp/>that<sp/>we<sp/>add<sp/>extern<sp/>declarations<sp/>here.</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a289a5fd39585a6f75c9e0480553dac20" kindref="member">FLAC__bitwriter_write_zeroes</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a8f4c590e6465920a256600ae62843dfa" kindref="member">FLAC__bitwriter_write_raw_int32</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a33fd77bfe6d685541a0c034a75deccdc" kindref="member">FLAC__int32</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aa14cf60a67862de38f8e8299099a5b6a" kindref="member">FLAC__bitwriter_write_raw_uint64</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1aa78c8c70a3eb8a58af7436f278acde8e" kindref="member">FLAC__uint64</ref><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_f_l_a_c_____bit_writer_1ae397bee0458fc8bdd02ba5ecefddfbb8" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1a55b1078146573cf88fada185233e0105" kindref="member">FLAC__bitwriter_write_raw_uint32_little_endian</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/><ref refid="ordinals_8h_1a9c4005ea7ef8d564b0cc993cdd0e4e5e" kindref="member">FLAC__uint32</ref><sp/>val);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref><sp/><ref refid="lib_f_l_a_c_2bitwriter_8c_1aa12bc7844abb59dd5842eb96c5cbd7e4" kindref="member">FLAC__bitwriter_write_byte_block</ref>(<ref refid="struct_f_l_a_c_____bit_writer" kindref="compound">FLAC__BitWriter</ref><sp/>*bw,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref><sp/>vals[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nvals);</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/bitwriter.c"/>
  </compounddef>
</doxygen>
