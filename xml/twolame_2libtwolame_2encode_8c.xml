<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="twolame_2libtwolame_2encode_8c" kind="file" language="C++">
    <compoundname>encode.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="twolame_8h" local="yes">twolame.h</includes>
    <includes refid="twolame_2libtwolame_2common_8h" local="yes">common.h</includes>
    <includes refid="bitbuffer_8h" local="yes">bitbuffer.h</includes>
    <includes refid="availbits_8h" local="yes">availbits.h</includes>
    <includes refid="twolame_2libtwolame_2encode_8h" local="yes">encode.h</includes>
    <includes refid="bitbuffer__inline_8h" local="yes">bitbuffer_inline.h</includes>
    <incdepgraph>
      <node id="7515">
        <label>stdlib.h</label>
      </node>
      <node id="7517">
        <label>twolame.h</label>
        <link refid="twolame_8h"/>
      </node>
      <node id="7521">
        <label>availbits.h</label>
        <link refid="availbits_8h"/>
      </node>
      <node id="7513">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c</label>
        <link refid="twolame/libtwolame/encode.c"/>
        <childnode refid="7514" relation="include">
        </childnode>
        <childnode refid="7515" relation="include">
        </childnode>
        <childnode refid="7516" relation="include">
        </childnode>
        <childnode refid="7517" relation="include">
        </childnode>
        <childnode refid="7518" relation="include">
        </childnode>
        <childnode refid="7520" relation="include">
        </childnode>
        <childnode refid="7521" relation="include">
        </childnode>
        <childnode refid="7522" relation="include">
        </childnode>
        <childnode refid="7523" relation="include">
        </childnode>
      </node>
      <node id="7522">
        <label>encode.h</label>
        <link refid="twolame_2libtwolame_2encode_8h"/>
      </node>
      <node id="7516">
        <label>math.h</label>
      </node>
      <node id="7523">
        <label>bitbuffer_inline.h</label>
        <link refid="bitbuffer__inline_8h"/>
      </node>
      <node id="7520">
        <label>bitbuffer.h</label>
        <link refid="bitbuffer_8h"/>
        <childnode refid="7518" relation="include">
        </childnode>
      </node>
      <node id="7519">
        <label>config.h</label>
      </node>
      <node id="7514">
        <label>stdio.h</label>
      </node>
      <node id="7518">
        <label>common.h</label>
        <link refid="twolame_2libtwolame_2common_8h"/>
        <childnode refid="7519" relation="include">
        </childnode>
        <childnode refid="7517" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="twolame_2libtwolame_2encode_8c_1ab382fe1b76822ae8543b342fce3df974" prot="public" static="no">
        <name>NUMTABLES</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="72" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="twolame_2libtwolame_2encode_8c_1a3bf94aae6ba48c5a5783656c4480aeb9" prot="public" static="no">
        <name>DUMPTABLESx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="221" column="9"/>
      </memberdef>
      <memberdef kind="define" id="twolame_2libtwolame_2encode_8c_1aeac677a96544731230a94b3678b96442" prot="public" static="no">
        <name>NEWBITx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="993" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1a0674b906b95ca264ae1c43d3f9fc447c" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
        <definition>const FLOAT multiple[64]</definition>
        <argsstring>[64]</argsstring>
        <name>multiple</name>
        <initializer>= {
    2.00000000000000, 1.58740105196820, 1.25992104989487,
    1.00000000000000, 0.79370052598410, 0.62996052494744, 0.50000000000000,
    0.39685026299205, 0.31498026247372, 0.25000000000000, 0.19842513149602,
    0.15749013123686, 0.12500000000000, 0.09921256574801, 0.07874506561843,
    0.06250000000000, 0.04960628287401, 0.03937253280921, 0.03125000000000,
    0.02480314143700, 0.01968626640461, 0.01562500000000, 0.01240157071850,
    0.00984313320230, 0.00781250000000, 0.00620078535925, 0.00492156660115,
    0.00390625000000, 0.00310039267963, 0.00246078330058, 0.00195312500000,
    0.00155019633981, 0.00123039165029, 0.00097656250000, 0.00077509816991,
    0.00061519582514, 0.00048828125000, 0.00038754908495, 0.00030759791257,
    0.00024414062500, 0.00019377454248, 0.00015379895629, 0.00012207031250,
    0.00009688727124, 0.00007689947814, 0.00006103515625, 0.00004844363562,
    0.00003844973907, 0.00003051757813, 0.00002422181781, 0.00001922486954,
    0.00001525878906, 0.00001211090890, 0.00000961243477, 0.00000762939453,
    0.00000605545445, 0.00000480621738, 0.00000381469727, 0.00000302772723,
    0.00000240310869, 0.00000190734863, 0.00000151386361, 0.00000120155435,
    1E-20
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="39" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1ac4c07f48d04f9eae2bb0c66673db018e" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int step_index[9][16]</definition>
        <argsstring>[9][16]</argsstring>
        <name>step_index</name>
        <initializer>= {
     {0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17},
     {0, 1, 2, 3, 4, 5, 6, 17, 0, 0, 0, 0, 0, 0, 0, 0},
     {0, 1, 2, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
     {0, 1, 2, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0},
    
     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
     {0, 1, 2, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0},
     {0, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="77" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1a19ccc4dd1331be0703ae3d60455bba4a" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int nbal[9]</definition>
        <argsstring>[9]</argsstring>
        <name>nbal</name>
        <initializer>= { 4, 4, 3, 2, 4, 3, 4, 3, 2 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="90" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1afb0d2575fed6a8d886dc3731974e0634" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int steps[18]</definition>
        <argsstring>[18]</argsstring>
        <name>steps</name>
        <initializer>=
    { 0, 3, 5, 7, 9, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="95" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1a24532cef89db4d28f913d38ea7a16036" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int steps2n[18]</definition>
        <argsstring>[18]</argsstring>
        <name>steps2n</name>
        <initializer>=
    { 0, 2, 4, 4, 8, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="98" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1a1adf1ef896399560ebc09d4cb98a69fb" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int bits[18]</definition>
        <argsstring>[18]</argsstring>
        <name>bits</name>
        <initializer>= { 0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="101" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1a73dd370faf11ea4d41ebe9fa3c7c9036" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int group[18]</definition>
        <argsstring>[18]</argsstring>
        <name>group</name>
        <initializer>= { 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="105" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1a746def8dd434ed51a0410af921b449b3" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int table_sblimit[5]</definition>
        <argsstring>[5]</argsstring>
        <name>table_sblimit</name>
        <initializer>= { 27, 30, 8, 12, 30 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="112" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1abefc01dd9bbcdce353464d5a964a6978" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int line[5][SBLIMIT]</definition>
        <argsstring>[5][SBLIMIT]</argsstring>
        <name>line</name>
        <initializer>= {
    
    {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, -1, -1, -1,
     -1, -1},
    {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, -1,
     -1},
    {4, 4, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1, -1},
    {4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1},
    
    {6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="118" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1ae58ce2c7abfe50be6eb141de6e6a56fc" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
        <definition>const FLOAT scalefactor[64]</definition>
        <argsstring>[64]</argsstring>
        <name>scalefactor</name>
        <initializer>= {  
    2.00000000000000, 1.58740105196820, 1.25992104989487,
    1.00000000000000, 0.79370052598410, 0.62996052494744, 0.50000000000000,
    0.39685026299205, 0.31498026247372, 0.25000000000000, 0.19842513149602,
    0.15749013123686, 0.12500000000000, 0.09921256574801, 0.07874506561843,
    0.06250000000000, 0.04960628287401, 0.03937253280921, 0.03125000000000,
    0.02480314143700, 0.01968626640461, 0.01562500000000, 0.01240157071850,
    0.00984313320230, 0.00781250000000, 0.00620078535925, 0.00492156660115,
    0.00390625000000, 0.00310039267963, 0.00246078330058, 0.00195312500000,
    0.00155019633981, 0.00123039165029, 0.00097656250000, 0.00077509816991,
    0.00061519582514, 0.00048828125000, 0.00038754908495, 0.00030759791257,
    0.00024414062500, 0.00019377454248, 0.00015379895629, 0.00012207031250,
    0.00009688727124, 0.00007689947814, 0.00006103515625, 0.00004844363562,
    0.00003844973907, 0.00003051757813, 0.00002422181781, 0.00001922486954,
    0.00001525878906, 0.00001211090890, 0.00000961243477, 0.00000762939453,
    0.00000605545445, 0.00000480621738, 0.00000381469727, 0.00000302772723,
    0.00000240310869, 0.00000190734863, 0.00000151386361, 0.00000120155435,
    1E-20
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="134" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1ae6b47e92c9b0756de9cb12f6b8823f5d" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
        <definition>const FLOAT SNR[18]</definition>
        <argsstring>[18]</argsstring>
        <name>SNR</name>
        <initializer>= {
    0.00, 7.00, 11.00, 16.00, 20.84, 25.28, 31.59, 37.75, 43.84,
    49.89, 55.93, 61.96, 67.98, 74.01, 80.03, 86.05, 92.01, 98.01
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="165" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1aacc3c6c6f2f3716b74fc1a0d404ae459" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
        <definition>const FLOAT a[18]</definition>
        <argsstring>[18]</argsstring>
        <name>a</name>
        <initializer>= {
    0,
    0.750000000, 0.625000000, 0.875000000, 0.562500000, 0.937500000,
    0.968750000, 0.984375000, 0.992187500, 0.996093750, 0.998046875,
    0.999023438, 0.999511719, 0.999755859, 0.999877930, 0.999938965,
    0.999969482, 0.999984741
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="548" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="twolame_2libtwolame_2encode_8c_1ad7b49c065dc48a6ae6270bcfdadb2c60" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
        <definition>const FLOAT b[18]</definition>
        <argsstring>[18]</argsstring>
        <name>b</name>
        <initializer>= {
    0,
    -0.250000000, -0.375000000, -0.125000000, -0.437500000, -0.062500000,
    -0.031250000, -0.015625000, -0.007812500, -0.003906250, -0.001953125,
    -0.000976563, -0.000488281, -0.000244141, -0.000122070, -0.000061035,
    -0.000030518, -0.000015259
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="556" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="556" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a85fe541463ef772fe0b1e30fc6ce0ca7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int get_js_bound</definition>
        <argsstring>(int m_ext)</argsstring>
        <name>get_js_bound</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>m_ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="172" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="172" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a806698a4987e0d9114cb04ec2d34fc37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int encode_init</definition>
        <argsstring>(twolame_options *glopts)</argsstring>
        <name>encode_init</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="184" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="184" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a9847da226c932f963b7cee29df0f22c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void scalefactor_calc</definition>
        <argsstring>(FLOAT sb_sample[][3][SCALE_BLOCK][SBLIMIT], unsigned int sf_index[][3][SBLIMIT], int nch, int sblimit)</argsstring>
        <name>scalefactor_calc</name>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>sb_sample</declname>
          <array>[][3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_index</declname>
          <array>[][3][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nch</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sblimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="277" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="277" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1acc5df7ac320b7535796ef2ff71572396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void combine_lr</definition>
        <argsstring>(FLOAT sb_sample[2][3][SCALE_BLOCK][SBLIMIT], FLOAT joint_sample[3][SCALE_BLOCK][SBLIMIT], int sblimit)</argsstring>
        <name>combine_lr</name>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>sb_sample</declname>
          <array>[2][3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>joint_sample</declname>
          <array>[3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sblimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="326" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="326" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a531ff0930c646e9d440164293dfdc415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void find_sf_max</definition>
        <argsstring>(twolame_options *glopts, unsigned int sf_index[2][3][SBLIMIT], FLOAT sf_max[2][SBLIMIT])</argsstring>
        <name>find_sf_max</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_index</declname>
          <array>[2][3][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>sf_max</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="350" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="350" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a98c576c81a74d7ec73f3b5b505cc7f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void sf_transmission_pattern</definition>
        <argsstring>(twolame_options *glopts, unsigned int sf_index[2][3][SBLIMIT], unsigned int sf_selectinfo[2][SBLIMIT])</argsstring>
        <name>sf_transmission_pattern</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_index</declname>
          <array>[2][3][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_selectinfo</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="378" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="378" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a2a016df598c6f65e39016018c5bc7a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void write_header</definition>
        <argsstring>(twolame_options *glopts, bit_stream *bs)</argsstring>
        <name>write_header</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type><ref refid="bitbuffer_8h_1a6fd1cd4b0f368eb5f7362a1c322aa3c5" kindref="member">bit_stream</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="448" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="448" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1abe4db11c513918189b0461119d1ecf0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void write_bit_alloc</definition>
        <argsstring>(twolame_options *glopts, unsigned int bit_alloc[2][SBLIMIT], bit_stream *bs)</argsstring>
        <name>write_bit_alloc</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="bitbuffer_8h_1a6fd1cd4b0f368eb5f7362a1c322aa3c5" kindref="member">bit_stream</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="475" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="475" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a113a05382be70492c82703c1014105cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void write_scalefactors</definition>
        <argsstring>(twolame_options *glopts, unsigned int bit_alloc[2][SBLIMIT], unsigned int sf_selectinfo[2][SBLIMIT], unsigned int sf_index[2][3][SBLIMIT], bit_stream *bs)</argsstring>
        <name>write_scalefactors</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_selectinfo</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_index</declname>
          <array>[2][3][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="bitbuffer_8h_1a6fd1cd4b0f368eb5f7362a1c322aa3c5" kindref="member">bit_stream</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="507" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="507" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a5b7b739e10c387ea8e7c777a29a7ad28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void subband_quantization</definition>
        <argsstring>(twolame_options *glopts, unsigned int sf_index[2][3][SBLIMIT], FLOAT sb_samples[2][3][SCALE_BLOCK][SBLIMIT], unsigned int j_scale[3][SBLIMIT], FLOAT j_samps[3][SCALE_BLOCK][SBLIMIT], unsigned int bit_alloc[2][SBLIMIT], unsigned int sbband[2][3][SCALE_BLOCK][SBLIMIT])</argsstring>
        <name>subband_quantization</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sf_index</declname>
          <array>[2][3][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>sb_samples</declname>
          <array>[2][3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>j_scale</declname>
          <array>[3][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>j_samps</declname>
          <array>[3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sbband</declname>
          <array>[2][3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="580" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="580" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a27e01b1296b8ae425b52a1c4a22f2581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void write_samples</definition>
        <argsstring>(twolame_options *glopts, unsigned int sbband[2][3][SCALE_BLOCK][SBLIMIT], unsigned int bit_alloc[2][SBLIMIT], bit_stream *bs)</argsstring>
        <name>write_samples</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sbband</declname>
          <array>[2][3][SCALE_BLOCK][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="bitbuffer_8h_1a6fd1cd4b0f368eb5f7362a1c322aa3c5" kindref="member">bit_stream</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="658" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="658" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a4cfed8d6ea3cf0c50a9b22506298354d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int bits_for_nonoise</definition>
        <argsstring>(twolame_options *glopts, FLOAT SMR[2][SBLIMIT], unsigned int scfsi[2][SBLIMIT], FLOAT min_mnr, unsigned int bit_alloc[2][SBLIMIT])</argsstring>
        <name>bits_for_nonoise</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>SMR</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>scfsi</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>min_mnr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="727" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="727" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a8312466819ccf33a3daa7221a3600d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int init_bit_allocation</definition>
        <argsstring>(twolame_options *glopts)</argsstring>
        <name>init_bit_allocation</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="801" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="801" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1aa6f6a0b5c40635d5c4a2340dd5afd4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void main_bit_allocation</definition>
        <argsstring>(twolame_options *glopts, FLOAT SMR[2][SBLIMIT], unsigned int scfsi[2][SBLIMIT], unsigned int bit_alloc[2][SBLIMIT], int *adb)</argsstring>
        <name>main_bit_allocation</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>SMR</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>scfsi</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>adb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="890" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="890" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a5509d3208626d8c4cdab5c355bc0a1cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void vbr_maxmnr</definition>
        <argsstring>(FLOAT mnr[2][SBLIMIT], char used[2][SBLIMIT], int sblimit, int nch, int *min_sb, int *min_ch, FLOAT vbrlevel)</argsstring>
        <name>vbr_maxmnr</name>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>mnr</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>char</type>
          <declname>used</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sblimit</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nch</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>min_sb</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>min_ch</declname>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>vbrlevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="983" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="983" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a3f9faed846fb1d81840ec5f3fb096a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int vbr_bit_allocation</definition>
        <argsstring>(twolame_options *glopts, FLOAT SMR[2][SBLIMIT], unsigned int scfsi[2][SBLIMIT], unsigned int bit_alloc[2][SBLIMIT], int *adb)</argsstring>
        <name>vbr_bit_allocation</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>SMR</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>scfsi</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>adb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="1033" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="1033" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1ab53c6592261e1d8caeb211a87bca43c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void maxmnr</definition>
        <argsstring>(FLOAT mnr[2][SBLIMIT], char used[2][SBLIMIT], int sblimit, int nch, int *min_sb, int *min_ch)</argsstring>
        <name>maxmnr</name>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>mnr</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>char</type>
          <declname>used</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>sblimit</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>nch</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>min_sb</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>min_ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="1138" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="1138" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="twolame_2libtwolame_2encode_8c_1a380e2f51c965b9495a876426fb34c4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int a_bit_allocation</definition>
        <argsstring>(twolame_options *glopts, FLOAT SMR[2][SBLIMIT], unsigned int scfsi[2][SBLIMIT], unsigned int bit_alloc[2][SBLIMIT], int *adb)</argsstring>
        <name>a_bit_allocation</name>
        <param>
          <type><ref refid="twolame_8h_1a429c5c35b47d5d7cc34a07e48a82866d" kindref="member">twolame_options</ref> *</type>
          <declname>glopts</declname>
        </param>
        <param>
          <type><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref></type>
          <declname>SMR</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>scfsi</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>bit_alloc</declname>
          <array>[2][SBLIMIT]</array>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>adb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" line="1185" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c" bodystart="1185" bodyend="1297"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>TwoLAME:<sp/>an<sp/>optimized<sp/>MPEG<sp/>Audio<sp/>Layer<sp/>Two<sp/>encoder</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2001-2004<sp/>Michael<sp/>Cheng</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004-2006<sp/>The<sp/>TwoLAME<sp/>Project</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/>$Id$</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="twolame_8h" kindref="compound">twolame.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="twolame_2libtwolame_2common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bitbuffer_8h" kindref="compound">bitbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="availbits_8h" kindref="compound">availbits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="twolame_2libtwolame_2encode_8h" kindref="compound">encode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bitbuffer__inline_8h" kindref="compound">bitbuffer_inline.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>multiple[64]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>2.00000000000000,<sp/>1.58740105196820,<sp/>1.25992104989487,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>1.00000000000000,<sp/>0.79370052598410,<sp/>0.62996052494744,<sp/>0.50000000000000,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>0.39685026299205,<sp/>0.31498026247372,<sp/>0.25000000000000,<sp/>0.19842513149602,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>0.15749013123686,<sp/>0.12500000000000,<sp/>0.09921256574801,<sp/>0.07874506561843,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>0.06250000000000,<sp/>0.04960628287401,<sp/>0.03937253280921,<sp/>0.03125000000000,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>0.02480314143700,<sp/>0.01968626640461,<sp/>0.01562500000000,<sp/>0.01240157071850,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00984313320230,<sp/>0.00781250000000,<sp/>0.00620078535925,<sp/>0.00492156660115,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00390625000000,<sp/>0.00310039267963,<sp/>0.00246078330058,<sp/>0.00195312500000,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00155019633981,<sp/>0.00123039165029,<sp/>0.00097656250000,<sp/>0.00077509816991,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00061519582514,<sp/>0.00048828125000,<sp/>0.00038754908495,<sp/>0.00030759791257,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00024414062500,<sp/>0.00019377454248,<sp/>0.00015379895629,<sp/>0.00012207031250,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00009688727124,<sp/>0.00007689947814,<sp/>0.00006103515625,<sp/>0.00004844363562,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00003844973907,<sp/>0.00003051757813,<sp/>0.00002422181781,<sp/>0.00001922486954,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00001525878906,<sp/>0.00001211090890,<sp/>0.00000961243477,<sp/>0.00000762939453,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00000605545445,<sp/>0.00000480621738,<sp/>0.00000381469727,<sp/>0.00000302772723,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00000240310869,<sp/>0.00000190734863,<sp/>0.00000151386361,<sp/>0.00000120155435,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>1<ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref>-20</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MFC<sp/>May03<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>Gosh.<sp/>I<sp/>should<sp/>really<sp/>document<sp/>this<sp/>mess.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>This<sp/>is<sp/>a<sp/>compact<sp/>data<sp/>format<sp/>for<sp/>all<sp/>the<sp/>info<sp/>that<sp/>is<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>bit<sp/>allocation<sp/>tables<sp/>in<sp/>the<sp/>mpeg<sp/>standards.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>All<sp/>the<sp/>allocation<sp/>tables<sp/>are<sp/>here.<sp/>There<sp/>is<sp/>just<sp/>multiple</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>redirections<sp/>to<sp/>find<sp/>the<sp/>number<sp/>that<sp/>you<sp/>want.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>I<sp/>might<sp/>have<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>index<sp/>tables<sp/>to<sp/>make<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>more<sp/>readable.</highlight></codeline>
<codeline lineno="69"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="twolame_2libtwolame_2encode_8c_1ab382fe1b76822ae8543b342fce3df974" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMTABLES<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>really<sp/>only<sp/>9<sp/>distinct<sp/>lines<sp/>in<sp/>the<sp/>allocation<sp/>tables<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>each<sp/>member<sp/>of<sp/>this<sp/>table<sp/>is<sp/>an<sp/>index<sp/>into<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step_index[linenumber][index]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_index[9][16]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>3,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/>17},</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>17},</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>17,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>17,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16},</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>5<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>From<sp/>ISO13818<sp/>Table<sp/>B.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>6<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15},</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>7<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>8<sp/>*/</highlight><highlight class="normal"><sp/>{0,<sp/>1,<sp/>2,<sp/>4,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[9]<sp/>=<sp/>{<sp/>4,<sp/>4,<sp/>3,<sp/>2,<sp/>4,<sp/>3,<sp/>4,<sp/>3,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/><sp/>5,<sp/><sp/>6,<sp/><sp/>7,<sp/><sp/>8,<sp/><sp/><sp/>9,<sp/><sp/><sp/>10,<sp/><sp/><sp/>11,<sp/><sp/><sp/>12,<sp/><sp/><sp/>13,<sp/><sp/><sp/>14,<sp/><sp/><sp/>15,<sp/><sp/><sp/><sp/>16,<sp/><sp/><sp/><sp/>17<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>number<sp/>of<sp/>steps<sp/>allowed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>steps[18]<sp/>=</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>3,<sp/>5,<sp/>7,<sp/>9,<sp/>15,<sp/>31,<sp/>63,<sp/>127,<sp/>255,<sp/>511,<sp/>1023,<sp/>2047,<sp/>4095,<sp/>8191,<sp/>16383,<sp/>32767,<sp/>65535<sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>power<sp/>of<sp/>2<sp/>just<sp/>under<sp/>the<sp/>steps<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>steps2n[18]<sp/>=</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>2,<sp/>4,<sp/>4,<sp/>8,<sp/>8,<sp/>16,<sp/>32,<sp/>64,<sp/>128,<sp/>256,<sp/>512,<sp/>1024,<sp/>2048,<sp/>4096,<sp/>8192,<sp/>16384,<sp/>32768<sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>bits<sp/>per<sp/>codeword<sp/>from<sp/>TableB.4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[18]<sp/>=<sp/>{<sp/>0,<sp/>5,<sp/>7,<sp/>3,<sp/>10,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16<sp/>};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Samples<sp/>per<sp/>codeword<sp/>Table<sp/>B.4<sp/>Page<sp/>53<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>int<sp/>group[18]<sp/>=<sp/>{0,<sp/>3,<sp/>3,<sp/>1,<sp/>3,<sp/><sp/>1,<sp/><sp/>1,<sp/><sp/>1,<sp/><sp/>1,<sp/><sp/><sp/>1,<sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/>1};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group[18]<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>1,<sp/>3,<sp/>1,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>nbal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>sblimits<sp/>of<sp/>the<sp/>5<sp/>allocation<sp/>tables</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>4<sp/>tables<sp/>for<sp/>MPEG-1</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>1<sp/>table<sp/>for<sp/>MPEG-2<sp/>LSF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>table_sblimit[5]<sp/>=<sp/>{<sp/>27,<sp/>30,<sp/>8,<sp/>12,<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Each<sp/>table<sp/>contains<sp/>a<sp/>list<sp/>of<sp/>allowable<sp/>quantization<sp/>steps.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>There<sp/>are<sp/>only<sp/>9<sp/>distinct<sp/>lists<sp/>of<sp/>steps.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>This<sp/>table<sp/>gives<sp/>the<sp/>index<sp/>of<sp/>which<sp/>of<sp/>the<sp/>9<sp/>lists<sp/>is<sp/>being<sp/>used<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>A<sp/>&quot;-1&quot;<sp/>entry<sp/>means<sp/>that<sp/>it<sp/>is<sp/>above<sp/>the<sp/>sblimit<sp/>for<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[5][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>00<sp/>01<sp/>02<sp/>03<sp/>04<sp/>05<sp/>06<sp/>07<sp/>08<sp/>09<sp/>10<sp/>11<sp/>12<sp/>13<sp/>14<sp/>15<sp/>16<sp/>17<sp/>18<sp/>19<sp/>20<sp/>21<sp/>22<sp/>23<sp/>24<sp/>25<sp/>26<sp/>27<sp/>28<sp/>29<sp/>30<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>-1,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-1},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{4,<sp/>4,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{4,<sp/>4,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1},</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LSF<sp/>Table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{6,<sp/>6,<sp/>6,<sp/>6,<sp/>7,<sp/>7,<sp/>7,<sp/>7,<sp/>7,<sp/>7,<sp/>7,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8,<sp/>8}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>ISO11172<sp/>Table<sp/>B.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>scalefactor[64]<sp/>=<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>Equation<sp/>for<sp/>nth<sp/>element<sp/>=<sp/>2<sp/>/<sp/>(cuberoot(2)<sp/>^<sp/>n)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>2.00000000000000,<sp/>1.58740105196820,<sp/>1.25992104989487,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>1.00000000000000,<sp/>0.79370052598410,<sp/>0.62996052494744,<sp/>0.50000000000000,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>0.39685026299205,<sp/>0.31498026247372,<sp/>0.25000000000000,<sp/>0.19842513149602,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>0.15749013123686,<sp/>0.12500000000000,<sp/>0.09921256574801,<sp/>0.07874506561843,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>0.06250000000000,<sp/>0.04960628287401,<sp/>0.03937253280921,<sp/>0.03125000000000,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>0.02480314143700,<sp/>0.01968626640461,<sp/>0.01562500000000,<sp/>0.01240157071850,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00984313320230,<sp/>0.00781250000000,<sp/>0.00620078535925,<sp/>0.00492156660115,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00390625000000,<sp/>0.00310039267963,<sp/>0.00246078330058,<sp/>0.00195312500000,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00155019633981,<sp/>0.00123039165029,<sp/>0.00097656250000,<sp/>0.00077509816991,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00061519582514,<sp/>0.00048828125000,<sp/>0.00038754908495,<sp/>0.00030759791257,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00024414062500,<sp/>0.00019377454248,<sp/>0.00015379895629,<sp/>0.00012207031250,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00009688727124,<sp/>0.00007689947814,<sp/>0.00006103515625,<sp/>0.00004844363562,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00003844973907,<sp/>0.00003051757813,<sp/>0.00002422181781,<sp/>0.00001922486954,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00001525878906,<sp/>0.00001211090890,<sp/>0.00000961243477,<sp/>0.00000762939453,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00000605545445,<sp/>0.00000480621738,<sp/>0.00000381469727,<sp/>0.00000302772723,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00000240310869,<sp/>0.00000190734863,<sp/>0.00000151386361,<sp/>0.00000120155435,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>1<ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref>-20</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ISO11172<sp/>Table<sp/>C.5<sp/>Layer<sp/>II<sp/>Signal<sp/>to<sp/>Noise<sp/>Raios<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>MFC<sp/>FIX<sp/>find<sp/>a<sp/>reference<sp/>for<sp/>these<sp/>in<sp/>terms<sp/>of<sp/>bits-&gt;SNR<sp/>value</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>Index<sp/>into<sp/>table<sp/>is<sp/>the<sp/>steps<sp/>index<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>index<sp/><sp/><sp/>steps<sp/><sp/><sp/><sp/>SNR</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/>0.00</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/>7.00</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/><sp/><sp/>11.00</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/>7<sp/><sp/><sp/>16.00</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/>9<sp/><sp/><sp/>20.84</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>etc</highlight></codeline>
<codeline lineno="164"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>SNR[18]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>0.00,<sp/>7.00,<sp/>11.00,<sp/>16.00,<sp/>20.84,<sp/>25.28,<sp/>31.59,<sp/>37.75,<sp/>43.84,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>49.89,<sp/>55.93,<sp/>61.96,<sp/>67.98,<sp/>74.01,<sp/>80.03,<sp/>86.05,<sp/>92.01,<sp/>98.01</highlight></codeline>
<codeline lineno="168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_js_bound(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_ext)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsb_table[4]<sp/>=<sp/>{<sp/>4,<sp/>8,<sp/>12,<sp/>16<sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ext<sp/>&lt;<sp/>0<sp/>||<sp/>m_ext<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;get_js_bound()<sp/>bad<sp/>modext<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>m_ext);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(jsb_table[m_ext]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="twolame_2libtwolame_2encode_8h_1a806698a4987e0d9114cb04ec2d34fc37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a806698a4987e0d9114cb04ec2d34fc37" kindref="member">encode_init</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bsp,<sp/>br_per_ch,<sp/>sfrq;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>bsp<sp/>=<sp/>header-&gt;<ref refid="structframe__header_1ad219005f5e70c73d083bfcc7f88dadaa" kindref="member">bitrate_index</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>br_per_ch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ac471f69e776fa200a2032a88dfdee3b0" kindref="member">bitrate</ref><sp/>/<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>sfrq<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1a6c0025d3edc48ae42a8f72fab21ce1a6" kindref="member">samplerate_out</ref><sp/>/<sp/>1000.0);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decision<sp/>rules<sp/>refer<sp/>to<sp/>per-channel<sp/>bitrates<sp/>(kbits/sec/chan)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structframe__header_1a7c92a7131bf19d4340ffeecc3f893d09" kindref="member">version</ref><sp/>==<sp/><ref refid="twolame_8h_1a0f4e287fec57b8ba38e28395996eb6e3ae8dc89cc37c6203400e64768eb6b59d5" kindref="member">TWOLAME_MPEG1</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>MPEG-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sfrq<sp/>==<sp/>48<sp/>&amp;&amp;<sp/>br_per_ch<sp/>&gt;=<sp/>56)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(br_per_ch<sp/>&gt;=<sp/>56<sp/>&amp;&amp;<sp/>br_per_ch<sp/>&lt;=<sp/>80))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sfrq<sp/>!=<sp/>48<sp/>&amp;&amp;<sp/>br_per_ch<sp/>&gt;=<sp/>96)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sfrq<sp/>!=<sp/>32<sp/>&amp;&amp;<sp/>br_per_ch<sp/>&lt;=<sp/>48)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MPEG-2<sp/>LSF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glopts-&gt;sblimit<sp/>=<sp/>pick_table<sp/>(<sp/>glopts<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MFC<sp/>FIX<sp/>this<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref><sp/>=<sp/>table_sblimit[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fprintf(stderr,&quot;encode_init:<sp/>using<sp/>tablenum<sp/>%i<sp/>with<sp/>sblimit<sp/>%i\n&quot;,glopts-&gt;tablenum,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glopts-&gt;sblimit);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1a9a485b580a62dd91ca9d2b6c51cbddb5" kindref="member">mode</ref><sp/>==<sp/><ref refid="twolame_8h_1a91879045676d9146c9bfcb8b0a30b57fa944018843ef67ac47d3e680c749b2967" kindref="member">TWOLAME_JOINT_STEREO</ref>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref><sp/>=<sp/>get_js_bound(header-&gt;<ref refid="structframe__header_1a776cfc6aeca369b948f54fa9e3d99b59" kindref="member">mode_ext</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>alloc,<sp/>tab_num<sp/>set<sp/>in<sp/>pick_table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUMPTABLESx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DUMPTABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tablenumber,<sp/>j,<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>,<sp/>sb;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Tables<sp/>B.21,b,c,d<sp/>from<sp/>ISO11172<sp/>and<sp/>the<sp/>LSF<sp/>table<sp/>from<sp/>ISO13818\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(tablenumber<sp/>=<sp/>0;<sp/>tablenumber<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2encode_8c_1ab382fe1b76822ae8543b342fce3df974" kindref="member">NUMTABLES</ref>;<sp/>tablenumber++)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Print<sp/>Table<sp/>Header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Tablenum<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>tablenumber);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;sb<sp/>nbal<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>16;<sp/>j++)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%6i<sp/>&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-----------------------------------------------------------------------------------------------------------------------\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sblimit<sp/>=<sp/>table_sblimit[tablenumber];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>;<sp/>sb++)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisline<sp/>=<sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[tablenumber][sb];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%2i<sp/>%4i<sp/>&quot;</highlight><highlight class="normal">,<sp/>sb,<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[thisline]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[thisline]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[thisline]);<sp/>j++)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%6i<sp/>&quot;</highlight><highlight class="normal">,<sp/>steps[step_index[thisline][j]]);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>scale_factor_calc</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/>pick_scale</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/>if<sp/>JOINTSTEREO<sp/></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine_LR</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_factor_calc</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/>use<sp/>psy<sp/>model<sp/>to<sp/>determine<sp/>SMR</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/>transmission<sp/>pattern</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/>main_bit_allocation</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(error<sp/>protection)</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc<sp/>CRC</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/>encode_info</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(error_protection)</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encode_CRC</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/>encode_bit_alloc</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/>encode_scale</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/>subband_quantization</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/>sample_encoding</highlight></codeline>
<codeline lineno="275"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="twolame_2libtwolame_2encode_8h_1aa59eba5ddc3c6526d17bb4eb3a0a1b62" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a9847da226c932f963b7cee29df0f22c5" kindref="member">scalefactor_calc</ref>(<ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>sb_sample[][3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_index[][3][SBLIMIT],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optimized<sp/>to<sp/>use<sp/>binary<sp/>search<sp/>instead<sp/>of<sp/>linear<sp/>scan<sp/>through<sp/>the<sp/>scalefactor<sp/>table;</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guarantees<sp/>to<sp/>find<sp/>scalefactor<sp/>in<sp/>only<sp/>5<sp/>jumps/comparisons<sp/>and<sp/>not<sp/>in<sp/>{0<sp/>(lin.<sp/>best)<sp/>to<sp/>63</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lin.<sp/>worst)}.<sp/>Scalefactors<sp/>for<sp/>subbands<sp/>&gt;<sp/>sblimit<sp/>are<sp/>no<sp/>longer<sp/>computed.<sp/>Uses<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sblimit-loop.<sp/>Patrick<sp/>De<sp/>Smet<sp/>Oct<sp/>1999.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch,<sp/>gr;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Using<sp/>&apos;--&apos;<sp/>loops<sp/>to<sp/>avoid<sp/>possible<sp/>&quot;cmp<sp/>value<sp/>+<sp/>bne/beq&quot;<sp/>compiler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>inefficiencies.<sp/>Below<sp/>loops<sp/>should<sp/>compile<sp/>to<sp/>&quot;bne/beq&quot;<sp/>only<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>nch;<sp/>ch--;)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>3;<sp/>gr--;)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>sblimit;<sp/>sb--;)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>temp;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale_fac;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determination<sp/>of<sp/>max.<sp/>over<sp/>each<sp/>set<sp/>of<sp/>12<sp/>subband<sp/>samples:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PDS<sp/>TODO:<sp/>maybe<sp/>this<sp/>could/should<sp/>??!!<sp/>be<sp/>integrated<sp/>into<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>subband<sp/>filtering<sp/>routines?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>cur_max<sp/>=<sp/>fabs(sb_sample[ch][gr][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>-<sp/>1][sb]);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>-<sp/>1;<sp/>j--;)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((temp<sp/>=<sp/>fabs(sb_sample[ch][gr][j][sb]))<sp/>&gt;<sp/>cur_max)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_max<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PDS:<sp/>binary<sp/>search<sp/>in<sp/>the<sp/>scalefactor<sp/>table:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>real<sp/>speed<sp/>up:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>16,<sp/>scale_fac<sp/>=<sp/>32;<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>;<sp/>l<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_max<sp/>&lt;=<sp/>scalefactor[scale_fac])</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_fac<sp/>+=<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_fac<sp/>-=<sp/><ref refid="layer3_8c_1a741dbb4d8e78c3cb69915db7282fcec0" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_max<sp/>&gt;<sp/>scalefactor[scale_fac])</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_fac--;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[ch][gr][sb]<sp/>=<sp/>scale_fac;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>a<sp/>direct<sp/>way<sp/>of<sp/>working<sp/>out<sp/>the<sp/>index,<sp/>if<sp/>the<sp/>maximum<sp/>value<sp/>is<sp/>known</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>since<sp/>it<sp/>involves<sp/>a<sp/>log<sp/>it<sp/>isn&apos;t<sp/>really<sp/>speedy.<sp/>Items<sp/>in<sp/>the<sp/>scalefactor[]</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table<sp/>are<sp/>calculated<sp/>by:<sp/>the<sp/>n&apos;th<sp/>entry<sp/>=<sp/>2<sp/>/<sp/>(cuberoot(2)<sp/>^<sp/>n)<sp/>And<sp/>so<sp/>using<sp/>a</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>of<sp/>maths<sp/>you<sp/>get:<sp/>index<sp/>=<sp/>(int)(log(2.0/cur_max)<sp/>/<sp/>LNCUBEROOTTWO);</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;cur_max<sp/>%.14lf<sp/>scalefactorindex<sp/>%i<sp/>multiple<sp/>%.14lf\n&quot;,cur_max,</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_fac,<sp/>scalefactor[scale_fac]);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Combine<sp/>L&amp;R<sp/>channels<sp/>into<sp/>a<sp/>mono<sp/>joint<sp/>stereo<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="twolame_2libtwolame_2encode_8h_1acc5df7ac320b7535796ef2ff71572396" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1acc5df7ac320b7535796ef2ff71572396" kindref="member">combine_lr</ref>(<ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>sb_sample[2][3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>joint_sample[3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][SBLIMIT],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>sample,<sp/>gr;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sample<sp/>=<sp/>0;<sp/>sample<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>;<sp/>++sample)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>0;<sp/>gr<sp/>&lt;<sp/>3;<sp/>++gr)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint_sample[gr][sample][sb]<sp/>=</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.5<sp/>*<sp/>(sb_sample[0][gr][sample][sb]<sp/>+<sp/>sb_sample[1][gr][sample][sb]);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PURPOSE:For<sp/>each<sp/>subband,<sp/>puts<sp/>the<sp/>smallest<sp/>scalefactor<sp/>of<sp/>the<sp/>3</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>associated<sp/>with<sp/>a<sp/>frame<sp/>into<sp/>#max_sc#.<sp/><sp/>This<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>used<sp/>by<sp/>Psychoacoustic<sp/>Model<sp/>I.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/>Someone<sp/>in<sp/>dist10<sp/>source<sp/>code&apos;s<sp/>history,<sp/>somebody<sp/>wrote<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>&quot;(I<sp/>would<sp/>recommend<sp/>changin<sp/>max_sc<sp/>to<sp/>min_sc)&quot;</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/>In<sp/>psy<sp/>model<sp/>1,<sp/>the<sp/>*maximum*<sp/>out<sp/>of<sp/>the<sp/>scale<sp/>picked<sp/>here<sp/>and</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/>the<sp/>maximum<sp/>SPL<sp/>within<sp/>each<sp/>subband<sp/>is<sp/>selected.<sp/>So<sp/>I&apos;d<sp/>think<sp/>that<sp/></highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/>a<sp/>maximum<sp/>here<sp/>makes<sp/>heaps<sp/>of<sp/>sense.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/>MFC<sp/>FIX:<sp/>Feb<sp/>2003<sp/>-<sp/>is<sp/>this<sp/>only<sp/>needed<sp/>for<sp/>psy<sp/>model<sp/>1?</highlight></codeline>
<codeline lineno="349"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="twolame_2libtwolame_2encode_8h_1a531ff0930c646e9d440164293dfdc415" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a531ff0930c646e9d440164293dfdc415" kindref="member">find_sf_max</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_index[2][3][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>sf_max[2][SBLIMIT])</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>gr,<sp/>ch;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowest_sf_index;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>1,<sp/>lowest_sf_index<sp/>=<sp/>sf_index[ch][0][sb];<sp/>gr<sp/>&lt;<sp/>3;<sp/>gr++)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lowest_sf_index<sp/>&gt;<sp/>sf_index[ch][gr][sb])</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest_sf_index<sp/>=<sp/>sf_index[ch][gr][sb];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_max[ch][sb]<sp/>=<sp/>multiple[lowest_sf_index];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>sblimit;<sp/>sb<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_max[0][sb]<sp/>=<sp/>sf_max[1][sb]<sp/>=<sp/>1<ref refid="twolame_2libtwolame_2common_8h_1a07484107e6d9fdf38b53edf631d6511d" kindref="member">E</ref>-20;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>sf_transmission_pattern<sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/>PURPOSE:For<sp/>a<sp/>given<sp/>subband,<sp/>determines<sp/>whether<sp/>to<sp/>send<sp/>1,<sp/>2,<sp/>or</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/>all<sp/>3<sp/>of<sp/>the<sp/>scalefactors,<sp/>and<sp/>fills<sp/>in<sp/>the<sp/>scalefactor</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/>select<sp/>information<sp/>accordingly</highlight></codeline>
<codeline lineno="373"><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>From<sp/>ISO11172<sp/>Sect<sp/>C.1.5.2.5<sp/>&quot;coding<sp/>of<sp/>scalefactors&quot;</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/>and</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/>Table<sp/>C.4<sp/>&quot;LayerII<sp/>Scalefactors<sp/>Transmission<sp/>Pattern&quot;</highlight></codeline>
<codeline lineno="377"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="twolame_2libtwolame_2encode_8h_1a98c576c81a74d7ec73f3b5b505cc7f11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a98c576c81a74d7ec73f3b5b505cc7f11" kindref="member">sf_transmission_pattern</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_index[2][3][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_selectinfo[2][SBLIMIT])</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dscf[2];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">[2],<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j,<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern[5][5]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x123,<sp/>0x122,<sp/>0x122,<sp/>0x133,<sp/>0x123},</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x113,<sp/>0x111,<sp/>0x111,<sp/>0x444,<sp/>0x113},</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x111,<sp/>0x111,<sp/>0x111,<sp/>0x333,<sp/>0x113},</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x222,<sp/>0x222,<sp/>0x222,<sp/>0x333,<sp/>0x123},</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x123,<sp/>0x122,<sp/>0x122,<sp/>0x133,<sp/>0x123}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nch;<sp/>k++)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dscf[0]<sp/>=<sp/>(sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dscf[1]<sp/>=<sp/>(sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dscf[j]<sp/>&lt;=<sp/>-3)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dscf[j]<sp/>&gt;<sp/>-3<sp/>&amp;&amp;<sp/>dscf[j]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">[j]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dscf[j]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">[j]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dscf[j]<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>dscf[j]<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">[j]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">[j]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pattern[</highlight><highlight class="keyword">class</highlight><highlight class="normal">[0]][</highlight><highlight class="keyword">class</highlight><highlight class="normal">[1]])<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x123:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x122:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x133:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x113:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x111:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x222:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x333:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x444:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_selectinfo[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf_index[k][0][i]<sp/>&gt;<sp/>sf_index[k][2][i])</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][1][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][2][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sf_index[<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>][0][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="twolame_2libtwolame_2encode_8h_1a2a016df598c6f65e39016018c5bc7a4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a2a016df598c6f65e39016018c5bc7a4f" kindref="member">write_header</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,<sp/><ref refid="structbit__stream__struc" kindref="compound">bit_stream</ref><sp/>*<sp/>bs)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>0xfff,<sp/>12);<sp/><sp/></highlight><highlight class="comment">/*<sp/>syncword<sp/>12<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_put1bit(bs,<sp/>header-&gt;<ref refid="structframe__header_1a7c92a7131bf19d4340ffeecc3f893d09" kindref="member">version</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ID<sp/>1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>4<sp/>-<sp/>header-&gt;<ref refid="structframe__header_1a719d105e9a5983f057946a8dc351f90b" kindref="member">lay</ref>,<sp/>2);<sp/></highlight><highlight class="comment">/*<sp/>layer<sp/>2<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_put1bit(bs,<sp/>!header-&gt;<ref refid="structframe__header_1ac8672e3ecb3c44f8763931e225652d0b" kindref="member">error_protection</ref>);<sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>set<sp/>=&gt;<sp/>no<sp/>err<sp/>prot<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>header-&gt;<ref refid="structframe__header_1ad219005f5e70c73d083bfcc7f88dadaa" kindref="member">bitrate_index</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>header-&gt;<ref refid="structframe__header_1aeaaf556b174d5d6c8d719f34d4f9154e" kindref="member">samplerate_idx</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_put1bit(bs,<sp/>header-&gt;<ref refid="structframe__header_1a7619c413891eee701508eade187f659d" kindref="member">padding</ref>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_put1bit(bs,<sp/>header-&gt;<ref refid="structframe__header_1a1f602c0aa4f7a28ba1bc48e321037baa" kindref="member">private_bit</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>private_bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>header-&gt;<ref refid="structframe__header_1a8317914fab0cb6b5357731baf40f38d9" kindref="member">mode</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>header-&gt;<ref refid="structframe__header_1a776cfc6aeca369b948f54fa9e3d99b59" kindref="member">mode_ext</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_put1bit(bs,<sp/>header-&gt;<ref refid="structframe__header_1a096ededb94b3b7984c75b15c8f9cfe9f" kindref="member">copyright</ref>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_put1bit(bs,<sp/>header-&gt;<ref refid="structframe__header_1abfbb3dfe82609ea7ac3231a6f8ae7ea6" kindref="member">original</ref>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>header-&gt;<ref refid="structframe__header_1ab703f3bb552285c732464b3c0d7a1c52" kindref="member">emphasis</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>encode_bit_alloc<sp/>(Layer<sp/>II)</highlight></codeline>
<codeline lineno="469"><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>PURPOSE:<sp/>Writes<sp/>bit<sp/>allocation<sp/>information<sp/>onto<sp/>bitstream</highlight></codeline>
<codeline lineno="471"><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>4,3,2,<sp/>or<sp/>0<sp/>bits<sp/>depending<sp/>on<sp/>the<sp/>quantization<sp/>table<sp/>used.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="twolame_2libtwolame_2encode_8h_1abe4db11c513918189b0461119d1ecf0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1abe4db11c513918189b0461119d1ecf0e" kindref="member">write_bit_alloc</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],<sp/><ref refid="structbit__stream__struc" kindref="compound">bit_stream</ref><sp/>*<sp/>bs)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsbound<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>ch;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb<sp/>&lt;<sp/>jsbound)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>((sb<sp/>&lt;<sp/>jsbound)<sp/>?<sp/>nch<sp/>:<sp/>1);<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>bit_alloc[ch][sb],<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]]);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a6efe63477b890f1ab423e82cd6c65bf0" kindref="member">num_crc_bits</ref><sp/>+=<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>bit_alloc[0][sb],<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]]);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a6efe63477b890f1ab423e82cd6c65bf0" kindref="member">num_crc_bits</ref><sp/>+=<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>write_scalefactors</highlight></codeline>
<codeline lineno="497"><highlight class="comment"></highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>PURPOSE:The<sp/>encoded<sp/>scalar<sp/>factor<sp/>information<sp/>is<sp/>arranged<sp/>and</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>queued<sp/>into<sp/>the<sp/>output<sp/>fifo<sp/>to<sp/>be<sp/>transmitted.</highlight></codeline>
<codeline lineno="500"><highlight class="comment"></highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>The<sp/>three<sp/>scale<sp/>factors<sp/>associated<sp/>with</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>a<sp/>given<sp/>subband<sp/>and<sp/>channel<sp/>are<sp/>transmitted<sp/>in<sp/>accordance</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>with<sp/>the<sp/>scfsi,<sp/>which<sp/>is<sp/>transmitted<sp/>first.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="twolame_2libtwolame_2encode_8h_1a8fab993360b663648517e6c53dfbefd2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a113a05382be70492c82703c1014105cc" kindref="member">write_scalefactors</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_selectinfo[2][SBLIMIT],</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_index[2][3][SBLIMIT],<sp/><ref refid="structbit__stream__struc" kindref="compound">bit_stream</ref><sp/>*<sp/>bs)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>gr,<sp/>ch;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>out<sp/>the<sp/>scalefactor<sp/>selection<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_alloc[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>sf_selectinfo[ch][sb],<sp/>2);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a6efe63477b890f1ab423e82cd6c65bf0" kindref="member">num_crc_bits</ref><sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>out<sp/>the<sp/>scalefactors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_alloc[ch][sb])<sp/><sp/></highlight><highlight class="comment">//<sp/>above<sp/>jsbound,<sp/>bit_alloc[0][i]<sp/>==<sp/>ba[1][i]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sf_selectinfo[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>0;<sp/>gr<sp/>&lt;<sp/>3;<sp/>gr++)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>sf_index[ch][gr][sb],<sp/>6);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>sf_index[ch][0][sb],<sp/>6);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>sf_index[ch][2][sb],<sp/>6);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>sf_index[ch][0][sb],<sp/>6);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ISO11172<sp/>Table<sp/>C.6<sp/>Layer<sp/>II<sp/>quantization<sp/>co-efficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>[18]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>0.750000000,<sp/>0.625000000,<sp/>0.875000000,<sp/>0.562500000,<sp/>0.937500000,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>0.968750000,<sp/>0.984375000,<sp/>0.992187500,<sp/>0.996093750,<sp/>0.998046875,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>0.999023438,<sp/>0.999511719,<sp/>0.999755859,<sp/>0.999877930,<sp/>0.999938965,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>0.999969482,<sp/>0.999984741</highlight></codeline>
<codeline lineno="554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>[18]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>-0.250000000,<sp/>-0.375000000,<sp/>-0.125000000,<sp/>-0.437500000,<sp/>-0.062500000,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>-0.031250000,<sp/>-0.015625000,<sp/>-0.007812500,<sp/>-0.003906250,<sp/>-0.001953125,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>-0.000976563,<sp/>-0.000488281,<sp/>-0.000244141,<sp/>-0.000122070,<sp/>-0.000061035,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>-0.000030518,<sp/>-0.000015259</highlight></codeline>
<codeline lineno="562"><highlight class="normal">};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/>subband_quantization<sp/>(Layer<sp/>II)</highlight></codeline>
<codeline lineno="566"><highlight class="comment"></highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>PURPOSE:Quantizes<sp/>subband<sp/>samples<sp/>to<sp/>appropriate<sp/>number<sp/>of<sp/>bits</highlight></codeline>
<codeline lineno="568"><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>SEMANTICS:<sp/><sp/>Subband<sp/>samples<sp/>are<sp/>divided<sp/>by<sp/>their<sp/>scalefactors,<sp/>which</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>makes<sp/>the<sp/>quantization<sp/>more<sp/>efficient.<sp/>The<sp/>scaled<sp/>samples<sp/>are</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>quantized<sp/>by<sp/>the<sp/>function<sp/>a*x+b,<sp/>where<sp/>a<sp/>and<sp/>b<sp/>are<sp/>functions<sp/>of</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>the<sp/>number<sp/>of<sp/>quantization<sp/>levels.<sp/>The<sp/>result<sp/>is<sp/>then<sp/>truncated</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>to<sp/>the<sp/>appropriate<sp/>number<sp/>of<sp/>bits<sp/>and<sp/>the<sp/>MSB<sp/>is<sp/>inverted.</highlight></codeline>
<codeline lineno="574"><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>Note<sp/>that<sp/>for<sp/>fractional<sp/>2&apos;s<sp/>complement,<sp/>inverting<sp/>the<sp/>MSB<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>negative<sp/>number<sp/>x<sp/>is<sp/>equivalent<sp/>to<sp/>adding<sp/>1<sp/>to<sp/>it.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"></highlight></codeline>
<codeline lineno="578"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="twolame_2libtwolame_2encode_8h_1a5b7b739e10c387ea8e7c777a29a7ad28" refkind="member"><highlight class="normal"><ref refid="twolame_2libtwolame_2encode_8c_1a5b7b739e10c387ea8e7c777a29a7ad28" kindref="member">subband_quantization</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sf_index[2][3][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>sb_samples[2][3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][SBLIMIT],</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_scale[3][SBLIMIT],</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>j_samps[3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][SBLIMIT],</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][SBLIMIT],</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sbband[2][3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][SBLIMIT])</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>j,<sp/>ch,<sp/>gr,<sp/>qnt_coeff_index,<sp/>sig;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsbound<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>0;<sp/>gr<sp/>&lt;<sp/>3;<sp/>gr++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>((sb<sp/>&lt;<sp/>jsbound)<sp/>?<sp/>nch<sp/>:<sp/>1);<sp/>ch++)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_alloc[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>and<sp/>quantize<sp/>FLOATing<sp/>point<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nch<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>sb<sp/>&gt;=<sp/>jsbound)<sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>j-stereo<sp/>samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>j_samps[gr][j][sb]<sp/>/<sp/>scalefactor[j_scale[gr][sb]];</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>sb_samples[ch][gr][j][sb]<sp/>/<sp/>scalefactor[sf_index[ch][gr][sb]];</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>wrong<sp/>scale<sp/>factor<sp/>hasn&apos;t<sp/>been<sp/>chosen<sp/>-<sp/>which<sp/>would</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>in<sp/>a<sp/>scaled<sp/>sample<sp/>being<sp/>&gt;<sp/>1.0<sp/>This<sp/>error<sp/>shouldn&apos;t<sp/>ever<sp/>happen</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unless*<sp/>something<sp/>went<sp/>wrong<sp/>in<sp/>scalefactor<sp/>calc</highlight></codeline>
<codeline lineno="609"><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mod<sp/>(d)<sp/>&gt;<sp/>1.0)<sp/>fprintf<sp/>(stderr,<sp/>&quot;Not<sp/>scaled<sp/>properly<sp/>%d<sp/>%d<sp/>%d<sp/>%d\n&quot;,<sp/></highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch,<sp/>gr,<sp/>j,<sp/>sb);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;index&apos;<sp/>indicates<sp/>which<sp/>&quot;step<sp/>line&quot;<sp/>we<sp/>are<sp/>using<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>&quot;step<sp/>index&quot;<sp/>within<sp/>that<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qnt_coeff_index<sp/>=<sp/>step_index[index][bit_alloc[ch][sb]];</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>d<sp/>*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>[qnt_coeff_index]<sp/>+<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>[qnt_coeff_index];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extract<sp/>MSB<sp/>N-1<sp/>bits<sp/>from<sp/>the<sp/>FLOATing<sp/>point<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbband[ch][gr][j][sb]<sp/>=</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(d<sp/>*<sp/>(<ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref>)<sp/>steps2n[qnt_coeff_index]);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tag<sp/>the<sp/>inverted<sp/>sign<sp/>bit<sp/>to<sp/>sbband<sp/>at<sp/>position<sp/>N<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>bit<sp/>inversion<sp/>is<sp/>a<sp/>must<sp/>for<sp/>grouping<sp/>with<sp/>3,5,9<sp/>steps<sp/>so<sp/>it<sp/>is<sp/>done</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>all<sp/>subbands<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbband[ch][gr][j][sb]<sp/>|=<sp/>steps2n[qnt_coeff_index];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>everything<sp/>above<sp/>the<sp/>sblimit<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>0;<sp/>gr<sp/>&lt;<sp/>3;<sp/>gr++)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>sblimit;<sp/>j<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbband[ch][gr][sb][j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/>sample_encoding<sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="comment"></highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>PURPOSE:Put<sp/>one<sp/>frame<sp/>of<sp/>subband<sp/>samples<sp/>on<sp/>to<sp/>the<sp/>bitstream</highlight></codeline>
<codeline lineno="651"><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>SEMANTICS:<sp/><sp/>The<sp/>number<sp/>of<sp/>bits<sp/>allocated<sp/>per<sp/>sample<sp/>is<sp/>read<sp/>from</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>the<sp/>bit<sp/>allocation<sp/>information<sp/>#bit_alloc#.<sp/><sp/>Layer<sp/>2</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>supports<sp/>writing<sp/>grouped<sp/>samples<sp/>for<sp/>quantization<sp/>steps</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>that<sp/>are<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"></highlight></codeline>
<codeline lineno="657"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="twolame_2libtwolame_2encode_8h_1a27e01b1296b8ae425b52a1c4a22f2581" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a27e01b1296b8ae425b52a1c4a22f2581" kindref="member">write_samples</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sbband[2][3][<ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][SBLIMIT],<sp/><ref refid="structbit__stream__struc" kindref="compound">bit_stream</ref><sp/>*<sp/>bs)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsbound<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref>;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>j,<sp/>ch,<sp/>gr,<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/>y;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gr<sp/>=<sp/>0;<sp/>gr<sp/>&lt;<sp/>3;<sp/>gr++)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref>;<sp/>j<sp/>+=<sp/>3)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>((sb<sp/>&lt;<sp/>jsbound)<sp/>?<sp/>nch<sp/>:<sp/>1);<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_alloc[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisline<sp/>=<sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][bit_alloc[ch][sb]];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>how<sp/>many<sp/>samples<sp/>per<sp/>codeword<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group[thisstep_index]<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Going<sp/>to<sp/>send<sp/>1<sp/>sample<sp/>per<sp/>codeword<sp/>-&gt;<sp/>3<sp/>samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>3;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>sbband[ch][gr][j<sp/>+<sp/>x][sb],<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[thisstep_index]);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ISO11172<sp/>Sec<sp/>C.1.5.2.8<sp/>If<sp/>steps=3,<sp/>5<sp/>or<sp/>9,<sp/>then<sp/>three<sp/>consecutive</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>are<sp/>coded<sp/>as<sp/>one<sp/>codeword<sp/>i.e.<sp/>only<sp/>one<sp/>value<sp/>(V)<sp/>is</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transmitted<sp/>for<sp/>this<sp/>triplet.<sp/>If<sp/>the<sp/>3<sp/>subband<sp/>samples<sp/>are<sp/>x,y,z</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>V<sp/>=<sp/>(steps*steps)*z<sp/>+<sp/>steps*y<sp/>+x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>steps[thisstep_index];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbband[ch][gr][j][sb]<sp/>+<sp/>sbband[ch][gr][j<sp/>+<sp/>1][sb]<sp/>*<sp/>y<sp/>+</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbband[ch][gr][j<sp/>+<sp/>2][sb]<sp/>*<sp/>y<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_putbits(bs,<sp/>temp,<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[thisstep_index]);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="700"><highlight class="comment">*</highlight></codeline>
<codeline lineno="701"><highlight class="comment">*<sp/>bits_for_nonoise<sp/>(Layer<sp/>II)</highlight></codeline>
<codeline lineno="702"><highlight class="comment">*</highlight></codeline>
<codeline lineno="703"><highlight class="comment">*<sp/>PURPOSE:Returns<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>required<sp/>to<sp/>produce<sp/>a</highlight></codeline>
<codeline lineno="704"><highlight class="comment">*<sp/>mask-to-noise<sp/>ratio<sp/>better<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>noise/no_noise<sp/>threshold.</highlight></codeline>
<codeline lineno="705"><highlight class="comment">*</highlight></codeline>
<codeline lineno="706"><highlight class="comment">*<sp/>SEMANTICS:</highlight></codeline>
<codeline lineno="707"><highlight class="comment">*<sp/>bbal<sp/>=<sp/>#<sp/>bits<sp/>needed<sp/>for<sp/>encoding<sp/>bit<sp/>allocation</highlight></codeline>
<codeline lineno="708"><highlight class="comment">*<sp/>bsel<sp/>=<sp/>#<sp/>bits<sp/>needed<sp/>for<sp/>encoding<sp/>scalefactor<sp/>select<sp/>information</highlight></codeline>
<codeline lineno="709"><highlight class="comment">*<sp/>banc<sp/>=<sp/>#<sp/>bits<sp/>needed<sp/>for<sp/>ancillary<sp/>data<sp/>(header<sp/>info<sp/>included)</highlight></codeline>
<codeline lineno="710"><highlight class="comment">*</highlight></codeline>
<codeline lineno="711"><highlight class="comment">*<sp/>For<sp/>each<sp/>subband<sp/>and<sp/>channel,<sp/>will<sp/>add<sp/>bits<sp/>until<sp/>one<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="712"><highlight class="comment">*<sp/>following<sp/>occurs:</highlight></codeline>
<codeline lineno="713"><highlight class="comment">*<sp/>-<sp/>Hit<sp/>maximum<sp/>number<sp/>of<sp/>bits<sp/>we<sp/>can<sp/>allocate<sp/>for<sp/>that<sp/>subband</highlight></codeline>
<codeline lineno="714"><highlight class="comment">*<sp/>-<sp/>MNR<sp/>is<sp/>better<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>minimum<sp/>masking<sp/>level</highlight></codeline>
<codeline lineno="715"><highlight class="comment">*<sp/><sp/><sp/>(NOISY_MIN_MNR)</highlight></codeline>
<codeline lineno="716"><highlight class="comment">*<sp/>Then<sp/>the<sp/>bits<sp/>required<sp/>for<sp/>scalefactors,<sp/>scfsi,<sp/>bit<sp/>allocation,</highlight></codeline>
<codeline lineno="717"><highlight class="comment">*<sp/>and<sp/>the<sp/>subband<sp/>samples<sp/>are<sp/>tallied<sp/>(#req_bits#)<sp/>and<sp/>returned.</highlight></codeline>
<codeline lineno="718"><highlight class="comment">*</highlight></codeline>
<codeline lineno="719"><highlight class="comment">*<sp/>(NOISY_MIN_MNR)<sp/>is<sp/>the<sp/>smallest<sp/>MNR<sp/>a<sp/>subband<sp/>can<sp/>have<sp/>before<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="720"><highlight class="comment">*<sp/>counted<sp/>as<sp/>&apos;noisy&apos;<sp/>by<sp/>the<sp/>logic<sp/>which<sp/>chooses<sp/>the<sp/>number<sp/>of<sp/>JS</highlight></codeline>
<codeline lineno="721"><highlight class="comment">*<sp/>subbands.</highlight></codeline>
<codeline lineno="722"><highlight class="comment">*</highlight></codeline>
<codeline lineno="723"><highlight class="comment">*<sp/>Joint<sp/>stereo<sp/>is<sp/>supported.</highlight></codeline>
<codeline lineno="724"><highlight class="comment">*</highlight></codeline>
<codeline lineno="725"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727" refid="twolame_2libtwolame_2encode_8h_1a4cfed8d6ea3cf0c50a9b22506298354d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a4cfed8d6ea3cf0c50a9b22506298354d" kindref="member">bits_for_nonoise</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>SMR[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scfsi[2][SBLIMIT],<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>min_mnr,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][SBLIMIT])</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>ch,<sp/>ba;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsbound<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref>;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_bits<sp/>=<sp/>0,<sp/>bbal<sp/>=<sp/>0,<sp/>berr<sp/>=<sp/>0,<sp/>banc<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAlloc,<sp/>sel_bits,<sp/>sc_bits,<sp/>smp_bits;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfsPerScfsi[]<sp/>=<sp/>{<sp/>3,<sp/>2,<sp/>1,<sp/>2<sp/>};<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lookup<sp/>#<sp/>sfs<sp/>per<sp/>scfsi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MFC<sp/>Feb<sp/>2003<sp/>This<sp/>works<sp/>out<sp/>the<sp/>basic<sp/>number<sp/>of<sp/>bits<sp/>just<sp/>to<sp/>get<sp/>a<sp/>valid<sp/>(but<sp/>empty)<sp/>frame.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>for<sp/>every<sp/>frame,<sp/>since<sp/>a<sp/>joint_stereo<sp/>frame<sp/>will<sp/>change<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic<sp/>bits<sp/>(depending<sp/>on<sp/>the<sp/>sblimit<sp/>in<sp/>the<sp/>particular<sp/>js<sp/>mode<sp/>that&apos;s<sp/>been<sp/>selected<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>there&apos;s<sp/>room<sp/>for<sp/>the<sp/>error<sp/>protection<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structframe__header_1ac8672e3ecb3c44f8763931e225652d0b" kindref="member">error_protection</ref>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>berr<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>berr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>required<sp/>to<sp/>encode<sp/>the<sp/>quantization<sp/>index<sp/>for<sp/>both<sp/>channels<sp/>in<sp/>each<sp/></highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subband.<sp/>If<sp/>we&apos;re<sp/>above<sp/>the<sp/>jsbound,<sp/>then<sp/>pretend<sp/>we<sp/>only<sp/>have<sp/>one<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>jsbound;<sp/>++sb)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbal<sp/>+=<sp/>nch<sp/>*<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];<sp/></highlight><highlight class="comment">//<sp/>(*alloc)[sb][0].bits;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref><sp/>(sb<sp/>=<sp/>jsbound;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbal<sp/>+=<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(*alloc)[sb][0].bits;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>req_bits<sp/>=<sp/>banc<sp/>+<sp/>bbal<sp/>+<sp/>berr;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>++sb)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>((sb<sp/>&lt;<sp/>jsbound)<sp/>?<sp/>nch<sp/>:<sp/>1);<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisline<sp/>=<sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb];</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>How<sp/>many<sp/>possible<sp/>steps<sp/>are<sp/>there<sp/>to<sp/>choose<sp/>from<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxAlloc<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]])<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>(*alloc)[sb][0].bits)<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sel_bits<sp/>=<sp/>sc_bits<sp/>=<sp/>smp_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Keep<sp/>choosing<sp/>the<sp/>next<sp/>number<sp/>of<sp/>steps<sp/>(and<sp/>hence<sp/>our<sp/>SNR<sp/>value)<sp/>until<sp/>we<sp/>have<sp/>the</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required<sp/>MNR<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ba<sp/>=<sp/>0;<sp/>ba<sp/>&lt;<sp/>maxAlloc<sp/>-<sp/>1;<sp/>++ba)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][ba];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SNR[thisstep_index]<sp/>-<sp/>SMR[ch][sb])<sp/>&gt;=<sp/>min_mnr)</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>found<sp/>enough<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nch<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>sb<sp/>&gt;=<sp/>jsbound)<sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>other<sp/>JS<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ba<sp/>&lt;<sp/>maxAlloc<sp/>-<sp/>1;<sp/>++ba)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][ba];</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SNR[thisstep_index]<sp/>-<sp/>SMR[1<sp/>-<sp/>ch][sb])<sp/>&gt;=<sp/>min_mnr)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ba<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>smp_bits<sp/>=<sp/>SCALE_BLOCK<sp/>*<sp/>((*alloc)[sb][ba].group<sp/>*<sp/>(*alloc)[sb][ba].bits);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][ba];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smp_bits<sp/>=<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>*<sp/>group[thisstep_index]<sp/>*<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[thisstep_index];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>factor<sp/>bits<sp/>required<sp/>for<sp/>subband<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sel_bits<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc_bits<sp/>=<sp/>6<sp/>*<sp/>sfsPerScfsi[scfsi[ch][sb]];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nch<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>sb<sp/>&gt;=<sp/>jsbound)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>new<sp/>js<sp/>sb<sp/>has<sp/>L+R<sp/>scfsis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sel_bits<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc_bits<sp/>+=<sp/>6<sp/>*<sp/>sfsPerScfsi[scfsi[1<sp/>-<sp/>ch][sb]];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req_bits<sp/>+=<sp/>smp_bits<sp/>+<sp/>sel_bits<sp/>+<sp/>sc_bits;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_alloc[ch][sb]<sp/>=<sp/>ba;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>req_bits;</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>called<sp/>before<sp/>calling<sp/>main_bit_allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="twolame_2libtwolame_2encode_8h_1a8312466819ccf33a3daa7221a3600d3c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a8312466819ccf33a3daa7221a3600d3c" kindref="member">init_bit_allocation</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>brindex;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>the<sp/>tables<sp/>which<sp/>specify<sp/>the<sp/>limits<sp/>within<sp/>which<sp/>the<sp/>VBR<sp/>can<sp/>vary<sp/>You<sp/>can&apos;t<sp/>vary</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outside<sp/>these<sp/>ranges,<sp/>otherwise<sp/>a<sp/>new<sp/>alloc<sp/>table<sp/>would<sp/>have<sp/>to<sp/>be<sp/>loaded<sp/>in<sp/>the<sp/>middle<sp/>of</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding.<sp/>This<sp/>VBR<sp/>hack<sp/>is<sp/>dodgy<sp/>-<sp/>the<sp/>standard<sp/>says<sp/>that<sp/>LayerII<sp/>decoders<sp/>don&apos;t<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>support<sp/>a<sp/>variable<sp/>bitrate,<sp/>but<sp/>Layer3<sp/>decoders<sp/>must<sp/>do<sp/>so.<sp/>Hence,<sp/>it<sp/>is<sp/>unlikely<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compliant<sp/>layer2<sp/>decoder<sp/>would<sp/>be<sp/>written<sp/>to<sp/>dynmically<sp/>change<sp/>allocation<sp/>tables.<sp/>*BUT*<sp/>a</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer3<sp/>encoder<sp/>might<sp/>handle<sp/>it<sp/>by<sp/>default,<sp/>meaning<sp/>we<sp/>could<sp/>switch<sp/>tables<sp/>mid-encode<sp/>and</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enjoy<sp/>a<sp/>wider<sp/>range<sp/>of<sp/>bitrates<sp/>for<sp/>the<sp/>VBR<sp/>encoding.<sp/>None<sp/>of<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>for<sp/>LSF,<sp/></highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>since<sp/>there<sp/>is<sp/>only<sp/>*one*<sp/>possible<sp/>alloc<sp/>table<sp/>in<sp/>LSF<sp/>MFC<sp/>Feb<sp/>2003<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vbrlimits[2][3][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MONO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>44<sp/>*/</highlight><highlight class="normal"><sp/>{6,<sp/>10},</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>48<sp/>*/</highlight><highlight class="normal"><sp/>{3,<sp/>10},</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>32<sp/>*/</highlight><highlight class="normal"><sp/>{6,<sp/>10}},</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>STEREO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>44<sp/>*/</highlight><highlight class="normal"><sp/>{10,<sp/>14},</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>48<sp/>*/</highlight><highlight class="normal"><sp/>{7,<sp/>14},</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>32<sp/>*/</highlight><highlight class="normal"><sp/>{10,<sp/>14}}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(brindex<sp/>=<sp/>0;<sp/>brindex<sp/>&lt;<sp/>15;<sp/>brindex++)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1abe83209635e3e6647695d14da1a1c5d0" kindref="member">bitrateindextobits</ref>[brindex]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref><sp/>(header-&gt;<ref refid="structframe__header_1a7c92a7131bf19d4340ffeecc3f893d09" kindref="member">version</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LSF:<sp/>so<sp/>can<sp/>use<sp/>any<sp/>bitrate<sp/>index<sp/>from<sp/>1-&gt;15<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a45ea79a96f9cbbfd47e718573f1f897b" kindref="member">lower_index</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a3293ab3beb5d4c271bff53daf556cd9a" kindref="member">upper_index</ref><sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfreq<sp/>=<sp/>header-&gt;<ref refid="structframe__header_1aeaaf556b174d5d6c8d719f34d4f9154e" kindref="member">samplerate_idx</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a45ea79a96f9cbbfd47e718573f1f897b" kindref="member">lower_index</ref><sp/>=<sp/>vbrlimits[nch<sp/>-<sp/>1][sfreq][0];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a3293ab3beb5d4c271bff53daf556cd9a" kindref="member">upper_index</ref><sp/>=<sp/>vbrlimits[nch<sp/>-<sp/>1][sfreq][1];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1af500639a98da65332c4eb0feed0a101a" kindref="member">vbr_upper_index</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>User<sp/>is<sp/>requesting<sp/>a<sp/>specific<sp/>upperbitrate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((glopts-&gt;<ref refid="structtwolame__options__struct_1af500639a98da65332c4eb0feed0a101a" kindref="member">vbr_upper_index</ref><sp/>&lt;<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a45ea79a96f9cbbfd47e718573f1f897b" kindref="member">lower_index</ref>)<sp/>||</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1af500639a98da65332c4eb0feed0a101a" kindref="member">vbr_upper_index</ref><sp/>&gt;<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a3293ab3beb5d4c271bff53daf556cd9a" kindref="member">upper_index</ref>))<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>satisfy<sp/>upper<sp/>bitrate<sp/>index<sp/>constraint.<sp/>out<sp/>of<sp/>bounds.<sp/>%i\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1af500639a98da65332c4eb0feed0a101a" kindref="member">vbr_upper_index</ref>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a3293ab3beb5d4c271bff53daf556cd9a" kindref="member">upper_index</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1af500639a98da65332c4eb0feed0a101a" kindref="member">vbr_upper_index</ref>;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>a<sp/>conversion<sp/>table<sp/>for<sp/>bitrateindex-&gt;bits<sp/>for<sp/>this<sp/>version/sampl<sp/>freq<sp/>This<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>to<sp/>find<sp/>the<sp/>best<sp/>bitrate<sp/>to<sp/>cope<sp/>with<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>that<sp/>are<sp/>needed<sp/>(as<sp/>determined<sp/></highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>vbr_bits_for_nonoise)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(brindex<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a45ea79a96f9cbbfd47e718573f1f897b" kindref="member">lower_index</ref>;<sp/>brindex<sp/>&lt;=<sp/>glopts-&gt;upper_index;<sp/>brindex++)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1abe83209635e3e6647695d14da1a1c5d0" kindref="member">bitrateindextobits</ref>[brindex]<sp/>=</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(1152.0<sp/>/<sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1a6c0025d3edc48ae42a8f72fab21ce1a6" kindref="member">samplerate_out</ref><sp/>/<sp/>1000.0)<sp/>*<sp/>(<ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref>)<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ac471f69e776fa200a2032a88dfdee3b0" kindref="member">bitrate</ref>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="867"><highlight class="comment">*</highlight></codeline>
<codeline lineno="868"><highlight class="comment">*<sp/>main_bit_allocation<sp/><sp/>(Layer<sp/>II)</highlight></codeline>
<codeline lineno="869"><highlight class="comment">*</highlight></codeline>
<codeline lineno="870"><highlight class="comment">*<sp/>PURPOSE:For<sp/>joint<sp/>stereo<sp/>mode,<sp/>determines<sp/>which<sp/>of<sp/>the<sp/>4<sp/>joint</highlight></codeline>
<codeline lineno="871"><highlight class="comment">*<sp/>stereo<sp/>modes<sp/>is<sp/>needed.<sp/><sp/>Then<sp/>calls<sp/>*_a_bit_allocation(),<sp/>which</highlight></codeline>
<codeline lineno="872"><highlight class="comment">*<sp/>allocates<sp/>bits<sp/>for<sp/>each<sp/>of<sp/>the<sp/>subbands<sp/>until<sp/>there<sp/>are<sp/>no<sp/>more<sp/>bits</highlight></codeline>
<codeline lineno="873"><highlight class="comment">*<sp/>left,<sp/>or<sp/>the<sp/>MNR<sp/>is<sp/>at<sp/>the<sp/>noise/no_noise<sp/>threshold.</highlight></codeline>
<codeline lineno="874"><highlight class="comment">*</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*<sp/>SEMANTICS:</highlight></codeline>
<codeline lineno="876"><highlight class="comment">*</highlight></codeline>
<codeline lineno="877"><highlight class="comment">*<sp/>For<sp/>joint<sp/>stereo<sp/>mode,<sp/>joint<sp/>stereo<sp/>is<sp/>changed<sp/>to<sp/>stereo<sp/>if</highlight></codeline>
<codeline lineno="878"><highlight class="comment">*<sp/>there<sp/>are<sp/>enough<sp/>bits<sp/>to<sp/>encode<sp/>stereo<sp/>at<sp/>or<sp/>better<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="879"><highlight class="comment">*<sp/>no-noise<sp/>threshold<sp/>(NOISY_MIN_MNR).<sp/><sp/>Otherwise,<sp/>the<sp/>system</highlight></codeline>
<codeline lineno="880"><highlight class="comment">*<sp/>iteratively<sp/>allocates<sp/>less<sp/>bits<sp/>by<sp/>using<sp/>joint<sp/>stereo<sp/>until<sp/>one</highlight></codeline>
<codeline lineno="881"><highlight class="comment">*<sp/>of<sp/>the<sp/>following<sp/>occurs:</highlight></codeline>
<codeline lineno="882"><highlight class="comment">*<sp/>-<sp/>there<sp/>are<sp/>no<sp/>more<sp/>noisy<sp/>subbands<sp/>(MNR<sp/>&gt;=<sp/>NOISY_MIN_MNR)</highlight></codeline>
<codeline lineno="883"><highlight class="comment">*<sp/>-<sp/>mode_ext<sp/>has<sp/>been<sp/>reduced<sp/>to<sp/>0,<sp/>which<sp/>means<sp/>that<sp/>all<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="884"><highlight class="comment">*<sp/><sp/><sp/>lowest<sp/>4<sp/>subbands<sp/>have<sp/>been<sp/>converted<sp/>from<sp/>stereo<sp/>to<sp/>joint</highlight></codeline>
<codeline lineno="885"><highlight class="comment">*<sp/><sp/><sp/>stereo,<sp/>and<sp/>no<sp/>more<sp/>subbands<sp/>may<sp/>be<sp/>converted</highlight></codeline>
<codeline lineno="886"><highlight class="comment">*</highlight></codeline>
<codeline lineno="887"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>calls<sp/>*_bits_for_nonoise()<sp/>and<sp/>*_a_bit_allocation().</highlight></codeline>
<codeline lineno="888"><highlight class="comment">*</highlight></codeline>
<codeline lineno="889"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="twolame_2libtwolame_2encode_8h_1aa6f6a0b5c40635d5c4a2340dd5afd4bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1aa6f6a0b5c40635d5c4a2340dd5afd4bd" kindref="member">main_bit_allocation</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>SMR[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scfsi[2][SBLIMIT],</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][SBLIMIT],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*adb)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noisy_sbs;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a9a485b580a62dd91ca9d2b6c51cbddb5" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode_ext,<sp/>lay;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rq_db;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>av_db<sp/>=<sp/>*adb;<sp/>Not<sp/>Used<sp/>MFC<sp/>Nov<sp/>99<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guessindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/><ref refid="twolame_8h_1a91879045676d9146c9bfcb8b0a30b57fa944018843ef67ac47d3e680c749b2967" kindref="member">TWOLAME_JOINT_STEREO</ref>)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1a8317914fab0cb6b5357731baf40f38d9" kindref="member">mode</ref><sp/>=<sp/><ref refid="twolame_8h_1a91879045676d9146c9bfcb8b0a30b57fa785df1b22ebb296610b938793906f66d" kindref="member">TWOLAME_STEREO</ref>;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1a776cfc6aeca369b948f54fa9e3d99b59" kindref="member">mode_ext</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rq_db<sp/>=<sp/><ref refid="twolame_2libtwolame_2encode_8c_1a4cfed8d6ea3cf0c50a9b22506298354d" kindref="member">bits_for_nonoise</ref>(glopts,<sp/>SMR,<sp/>scfsi,<sp/>0,<sp/>bit_alloc))<sp/>&gt;<sp/>*adb)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1a8317914fab0cb6b5357731baf40f38d9" kindref="member">mode</ref><sp/>=<sp/><ref refid="twolame_8h_1a91879045676d9146c9bfcb8b0a30b57fa944018843ef67ac47d3e680c749b2967" kindref="member">TWOLAME_JOINT_STEREO</ref>;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode_ext<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3<sp/>is<sp/>least<sp/>severe<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lay<sp/>=<sp/>header-&gt;<ref refid="structframe__header_1a719d105e9a5983f057946a8dc351f90b" kindref="member">lay</ref>;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--mode_ext;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref><sp/>=<sp/>get_js_bound(mode_ext);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rq_db<sp/>=<sp/><ref refid="twolame_2libtwolame_2encode_8c_1a4cfed8d6ea3cf0c50a9b22506298354d" kindref="member">bits_for_nonoise</ref>(glopts,<sp/>SMR,<sp/>scfsi,<sp/>0,<sp/>bit_alloc);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((rq_db<sp/>&gt;<sp/>*adb)<sp/>&amp;&amp;<sp/>(mode_ext<sp/>&gt;<sp/>0));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1a776cfc6aeca369b948f54fa9e3d99b59" kindref="member">mode_ext</ref><sp/>=<sp/>mode_ext;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>well<sp/>we<sp/>either<sp/>eliminated<sp/>noisy<sp/>sbs<sp/>or<sp/>mode_ext<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decide<sp/>on<sp/>which<sp/>bit<sp/>allocation<sp/>method<sp/>to<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1ac5e4a3519d895e56ff0daebaf255128b" kindref="member">vbr</ref><sp/>==<sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>do<sp/>the<sp/>old<sp/>bit<sp/>allocation<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noisy_sbs<sp/>=<sp/><ref refid="twolame_2libtwolame_2encode_8c_1a380e2f51c965b9495a876426fb34c4cb" kindref="member">a_bit_allocation</ref>(glopts,<sp/>SMR,<sp/>scfsi,<sp/>bit_alloc,<sp/>adb);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>the<sp/>VBR<sp/>bit<sp/>allocation<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1ad219005f5e70c73d083bfcc7f88dadaa" kindref="member">bitrate_index</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a45ea79a96f9cbbfd47e718573f1f897b" kindref="member">lower_index</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*adb<sp/>=<sp/><ref refid="availbits_8c_1a23c7bcc3799f87a38a8245bcb18fb000" kindref="member">available_bits</ref>(glopts);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>brindex;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>out<sp/>how<sp/>many<sp/>bits<sp/>are<sp/>needed<sp/>for<sp/>there<sp/>to<sp/>be<sp/>no<sp/>noise<sp/>(ie<sp/>all<sp/>MNR<sp/>&gt;<sp/>VBRLEVEL)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req<sp/>=<sp/><ref refid="twolame_2libtwolame_2encode_8c_1a4cfed8d6ea3cf0c50a9b22506298354d" kindref="member">bits_for_nonoise</ref>(glopts,<sp/>SMR,<sp/>scfsi,<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a09d6b0d1f00cfc6bc928984ae15b3b4c" kindref="member">vbrlevel</ref>,<sp/>bit_alloc);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>up<sp/>this<sp/>value<sp/>in<sp/>the<sp/>bitrateindextobits<sp/>table<sp/>to<sp/>find<sp/>what<sp/>bitrate<sp/>we<sp/>should</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use<sp/>for<sp/>this<sp/>frame<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(brindex<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a45ea79a96f9cbbfd47e718573f1f897b" kindref="member">lower_index</ref>;<sp/>brindex<sp/>&lt;=<sp/>glopts-&gt;upper_index;<sp/>brindex++)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1abe83209635e3e6647695d14da1a1c5d0" kindref="member">bitrateindextobits</ref>[brindex]<sp/>&gt;<sp/>req)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>method<sp/>always<sp/>*overestimates*<sp/>the<sp/>bits<sp/>that<sp/>are<sp/>needed<sp/>i.e.<sp/>it<sp/>will</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usually<sp/>guess<sp/>right<sp/>but<sp/>when<sp/>it&apos;s<sp/>wrong<sp/>it&apos;ll<sp/>guess<sp/>a<sp/>higher<sp/>bitrate<sp/>than</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actually<sp/>required.<sp/>e.g.<sp/>on<sp/>&quot;messages<sp/>from<sp/>earth&quot;<sp/>track<sp/>6,<sp/>the<sp/>guess<sp/>was</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrong<sp/>on<sp/>75/36341<sp/>frames.<sp/>each<sp/>time<sp/>it<sp/>guessed<sp/>higher.<sp/>MFC<sp/>Feb<sp/>2003<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guessindex<sp/>=<sp/>brindex;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/><ref refid="cext_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>for<sp/>sanity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>==<sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guessindex<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a3293ab3beb5d4c271bff53daf556cd9a" kindref="member">upper_index</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1ad219005f5e70c73d083bfcc7f88dadaa" kindref="member">bitrate_index</ref><sp/>=<sp/>guessindex;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*adb<sp/>=<sp/><ref refid="availbits_8c_1a23c7bcc3799f87a38a8245bcb18fb000" kindref="member">available_bits</ref>(glopts);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>statistics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a814a435587623bfa5430c511c80ce753" kindref="member">vbrstats</ref>[header-&gt;<ref refid="structframe__header_1ad219005f5e70c73d083bfcc7f88dadaa" kindref="member">bitrate_index</ref>]++;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1a85004829f276bc6adf993ff2cb3f3fd2" kindref="member">verbosity</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>out<sp/>the<sp/>VBR<sp/>stats<sp/>every<sp/>1000th<sp/>frame<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((glopts-&gt;<ref refid="structtwolame__options__struct_1ab9e79c1f1ef2b4cedca215aaeb77a4b2" kindref="member">vbr_frame_count</ref>++<sp/>%<sp/>1000)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>15;<sp/>i++)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%4i<sp/>&quot;</highlight><highlight class="normal">,<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a814a435587623bfa5430c511c80ce753" kindref="member">vbrstats</ref>[i]);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Print<sp/>out<sp/>*every*<sp/>frames<sp/>bitrateindex,<sp/>bits<sp/>required,<sp/>and<sp/>bits<sp/>available<sp/>at<sp/>this</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitrate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glopts-&gt;<ref refid="structtwolame__options__struct_1a85004829f276bc6adf993ff2cb3f3fd2" kindref="member">verbosity</ref><sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>bitrate<sp/>index<sp/>%2i<sp/>has<sp/>%i<sp/>bits<sp/>available<sp/>to<sp/>encode<sp/>the<sp/>%i<sp/>bits\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-&gt;<ref refid="structframe__header_1ad219005f5e70c73d083bfcc7f88dadaa" kindref="member">bitrate_index</ref>,<sp/>*adb,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a4cfed8d6ea3cf0c50a9b22506298354d" kindref="member">bits_for_nonoise</ref>(glopts,<sp/>SMR,<sp/>scfsi,<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a09d6b0d1f00cfc6bc928984ae15b3b4c" kindref="member">vbrlevel</ref>,<sp/>bit_alloc));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noisy_sbs<sp/>=<sp/><ref refid="twolame_2libtwolame_2encode_8c_1a3f9faed846fb1d81840ec5f3fb096a29" kindref="member">vbr_bit_allocation</ref>(glopts,<sp/>SMR,<sp/>scfsi,<sp/>bit_alloc,<sp/>adb);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vbr_maxmnr(<ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>mnr[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>used[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*min_sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*min_ch,<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>vbrlevel)</highlight></codeline>
<codeline lineno="985"><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>ch;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>small;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>small<sp/>=<sp/>999999.0;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>*min_sb<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>*min_ch<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEWBITx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NEWBIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Keep<sp/>going<sp/>until<sp/>all<sp/>subbands<sp/>have<sp/>reached<sp/>the<sp/>MNR<sp/>level<sp/>that<sp/>we<sp/>specified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mnr[ch][sb]<sp/>&lt;<sp/>vbrlevel)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_sb<sp/>=<sp/>sb;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_ch<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fprintf(stderr,&quot;.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fflush(stderr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>start<sp/>adding<sp/>bits<sp/>to<sp/>whichever<sp/>is<sp/>the<sp/>min<sp/>MNR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used[ch][sb]<sp/>!=<sp/>2<sp/>&amp;&amp;<sp/>small<sp/>&gt;<sp/>mnr[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small<sp/>=<sp/>mnr[ch][sb];</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_sb<sp/>=<sp/>sb;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_ch<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fprintf(stderr,&quot;Min<sp/>sb:<sp/>%i\n&quot;,*min_sb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">/********************</highlight></codeline>
<codeline lineno="1022"><highlight class="comment">MFC<sp/>Feb<sp/>2003</highlight></codeline>
<codeline lineno="1023"><highlight class="comment">vbr_bit_allocation<sp/>is<sp/>different<sp/>to<sp/>the<sp/>normal<sp/>a_bit_allocation<sp/>in<sp/>that</highlight></codeline>
<codeline lineno="1024"><highlight class="comment">it<sp/>is<sp/>known<sp/>beforehand<sp/>that<sp/>there<sp/>are<sp/>definitely<sp/>enough<sp/>bits<sp/>to<sp/>do<sp/>what<sp/>we<sp/></highlight></codeline>
<codeline lineno="1025"><highlight class="comment">have<sp/>to<sp/>-<sp/>i.e.<sp/>a<sp/>bitrate<sp/>was<sp/>specificially<sp/>chosen<sp/>in<sp/>main_bit_allocation<sp/>so</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">that<sp/>we<sp/>have<sp/>enough<sp/>bits<sp/>to<sp/>encode<sp/>what<sp/>we<sp/>have<sp/>to.</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">This<sp/>function<sp/>should<sp/>take<sp/>that<sp/>into<sp/>account<sp/>and<sp/>just<sp/>greedily<sp/>assign</highlight></codeline>
<codeline lineno="1028"><highlight class="comment">the<sp/>bits,<sp/>rather<sp/>than<sp/>fussing<sp/>over<sp/>the<sp/>minimum<sp/>MNR<sp/>subband<sp/>-<sp/>we<sp/>know</highlight></codeline>
<codeline lineno="1029"><highlight class="comment">each<sp/>subband<sp/>gets<sp/>its<sp/>required<sp/>bits,<sp/>why<sp/>quibble?</highlight></codeline>
<codeline lineno="1030"><highlight class="comment">This<sp/>function<sp/>doesn&apos;t<sp/>chew<sp/>much<sp/>CPU,<sp/>so<sp/>I<sp/>haven&apos;t<sp/>made<sp/>any<sp/>attempt</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">to<sp/>do<sp/>this<sp/>yet.</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033" refid="twolame_2libtwolame_2encode_8h_1a3f9faed846fb1d81840ec5f3fb096a29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a3f9faed846fb1d81840ec5f3fb096a29" kindref="member">vbr_bit_allocation</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>SMR[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scfsi[2][SBLIMIT],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][SBLIMIT],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*adb)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>min_ch,<sp/>min_sb,<sp/>oth_ch,<sp/>ch,<sp/>increment,<sp/><ref refid="seqread_8c_1aa2a8c6fbe5ed24f9523eb4e01368e4bc" kindref="member">scale</ref>,<sp/>seli,<sp/>ba;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bspl,<sp/>bscf,<sp/>bsel,<sp/>ad,<sp/>bbal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>mnr[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>];</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>used[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>];</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsbound<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref>;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>banc,<sp/>berr;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfsPerScfsi[]<sp/>=<sp/>{<sp/>3,<sp/>2,<sp/>1,<sp/>2<sp/>};<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lookup<sp/>#<sp/>sfs<sp/>per<sp/>scfsi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisstep_index;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structframe__header_1ac8672e3ecb3c44f8763931e225652d0b" kindref="member">error_protection</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>berr<sp/>=<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>added<sp/>92-08-11<sp/>shn<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>banc<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>berr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>banc<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>jsbound<sp/>here<sp/>as<sp/>JS<sp/>is<sp/>disabled<sp/>for<sp/>VBR<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbal<sp/>+=<sp/>nch<sp/>*<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>*adb<sp/>-=<sp/>bbal<sp/>+<sp/>berr<sp/>+<sp/>banc;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>ad<sp/>=<sp/>*adb;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnr[ch][sb]<sp/>=<sp/>SNR[0]<sp/>-<sp/>SMR[ch][sb];</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_alloc[ch][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[ch][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>bspl<sp/>=<sp/>bscf<sp/>=<sp/>bsel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>locate<sp/>the<sp/>subband<sp/>with<sp/>minimum<sp/>SMR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vbr_maxmnr(mnr,<sp/>used,<sp/>sblimit,<sp/>nch,<sp/>&amp;min_sb,<sp/>&amp;min_ch,<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a09d6b0d1f00cfc6bc928984ae15b3b4c" kindref="member">vbrlevel</ref>);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_sb<sp/>&gt;<sp/>-1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>was<sp/>something<sp/>to<sp/>find<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisline<sp/>=<sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][min_sb];<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>increase<sp/>in<sp/>bit<sp/>allocation<sp/>in<sp/>subband<sp/>[min]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextstep_index<sp/>=<sp/>step_index[thisline][bit_alloc[min_ch][min_sb]<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>*<sp/>group[nextstep_index]<sp/>*<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[nextstep_index];</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used[min_ch][min_sb])<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we&apos;ve<sp/>already<sp/>increased<sp/>the<sp/>limit<sp/>on<sp/>this<sp/>ch/sb,<sp/>then<sp/>subtract<sp/>the<sp/>last<sp/>thing<sp/></highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>we<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][bit_alloc[min_ch][min_sb]];</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>-=<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>*<sp/>group[thisstep_index]<sp/>*<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[thisstep_index];</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>factor<sp/>bits<sp/>required<sp/>for<sp/>subband<sp/>[min]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oth_ch<sp/>=<sp/>1<sp/>-<sp/>min_ch;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>above<sp/>js<sp/>bound,<sp/>need<sp/>both<sp/>chans<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used[min_ch][min_sb])<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>seli<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>channel<sp/>had<sp/>no<sp/>bits<sp/>or<sp/>scfs<sp/>before<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seli<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>6<sp/>*<sp/>sfsPerScfsi[scfsi[min_ch][min_sb]];</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nch<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>min_sb<sp/>&gt;=<sp/>jsbound)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>new<sp/>js<sp/>sb<sp/>has<sp/>L+R<sp/>scfsis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seli<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>+=<sp/>6<sp/>*<sp/>sfsPerScfsi[scfsi[oth_ch][min_sb]];</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>to<sp/>see<sp/>enough<sp/>bits<sp/>were<sp/>available<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>increasing<sp/>resolution<sp/>in<sp/>the<sp/>minimum<sp/>band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ad<sp/>&gt;=<sp/>bspl<sp/>+<sp/>bscf<sp/>+<sp/>bsel<sp/>+<sp/>seli<sp/>+<sp/>scale<sp/>+<sp/>increment)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>there<sp/>are<sp/>enough<sp/>bits<sp/>to<sp/>have<sp/>another<sp/>go<sp/>at<sp/>allocating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba<sp/>=<sp/>++bit_alloc[min_ch][min_sb];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>up<sp/>alloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bspl<sp/>+=<sp/>increment;<sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>for<sp/>subband<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bscf<sp/>+=<sp/>scale;<sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>for<sp/>scale<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bsel<sp/>+=<sp/>seli;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>for<sp/>scfsi<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[min_ch][min_sb]<sp/>=<sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>subband<sp/>has<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][ba];</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnr[min_ch][min_sb]<sp/>=<sp/>SNR[thisstep_index]<sp/>-<sp/>SMR[min_ch][min_sb];</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>this<sp/>min_sb<sp/>subband<sp/>has<sp/>been<sp/>fully<sp/>allocated<sp/>max<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ba<sp/>&gt;=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][min_sb]])<sp/>-<sp/>1)<sp/><sp/></highlight><highlight class="comment">//<sp/>(*alloc)[min_sb][0].bits)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[min_ch][min_sb]<sp/>=<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>let<sp/>this<sp/>sb<sp/>get<sp/>any<sp/>more<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[min_ch][min_sb]<sp/>=<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>increase<sp/>this<sp/>alloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(min_sb<sp/>&gt;<sp/>-1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>until<sp/>could<sp/>find<sp/>no<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>ad<sp/>-=<sp/>bspl<sp/>+<sp/>bscf<sp/>+<sp/>bsel;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>*adb<sp/>=<sp/>ad;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>sblimit;<sp/>sb<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_alloc[ch][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maxmnr(<ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>mnr[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>used[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>,</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*min_sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*min_ch)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>ch;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>small;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>small<sp/>=<sp/>999999.0;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>*min_sb<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>*min_ch<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>++ch)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used[ch][sb]<sp/>!=<sp/>2<sp/>&amp;&amp;<sp/>small<sp/>&gt;<sp/>mnr[ch][sb])<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small<sp/>=<sp/>mnr[ch][sb];</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_sb<sp/>=<sp/>sb;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*min_ch<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="1161"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">*<sp/>a_bit_allocation<sp/>(Layer<sp/>II)</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">*<sp/>PURPOSE:Adds<sp/>bits<sp/>to<sp/>the<sp/>subbands<sp/>with<sp/>the<sp/>lowest<sp/>mask-to-noise</highlight></codeline>
<codeline lineno="1165"><highlight class="comment">*<sp/>ratios,<sp/>until<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bits<sp/>for<sp/>the<sp/>subband<sp/>has</highlight></codeline>
<codeline lineno="1166"><highlight class="comment">*<sp/>been<sp/>allocated.</highlight></codeline>
<codeline lineno="1167"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1168"><highlight class="comment">*<sp/>SEMANTICS:</highlight></codeline>
<codeline lineno="1169"><highlight class="comment">*<sp/>1.<sp/>Find<sp/>the<sp/>subband<sp/>and<sp/>channel<sp/>with<sp/>the<sp/>smallest<sp/>MNR<sp/>(#min_sb#,</highlight></codeline>
<codeline lineno="1170"><highlight class="comment">*<sp/><sp/><sp/><sp/>and<sp/>#min_ch#)</highlight></codeline>
<codeline lineno="1171"><highlight class="comment">*<sp/>2.<sp/>Calculate<sp/>the<sp/>increase<sp/>in<sp/>bits<sp/>needed<sp/>if<sp/>we<sp/>increase<sp/>the<sp/>bit</highlight></codeline>
<codeline lineno="1172"><highlight class="comment">*<sp/><sp/><sp/><sp/>allocation<sp/>to<sp/>the<sp/>next<sp/>higher<sp/>level</highlight></codeline>
<codeline lineno="1173"><highlight class="comment">*<sp/>3.<sp/>If<sp/>there<sp/>are<sp/>enough<sp/>bits<sp/>available<sp/>for<sp/>increasing<sp/>the<sp/>resolution</highlight></codeline>
<codeline lineno="1174"><highlight class="comment">*<sp/><sp/><sp/><sp/>in<sp/>#min_sb#,<sp/>#min_ch#,<sp/>and<sp/>the<sp/>subband<sp/>has<sp/>not<sp/>yet<sp/>reached<sp/>its</highlight></codeline>
<codeline lineno="1175"><highlight class="comment">*<sp/><sp/><sp/><sp/>maximum<sp/>allocation,<sp/>update<sp/>the<sp/>bit<sp/>allocation,<sp/>MNR,<sp/>and<sp/>bits</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">*<sp/><sp/><sp/><sp/>available<sp/>accordingly</highlight></codeline>
<codeline lineno="1177"><highlight class="comment">*<sp/>4.<sp/>Repeat<sp/>until<sp/>there<sp/>are<sp/>no<sp/>more<sp/>bits<sp/>left,<sp/>or<sp/>no<sp/>more<sp/>available</highlight></codeline>
<codeline lineno="1178"><highlight class="comment">*<sp/><sp/><sp/><sp/>subbands.<sp/>(A<sp/>subband<sp/>is<sp/>still<sp/>available<sp/>until<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">*<sp/><sp/><sp/><sp/>number<sp/>of<sp/>bits<sp/>for<sp/>the<sp/>subband<sp/>has<sp/>been<sp/>allocated,<sp/>or<sp/>there</highlight></codeline>
<codeline lineno="1180"><highlight class="comment">*<sp/><sp/><sp/><sp/>aren&apos;t<sp/>enough<sp/>bits<sp/>to<sp/>go<sp/>to<sp/>the<sp/>next<sp/>higher<sp/>resolution<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1181"><highlight class="comment">*<sp/><sp/><sp/><sp/>subband.)</highlight></codeline>
<codeline lineno="1182"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1183"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185" refid="twolame_2libtwolame_2encode_8h_1a380e2f51c965b9495a876426fb34c4cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="twolame_2libtwolame_2encode_8c_1a380e2f51c965b9495a876426fb34c4cb" kindref="member">a_bit_allocation</ref>(<ref refid="structtwolame__options__struct" kindref="compound">twolame_options</ref><sp/>*<sp/>glopts,<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>SMR[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>],</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scfsi[2][SBLIMIT],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_alloc[2][SBLIMIT],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*adb)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb,<sp/>min_ch,<sp/>min_sb,<sp/>oth_ch,<sp/>ch,<sp/>increment,<sp/><ref refid="seqread_8c_1aa2a8c6fbe5ed24f9523eb4e01368e4bc" kindref="member">scale</ref>,<sp/>seli,<sp/>ba;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bspl,<sp/>bscf,<sp/>bsel,<sp/>ad,<sp/>bbal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="twolame_2libtwolame_2common_8h_1ae8690abbffa85934d64d545920e2b108" kindref="member">FLOAT</ref><sp/>mnr[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>];</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>used[2][<ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>];</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe__header" kindref="compound">frame_header</ref><sp/>*header<sp/>=<sp/>&amp;glopts-&gt;<ref refid="structtwolame__options__struct_1a50fa0b33674f61d8e3386b3e8d54b78c" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nch<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1a5388d86ab861953b968b2ec81bda950f" kindref="member">num_channels_out</ref>;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref><sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ace0e0a1e04ffe3ec27bf782edac6973b" kindref="member">sblimit</ref>;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jsbound<sp/>=<sp/>glopts-&gt;<ref refid="structtwolame__options__struct_1ad177ef737c518ac27a6a76085ec47b40" kindref="member">jsbound</ref>;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>banc,<sp/>berr;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfsPerScfsi[]<sp/>=<sp/>{<sp/>3,<sp/>2,<sp/>1,<sp/>2<sp/>};<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lookup<sp/>#<sp/>sfs<sp/>per<sp/>scfsi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisstep_index;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;<ref refid="structframe__header_1ac8672e3ecb3c44f8763931e225652d0b" kindref="member">error_protection</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>berr<sp/>=<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>added<sp/>92-08-11<sp/>shn<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>banc<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>berr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>banc<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/>jsbound;<sp/>sb++)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbal<sp/>+=<sp/>nch<sp/>*<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];<sp/></highlight><highlight class="comment">//<sp/>(*alloc)[sb][0].bits;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref><sp/>(sb<sp/>=<sp/>jsbound;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbal<sp/>+=<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][sb]];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(*alloc)[sb][0].bits;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>*adb<sp/>-=<sp/>bbal<sp/>+<sp/>berr<sp/>+<sp/>banc;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>ad<sp/>=<sp/>*adb;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref><sp/>(sb<sp/>=<sp/>0;<sp/>sb<sp/>&lt;<sp/><ref refid="layer12_8c_1a6e51104237381e118e16da8bba73fd18" kindref="member">sblimit</ref>;<sp/>sb++)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnr[ch][sb]<sp/>=<sp/>SNR[0]<sp/>-<sp/>SMR[ch][sb];</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_alloc[ch][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[ch][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>bspl<sp/>=<sp/>bscf<sp/>=<sp/>bsel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>locate<sp/>the<sp/>subband<sp/>with<sp/>minimum<sp/>SMR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxmnr(mnr,<sp/>used,<sp/>sblimit,<sp/>nch,<sp/>&amp;min_sb,<sp/>&amp;min_ch);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_sb<sp/>&gt;<sp/>-1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>was<sp/>something<sp/>to<sp/>find<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisline<sp/>=<sp/><ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][min_sb];<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>increase<sp/>in<sp/>bit<sp/>allocation<sp/>in<sp/>subband<sp/>[min]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextstep_index<sp/>=<sp/>step_index[thisline][bit_alloc[min_ch][min_sb]<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>*<sp/>group[nextstep_index]<sp/>*<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[nextstep_index];</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used[min_ch][min_sb])<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we&apos;ve<sp/>already<sp/>increased<sp/>the<sp/>limit<sp/>on<sp/>this<sp/>ch/sb,<sp/>then<sp/>subtract<sp/>the<sp/>last<sp/>thing<sp/></highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>we<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][bit_alloc[min_ch][min_sb]];</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>-=<sp/><ref refid="twolame_2libtwolame_2common_8h_1ae51f5d4a4201eed1fa3111d2b1438bbf" kindref="member">SCALE_BLOCK</ref><sp/>*<sp/>group[thisstep_index]<sp/>*<sp/><ref refid="metrics_8c_1a1eb8fc809d37cc6176f7f27374b063d0" kindref="member">bits</ref>[thisstep_index];</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>factor<sp/>bits<sp/>required<sp/>for<sp/>subband<sp/>[min]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oth_ch<sp/>=<sp/>1<sp/>-<sp/>min_ch;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>above<sp/>js<sp/>bound,<sp/>need<sp/>both<sp/>chans<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used[min_ch][min_sb])<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>seli<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>channel<sp/>had<sp/>no<sp/>bits<sp/>or<sp/>scfs<sp/>before<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seli<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>6<sp/>*<sp/>sfsPerScfsi[scfsi[min_ch][min_sb]];</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nch<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>min_sb<sp/>&gt;=<sp/>jsbound)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>new<sp/>js<sp/>sb<sp/>has<sp/>L+R<sp/>scfsis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seli<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>+=<sp/>6<sp/>*<sp/>sfsPerScfsi[scfsi[oth_ch][min_sb]];</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>to<sp/>see<sp/>enough<sp/>bits<sp/>were<sp/>available<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>increasing<sp/>resolution<sp/>in<sp/>the<sp/>minimum<sp/>band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ad<sp/>&gt;=<sp/>bspl<sp/>+<sp/>bscf<sp/>+<sp/>bsel<sp/>+<sp/>seli<sp/>+<sp/>scale<sp/>+<sp/>increment)<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>there<sp/>are<sp/>enough<sp/>bits<sp/>to<sp/>have<sp/>another<sp/>go<sp/>at<sp/>allocating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba<sp/>=<sp/>++bit_alloc[min_ch][min_sb];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>up<sp/>alloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bspl<sp/>+=<sp/>increment;<sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>for<sp/>subband<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bscf<sp/>+=<sp/>scale;<sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>for<sp/>scale<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bsel<sp/>+=<sp/>seli;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>for<sp/>scfsi<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[min_ch][min_sb]<sp/>=<sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>subband<sp/>has<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][ba];</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnr[min_ch][min_sb]<sp/>=<sp/>SNR[thisstep_index]<sp/>-<sp/>SMR[min_ch][min_sb];</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>this<sp/>min_sb<sp/>subband<sp/>has<sp/>been<sp/>fully<sp/>allocated<sp/>max<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ba<sp/>&gt;=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="layer12_8c_1ae73b959d57bc4a546353f388a8b45b12" kindref="member">nbal</ref>[<ref refid="seqread_8c_1aad9ebcdde542d8b2075615388ff15a9c" kindref="member">line</ref>[glopts-&gt;<ref refid="structtwolame__options__struct_1a619758b697006462f7c89fc0a7330cc8" kindref="member">tablenum</ref>][min_sb]])<sp/>-<sp/>1)<sp/><sp/></highlight><highlight class="comment">//<sp/>(*alloc)[min_sb][0].bits)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[min_ch][min_sb]<sp/>=<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>let<sp/>this<sp/>sb<sp/>get<sp/>any<sp/>more<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[min_ch][min_sb]<sp/>=<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>increase<sp/>this<sp/>alloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_sb<sp/>&gt;=<sp/>jsbound<sp/>&amp;&amp;<sp/>nch<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>above<sp/>jsbound,<sp/>alloc<sp/>applies<sp/>L+R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba<sp/>=<sp/>bit_alloc[oth_ch][min_sb]<sp/>=<sp/>bit_alloc[min_ch][min_sb];</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[oth_ch][min_sb]<sp/>=<sp/>used[min_ch][min_sb];</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisstep_index<sp/>=<sp/>step_index[thisline][ba];</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnr[oth_ch][min_sb]<sp/>=<sp/>SNR[thisstep_index]<sp/>-<sp/>SMR[oth_ch][min_sb];</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mnr[oth_ch][min_sb]<sp/>=<sp/>SNR[(*alloc)[min_sb][ba].quant<sp/>+<sp/>1]<sp/>-<sp/>SMR[oth_ch][min_sb];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(min_sb<sp/>&gt;<sp/>-1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>until<sp/>could<sp/>find<sp/>no<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>ad<sp/>-=<sp/>bspl<sp/>+<sp/>bscf<sp/>+<sp/>bsel;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>*adb<sp/>=<sp/>ad;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nch;<sp/>ch++)</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>sblimit;<sp/>sb<sp/>&lt;<sp/><ref refid="twolame_2libtwolame_2common_8h_1aae2d5a401c55c6b2b834c99340911fdb" kindref="member">SBLIMIT</ref>;<sp/>sb++)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_alloc[ch][sb]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vim:ts=4:sw=4:nowrap:<sp/></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/twolame/libtwolame/encode.c"/>
  </compounddef>
</doxygen>
