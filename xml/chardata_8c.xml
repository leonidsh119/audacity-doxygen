<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="chardata_8c" kind="file" language="C++">
    <compoundname>chardata.c</compoundname>
    <includes refid="minicheck_8h" local="yes">minicheck.h</includes>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="chardata_8h" local="yes">chardata.h</includes>
    <incdepgraph>
      <node id="2776">
        <label>expat.h</label>
      </node>
      <node id="2772">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="2774">
        <label>string.h</label>
      </node>
      <node id="2770">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c</label>
        <link refid="chardata.c"/>
        <childnode refid="2771" relation="include">
        </childnode>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2773" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2775" relation="include">
        </childnode>
      </node>
      <node id="2775">
        <label>chardata.h</label>
        <link refid="chardata_8h"/>
        <childnode refid="2776" relation="include">
        </childnode>
      </node>
      <node id="2771">
        <label>minicheck.h</label>
        <link refid="minicheck_8h"/>
      </node>
      <node id="2773">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="chardata_8c_1ab0cfa741e7e90f7a920dab66340d4e59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int xmlstrlen</definition>
        <argsstring>(const XML_Char *s)</argsstring>
        <name>xmlstrlen</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" line="24" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="chardata_8c_1a19b0fb4d5fe87805342684de92b05c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void CharData_Init</definition>
        <argsstring>(CharData *storage)</argsstring>
        <name>CharData_Init</name>
        <param>
          <type><ref refid="struct_char_data" kindref="compound">CharData</ref> *</type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" line="35" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="chardata_8c_1a151f952316a589523108bc352c1be23c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void CharData_AppendString</definition>
        <argsstring>(CharData *storage, const char *s)</argsstring>
        <name>CharData_AppendString</name>
        <param>
          <type><ref refid="struct_char_data" kindref="compound">CharData</ref> *</type>
          <declname>storage</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" line="42" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" bodystart="42" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="chardata_8c_1a94477dc1a3bd0e1db29fd06ac9afb561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void CharData_AppendXMLChars</definition>
        <argsstring>(CharData *storage, const XML_Char *s, int len)</argsstring>
        <name>CharData_AppendXMLChars</name>
        <param>
          <type><ref refid="struct_char_data" kindref="compound">CharData</ref> *</type>
          <declname>storage</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" line="61" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" bodystart="61" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="chardata_8c_1ae1fc0ce353ca787883c4a8e9ce1b9822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int CharData_CheckString</definition>
        <argsstring>(CharData *storage, const char *expected)</argsstring>
        <name>CharData_CheckString</name>
        <param>
          <type><ref refid="struct_char_data" kindref="compound">CharData</ref> *</type>
          <declname>storage</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" line="83" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" bodystart="83" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="chardata_8c_1a4341d401f765f9629696d218c0b85eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int CharData_CheckXMLChars</definition>
        <argsstring>(CharData *storage, const XML_Char *expected)</argsstring>
        <name>CharData_CheckXMLChars</name>
        <param>
          <type><ref refid="struct_char_data" kindref="compound">CharData</ref> *</type>
          <declname>storage</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref> *</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" line="112" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c" bodystart="112" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>1998-2003<sp/>Thai<sp/>Open<sp/>Source<sp/>Software<sp/>Center<sp/>Ltd</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>See<sp/>the<sp/>file<sp/>COPYING<sp/>for<sp/>copying<sp/>permission.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>chardata.c</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_EXPAT_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;expat_config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CHECK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;check.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="minicheck_8h" kindref="compound">minicheck.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="chardata_8h" kindref="compound">chardata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">xmlstrlen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(s<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s[len]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="chardata_8h_1a19b0fb4d5fe87805342684de92b05c50" refkind="member"><highlight class="normal"><ref refid="chardata_8c_1a19b0fb4d5fe87805342684de92b05c50" kindref="member">CharData_Init</ref>(<ref refid="struct_char_data" kindref="compound">CharData</ref><sp/>*storage)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(storage<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="chardata_8h_1a151f952316a589523108bc352c1be23c" refkind="member"><highlight class="normal"><ref refid="chardata_8c_1a151f952316a589523108bc352c1be23c" kindref="member">CharData_AppendString</ref>(<ref refid="struct_char_data" kindref="compound">CharData</ref><sp/>*storage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxchars<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>[0]);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(s<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>+<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>)<sp/>&gt;<sp/>maxchars)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(maxchars<sp/>-<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>+<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>))<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref><sp/>+<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>,<sp/>s,<sp/>len);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>+=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="chardata_8h_1a94477dc1a3bd0e1db29fd06ac9afb561" refkind="member"><highlight class="normal"><ref refid="chardata_8c_1a94477dc1a3bd0e1db29fd06ac9afb561" kindref="member">CharData_AppendXMLChars</ref>(<ref refid="struct_char_data" kindref="compound">CharData</ref><sp/>*storage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxchars;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(storage<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(s<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>maxchars<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>[0]);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>xmlstrlen(s);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>+<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>)<sp/>&gt;<sp/>maxchars)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(maxchars<sp/>-<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>+<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>))<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref><sp/>+<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>,<sp/>s,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>[0]));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>+=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="chardata_8h_1a6034c181cfd7a1ceba3f3d1150fec79a" refkind="member"><highlight class="normal"><ref refid="chardata_8c_1ae1fc0ce353ca787883c4a8e9ce1b9822" kindref="member">CharData_CheckString</ref>(<ref refid="struct_char_data" kindref="compound">CharData</ref><sp/>*storage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expected)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[1280];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(storage<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(expected<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>(storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>&lt;<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(expected);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>!=<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref>)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>number<sp/>of<sp/>data<sp/>characters:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>got<sp/>%d,<sp/>expected<sp/>%d:\n%s&quot;</highlight><highlight class="normal">,<sp/>count,<sp/>len,<sp/>storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>number<sp/>of<sp/>data<sp/>characters:<sp/>got<sp/>%d,<sp/>expected<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,<sp/>len);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1a05ec25e11ffdcaea9c4627c906388dd1" kindref="member">fail</ref>(buffer);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(expected,<sp/>storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>,<sp/>len)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1a05ec25e11ffdcaea9c4627c906388dd1" kindref="member">fail</ref>(</highlight><highlight class="stringliteral">&quot;got<sp/>bad<sp/>data<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="chardata_8h_1a5cdae5a32db787355d8bbcc565551e50" refkind="member"><highlight class="normal"><ref refid="chardata_8c_1a4341d401f765f9629696d218c0b85eef" kindref="member">CharData_CheckXMLChars</ref>(<ref refid="struct_char_data" kindref="compound">CharData</ref><sp/>*storage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="amiga_2include_2libraries_2expat_8h_1a63da96463e775e1ec3a7d1f076208127" kindref="member">XML_Char</ref><sp/>*expected)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[1024];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>xmlstrlen(expected);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(storage<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>(storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref><sp/>&lt;<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>storage-&gt;<ref refid="struct_char_data_1a33c82202839221aab1e56ceef96e17b3" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref><sp/>(len<sp/>!=<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>number<sp/>of<sp/>data<sp/>characters:<sp/>got<sp/>%d,<sp/>expected<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,<sp/>len);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1a05ec25e11ffdcaea9c4627c906388dd1" kindref="member">fail</ref>(buffer);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(expected,<sp/>storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>,<sp/>len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(storage-&gt;<ref refid="struct_char_data_1a37aff9bb49286929713649ead0ce31ee" kindref="member">data</ref>[0]))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="minicheck_8h_1a05ec25e11ffdcaea9c4627c906388dd1" kindref="member">fail</ref>(</highlight><highlight class="stringliteral">&quot;got<sp/>bad<sp/>data<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/expat/tests/chardata.c"/>
  </compounddef>
</doxygen>
