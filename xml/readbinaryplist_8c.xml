<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="readbinaryplist_8c" kind="file" language="C++">
    <compoundname>readbinaryplist.c</compoundname>
    <includes refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h" local="no">sys/types.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes refid="readbinaryplist_8h" local="yes">readbinaryplist.h</includes>
    <includes local="no">Carbon/Carbon.h</includes>
    <incdepgraph>
      <node id="31007">
        <label>sys/stat.h</label>
      </node>
      <node id="31000">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="31001" relation="include">
        </childnode>
        <childnode refid="31002" relation="include">
        </childnode>
        <childnode refid="31003" relation="include">
        </childnode>
      </node>
      <node id="31009">
        <label>stdint.h</label>
      </node>
      <node id="31004">
        <label>stdlib.h</label>
      </node>
      <node id="31005">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="31002">
        <label>alloca.h</label>
      </node>
      <node id="31010">
        <label>Carbon/Carbon.h</label>
      </node>
      <node id="31001">
        <label>MacTypes.h</label>
      </node>
      <node id="31003">
        <label>string.h</label>
      </node>
      <node id="30999">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c</label>
        <link refid="readbinaryplist.c"/>
        <childnode refid="31000" relation="include">
        </childnode>
        <childnode refid="31004" relation="include">
        </childnode>
        <childnode refid="31003" relation="include">
        </childnode>
        <childnode refid="31005" relation="include">
        </childnode>
        <childnode refid="31006" relation="include">
        </childnode>
        <childnode refid="31007" relation="include">
        </childnode>
        <childnode refid="31008" relation="include">
        </childnode>
        <childnode refid="31010" relation="include">
        </childnode>
      </node>
      <node id="31008">
        <label>readbinaryplist.h</label>
        <link refid="readbinaryplist_8h"/>
        <childnode refid="31009" relation="include">
        </childnode>
      </node>
      <node id="31006">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcache__struct" prot="public">cache_struct</innerclass>
    <innerclass refid="structbplist__info" prot="public">bplist_info</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" prot="public" static="no">
        <name>NO</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="83" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1a7ebc9a785e5ab85457c98595aac81589" prot="public" static="no">
        <name>YES</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="84" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1ae4cc35dcc70810fa972cc8a5185a28fa" prot="public" static="no">
        <name>BOOL</name>
        <initializer><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="85" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1addfa831c1473e710d2b71b72fd7fcfa5" prot="public" static="no">
        <name>MAXPATHLEN</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="87" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" prot="public" static="no">
        <name>bplist_log</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="111" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1acd035d1bbdd0b7a3620eda921ec00592" prot="public" static="no">
        <name>bplist_log_verbose</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="117" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1ad51ded0bbd705f02f73fc60c0b721ced" prot="public" static="no">
        <name>BLOCK_SIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="122" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="readbinaryplist_8c_1a450f9d8af07bfe2f313dbe3a78738a5e" prot="public" static="no">
        <name>ALIGNMENT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="125" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1" prot="public" static="no">
        <name>@218</name>
        <enumvalue id="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" prot="public">
          <name>kHEADER_SIZE</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a421a7283c7db47af2849eaba014e6d8c" prot="public">
          <name>kTRAILER_SIZE</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a4162c70342ce7836fc3ce8d4a9d9c534" prot="public">
          <name>kMINIMUM_SANE_SIZE</name>
          <initializer>= kHEADER_SIZE + kTRAILER_SIZE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="177" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="176" bodyend="181"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="readbinaryplist_8c_1a2723ab423c12d773b250f832d1936eac" prot="public" static="no">
        <type>struct <ref refid="structcache__struct" kindref="compound">cache_struct</ref></type>
        <definition>typedef struct cache_struct  cache_node</definition>
        <argsstring></argsstring>
        <name>cache_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="191" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="readbinaryplist_8c_1a118d960e0af4274adcfc634c34d24d2d" prot="public" static="no">
        <type>struct <ref refid="structcache__struct" kindref="compound">cache_struct</ref> *</type>
        <definition>typedef struct cache_struct * cache_ptr</definition>
        <argsstring></argsstring>
        <name>cache_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="191" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="readbinaryplist_8c_1a6a3fa0e13d4065297ef491fe4ab7c7bf" prot="public" static="no">
        <type>struct <ref refid="structbplist__info" kindref="compound">bplist_info</ref></type>
        <definition>typedef struct bplist_info  bplist_info_node</definition>
        <argsstring></argsstring>
        <name>bplist_info_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="203" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" prot="public" static="no">
        <type>struct <ref refid="structbplist__info" kindref="compound">bplist_info</ref> *</type>
        <definition>typedef struct bplist_info * bplist_info_ptr</definition>
        <argsstring></argsstring>
        <name>bplist_info_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="203" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="readbinaryplist_8c_1a0a7e13de9f3aac799fc6362351ed0a2f" prot="public" static="yes" mutable="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* block_list</definition>
        <argsstring></argsstring>
        <name>block_list</name>
        <initializer>= <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="126" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a08d4b77c82f5b40af0ebae93e9df26af" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* free_ptr</definition>
        <argsstring></argsstring>
        <name>free_ptr</name>
        <initializer>= <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="127" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a457b8822b7ca8ef5e95df2b954fde537" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* end_ptr</definition>
        <argsstring></argsstring>
        <name>end_ptr</name>
        <initializer>= <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="128" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1ae00ec1e27b11194dcd19e2790f1df4d6" prot="public" static="yes" mutable="no">
        <type>jmp_buf</type>
        <definition>jmp_buf abort_parsing</definition>
        <argsstring></argsstring>
        <name>abort_parsing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="129" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1ac2526088cc875a1de33b43278b32f07d" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref></type>
        <definition>uint8_t unused[6]</definition>
        <argsstring>[6]</argsstring>
        <name>unused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="168" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a9abfca0d363002b96bbb26ccdda8eb88" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref></type>
        <definition>uint8_t offset_int_size</definition>
        <argsstring></argsstring>
        <name>offset_int_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="169" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a63ff3dbbf211d1c5a4793f9207e828aa" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref></type>
        <definition>uint8_t object_ref_size</definition>
        <argsstring></argsstring>
        <name>object_ref_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="170" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1ad4d0c3fccc0f62591f30b4938cadc901" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>uint64_t object_count</definition>
        <argsstring></argsstring>
        <name>object_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a9b04c954b8c1424e3e74119c93fff041" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>uint64_t top_level_object</definition>
        <argsstring></argsstring>
        <name>top_level_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="172" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a338475f2a231be29647fac7ba506a206" prot="public" static="no" mutable="no">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>uint64_t offset_table_offset</definition>
        <argsstring></argsstring>
        <name>offset_table_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="173" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="readbinaryplist_8c_1a72eae7702f6ddf24a292450779275d25" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char</type>
        <definition>const char kHEADER_BYTES[kHEADER_SIZE]</definition>
        <argsstring>[kHEADER_SIZE]</argsstring>
        <name>kHEADER_BYTES</name>
        <initializer>= &quot;bplist00&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="184" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="readbinaryplist_8c_1af14a9691dc9a7183854097ac113c3d9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>static void* allocate</definition>
        <argsstring>(size_t size)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="131" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="131" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1aed3531fede3edc5b984b195fe4cea6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void bplist_free_data</definition>
        <argsstring>()</argsstring>
        <name>bplist_free_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="156" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="156" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a7e811f8e37df82e78857c6bd3f56d34a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr bplist_read_pldata</definition>
        <argsstring>(pldata_ptr data)</argsstring>
        <name>bplist_read_pldata</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a97710d8098e0a0a309a1d3910a57f395" kindref="member">pldata_ptr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="206" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="429" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a1931177a391226ee0784c3e609661107" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr bplist_read_pref</definition>
        <argsstring>(char *filename, OSType folder_type)</argsstring>
        <name>bplist_read_pref</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>OSType</type>
          <declname>folder_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="207" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="381" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ae4cf9c5ab46532939ce94a5e94018e57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t read_sized_int</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset, uint8_t size)</argsstring>
        <name>read_sized_int</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="208" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="571" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a17fb5f51faf62c15d974056b8e3dd687" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t read_offset</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t index)</argsstring>
        <name>read_offset</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="209" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="589" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1af82524576861942c94877bb201ffdff1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref></type>
        <definition>static BOOL read_self_sized_int</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset, uint64_t *outValue, size_t *outSize)</argsstring>
        <name>read_self_sized_int</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref> *</type>
          <declname>outValue</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="210" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="599" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a9bd4c8d75bb20c300948c0632d79b467" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_object</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t objectRef)</argsstring>
        <name>extract_object</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>objectRef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="212" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="492" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1acc64c13cd2e91a52a370ff72d7363211" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_simple</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_simple</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="213" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="627" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a07a3313cba81caf1b4149285db136e77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_int</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_int</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="214" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="653" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ae5de6115062f7824d695f113303bda45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_real</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_real</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="215" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="670" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a551e71c30384ba2ecc2f25f75578d9a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_date</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_date</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="216" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="710" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a42e61959ec8d3c45b5d1681633c2f776" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_data</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_data</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="217" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="772" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ab6553e4b57e5184d9d9a01a3b54b36fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_ascii_string</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_ascii_string</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="218" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="789" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a875bfbb0c821ac62dd87c78e4014127f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_unicode_string</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_unicode_string</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="219" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="808" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1aa3b586f69ddd280f65f63c934b557d64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_uid</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_uid</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="827" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ae1a968a23a3555bfb2790cf043003247" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_array</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_array</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="221" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="864" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1aa033d2124a086e5506eaf194c95b5ad6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>static value_ptr extract_dictionary</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t offset)</argsstring>
        <name>extract_dictionary</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="222" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="926" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr value_create</definition>
        <argsstring>()</argsstring>
        <name>value_create</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="225" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1af3df25e8fa3beccb3043908bc0a8d5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_integer</definition>
        <argsstring>(value_ptr v, int64_t i)</argsstring>
        <name>value_set_integer</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="232" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a652660f52999563b97e8ece2be01bb46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_real</definition>
        <argsstring>(value_ptr v, double d)</argsstring>
        <name>value_set_real</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="236" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1aa888240e1e4e6a03de06a844ed8142b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_date</definition>
        <argsstring>(value_ptr v, double d)</argsstring>
        <name>value_set_date</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="241" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ae168d00bba87ef49766ac4ed7e7a23c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_ascii_string</definition>
        <argsstring>(value_ptr v, const uint8_t *s, size_t len)</argsstring>
        <name>value_set_ascii_string</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="245" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="245" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a7bc2cc3d31af7b32e40d51bfbaf3a729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_unicode_string</definition>
        <argsstring>(value_ptr v, const uint8_t *s, size_t len)</argsstring>
        <name>value_set_unicode_string</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="252" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a1fbe518612410e50224ddb46bc08d3f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_uid</definition>
        <argsstring>(value_ptr v, uint64_t uid)</argsstring>
        <name>value_set_uid</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>uid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="259" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a9532c9abd27cda2e5d909c4ea0f8b920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_data</definition>
        <argsstring>(value_ptr v, const uint8_t *data, size_t len)</argsstring>
        <name>value_set_data</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="266" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="266" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a181f26bf05a9323f9c2375bcb01088c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_array</definition>
        <argsstring>(value_ptr v, value_ptr *array, size_t length)</argsstring>
        <name>value_set_array</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="277" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="277" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ad6dc2f7102838f10874a8c047b20760e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void value_set_dict</definition>
        <argsstring>(value_ptr v, dict_ptr dict)</argsstring>
        <name>value_set_dict</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="readbinaryplist_8h_1ad1010ef9a6a148b494f2413984d47139" kindref="member">dict_ptr</ref></type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="286" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a94caadcd7e6458492ce89ede5df614bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr cache_lookup</definition>
        <argsstring>(cache_ptr cache, uint64_t ref)</argsstring>
        <name>cache_lookup</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a118d960e0af4274adcfc634c34d24d2d" kindref="member">cache_ptr</ref></type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="293" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="293" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1af264c2d76407452bca432b7bbe2a60ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void cache_insert</definition>
        <argsstring>(cache_ptr *cache, uint64_t ref, value_ptr value)</argsstring>
        <name>cache_insert</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a118d960e0af4274adcfc634c34d24d2d" kindref="member">cache_ptr</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="306" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a036e0836dd80085a3133e03893d8408d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void dict_insert</definition>
        <argsstring>(dict_ptr *dict, value_ptr key, value_ptr value)</argsstring>
        <name>dict_insert</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1ad1010ef9a6a148b494f2413984d47139" kindref="member">dict_ptr</ref> *</type>
          <declname>dict</declname>
        </param>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="317" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="317" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a67c766b1021066b3bcef9cad4c7a5a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref></type>
        <definition>BOOL is_binary_plist</definition>
        <argsstring>(pldata_ptr data)</argsstring>
        <name>is_binary_plist</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a97710d8098e0a0a309a1d3910a57f395" kindref="member">pldata_ptr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="327" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="327" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1aec38f443859d4e0adee3f11a25ad0e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr bplist_read_file</definition>
        <argsstring>(char *filename)</argsstring>
        <name>bplist_read_file</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="334" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="334" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a5bb4f87ea294c6a75759ff806c997164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr bplist_read_system_pref</definition>
        <argsstring>(char *filename)</argsstring>
        <name>bplist_read_system_pref</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="403" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="403" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a0c8f45d47a6fc01d2234d4b4f5c38647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr bplist_read_user_pref</definition>
        <argsstring>(char *filename)</argsstring>
        <name>bplist_read_user_pref</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="408" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1ae8492ec8b132c9d972772ff612b5f9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>uint64_t convert_uint64</definition>
        <argsstring>(uint8_t *ptr)</argsstring>
        <name>convert_uint64</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="416" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="416" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
        <definition>uint64_t bplist_get_a_size</definition>
        <argsstring>(bplist_info_ptr bplist, uint64_t *offset_ptr, char *msg)</argsstring>
        <name>bplist_get_a_size</name>
        <param>
          <type><ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref></type>
          <declname>bplist</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref> *</type>
          <declname>offset_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="738" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="738" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a2369ceec4d1c269818b572726aa9e101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* value_get_asciistring</definition>
        <argsstring>(value_ptr v)</argsstring>
        <name>value_get_asciistring</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="995" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="995" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a6bcd94997d444d72618ef5954e4e7253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr value_dict_lookup_using_string</definition>
        <argsstring>(value_ptr v, char *key)</argsstring>
        <name>value_dict_lookup_using_string</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="1002" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="1002" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a7e864a16ab7c98b962a88a968bc5ce72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
        <definition>value_ptr value_dict_lookup_using_path</definition>
        <argsstring>(value_ptr v, char *path)</argsstring>
        <name>value_dict_lookup_using_path</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="1018" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="1018" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="readbinaryplist_8c_1a13c17a7f23b738ea0c2a07b1b251c00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void plist_print</definition>
        <argsstring>(value_ptr v)</argsstring>
        <name>plist_print</name>
        <param>
          <type><ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" line="1046" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c" bodystart="1046" bodyend="1113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">readbinaryplist.c<sp/>--<sp/>Roger<sp/>B.<sp/>Dannenberg,<sp/>Jun<sp/>2008</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Based<sp/>on<sp/>ReadBinaryPList.m<sp/>by<sp/>Jens<sp/>Ayton,<sp/>2007</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Note<sp/>that<sp/>this<sp/>code<sp/>is<sp/>intended<sp/>to<sp/>read<sp/>preference<sp/>files<sp/>and<sp/>has<sp/>an<sp/>upper</highlight></codeline>
<codeline lineno="7"><highlight class="comment">bound<sp/>on<sp/>file<sp/>size<sp/>(currently<sp/>100MB)<sp/>and<sp/>assumes<sp/>in<sp/>some<sp/>places<sp/>that<sp/>32<sp/>bit</highlight></codeline>
<codeline lineno="8"><highlight class="comment">offsets<sp/>are<sp/>sufficient.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">Here<sp/>are<sp/>his<sp/>comments:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">Reader<sp/>for<sp/>binary<sp/>property<sp/>list<sp/>files<sp/>(version<sp/>00).</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">This<sp/>has<sp/>been<sp/>found<sp/>to<sp/>work<sp/>on<sp/>all<sp/>566<sp/>binary<sp/>plists<sp/>in<sp/>my<sp/>~/Library/Preferences/</highlight></codeline>
<codeline lineno="15"><highlight class="comment">and<sp/>/Library/Preferences/<sp/>directories.<sp/>This<sp/>probably<sp/>does<sp/>not<sp/>provide<sp/>full</highlight></codeline>
<codeline lineno="16"><highlight class="comment">test<sp/>coverage.<sp/>It<sp/>has<sp/>also<sp/>been<sp/>found<sp/>to<sp/>provide<sp/>different<sp/>data<sp/>to<sp/>Apple&apos;s</highlight></codeline>
<codeline lineno="17"><highlight class="comment">implementation<sp/>when<sp/>presented<sp/>with<sp/>a<sp/>key-value<sp/>archive.<sp/>This<sp/>is<sp/>because<sp/>Apple&apos;s</highlight></codeline>
<codeline lineno="18"><highlight class="comment">implementation<sp/>produces<sp/>undocumented<sp/>CFKeyArchiverUID<sp/>objects.<sp/>My<sp/>implementation</highlight></codeline>
<codeline lineno="19"><highlight class="comment">produces<sp/>dictionaries<sp/>instead,<sp/>matching<sp/>the<sp/>in-file<sp/>representation<sp/>used<sp/>in<sp/>XML</highlight></codeline>
<codeline lineno="20"><highlight class="comment">and<sp/>OpenStep<sp/>plists.<sp/>See<sp/>extract_uid().</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">Full<sp/>disclosure:<sp/>in<sp/>implementing<sp/>this<sp/>software,<sp/>I<sp/>read<sp/>one<sp/>comment<sp/>and<sp/>one</highlight></codeline>
<codeline lineno="23"><highlight class="comment">struct<sp/>defintion<sp/>in<sp/>CFLite,<sp/>Apple&apos;s<sp/>implementation,<sp/>which<sp/>is<sp/>under<sp/>the<sp/>APSL</highlight></codeline>
<codeline lineno="24"><highlight class="comment">license.<sp/>I<sp/>also<sp/>deduced<sp/>the<sp/>information<sp/>about<sp/>CFKeyArchiverUID<sp/>from<sp/>that<sp/>code.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">However,<sp/>none<sp/>of<sp/>the<sp/>implementation<sp/>was<sp/>copied.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">Copyright<sp/>(C)<sp/>2007<sp/>Jens<sp/>Ayton</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="30"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="31"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="32"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="33"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="34"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="37"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="40"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="41"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="42"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="44"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="45"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>note<sp/>about<sp/>memory<sp/>management:</highlight></codeline>
<codeline lineno="50"><highlight class="comment">Strings<sp/>and<sp/>possibly<sp/>other<sp/>values<sp/>are<sp/>unique<sp/>and<sp/>because<sp/>the<sp/>values</highlight></codeline>
<codeline lineno="51"><highlight class="comment">associated<sp/>with<sp/>IDs<sp/>are<sp/>cached,<sp/>you<sp/>end<sp/>up<sp/>with<sp/>a<sp/>directed<sp/>graph<sp/>rather</highlight></codeline>
<codeline lineno="52"><highlight class="comment">than<sp/>a<sp/>tree.<sp/>It<sp/>is<sp/>tricky<sp/>to<sp/>free<sp/>the<sp/>data<sp/>because<sp/>if<sp/>you<sp/>do<sp/>a<sp/>simple</highlight></codeline>
<codeline lineno="53"><highlight class="comment">depth-first<sp/>search<sp/>to<sp/>free<sp/>nodes,<sp/>you<sp/>will<sp/>free<sp/>nodes<sp/>twice.<sp/>I<sp/>decided</highlight></codeline>
<codeline lineno="54"><highlight class="comment">to<sp/>allocate<sp/>memory<sp/>from<sp/>blocks<sp/>of<sp/>1024<sp/>bytes<sp/>and<sp/>keep<sp/>the<sp/>blocks<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="55"><highlight class="comment">list<sp/>associated<sp/>with<sp/>but<sp/>private<sp/>to<sp/>this<sp/>module.<sp/>So<sp/>the<sp/>user<sp/>should</highlight></codeline>
<codeline lineno="56"><highlight class="comment">access<sp/>this<sp/>module<sp/>by<sp/>calling:</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>bplist_read_file()<sp/>or<sp/>bplist_read_user_pref()<sp/>or<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>bplist_read_system_pref()</highlight></codeline>
<codeline lineno="59"><highlight class="comment">which<sp/>returns<sp/>a<sp/>value.<sp/>When<sp/>you<sp/>are<sp/>done<sp/>with<sp/>the<sp/>value,<sp/>call</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>bplist_free_data()</highlight></codeline>
<codeline lineno="61"><highlight class="comment">This<sp/>will<sp/>of<sp/>course<sp/>free<sp/>the<sp/>value_ptr<sp/>returned<sp/>by<sp/>bplist_read_*()</highlight></codeline>
<codeline lineno="62"><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment">To<sp/>deal<sp/>with<sp/>memory<sp/>exhaustion<sp/>(what<sp/>happens<sp/>when<sp/>malloc<sp/>returns</highlight></codeline>
<codeline lineno="64"><highlight class="comment">NULL?),<sp/>use<sp/>setjmp/longjmp<sp/>--<sp/>a<sp/>single<sp/>setjmp<sp/>protects<sp/>the<sp/>whole</highlight></codeline>
<codeline lineno="65"><highlight class="comment">parser,<sp/>and<sp/>allocate<sp/>uses<sp/>longjmp<sp/>to<sp/>abort.<sp/>After<sp/>abort,<sp/>memory</highlight></codeline>
<codeline lineno="66"><highlight class="comment">is<sp/>freed<sp/>and<sp/>NULL<sp/>is<sp/>returned<sp/>to<sp/>caller.<sp/>There<sp/>is<sp/>not<sp/>much<sp/>here</highlight></codeline>
<codeline lineno="67"><highlight class="comment">in<sp/>the<sp/>way<sp/>of<sp/>error<sp/>reporting.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">Memory<sp/>is<sp/>obtained<sp/>by<sp/>calling<sp/>allocate<sp/>which<sp/>either<sp/>returns<sp/>the</highlight></codeline>
<codeline lineno="70"><highlight class="comment">memory<sp/>requested<sp/>or<sp/>calls<sp/>longjmp,<sp/>so<sp/>callers<sp/>don&apos;t<sp/>have<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="readbinaryplist_8h" kindref="compound">readbinaryplist.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Carbon/Carbon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="readbinaryplist_8c_1a7ebc9a785e5ab85457c98595aac81589" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>YES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="readbinaryplist_8c_1ae4cc35dcc70810fa972cc8a5185a28fa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOL<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="readbinaryplist_8c_1addfa831c1473e710d2b71b72fd7fcfa5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXPATHLEN<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>there<sp/>are<sp/>2<sp/>levels<sp/>of<sp/>error<sp/>logging/printing:</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/>BPLIST_LOG<sp/>and<sp/>BPLIST_LOG_VERBOSE</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>either<sp/>or<sp/>both<sp/>can<sp/>be<sp/>set<sp/>to<sp/>non-zero<sp/>to<sp/>turn<sp/>on</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>If<sp/>BPLIST_LOG_VERBOSE<sp/>is<sp/>true,<sp/>then<sp/>BPLIST_LOG<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>is<sp/>also<sp/>true.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>In<sp/>the<sp/>code,<sp/>logging<sp/>is<sp/>done<sp/>by<sp/>calling<sp/>either</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>bplist_log()<sp/>or<sp/>bplist_log_verbose(),<sp/>which<sp/>take</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>parameters<sp/>like<sp/>printf<sp/>but<sp/>might<sp/>be<sp/>a<sp/>no-op.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>BPLIST_LOG_VERBOSE<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BPLIST_LOG_VERBOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>BPLIST_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>BPLIST_LOG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BPLIST_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>bplist_log<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>bplist_log(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BPLIST_LOG_VERBOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>bplist_log_verbose<sp/>bplist_log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="readbinaryplist_8c_1acd035d1bbdd0b7a3620eda921ec00592" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>bplist_log_verbose(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*********<sp/>MEMORY<sp/>MANAGEMENT<sp/>********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="readbinaryplist_8c_1ad51ded0bbd705f02f73fc60c0b721ced" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLOCK_SIZE<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>is<sp/>aligned<sp/>to<sp/>multiples<sp/>of<sp/>this;<sp/>assume<sp/>malloc<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>aligns<sp/>to<sp/>this<sp/>number<sp/>and<sp/>assume<sp/>this<sp/>number<sp/>is<sp/>&gt;<sp/>sizeof(void<sp/>*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="readbinaryplist_8c_1a450f9d8af07bfe2f313dbe3a78738a5e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGNMENT<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block_list<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*free_ptr<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_ptr<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>jmp_buf<sp/>abort_parsing;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocate(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_ptr<sp/>+<sp/>size<sp/>&gt;<sp/>end_ptr)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>how_much<sp/>=<sp/><ref refid="readbinaryplist_8c_1ad51ded0bbd705f02f73fc60c0b721ced" kindref="member">BLOCK_SIZE</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>align<sp/>everything<sp/>to<sp/>8<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/><ref refid="readbinaryplist_8c_1ad51ded0bbd705f02f73fc60c0b721ced" kindref="member">BLOCK_SIZE</ref><sp/>-<sp/><ref refid="readbinaryplist_8c_1a450f9d8af07bfe2f313dbe3a78738a5e" kindref="member">ALIGNMENT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how_much<sp/>=<sp/>size<sp/>+<sp/><ref refid="readbinaryplist_8c_1a450f9d8af07bfe2f313dbe3a78738a5e" kindref="member">ALIGNMENT</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>malloc(how_much);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>serious<sp/>problem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longjmp(abort_parsing,<sp/>1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)result)<sp/>=<sp/>block_list;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_list<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_ptr<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>result)<sp/>+<sp/><ref refid="readbinaryplist_8c_1a450f9d8af07bfe2f313dbe3a78738a5e" kindref="member">ALIGNMENT</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_ptr<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>result)<sp/>+<sp/>how_much;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>there<sp/>is<sp/>enough<sp/>rooom<sp/>at<sp/>free_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>free_ptr;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>free_ptr<sp/>+=<sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="readbinaryplist_8h_1aed3531fede3edc5b984b195fe4cea6ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1aed3531fede3edc5b984b195fe4cea6ae" kindref="member">bplist_free_data</ref>()</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(block_list)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref><sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)block_list;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(block_list);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_list<sp/>=<sp/><ref refid="record_8c_1a9b790a854eb0e06cd42c8d28a30db97d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>free_ptr<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>end_ptr<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>layout<sp/>of<sp/>trailer<sp/>--<sp/>last<sp/>32<sp/>bytes<sp/>in<sp/>plist<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="readbinaryplist_8c_1ac2526088cc875a1de33b43278b32f07d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="readbinaryplist_8c_1ac2526088cc875a1de33b43278b32f07d" kindref="member">unused</ref>[6];</highlight></codeline>
<codeline lineno="169" refid="readbinaryplist_8c_1a9abfca0d363002b96bbb26ccdda8eb88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="readbinaryplist_8c_1a9abfca0d363002b96bbb26ccdda8eb88" kindref="member">offset_int_size</ref>;</highlight></codeline>
<codeline lineno="170" refid="readbinaryplist_8c_1a63ff3dbbf211d1c5a4793f9207e828aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="readbinaryplist_8c_1a63ff3dbbf211d1c5a4793f9207e828aa" kindref="member">object_ref_size</ref>;</highlight></codeline>
<codeline lineno="171" refid="readbinaryplist_8c_1ad4d0c3fccc0f62591f30b4938cadc901" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="readbinaryplist_8c_1ad4d0c3fccc0f62591f30b4938cadc901" kindref="member">object_count</ref>;</highlight></codeline>
<codeline lineno="172" refid="readbinaryplist_8c_1a9b04c954b8c1424e3e74119c93fff041" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="readbinaryplist_8c_1a9b04c954b8c1424e3e74119c93fff041" kindref="member">top_level_object</ref>;</highlight></codeline>
<codeline lineno="173" refid="readbinaryplist_8c_1a338475f2a231be29647fac7ba506a206" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="readbinaryplist_8c_1a338475f2a231be29647fac7ba506a206" kindref="member">offset_table_offset</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178" refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" kindref="member">kHEADER_SIZE</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="179" refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a421a7283c7db47af2849eaba014e6d8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a421a7283c7db47af2849eaba014e6d8c" kindref="member">kTRAILER_SIZE</ref><sp/>=<sp/>32,<sp/></highlight><highlight class="comment">//sizeof(bplist_trailer_node),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a4162c70342ce7836fc3ce8d4a9d9c534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a4162c70342ce7836fc3ce8d4a9d9c534" kindref="member">kMINIMUM_SANE_SIZE</ref><sp/>=<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" kindref="member">kHEADER_SIZE</ref><sp/>+<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a421a7283c7db47af2849eaba014e6d8c" kindref="member">kTRAILER_SIZE</ref></highlight></codeline>
<codeline lineno="181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kHEADER_BYTES[<ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" kindref="member">kHEADER_SIZE</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bplist00&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>map<sp/>from<sp/>UID<sp/>key<sp/>to<sp/>previously<sp/>parsed<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="structcache__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcache__struct" kindref="compound">cache_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="188" refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="189" refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="190" refid="structcache__struct_1a83ba7f55c16385762f41cb542f461dda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcache__struct" kindref="compound">cache_struct</ref><sp/>*<ref refid="structcache__struct_1a83ba7f55c16385762f41cb542f461dda" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}<sp/><ref refid="readbinaryplist_8c_1a2723ab423c12d773b250f832d1936eac" kindref="member">cache_node</ref>,<sp/>*<ref refid="readbinaryplist_8c_1a118d960e0af4274adcfc634c34d24d2d" kindref="member">cache_ptr</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="structbplist__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbplist__info" kindref="compound">bplist_info</ref></highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196" refid="structbplist__info_1a2664eb47360dff6639f4085a50f321c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structbplist__info_1a2664eb47360dff6639f4085a50f321c9" kindref="member">object_count</ref>;</highlight></codeline>
<codeline lineno="197" refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>;</highlight></codeline>
<codeline lineno="198" refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="199" refid="structbplist__info_1ab999b6c7a605a4b0f9ba31d8ff10dc7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structbplist__info_1ab999b6c7a605a4b0f9ba31d8ff10dc7f" kindref="member">offset_table_offset</ref>;</highlight></codeline>
<codeline lineno="200" refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref>;</highlight></codeline>
<codeline lineno="201" refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>;</highlight></codeline>
<codeline lineno="202" refid="structbplist__info_1a3ea7b1feecc7c5fa1f988e39f57c7c4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>cache_ptr<sp/><ref refid="structbplist__info_1a3ea7b1feecc7c5fa1f988e39f57c7c4a" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><ref refid="readbinaryplist_8c_1a6a3fa0e13d4065297ef491fe4ab7c7bf" kindref="member">bplist_info_node</ref>,<sp/>*<ref refid="readbinaryplist_8c_1a652fac79865d6a7e5b9292c766a9055a" kindref="member">bplist_info_ptr</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>bplist_read_pldata(<ref refid="structpldata__struct" kindref="compound">pldata_ptr</ref><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>bplist_read_pref(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/>OSType<sp/>folder_type);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>read_sized_int(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>read_offset(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>index);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref><sp/>read_self_sized_int(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>*outValue,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*outSize);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_object(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>objectRef);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_simple(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_int(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_real(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_date(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_data(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_ascii_string(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_unicode_string(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_uid(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_array(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_dictionary(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>()</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>(<ref refid="readbinaryplist_8h_1a21b1bc18d01f9cead32cfa83bb0c9501" kindref="member">value_ptr</ref>)<sp/>allocate(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structvalue__struct" kindref="compound">value_node</ref>));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="readbinaryplist_8c_1af3df25e8fa3beccb3043908bc0a8d5e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1af3df25e8fa3beccb3043908bc0a8d5e1" kindref="member">value_set_integer</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea01d77afbeb1e2b908860fa57c3af617b" kindref="member">kTAG_INT</ref>;<sp/>v-&gt;<ref refid="structvalue__struct_1a49270e9fed428e9ce09ac6188cb160eb" kindref="member">integer</ref><sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="readbinaryplist_8c_1a652660f52999563b97e8ece2be01bb46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a652660f52999563b97e8ece2be01bb46" kindref="member">value_set_real</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8e69aa96a2aa68c0d4f271c8f95952d1" kindref="member">kTAG_REAL</ref>;<sp/>v-&gt;<ref refid="structvalue__struct_1a4ab3629455d6faa852c3d935416b73b8" kindref="member">real</ref><sp/>=<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d<sp/>is<sp/>seconds<sp/>since<sp/>1<sp/>January<sp/>2001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="readbinaryplist_8c_1aa888240e1e4e6a03de06a844ed8142b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1aa888240e1e4e6a03de06a844ed8142b7" kindref="member">value_set_date</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea17982df1110730910f1da989446838d8" kindref="member">kTAG_DATE</ref>;<sp/>v-&gt;<ref refid="structvalue__struct_1a4ab3629455d6faa852c3d935416b73b8" kindref="member">real</ref><sp/>=<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="readbinaryplist_8c_1ae168d00bba87ef49766ac4ed7e7a23c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1ae168d00bba87ef49766ac4ed7e7a23c4" kindref="member">value_set_ascii_string</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea57f2f1368875c893536da664a3b55c6f" kindref="member">kTAG_ASCIISTRING</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>allocate(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>,<sp/>s,<sp/>len);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>[<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="readbinaryplist_8c_1a7bc2cc3d31af7b32e40d51bfbaf3a729" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a7bc2cc3d31af7b32e40d51bfbaf3a729" kindref="member">value_set_unicode_string</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beac1b1b60f42fc81ec615c47505955780b" kindref="member">kTAG_UNICODESTRING</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>allocate(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>,<sp/>s,<sp/>len);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>[<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="readbinaryplist_8c_1a1fbe518612410e50224ddb46bc08d3f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a1fbe518612410e50224ddb46bc08d3f8" kindref="member">value_set_uid</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>uid)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea4111e512b227ac450e3ad0edb320b5d9" kindref="member">kTAG_UID</ref>;<sp/>v-&gt;<ref refid="structvalue__struct_1a6bbecf5accb53108caa85bef52ddecca" kindref="member">uinteger</ref><sp/>=<sp/>uid;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>v-&gt;data<sp/>points<sp/>to<sp/>a<sp/>pldata<sp/>that<sp/>points<sp/>to<sp/>the<sp/>actual<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>bytes<sp/>are<sp/>copied,<sp/>so<sp/>caller<sp/>must<sp/>free<sp/>byte<sp/>source<sp/>(*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="readbinaryplist_8c_1a9532c9abd27cda2e5d909c4ea0f8b920" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a9532c9abd27cda2e5d909c4ea0f8b920" kindref="member">value_set_data</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea78dab38da81ab02075b1007acf8df49c" kindref="member">kTAG_DATA</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpldata__struct" kindref="compound">pldata_ptr</ref><sp/>pldata<sp/>=<sp/>(<ref refid="readbinaryplist_8h_1a97710d8098e0a0a309a1d3910a57f395" kindref="member">pldata_ptr</ref>)<sp/>allocate(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpldata__struct" kindref="compound">pldata_node</ref>));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>pldata-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref><sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*)<sp/>allocate(len);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(pldata-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref>,<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>pldata-&gt;<ref refid="structpldata__struct_1a4ac29c88cd0fa2e309e4b75fdbeffbc5" kindref="member">len</ref><sp/>=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a9e6e57b12fdf03e97f4c552d700f5dc2" kindref="member">data</ref><sp/>=<sp/>pldata;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;value<sp/>at<sp/>%p<sp/>gets<sp/>data<sp/>at<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>v,<sp/>pldata);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>caller<sp/>releases<sp/>ownership<sp/>of<sp/>array<sp/>to<sp/>value_ptr<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="readbinaryplist_8c_1a181f26bf05a9323f9c2375bcb01088c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a181f26bf05a9323f9c2375bcb01088c6" kindref="member">value_set_array</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarray__struct" kindref="compound">array_ptr</ref><sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref><sp/>=<sp/>(<ref refid="readbinaryplist_8h_1a187622938f42d9de7e516522aed83739" kindref="member">array_ptr</ref>)<sp/>allocate(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structarray__struct" kindref="compound">array_node</ref>));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="structarray__struct_1ab25fc397ed68afbba0080e1cfc960832" kindref="member">array</ref><sp/>=<sp/>array;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="structarray__struct_1a2cc7486bd91ad9da51edd7a4cbc46a35" kindref="member">length</ref><sp/>=<sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea2c2c8e7d49583b91afb8b38388376e5e" kindref="member">kTAG_ARRAY</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a08902e61880b9638a37f9b180face471" kindref="member">array</ref><sp/>=<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>caller<sp/>releases<sp/>ownership<sp/>of<sp/>dict<sp/>to<sp/>value_ptr<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="readbinaryplist_8c_1ad6dc2f7102838f10874a8c047b20760e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1ad6dc2f7102838f10874a8c047b20760e" kindref="member">value_set_dict</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/><ref refid="structdict__struct" kindref="compound">dict_ptr</ref><sp/>dict)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8de7d3e89c70c9a2c8666aa0c406df4e" kindref="member">kTAG_DICTIONARY</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;<ref refid="structvalue__struct_1a86b769cd843831a6abb549dba57d5004" kindref="member">dict</ref><sp/>=<sp/>dict;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>look<sp/>up<sp/>an<sp/>objectref<sp/>in<sp/>the<sp/>cache,<sp/>a<sp/>ref-&gt;value_ptr<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="readbinaryplist_8c_1a94caadcd7e6458492ce89ede5df614bf" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1a94caadcd7e6458492ce89ede5df614bf" kindref="member">cache_lookup</ref>(cache_ptr<sp/>cache,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>ref)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cache)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache-&gt;<ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref><sp/>==<sp/>ref)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cache-&gt;<ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>=<sp/>cache-&gt;<ref refid="structcache__struct_1a83ba7f55c16385762f41cb542f461dda" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>insert<sp/>an<sp/>objectref<sp/>and<sp/>value<sp/>in<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="readbinaryplist_8c_1af264c2d76407452bca432b7bbe2a60ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1af264c2d76407452bca432b7bbe2a60ee" kindref="member">cache_insert</ref>(cache_ptr<sp/>*cache,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>ref,<sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>cache_ptr<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref><sp/>=<sp/>(<ref refid="readbinaryplist_8c_1a118d960e0af4274adcfc634c34d24d2d" kindref="member">cache_ptr</ref>)<sp/>allocate(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcache__struct" kindref="compound">cache_node</ref>));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref><sp/>=<sp/>ref;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref><sp/>=<sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="structcache__struct_1a83ba7f55c16385762f41cb542f461dda" kindref="member">next</ref><sp/>=<sp/>*cache;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>*cache<sp/>=<sp/><ref refid="poly-fir_8h_1aafc737ea9ef91f59cf9acd287fb8d085" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>insert<sp/>an<sp/>objectref<sp/>and<sp/>value<sp/>in<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="readbinaryplist_8c_1a036e0836dd80085a3133e03893d8408d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a036e0836dd80085a3133e03893d8408d" kindref="member">dict_insert</ref>(<ref refid="structdict__struct" kindref="compound">dict_ptr</ref><sp/>*dict,<sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref>,<sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__struct" kindref="compound">dict_ptr</ref><sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>(<ref refid="readbinaryplist_8h_1ad1010ef9a6a148b494f2413984d47139" kindref="member">dict_ptr</ref>)<sp/>allocate(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdict__struct" kindref="compound">dict_node</ref>));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structdict__struct_1a906ac1c2d1ef832872d21a370fd889b2" kindref="member">key</ref><sp/>=<sp/><ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structdict__struct_1a8f0a429176b1c1a0eabb9e1e73d228a1" kindref="member">value</ref><sp/>=<sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structdict__struct_1adc33b2f20c741e3cde74fbdda543f69b" kindref="member">next</ref><sp/>=<sp/>*dict;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>*dict<sp/>=<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="readbinaryplist_8c_1a67c766b1021066b3bcef9cad4c7a5a47" refkind="member"><highlight class="normal"><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref><sp/><ref refid="readbinaryplist_8c_1a67c766b1021066b3bcef9cad4c7a5a47" kindref="member">is_binary_plist</ref>(<ref refid="structpldata__struct" kindref="compound">pldata_ptr</ref><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;<ref refid="structpldata__struct_1a4ac29c88cd0fa2e309e4b75fdbeffbc5" kindref="member">len</ref><sp/>&lt;<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a4162c70342ce7836fc3ce8d4a9d9c534" kindref="member">kMINIMUM_SANE_SIZE</ref>)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" kindref="member">NO</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcmp(data-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref>,<sp/>kHEADER_BYTES,<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" kindref="member">kHEADER_SIZE</ref>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="readbinaryplist_8h_1aec38f443859d4e0adee3f11a25ad0e97" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1aec38f443859d4e0adee3f11a25ad0e97" kindref="member">bplist_read_file</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>stbuf;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpldata__struct" kindref="compound">pldata_node</ref><sp/>pldata;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rslt<sp/>=<sp/>stat(filename,<sp/>&amp;stbuf);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rslt)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>BPLIST_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;in<sp/>stat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>stat<sp/>%s,<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>rslt);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>file<sp/>is<sp/>&gt;100MB,<sp/>assume<sp/>it<sp/>is<sp/>not<sp/>a<sp/>preferences<sp/>file<sp/>and<sp/>give<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbuf.st_size<sp/>&gt;<sp/>100000000)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Large<sp/>file<sp/>%s<sp/>encountered<sp/>(%llu<sp/>bytes)<sp/>--<sp/>not<sp/>read\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,<sp/>stbuf.st_size);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>pldata.len<sp/>=<sp/>(size_t)<sp/>stbuf.st_size;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>this<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>malloc,<sp/>not<sp/>allocate.<sp/>It<sp/>is<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>graph<sp/>structure,<sp/>large,<sp/>and<sp/>easy<sp/>to<sp/>free<sp/>right<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parsing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>pldata.data<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*)<sp/>malloc(pldata.len);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pldata.data)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>%lu<sp/>bytes<sp/>for<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>pldata.len,<sp/>filename);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>fread(pldata.data,<sp/>1,<sp/>pldata.len,<sp/>file);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>pldata.len)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>from<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>bplist_read_pldata(&amp;pldata);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>free(pldata.data);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>bplist_read_pref(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/>OSType<sp/>folder_type)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>FSRef<sp/>prefdir;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cstr[<ref refid="readbinaryplist_8c_1addfa831c1473e710d2b71b72fd7fcfa5" kindref="member">MAXPATHLEN</ref>];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>OSErr<sp/>err<sp/>=<sp/>FSFindFolder(kOnAppropriateDisk,<sp/>folder_type,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,<sp/>&amp;prefdir);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>finding<sp/>preferences<sp/>folder:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>err);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>FSRefMakePath(&amp;prefdir,<sp/>(UInt8<sp/>*)<sp/>cstr,<sp/>(UInt32)<sp/>(<ref refid="readbinaryplist_8c_1addfa831c1473e710d2b71b72fd7fcfa5" kindref="member">MAXPATHLEN</ref><sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>making<sp/>path<sp/>name<sp/>for<sp/>preferences<sp/>folder:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>err);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>strlcat(cstr,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/><ref refid="readbinaryplist_8c_1addfa831c1473e710d2b71b72fd7fcfa5" kindref="member">MAXPATHLEN</ref>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>strlcat(cstr,<sp/><ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>,<sp/><ref refid="readbinaryplist_8c_1addfa831c1473e710d2b71b72fd7fcfa5" kindref="member">MAXPATHLEN</ref>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1aec38f443859d4e0adee3f11a25ad0e97" kindref="member">bplist_read_file</ref>(cstr);</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="readbinaryplist_8h_1a5bb4f87ea294c6a75759ff806c997164" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1a5bb4f87ea294c6a75759ff806c997164" kindref="member">bplist_read_system_pref</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bplist_read_pref(filename,<sp/>kSystemPreferencesFolderType);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="readbinaryplist_8h_1a0c8f45d47a6fc01d2234d4b4f5c38647" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1a0c8f45d47a6fc01d2234d4b4f5c38647" kindref="member">bplist_read_user_pref</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bplist_read_pref(filename,<sp/>kPreferencesFolderType);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data<sp/>is<sp/>stored<sp/>with<sp/>high-order<sp/>bytes<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>read<sp/>from<sp/>plist<sp/>data<sp/>in<sp/>a<sp/>machine-independent<sp/>fashion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="readbinaryplist_8c_1ae8492ec8b132c9d972772ff612b5f9f1" refkind="member"><highlight class="normal"><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="readbinaryplist_8c_1ae8492ec8b132c9d972772ff612b5f9f1" kindref="member">convert_uint64</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*ptr)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>rslt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shift<sp/>in<sp/>bytes,<sp/>high-order<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a104204cb123abb831baa5adcfffc64e0" kindref="member">uint64_t</ref>);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt<sp/>+=<sp/>ptr[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>bplist_read_pldata(<ref refid="structpldata__struct" kindref="compound">pldata_ptr</ref><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>result<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbplist__info" kindref="compound">bplist_info_node</ref><sp/>bplist;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*ptr;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="readbinaryplist_8c_1a9b04c954b8c1424e3e74119c93fff041" kindref="member">top_level_object</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="readbinaryplist_8c_1a67c766b1021066b3bcef9cad4c7a5a47" kindref="member">is_binary_plist</ref>(data))<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>too<sp/>short<sp/>or<sp/>invalid<sp/>header.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>trailer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*)<sp/>(data-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref><sp/>+<sp/>data-&gt;<ref refid="structpldata__struct_1a4ac29c88cd0fa2e309e4b75fdbeffbc5" kindref="member">len</ref><sp/>-<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a421a7283c7db47af2849eaba014e6d8c" kindref="member">kTRAILER_SIZE</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref><sp/>=<sp/>ptr[6];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>=<sp/>ptr[7];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1a2664eb47360dff6639f4085a50f321c9" kindref="member">object_count</ref><sp/>=<sp/><ref refid="readbinaryplist_8c_1ae8492ec8b132c9d972772ff612b5f9f1" kindref="member">convert_uint64</ref>(ptr<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>top_level_object<sp/>=<sp/><ref refid="readbinaryplist_8c_1ae8492ec8b132c9d972772ff612b5f9f1" kindref="member">convert_uint64</ref>(ptr<sp/>+<sp/>16);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab999b6c7a605a4b0f9ba31d8ff10dc7f" kindref="member">offset_table_offset</ref><sp/>=<sp/><ref refid="readbinaryplist_8c_1ae8492ec8b132c9d972772ff612b5f9f1" kindref="member">convert_uint64</ref>(ptr<sp/>+<sp/>24);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bplist.<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref><sp/>&lt;<sp/>1<sp/>||<sp/>bplist.<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref><sp/>&gt;<sp/>8<sp/>||</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>&lt;<sp/>1<sp/>||<sp/>bplist.<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>&gt;<sp/>8<sp/>||</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab999b6c7a605a4b0f9ba31d8ff10dc7f" kindref="member">offset_table_offset</ref><sp/>&lt;<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1af0c2d495c2ba5b08810eaa5c4f11475e" kindref="member">kHEADER_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>trailer<sp/>declared<sp/>insane.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>offset<sp/>table<sp/>is<sp/>inside<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>offsetTableSize<sp/>=<sp/>bplist.<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref><sp/>*<sp/>bplist.<ref refid="structbplist__info_1a2664eb47360dff6639f4085a50f321c9" kindref="member">object_count</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offsetTableSize<sp/>+<sp/>bplist.<ref refid="structbplist__info_1ab999b6c7a605a4b0f9ba31d8ff10dc7f" kindref="member">offset_table_offset</ref><sp/>+<sp/><ref refid="readbinaryplist_8c_1ae07532c74c7e685988e820f34d132fc1a421a7283c7db47af2849eaba014e6d8c" kindref="member">kTRAILER_SIZE</ref><sp/>&gt;<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structpldata__struct_1a4ac29c88cd0fa2e309e4b75fdbeffbc5" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>offset<sp/>table<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>=<sp/>data-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref><sp/>=<sp/>data-&gt;<ref refid="structpldata__struct_1a4ac29c88cd0fa2e309e4b75fdbeffbc5" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1a3ea7b1feecc7c5fa1f988e39f57c7c4a" kindref="member">cache</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/></highlight><highlight class="comment">/*<sp/>dictionary<sp/>is<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1acd035d1bbdd0b7a3620eda921ec00592" kindref="member">bplist_log_verbose</ref>(</highlight><highlight class="stringliteral">&quot;Got<sp/>a<sp/>sane<sp/>bplist<sp/>with<sp/>%llu<sp/>items,<sp/>offset_int_size:<sp/>%u,<sp/>object_ref_size:<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1a2664eb47360dff6639f4085a50f321c9" kindref="member">object_count</ref>,<sp/>bplist.<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref>,<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist.<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>at<sp/>this<sp/>point,<sp/>we<sp/>are<sp/>ready<sp/>to<sp/>do<sp/>some<sp/>parsing<sp/>which<sp/>allocates</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>for<sp/>the<sp/>result<sp/>data<sp/>structure.<sp/>If<sp/>memory<sp/>allocation<sp/>(using</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocate<sp/>fails,<sp/>a<sp/>longjmp<sp/>will<sp/>return<sp/>to<sp/>here<sp/>and<sp/>we<sp/>simply<sp/>give<sp/>up</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>setjmp(abort_parsing);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_object(&amp;bplist,<sp/>top_level_object);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;allocate()<sp/>failed<sp/>to<sp/>allocate<sp/>memory.<sp/>Giving<sp/>up.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1aed3531fede3edc5b984b195fe4cea6ae" kindref="member">bplist_free_data</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_object(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>objectRef)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>result<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>objectTag;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objectRef<sp/>&gt;=<sp/>bplist-&gt;<ref refid="structbplist__info_1a2664eb47360dff6639f4085a50f321c9" kindref="member">object_count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Out-of-range<sp/>object<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>object<sp/>index<sp/>is<sp/>out<sp/>of<sp/>range.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>cached<sp/>object<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="readbinaryplist_8c_1a94caadcd7e6458492ce89ede5df614bf" kindref="member">cache_lookup</ref>(bplist-&gt;<ref refid="structbplist__info_1a3ea7b1feecc7c5fa1f988e39f57c7c4a" kindref="member">cache</ref>,<sp/>objectRef);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>find<sp/>object<sp/>in<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>read_offset(bplist,<sp/>objectRef);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Out-of-range<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>object<sp/>outside<sp/>container.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>objectTag<sp/>=<sp/>*(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>+<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(objectTag<sp/>&amp;<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea3e2ebd7526932ab5afbcf8551b0b0232" kindref="member">kTAG_SIMPLE</ref>:</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_simple(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea01d77afbeb1e2b908860fa57c3af617b" kindref="member">kTAG_INT</ref>:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_int(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8e69aa96a2aa68c0d4f271c8f95952d1" kindref="member">kTAG_REAL</ref>:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_real(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea17982df1110730910f1da989446838d8" kindref="member">kTAG_DATE</ref>:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_date(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea78dab38da81ab02075b1007acf8df49c" kindref="member">kTAG_DATA</ref>:</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_data(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea57f2f1368875c893536da664a3b55c6f" kindref="member">kTAG_ASCIISTRING</ref>:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_ascii_string(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beac1b1b60f42fc81ec615c47505955780b" kindref="member">kTAG_UNICODESTRING</ref>:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_unicode_string(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea4111e512b227ac450e3ad0edb320b5d9" kindref="member">kTAG_UID</ref>:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_uid(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea2c2c8e7d49583b91afb8b38388376e5e" kindref="member">kTAG_ARRAY</ref>:</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_array(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8de7d3e89c70c9a2c8666aa0c406df4e" kindref="member">kTAG_DICTIONARY</ref>:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>extract_dictionary(bplist,<sp/>offset);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unknown<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>unknown<sp/>tag<sp/>0x%X.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(objectTag<sp/>&amp;<sp/>0x0F)<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>and<sp/>return<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1af264c2d76407452bca432b7bbe2a60ee" kindref="member">cache_insert</ref>(&amp;bplist-&gt;<ref refid="structbplist__info_1a3ea7b1feecc7c5fa1f988e39f57c7c4a" kindref="member">cache</ref>,<sp/>objectRef,<sp/>result);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>read_sized_int(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>size<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>size<sp/>&lt;=<sp/>8<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref><sp/>+<sp/>size<sp/>&lt;=<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref><sp/>*byte<sp/>=<sp/>bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>+<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>ints<sp/>seem<sp/>to<sp/>be<sp/>high-order<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(result<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>*byte++;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--size);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>read_offset(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>index)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(index<sp/>&lt;<sp/>bplist-&gt;<ref refid="readbinaryplist_8c_1ad4d0c3fccc0f62591f30b4938cadc901" kindref="member">object_count</ref>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read_sized_int(bplist,<sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist-&gt;<ref refid="structbplist__info_1ab999b6c7a605a4b0f9ba31d8ff10dc7f" kindref="member">offset_table_offset</ref><sp/>+<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref><sp/>*<sp/>index,<sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist-&gt;<ref refid="structbplist__info_1ab8fd5fa265f809e0ed0f245a1ae71ad6" kindref="member">offset_int_size</ref>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref><sp/>read_self_sized_int(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>*outValue,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*outSize)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>[<ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>]<sp/>&amp;<sp/>0x0F);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>allowable<sp/>size<sp/>in<sp/>this<sp/>implementation<sp/>is<sp/>1&lt;&lt;3<sp/>=<sp/>8<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>happens<sp/>to<sp/>be<sp/>the<sp/>biggest<sp/>we<sp/>can<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" kindref="member">NO</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref><sp/>+<sp/>1<sp/>+<sp/>size<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" kindref="member">NO</ref>;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>read_sized_int(bplist,<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref><sp/>+<sp/>1,<sp/>size);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outValue<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>*outValue<sp/>=<sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outSize<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>*outSize<sp/>=<sp/>size<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>+1<sp/>for<sp/>tag<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a7ebc9a785e5ab85457c98595aac81589" kindref="member">YES</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_simple(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>[offset])<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beaebda145a2a0179ba49ab09a3b1d0d0e9" kindref="member">kVALUE_NULL</ref>:</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beaebda145a2a0179ba49ab09a3b1d0d0e9" kindref="member">kVALUE_NULL</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beab4638e5a7ac0c9dea9be28c5ac9b6f4a" kindref="member">kVALUE_TRUE</ref>:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beab4638e5a7ac0c9dea9be28c5ac9b6f4a" kindref="member">kVALUE_TRUE</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beafea4ffc2b15b2af40155591656d0318b" kindref="member">kVALUE_FALSE</ref>:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beafea4ffc2b15b2af40155591656d0318b" kindref="member">kVALUE_FALSE</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>kVALUE_FILLER<sp/>is<sp/>treated<sp/>as<sp/>invalid,<sp/>because<sp/>it,<sp/>er,<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>invalid<sp/>atom.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_int(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>value-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea01d77afbeb1e2b908860fa57c3af617b" kindref="member">kTAG_INT</ref>;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!read_self_sized_int(bplist,<sp/>offset,<sp/>&amp;value-&gt;<ref refid="structvalue__struct_1a6bbecf5accb53108caa85bef52ddecca" kindref="member">uinteger</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>invalid<sp/>integer<sp/>object.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>originally,<sp/>I<sp/>sign-extended<sp/>here.<sp/>This<sp/>was<sp/>the<sp/>wrong<sp/>thing;<sp/>it</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>turns<sp/>out<sp/>that<sp/>negative<sp/>ints<sp/>are<sp/>always<sp/>stored<sp/>as<sp/>64-bit,<sp/>and<sp/>smaller</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ints<sp/>are<sp/>unsigned.</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_real(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>[<ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>]<sp/>&amp;<sp/>0x0F);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>what<sp/>to<sp/>do<sp/>if<sp/>faced<sp/>with<sp/>other<sp/>sizes<sp/>for<sp/>float/double?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref>));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>+<sp/>1<sp/>+<sp/>size<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;floating-point<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>is<sp/>ok<sp/>because<sp/>we<sp/>know<sp/>size<sp/>is<sp/>4<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)<sp/>read_sized_int(bplist,<sp/>offset<sp/>+<sp/>1,<sp/>size);<sp/></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>handles<sp/>byte<sp/>swapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a652660f52999563b97e8ece2be01bb46" kindref="member">value_set_real</ref>(value,<sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)&amp;i);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>read_sized_int(bplist,<sp/>offset<sp/>+<sp/>1,<sp/>size);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>handles<sp/>byte<sp/>swapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a652660f52999563b97e8ece2be01bb46" kindref="member">value_set_real</ref>(value,<sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)&amp;i);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>handle<sp/>floats<sp/>of<sp/>other<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>can&apos;t<sp/>handle<sp/>%u-byte<sp/>float.\n&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_date(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>has<sp/>size<sp/>code<sp/>like<sp/>int<sp/>and<sp/>real,<sp/>but<sp/>only<sp/>3<sp/>(meaning<sp/>8<sp/>bytes)<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>[offset]<sp/>!=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea53027c42fdccd57e73d87203c4811d04" kindref="member">kVALUE_FULLDATETAG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>invalid<sp/>size<sp/>for<sp/>date<sp/>object.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>+<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;date&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>what<sp/>to<sp/>do<sp/>if<sp/>faced<sp/>with<sp/>other<sp/>sizes<sp/>for<sp/>double?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref>));</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>date<sp/>=<sp/>read_sized_int(bplist,<sp/>offset<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>handles<sp/>byte<sp/>swapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1aa888240e1e4e6a03de06a844ed8142b7" kindref="member">value_set_date</ref>(value,<sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)&amp;date);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738" refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" refkind="member"><highlight class="normal"><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" kindref="member">bplist_get_a_size</ref>(bplist_info_ptr<sp/>bplist,<sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>*offset_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref><sp/>=<sp/>bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>[*offset_ptr]<sp/>&amp;<sp/>0x0F;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>(*offset_ptr)++;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0x0F)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0x0F<sp/>means<sp/>separate<sp/>int<sp/>size<sp/>follows.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Smaller<sp/>values<sp/>are<sp/>used<sp/>for<sp/>short<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extra;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>length<sp/>of<sp/>the<sp/>data<sp/>size<sp/>we<sp/>are<sp/>about<sp/>to<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref>[*offset_ptr]<sp/>&amp;<sp/>0xF0)<sp/>!=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea01d77afbeb1e2b908860fa57c3af617b" kindref="member">kTAG_INT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bad<sp/>data,<sp/>mistagged<sp/>size<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>size<sp/>is<sp/>not<sp/>tagged<sp/>as<sp/>int.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>;<sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>integer<sp/>data<sp/>as<sp/>size,<sp/>extra<sp/>tells<sp/>how<sp/>many<sp/>bytes<sp/>to<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!read_self_sized_int(bplist,<sp/>*offset_ptr,<sp/>&amp;size,<sp/>&amp;extra))<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>invalid<sp/>%s<sp/>object<sp/>size<sp/>tag.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>;<sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*offset_ptr)<sp/>+=<sp/>extra;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*offset_ptr<sp/>+<sp/>size<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>;<sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_data(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>=<sp/><ref refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" kindref="member">bplist_get_a_size</ref>(bplist,<sp/>&amp;offset,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">))<sp/>==<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>)<sp/></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>is<sp/>ok<sp/>because<sp/>we<sp/>only<sp/>allow<sp/>files<sp/>up<sp/>to<sp/>100MB:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a9532c9abd27cda2e5d909c4ea0f8b920" kindref="member">value_set_data</ref>(value,<sp/>bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>offset,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>size);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_ascii_string(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>=<sp/><ref refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" kindref="member">bplist_get_a_size</ref>(bplist,<sp/>&amp;offset,<sp/></highlight><highlight class="stringliteral">&quot;ascii<sp/>string&quot;</highlight><highlight class="normal">))<sp/>==</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>)<sp/></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>is<sp/>ok<sp/>because<sp/>we<sp/>only<sp/>allow<sp/>100MB<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1ae168d00bba87ef49766ac4ed7e7a23c4" kindref="member">value_set_ascii_string</ref>(value,<sp/>bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>offset,<sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>size);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_unicode_string(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>=<sp/><ref refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" kindref="member">bplist_get_a_size</ref>(bplist,<sp/>&amp;offset,<sp/></highlight><highlight class="stringliteral">&quot;unicode<sp/>string&quot;</highlight><highlight class="normal">))<sp/>==<sp/></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>is<sp/>ok<sp/>because<sp/>we<sp/>only<sp/>allow<sp/>100MB<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a7bc2cc3d31af7b32e40d51bfbaf3a729" kindref="member">value_set_unicode_string</ref>(value,<sp/>bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>offset,<sp/></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>size);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_uid(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UIDs<sp/>are<sp/>used<sp/>by<sp/>Cocoa&apos;s<sp/>key-value<sp/>coder.</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>writing<sp/>other<sp/>plist<sp/>formats,<sp/>they<sp/>are<sp/>expanded<sp/>to<sp/>dictionaries<sp/>of</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>form<sp/>&lt;dict&gt;&lt;key&gt;CF$UID&lt;/key&gt;&lt;integer&gt;value&lt;/integer&gt;&lt;/dict&gt;,<sp/>so<sp/>we</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>the<sp/>same<sp/>here<sp/>on<sp/>reading.<sp/>This<sp/>results<sp/>in<sp/>plists<sp/>identical<sp/>to<sp/>what</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>plutil<sp/>-convert<sp/>xml1<sp/>gives<sp/>us.<sp/>However,<sp/>this<sp/>is<sp/>not<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>as<sp/>[Core]Foundation&apos;s<sp/>plist<sp/>parser,<sp/>which<sp/>extracts<sp/>them<sp/>as<sp/>un-</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>introspectable<sp/>CF<sp/>objects.<sp/>In<sp/>fact,<sp/>it<sp/>even<sp/>seems<sp/>to<sp/>convert<sp/>the<sp/>CF$UID</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionaries<sp/>from<sp/>XML<sp/>plists<sp/>on<sp/>the<sp/>fly.</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>uid;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!read_self_sized_int(bplist,<sp/>offset,<sp/>&amp;uid,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>invalid<sp/>UID<sp/>object.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(NO);<sp/>//<sp/>original<sp/>code<sp/>suggests<sp/>using<sp/>a<sp/>string<sp/>for<sp/>a<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>our<sp/>dictionaries<sp/>all<sp/>use<sp/>big<sp/>ints<sp/>for<sp/>keys,<sp/>so<sp/>I<sp/>don&apos;t<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>to<sp/>do<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>practice,<sp/>I<sp/>believe<sp/>this<sp/>code<sp/>is<sp/>never<sp/>executed<sp/>by<sp/>PortMidi.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>changed<sp/>it<sp/>to<sp/>do<sp/>something<sp/>and<sp/>not<sp/>raise<sp/>compiler<sp/>warnings,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>sure<sp/>what<sp/>the<sp/>code<sp/>should<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a1fbe518612410e50224ddb46bc08d3f8" kindref="member">value_set_uid</ref>(value,<sp/>uid);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>[NSDictionary<sp/>dictionaryWithObject:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[NSNumber<sp/>numberWithUnsignedLongLong:value]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forKey:&quot;CF$UID&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_array(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>elementID;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>element<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>*array<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref><sp/>ok<sp/>=<sp/><ref refid="readbinaryplist_8c_1a7ebc9a785e5ab85457c98595aac81589" kindref="member">YES</ref>;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((count<sp/>=<sp/><ref refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" kindref="member">bplist_get_a_size</ref>(bplist,<sp/>&amp;offset,<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">))<sp/>==<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref><sp/>/<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>-<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>*<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>+<sp/>offset<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>got<sp/>count,<sp/>the<sp/>number<sp/>of<sp/>array<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(value);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>must<sp/>be<sp/>size_t<sp/>or<sp/>smaller<sp/>because<sp/>max<sp/>file<sp/>size<sp/>is<sp/>100MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a181f26bf05a9323f9c2375bcb01088c6" kindref="member">value_set_array</ref>(value,<sp/>array,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>count);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>array<sp/>=<sp/>allocate(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref>)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>count);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1acd035d1bbdd0b7a3620eda921ec00592" kindref="member">bplist_log_verbose</ref>(</highlight><highlight class="stringliteral">&quot;[%u]\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementID<sp/>=<sp/>read_sized_int(bplist,<sp/>offset<sp/>+<sp/>i<sp/>*<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>,<sp/></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/>extract_object(bplist,<sp/>elementID);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" kindref="member">NO</ref>;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>count<sp/>is<sp/>smaller<sp/>than<sp/>size_t<sp/>max<sp/>because<sp/>of<sp/>100MB<sp/>file<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a181f26bf05a9323f9c2375bcb01088c6" kindref="member">value_set_array</ref>(value,<sp/>array,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>count);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>extract_dictionary(bplist_info_ptr<sp/>bplist,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>elementID;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__struct" kindref="compound">dict_ptr</ref><sp/>dict<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nfilterkit_8h_1a3be13892ae7076009afcf121347dd319" kindref="member">BOOL</ref><sp/>ok<sp/>=<sp/><ref refid="readbinaryplist_8c_1a7ebc9a785e5ab85457c98595aac81589" kindref="member">YES</ref>;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(bplist-&gt;<ref refid="structbplist__info_1ab0c039cf2d64b066815b31f648f3e165" kindref="member">data_bytes</ref><sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>bplist-&gt;<ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((count<sp/>=<sp/><ref refid="readbinaryplist_8c_1aa88fd5d568f369bddc884809a0ef5841" kindref="member">bplist_get_a_size</ref>(bplist,<sp/>&amp;offset,<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">))<sp/>==<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref>)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a30654b4b67d97c42ca3f9b6052dda916" kindref="member">UINT64_MAX</ref><sp/>/<sp/>(bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>*<sp/>2)<sp/>-<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref><sp/>*<sp/>count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>+<sp/>offset<sp/>&gt;<sp/>bplist-&gt;<ref refid="structbplist__info_1ae15894e235d748166b0c928e0a36670f" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a6f47cc9c8a630840900f9cce826963f3" kindref="member">bplist_log</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>binary<sp/>plist:<sp/>%s<sp/>object<sp/>overlaps<sp/>end<sp/>of<sp/>container.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="readbinaryplist_8c_1ac70b674c133362cbd7a2bfb4428a0bac" kindref="member">value_create</ref>();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1ad6dc2f7102838f10874a8c047b20760e" kindref="member">value_set_dict</ref>(value,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>val;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementID<sp/>=<sp/>read_sized_int(bplist,<sp/>offset<sp/>+<sp/>i<sp/>*<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>,<sp/></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>extract_object(bplist,<sp/>elementID);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1acd035d1bbdd0b7a3620eda921ec00592" kindref="member">bplist_log_verbose</ref>(</highlight><highlight class="stringliteral">&quot;key:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" kindref="member">NO</ref>;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementID<sp/>=<sp/>read_sized_int(bplist,<sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+<sp/>(i<sp/>+<sp/>count)<sp/>*<sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>,<sp/></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bplist-&gt;<ref refid="structbplist__info_1ab8d0fc75c50cbbb4ae8ac400482d14bd" kindref="member">object_ref_size</ref>);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>extract_object(bplist,<sp/>elementID);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a036e0836dd80085a3133e03893d8408d" kindref="member">dict_insert</ref>(&amp;dict,<sp/>key,<sp/>val);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="readbinaryplist_8c_1a996bde01ecac342918f0a2c4e7ce7bd5" kindref="member">NO</ref>;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1ad6dc2f7102838f10874a8c047b20760e" kindref="member">value_set_dict</ref>(value,<sp/>dict);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1aafd2fa83cd12c368a8c1ecfe71c7eb2c" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">/***************<sp/>functions<sp/>for<sp/>accessing<sp/>values<sp/>****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="readbinaryplist_8h_1a2369ceec4d1c269818b572726aa9e101" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="readbinaryplist_8c_1a2369ceec4d1c269818b572726aa9e101" kindref="member">value_get_asciistring</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v)</highlight></codeline>
<codeline lineno="996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>!=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea57f2f1368875c893536da664a3b55c6f" kindref="member">kTAG_ASCIISTRING</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002" refid="readbinaryplist_8h_1a6bcd94997d444d72618ef5954e4e7253" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1a6bcd94997d444d72618ef5954e4e7253" kindref="member">value_dict_lookup_using_string</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref>)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__struct" kindref="compound">dict_ptr</ref><sp/>dict;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>!=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8de7d3e89c70c9a2c8666aa0c406df4e" kindref="member">kTAG_DICTIONARY</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>v-&gt;<ref refid="structvalue__struct_1a86b769cd843831a6abb549dba57d5004" kindref="member">dict</ref>;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>for<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dict)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict-&gt;<ref refid="structdict__struct_1a906ac1c2d1ef832872d21a370fd889b2" kindref="member">key</ref><sp/>&amp;&amp;<sp/>dict-&gt;<ref refid="structdict__struct_1a906ac1c2d1ef832872d21a370fd889b2" kindref="member">key</ref>-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>==<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea57f2f1368875c893536da664a3b55c6f" kindref="member">kTAG_ASCIISTRING</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(key,<sp/>dict-&gt;<ref refid="structdict__struct_1a906ac1c2d1ef832872d21a370fd889b2" kindref="member">key</ref>-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dict-&gt;<ref refid="structdict__struct_1a8f0a429176b1c1a0eabb9e1e73d228a1" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>dict-&gt;<ref refid="structdict__struct_1adc33b2f20c741e3cde74fbdda543f69b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018" refid="readbinaryplist_8h_1a7e864a16ab7c98b962a88a968bc5ce72" refkind="member"><highlight class="normal"><ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/><ref refid="readbinaryplist_8c_1a7e864a16ab7c98b962a88a968bc5ce72" kindref="member">value_dict_lookup_using_path</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2docgen_1ae75d75173fc2ea012acad7d886aa2f9d" kindref="member">path</ref>)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structcache__struct_1af242c8abd9d0d23e8fb7b8c0809fa598" kindref="member">key</ref>[<ref refid="readbinaryplist_8h_1a61504903c4144f98e49063d95c67dc60" kindref="member">MAX_KEY_SIZE</ref>];</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*path)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>more<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="readbinaryplist_8h_1a61504903c4144f98e49063d95c67dc60" kindref="member">MAX_KEY_SIZE</ref><sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>*path++;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>entry<sp/>in<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[i<sp/>+<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!key[i])<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path--;<sp/></highlight><highlight class="comment">/*<sp/>back<sp/>up<sp/>to<sp/>end<sp/>of<sp/>string<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>will<sp/>cause<sp/>outer<sp/>loop<sp/>to<sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v<sp/>||<sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>!=<sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8de7d3e89c70c9a2c8666aa0c406df4e" kindref="member">kTAG_DICTIONARY</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now,<sp/>look<sp/>up<sp/>the<sp/>key<sp/>to<sp/>get<sp/>next<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/><ref refid="readbinaryplist_8c_1a6bcd94997d444d72618ef5954e4e7253" kindref="member">value_dict_lookup_using_string</ref>(v,<sp/>key);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">/***************<sp/>functions<sp/>for<sp/>debugging<sp/>***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046" refid="readbinaryplist_8h_1a13c17a7f23b738ea0c2a07b1b251c00a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8c_1a13c17a7f23b738ea0c2a07b1b251c00a" kindref="member">plist_print</ref>(<ref refid="structvalue__struct" kindref="compound">value_ptr</ref><sp/>v)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comma_needed;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__struct" kindref="compound">dict_ptr</ref><sp/>dict;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref><sp/>&amp;<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea3e2ebd7526932ab5afbcf8551b0b0232" kindref="member">kTAG_SIMPLE</ref>:</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beaebda145a2a0179ba49ab09a3b1d0d0e9" kindref="member">kVALUE_NULL</ref>:<sp/></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;NULL@%p&quot;</highlight><highlight class="normal">,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beafea4ffc2b15b2af40155591656d0318b" kindref="member">kVALUE_FALSE</ref>:<sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;FALSE@%p&quot;</highlight><highlight class="normal">,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beab4638e5a7ac0c9dea9be28c5ac9b6f4a" kindref="member">kVALUE_TRUE</ref>:</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;TRUE@%p&quot;</highlight><highlight class="normal">,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;UNKNOWN<sp/>tag=%x@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea01d77afbeb1e2b908860fa57c3af617b" kindref="member">kTAG_INT</ref>:</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%lld@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a49270e9fed428e9ce09ac6188cb160eb" kindref="member">integer</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8e69aa96a2aa68c0d4f271c8f95952d1" kindref="member">kTAG_REAL</ref>:</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%g@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a4ab3629455d6faa852c3d935416b73b8" kindref="member">real</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea17982df1110730910f1da989446838d8" kindref="member">kTAG_DATE</ref>:</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;date:%g@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a4ab3629455d6faa852c3d935416b73b8" kindref="member">real</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea78dab38da81ab02075b1007acf8df49c" kindref="member">kTAG_DATA</ref>:</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;data@%p-&gt;%p:[%p:&quot;</highlight><highlight class="normal">,<sp/>v,<sp/>v-&gt;<ref refid="structvalue__struct_1a9e6e57b12fdf03e97f4c552d700f5dc2" kindref="member">data</ref>,<sp/>v-&gt;<ref refid="structvalue__struct_1a9e6e57b12fdf03e97f4c552d700f5dc2" kindref="member">data</ref>-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v-&gt;<ref refid="structvalue__struct_1a9e6e57b12fdf03e97f4c552d700f5dc2" kindref="member">data</ref>-&gt;<ref refid="structpldata__struct_1a4ac29c88cd0fa2e309e4b75fdbeffbc5" kindref="member">len</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%2x&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a9e6e57b12fdf03e97f4c552d700f5dc2" kindref="member">data</ref>-&gt;<ref refid="structpldata__struct_1aa49e9df08964fc653b2f80080f348d90" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea57f2f1368875c893536da664a3b55c6f" kindref="member">kTAG_ASCIISTRING</ref>:</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%p:\&quot;%s\&quot;@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>,<sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774beac1b1b60f42fc81ec615c47505955780b" kindref="member">kTAG_UNICODESTRING</ref>:</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;unicode:%p:\&quot;%s\&quot;@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>,<sp/>v-&gt;<ref refid="structvalue__struct_1a743dfc556105c981212ba3df29568370" kindref="member">string</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea4111e512b227ac450e3ad0edb320b5d9" kindref="member">kTAG_UID</ref>:</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;UID:%llu@%p&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a6bbecf5accb53108caa85bef52ddecca" kindref="member">uinteger</ref>,<sp/>v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea2c2c8e7d49583b91afb8b38388376e5e" kindref="member">kTAG_ARRAY</ref>:</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma_needed<sp/>=<sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%p-&gt;%p:[%p:&quot;</highlight><highlight class="normal">,<sp/>v,<sp/>v-&gt;<ref refid="structvalue__struct_1a08902e61880b9638a37f9b180face471" kindref="member">array</ref>,<sp/>v-&gt;<ref refid="structvalue__struct_1a08902e61880b9638a37f9b180face471" kindref="member">array</ref>-&gt;<ref refid="structarray__struct_1ab25fc397ed68afbba0080e1cfc960832" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v-&gt;<ref refid="structvalue__struct_1a08902e61880b9638a37f9b180face471" kindref="member">array</ref>-&gt;<ref refid="structarray__struct_1a2cc7486bd91ad9da51edd7a4cbc46a35" kindref="member">length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comma_needed)<sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a13c17a7f23b738ea0c2a07b1b251c00a" kindref="member">plist_print</ref>(v-&gt;<ref refid="structvalue__struct_1a08902e61880b9638a37f9b180face471" kindref="member">array</ref>-&gt;<ref refid="structarray__struct_1ab25fc397ed68afbba0080e1cfc960832" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma_needed<sp/>=<sp/><ref refid="cext_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="readbinaryplist_8h_1afb9b21dcb0b6eb4e9e0c9cb090e774bea8de7d3e89c70c9a2c8666aa0c406df4e" kindref="member">kTAG_DICTIONARY</ref>:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma_needed<sp/>=<sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%p:[&quot;</highlight><highlight class="normal">,<sp/>v);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>v-&gt;<ref refid="structvalue__struct_1a86b769cd843831a6abb549dba57d5004" kindref="member">dict</ref>;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dict)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comma_needed)<sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;%p:&quot;</highlight><highlight class="normal">,<sp/>dict);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a13c17a7f23b738ea0c2a07b1b251c00a" kindref="member">plist_print</ref>(dict-&gt;<ref refid="structdict__struct_1a906ac1c2d1ef832872d21a370fd889b2" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="readbinaryplist_8c_1a13c17a7f23b738ea0c2a07b1b251c00a" kindref="member">plist_print</ref>(dict-&gt;<ref refid="structdict__struct_1a8f0a429176b1c1a0eabb9e1e73d228a1" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma_needed<sp/>=<sp/><ref refid="cext_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>dict-&gt;<ref refid="structdict__struct_1adc33b2f20c741e3cde74fbdda543f69b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;UNKNOWN<sp/>tag=%x&quot;</highlight><highlight class="normal">,<sp/>v-&gt;<ref refid="structvalue__struct_1a451c0c45be11ca6802b0d4c6af95f321" kindref="member">tag</ref>);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/readbinaryplist.c"/>
  </compounddef>
</doxygen>
