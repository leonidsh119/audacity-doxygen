<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__lavu__buffer" kind="group">
    <compoundname>lavu_buffer</compoundname>
    <title>AVBuffer</title>
    <innerfile refid="ffmpeg_2libavutil_2buffer_8h">buffer.h</innerfile>
    <innerclass refid="struct_a_v_buffer_ref" prot="public">AVBufferRef</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__lavu__buffer_1ga501d49df442180d584f255aa97b2549d" prot="public" static="no">
        <type>struct <ref refid="group__lavu__buffer_1ga501d49df442180d584f255aa97b2549d" kindref="member">AVBuffer</ref></type>
        <definition>typedef struct AVBuffer AVBuffer</definition>
        <argsstring></argsstring>
        <name>AVBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reference counted buffer type. It is opaque and is meant to be used through references (<ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="75" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__lavu__buffer_1ga433e680d11ad786bd1bc20f5616c7d19" prot="public" static="no">
        <type>struct <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref></type>
        <definition>typedef struct AVBufferRef  AVBufferRef</definition>
        <argsstring></argsstring>
        <name>AVBufferRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reference to a data buffer.</para><para>The size of this struct is not a part of the public ABI and it is not meant to be allocated directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="94" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lavu__buffer_1ga5ae84ac902283dea1a660ede06c1cdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
        <definition>AVBufferRef* av_buffer_alloc</definition>
        <argsstring>(int size)</argsstring>
        <name>av_buffer_alloc</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate an AVBuffer of the given size using <ref refid="group__lavu__mem_1gacbca30ebc510a7e4156d66e7aceb2dc8" kindref="member">av_malloc()</ref>.</para><para><simplesect kind="return"><para>an <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> of given size or NULL when out of memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga27f37cc004f768b00442b6cb08091686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
        <definition>AVBufferRef* av_buffer_allocz</definition>
        <argsstring>(int size)</argsstring>
        <name>av_buffer_allocz</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="group__lavu__buffer_1ga5ae84ac902283dea1a660ede06c1cdac" kindref="member">av_buffer_alloc()</ref>, except the returned buffer will be initialized to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga3e7f4c92db85ccba0b2a16dd0069842a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
        <definition>AVBufferRef* av_buffer_create</definition>
        <argsstring>(uint8_t *data, int size, void(*free)(void *opaque, uint8_t *data), void *opaque, int flags)</argsstring>
        <name>av_buffer_create</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *opaque, <ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</type>
          <declname>free</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an AVBuffer from an existing array.</para><para>If this function is successful, data is owned by the AVBuffer. The caller may only access data through the returned <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> and references derived from it. If this function fails, data is left untouched. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free</parametername>
</parameternamelist>
<parameterdescription>
<para>a callback for freeing this buffer&apos;s data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter to be got for processing or passed to free </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>a combination of AV_BUFFER_FLAG_*</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> referring to data on success, NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga37d620e8cfc9f2f3261c2b4c5d4adfe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_buffer_default_free</definition>
        <argsstring>(void *opaque, uint8_t *data)</argsstring>
        <name>av_buffer_default_free</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default free callback, which calls <ref refid="group__lavu__mem_1ga0c9096f498624c525aa2315b8a20c411" kindref="member">av_free()</ref> on the buffer data. This function is meant to be passed to <ref refid="group__lavu__buffer_1ga3e7f4c92db85ccba0b2a16dd0069842a" kindref="member">av_buffer_create()</ref>, not called directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1gaa40ce7d3ede946a89d03323bbd7268c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
        <definition>AVBufferRef* av_buffer_ref</definition>
        <argsstring>(AVBufferRef *buf)</argsstring>
        <name>av_buffer_ref</name>
        <param>
          <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new reference to an AVBuffer.</para><para><simplesect kind="return"><para>a new <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> referring to the same AVBuffer as buf or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga135e9e929b5033bb8f68322497b2effc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void av_buffer_unref</definition>
        <argsstring>(AVBufferRef **buf)</argsstring>
        <name>av_buffer_unref</name>
        <param>
          <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> **</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a given reference and automatically free the buffer if there are no more references to it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to be freed. The pointer is set to NULL on return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga060be34ace567ae378fd0a786e847053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_buffer_is_writable</definition>
        <argsstring>(const AVBufferRef *buf)</argsstring>
        <name>av_buffer_is_writable</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if the caller may write to the data referred to by buf (which is true if and only if buf is the only reference to the underlying AVBuffer). Return 0 otherwise. A positive answer is valid until <ref refid="group__lavu__buffer_1gaa40ce7d3ede946a89d03323bbd7268c1" kindref="member">av_buffer_ref()</ref> is called on buf. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1gac1c38f469fc9933885cfffafd8cbf0d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* av_buffer_get_opaque</definition>
        <argsstring>(const AVBufferRef *buf)</argsstring>
        <name>av_buffer_get_opaque</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the opaque parameter set by av_buffer_create. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga7b16c3976dc555f71d0843bbd023dfcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_buffer_get_ref_count</definition>
        <argsstring>(const AVBufferRef *buf)</argsstring>
        <name>av_buffer_get_ref_count</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1ga9c2a1be1b7bb80eec8613fdb62a19074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_buffer_make_writable</definition>
        <argsstring>(AVBufferRef **buf)</argsstring>
        <name>av_buffer_make_writable</name>
        <param>
          <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> **</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a writable reference from a given buffer reference, avoiding data copy if possible.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer reference to make writable. On success, buf is either left untouched, or it is unreferenced and a new writable <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> is written in its place. On failure, buf is left untouched. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lavu__buffer_1gac7c228f9ed54e246dcd270503bed7291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int av_buffer_realloc</definition>
        <argsstring>(AVBufferRef **buf, int size)</argsstring>
        <name>av_buffer_realloc</name>
        <param>
          <type><ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reallocate a given buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>a buffer reference to reallocate. On success, buf will be unreferenced and a new reference with the required size will be written in its place. On failure buf will be left untouched. *buf may be NULL, then a new buffer is allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>required new buffer size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative AVERROR on failure.</para></simplesect>
<simplesect kind="note"><para>the buffer is actually reallocated with <ref refid="group__lavu__mem_1ga74bb2298daa9cd0b5f1d0b2c1c3e26bb" kindref="member">av_realloc()</ref> only if it was initially allocated through av_buffer_realloc(NULL) and there is only one reference to it (i.e. the one passed to this function). In all other cases a new buffer is allocated and the data is copied. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__lavu__buffer_1gaa818f8f1011d69acc50c1f29cb85e576" prot="public" static="no">
        <name>AV_BUFFER_FLAG_READONLY</name>
        <initializer>(1 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Always treat the buffer as read-only, even when it has only one reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" line="113" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/buffer.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>AVBuffer is an API for reference-counted data buffers.</para><para>There are two core objects in this API <ndash/> AVBuffer and <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref>. AVBuffer represents the data buffer itself; it is opaque and not meant to be accessed by the caller directly, but only through <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref>. However, the caller may e.g. compare two AVBuffer pointers to check whether two different references are describing the same data buffer. <ref refid="struct_a_v_buffer_ref" kindref="compound">AVBufferRef</ref> represents a single reference to an AVBuffer and it is the object that may be manipulated by the caller directly.</para><para>There are two functions provided for creating a new AVBuffer with a single reference <ndash/> <ref refid="group__lavu__buffer_1ga5ae84ac902283dea1a660ede06c1cdac" kindref="member">av_buffer_alloc()</ref> to just allocate a new buffer, and <ref refid="group__lavu__buffer_1ga3e7f4c92db85ccba0b2a16dd0069842a" kindref="member">av_buffer_create()</ref> to wrap an existing array in an AVBuffer. From an existing reference, additional references may be created with <ref refid="group__lavu__buffer_1gaa40ce7d3ede946a89d03323bbd7268c1" kindref="member">av_buffer_ref()</ref>. Use <ref refid="group__lavu__buffer_1ga135e9e929b5033bb8f68322497b2effc" kindref="member">av_buffer_unref()</ref> to free a reference (this will automatically free the data once all the references are freed).</para><para>The convention throughout this API and the rest of FFmpeg is such that the buffer is considered writable if there exists only one reference to it (and it has not been marked as read-only). The <ref refid="group__lavu__buffer_1ga060be34ace567ae378fd0a786e847053" kindref="member">av_buffer_is_writable()</ref> function is provided to check whether this is true and <ref refid="group__lavu__buffer_1ga9c2a1be1b7bb80eec8613fdb62a19074" kindref="member">av_buffer_make_writable()</ref> will automatically create a new writable buffer when necessary. Of course nothing prevents the calling code from violating this convention, however that is safe only when all the existing references are under its control.</para><para><simplesect kind="note"><para>Referencing and unreferencing the buffers is thread-safe and thus may be done from multiple threads simultaneously without any need for additional locking.</para></simplesect>
<simplesect kind="note"><para>Two different references to the same buffer can point to different parts of the buffer (i.e. their <ref refid="struct_a_v_buffer_ref_1acb8452e99cd75074b93800b532c6ea4b" kindref="member">AVBufferRef.data</ref> will not be equal). </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
