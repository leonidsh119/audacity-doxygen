<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__flac__metadata__level2" kind="group">
    <compoundname>flac_metadata_level2</compoundname>
    <title>FLAC/metadata.h: metadata level 2 interface</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__flac__metadata__level2_1gafe2a924893b0800b020bea8160fd4531" prot="public" static="no">
        <name>FLAC__Metadata_ChainStatus</name>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a293be942ec54576f2b3c73613af968e9" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain is in the normal OK state </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1be9400982f411173af46bf0c3acbdc7" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_ILLEGAL_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data passed into a function violated the function&apos;s usage criteria </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a43d2741a650576052fa3615d8cd64d86" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_ERROR_OPENING_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain could not open the target file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a99748a4b12ed10f9368375cc8deeb143" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_NOT_A_FLAC_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain could not find the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> signature at the start of the file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ac469c6543ebb117e99064572c16672d4" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_NOT_WRITABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain tried to write to a file that was not writable </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a8efd2c76dc06308eb6eba59e1bc6300b" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_BAD_METADATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered input that does not conform to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata specification </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0525de5fb5d8aeeb4e848e33a8d503c6" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_READ_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error while reading the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a5814bc26bcf92143198b8e7f028f43a2" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_SEEK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error while seeking in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a66460c735e4745788b40889329e8489f" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_WRITE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error while writing the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af4ecf22bc3e5adf78a9c765f856efb0d" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_RENAME_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error renaming the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a1cd3138ed493f6a0f5b95fb8481edd1e" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_UNLINK_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The chain encountered an error removing the temporary file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab12ec938f7556a163c609194ee0aede0" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_MEMORY_ALLOCATION_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation failed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a36b9bcf93da8e0f111738a65eab36e9d" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_INTERNAL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The caller violated an assertion or an unexpected error occurred </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531ab8a6aa5f115db3f07ad2ed4adbcbe060" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_INVALID_CALLBACKS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One or more of the required callbacks was NULL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531a0d9e64ad6514c88b8ea9e9171c42ec9a" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_READ_WRITE_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> was called on a chain read by <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks(), or <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref>/FLAC__metadata_chain_write_with_callbacks_and_tempfile() was called on a chain read by <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(). Matching read/write methods must always be used. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__flac__metadata__level2_1ggafe2a924893b0800b020bea8160fd4531af86670707345e2d02cc84aec059459d0" prot="public">
          <name>FLAC__METADATA_CHAIN_STATUS_WRONG_WRITE_CALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> was called when the chain write requires a tempfile; use <ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile()</ref> instead. Or, <ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile()</ref> was called when the chain write does not require a tempfile; use <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> instead. Always check <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> before writing via callbacks. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="721" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="721" bodyend="783"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flac__metadata__level2_1gaec6993c60b88f222a52af86f8f47bfdf" prot="public" static="no">
        <type>struct <ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref></type>
        <definition>typedef struct FLAC__Metadata_Chain FLAC__Metadata_Chain</definition>
        <argsstring></argsstring>
        <name>FLAC__Metadata_Chain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque structure definition for the level 2 chain type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__metadata__level2_1ga9f3e135a07cdef7e51597646aa7b89b2" prot="public" static="no">
        <type>struct <ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref></type>
        <definition>typedef struct FLAC__Metadata_Iterator FLAC__Metadata_Iterator</definition>
        <argsstring></argsstring>
        <name>FLAC__Metadata_Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque structure definition for the level 2 iterator type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" bodystart="719" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__flac__metadata__level2_1gabb4646b4af36d17497676759767f8cc7" prot="public" static="no" mutable="no">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>FLAC_API const char* const FLAC__Metadata_ChainStatusString[]</definition>
        <argsstring>[]</argsstring>
        <name>FLAC__Metadata_ChainStatusString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps a FLAC__Metadata_ChainStatus to a C string.</para><para>Using a FLAC__Metadata_ChainStatus as the index to this array will give the string equivalent. The contents should not be modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="790" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="909" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flac__metadata__level2_1gafd1f4f58af29325b067ebc5dc34a0f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
        <definition>FLAC_API FLAC__Metadata_Chain* FLAC__metadata_chain_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_chain_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new chain instance.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_Chain*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="799" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1485" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga178898eef72ba9d569b1964fffcb4a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_chain_delete</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a chain instance. Deletes the object pointed to by <emphasis>chain</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="807" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1495" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__metadata__level2_1gafe2a924893b0800b020bea8160fd4531" kindref="member">FLAC__Metadata_ChainStatus</ref></type>
        <definition>FLAC_API FLAC__Metadata_ChainStatus FLAC__metadata_chain_status</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_status</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current status of the chain. Call this after a function returns <computeroutput>false</computeroutput> to get the reason for the error. Also resets the status to FLAC__METADATA_CHAIN_STATUS_OK.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_ChainStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The current status of the chain. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="819" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1504" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, const char *filename)</argsstring>
        <name>FLAC__metadata_chain_read</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file into the chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>filename</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="833" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1548" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gae7b34f2929bedea0e14ac14aca253a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read_ogg</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, const char *filename)</argsstring>
        <name>FLAC__metadata_chain_read_ogg</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from an Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file into the chain.</para><para><simplesect kind="note"><para>Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata data writing is not supported yet and <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> will fail.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>filename</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="850" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1554" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read_with_callbacks</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks)</argsstring>
        <name>FLAC__metadata_chain_read_with_callbacks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream into the chain via I/O callbacks.</para><para>The <emphasis>handle</emphasis> need only be open for reading, but must be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r&quot;</computeroutput> (or <computeroutput>&quot;rb&quot;</computeroutput> for Windows).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to read. The handle will NOT be closed after the metadata is read; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O. The mandatory callbacks are <emphasis>read</emphasis>, <emphasis>seek</emphasis>, and <emphasis>tell</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>handle</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="872" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1589" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga62c24f8d127897e5b7d00aa48f889996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_read_ogg_with_callbacks</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks)</argsstring>
        <name>FLAC__metadata_chain_read_ogg_with_callbacks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read all metadata from an Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream into the chain via I/O callbacks.</para><para>The <emphasis>handle</emphasis> need only be open for reading, but must be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r&quot;</computeroutput> (or <computeroutput>&quot;rb&quot;</computeroutput> for Windows).</para><para><simplesect kind="note"><para>Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata data writing is not supported yet and <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> will fail.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to read. The handle will NOT be closed after the metadata is read; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O. The mandatory callbacks are <emphasis>read</emphasis>, <emphasis>seek</emphasis>, and <emphasis>tell</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid list of metadata blocks was read from <emphasis>handle</emphasis>, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="897" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1595" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_check_if_tempfile_needed</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding)</argsstring>
        <name>FLAC__metadata_chain_check_if_tempfile_needed</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if writing the given chain would require the use of a temporary file, or if it could be written in place.</para><para>Under certain conditions, padding can be utilized so that writing edited metadata back to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file does not require rewriting the entire file. If rewriting is required, then a temporary workfile is required. When writing metadata using callbacks, you must check this function to know whether to call <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> or <ref refid="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" kindref="member">FLAC__metadata_chain_write_with_callbacks_and_tempfile()</ref>. When writing with <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref>, the temporary file is handled internally.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not padding will be allowed to be used during the write. The value of <emphasis>use_padding</emphasis> given here must match the value later passed to <ref refid="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" kindref="member">FLAC__metadata_chain_write_with_callbacks()</ref> or FLAC__metadata_chain_write_with_callbacks_with_tempfile().  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if writing the current chain would require a tempfile, or <computeroutput>false</computeroutput> if metadata can be written in place. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="925" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1600" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_write</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding, FLAC__bool preserve_file_stats)</argsstring>
        <name>FLAC__metadata_chain_write</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>preserve_file_stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write all metadata out to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function tries to be as efficient as possible; how the metadata is actually written is shown by the following:</para><para>If the current chain is the same size as the existing metadata, the new data is written in place.</para><para>If the current chain is longer than the existing metadata, and <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput>, and the last block is a PADDING block of sufficient length, the function will truncate the final padding block so that the overall size of the metadata is the same as the existing metadata, and then just rewrite the metadata. Otherwise, if not all of the above conditions are met, the entire <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file must be rewritten. If you want to use padding this way it is a good idea to call <ref refid="group__flac__metadata__level2_1gaa14304da1c8e706808cfafa5cbbf575b" kindref="member">FLAC__metadata_chain_sort_padding()</ref> first so that you have the maximum amount of padding to work with, unless you need to preserve ordering of the PADDING blocks for some reason.</para><para>If the current chain is shorter than the existing metadata, and <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput>, and the final block is a PADDING block, the padding is extended to make the overall size the same as the existing data. If <emphasis>use_padding</emphasis> is <computeroutput>true</computeroutput> and the last block is not a PADDING block, a new PADDING block is added to the end of the new data to make it the same size as the existing data (if possible, see the note to <ref refid="group__flac__metadata__level1_1ga7d1ceb2db292c968ae6ac18ecb15c356" kindref="member">FLAC__metadata_simple_iterator_set_block()</ref> about the four byte limit) and the new data is written in place. If none of the above apply or <emphasis>use_padding</emphasis> is <computeroutput>false</computeroutput>, the entire <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is rewritten.</para><para>If <emphasis>preserve_file_stats</emphasis> is <computeroutput>true</computeroutput>, the owner and modification time will be preserved even if the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is written.</para><para>For this write function to be used, the chain must have been read with <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(), not <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preserve_file_stats</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the write succeeded, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="971" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1634" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga6bf7552940ec2242718d1ab164b89e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_write_with_callbacks</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks)</argsstring>
        <name>FLAC__metadata_chain_write_with_callbacks</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write all metadata out to a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream via callbacks.</para><para>(See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> for the details on how padding is used to write metadata in place if possible.)</para><para>The <emphasis>handle</emphasis> must be open for updating and be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r+&quot;</computeroutput> (or <computeroutput>&quot;r+b&quot;</computeroutput> for Windows).</para><para>For this write function to be used, the chain must have been read with <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks(), not <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(). Also, <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> must have returned <computeroutput>false</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to write. The handle will NOT be closed after the metadata is written; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O. The mandatory callbacks are <emphasis>write</emphasis> and <emphasis>seek</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the write succeeded, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1001" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1685" bodyend="1720"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga371beab0d09d5248272bcb8d57de94f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_chain_write_with_callbacks_and_tempfile</definition>
        <argsstring>(FLAC__Metadata_Chain *chain, FLAC__bool use_padding, FLAC__IOHandle handle, FLAC__IOCallbacks callbacks, FLAC__IOHandle temp_handle, FLAC__IOCallbacks temp_callbacks)</argsstring>
        <name>FLAC__metadata_chain_write_with_callbacks_and_tempfile</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>callbacks</declname>
        </param>
        <param>
          <type><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref></type>
          <declname>temp_handle</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref></type>
          <declname>temp_callbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write all metadata out to a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream via callbacks.</para><para>(See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> for the details on how padding is used to write metadata in place if possible.)</para><para>This version of the write-with-callbacks function must be used when <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> returns true. In this function, you must supply an I/O handle corresponding to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to edit, and a temporary handle to which the new <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will be written. It is the caller&apos;s job to move this temporary <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file on top of the original <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to complete the metadata edit.</para><para>The <emphasis>handle</emphasis> must be open for reading and be seekable. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;r&quot;</computeroutput> (or <computeroutput>&quot;rb&quot;</computeroutput> for Windows).</para><para>The <emphasis>temp_handle</emphasis> must be open for writing. The equivalent minimum stdio fopen() file mode is <computeroutput>&quot;w&quot;</computeroutput> (or <computeroutput>&quot;wb&quot;</computeroutput> for Windows). It should be an empty stream, or at least positioned at the start-of-file (in which case it is the caller&apos;s duty to truncate it on return).</para><para>For this write function to be used, the chain must have been read with <ref refid="group__flac__metadata__level2_1ga061ae21b7836cd26f13345b897f05f3e" kindref="member">FLAC__metadata_chain_read_with_callbacks()</ref>/FLAC__metadata_chain_read_ogg_with_callbacks(), not <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg(). Also, <ref refid="group__flac__metadata__level2_1ga29a124cceaffce5376d073a032bd1c52" kindref="member">FLAC__metadata_chain_check_if_tempfile_needed()</ref> must have returned <computeroutput>true</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the original <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to read. The handle will NOT be closed after the metadata is written; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O on <emphasis>handle</emphasis>. The mandatory callbacks are <emphasis>read</emphasis>, <emphasis>seek</emphasis>, and <emphasis>eof</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temp_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The I/O handle of the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> stream to write. The handle will NOT be closed after the metadata is written; that is the duty of the caller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temp_callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of callbacks to use for I/O on temp_handle. The only mandatory callback is <emphasis>write</emphasis>.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the write succeeded, else <computeroutput>false</computeroutput>. On failure, check the status with <ref refid="group__flac__metadata__level2_1ga3d030e216a6517f23372bb76f0639127" kindref="member">FLAC__metadata_chain_status()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1052" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1722" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gab24934bc1f0e054c631a22c9b9221f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_chain_merge_padding</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_merge_padding</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge adjacent PADDING blocks into a single block.</para><para><simplesect kind="note"><para>This function does not write to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file, it only modifies the chain.</para></simplesect>
<simplesect kind="warning"><para>Any iterator on the current chain will become invalid after this call. You should delete the iterator and get a new one.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1066" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1781" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gaa14304da1c8e706808cfafa5cbbf575b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_chain_sort_padding</definition>
        <argsstring>(FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_chain_sort_padding</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will move all PADDING blocks to the end on the metadata, then merge them into a single block.</para><para><simplesect kind="note"><para>This function does not write to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file, it only modifies the chain.</para></simplesect>
<simplesect kind="warning"><para>Any iterator on the current chain will become invalid after this call. You should delete the iterator and get a new one.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing chain.  <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1081" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1793" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gac988906d63bd2ddc910d8f0b118591f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
        <definition>FLAC_API FLAC__Metadata_Iterator* FLAC__metadata_iterator_new</definition>
        <argsstring>(void)</argsstring>
        <name>FLAC__metadata_iterator_new</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new iterator instance.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__Metadata_Iterator*</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> if there was an error allocating memory, else the new instance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1091" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1820" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga1af713d0ae3f7b761579b4fac64f0a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_iterator_delete</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_delete</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an iterator instance. Deletes the object pointed to by <emphasis>iterator</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1099" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1832" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>FLAC_API void FLAC__metadata_iterator_init</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__Metadata_Chain *chain)</argsstring>
        <name>FLAC__metadata_iterator_init</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___chain" kindref="compound">FLAC__Metadata_Chain</ref> *</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the iterator to point to the first metadata block in the given chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing and initialized (read) chain.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">chain<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1110" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1839" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga3997509ae7eeea3b208700cdbbbd97ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_next</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_next</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator forward one metadata block, returning <computeroutput>false</computeroutput> if already at the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the last metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1124" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1849" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga003373a88bea6cea2df32f110a95e912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_prev</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_prev</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the iterator backward one metadata block, returning <computeroutput>false</computeroutput> if already at the beginning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if already at the first metadata block of the chain, else <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1138" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1860" bodyend="1869"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga8221ea86b62119785c774aaece48a29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="group__flac__format_1gac71714ba8ddbbd66d26bb78a427fac01" kindref="member">FLAC__MetadataType</ref></type>
        <definition>FLAC_API FLAC__MetadataType FLAC__metadata_iterator_get_block_type</definition>
        <argsstring>(const FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_get_block_type</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type of the metadata block at the current position.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__MetadataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the metadata block at the current iterator position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1871" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
        <definition>FLAC_API FLAC__StreamMetadata* FLAC__metadata_iterator_get_block</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator)</argsstring>
        <name>FLAC__metadata_iterator_get_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the metadata block at the current position. You can modify the block in place but must write the chain before the changes are reflected to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. You do not need to call <ref refid="group__flac__metadata__level2_1gab40c33a0bf35a2932a5c13f5230e0d9e" kindref="member">FLAC__metadata_iterator_set_block()</ref> to reflect the changes; the pointer returned by <ref refid="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" kindref="member">FLAC__metadata_iterator_get_block()</ref> points directly into the chain.</para><para><simplesect kind="warning"><para>Do not call <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref> on the returned object; to delete a block use <ref refid="group__flac__metadata__level2_1ga18fdaae4986696dc000cae6357810f7b" kindref="member">FLAC__metadata_iterator_delete_block()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__StreamMetadata*</parametername>
</parameternamelist>
<parameterdescription>
<para>The current metadata block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1880" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1gab40c33a0bf35a2932a5c13f5230e0d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_set_block</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__StreamMetadata *block)</argsstring>
        <name>FLAC__metadata_iterator_set_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the metadata block at the current position, replacing the existing block. The new block passed in becomes owned by the chain and it will be deleted when the chain is deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a metadata block.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> <programlisting><codeline><highlight class="normal">block<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, or a memory allocation error occurs, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1188" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1888" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga18fdaae4986696dc000cae6357810f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_delete_block</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__bool replace_with_padding)</argsstring>
        <name>FLAC__metadata_iterator_delete_block</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
          <declname>replace_with_padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the current block from the chain. If <emphasis>replace_with_padding</emphasis> is <computeroutput>true</computeroutput>, the block will instead be replaced with a padding block of equal size. You can not delete the STREAMINFO block. The iterator will be left pointing to the block before the one just &quot;deleted&quot;, even if <emphasis>replace_with_padding</emphasis> is <computeroutput>true</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace_with_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>See above.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1206" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1895" bodyend="1919"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga163c1b4d8fdd72c0d6fb8816b2ae9b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_insert_block_before</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__StreamMetadata *block)</argsstring>
        <name>FLAC__metadata_iterator_insert_block_before</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new block before the current block. You cannot insert a block before the first STREAMINFO block. You cannot insert a STREAMINFO block as there can be only one, the one that already exists at the head when you read in a chain. The chain takes ownership of the new block and it will be deleted when the chain is deleted. The iterator will be left pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a metadata block to insert.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, or a memory allocation error occurs, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1225" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1921" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level2_1ga2f9d8e02bd2e5ffb235af0b02d347d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_iterator_insert_block_after</definition>
        <argsstring>(FLAC__Metadata_Iterator *iterator, FLAC__StreamMetadata *block)</argsstring>
        <name>FLAC__metadata_iterator_insert_block_after</name>
        <param>
          <type><ref refid="struct_f_l_a_c_____metadata___iterator" kindref="compound">FLAC__Metadata_Iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new block after the current block. You cannot insert a STREAMINFO block as there can be only one, the one that already exists at the head when you read in a chain. The chain takes ownership of the new block and it will be deleted when the chain is deleted. The iterator will be left pointing to the new block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an existing initialized iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a metadata block to insert.  <programlisting><codeline><highlight class="normal">iterator<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <emphasis>iterator</emphasis> has been successfully initialized with <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>false</computeroutput> if the conditions in the above description are not met, or a memory allocation error occurs, otherwise <computeroutput>true</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="1243" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="1946" bodyend="1964"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The level 2 interface provides read-write access to <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file metadata; all metadata is read into memory, operated on in memory, and then written to file, which is more efficient than level 1 when editing multiple blocks. </para>    </briefdescription>
    <detaileddescription>
<para>Currently Ogg <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> is supported for read only, via <ref refid="group__flac__metadata__level2_1gae7b34f2929bedea0e14ac14aca253a40" kindref="member">FLAC__metadata_chain_read_ogg()</ref> but a subsequent <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref> will fail.</para><para>The general usage of this interface is:</para><para><itemizedlist>
<listitem><para>Create a new chain using <ref refid="group__flac__metadata__level2_1gafd1f4f58af29325b067ebc5dc34a0f69" kindref="member">FLAC__metadata_chain_new()</ref>. A chain is a linked list of <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> metadata blocks.</para></listitem><listitem><para>Read all metadata into the the chain from a <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file using <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref> or <ref refid="group__flac__metadata__level2_1gae7b34f2929bedea0e14ac14aca253a40" kindref="member">FLAC__metadata_chain_read_ogg()</ref> and check the status.</para></listitem><listitem><para>Optionally, consolidate the padding using <ref refid="group__flac__metadata__level2_1gab24934bc1f0e054c631a22c9b9221f3e" kindref="member">FLAC__metadata_chain_merge_padding()</ref> or <ref refid="group__flac__metadata__level2_1gaa14304da1c8e706808cfafa5cbbf575b" kindref="member">FLAC__metadata_chain_sort_padding()</ref>.</para></listitem><listitem><para>Create a new iterator using <ref refid="group__flac__metadata__level2_1gac988906d63bd2ddc910d8f0b118591f7" kindref="member">FLAC__metadata_iterator_new()</ref></para></listitem><listitem><para>Initialize the iterator to point to the first element in the chain using <ref refid="group__flac__metadata__level2_1ga4a5af69a1f19436b02f738eb8c97c959" kindref="member">FLAC__metadata_iterator_init()</ref></para></listitem><listitem><para>Traverse the chain using FLAC__metadata_iterator_next and <ref refid="group__flac__metadata__level2_1ga003373a88bea6cea2df32f110a95e912" kindref="member">FLAC__metadata_iterator_prev()</ref>.</para></listitem><listitem><para>Get a block for reading or modification using <ref refid="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" kindref="member">FLAC__metadata_iterator_get_block()</ref>. The pointer to the object inside the chain is returned, so the block is yours to modify. Changes will be reflected in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file when you write the chain. You can also add and delete blocks (see functions below).</para></listitem><listitem><para>When done, write out the chain using <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref>. Make sure to read the whole comment to the function below.</para></listitem><listitem><para>Delete the chain using <ref refid="group__flac__metadata__level2_1ga178898eef72ba9d569b1964fffcb4a8b" kindref="member">FLAC__metadata_chain_delete()</ref>.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Even though the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file is not open while the chain is being manipulated, you must not alter the file externally during this time. The chain assumes the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file will not change between the time of <ref refid="group__flac__metadata__level2_1gadb7d8e9a82aeb43e256f0a948adf5c45" kindref="member">FLAC__metadata_chain_read()</ref>/FLAC__metadata_chain_read_ogg() and <ref refid="group__flac__metadata__level2_1gaa15ead7230217de8e79f4af822cda490" kindref="member">FLAC__metadata_chain_write()</ref>.</para></simplesect>
<simplesect kind="note"><para>Do not modify the is_last, length, or type fields of returned <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> objects. These are managed automatically.</para></simplesect>
<simplesect kind="note"><para>The metadata objects returned by <ref refid="group__flac__metadata__level2_1ga4a2b00a4312d178a9f55c2e2f8b08904" kindref="member">FLAC__metadata_iterator_get_block()</ref> are owned by the chain; do not <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref> them. In the same way, blocks passed to <ref refid="group__flac__metadata__level2_1gab40c33a0bf35a2932a5c13f5230e0d9e" kindref="member">FLAC__metadata_iterator_set_block()</ref> become owned by the chain and they will be deleted when the chain is deleted. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
