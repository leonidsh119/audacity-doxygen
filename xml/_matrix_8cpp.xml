<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_matrix_8cpp" kind="file" language="C++">
    <compoundname>Matrix.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">wx/defs.h</includes>
    <includes refid="_matrix_8h" local="yes">Matrix.h</includes>
    <incdepgraph>
      <node id="48223">
        <label>stdlib.h</label>
      </node>
      <node id="48225">
        <label>wx/defs.h</label>
      </node>
      <node id="48224">
        <label>math.h</label>
      </node>
      <node id="48226">
        <label>Matrix.h</label>
        <link refid="_matrix_8h"/>
      </node>
      <node id="48222">
        <label>C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp</label>
        <link refid="Matrix.cpp"/>
        <childnode refid="48223" relation="include">
        </childnode>
        <childnode refid="48224" relation="include">
        </childnode>
        <childnode refid="48225" relation="include">
        </childnode>
        <childnode refid="48226" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_matrix_8cpp_1ad9d7d99dd654271cd8d9be5b1558e67d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix IdentityMatrix</definition>
        <argsstring>(int N)</argsstring>
        <name>IdentityMatrix</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a4dba5586909542d9eb8baca2e2968178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator+</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="168" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="168" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a37e080fb6b5cd0fbb3e8b050b1f0e9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator-</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="178" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a969eb3cd22d6c410c8583f3d3f1b7855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="188" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="188" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1aa1b2ebf52f824a2f3f66294af21e8748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;left, double right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>double</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="198" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a747d1a9a186333551108b2b977fc05e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector VectorSubset</definition>
        <argsstring>(const Vector &amp;other, int start, int len)</argsstring>
        <name>VectorSubset</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="207" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a369d6797b81674bd4b20fdf61e973ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector VectorConcatenate</definition>
        <argsstring>(const Vector &amp;left, const Vector &amp;right)</argsstring>
        <name>VectorConcatenate</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="216" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="216" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a893421561a23302eb92798d13f6cc7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;left, const Matrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="227" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="227" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a7ffca444240a3659ff0a4d326c5985d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Matrix &amp;left, const Vector &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="240" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="240" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1ac82b2ffb982879784a901be332961065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="253" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="253" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1afce00b1883e38645f3045313c03e66d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(const Matrix &amp;left, const double right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> double</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="265" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1aaa106b7c384fadadf2f7a6fb00e8d35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix ScalarMultiply</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>ScalarMultiply</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="275" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1ae93cae6a77d5f451d2dc1cddc228fc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix MatrixMultiply</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>MatrixMultiply</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="287" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="287" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1af7a707a64d37bcd6c3f574ff16711d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix MatrixSubset</definition>
        <argsstring>(const Matrix &amp;input, int startRow, int numRows, int startCol, int numCols)</argsstring>
        <name>MatrixSubset</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>startRow</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>numRows</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>startCol</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>numCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="301" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="301" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a5afff3fbc8a497f41fc2d145bc45df37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix MatrixConcatenateCols</definition>
        <argsstring>(const Matrix &amp;left, const Matrix &amp;right)</argsstring>
        <name>MatrixConcatenateCols</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="312" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="312" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a4975d319fff83afea9aea51d350478ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix TransposeMatrix</definition>
        <argsstring>(const Matrix &amp;other)</argsstring>
        <name>TransposeMatrix</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="326" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="326" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8cpp_1a5ac6ed01b14bafb22766429ff8fd364e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool InvertMatrix</definition>
        <argsstring>(const Matrix &amp;input, Matrix &amp;Minv)</argsstring>
        <name>InvertMatrix</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>Minv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" line="336" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp" bodystart="336" bodyend="393"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Matrix.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/defs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_matrix_8h" kindref="compound">Matrix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" refkind="member"><highlight class="normal"><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector::Vector</ref>()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/>mCopy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>mN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/>mData<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_vector_1ae28cce0873a84ac2f6bab50b6f5c3153" refkind="member"><highlight class="normal"><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector::Vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/>mN<sp/>=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>mCopy<sp/>=<sp/>copy;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCopy<sp/>||<sp/>!data)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mN];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;mN;<sp/>i++)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mData[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mData[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCopy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mData<sp/>=<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="class_vector_1a31810b59e0d9106aa17ecf6ae1cfbaf1" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="class_vector_1a31810b59e0d9106aa17ecf6ae1cfbaf1" kindref="member">Vector::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()<sp/>==<sp/>other.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mData[i]<sp/>=<sp/>other.mData[i];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_vector_1aa2218c168e40e0a82e110a6aa4f0fc22" refkind="member"><highlight class="normal"><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>CopyFrom(other);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector::CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>mN<sp/>=<sp/>other.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>mCopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>mData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mN];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;mN;<sp/>i++)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mData[i]<sp/>=<sp/>other.mData[i];</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_vector_1a2eb3c49587a4f12cade7895ccb73f6a0" refkind="member"><highlight class="normal"><ref refid="class_vector_1a2eb3c49587a4f12cade7895ccb73f6a0" kindref="member">Vector::~Vector</ref>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCopy)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>mData;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_vector_1a127a92bbacf31486af4479e92914ff96" refkind="member"><highlight class="normal"><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector::Vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>mCopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>mN<sp/>=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>mData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mN];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;mN;<sp/>i++)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mData[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_vector_1a459d9172b7e4d79c154aacc0ff4848b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a459d9172b7e4d79c154aacc0ff4848b6" kindref="member">Vector::Sum</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="86"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>mData[i];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_matrix_1aa01361959c35e56f45e210abc6952649" refkind="member"><highlight class="normal"><ref refid="class_matrix_1a2a090db2c88b7117d6be454aefd6d34d" kindref="member">Matrix::Matrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>mRows<sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>mCols<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>mRowVec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>*[mRows];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;mRows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector</ref>(mCols);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;mCols;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j]<sp/>=<sp/>data[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="class_matrix_1a3e40db12ae78b7616ee3f099bb15f13d" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/><ref refid="class_matrix_1a3e40db12ae78b7616ee3f099bb15f13d" kindref="member">Matrix::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>CopyFrom(other);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="class_matrix_1a2a090db2c88b7117d6be454aefd6d34d" refkind="member"><highlight class="normal"><ref refid="class_matrix_1a2a090db2c88b7117d6be454aefd6d34d" kindref="member">Matrix::Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>CopyFrom(other);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Matrix::CopyFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>mRows<sp/>=<sp/>other.mRows;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/>mCols<sp/>=<sp/>other.mCols;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>mRowVec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>*[mRows];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;mRows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a6f80c73b5f18dcf3f8e36065bdc8b9e5" kindref="member">Vector</ref>(mCols);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>*other.mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="class_matrix_1a9b1c3627f573d78a2f08623fdfef990f" refkind="member"><highlight class="normal"><ref refid="class_matrix_1a9b1c3627f573d78a2f08623fdfef990f" kindref="member">Matrix::~Matrix</ref>()</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;mRows;<sp/>i++)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mRowVec[i];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>mRowVec;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_matrix_1aa95562d3b99859088d14c5268a80e768" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_matrix_1aa95562d3b99859088d14c5268a80e768" kindref="member">Matrix::SwapRows</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>*tmp<sp/>=<sp/>mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>mRowVec[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>mRowVec[j];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>mRowVec[j]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_matrix_1adf4e7ada40a456d46cf2ebd0d8037bfe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_matrix_1adf4e7ada40a456d46cf2ebd0d8037bfe" kindref="member">Matrix::Sum</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="150"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;Rows();<sp/>i++)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;Cols();<sp/>j++)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*mRowVec[i])[j];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="_matrix_8h_1ad9d7d99dd654271cd8d9be5b1558e67d" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1ad9d7d99dd654271cd8d9be5b1558e67d" kindref="member">IdentityMatrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(N,<sp/>N);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M[i][i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="_matrix_8h_1a4dba5586909542d9eb8baca2e2968178" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a4dba5586909542d9eb8baca2e2968178" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()<sp/>==<sp/>right.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>left[i]<sp/>+<sp/>right[i];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="_matrix_8h_1a37e080fb6b5cd0fbb3e8b050b1f0e9d3" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a37e080fb6b5cd0fbb3e8b050b1f0e9d3" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()<sp/>==<sp/>right.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>left[i]<sp/>-<sp/>right[i];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="_matrix_8h_1a969eb3cd22d6c410c8583f3d3f1b7855" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()<sp/>==<sp/>right.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>left[i]<sp/>*<sp/>right[i];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="_matrix_8h_1aa1b2ebf52f824a2f3f66294af21e8748" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>left[i]<sp/>*<sp/>right;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="_matrix_8h_1a747d1a9a186333551108b2b977fc05e6" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a747d1a9a186333551108b2b977fc05e6" kindref="member">VectorSubset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1ac503262ae470564980711da4f78b1181" kindref="member">start</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(len);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>other[start+i];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="_matrix_8h_1a369d6797b81674bd4b20fdf61e973ec6" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a369d6797b81674bd4b20fdf61e973ec6" kindref="member">VectorConcatenate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>&amp;<sp/>right)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()<sp/>+<sp/>right.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>left[i];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;right.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i<sp/>+<sp/>left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()]<sp/>=<sp/>right[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="_matrix_8h_1a893421561a23302eb92798d13f6cc7dc" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;right.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>left[j]<sp/>*<sp/>right[j][i];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="_matrix_8h_1a7ffca444240a3659ff0a4d326c5985d4" refkind="member"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="_matrix_8cpp_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()<sp/>==<sp/>right.<ref refid="class_vector_1ae2aaf5da8f7af30ec6024f6c63d21f86" kindref="member">Len</ref>());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>v(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>left[i][j]<sp/>*<sp/>right[j];</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="_matrix_8h_1ac82b2ffb982879784a901be332961065" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1a4dba5586909542d9eb8baca2e2968178" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>(),<sp/>left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[i][j]<sp/>=<sp/>left[i][j]<sp/>+<sp/>right[i][j];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="_matrix_8h_1afce00b1883e38645f3045313c03e66d3" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1a969eb3cd22d6c410c8583f3d3f1b7855" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>(),<sp/>left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[i][j]<sp/>=<sp/>left[i][j]<sp/>*<sp/>right;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="_matrix_8h_1aaa106b7c384fadadf2f7a6fb00e8d35f" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1aaa106b7c384fadadf2f7a6fb00e8d35f" kindref="member">ScalarMultiply</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>(),<sp/>left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[i][j]<sp/>=<sp/>left[i][j]<sp/>*<sp/>right[i][j];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="_matrix_8h_1ae93cae6a77d5f451d2dc1cddc228fc31" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1ae93cae6a77d5f451d2dc1cddc228fc31" kindref="member">MatrixMultiply</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;right)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>(),<sp/>right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j,<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;<sp/>k&lt;left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>k++)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[i][j]<sp/>+=<sp/>left[i][k]<sp/>*<sp/>right[k][j];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="_matrix_8h_1a06577f4513972338dd8da6140cc419a1" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1af7a707a64d37bcd6c3f574ff16711d8c" kindref="member">MatrixSubset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;input,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startRow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numRows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startCol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numCols)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(numRows,<sp/>numCols);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;numRows;<sp/>i++)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;numCols;<sp/>j++)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M[i][j]<sp/>=<sp/>input[startRow+i][startCol+j];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="_matrix_8h_1a5afff3fbc8a497f41fc2d145bc45df37" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1a5afff3fbc8a497f41fc2d145bc45df37" kindref="member">MatrixConcatenateCols</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>right)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>()<sp/>==<sp/>right.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>(),<sp/>left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()<sp/>+<sp/>right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;left.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[i][j]<sp/>=<sp/>left[i][j];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;right.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[i][j+left.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>()]<sp/>=<sp/>right[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="_matrix_8h_1a04c3d9fa1972bf94783c234b6a60ac1b" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="_matrix_8cpp_1a4975d319fff83afea9aea51d350478ba" kindref="member">TransposeMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>(other.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>(),<sp/>other.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;other.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;other.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>[j][i]<sp/>=<sp/>other[i][j];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="_matrix_8h_1a5ac6ed01b14bafb22766429ff8fd364e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_matrix_8cpp_1a5ac6ed01b14bafb22766429ff8fd364e" kindref="member">InvertMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>input,<sp/><ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>Minv)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Very<sp/>straightforward<sp/>implementation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gauss-Jordan<sp/>elimination<sp/>to<sp/>invert<sp/>a<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(input.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>()<sp/>==<sp/>input.<ref refid="class_matrix_1a587812b4bf5f0e2b6da02c6336335531" kindref="member">Cols</ref>());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref><sp/>=<sp/>input.<ref refid="class_matrix_1adc52ae10fdf495191d3267d658978772" kindref="member">Rows</ref>();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>j,<sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/><ref refid="convtest_8m_1aad05f78187c942f9dd521605fa81f1ba" kindref="member">M</ref><sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/>Minv<sp/>=<sp/><ref refid="_matrix_8cpp_1ad9d7d99dd654271cd8d9be5b1558e67d" kindref="member">IdentityMatrix</ref>(N);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>elimination<sp/>one<sp/>column<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pivot<sp/>the<sp/>row<sp/>with<sp/>the<sp/>largest<sp/>absolute<sp/>value<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>i,<sp/>into<sp/>row<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absmax<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argmax=0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=i;<sp/>j&lt;<ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(M[j][i])<sp/>&gt;<sp/>absmax)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absmax<sp/>=<sp/>fabs(M[j][i]);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argmax<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>row<sp/>has<sp/>a<sp/>nonzero<sp/>value<sp/>in<sp/>that<sp/>column,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>matrix<sp/>is<sp/>singular<sp/>and<sp/>we<sp/>have<sp/>to<sp/>give<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absmax<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>argmax)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.<ref refid="class_matrix_1aa95562d3b99859088d14c5268a80e768" kindref="member">SwapRows</ref>(i,<sp/>argmax);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Minv.<ref refid="class_matrix_1aa95562d3b99859088d14c5268a80e768" kindref="member">SwapRows</ref>(i,<sp/>argmax);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>this<sp/>row<sp/>by<sp/>the<sp/>value<sp/>of<sp/>M[i][i]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>1.0<sp/>/<sp/>M[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>M[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Minv[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>Minv[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eliminate<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;<ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==i)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(M[j][i])<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>a<sp/>multiple<sp/>of<sp/>row<sp/>i<sp/>from<sp/>row<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>M[j][<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;<sp/>k&lt;<ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M[j][<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>]<sp/>-=<sp/>(M[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>]<sp/>*<sp/>factor);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Minv[j][<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>]<sp/>-=<sp/>(Minv[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][<ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref>]<sp/>*<sp/>factor);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/Matrix.cpp"/>
  </compounddef>
</doxygen>
