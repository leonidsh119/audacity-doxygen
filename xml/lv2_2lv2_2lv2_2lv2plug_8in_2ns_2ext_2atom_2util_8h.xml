<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h" kind="file" language="C++">
    <compoundname>util.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="atom_8h" local="yes">lv2/lv2plug.in/ns/ext/atom/atom.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="atom-test_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c</includedby>
    <includedby refid="forge_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h</includedby>
    <includedby refid="fifths_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-fifths.lv2/fifths.c</includedby>
    <includedby refid="metro_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-metro.lv2/metro.c</includedby>
    <includedby refid="midigate_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-midigate.lv2/midigate.c</includedby>
    <includedby refid="lv2_2lv2_2plugins_2eg-sampler_8lv2_2sampler_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler.c</includedby>
    <includedby refid="sampler__ui_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler_ui.c</includedby>
    <includedby refid="sratom_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/src/sratom.c</includedby>
    <includedby refid="sratom__test_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/tests/sratom_test.c</includedby>
    <incdepgraph>
      <node id="10594">
        <label>stdbool.h</label>
      </node>
      <node id="10589">
        <label>stdarg.h</label>
      </node>
      <node id="10590">
        <label>stdint.h</label>
      </node>
      <node id="10593">
        <label>stddef.h</label>
      </node>
      <node id="10591">
        <label>string.h</label>
      </node>
      <node id="10588">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h</label>
        <link refid="lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h"/>
        <childnode refid="10589" relation="include">
        </childnode>
        <childnode refid="10590" relation="include">
        </childnode>
        <childnode refid="10591" relation="include">
        </childnode>
        <childnode refid="10592" relation="include">
        </childnode>
        <childnode refid="10594" relation="include">
        </childnode>
      </node>
      <node id="10592">
        <label>lv2/lv2plug.in/ns/ext/atom/atom.h</label>
        <link refid="atom_8h"/>
        <childnode refid="10590" relation="include">
        </childnode>
        <childnode refid="10593" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10597">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/forge.h</label>
        <link refid="forge_8h"/>
        <childnode refid="10598" relation="include">
        </childnode>
        <childnode refid="10596" relation="include">
        </childnode>
        <childnode refid="10599" relation="include">
        </childnode>
        <childnode refid="10600" relation="include">
        </childnode>
        <childnode refid="10601" relation="include">
        </childnode>
        <childnode refid="10604" relation="include">
        </childnode>
        <childnode refid="10605" relation="include">
        </childnode>
        <childnode refid="10606" relation="include">
        </childnode>
      </node>
      <node id="10605">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/src/sratom.c</label>
        <link refid="sratom_8c"/>
      </node>
      <node id="10596">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/atom-test.c</label>
        <link refid="atom-test_8c"/>
      </node>
      <node id="10607">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-fifths.lv2/fifths.c</label>
        <link refid="fifths_8c"/>
      </node>
      <node id="10601">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/uris.h</label>
        <link refid="eg-scope_8lv2_2uris_8h"/>
        <childnode refid="10602" relation="include">
        </childnode>
        <childnode refid="10603" relation="include">
        </childnode>
      </node>
      <node id="10604">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/sratom/sratom.h</label>
        <link refid="sratom_8h"/>
        <childnode refid="10598" relation="include">
        </childnode>
        <childnode refid="10605" relation="include">
        </childnode>
        <childnode refid="10606" relation="include">
        </childnode>
      </node>
      <node id="10602">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope.c</label>
        <link refid="examploscope_8c"/>
      </node>
      <node id="10599">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler.c</label>
        <link refid="lv2_2lv2_2plugins_2eg-sampler_8lv2_2sampler_8c"/>
      </node>
      <node id="10595">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h</label>
        <link refid="lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h"/>
        <childnode refid="10596" relation="include">
        </childnode>
        <childnode refid="10597" relation="include">
        </childnode>
        <childnode refid="10607" relation="include">
        </childnode>
        <childnode refid="10608" relation="include">
        </childnode>
        <childnode refid="10609" relation="include">
        </childnode>
        <childnode refid="10599" relation="include">
        </childnode>
        <childnode refid="10600" relation="include">
        </childnode>
        <childnode refid="10605" relation="include">
        </childnode>
        <childnode refid="10606" relation="include">
        </childnode>
      </node>
      <node id="10600">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-sampler.lv2/sampler_ui.c</label>
        <link refid="sampler__ui_8c"/>
      </node>
      <node id="10606">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/sratom/tests/sratom_test.c</label>
        <link refid="sratom__test_8c"/>
      </node>
      <node id="10608">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-metro.lv2/metro.c</label>
        <link refid="metro_8c"/>
      </node>
      <node id="10598">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lilv/src/state.c</label>
        <link refid="state_8c"/>
      </node>
      <node id="10603">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-scope.lv2/examploscope_ui.c</label>
        <link refid="examploscope__ui_8c"/>
      </node>
      <node id="10609">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-midigate.lv2/midigate.c</label>
        <link refid="midigate_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_l_v2___atom___object___query" prot="public">LV2_Atom_Object_Query</innerclass>
      <sectiondef kind="user-defined">
      <header>Sequence Iterator</header>
      <memberdef kind="define" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1abb1a596ae5fb631dbc2c6021677bd370" prot="public" static="no">
        <name>LV2_ATOM_SEQUENCE_FOREACH</name>
        <param><defname>seq</defname></param>
        <param><defname>iter</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>* (iter) = lv2_atom_sequence_begin(&amp;(seq)-&gt;body); \
	     !lv2_atom_sequence_is_end(&amp;(seq)-&gt;body, (seq)-&gt;<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">atom.size</ref>, (iter)); \
	     (iter) = lv2_atom_sequence_next(iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A macro for iterating over all events in a <ref refid="class_sequence" kindref="compound">Sequence</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq</parametername>
</parameternamelist>
<parameterdescription>
<para>The sequence to iterate over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
This macro is used similarly to a for loop (which it expands to), e.g.: <programlisting><codeline><highlight class="normal">LV2_ATOM_SEQUENCE_FOREACH(sequence,<sp/>ev)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>ev<sp/>(an<sp/>LV2_Atom_Event*)<sp/>here...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="119" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ae2075da7db4e9d78f6713a27f0279d31" prot="public" static="no">
        <name>LV2_ATOM_SEQUENCE_BODY_FOREACH</name>
        <param><defname>body</defname></param>
        <param><defname>size</defname></param>
        <param><defname>iter</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>* (iter) = lv2_atom_sequence_begin(body); \
	     !lv2_atom_sequence_is_end(body, <ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>, (iter)); \
	     (iter) = lv2_atom_sequence_next(iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like LV2_ATOM_SEQUENCE_FOREACH but for a headerless sequence body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="125" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ae20934b2b95cfdc0a09423422e5b19c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
        <definition>static LV2_Atom_Event* lv2_atom_sequence_begin</definition>
        <argsstring>(const LV2_Atom_Sequence_Body *body)</argsstring>
        <name>lv2_atom_sequence_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator pointing to the first event in a <ref refid="class_sequence" kindref="compound">Sequence</ref> body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="77" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ab7da2233c79428a3cfcda9deab0b46ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
        <definition>static LV2_Atom_Event* lv2_atom_sequence_end</definition>
        <argsstring>(const LV2_Atom_Sequence_Body *body, uint32_t size)</argsstring>
        <name>lv2_atom_sequence_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator pointing to the end of a <ref refid="class_sequence" kindref="compound">Sequence</ref> body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="84" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a5f6dbe438edbc81bf9f8379f93203130" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_sequence_is_end</definition>
        <argsstring>(const LV2_Atom_Sequence_Body *body, uint32_t size, const LV2_Atom_Event *i)</argsstring>
        <name>lv2_atom_sequence_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>i</computeroutput> has reached the end of <computeroutput>body</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="91" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a76f431930eb266aa4d3cf4d580aa77de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
        <definition>static LV2_Atom_Event* lv2_atom_sequence_next</definition>
        <argsstring>(const LV2_Atom_Event *i)</argsstring>
        <name>lv2_atom_sequence_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an iterator to the element following <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="100" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="100" bodyend="105"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sequence Utilities</header>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a3a45311126da074aacbd1ac3741db5ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void lv2_atom_sequence_clear</definition>
        <argsstring>(LV2_Atom_Sequence *seq)</argsstring>
        <name>lv2_atom_sequence_clear</name>
        <param>
          <type><ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref> *</type>
          <declname>seq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear all events from <computeroutput>sequence</computeroutput>.</para><para>This simply resets the size field, the other fields are left untouched. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="142" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a6afded0a50f64fafa2cb9c3b2d9712ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
        <definition>static LV2_Atom_Event* lv2_atom_sequence_append_event</definition>
        <argsstring>(LV2_Atom_Sequence *seq, uint32_t capacity, const LV2_Atom_Event *event)</argsstring>
        <name>lv2_atom_sequence_append_event</name>
        <param>
          <type><ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref> *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>capacity</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append an event at the end of <computeroutput>sequence</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_sequence" kindref="compound">Sequence</ref> to append to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Total capacity of the sequence atom (e.g. as set by the host for sequence output ports). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to write.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly written event in <computeroutput>seq</computeroutput>, or NULL on failure (insufficient space). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="159" bodyend="174"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tuple Iterator</header>
      <memberdef kind="define" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a5abf66376d389ea91c40798a001f9cb9" prot="public" static="no">
        <name>LV2_ATOM_TUPLE_FOREACH</name>
        <param><defname>tuple</defname></param>
        <param><defname>iter</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>* (iter) = lv2_atom_tuple_begin(tuple); \
	     !lv2_atom_tuple_is_end(<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(tuple), (tuple)-&gt;<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>, (iter)); \
	     (iter) = lv2_atom_tuple_next(iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A macro for iterating over all properties of a Tuple. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple to iterate over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
This macro is used similarly to a for loop (which it expands to), e.g.: <programlisting><codeline><highlight class="normal">LV2_ATOMO_TUPLE_FOREACH(tuple,<sp/>elem)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>elem<sp/>(an<sp/>LV2_Atom*)<sp/>here...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="216" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ae9bf22b0da0455f8fe76dbfe07708869" prot="public" static="no">
        <name>LV2_ATOM_TUPLE_BODY_FOREACH</name>
        <param><defname>body</defname></param>
        <param><defname>size</defname></param>
        <param><defname>iter</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>* (iter) = (<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)body; \
	     !lv2_atom_tuple_is_end(body, <ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>, (iter)); \
	     (iter) = lv2_atom_tuple_next(iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like LV2_ATOM_TUPLE_FOREACH but for a headerless tuple body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="222" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a98c9a34f4992bb03f1b6a7f410fc99f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
        <definition>static LV2_Atom* lv2_atom_tuple_begin</definition>
        <argsstring>(const LV2_Atom_Tuple *tup)</argsstring>
        <name>lv2_atom_tuple_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___tuple" kindref="compound">LV2_Atom_Tuple</ref> *</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator pointing to the first element in <computeroutput>tup</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="184" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1af6d563c84dc6a2c3d62eb175ddef1523" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_tuple_is_end</definition>
        <argsstring>(const void *body, uint32_t size, const LV2_Atom *i)</argsstring>
        <name>lv2_atom_tuple_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>i</computeroutput> has reached the end of <computeroutput>body</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="191" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a8102e80f6d2e11b56b41c91e9a5627ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
        <definition>static LV2_Atom* lv2_atom_tuple_next</definition>
        <argsstring>(const LV2_Atom *i)</argsstring>
        <name>lv2_atom_tuple_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an iterator to the element following <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="198" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="198" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Object Iterator</header>
      <memberdef kind="define" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a86f07aefc191f7145846ccdf2082c7c9" prot="public" static="no">
        <name>LV2_ATOM_OBJECT_FOREACH</name>
        <param><defname>obj</defname></param>
        <param><defname>iter</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>* (iter) = lv2_atom_object_begin(&amp;(obj)-&gt;body); \
	     !lv2_atom_object_is_end(&amp;(obj)-&gt;body, (obj)-&gt;<ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">atom.size</ref>, (iter)); \
	     (iter) = lv2_atom_object_next(iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A macro for iterating over all properties of an Object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to iterate over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
This macro is used similarly to a for loop (which it expands to), e.g.: <programlisting><codeline><highlight class="normal">LV2_ATOM_OBJECT_FOREACH(object,<sp/>i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>prop<sp/>(an<sp/>LV2_Atom_Property_Body*)<sp/>here...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="272" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a05ed3468b622d351c8dd584b0b75d5cb" prot="public" static="no">
        <name>LV2_ATOM_OBJECT_BODY_FOREACH</name>
        <param><defname>body</defname></param>
        <param><defname>size</defname></param>
        <param><defname>iter</defname></param>
        <initializer><ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>* (iter) = lv2_atom_object_begin(body); \
	     !lv2_atom_object_is_end(body, <ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>, (iter)); \
	     (iter) = lv2_atom_object_next(iter))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like LV2_ATOM_OBJECT_FOREACH but for a headerless object body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="278" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1aa9c365c0ba3009d20840c2281ce0a337" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref> *</type>
        <definition>static LV2_Atom_Property_Body* lv2_atom_object_begin</definition>
        <argsstring>(const LV2_Atom_Object_Body *body)</argsstring>
        <name>lv2_atom_object_begin</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the first property in <computeroutput>body</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="235" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a78a87ec3ed81b10b5945ea2a40ce1330" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_object_is_end</definition>
        <argsstring>(const LV2_Atom_Object_Body *body, uint32_t size, const LV2_Atom_Property_Body *i)</argsstring>
        <name>lv2_atom_object_is_end</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>i</computeroutput> has reached the end of <computeroutput>obj</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="242" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a629b4ad8d4cfb69518a2b4f2ff04b6bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref> *</type>
        <definition>static LV2_Atom_Property_Body* lv2_atom_object_next</definition>
        <argsstring>(const LV2_Atom_Property_Body *i)</argsstring>
        <name>lv2_atom_object_next</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an iterator to the property following <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="251" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="251" bodyend="258"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Object Query</header>
      <memberdef kind="variable" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a64cdc5f8f48f253d283774b4bb8d52f5" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref></type>
        <definition>const LV2_Atom_Object_Query LV2_ATOM_OBJECT_QUERY_END</definition>
        <argsstring></argsstring>
        <name>LV2_ATOM_OBJECT_QUERY_END</name>
        <initializer>= { 0, <ref refid="px__mixer_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="295" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ad01da5669fc6ca4c802904ce5f25b799" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int lv2_atom_object_query</definition>
        <argsstring>(const LV2_Atom_Object *object, LV2_Atom_Object_Query *query)</argsstring>
        <name>lv2_atom_object_query</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref> *</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an object&apos;s values for various keys.</para><para>The value pointer of each item in <computeroutput>query</computeroutput> will be set to the location of the corresponding value in <computeroutput>object</computeroutput>. Every value pointer in <computeroutput>query</computeroutput> MUST be initialised to NULL. This function reads <computeroutput>object</computeroutput> in a single linear sweep. By allocating <computeroutput>query</computeroutput> on the stack, objects can be &quot;queried&quot; quickly without allocating any memory. This function is realtime safe.</para><para>This function can only do &quot;flat&quot; queries, it is not smart enough to match variables in nested objects.</para><para>For example: <programlisting><codeline><highlight class="normal">const<sp/>LV2_Atom*<sp/>name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>LV2_Atom*<sp/>age<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">LV2_Atom_Object_Query<sp/>q[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>urids.eg_name,<sp/>&amp;name<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>urids.eg_age,<sp/><sp/>&amp;age<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>LV2_ATOM_OBJECT_QUERY_END</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_object_query(obj,<sp/>q);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>name<sp/>and<sp/>age<sp/>are<sp/>now<sp/>set<sp/>to<sp/>the<sp/>appropriate<sp/>values<sp/>in<sp/>obj,<sp/>or<sp/>NULL.</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="323" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="323" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a5943fc5a867cb7a9602c0dbdd3786f32" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int lv2_atom_object_body_get</definition>
        <argsstring>(uint32_t size, const LV2_Atom_Object_Body *body,...)</argsstring>
        <name>lv2_atom_object_body_get</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Body only version of lv2_atom_object_get(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="352" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="352" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a9560d39cfbf25b71ebefe9aa43140d21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>static int lv2_atom_object_get</definition>
        <argsstring>(const LV2_Atom_Object *object,...)</argsstring>
        <name>lv2_atom_object_get</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variable argument version of lv2_atom_object_query().</para><para>This is nicer-looking in code, but a bit more error-prone since it is not type safe and the argument list must be terminated.</para><para>The arguments should be a series of uint32_t key and const LV2_Atom** value pairs, terminated by a zero key. The value pointers MUST be initialized to NULL. For example:</para><para><programlisting><codeline><highlight class="normal">const<sp/>LV2_Atom*<sp/>name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>LV2_Atom*<sp/>age<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">lv2_atom_object_get(obj,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uris.name_key,<sp/>&amp;name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uris.age_key,<sp/><sp/>&amp;age,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="405" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="405" bodyend="436"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a3414d7eb1c0ff99a5f5e4229a877f02e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t lv2_atom_pad_size</definition>
        <argsstring>(uint32_t size)</argsstring>
        <name>lv2_atom_pad_size</name>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pad a size to 64 bits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="42" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a8dfb09d4ea32462db95b4a57f075aed9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t lv2_atom_total_size</definition>
        <argsstring>(const LV2_Atom *atom)</argsstring>
        <name>lv2_atom_total_size</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>atom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the total size of <computeroutput>atom</computeroutput>, including the header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="49" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a2fa30afcb2c36ad41989a02ede3f9252" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_is_null</definition>
        <argsstring>(const LV2_Atom *atom)</argsstring>
        <name>lv2_atom_is_null</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>atom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>atom</computeroutput> is null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="56" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a1658bb4a93c0b8a2ea803d332aae8a0b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool lv2_atom_equals</definition>
        <argsstring>(const LV2_Atom *a, const LV2_Atom *b)</argsstring>
        <name>lv2_atom_equals</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true iff <computeroutput>a</computeroutput> is equal to <computeroutput>b</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" line="63" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h" bodystart="63" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>2008-2014<sp/>David<sp/>Robillard<sp/>&lt;http://drobilla.net&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor">#ifndef<sp/>LV2_ATOM_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LV2_ATOM_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atom_8h" kindref="compound">lv2/lv2plug.in/ns/ext/atom/atom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal">lv2_atom_pad_size(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(size<sp/>+<sp/>7U)<sp/>&amp;<sp/>(~7U);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">lv2_atom_total_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>atom)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>)<sp/>+<sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">lv2_atom_is_null(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>atom)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!atom<sp/>||<sp/>(atom-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>atom-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">lv2_atom_equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b)<sp/>||<sp/>((a-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref><sp/>==<sp/>b-&gt;<ref refid="struct_l_v2___atom_1a5d13f0da49ed0ad1102b651220d930cb" kindref="member">type</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>==<sp/>b-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!memcmp(a<sp/>+<sp/>1,<sp/>b<sp/>+<sp/>1,<sp/>a-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>));</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*</highlight></codeline>
<codeline lineno="77"><highlight class="normal">lv2_atom_sequence_begin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref>*<sp/>body)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*)(body<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*</highlight></codeline>
<codeline lineno="84"><highlight class="normal">lv2_atom_sequence_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref>*<sp/>body,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>size)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)body<sp/>+<sp/>lv2_atom_pad_size(size));</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">lv2_atom_sequence_is_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref>*<sp/>body,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i<sp/>&gt;=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)body<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*</highlight></codeline>
<codeline lineno="100"><highlight class="normal">lv2_atom_sequence_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*<sp/>i)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>lv2_atom_pad_size(i-&gt;<ref refid="struct_l_v2___atom___event_1a274e3113f8a11d44f6289a5546eadffb" kindref="member">body</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>));</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1abb1a596ae5fb631dbc2c6021677bd370" refkind="member"><highlight class="preprocessor">#define<sp/>LV2_ATOM_SEQUENCE_FOREACH(seq,<sp/>iter)<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(LV2_Atom_Event*<sp/>(iter)<sp/>=<sp/>lv2_atom_sequence_begin(&amp;(seq)-&gt;body);<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!lv2_atom_sequence_is_end(&amp;(seq)-&gt;body,<sp/>(seq)-&gt;atom.size,<sp/>(iter));<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter)<sp/>=<sp/>lv2_atom_sequence_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ae2075da7db4e9d78f6713a27f0279d31" refkind="member"><highlight class="preprocessor">#define<sp/>LV2_ATOM_SEQUENCE_BODY_FOREACH(body,<sp/>size,<sp/>iter)<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(LV2_Atom_Event*<sp/>(iter)<sp/>=<sp/>lv2_atom_sequence_begin(body);<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!lv2_atom_sequence_is_end(body,<sp/>size,<sp/>(iter));<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter)<sp/>=<sp/>lv2_atom_sequence_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">lv2_atom_sequence_clear(<ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref>*<sp/>seq)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>seq-&gt;<ref refid="struct_l_v2___atom___sequence_1a0e2e9e2e38a6a6d918f05f322ee567ee" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___sequence___body" kindref="compound">LV2_Atom_Sequence_Body</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*</highlight></codeline>
<codeline lineno="159"><highlight class="normal">lv2_atom_sequence_append_event(<ref refid="struct_l_v2___atom___sequence" kindref="compound">LV2_Atom_Sequence</ref>*<sp/><sp/><sp/><sp/>seq,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*<sp/>event)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>total_size<sp/>=<sp/>(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*event)<sp/>+<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;<ref refid="struct_l_v2___atom___event_1a274e3113f8a11d44f6289a5546eadffb" kindref="member">body</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity<sp/>-<sp/>seq-&gt;<ref refid="struct_l_v2___atom___sequence_1a0e2e9e2e38a6a6d918f05f322ee567ee" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>&lt;<sp/>total_size)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___event" kindref="compound">LV2_Atom_Event</ref>*<sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref><sp/>=<sp/>lv2_atom_sequence_end(&amp;seq-&gt;<ref refid="struct_l_v2___atom___sequence_1ab676c64fc85280dea192e5d879b1b9b2" kindref="member">body</ref>,<sp/>seq-&gt;<ref refid="struct_l_v2___atom___sequence_1a0e2e9e2e38a6a6d918f05f322ee567ee" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(e,<sp/>event,<sp/>total_size);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>seq-&gt;<ref refid="struct_l_v2___atom___sequence_1a0e2e9e2e38a6a6d918f05f322ee567ee" kindref="member">atom</ref>.<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref><sp/>+=<sp/>lv2_atom_pad_size(total_size);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*</highlight></codeline>
<codeline lineno="184"><highlight class="normal">lv2_atom_tuple_begin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___tuple" kindref="compound">LV2_Atom_Tuple</ref>*<sp/>tup)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)(<ref refid="atom_8h_1a496f8b7c9fa80904c0a64a272f216759" kindref="member">LV2_ATOM_BODY</ref>(tup));</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">lv2_atom_tuple_is_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>body,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>i)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i<sp/>&gt;=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)body<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*</highlight></codeline>
<codeline lineno="198"><highlight class="normal">lv2_atom_tuple_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/>i)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>)<sp/>+<sp/>lv2_atom_pad_size(i-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>));</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a5abf66376d389ea91c40798a001f9cb9" refkind="member"><highlight class="preprocessor">#define<sp/>LV2_ATOM_TUPLE_FOREACH(tuple,<sp/>iter)<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(LV2_Atom*<sp/>(iter)<sp/>=<sp/>lv2_atom_tuple_begin(tuple);<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!lv2_atom_tuple_is_end(LV2_ATOM_BODY(tuple),<sp/>(tuple)-&gt;size,<sp/>(iter));<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter)<sp/>=<sp/>lv2_atom_tuple_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1ae9bf22b0da0455f8fe76dbfe07708869" refkind="member"><highlight class="preprocessor">#define<sp/>LV2_ATOM_TUPLE_BODY_FOREACH(body,<sp/>size,<sp/>iter)<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(LV2_Atom*<sp/>(iter)<sp/>=<sp/>(LV2_Atom*)body;<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!lv2_atom_tuple_is_end(body,<sp/>size,<sp/>(iter));<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter)<sp/>=<sp/>lv2_atom_tuple_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>*</highlight></codeline>
<codeline lineno="235"><highlight class="normal">lv2_atom_object_begin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>*<sp/>body)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>*)(body<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">lv2_atom_object_is_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>*<sp/><sp/><sp/>body,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>*<sp/>i)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i<sp/>&gt;=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)body<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>*</highlight></codeline>
<codeline lineno="251"><highlight class="normal">lv2_atom_object_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>*<sp/>i)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>*)(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lib-src_2libsoxr_2msvc_2soxr-config_8h_1a0ddb3f43e52282b59ee55d059ed74a28" kindref="member">uint32_t</ref>));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>*)(</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a9a941819355e6f658991890ff66b4b0e" kindref="member">uint8_t</ref>*)i<sp/>+<sp/>lv2_atom_pad_size(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_l_v2___atom___property___body" kindref="compound">LV2_Atom_Property_Body</ref>)<sp/>+<sp/>value-&gt;<ref refid="struct_l_v2___atom_1a0f2fb72ad77d6e3dc119c56b40a6d639" kindref="member">size</ref>));</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a86f07aefc191f7145846ccdf2082c7c9" refkind="member"><highlight class="preprocessor">#define<sp/>LV2_ATOM_OBJECT_FOREACH(obj,<sp/>iter)<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(LV2_Atom_Property_Body*<sp/>(iter)<sp/>=<sp/>lv2_atom_object_begin(&amp;(obj)-&gt;body);<sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!lv2_atom_object_is_end(&amp;(obj)-&gt;body,<sp/>(obj)-&gt;atom.size,<sp/>(iter));<sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter)<sp/>=<sp/>lv2_atom_object_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a05ed3468b622d351c8dd584b0b75d5cb" refkind="member"><highlight class="preprocessor">#define<sp/>LV2_ATOM_OBJECT_BODY_FOREACH(body,<sp/>size,<sp/>iter)<sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(LV2_Atom_Property_Body*<sp/>(iter)<sp/>=<sp/>lv2_atom_object_begin(body);<sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!lv2_atom_object_is_end(body,<sp/>size,<sp/>(iter));<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter)<sp/>=<sp/>lv2_atom_object_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="struct_l_v2___atom___object___query" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="291" refid="struct_l_v2___atom___object___query_1a3be0152ec09bb2bd106d6bfe561347d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___object___query_1a3be0152ec09bb2bd106d6bfe561347d1" kindref="member">key</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292" refid="struct_l_v2___atom___object___query_1a0101d002fae056768c3fed36f1b564e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**<sp/><ref refid="struct_l_v2___atom___object___query_1a0101d002fae056768c3fed36f1b564e0" kindref="member">value</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal">}<sp/><ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref><sp/>LV2_ATOM_OBJECT_QUERY_END<sp/>=<sp/>{<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">lv2_atom_object_query(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref>*<sp/>query)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matches<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_queries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>number<sp/>of<sp/>query<sp/>keys<sp/>so<sp/>we<sp/>can<sp/>short-circuit<sp/>when<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref>*<sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref><sp/>=<sp/>query;<sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>-&gt;key;<sp/>++<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_queries;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a86f07aefc191f7145846ccdf2082c7c9" kindref="member">LV2_ATOM_OBJECT_FOREACH</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>prop)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_l_v2___atom___object___query" kindref="compound">LV2_Atom_Object_Query</ref>*<sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref><sp/>=<sp/>query;<sp/><ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>-&gt;key;<sp/>++<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>-&gt;key<sp/>==<sp/>prop-&gt;key<sp/>&amp;&amp;<sp/>!*<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>-&gt;value)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="genericdata_8c_1aed566b4fd5f50587a3ee550f7cd010ae" kindref="member">q</ref>-&gt;value<sp/>=<sp/>&amp;prop-&gt;value;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++matches<sp/>==<sp/>n_queries)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">lv2_atom_object_body_get(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object___body" kindref="compound">LV2_Atom_Object_Body</ref>*<sp/>body,<sp/>...)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matches<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_queries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>number<sp/>of<sp/>keys<sp/>so<sp/>we<sp/>can<sp/>short-circuit<sp/>when<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><ref refid="namespacelv2specgen_1a022f620722f1029244a92eca556aa50a" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>body);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n_queries<sp/>=<sp/>0;<sp/>va_arg(args,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>);<sp/>++n_queries)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!va_arg(args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a05ed3468b622d351c8dd584b0b75d5cb" kindref="member">LV2_ATOM_OBJECT_BODY_FOREACH</ref>(body,<sp/>size,<sp/>prop)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(args,<sp/>body);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_queries;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qkey<sp/>=<sp/>va_arg(args,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**<sp/>qval<sp/>=<sp/>va_arg(args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qkey<sp/>==<sp/>prop-&gt;key<sp/>&amp;&amp;<sp/>!*qval)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*qval<sp/>=<sp/>&amp;prop-&gt;value;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++matches<sp/>==<sp/>n_queries)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">lv2_atom_object_get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom___object" kindref="compound">LV2_Atom_Object</ref>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>...)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matches<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_queries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>number<sp/>of<sp/>keys<sp/>so<sp/>we<sp/>can<sp/>short-circuit<sp/>when<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><ref refid="namespacelv2specgen_1a022f620722f1029244a92eca556aa50a" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n_queries<sp/>=<sp/>0;<sp/>va_arg(args,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>);<sp/>++n_queries)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!va_arg(args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv2_2lv2_2lv2_2lv2plug_8in_2ns_2ext_2atom_2util_8h_1a86f07aefc191f7145846ccdf2082c7c9" kindref="member">LV2_ATOM_OBJECT_FOREACH</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>prop)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(args,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_queries;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qkey<sp/>=<sp/>va_arg(args,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a6eb1e68cc391dd753bc8ce896dbb8315" kindref="member">uint32_t</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**<sp/>qval<sp/>=<sp/>va_arg(args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_l_v2___atom" kindref="compound">LV2_Atom</ref>**);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qkey<sp/>==<sp/>prop-&gt;key<sp/>&amp;&amp;<sp/>!*qval)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*qval<sp/>=<sp/>&amp;prop-&gt;value;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++matches<sp/>==<sp/>n_queries)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LV2_ATOM_UTIL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/lv2/lv2plug.in/ns/ext/atom/util.h"/>
  </compounddef>
</doxygen>
