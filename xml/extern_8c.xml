<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="extern_8c" kind="file" language="C++">
    <compoundname>extern.c</compoundname>
    <includes refid="xlisp_8h" local="yes">xlisp.h</includes>
    <includes refid="extern_8h" local="yes">extern.h</includes>
    <incdepgraph>
      <node id="18204">
        <label>stdlib.h</label>
      </node>
      <node id="18207">
        <label>setjmp.h</label>
      </node>
      <node id="18203">
        <label>xlisp.h</label>
        <link refid="xlisp_8h"/>
        <childnode refid="18204" relation="include">
        </childnode>
        <childnode refid="18205" relation="include">
        </childnode>
        <childnode refid="18206" relation="include">
        </childnode>
        <childnode refid="18207" relation="include">
        </childnode>
        <childnode refid="18208" relation="include">
        </childnode>
      </node>
      <node id="18202">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c</label>
        <link refid="extern.c"/>
        <childnode refid="18203" relation="include">
        </childnode>
        <childnode refid="18209" relation="include">
        </childnode>
      </node>
      <node id="18208">
        <label>xldmem.h</label>
        <link refid="xldmem_8h"/>
      </node>
      <node id="18209">
        <label>extern.h</label>
        <link refid="extern_8h"/>
      </node>
      <node id="18206">
        <label>ctype.h</label>
      </node>
      <node id="18205">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="extern_8c_1ab5341773a4a1b541c142864ba6cb63b1" prot="public" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int extindex</definition>
        <argsstring></argsstring>
        <name>extindex</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="50" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="extern_8c_1a1df3539f83b23607a2a352e8e0120527" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structxtype__desc__struct" kindref="compound">xtype_desc_struct</ref></type>
        <definition>struct xtype_desc_struct desc_table[NTYPES]</definition>
        <argsstring>[NTYPES]</argsstring>
        <name>desc_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="50" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="extern_8c_1a1bd70852ca0b14b29e26634a49680b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xldmem_8h_1a0be3e14d136961c8b18bb2d300e0872f" kindref="member">xtype_desc</ref></type>
        <definition>xtype_desc create_desc</definition>
        <argsstring>(char *type_name, void(*fm)(void *), void(*pm)(void *, void *), void(*sm)(FILE *, void *), unsigned char *(*rm)(FILE *), void(*mm)(void *))</argsstring>
        <name>create_desc</name>
        <param>
          <type>char *</type>
          <declname>type_name</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *)</type>
          <declname>fm</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *, <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *)</type>
          <declname>pm</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*)(FILE *, <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *)</type>
          <declname>sm</declname>
        </param>
        <param>
          <type>unsigned char *(*)(FILE *)</type>
          <declname>rm</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>(*)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *)</type>
          <declname>mm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="57" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="57" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="extern_8c_1a56975b0d43047809420a006ca3f631d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xldmem_8h_1a9a9ec6a5fbca2b40ed8d19faa799be8c" kindref="member">LVAL</ref></type>
        <definition>LVAL cvextern</definition>
        <argsstring>(xtype_desc typeptr, unsigned char *instptr)</argsstring>
        <name>cvextern</name>
        <param>
          <type><ref refid="xldmem_8h_1a0be3e14d136961c8b18bb2d300e0872f" kindref="member">xtype_desc</ref></type>
          <declname>typeptr</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>instptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="81" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="extern_8c_1a31ebd98dfefca66197c1f63a22dd8004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xldmem_8h_1a9a9ec6a5fbca2b40ed8d19faa799be8c" kindref="member">LVAL</ref></type>
        <definition>LVAL exttype</definition>
        <argsstring>(LVAL x)</argsstring>
        <name>exttype</name>
        <param>
          <type><ref refid="xldmem_8h_1a9a9ec6a5fbca2b40ed8d19faa799be8c" kindref="member">LVAL</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="95" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="extern_8c_1a1676cd2b77ed1a51590fd74279b96312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int exttypep</definition>
        <argsstring>(LVAL x, LVAL type_sym)</argsstring>
        <name>exttypep</name>
        <param>
          <type><ref refid="xldmem_8h_1a9a9ec6a5fbca2b40ed8d19faa799be8c" kindref="member">LVAL</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="xldmem_8h_1a9a9ec6a5fbca2b40ed8d19faa799be8c" kindref="member">LVAL</ref></type>
          <declname>type_sym</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="109" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="extern_8c_1afaff0e0a3c5582e91f42cecbe3aa2d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void inval_caches</definition>
        <argsstring>()</argsstring>
        <name>inval_caches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" line="123" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c" bodystart="123" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>extern.c<sp/>-<sp/>external<sp/>type<sp/>support<sp/>for<sp/>xlisp<sp/>2.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Description<sp/>of<sp/>external<sp/>types:</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>new<sp/>node<sp/>type<sp/>EXTERN<sp/>has<sp/>been<sp/>created<sp/>to<sp/>allow<sp/>extensions<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="6"><highlight class="comment">xlisp<sp/>type<sp/>system.<sp/><sp/>If<sp/>a<sp/>node<sp/>is<sp/>of<sp/>type<sp/>EXTERN<sp/>then<sp/>it<sp/>contains<sp/>two<sp/>fields:</highlight></codeline>
<codeline lineno="7"><highlight class="comment">(1)<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>type<sp/>descriptor,<sp/>and<sp/>(2)<sp/>a<sp/>value<sp/>which<sp/>is<sp/>normally<sp/>a<sp/>pointer</highlight></codeline>
<codeline lineno="8"><highlight class="comment">to<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>data<sp/>type.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>type<sp/>descriptor<sp/>has<sp/>6<sp/>fields:</highlight></codeline>
<codeline lineno="10"><highlight class="comment">type_name:<sp/>a<sp/>string<sp/>name<sp/>for<sp/>the<sp/>type</highlight></codeline>
<codeline lineno="11"><highlight class="comment">type_symbol:<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>symbol<sp/>whose<sp/>print<sp/>name<sp/>is<sp/>type_name</highlight></codeline>
<codeline lineno="12"><highlight class="comment">free_meth:<sp/>routine<sp/>to<sp/>call<sp/>when<sp/>the<sp/>node<sp/>is<sp/>freed</highlight></codeline>
<codeline lineno="13"><highlight class="comment">print_meth:<sp/>routine<sp/>to<sp/>call<sp/>to<sp/>print<sp/>the<sp/>node</highlight></codeline>
<codeline lineno="14"><highlight class="comment">save_meth:<sp/>routine<sp/>to<sp/>save<sp/>the<sp/>value<sp/>to<sp/>a<sp/>file</highlight></codeline>
<codeline lineno="15"><highlight class="comment">restore_meth:<sp/>routine<sp/>to<sp/>restore<sp/>the<sp/>value<sp/>from<sp/>a<sp/>file</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>routine<sp/>create_desc()<sp/>is<sp/>used<sp/>to<sp/>allocate<sp/>and<sp/>initialize<sp/>a<sp/>type</highlight></codeline>
<codeline lineno="17"><highlight class="comment">descriptor.<sp/><sp/>There<sp/>should<sp/>be<sp/>only<sp/>one<sp/>type<sp/>descriptor<sp/>for<sp/>each<sp/>unique<sp/>type.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">Typically,<sp/>the<sp/>module<sp/>that<sp/>manages<sp/>a<sp/>type<sp/>will<sp/>create<sp/>the<sp/>type<sp/>descriptor</highlight></codeline>
<codeline lineno="19"><highlight class="comment">at<sp/>initialization<sp/>time.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>routine<sp/>cvextern()<sp/>is<sp/>used<sp/>to<sp/>combine<sp/>a<sp/>type<sp/>descriptor<sp/>and<sp/>a</highlight></codeline>
<codeline lineno="21"><highlight class="comment">value<sp/>to<sp/>create<sp/>an<sp/>EXTERN<sp/>node<sp/>that<sp/>can<sp/>be<sp/>used<sp/>by<sp/>xlisp.<sp/><sp/>This<sp/>routine<sp/>is</highlight></codeline>
<codeline lineno="22"><highlight class="comment">called<sp/>whenever<sp/>a<sp/>new<sp/>value<sp/>is<sp/>allocated<sp/>and<sp/>returned<sp/>to<sp/>xlisp.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>routine<sp/>exttype()<sp/>returns<sp/>the<sp/>type<sp/>symbol<sp/>for<sp/>an<sp/>EXTERN<sp/>type.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>routine<sp/>exttypep()<sp/>tests<sp/>for<sp/>a<sp/>type<sp/>match.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>EXTERN<sp/>objects<sp/>are<sp/>dynamically<sp/>allocated<sp/>and<sp/>freed,<sp/>then<sp/>there</highlight></codeline>
<codeline lineno="26"><highlight class="comment">should<sp/>only<sp/>be<sp/>one<sp/>EXTERN<sp/>node<sp/>whose<sp/>value<sp/>field<sp/>(xe_inst)<sp/>points<sp/>to<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="27"><highlight class="comment">If<sp/>there<sp/>is<sp/>more<sp/>than<sp/>one<sp/>node<sp/>(normally<sp/>created<sp/>only<sp/>by<sp/>cvextern),<sp/>then<sp/>one</highlight></codeline>
<codeline lineno="28"><highlight class="comment">of<sp/>the<sp/>following<sp/>should<sp/>hold:</highlight></codeline>
<codeline lineno="29"><highlight class="comment">1.<sp/>the<sp/>object<sp/>is<sp/>not<sp/>dynamically<sp/>freed.</highlight></codeline>
<codeline lineno="30"><highlight class="comment">2.<sp/>the<sp/>object<sp/>is<sp/>reference<sp/>counted<sp/>and<sp/>freed<sp/>when<sp/>the<sp/>last<sp/>EXTERN<sp/>node<sp/>is<sp/>gc&apos;d.</highlight></codeline>
<codeline lineno="31"><highlight class="comment">3.<sp/>the<sp/>object<sp/>will<sp/>be<sp/>freed<sp/>when<sp/>the<sp/>first<sp/>node<sp/>pointing<sp/>to<sp/>it<sp/>is<sp/>gc&apos;d,<sp/>resulting</highlight></codeline>
<codeline lineno="32"><highlight class="comment">in<sp/>a<sp/>dangling<sp/>pointer<sp/>bug.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>save<sp/>and<sp/>restore<sp/>capability<sp/>of<sp/>xlisp<sp/>version<sp/>2.0<sp/>causes<sp/>some</highlight></codeline>
<codeline lineno="34"><highlight class="comment">difficulties<sp/>in<sp/>that<sp/>symbols<sp/>get<sp/>relocated<sp/>whenever<sp/>a<sp/>workspace<sp/>is<sp/>loaded.</highlight></codeline>
<codeline lineno="35"><highlight class="comment">However,<sp/>type<sp/>descriptors<sp/>must<sp/>point<sp/>to<sp/>symbols<sp/>and<sp/>type<sp/>descriptors<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="36"><highlight class="comment">present<sp/>in<sp/>order<sp/>to<sp/>load<sp/>external<sp/>types<sp/>from<sp/>a<sp/>workspace.<sp/><sp/>My<sp/>solution<sp/>to<sp/>this</highlight></codeline>
<codeline lineno="37"><highlight class="comment">problem<sp/>is<sp/>to<sp/>store<sp/>a<sp/>string<sp/>name<sp/>for<sp/>each<sp/>type<sp/>and<sp/>also<sp/>to<sp/>cache<sp/>a<sp/>pointer</highlight></codeline>
<codeline lineno="38"><highlight class="comment">to<sp/>the<sp/>corresponding<sp/>symbol.<sp/><sp/>The<sp/>cache<sp/>is<sp/>invalidated<sp/>whenever<sp/>a<sp/>workspace<sp/>is</highlight></codeline>
<codeline lineno="39"><highlight class="comment">loaded<sp/>(causing<sp/>symbols<sp/>to<sp/>be<sp/>reallocated).<sp/><sp/>To<sp/>make<sp/>it<sp/>possible<sp/>to<sp/>save<sp/>and</highlight></codeline>
<codeline lineno="40"><highlight class="comment">restore<sp/>references<sp/>to<sp/>type<sp/>descriptors,<sp/>all<sp/>type<sp/>descriptors<sp/>are<sp/>kept<sp/>in</highlight></codeline>
<codeline lineno="41"><highlight class="comment">static<sp/>storage.<sp/><sp/>Internally,<sp/>they<sp/>are<sp/>referenced<sp/>by<sp/>pointers,<sp/>but<sp/>when<sp/>saved,</highlight></codeline>
<codeline lineno="42"><highlight class="comment">an<sp/>integer<sp/>index<sp/>is<sp/>used.<sp/><sp/>Because<sp/>of<sp/>the<sp/>integer<sp/>index,<sp/>types<sp/>must<sp/>always<sp/>be</highlight></codeline>
<codeline lineno="43"><highlight class="comment">allocated<sp/>in<sp/>the<sp/>same<sp/>order.<sp/><sp/>This<sp/>is<sp/>taken<sp/>care<sp/>of<sp/>in<sp/>localinit().</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xlisp_8h" kindref="compound">xlisp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="extern_8h" kindref="compound">extern.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="extern_8c_1ab5341773a4a1b541c142864ba6cb63b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="extern_8c_1ab5341773a4a1b541c142864ba6cb63b1" kindref="member">extindex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="extern_8c_1a1df3539f83b23607a2a352e8e0120527" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structxtype__desc__struct" kindref="compound">xtype_desc_struct</ref><sp/><ref refid="extern_8c_1a1df3539f83b23607a2a352e8e0120527" kindref="member">desc_table</ref>[<ref refid="xlisp_8h_1aa4f89d423823b0ae19241ee5ad71b1ed" kindref="member">NTYPES</ref>];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>create_desc<sp/>-<sp/>create<sp/>a<sp/>new<sp/>external<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="xldmem_8h_1a1bd70852ca0b14b29e26634a49680b3e" refkind="member"><highlight class="normal"><ref refid="structxtype__desc__struct" kindref="compound">xtype_desc</ref><sp/><ref refid="extern_8c_1a1bd70852ca0b14b29e26634a49680b3e" kindref="member">create_desc</ref>(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structxtype__desc__struct_1a4d8c07f36fad3beddede142aa20d7051" kindref="member">type_name</ref>,<sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>type<sp/>string<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fm)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>method<sp/>to<sp/>free<sp/>instances<sp/>of<sp/>the<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*pm)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>method<sp/>to<sp/>print<sp/>instances<sp/>of<sp/>the<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*sm)(FILE*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>method<sp/>to<sp/>save<sp/>instances<sp/>of<sp/>the<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*rm)(FILE*),<sp/></highlight><highlight class="comment">/*<sp/>method<sp/>to<sp/>restore<sp/>instances<sp/>of<sp/>the<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*mm)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>method<sp/>to<sp/>mark<sp/>instances<sp/>of<sp/>the<sp/>type<sp/>for<sp/>GC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxtype__desc__struct" kindref="compound">xtype_desc</ref><sp/>td;<sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>new<sp/>type<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="extern_8c_1ab5341773a4a1b541c142864ba6cb63b1" kindref="member">extindex</ref><sp/>&gt;=<sp/><ref refid="xlisp_8h_1aa4f89d423823b0ae19241ee5ad71b1ed" kindref="member">NTYPES</ref>)<sp/><ref refid="xldbug_8c_1aaebeabdcebf1b39c984723f1727ddeed" kindref="member">xlfail</ref>(</highlight><highlight class="stringliteral">&quot;insufficient<sp/>type<sp/>desc<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>td<sp/>=<sp/>&amp;<ref refid="extern_8c_1a1df3539f83b23607a2a352e8e0120527" kindref="member">desc_table</ref>[<ref refid="extern_8c_1ab5341773a4a1b541c142864ba6cb63b1" kindref="member">extindex</ref>++];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1a4d8c07f36fad3beddede142aa20d7051" kindref="member">type_name</ref><sp/>=<sp/><ref refid="structxtype__desc__struct_1a4d8c07f36fad3beddede142aa20d7051" kindref="member">type_name</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1ab1ae78715eb721572b404dd2577aae50" kindref="member">type_symbol</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1af4b02eb08915eef7642227bbf5d04031" kindref="member">free_meth</ref><sp/>=<sp/>fm;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1a0a33189e5a8b08ec235e2b2faad8db61" kindref="member">print_meth</ref><sp/>=<sp/>pm;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1a151b060e4c324981ff30fb9738fb5559" kindref="member">save_meth</ref><sp/>=<sp/>sm;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1a3282dd0e4b267fb5338d7c6084667e2b" kindref="member">restore_meth</ref><sp/>=<sp/>rm;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>td-&gt;<ref refid="structxtype__desc__struct_1ad2a148a69083b13dae6a20eec06f978f" kindref="member">mark_meth</ref><sp/>=<sp/>mm;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>td;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>cvextern<sp/>-<sp/>create<sp/>an<sp/>instance<sp/>of<sp/>some<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="xlisp_8h_1a56975b0d43047809420a006ca3f631d1" refkind="member"><highlight class="normal"><ref refid="structnode" kindref="compound">LVAL</ref><sp/><ref refid="extern_8c_1a56975b0d43047809420a006ca3f631d1" kindref="member">cvextern</ref>(typeptr,<sp/>instptr)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="structxtype__desc__struct" kindref="compound">xtype_desc</ref><sp/>typeptr;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>type<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*instptr;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnode" kindref="compound">LVAL</ref><sp/>xnode;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>resulting<sp/>lisp<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>xnode<sp/>=<sp/><ref refid="xldmem_8c_1a7bf22e491e132d18e9b1b574743edabd" kindref="member">newnode</ref>(<ref refid="xldmem_8h_1a77366c1bd428629dc898e188bfd182a3" kindref="member">EXTERN</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xldmem_8h_1a12d5135bbed95bbc992e4de7773b71b8" kindref="member">setdesc</ref>(xnode,<sp/>typeptr);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xldmem_8h_1a0b650d3288b99dda425285f3eee6617b" kindref="member">setinst</ref>(xnode,<sp/>instptr);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xnode;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>exttype<sp/>--<sp/>get<sp/>the<sp/>type<sp/>of<sp/>an<sp/>EXTERN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="extern_8c_1a31ebd98dfefca66197c1f63a22dd8004" refkind="member"><highlight class="normal"><ref refid="structnode" kindref="compound">LVAL</ref><sp/><ref refid="extern_8c_1a31ebd98dfefca66197c1f63a22dd8004" kindref="member">exttype</ref>(<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="structnode" kindref="compound">LVAL</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;<ref refid="structxtype__desc__struct_1ab1ae78715eb721572b404dd2577aae50" kindref="member">type_symbol</ref>))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;type_symbol<sp/>=<sp/><ref refid="xlisp_8h_1af2f3848a186324b30a549837c5e70eea" kindref="member">xlenter</ref>(<ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;type_name);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;type_symbol;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>exttypep<sp/>--<sp/>test<sp/>for<sp/>type<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>x<sp/>is<sp/>a<sp/>node,<sp/>type_sym<sp/>is<sp/>a<sp/>symbol</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="extern_8h_1a1676cd2b77ed1a51590fd74279b96312" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="extern_8c_1a1676cd2b77ed1a51590fd74279b96312" kindref="member">exttypep</ref>(<ref refid="structnode" kindref="compound">LVAL</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/><ref refid="structnode" kindref="compound">LVAL</ref><sp/>type_sym)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x)<sp/>&amp;&amp;<sp/><ref refid="xldmem_8h_1a0bea87e39e2918e4bc96203b6912afa8" kindref="member">ntype</ref>(x)<sp/>==<sp/><ref refid="xldmem_8h_1a77366c1bd428629dc898e188bfd182a3" kindref="member">EXTERN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;<ref refid="structxtype__desc__struct_1ab1ae78715eb721572b404dd2577aae50" kindref="member">type_symbol</ref>))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;type_symbol<sp/>=<sp/><ref refid="xlisp_8h_1af2f3848a186324b30a549837c5e70eea" kindref="member">xlenter</ref>(<ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;type_name);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="xldmem_8h_1abba602f5bf3bd7422a1889eb229c79f6" kindref="member">getdesc</ref>(x)-&gt;<ref refid="structxtype__desc__struct_1ab1ae78715eb721572b404dd2577aae50" kindref="member">type_symbol</ref><sp/>==<sp/>type_sym);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cext_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inval_caches<sp/>--<sp/>set<sp/>type_symbol<sp/>fields<sp/>to<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="xlisp_8h_1adc3d9cc45216649a3d2dc1b6dc3bbe87" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="extern_8c_1afaff0e0a3c5582e91f42cecbe3aa2d0e" kindref="member">inval_caches</ref>()</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="extern_8c_1ab5341773a4a1b541c142864ba6cb63b1" kindref="member">extindex</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="extern_8c_1a1df3539f83b23607a2a352e8e0120527" kindref="member">desc_table</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="structxtype__desc__struct_1ab1ae78715eb721572b404dd2577aae50" kindref="member">type_symbol</ref><sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libnyquist/nyquist/xlisp/extern.c"/>
  </compounddef>
</doxygen>
