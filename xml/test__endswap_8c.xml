<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test__endswap_8c" kind="file" language="C++">
    <compoundname>test_endswap.c</compoundname>
    <includes refid="sfconfig_8h" local="yes">sfconfig.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">inttypes.h</includes>
    <includes refid="libsndfile_2src_2common_8h" local="yes">common.h</includes>
    <includes refid="sfendian_8h" local="yes">sfendian.h</includes>
    <includes refid="test__main_8h" local="yes">test_main.h</includes>
    <incdepgraph>
      <node id="20306">
        <label>sfendian.h</label>
        <link refid="sfendian_8h"/>
        <childnode refid="20297" relation="include">
        </childnode>
      </node>
      <node id="20300">
        <label>stdlib.h</label>
      </node>
      <node id="20302">
        <label>errno.h</label>
      </node>
      <node id="20305">
        <label>sndfile.h</label>
      </node>
      <node id="20301">
        <label>string.h</label>
      </node>
      <node id="20297">
        <label>sfconfig.h</label>
        <link refid="sfconfig_8h"/>
        <childnode refid="20298" relation="include">
        </childnode>
      </node>
      <node id="20304">
        <label>common.h</label>
        <link refid="libsndfile_2src_2common_8h"/>
        <childnode refid="20297" relation="include">
        </childnode>
        <childnode refid="20300" relation="include">
        </childnode>
        <childnode refid="20301" relation="include">
        </childnode>
        <childnode refid="20305" relation="include">
        </childnode>
      </node>
      <node id="20307">
        <label>test_main.h</label>
        <link refid="test__main_8h"/>
      </node>
      <node id="20298">
        <label>config.h</label>
      </node>
      <node id="20299">
        <label>stdio.h</label>
      </node>
      <node id="20296">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c</label>
        <link refid="test_endswap.c"/>
        <childnode refid="20297" relation="include">
        </childnode>
        <childnode refid="20299" relation="include">
        </childnode>
        <childnode refid="20300" relation="include">
        </childnode>
        <childnode refid="20301" relation="include">
        </childnode>
        <childnode refid="20302" relation="include">
        </childnode>
        <childnode refid="20303" relation="include">
        </childnode>
        <childnode refid="20304" relation="include">
        </childnode>
        <childnode refid="20306" relation="include">
        </childnode>
        <childnode refid="20307" relation="include">
        </childnode>
      </node>
      <node id="20303">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__endswap_8c_1a2394095c0315674eb5566aec5be60400" prot="public" static="no">
        <name>FMT_SHORT</name>
        <initializer>&quot;0x%04x\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="36" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__endswap_8c_1a898c36de7b543711699d8e3c516e4c09" prot="public" static="no">
        <name>FMT_INT</name>
        <initializer>&quot;0x%08x\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="37" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__endswap_8c_1aad88cf9252037fc1b4e5cfbec0f02b75" prot="public" static="no">
        <name>FMT_INT64</name>
        <initializer>&quot;0x%016&quot; PRIx64 &quot;\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="38" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__endswap_8c_1acfe183c61009471ee9bfa29436d132c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void dump_short_array</definition>
        <argsstring>(const char *name, short *data, int datalen)</argsstring>
        <name>dump_short_array</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>datalen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="46" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="test__endswap_8c_1a567bdf416b1f5870e9bcc390853359c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void test_endswap_short</definition>
        <argsstring>(void)</argsstring>
        <name>test_endswap_short</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="56" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="56" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="test__endswap_8c_1a373f6fd1a4cb8532821ccb9ed5f35296" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void dump_int_array</definition>
        <argsstring>(const char *name, int *data, int datalen)</argsstring>
        <name>dump_int_array</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>datalen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="106" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="test__endswap_8c_1ae1ac1f6fbe2ccde295f4b41474443483" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void test_endswap_int</definition>
        <argsstring>(void)</argsstring>
        <name>test_endswap_int</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="116" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="116" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="test__endswap_8c_1a6e78ebc8081eb0611765eeb44864cf7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void dump_int64_t_array</definition>
        <argsstring>(const char *name, int64_t *data, int datalen)</argsstring>
        <name>dump_int64_t_array</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>datalen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="166" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="test__endswap_8c_1a45e12db8e0864af0a13ca5f4e4881149" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void test_endswap_int64_t</definition>
        <argsstring>(void)</argsstring>
        <name>test_endswap_int64_t</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="176" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="176" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="test__endswap_8c_1a6420236eb8a21a47d846b4fec035b511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void test_endswap</definition>
        <argsstring>(void)</argsstring>
        <name>test_endswap</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" line="228" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c" bodystart="228" bodyend="234"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>Copyright<sp/>(C)<sp/>2002-2011<sp/>Erik<sp/>de<sp/>Castro<sp/>Lopo<sp/>&lt;erikd@mega-nerd.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment">**<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment">**<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">**</highlight></codeline>
<codeline lineno="9"><highlight class="comment">**<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">**<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment">**<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">**</highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="16"><highlight class="comment">**<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/>02111-1307,<sp/>USA.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sfconfig_8h" kindref="compound">sfconfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsndfile_2src_2common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sfendian_8h" kindref="compound">sfendian.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__main_8h" kindref="compound">test_main.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="test__endswap_8c_1a2394095c0315674eb5566aec5be60400" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_SHORT<sp/><sp/><sp/>&quot;0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="test__endswap_8c_1a898c36de7b543711699d8e3c516e4c09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_INT<sp/><sp/><sp/><sp/><sp/>&quot;0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="test__endswap_8c_1aad88cf9252037fc1b4e5cfbec0f02b75" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_INT64<sp/><sp/><sp/>&quot;0x%016&quot;<sp/>PRIx64<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*==============================================================================</highlight></codeline>
<codeline lineno="41"><highlight class="comment">**<sp/>Test<sp/>functions.</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">dump_short_array<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datalen)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{<sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref><sp/>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%-6s<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/>datalen<sp/>;<sp/>k++)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(<ref refid="test__endswap_8c_1a2394095c0315674eb5566aec5be60400" kindref="member">FMT_SHORT</ref>,<sp/>data<sp/>[k])<sp/>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>putchar<sp/>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>dump_short_array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">test_endswap_short<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{<sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>orig<sp/>[4],<sp/>first<sp/>[4],<sp/>second<sp/>[4]<sp/>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref><sp/>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%-40s<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test_endswap_short&quot;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1a0491ca59ff11d37e0e71589ce262a30c" kindref="member">fflush</ref><sp/>(<ref refid="namespacewaflib_1_1ansiterm_1acf95a6e21629de2ca2b5716f5089f3f0" kindref="member">stdout</ref>)<sp/>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/><ref refid="libsndfile_2programs_2common_8h_1a841615a63f4a3aa18337897953874909" kindref="member">ARRAY_LEN</ref><sp/>(orig)<sp/>;<sp/>k++)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>[k]<sp/>=<sp/>0x3210<sp/>+<sp/>k<sp/>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_short_copy<sp/>(first,<sp/>orig,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_short_copy<sp/>(second,<sp/>first,<sp/>ARRAY_LEN<sp/>(second))<sp/>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>1<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>not<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>second,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>2<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">,<sp/>second,<sp/>ARRAY_LEN<sp/>(second))<sp/>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_short_array<sp/>(first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>3<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_short_copy<sp/>(first,<sp/>orig,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_short_copy<sp/>(first,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>4<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_short_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>puts<sp/>(</highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>test_endswap_short<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">dump_int_array<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datalen)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{<sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref><sp/>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%-6s<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>)<sp/>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/>datalen<sp/>;<sp/>k++)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(<ref refid="test__endswap_8c_1a898c36de7b543711699d8e3c516e4c09" kindref="member">FMT_INT</ref>,<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref><sp/>[k])<sp/>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>putchar<sp/>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>dump_int_array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">test_endswap_int<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{<sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orig<sp/>[4],<sp/>first<sp/>[4],<sp/>second<sp/>[4]<sp/>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref><sp/>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%-40s<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test_endswap_int&quot;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1a0491ca59ff11d37e0e71589ce262a30c" kindref="member">fflush</ref><sp/>(<ref refid="namespacewaflib_1_1ansiterm_1acf95a6e21629de2ca2b5716f5089f3f0" kindref="member">stdout</ref>)<sp/>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/><ref refid="libsndfile_2programs_2common_8h_1a841615a63f4a3aa18337897953874909" kindref="member">ARRAY_LEN</ref><sp/>(orig)<sp/>;<sp/>k++)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>[k]<sp/>=<sp/>0x76543210<sp/>+<sp/>k<sp/>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int_copy<sp/>(first,<sp/>orig,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int_copy<sp/>(second,<sp/>first,<sp/>ARRAY_LEN<sp/>(second))<sp/>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>1<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>not<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>second,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>2<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">,<sp/>second,<sp/>ARRAY_LEN<sp/>(second))<sp/>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int_array<sp/>(first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>3<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int_copy<sp/>(first,<sp/>orig,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int_copy<sp/>(first,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>4<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>puts<sp/>(</highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>test_endswap_int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">dump_int64_t_array<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>*<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datalen)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{<sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref><sp/>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%-6s<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>)<sp/>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/>datalen<sp/>;<sp/>k++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(<ref refid="test__endswap_8c_1aad88cf9252037fc1b4e5cfbec0f02b75" kindref="member">FMT_INT64</ref>,<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref><sp/>[k])<sp/>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>putchar<sp/>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>dump_int64_t_array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">test_endswap_int64_t<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{<sp/><sp/><sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a67a9885ef4908cb72ce26d75b694386c" kindref="member">int64_t</ref><sp/>orig<sp/>[4],<sp/>first<sp/>[4],<sp/>second<sp/>[4]<sp/>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1adc468c70fb574ebd07287b38d0d0676d" kindref="member">k</ref><sp/>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%-40s<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test_endswap_int64_t&quot;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1a0491ca59ff11d37e0e71589ce262a30c" kindref="member">fflush</ref><sp/>(<ref refid="namespacewaflib_1_1ansiterm_1acf95a6e21629de2ca2b5716f5089f3f0" kindref="member">stdout</ref>)<sp/>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/><ref refid="libsndfile_2programs_2common_8h_1a841615a63f4a3aa18337897953874909" kindref="member">ARRAY_LEN</ref><sp/>(orig)<sp/>;<sp/>k++)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>[k]<sp/>=<sp/>0x0807050540302010LL<sp/>+<sp/>k<sp/>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int64_t_copy<sp/>(first,<sp/>orig,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int64_t_copy<sp/>(second,<sp/>first,<sp/>ARRAY_LEN<sp/>(second))<sp/>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>1<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>not<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>second,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>2<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">,<sp/>second,<sp/>ARRAY_LEN<sp/>(second))<sp/>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int64_t_array<sp/>(first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>3<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int64_t_copy<sp/>(first,<sp/>orig,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>endswap_int64_t_copy<sp/>(first,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp<sp/>(orig,<sp/>first,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(orig))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n\nLine<sp/>%d<sp/>:<sp/>test<sp/>4<sp/>:<sp/>these<sp/>two<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same:\n\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__)<sp/>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>orig,<sp/>ARRAY_LEN<sp/>(orig))<sp/>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_int64_t_array<sp/>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>ARRAY_LEN<sp/>(first))<sp/>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(1)<sp/>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>puts<sp/>(</highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>test_endswap_int64_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="test__endswap_8c_1a6420236eb8a21a47d846b4fec035b511" refkind="member"><highlight class="normal"><ref refid="test__endswap_8c_1a6420236eb8a21a47d846b4fec035b511" kindref="member">test_endswap</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>test_endswap_short<sp/>()<sp/>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>test_endswap_int<sp/>()<sp/>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>test_endswap_int64_t<sp/>()<sp/>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>test_endswap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsndfile/src/test_endswap.c"/>
  </compounddef>
</doxygen>
