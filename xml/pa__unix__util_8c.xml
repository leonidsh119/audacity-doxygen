<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="pa__unix__util_8c" kind="file" language="C++">
    <compoundname>pa_unix_util.c</compoundname>
    <includes local="no">pthread.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="win_2_projects_2libsndfile_2sys_2time_8h" local="no">sys/time.h</includes>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="pa__util_8h" local="yes">pa_util.h</includes>
    <includes refid="pa__unix__util_8h" local="yes">pa_unix_util.h</includes>
    <includes refid="pa__debugprint_8h" local="yes">pa_debugprint.h</includes>
    <incdepgraph>
      <node id="30401">
        <label>stdlib.h</label>
      </node>
      <node id="30398">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c</label>
        <link refid="pa_unix_util.c"/>
        <childnode refid="30399" relation="include">
        </childnode>
        <childnode refid="30400" relation="include">
        </childnode>
        <childnode refid="30401" relation="include">
        </childnode>
        <childnode refid="30402" relation="include">
        </childnode>
        <childnode refid="30403" relation="include">
        </childnode>
        <childnode refid="30404" relation="include">
        </childnode>
        <childnode refid="30405" relation="include">
        </childnode>
        <childnode refid="30406" relation="include">
        </childnode>
        <childnode refid="30407" relation="include">
        </childnode>
        <childnode refid="30408" relation="include">
        </childnode>
        <childnode refid="30410" relation="include">
        </childnode>
        <childnode refid="30413" relation="include">
        </childnode>
      </node>
      <node id="30410">
        <label>pa_unix_util.h</label>
        <link refid="pa__unix__util_8h"/>
        <childnode refid="30411" relation="include">
        </childnode>
        <childnode refid="30404" relation="include">
        </childnode>
        <childnode refid="30399" relation="include">
        </childnode>
        <childnode refid="30412" relation="include">
        </childnode>
      </node>
      <node id="30407">
        <label>errno.h</label>
      </node>
      <node id="30411">
        <label>pa_cpuload.h</label>
        <link refid="pa__cpuload_8h"/>
      </node>
      <node id="30404">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="30399">
        <label>pthread.h</label>
      </node>
      <node id="30405">
        <label>string.h</label>
      </node>
      <node id="30400">
        <label>unistd.h</label>
      </node>
      <node id="30412">
        <label>signal.h</label>
      </node>
      <node id="30409">
        <label>portaudio.h</label>
        <link refid="portaudio_8h"/>
      </node>
      <node id="30402">
        <label>time.h</label>
      </node>
      <node id="30406">
        <label>math.h</label>
      </node>
      <node id="30403">
        <label>sys/time.h</label>
        <link refid="win_2_projects_2libsndfile_2sys_2time_8h"/>
      </node>
      <node id="30413">
        <label>pa_debugprint.h</label>
        <link refid="pa__debugprint_8h"/>
      </node>
      <node id="30408">
        <label>pa_util.h</label>
        <link refid="pa__util_8h"/>
        <childnode refid="30409" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pa__unix__util_8c_1a786fbebfd9d315bc39dec32568a4dfe1" prot="public" static="no" mutable="no">
        <type>pthread_t</type>
        <definition>pthread_t paUnixMainThread</definition>
        <argsstring></argsstring>
        <name>paUnixMainThread</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="236" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pa__unix__util_8c_1aa614f193aff12744a6ab90a9eb3128f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* PaUtil_AllocateMemory</definition>
        <argsstring>(long size)</argsstring>
        <name>PaUtil_AllocateMemory</name>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate size bytes, guaranteed to be aligned to a FIXME byte boundary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="74" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="74" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a27a8f85d109600ef246e5c642c5c3cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_FreeMemory</definition>
        <argsstring>(void *block)</argsstring>
        <name>PaUtil_FreeMemory</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Realease block if non-NULL. block may be NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="85" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="85" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a649c15da99171e24ab937c3cc5f868e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PaUtil_CountCurrentlyAllocatedBlocks</definition>
        <argsstring>(void)</argsstring>
        <name>PaUtil_CountCurrentlyAllocatedBlocks</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of currently allocated blocks. This function can be used for detecting memory leaks.</para><para><simplesect kind="note"><para>Allocations will only be tracked if PA_TRACK_MEMORY is #defined. If it isn&apos;t, this function will always return 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="98" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="98" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a1b3c20044c9401c42add29475636e83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Pa_Sleep</definition>
        <argsstring>(long msec)</argsstring>
        <name>Pa_Sleep</name>
        <param>
          <type>long</type>
          <declname>msec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put the caller to sleep for at least &apos;msec&apos; milliseconds. This function is provided only as a convenience for authors of portable code (such as the tests and examples in the PortAudio distribution.)</para><para>The function may sleep longer than requested so don&apos;t rely on this for accurate musical timing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="108" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="108" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1aa31df78e35fdb6bbef1da3179ded31be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_InitializeClock</definition>
        <argsstring>(void)</argsstring>
        <name>PaUtil_InitializeClock</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the clock used by <ref refid="pa__util_8h_1a9598384d28d22d589f607ca1069cc04c" kindref="member">PaUtil_GetTime()</ref>. Call this before calling PaUtil_GetTime.</para><para><simplesect kind="see"><para><ref refid="pa__util_8h_1a9598384d28d22d589f607ca1069cc04c" kindref="member">PaUtil_GetTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="146" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref></type>
        <definition>PaTime PaUtil_GetTime</definition>
        <argsstring>(void)</argsstring>
        <name>PaUtil_GetTime</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the system time in seconds. Used to implement CPU load functions</para><para><simplesect kind="see"><para><ref refid="pa__util_8h_1aa31df78e35fdb6bbef1da3179ded31be" kindref="member">PaUtil_InitializeClock</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="157" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="157" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1abec767adc928dfb8a8afa46a596cd828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUtil_InitializeThreading</definition>
        <argsstring>(PaUtilThreading *threading)</argsstring>
        <name>PaUtil_InitializeThreading</name>
        <param>
          <type><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref> *</type>
          <declname>threading</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="172" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a2c519ba45de8cb5907a5f0648405b9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_TerminateThreading</definition>
        <argsstring>(PaUtilThreading *threading)</argsstring>
        <name>PaUtil_TerminateThreading</name>
        <param>
          <type><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref> *</type>
          <declname>threading</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="178" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a8e9b99116311cbfda679ce1d252562d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUtil_StartThreading</definition>
        <argsstring>(PaUtilThreading *threading, void *(*threadRoutine)(void *), void *data)</argsstring>
        <name>PaUtil_StartThreading</name>
        <param>
          <type><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref> *</type>
          <declname>threading</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *(*)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *)</type>
          <declname>threadRoutine</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="182" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a02b4c61d57c95e1ae0768cd21bf04538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUtil_CancelThreading</definition>
        <argsstring>(PaUtilThreading *threading, int wait, PaError *exitResult)</argsstring>
        <name>PaUtil_CancelThreading</name>
        <param>
          <type><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref> *</type>
          <declname>threading</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wait</declname>
        </param>
        <param>
          <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref> *</type>
          <declname>exitResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="188" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="188" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a1d6b7ffc7a2a08e24900258ef8e3a35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixThreading_Initialize</definition>
        <argsstring>()</argsstring>
        <name>PaUnixThreading_Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize global threading state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="239" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a02dfd900a9c3caf04fd0639293a864ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>static PaError BoostPriority</definition>
        <argsstring>(PaUnixThread *self)</argsstring>
        <name>BoostPriority</name>
        <param>
          <type><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="245" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="245" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a1ea876bbbde993a851b1081065e4d5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixThread_New</definition>
        <argsstring>(PaUnixThread *self, void *(*threadFunc)(void *), void *threadArg, PaTime waitForChild, int rtSched)</argsstring>
        <name>PaUnixThread_New</name>
        <param>
          <type><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *(*)(<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *)</type>
          <declname>threadFunc</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>threadArg</declname>
        </param>
        <param>
          <type><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref></type>
          <declname>waitForChild</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>rtSched</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spawn a thread.</para><para>Intended for spawning the callback thread from the main thread. This function can even block (for a certain time or indefinitely) untill notified by the callback thread (using PaUnixThread_NotifyParent), which can be useful in order to make sure that callback has commenced before returning from Pa_StartStream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threadFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be executed in the child thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitForChild</parametername>
</parameternamelist>
<parameterdescription>
<para>If not 0, wait for child thread to call PaUnixThread_NotifyParent. Less than 0 means wait for ever, greater than 0 wait for the specified time. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtSched</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable realtime scheduling? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: If timed out waiting on child, paTimedOut. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="268" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="268" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a2f251ad2c037e1a573c1a5cb564b1afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixThread_Terminate</definition>
        <argsstring>(PaUnixThread *self, int wait, PaError *exitResult)</argsstring>
        <name>PaUnixThread_Terminate</name>
        <param>
          <type><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>wait</declname>
        </param>
        <param>
          <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref> *</type>
          <declname>exitResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate thread.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, request that background thread stop and wait untill it does, else cancel it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitResult</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null this will upon return contain the exit status of the thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="402" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="402" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1ab4ffae4c3e89df03d105effda5f29434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixThread_PrepareNotify</definition>
        <argsstring>(PaUnixThread *self)</argsstring>
        <name>PaUnixThread_PrepareNotify</name>
        <param>
          <type><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare to notify waiting parent thread.</para><para>An internal lock must be held before the parent is notified in PaUnixThread_NotifyParent, call this to acquire it beforehand. <simplesect kind="return"><para>: If parent is not waiting, paInternalError. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="464" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="464" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a75d9c22a1e8e18d99cb532a5cf3da8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixThread_NotifyParent</definition>
        <argsstring>(PaUnixThread *self)</argsstring>
        <name>PaUnixThread_NotifyParent</name>
        <param>
          <type><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify waiting parent thread.</para><para><simplesect kind="return"><para>: If parent timed out waiting, paTimedOut. If parent was never waiting, paInternalError. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="476" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="476" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a80a12f3ba5d557f3b16177737817ae19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PaUnixThread_StopRequested</definition>
        <argsstring>(PaUnixThread *self)</argsstring>
        <name>PaUnixThread_StopRequested</name>
        <param>
          <type><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Has the parent thread requested this thread to stop? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="495" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a8404184f8c9faff3dd921a12f79d836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixMutex_Initialize</definition>
        <argsstring>(PaUnixMutex *self)</argsstring>
        <name>PaUnixMutex_Initialize</name>
        <param>
          <type><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="500" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="500" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a02e089c1b5a1dfef9b11462c65c280f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixMutex_Terminate</definition>
        <argsstring>(PaUnixMutex *self)</argsstring>
        <name>PaUnixMutex_Terminate</name>
        <param>
          <type><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="507" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="507" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a254077b3b33653765a397e41fa59a4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixMutex_Lock</definition>
        <argsstring>(PaUnixMutex *self)</argsstring>
        <name>PaUnixMutex_Lock</name>
        <param>
          <type><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock mutex.</para><para>We&apos;re disabling thread cancellation while the thread is holding a lock, so mutexes are properly unlocked at termination time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="519" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="519" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="pa__unix__util_8c_1a32dd4f5abd53fb23a2f5349fa5c63d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError PaUnixMutex_Unlock</definition>
        <argsstring>(PaUnixMutex *self)</argsstring>
        <name>PaUnixMutex_Unlock</name>
        <param>
          <type><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock mutex.</para><para>Thread cancellation is enabled again after the mutex is properly unlocked. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" line="537" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c" bodystart="537" bodyend="549"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>pa_unix_util.c<sp/>1510<sp/>2010-06-10<sp/>08:05:29Z<sp/>dmitrykos<sp/>$</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Portable<sp/>Audio<sp/>I/O<sp/>Library</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>UNIX<sp/>platform-specific<sp/>support<sp/>functions</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Based<sp/>on<sp/>the<sp/>Open<sp/>Source<sp/>API<sp/>proposed<sp/>by<sp/>Ross<sp/>Bencina</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2000<sp/>Ross<sp/>Bencina</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>The<sp/>text<sp/>above<sp/>constitutes<sp/>the<sp/>entire<sp/>PortAudio<sp/>license;<sp/>however,<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>the<sp/>PortAudio<sp/>community<sp/>also<sp/>makes<sp/>the<sp/>following<sp/>non-binding<sp/>requests:</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Any<sp/>person<sp/>wishing<sp/>to<sp/>distribute<sp/>modifications<sp/>to<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>requested<sp/>to<sp/>send<sp/>the<sp/>modifications<sp/>to<sp/>the<sp/>original<sp/>developer<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>they<sp/>can<sp/>be<sp/>incorporated<sp/>into<sp/>the<sp/>canonical<sp/>version.<sp/>It<sp/>is<sp/>also<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>requested<sp/>that<sp/>these<sp/>non-binding<sp/>requests<sp/>be<sp/>included<sp/>along<sp/>with<sp/>the<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>license<sp/>above.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="win_2_projects_2libsndfile_2sys_2time_8h" kindref="compound">time.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="win_2_projects_2libsndfile_2sys_2time_8h" kindref="compound">sys/time.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>memset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)<sp/>&amp;&amp;<sp/>!defined(HAVE_MACH_ABSOLUTE_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MACH_ABSOLUTE_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MACH_ABSOLUTE_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mach/mach_time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__util_8h" kindref="compound">pa_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__unix__util_8h" kindref="compound">pa_unix_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__debugprint_8h" kindref="compound">pa_debugprint.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>Track<sp/>memory<sp/>allocations<sp/>to<sp/>avoid<sp/>leaks.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PA_TRACK_MEMORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numAllocations_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="pa__unix__util_8c_1aa614f193aff12744a6ab90a9eb3128f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="pa__unix__util_8c_1aa614f193aff12744a6ab90a9eb3128f0" kindref="member">PaUtil_AllocateMemory</ref>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref><sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>malloc(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PA_TRACK_MEMORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>result<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)<sp/>numAllocations_<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="pa__unix__util_8c_1a27a8f85d109600ef246e5c642c5c3cad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__unix__util_8c_1a27a8f85d109600ef246e5c642c5c3cad" kindref="member">PaUtil_FreeMemory</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structblock" kindref="compound">block</ref><sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>block<sp/>!=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>block<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PA_TRACK_MEMORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAllocations_<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="pa__unix__util_8c_1a649c15da99171e24ab937c3cc5f868e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pa__unix__util_8c_1a649c15da99171e24ab937c3cc5f868e9" kindref="member">PaUtil_CountCurrentlyAllocatedBlocks</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PA_TRACK_MEMORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numAllocations_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="pa__unix__util_8c_1a1b3c20044c9401c42add29475636e83d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__unix__util_8c_1a1b3c20044c9401c42add29475636e83d" kindref="member">Pa_Sleep</ref>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msec<sp/>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_NANOSLEEP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>req<sp/>=<sp/>{0},<sp/>rem<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/><ref refid="namespacepyportmidi_1_1midi_1ad2426758f88d23d7208984d5c99ec050" kindref="member">time</ref><sp/>=<sp/>msec<sp/>/<sp/>1.e3;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>req.tv_sec<sp/>=<sp/>(time_t)time;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(time<sp/>-<sp/>req.tv_sec<sp/>&lt;<sp/>1.0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>req.tv_nsec<sp/>=<sp/>(long)((time<sp/>-<sp/>req.tv_sec)<sp/>*<sp/>1.e9);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>nanosleep(&amp;req,<sp/>&amp;rem);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX:<sp/>Try<sp/>sleeping<sp/>the<sp/>remaining<sp/>time<sp/>(contained<sp/>in<sp/>rem)<sp/>if<sp/>interrupted<sp/>by<sp/>a<sp/>signal?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>msec<sp/>&gt;<sp/>999<sp/>)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>OpenBSD<sp/>and<sp/>IRIX,<sp/>argument<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>usleep<sp/>must<sp/>be<sp/>&lt;<sp/>1000000.<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(<sp/>999000<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msec<sp/>-=<sp/>999;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(<sp/>msec<sp/>*<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MACH_ABSOLUTE_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>Discussion<sp/>on<sp/>the<sp/>CoreAudio<sp/>mailing<sp/>list<sp/>suggests<sp/>that<sp/>calling</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/>gettimeofday<sp/>(or<sp/>anything<sp/>else<sp/>in<sp/>the<sp/>BSD<sp/>layer)<sp/>is<sp/>not<sp/>real-time</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>safe,<sp/>so<sp/>we<sp/>use<sp/>mach_absolute_time<sp/>on<sp/>OSX.<sp/>This<sp/>implementation<sp/>is<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>based<sp/>on<sp/>these<sp/>two<sp/>links:</highlight></codeline>
<codeline lineno="134"><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/>Technical<sp/>Q&amp;A<sp/>QA1398<sp/>-<sp/>Mach<sp/>Absolute<sp/>Time<sp/>Units</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>http://developer.apple.com/mac/library/qa/qa2004/qa1398.html</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>Tutorial:<sp/>Performance<sp/>and<sp/>Time.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>http://www.macresearch.org/tutorial_performance_and_time</highlight></codeline>
<codeline lineno="140"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Scaler<sp/>to<sp/>convert<sp/>the<sp/>result<sp/>of<sp/>mach_absolute_time<sp/>to<sp/>seconds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>machSecondsConversionScaler_<sp/>=<sp/>0.0;<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="pa__unix__util_8c_1aa31df78e35fdb6bbef1da3179ded31be" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__unix__util_8c_1aa31df78e35fdb6bbef1da3179ded31be" kindref="member">PaUtil_InitializeClock</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MACH_ABSOLUTE_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>mach_timebase_info_data_t<sp/><ref refid="lib_2expat_8h_1a20806b446e455c50dc5653b7d43e3de2" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>kern_return_t<sp/>err<sp/>=<sp/>mach_timebase_info(<sp/>&amp;info<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>err<sp/>==<sp/>0<sp/><sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>machSecondsConversionScaler_<sp/>=<sp/>1<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-9<sp/>*<sp/>(double)<sp/>info.numer<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>info.denom;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MACH_ABSOLUTE_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mach_absolute_time()<sp/>*<sp/>machSecondsConversionScaler_;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(HAVE_CLOCK_GETTIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>tp;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;tp);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref>)(tp.tv_sec<sp/>+<sp/>tp.tv_nsec<sp/>*<sp/>1<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-9);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tv;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(<sp/>&amp;tv,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref>)<sp/>tv.tv_usec<sp/>*<sp/>1<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-6<sp/>+<sp/>tv.tv_sec;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="pa__unix__util_8h_1abec767adc928dfb8a8afa46a596cd828" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1abec767adc928dfb8a8afa46a596cd828" kindref="member">PaUtil_InitializeThreading</ref>(<sp/><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref><sp/>*<ref refid="namespacewaflib_1_1_tools_1_1vala_1a5324237aeb8614255136caaa81f95154" kindref="member">threading</ref><sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="lib_2expat_8h_1a3980d15795c6349fecd06c1b035c1ae9" kindref="member">void</ref>)<sp/>paUtilErr_;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="pa__unix__util_8h_1a2c519ba45de8cb5907a5f0648405b9cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__unix__util_8c_1a2c519ba45de8cb5907a5f0648405b9cd" kindref="member">PaUtil_TerminateThreading</ref>(<sp/><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref><sp/>*<ref refid="namespacewaflib_1_1_tools_1_1vala_1a5324237aeb8614255136caaa81f95154" kindref="member">threading</ref><sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="pa__unix__util_8h_1a8e9b99116311cbfda679ce1d252562d4" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a8e9b99116311cbfda679ce1d252562d4" kindref="member">PaUtil_StartThreading</ref>(<sp/><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref><sp/>*<ref refid="namespacewaflib_1_1_tools_1_1vala_1a5324237aeb8614255136caaa81f95154" kindref="member">threading</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*threadRoutine)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref><sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_create(<sp/>&amp;threading-&gt;<ref refid="struct_pa_util_threading_1a9553eb5e28d393f7fd8a2e8517aa5e50" kindref="member">callbackThread</ref>,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>threadRoutine,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="pa__unix__util_8h_1a02b4c61d57c95e1ae0768cd21bf04538" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a02b4c61d57c95e1ae0768cd21bf04538" kindref="member">PaUtil_CancelThreading</ref>(<sp/><ref refid="struct_pa_util_threading" kindref="compound">PaUtilThreading</ref><sp/>*threading,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait,<sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>*exitResult<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pret;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exitResult<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exitResult<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>pthread_cancel<sp/>is<sp/>not<sp/>supported<sp/>(Android<sp/>platform)<sp/>whole<sp/>this<sp/>function<sp/>can<sp/>lead<sp/>to<sp/>indefinite<sp/>waiting<sp/>if<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>working<sp/>thread<sp/>(callbackThread)<sp/>has&apos;n<sp/>received<sp/>any<sp/>stop<sp/>signals<sp/>from<sp/>outside,<sp/>please<sp/>keep<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>in<sp/>mind<sp/>when<sp/>considering<sp/>using<sp/>PaUtil_CancelThreading</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PTHREAD_CANCELED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>kill<sp/>the<sp/>thread<sp/>if<sp/>it<sp/>isn&apos;t<sp/>in<sp/>the<sp/>process<sp/>of<sp/>stopping<sp/>(flushing<sp/>adaptation<sp/>buffers)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!wait<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_cancel(<sp/>threading-&gt;<ref refid="struct_pa_util_threading_1a9553eb5e28d393f7fd8a2e8517aa5e50" kindref="member">callbackThread</ref><sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX:<sp/>Safe<sp/>to<sp/>call<sp/>this<sp/>if<sp/>the<sp/>thread<sp/>has<sp/>exited<sp/>on<sp/>its<sp/>own?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_join(<sp/>threading-&gt;<ref refid="struct_pa_util_threading_1a9553eb5e28d393f7fd8a2e8517aa5e50" kindref="member">callbackThread</ref>,<sp/>&amp;pret<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PTHREAD_CANCELED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pret<sp/>&amp;&amp;<sp/>PTHREAD_CANCELED<sp/>!=<sp/>pret<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>!wait<sp/>means<sp/>the<sp/>thread<sp/>may<sp/>have<sp/>been<sp/>canceled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pret<sp/>&amp;&amp;<sp/>wait<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exitResult<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exitResult<sp/>=<sp/>*(<ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>*)<sp/>pret;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>pret<sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Threading<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>paUnixMainThread<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>We<sp/>have<sp/>to<sp/>be<sp/>a<sp/>bit<sp/>careful<sp/>with<sp/>defining<sp/>this<sp/>global<sp/>variable,</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>as<sp/>explained<sp/>below.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>apple/gcc<sp/>has<sp/>a<sp/>&quot;problem&quot;<sp/>with<sp/>global<sp/>vars<sp/>and<sp/>dynamic<sp/>libs.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>Initializing<sp/>it<sp/>seems<sp/>to<sp/>fix<sp/>the<sp/>problem.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>Described<sp/>a<sp/>bit<sp/>in<sp/>this<sp/>thread:</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>http://gcc.gnu.org/ml/gcc/2005-06/msg00179.html</highlight></codeline>
<codeline lineno="231"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">pthread_t<sp/><ref refid="pa__unix__util_8c_1a786fbebfd9d315bc39dec32568a4dfe1" kindref="member">paUnixMainThread</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">/*pthreads<sp/>are<sp/>opaque.<sp/>We<sp/>don&apos;t<sp/>know<sp/>that<sp/>asigning<sp/>it<sp/>an<sp/>int<sp/>value</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>always<sp/>makes<sp/>sense,<sp/>so<sp/>we<sp/>don&apos;t<sp/>initialize<sp/>it<sp/>unless<sp/>we<sp/>have<sp/>to.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="pa__unix__util_8h_1a786fbebfd9d315bc39dec32568a4dfe1" refkind="member"><highlight class="normal">pthread_t<sp/>paUnixMainThread<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="pa__unix__util_8h_1a1d6b7ffc7a2a08e24900258ef8e3a35a" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a1d6b7ffc7a2a08e24900258ef8e3a35a" kindref="member">PaUnixThreading_Initialize</ref>()</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>paUnixMainThread<sp/>=<sp/>pthread_self();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>BoostPriority(<sp/><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>spm<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Priority<sp/>should<sp/>only<sp/>matter<sp/>between<sp/>contending<sp/>FIFO<sp/>threads?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>spm.sched_priority<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pthread_setschedparam(<sp/>self-&gt;thread,<sp/>SCHED_FIFO,<sp/>&amp;spm<sp/>)<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>errno<sp/>==<sp/>EPERM,<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);<sp/><sp/></highlight><highlight class="comment">/*<sp/>Lack<sp/>permission<sp/>to<sp/>raise<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>bumping<sp/>priority\n&quot;</highlight><highlight class="normal"><sp/>));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>Success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="pa__unix__util_8h_1a1ea876bbbde993a851b1081065e4d5d8" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a1ea876bbbde993a851b1081065e4d5d8" kindref="member">PaUnixThread_New</ref>(<sp/><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*threadFunc)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>threadArg,<sp/><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/>waitForChild,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rtSched<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_attr_t<sp/>attr;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>started<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>)<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8c_1a8404184f8c9faff3dd921a12f79d836d" kindref="member">PaUnixMutex_Initialize</ref>(<sp/>&amp;self-&gt;mtx<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a70a9602df8dcb5495c3ea6d967a0e807" kindref="member">PA_ASSERT_CALL</ref>(<sp/>pthread_cond_init(<sp/>&amp;self-&gt;cond,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;parentWaiting<sp/>=<sp/>0<sp/>!=<sp/>waitForChild;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Temporarily<sp/>disabled<sp/>since<sp/>we<sp/>should<sp/>test<sp/>during<sp/>configuration<sp/>for<sp/>presence<sp/>of<sp/>required<sp/>mman.h<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_POSIX_MEMLOCK<sp/>&amp;&amp;<sp/>(_POSIX_MEMLOCK<sp/>!=<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rtSched<sp/>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mlockall(<sp/>MCL_CURRENT<sp/>|<sp/>MCL_FUTURE<sp/>)<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>savedErrno<sp/>=<sp/>errno;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>errno<sp/>gets<sp/>overwritten<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<sp/>savedErrno<sp/>!=<sp/>EINVAL<sp/>);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Most<sp/>likely<sp/>a<sp/>programmer<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>(savedErrno<sp/>==<sp/>EPERM),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Failed<sp/>locking<sp/>memory\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Successfully<sp/>locked<sp/>memory\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__<sp/>));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_init(<sp/>&amp;attr<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Priority<sp/>relative<sp/>to<sp/>other<sp/>processes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_setscope(<sp/>&amp;attr,<sp/>PTHREAD_SCOPE_SYSTEM<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_create(<sp/>&amp;self-&gt;thread,<sp/>&amp;attr,<sp/>threadFunc,<sp/>threadArg<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>started<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rtSched<sp/>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>self-&gt;useWatchdog<sp/>)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>wdSpm<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Launch<sp/>watchdog,<sp/>watchdog<sp/>sets<sp/>callback<sp/>thread<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio<sp/>=<sp/><ref refid="pa__unix__util_8h_1aea604351950df064043e9512ef7a222f" kindref="member">PA_MIN</ref>(<sp/>self-&gt;rtPrio<sp/>+<sp/>4,<sp/>sched_get_priority_max(<sp/>SCHED_FIFO<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wdSpm.sched_priority<sp/>=<sp/>prio;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_init(<sp/>&amp;attr<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_setinheritsched(<sp/>&amp;attr,<sp/>PTHREAD_EXPLICIT_SCHED<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_setscope(<sp/>&amp;attr,<sp/>PTHREAD_SCOPE_SYSTEM<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_setschedpolicy(<sp/>&amp;attr,<sp/>SCHED_FIFO<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!pthread_attr_setschedparam(<sp/>&amp;attr,<sp/>&amp;wdSpm<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(err<sp/>=<sp/>pthread_create(<sp/>&amp;self-&gt;watchdogThread,<sp/>&amp;attr,<sp/>&amp;WatchdogFunc,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>))<sp/>)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>err<sp/>==<sp/>EPERM,<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Permission<sp/>error,<sp/>go<sp/>on<sp/>without<sp/>realtime<sp/>privileges<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>bumping<sp/>priority\n&quot;</highlight><highlight class="normal"><sp/>));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;watchdogRunning<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_getschedparam(<sp/>self-&gt;watchdogThread,<sp/>&amp;policy,<sp/>&amp;wdSpm<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>priority<sp/>is<sp/>right,<sp/>policy<sp/>could<sp/>potentially<sp/>differ<sp/>from<sp/>SCHED_FIFO<sp/>(but<sp/>that&apos;s<sp/>alright)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>wdSpm.sched_priority<sp/>!=<sp/>prio<sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;Watchdog<sp/>priority<sp/>not<sp/>set<sp/>correctly<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>wdSpm.sched_priority<sp/>));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/>BoostPriority(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>spm;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_getschedparam(self-&gt;thread,<sp/>&amp;policy,<sp/>&amp;spm);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>self-&gt;parentWaiting<sp/>)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/>till;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>ts;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/>now;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="pa__unix__util_8c_1a254077b3b33653765a397e41fa59a4d1" kindref="member">PaUnixMutex_Lock</ref>(<sp/>&amp;self-&gt;mtx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>stream<sp/>to<sp/>be<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>till<sp/>=<sp/>now<sp/>+<sp/>waitForChild;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>self-&gt;parentWaiting<sp/>&amp;&amp;<sp/>!res<sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>waitForChild<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts.tv_sec<sp/>=<sp/>(time_t)<sp/>floor(<sp/>till<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts.tv_nsec<sp/>=<sp/>(long)<sp/>((till<sp/>-<sp/>floor(<sp/>till<sp/>))<sp/>*<sp/>1e9);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_cond_timedwait(<sp/>&amp;self-&gt;cond,<sp/>&amp;self-&gt;mtx.mtx,<sp/>&amp;ts<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_cond_wait(<sp/>&amp;self-&gt;cond,<sp/>&amp;self-&gt;mtx.mtx<sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="pa__unix__util_8c_1a32dd4f5abd53fb23a2f5349fa5c63d5e" kindref="member">PaUnixMutex_Unlock</ref>(<sp/>&amp;self-&gt;mtx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>!res<sp/>||<sp/>ETIMEDOUT<sp/>==<sp/>res,<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Waited<sp/>for<sp/>%g<sp/>seconds<sp/>for<sp/>stream<sp/>to<sp/>start\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>()<sp/>-<sp/>now<sp/>));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ETIMEDOUT<sp/>==<sp/>res<sp/>)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a26ddab3d4dace3978ec6d5b3ccc10e87" kindref="member">paTimedOut</ref><sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="convtest_8m_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>started<sp/>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8c_1a2f251ad2c037e1a573c1a5cb564b1afe" kindref="member">PaUnixThread_Terminate</ref>(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>0,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/><ref refid="convtest_8m_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="pa__unix__util_8h_1a2f251ad2c037e1a573c1a5cb564b1afe" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a2f251ad2c037e1a573c1a5cb564b1afe" kindref="member">PaUnixThread_Terminate</ref>(<sp/><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait,<sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref>*<sp/>exitResult<sp/>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pret;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exitResult<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exitResult<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>watchdogExitResult<sp/>)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watchdogExitResult<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>th-&gt;watchdogRunning<sp/>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_cancel(<sp/>th-&gt;watchdogThread<sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_join(<sp/>th-&gt;watchdogThread,<sp/>&amp;pret<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pret<sp/>&amp;&amp;<sp/>pret<sp/>!=<sp/>PTHREAD_CANCELED<sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>watchdogExitResult<sp/>)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watchdogExitResult<sp/>=<sp/>*(<ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>*)<sp/>pret;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>pret<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>kill<sp/>the<sp/>thread<sp/>if<sp/>it<sp/>isn&apos;t<sp/>in<sp/>the<sp/>process<sp/>of<sp/>stopping<sp/>(flushing<sp/>adaptation<sp/>buffers)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Make<sp/>join<sp/>time<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;stopRequested<sp/>=<sp/>wait;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!wait<sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Canceling<sp/>thread<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>self-&gt;thread<sp/>));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX:<sp/>Safe<sp/>to<sp/>call<sp/>this<sp/>if<sp/>the<sp/>thread<sp/>has<sp/>exited<sp/>on<sp/>its<sp/>own?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PTHREAD_CANCELED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_cancel(<sp/>self-&gt;thread<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Joining<sp/>thread<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>self-&gt;thread<sp/>));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_join(<sp/>self-&gt;thread,<sp/>&amp;pret<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PTHREAD_CANCELED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pret<sp/>&amp;&amp;<sp/>PTHREAD_CANCELED<sp/>!=<sp/>pret<sp/>)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>!wait<sp/>means<sp/>the<sp/>thread<sp/>may<sp/>have<sp/>been<sp/>canceled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pret<sp/>&amp;&amp;<sp/>wait<sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exitResult<sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exitResult<sp/>=<sp/>*(<ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref>*)pret;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>pret<sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a70a9602df8dcb5495c3ea6d967a0e807" kindref="member">PA_ASSERT_CALL</ref>(<sp/><ref refid="pa__unix__util_8c_1a02e089c1b5a1dfef9b11462c65c280f2" kindref="member">PaUnixMutex_Terminate</ref>(<sp/>&amp;self-&gt;mtx<sp/>),<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref><sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a70a9602df8dcb5495c3ea6d967a0e807" kindref="member">PA_ASSERT_CALL</ref>(<sp/>pthread_cond_destroy(<sp/>&amp;self-&gt;cond<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="pa__unix__util_8h_1ab4ffae4c3e89df03d105effda5f29434" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1ab4ffae4c3e89df03d105effda5f29434" kindref="member">PaUnixThread_PrepareNotify</ref>(<sp/><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>self-&gt;parentWaiting,<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="pa__unix__util_8c_1a254077b3b33653765a397e41fa59a4d1" kindref="member">PaUnixMutex_Lock</ref>(<sp/>&amp;self-&gt;mtx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;locked<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="pa__unix__util_8h_1a75d9c22a1e8e18d99cb532a5cf3da8d0" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a75d9c22a1e8e18d99cb532a5cf3da8d0" kindref="member">PaUnixThread_NotifyParent</ref>(<sp/><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1adaa396943350072fdd811837f9bead54" kindref="member">PA_UNLESS</ref>(<sp/>self-&gt;parentWaiting,<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7a4851f9f753cdad3e7a89380d6589816c" kindref="member">paInternalError</ref><sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!self-&gt;locked<sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="pa__unix__util_8c_1a254077b3b33653765a397e41fa59a4d1" kindref="member">PaUnixMutex_Lock</ref>(<sp/>&amp;self-&gt;mtx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;locked<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;parentWaiting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_signal(<sp/>&amp;self-&gt;cond<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/><ref refid="pa__unix__util_8c_1a32dd4f5abd53fb23a2f5349fa5c63d5e" kindref="member">PaUnixMutex_Unlock</ref>(<sp/>&amp;self-&gt;mtx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;locked<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="pa__unix__util_8h_1a80a12f3ba5d557f3b16177737817ae19" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pa__unix__util_8c_1a80a12f3ba5d557f3b16177737817ae19" kindref="member">PaUnixThread_StopRequested</ref>(<sp/><ref refid="struct_pa_unix_thread" kindref="compound">PaUnixThread</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;stopRequested;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="pa__unix__util_8h_1a8404184f8c9faff3dd921a12f79d836d" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a8404184f8c9faff3dd921a12f79d836d" kindref="member">PaUnixMutex_Initialize</ref>(<sp/><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a70a9602df8dcb5495c3ea6d967a0e807" kindref="member">PA_ASSERT_CALL</ref>(<sp/>pthread_mutex_init(<sp/>&amp;self-&gt;mtx,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="pa__unix__util_8h_1a02e089c1b5a1dfef9b11462c65c280f2" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a02e089c1b5a1dfef9b11462c65c280f2" kindref="member">PaUnixMutex_Terminate</ref>(<sp/><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a70a9602df8dcb5495c3ea6d967a0e807" kindref="member">PA_ASSERT_CALL</ref>(<sp/>pthread_mutex_destroy(<sp/>&amp;self-&gt;mtx<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="pa__unix__util_8h_1a254077b3b33653765a397e41fa59a4d1" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a254077b3b33653765a397e41fa59a4d1" kindref="member">PaUnixMutex_Lock</ref>(<sp/><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PTHREAD_CANCEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldState;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_setcancelstate(<sp/>PTHREAD_CANCEL_DISABLE,<sp/>&amp;oldState<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_mutex_lock(<sp/>&amp;self-&gt;mtx<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="pa__unix__util_8h_1a32dd4f5abd53fb23a2f5349fa5c63d5e" refkind="member"><highlight class="normal"><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/><ref refid="pa__unix__util_8c_1a32dd4f5abd53fb23a2f5349fa5c63d5e" kindref="member">PaUnixMutex_Unlock</ref>(<sp/><ref refid="struct_pa_unix_mutex" kindref="compound">PaUnixMutex</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_mutex_unlock(<sp/>&amp;self-&gt;mtx<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PTHREAD_CANCEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldState;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1aba9526ea8f0dd5b0603f3c81e5e1f9b8" kindref="member">PA_ENSURE_SYSTEM</ref>(<sp/>pthread_setcancelstate(<sp/>PTHREAD_CANCEL_ENABLE,<sp/>&amp;oldState<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnWatchdogExit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1a4b666535c828e23ccd16510a0a1a1943" kindref="member">userData</ref><sp/>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>PaAlsaThreading<sp/>*th<sp/>=<sp/>(PaAlsaThreading<sp/>*)<sp/>userData;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>spm<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a70a9602df8dcb5495c3ea6d967a0e807" kindref="member">PA_ASSERT_CALL</ref>(<sp/>pthread_setschedparam(<sp/>th-&gt;callbackThread,<sp/>SCHED_OTHER,<sp/>&amp;spm<sp/>),<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lower<sp/>before<sp/>exiting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;Watchdog<sp/>exiting\n&quot;</highlight><highlight class="normal"><sp/>));</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*WatchdogFunc(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userData<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref><sp/>result<sp/>=<sp/><ref refid="portaudio_8h_1a2e45bf8b5145f131a91c128af2bdaec7aeb09d15a48b6c1034728a9c518cfe4ba" kindref="member">paNoError</ref>,<sp/>*pres<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>PaAlsaThreading<sp/>*th<sp/>=<sp/>(PaAlsaThreading<sp/>*)<sp/>userData;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>intervalMsec<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/>maxSeconds<sp/>=<sp/>3.;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Max<sp/>seconds<sp/>between<sp/>callbacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portaudio_8h_1af17a7e6d0471a23071acf8dbd7bbe4bd" kindref="member">PaTime</ref><sp/>timeThen<sp/>=<sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>(),<sp/>timeNow,<sp/>timeElapsed,<sp/>cpuTimeThen,<sp/>cpuTimeNow,<sp/>cpuTimeElapsed;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cpuLoad,<sp/>avgCpuLoad<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>throttled<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Execute<sp/>OnWatchdogExit<sp/>when<sp/>exiting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cleanup_push(<sp/>&amp;OnWatchdogExit,<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Boost<sp/>priority<sp/>of<sp/>callback<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8h_1a2b87696eb7e08bcdbf3abc631780fa74" kindref="member">PA_ENSURE</ref>(<sp/>result<sp/>=<sp/>BoostPriority(<sp/>th<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!result<sp/>)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Boost<sp/>failed,<sp/>might<sp/>as<sp/>well<sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit(<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>cpuTimeThen<sp/>=<sp/>th-&gt;callbackCpuTime;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>spm<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_getschedparam(<sp/>pthread_self(),<sp/>&amp;policy,<sp/>&amp;spm<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Watchdog<sp/>priority<sp/>is<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>spm.sched_priority<sp/>));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lowpassCoeff<sp/>=<sp/>0.9,<sp/>lowpassCoeff1<sp/>=<sp/>0.99999<sp/>-<sp/>lowpassCoeff;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>before<sp/>and<sp/>after<sp/>in<sp/>case<sp/>whatever<sp/>underlying<sp/>sleep<sp/>call<sp/>isn&apos;t<sp/>interrupted<sp/>by<sp/>pthread_cancel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_testcancel();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8c_1a1b3c20044c9401c42add29475636e83d" kindref="member">Pa_Sleep</ref>(<sp/>intervalMsec<sp/>);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_testcancel();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>()<sp/>-<sp/>th-&gt;callbackTime<sp/>&gt;<sp/>maxSeconds<sp/>)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;Watchdog:<sp/>Terminating<sp/>callback<sp/>thread\n&quot;</highlight><highlight class="normal"><sp/>));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tell<sp/>thread<sp/>to<sp/>terminate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pthread_kill(<sp/>th-&gt;callbackThread,<sp/>SIGKILL<sp/>);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit(<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>PortAudio<sp/>reports<sp/>CPU<sp/>load:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/><ref refid="pa__cpuload_8c_1af7bff59bbfe46a388e21633bf49ea0d6" kindref="member">PaUtil_GetCpuLoad</ref>(<sp/>th-&gt;cpuLoadMeasurer<sp/>)<sp/>));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>we<sp/>should<sp/>throttle,<sp/>or<sp/>unthrottle<sp/>:P<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpuTimeNow<sp/>=<sp/>th-&gt;callbackCpuTime;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpuTimeElapsed<sp/>=<sp/>cpuTimeNow<sp/>-<sp/>cpuTimeThen;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpuTimeThen<sp/>=<sp/>cpuTimeNow;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeNow<sp/>=<sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeElapsed<sp/>=<sp/>timeNow<sp/>-<sp/>timeThen;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeThen<sp/>=<sp/>timeNow;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpuLoad<sp/>=<sp/>cpuTimeElapsed<sp/>/<sp/>timeElapsed;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avgCpuLoad<sp/>=<sp/>avgCpuLoad<sp/>*<sp/>lowpassCoeff<sp/>+<sp/>cpuLoad<sp/>*<sp/>lowpassCoeff1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>throttled<sp/>)</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PA_DEBUG((<sp/>&quot;Watchdog:<sp/>CPU<sp/>load:<sp/>%g,<sp/>%g\n&quot;,<sp/>avgCpuLoad,<sp/>cpuTimeElapsed<sp/>));</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="pa__cpuload_8c_1af7bff59bbfe46a388e21633bf49ea0d6" kindref="member">PaUtil_GetCpuLoad</ref>(<sp/>th-&gt;cpuLoadMeasurer<sp/>)<sp/>&gt;<sp/>.925<sp/>)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>spm<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sched_param<sp/>defaultSpm<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Throttling<sp/>audio<sp/>thread,<sp/>priority<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>spm.sched_priority<sp/>));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_getschedparam(<sp/>th-&gt;callbackThread,<sp/>&amp;policy,<sp/>&amp;spm<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pthread_setschedparam(<sp/>th-&gt;callbackThread,<sp/>SCHED_OTHER,<sp/>&amp;defaultSpm<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throttled<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;Watchdog:<sp/>Couldn&apos;t<sp/>lower<sp/>priority<sp/>of<sp/>audio<sp/>thread:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strerror(<sp/>errno<sp/>)<sp/>));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Give<sp/>other<sp/>processes<sp/>a<sp/>go,<sp/>before<sp/>raising<sp/>priority<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Watchdog<sp/>sleeping<sp/>for<sp/>%lu<sp/>msecs<sp/>before<sp/>unthrottling\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>th-&gt;throttledSleepTime<sp/>));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__unix__util_8c_1a1b3c20044c9401c42add29475636e83d" kindref="member">Pa_Sleep</ref>(<sp/>th-&gt;throttledSleepTime<sp/>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>callback<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pthread_setschedparam(<sp/>th-&gt;callbackThread,<sp/>SCHED_FIFO,<sp/>&amp;spm<sp/>)<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__debugprint_8h_1a6452e5dde90d9c4ef698559e3f928b17" kindref="member">PA_DEBUG</ref>((<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Couldn&apos;t<sp/>raise<sp/>priority<sp/>of<sp/>audio<sp/>thread:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>strerror(<sp/>errno<sp/>)<sp/>));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="pa__cpuload_8c_1af7bff59bbfe46a388e21633bf49ea0d6" kindref="member">PaUtil_GetCpuLoad</ref>(<sp/>th-&gt;cpuLoadMeasurer<sp/>)<sp/>&gt;=<sp/>.99<sp/>)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intervalMsec<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intervalMsec<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowpassCoeff<sp/>=<sp/>.97;</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowpassCoeff1<sp/>=<sp/>.99999<sp/>-<sp/>lowpassCoeff;</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>throttled<sp/>&amp;&amp;<sp/>avgCpuLoad<sp/>&lt;<sp/>.8<sp/>)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intervalMsec<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throttled<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowpassCoeff<sp/>=<sp/>.9;</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowpassCoeff1<sp/>=<sp/>.99999<sp/>-<sp/>lowpassCoeff;</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cleanup_pop(<sp/>1<sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Execute<sp/>cleanup<sp/>on<sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shouldn&apos;t<sp/>get<sp/>here<sp/>in<sp/>the<sp/>normal<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>on<sp/>error<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>pres<sp/>=<sp/>malloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref>)<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>*pres<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_exit(<sp/>pres<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CallbackUpdate(<sp/>PaAlsaThreading<sp/>*th<sp/>)</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>th-&gt;callbackTime<sp/>=<sp/><ref refid="pa__unix__util_8c_1aa8e0cf2794cec9f182ff23638aed33ed" kindref="member">PaUtil_GetTime</ref>();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>th-&gt;callbackCpuTime<sp/>=<sp/><ref refid="pa__cpuload_8c_1af7bff59bbfe46a388e21633bf49ea0d6" kindref="member">PaUtil_GetCpuLoad</ref>(<sp/>th-&gt;cpuLoadMeasurer<sp/>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="694"><highlight class="comment">static<sp/>void<sp/>*CanaryFunc(<sp/>void<sp/>*userData<sp/>)</highlight></codeline>
<codeline lineno="695"><highlight class="comment">{</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>unsigned<sp/>intervalMsec<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/>PaUtilThreading<sp/>*th<sp/>=<sp/>(PaUtilThreading<sp/>*)<sp/>userData;</highlight></codeline>
<codeline lineno="698"><highlight class="comment"></highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>while(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th-&gt;canaryTime<sp/>=<sp/>PaUtil_GetTime();</highlight></codeline>
<codeline lineno="702"><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_testcancel();</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pa_Sleep(<sp/>intervalMsec<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="comment"></highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_exit(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="comment">}</highlight></codeline>
<codeline lineno="709"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/os/unix/pa_unix_util.c"/>
  </compounddef>
</doxygen>
