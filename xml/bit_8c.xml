<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="bit_8c" kind="file" language="C++">
    <compoundname>bit.c</compoundname>
    <includes refid="libmad_2global_8h" local="yes">global.h</includes>
    <includes refid="bit_8h" local="yes">bit.h</includes>
    <incdepgraph>
      <node id="10626">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c</label>
        <link refid="bit.c"/>
        <childnode refid="10627" relation="include">
        </childnode>
        <childnode refid="10628" relation="include">
        </childnode>
      </node>
      <node id="10628">
        <label>bit.h</label>
        <link refid="bit_8h"/>
      </node>
      <node id="10627">
        <label>global.h</label>
        <link refid="libmad_2global_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" prot="public" static="no">
        <name>CHAR_BIT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="31" column="13" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bit_8c_1a3a57af5c3275b2f53fa64274b11e8d52" prot="public" static="no">
        <name>CRC_POLY</name>
        <initializer>0x8005</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="82" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bit_8c_1a2bef7a5ce104eeb747bd0779f21f996c" prot="public" static="yes" mutable="no">
        <type>unsigned short <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref></type>
        <definition>unsigned short const crc_table[256]</definition>
        <argsstring>[256]</argsstring>
        <name>crc_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="44" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bit_8c_1a123dabe76966366b4862de11981384b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void mad_bit_init</definition>
        <argsstring>(struct mad_bitptr *bitptr, unsigned char const *byte)</argsstring>
        <name>mad_bit_init</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> *</type>
          <declname>bitptr</declname>
        </param>
        <param>
          <type>unsigned char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="88" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="bit_8c_1aa71656ef69d19e3a9b81e4ab5deaf98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>unsigned int mad_bit_length</definition>
        <argsstring>(struct mad_bitptr const *begin, struct mad_bitptr const *end)</argsstring>
        <name>mad_bit_length</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="99" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="bit_8c_1a566f5f7058df278bdfb7970d3f939ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
        <definition>unsigned char const* mad_bit_nextbyte</definition>
        <argsstring>(struct mad_bitptr const *bitptr)</argsstring>
        <name>mad_bit_nextbyte</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>bitptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="110" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="bit_8c_1a058df638af296aac7efdd525ff327066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void mad_bit_skip</definition>
        <argsstring>(struct mad_bitptr *bitptr, unsigned int len)</argsstring>
        <name>mad_bit_skip</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> *</type>
          <declname>bitptr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="119" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="119" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long mad_bit_read</definition>
        <argsstring>(struct mad_bitptr *bitptr, unsigned int len)</argsstring>
        <name>mad_bit_read</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref> *</type>
          <declname>bitptr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="137" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="137" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="bit_8c_1a138aa4083765054f0ae501be5872a03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short mad_bit_crc</definition>
        <argsstring>(struct mad_bitptr bitptr, unsigned int len, unsigned short init)</argsstring>
        <name>mad_bit_crc</name>
        <param>
          <type>struct <ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref></type>
          <declname>bitptr</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" line="197" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c" bodystart="197" bodyend="237"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libmad<sp/>-<sp/>MPEG<sp/>audio<sp/>decoder<sp/>library</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2004<sp/>Underbit<sp/>Technologies,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>bit.c,v<sp/>1.2<sp/>2005-09-12<sp/>07:01:29<sp/>dmazzoni<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="libmad_2global_8h" kindref="compound">global.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>HAVE_LIMITS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CHAR_BIT<sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="bit_8h" kindref="compound">bit.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>lookup<sp/>table<sp/>for<sp/>computing<sp/>the<sp/>CRC-check<sp/>word.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>As<sp/>described<sp/>in<sp/>section<sp/>2.4.3.1<sp/>and<sp/>depicted<sp/>in<sp/>Figure<sp/>A.9</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>of<sp/>ISO/IEC<sp/>11172-3,<sp/>the<sp/>generator<sp/>polynomial<sp/>is:</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>G(X)<sp/>=<sp/>X^16<sp/>+<sp/>X^15<sp/>+<sp/>X^2<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>crc_table[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>0x0000,<sp/>0x8005,<sp/>0x800f,<sp/>0x000a,<sp/>0x801b,<sp/>0x001e,<sp/>0x0014,<sp/>0x8011,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>0x8033,<sp/>0x0036,<sp/>0x003c,<sp/>0x8039,<sp/>0x0028,<sp/>0x802d,<sp/>0x8027,<sp/>0x0022,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>0x8063,<sp/>0x0066,<sp/>0x006c,<sp/>0x8069,<sp/>0x0078,<sp/>0x807d,<sp/>0x8077,<sp/>0x0072,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>0x0050,<sp/>0x8055,<sp/>0x805f,<sp/>0x005a,<sp/>0x804b,<sp/>0x004e,<sp/>0x0044,<sp/>0x8041,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>0x80c3,<sp/>0x00c6,<sp/>0x00cc,<sp/>0x80c9,<sp/>0x00d8,<sp/>0x80dd,<sp/>0x80d7,<sp/>0x00d2,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>0x00f0,<sp/>0x80f5,<sp/>0x80ff,<sp/>0x00fa,<sp/>0x80eb,<sp/>0x00ee,<sp/>0x00e4,<sp/>0x80e1,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>0x00a0,<sp/>0x80a5,<sp/>0x80af,<sp/>0x00aa,<sp/>0x80bb,<sp/>0x00be,<sp/>0x00b4,<sp/>0x80b1,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>0x8093,<sp/>0x0096,<sp/>0x009c,<sp/>0x8099,<sp/>0x0088,<sp/>0x808d,<sp/>0x8087,<sp/>0x0082,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>0x8183,<sp/>0x0186,<sp/>0x018c,<sp/>0x8189,<sp/>0x0198,<sp/>0x819d,<sp/>0x8197,<sp/>0x0192,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>0x01b0,<sp/>0x81b5,<sp/>0x81bf,<sp/>0x01ba,<sp/>0x81ab,<sp/>0x01ae,<sp/>0x01a4,<sp/>0x81a1,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>0x01e0,<sp/>0x81e5,<sp/>0x81ef,<sp/>0x01ea,<sp/>0x81fb,<sp/>0x01fe,<sp/>0x01f4,<sp/>0x81f1,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>0x81d3,<sp/>0x01d6,<sp/>0x01dc,<sp/>0x81d9,<sp/>0x01c8,<sp/>0x81cd,<sp/>0x81c7,<sp/>0x01c2,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>0x0140,<sp/>0x8145,<sp/>0x814f,<sp/>0x014a,<sp/>0x815b,<sp/>0x015e,<sp/>0x0154,<sp/>0x8151,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>0x8173,<sp/>0x0176,<sp/>0x017c,<sp/>0x8179,<sp/>0x0168,<sp/>0x816d,<sp/>0x8167,<sp/>0x0162,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>0x8123,<sp/>0x0126,<sp/>0x012c,<sp/>0x8129,<sp/>0x0138,<sp/>0x813d,<sp/>0x8137,<sp/>0x0132,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>0x0110,<sp/>0x8115,<sp/>0x811f,<sp/>0x011a,<sp/>0x810b,<sp/>0x010e,<sp/>0x0104,<sp/>0x8101,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>0x8303,<sp/>0x0306,<sp/>0x030c,<sp/>0x8309,<sp/>0x0318,<sp/>0x831d,<sp/>0x8317,<sp/>0x0312,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>0x0330,<sp/>0x8335,<sp/>0x833f,<sp/>0x033a,<sp/>0x832b,<sp/>0x032e,<sp/>0x0324,<sp/>0x8321,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>0x0360,<sp/>0x8365,<sp/>0x836f,<sp/>0x036a,<sp/>0x837b,<sp/>0x037e,<sp/>0x0374,<sp/>0x8371,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>0x8353,<sp/>0x0356,<sp/>0x035c,<sp/>0x8359,<sp/>0x0348,<sp/>0x834d,<sp/>0x8347,<sp/>0x0342,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>0x03c0,<sp/>0x83c5,<sp/>0x83cf,<sp/>0x03ca,<sp/>0x83db,<sp/>0x03de,<sp/>0x03d4,<sp/>0x83d1,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>0x83f3,<sp/>0x03f6,<sp/>0x03fc,<sp/>0x83f9,<sp/>0x03e8,<sp/>0x83ed,<sp/>0x83e7,<sp/>0x03e2,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>0x83a3,<sp/>0x03a6,<sp/>0x03ac,<sp/>0x83a9,<sp/>0x03b8,<sp/>0x83bd,<sp/>0x83b7,<sp/>0x03b2,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>0x0390,<sp/>0x8395,<sp/>0x839f,<sp/>0x039a,<sp/>0x838b,<sp/>0x038e,<sp/>0x0384,<sp/>0x8381,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>0x0280,<sp/>0x8285,<sp/>0x828f,<sp/>0x028a,<sp/>0x829b,<sp/>0x029e,<sp/>0x0294,<sp/>0x8291,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>0x82b3,<sp/>0x02b6,<sp/>0x02bc,<sp/>0x82b9,<sp/>0x02a8,<sp/>0x82ad,<sp/>0x82a7,<sp/>0x02a2,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>0x82e3,<sp/>0x02e6,<sp/>0x02ec,<sp/>0x82e9,<sp/>0x02f8,<sp/>0x82fd,<sp/>0x82f7,<sp/>0x02f2,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>0x02d0,<sp/>0x82d5,<sp/>0x82df,<sp/>0x02da,<sp/>0x82cb,<sp/>0x02ce,<sp/>0x02c4,<sp/>0x82c1,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>0x8243,<sp/>0x0246,<sp/>0x024c,<sp/>0x8249,<sp/>0x0258,<sp/>0x825d,<sp/>0x8257,<sp/>0x0252,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>0x0270,<sp/>0x8275,<sp/>0x827f,<sp/>0x027a,<sp/>0x826b,<sp/>0x026e,<sp/>0x0264,<sp/>0x8261,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>0x0220,<sp/>0x8225,<sp/>0x822f,<sp/>0x022a,<sp/>0x823b,<sp/>0x023e,<sp/>0x0234,<sp/>0x8231,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>0x8213,<sp/>0x0216,<sp/>0x021c,<sp/>0x8219,<sp/>0x0208,<sp/>0x820d,<sp/>0x8207,<sp/>0x0202</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="bit_8c_1a3a57af5c3275b2f53fa64274b11e8d52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>CRC_POLY<sp/><sp/>0x8005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;init()</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>initialize<sp/>bit<sp/>pointer<sp/>struct</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a5cb09e97beb649283dc9de7f35dc0344" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bit_8c_1a123dabe76966366b4862de11981384b1" kindref="member">mad_bit_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>*bitptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*byte)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref><sp/><sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/><sp/>=<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;length()</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>return<sp/>number<sp/>of<sp/>bits<sp/>between<sp/>start<sp/>and<sp/>end<sp/>points</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a5fe08816cab8812f2c67755cd857efde" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bit_8c_1aa71656ef69d19e3a9b81e4ab5deaf98a" kindref="member">mad_bit_length</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*begin,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="convtest_8m_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>+</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref><sp/>*<sp/>(end-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref><sp/>-<sp/>(begin-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref><sp/>+<sp/>1))<sp/>+<sp/>(<ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref><sp/>-<sp/>end-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;nextbyte()</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>return<sp/>pointer<sp/>to<sp/>next<sp/>unprocessed<sp/>byte</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a9fc6c68afe35a50264107280814c5f43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="bit_8c_1a566f5f7058df278bdfb7970d3f939ef7" kindref="member">mad_bit_nextbyte</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*bitptr)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>==<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref><sp/>?<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref><sp/>:<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;skip()</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>advance<sp/>bit<sp/>pointer</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a09ebe709118c8ab4c3fc9678c0ce67a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bit_8c_1a058df638af296aac7efdd525ff327066" kindref="member">mad_bit_skip</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>*bitptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref><sp/>+=<sp/>len<sp/>/<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>-=<sp/>len<sp/>%<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>&gt;<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>++;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>+=<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>&lt;<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>=<sp/>*bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;read()</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>read<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>bits<sp/>and<sp/>return<sp/>their<sp/>UIMSBF<sp/>value</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a691bcc7fa9b862661689da7744c1c0b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>*bitptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>==<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>=<sp/>*bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len &lt; bitptr-&gt;</ref>left)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref>)<sp/>-<sp/>1))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>-<sp/>len);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>-=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remaining<sp/>bits<sp/>in<sp/>current<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref>)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>len<sp/><sp/>-=<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>++;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>=<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>more<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>)<sp/>|<sp/>*bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>++;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/><sp/>-=<sp/><ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>=<sp/>*bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>|<sp/>(bitptr-&gt;<ref refid="structmad__bitptr_1a175b8ed6a6b78c10d3fdbefe6b31efcc" kindref="member">cache</ref><sp/>&gt;&gt;<sp/>(<ref refid="bit_8c_1a308d9dd2c0028ddb184b455bbd7865de" kindref="member">CHAR_BIT</ref><sp/>-<sp/>len));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>bitptr-&gt;<ref refid="structmad__bitptr_1ade0841b075cdd7a3285e1bd803ef8b95" kindref="member">left</ref><sp/>-=<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;write()</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>write<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>bits</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bit_8h_1a489b2b30e963c86f152a25a8036547c6" kindref="member">mad_bit_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>*bitptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>bitptr-&gt;<ref refid="structmad__bitptr_1a14f78c3eb4ce7677fc5cde553202cf4d" kindref="member">byte</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>NAME:<sp/><sp/><sp/><sp/>bit-&gt;crc()</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>DESCRIPTION:<sp/>compute<sp/>CRC-check<sp/>word</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a3adcbec8bcd4cecfb5ba5ae2d271af2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="bit_8c_1a138aa4083765054f0ae501be5872a03c" kindref="member">mad_bit_crc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmad__bitptr" kindref="compound">mad_bitptr</ref><sp/>bitptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="seqread_8c_1aa21af39fe271e7a7e1f388c5627e7fc1" kindref="member">init</ref>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crc;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(crc<sp/>=<sp/>init;<sp/>len<sp/>&gt;=<sp/>32;<sp/>len<sp/>-=<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;bitptr,<sp/>32);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^<sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/>(data<sp/>&gt;&gt;<sp/>24))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^<sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/>(data<sp/>&gt;&gt;<sp/>16))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^<sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/>(data<sp/>&gt;&gt;<sp/><sp/>8))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^<sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/>(data<sp/>&gt;&gt;<sp/><sp/>0))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(len<sp/>/<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;bitptr,<sp/>8))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;bitptr,<sp/>8))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>crc<sp/>=<sp/>(crc<sp/>&lt;&lt;<sp/>8)<sp/>^</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_table[((crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;bitptr,<sp/>8))<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>len<sp/>%=<sp/>8;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len--)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msb;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>msb<sp/>=<sp/><ref refid="bit_8c_1a11655f4eef6b968f59ffcc2f0e18767c" kindref="member">mad_bit_read</ref>(&amp;bitptr,<sp/>1)<sp/>^<sp/>(crc<sp/>&gt;&gt;<sp/>15);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msb<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>^=<sp/><ref refid="bit_8c_1a3a57af5c3275b2f53fa64274b11e8d52" kindref="member">CRC_POLY</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crc<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/bit.c"/>
  </compounddef>
</doxygen>
