<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="struct_a_v_b_print" kind="struct" language="C++" prot="public">
    <compoundname>AVBPrint</compoundname>
    <includes refid="bprint_8h" local="no">bprint.h</includes>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Buffer to print data progressively</para><para>The string buffer grows as necessary and is always 0-terminated. The content of the string is never accessed, and thus is encoding-agnostic and can even hold binary data.</para><para>Small buffers are kept in the structure itself, and thus require no memory allocation at all (unless the contents of the buffer is needed after the structure goes out of scope). This is almost as lightweight as declaring a local &quot;char buf[512]&quot;.</para><para>The length of the string can go beyond the allocated size: the buffer is then truncated, but the functions still keep account of the actual total length.</para><para>In other words, buf-&gt;len can be greater than buf-&gt;size and records the total length of what would have been to the buffer if there had been enough memory.</para><para>Append operations do not need to be tested for failure: if a memory allocation fails, data stop being appended to the buffer, but the length is still updated. This situation can be tested with av_bprint_is_complete().</para><para>The size_max field determines several possible behaviours:</para><para>size_max = -1 (= UINT_MAX) or any large value will let the buffer be reallocated as necessary, with an amortized linear cost.</para><para>size_max = 0 prevents writing anything to the buffer: only the total length is computed. The write operations can then possibly be repeated in a buffer with exactly the necessary size (using size_init = size_max = len + 1).</para><para>size_max = 1 is automatically replaced by the exact size available in the structure itself, thus ensuring no dynamic memory allocation. The internal buffer is large enough to hold a reasonable paragraph of text, such as the current paragraph. </para>    </detaileddescription>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" line="77" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/ffmpeg/libavutil/bprint.h" bodystart="77" bodyend="85"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
