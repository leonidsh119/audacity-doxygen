<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lv2_2waflib_2_tools_2glib2_8py" kind="file" language="Python">
    <compoundname>glib2.py</compoundname>
    <innerclass refid="classwaflib_1_1_tools_1_1glib2_1_1glib__genmarshal" prot="public">waflib::Tools::glib2::glib_genmarshal</innerclass>
    <innerclass refid="classwaflib_1_1_tools_1_1glib2_1_1glib__mkenums" prot="public">waflib::Tools::glib2::glib_mkenums</innerclass>
    <innerclass refid="classwaflib_1_1_tools_1_1glib2_1_1glib__validate__schema" prot="public">waflib::Tools::glib2::glib_validate_schema</innerclass>
    <innernamespace refid="namespacewaflib_1_1_tools_1_1glib2">waflib::Tools::glib2</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!<sp/>/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>encoding:<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WARNING!<sp/>Do<sp/>not<sp/>edit!<sp/>http://waf.googlecode.com/git/docs/wafbook/single.html#_obtaining_the_waf_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>waflib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Task,Utils,Options,Errors,Logs</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_task_gen" kindref="compound">waflib.TaskGen</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>taskgen_method,before_method,after_method,feature</highlight></codeline>
<codeline lineno="8"><highlight class="normal">@taskgen_method</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1acf0a8c8e25827dc3701010d5bfcd7671" kindref="member">add_marshal_file</ref>(self,filename,prefix):</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(self,</highlight><highlight class="stringliteral">&apos;marshal_list&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.marshal_list=[]</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>self.meths.append(</highlight><highlight class="stringliteral">&apos;process_marshal&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>self.marshal_list.append((filename,prefix))</highlight></codeline>
<codeline lineno="14"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a56d188988dd3babc77f1d283e1f8c1b1" kindref="member">before_method</ref>(</highlight><highlight class="stringliteral">&apos;process_source&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1a456283be5d64f885ee242262515ab720" kindref="member">process_marshal</ref>(self):</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>f,prefix<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>getattr(self,</highlight><highlight class="stringliteral">&apos;marshal_list&apos;</highlight><highlight class="normal">,[]):</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node=self.path.find_resource(f)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>node:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Errors.WafError(</highlight><highlight class="stringliteral">&apos;file<sp/>not<sp/>found<sp/>%r&apos;</highlight><highlight class="normal">%f)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_node=node.change_ext(</highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_node=node.change_ext(</highlight><highlight class="stringliteral">&apos;.c&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task=self.create_task(</highlight><highlight class="stringliteral">&apos;glib_genmarshal&apos;</highlight><highlight class="normal">,node,[h_node,c_node])</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task.env.GLIB_GENMARSHAL_PREFIX=prefix</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>self.source=self.to_nodes(getattr(self,</highlight><highlight class="stringliteral">&apos;source&apos;</highlight><highlight class="normal">,[]))</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>self.source.append(c_node)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">glib_genmarshal(Task.Task):</highlight></codeline>
<codeline lineno="27" refid="classwaflib_1_1_tools_1_1glib2_1_1glib__genmarshal_1aa3903f3a2c4c26e513378a7b7afd65a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1glib2_1_1glib__genmarshal_1aa3903f3a2c4c26e513378a7b7afd65a5" kindref="member">run</ref>(self):</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bld=self.<ref refid="classwaflib_1_1_task_1_1_task_1a84db2881aae1bcc2ad19c0eecf24804c" kindref="member">inputs</ref>[0].__class__.ctx</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get=self.env.get_flat</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd1=</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>--prefix=%s<sp/>--header<sp/>&gt;<sp/>%s&quot;</highlight><highlight class="normal">%(get(</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL&apos;</highlight><highlight class="normal">),self.<ref refid="classwaflib_1_1_task_1_1_task_1a84db2881aae1bcc2ad19c0eecf24804c" kindref="member">inputs</ref>[0].srcpath(),get(</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL_PREFIX&apos;</highlight><highlight class="normal">),self.<ref refid="classwaflib_1_1_task_1_1_task_1a7183c692f1eb01b9f7e66daca035bce4" kindref="member">outputs</ref>[0].abspath())</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=bld.exec_command(cmd1)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret:</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c=</highlight><highlight class="stringliteral">&apos;&apos;&apos;#include<sp/>&quot;%s&quot;\n&apos;&apos;&apos;</highlight><highlight class="normal">%self.<ref refid="classwaflib_1_1_task_1_1_task_1a7183c692f1eb01b9f7e66daca035bce4" kindref="member">outputs</ref>[0].name</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classwaflib_1_1_task_1_1_task_1a7183c692f1eb01b9f7e66daca035bce4" kindref="member">outputs</ref>[1].write(c)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd2=</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>--prefix=%s<sp/>--body<sp/>&gt;&gt;<sp/>%s&quot;</highlight><highlight class="normal">%(get(</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL&apos;</highlight><highlight class="normal">),self.<ref refid="classwaflib_1_1_task_1_1_task_1a84db2881aae1bcc2ad19c0eecf24804c" kindref="member">inputs</ref>[0].srcpath(),get(</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL_PREFIX&apos;</highlight><highlight class="normal">),self.<ref refid="classwaflib_1_1_task_1_1_task_1a7183c692f1eb01b9f7e66daca035bce4" kindref="member">outputs</ref>[1].abspath())</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bld.exec_command(cmd2)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>vars=[</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL_PREFIX&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>color=</highlight><highlight class="stringliteral">&apos;BLUE&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ext_out=[</highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="40"><highlight class="normal">@taskgen_method</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1ab6cc5b3a61941917b2ef0b0ee747d093" kindref="member">add_enums_from_template</ref>(self,source=&apos;&apos;,target=&apos;&apos;,template=&apos;&apos;,comments=&apos;&apos;):</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(self,</highlight><highlight class="stringliteral">&apos;enums_list&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.enums_list=[]</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>self.meths.append(</highlight><highlight class="stringliteral">&apos;process_enums&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>self.enums_list.append({</highlight><highlight class="stringliteral">&apos;source&apos;</highlight><highlight class="normal">:source,</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">:target,</highlight><highlight class="stringliteral">&apos;template&apos;</highlight><highlight class="normal">:template,</highlight><highlight class="stringliteral">&apos;file-head&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;file-prod&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;file-tail&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;enum-prod&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;value-head&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;value-prod&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;value-tail&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;comments&apos;</highlight><highlight class="normal">:comments})</highlight></codeline>
<codeline lineno="46"><highlight class="normal">@taskgen_method</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1a311bc9d55cb4c2ec013725e387841175" kindref="member">add_enums</ref>(self,source=&apos;&apos;,target=&apos;&apos;,file_head=&apos;&apos;,file_prod=&apos;&apos;,file_tail=&apos;&apos;,enum_prod=&apos;&apos;,value_head=&apos;&apos;,value_prod=&apos;&apos;,value_tail=&apos;&apos;,comments=&apos;&apos;):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(self,</highlight><highlight class="stringliteral">&apos;enums_list&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.enums_list=[]</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>self.meths.append(</highlight><highlight class="stringliteral">&apos;process_enums&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>self.enums_list.append({</highlight><highlight class="stringliteral">&apos;source&apos;</highlight><highlight class="normal">:source,</highlight><highlight class="stringliteral">&apos;template&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">:target,</highlight><highlight class="stringliteral">&apos;file-head&apos;</highlight><highlight class="normal">:file_head,</highlight><highlight class="stringliteral">&apos;file-prod&apos;</highlight><highlight class="normal">:file_prod,</highlight><highlight class="stringliteral">&apos;file-tail&apos;</highlight><highlight class="normal">:file_tail,</highlight><highlight class="stringliteral">&apos;enum-prod&apos;</highlight><highlight class="normal">:enum_prod,</highlight><highlight class="stringliteral">&apos;value-head&apos;</highlight><highlight class="normal">:value_head,</highlight><highlight class="stringliteral">&apos;value-prod&apos;</highlight><highlight class="normal">:value_prod,</highlight><highlight class="stringliteral">&apos;value-tail&apos;</highlight><highlight class="normal">:value_tail,</highlight><highlight class="stringliteral">&apos;comments&apos;</highlight><highlight class="normal">:comments})</highlight></codeline>
<codeline lineno="52"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a56d188988dd3babc77f1d283e1f8c1b1" kindref="member">before_method</ref>(</highlight><highlight class="stringliteral">&apos;process_source&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1aca6df9f0a0afde09bfbc5d3e98702075" kindref="member">process_enums</ref>(self):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>enum<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>getattr(self,</highlight><highlight class="stringliteral">&apos;enums_list&apos;</highlight><highlight class="normal">,[]):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task=self.create_task(</highlight><highlight class="stringliteral">&apos;glib_mkenums&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env=task.env</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs=[]</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_list=self.to_list(enum[</highlight><highlight class="stringliteral">&apos;source&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>source_list:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classwaflib_1_1_errors_1_1_waf_error" kindref="compound">Errors.WafError</ref>(</highlight><highlight class="stringliteral">&apos;missing<sp/>source<sp/>&apos;</highlight><highlight class="normal">+<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>(enum))</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_list=[self.path.find_resource(k)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>source_list]</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs+=source_list</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS_SOURCE&apos;</highlight><highlight class="normal">]=[k.abspath()</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>source_list]</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>enum[</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classwaflib_1_1_errors_1_1_waf_error" kindref="compound">Errors.WafError</ref>(</highlight><highlight class="stringliteral">&apos;missing<sp/>target<sp/>&apos;</highlight><highlight class="normal">+<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>(enum))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tgt_node=self.path.find_or_declare(enum[</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tgt_node.name.endswith(</highlight><highlight class="stringliteral">&apos;.c&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.source.append(tgt_node)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS_TARGET&apos;</highlight><highlight class="normal">]=tgt_node.abspath()</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options=[]</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>enum[</highlight><highlight class="stringliteral">&apos;template&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template_node=self.path.find_resource(enum[</highlight><highlight class="stringliteral">&apos;template&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.append(</highlight><highlight class="stringliteral">&apos;--template<sp/>%s&apos;</highlight><highlight class="normal">%(template_node.abspath()))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.append(template_node)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params={</highlight><highlight class="stringliteral">&apos;file-head&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--fhead&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;file-prod&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--fprod&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;file-tail&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--ftail&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;enum-prod&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--eprod&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;value-head&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--vhead&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;value-prod&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--vprod&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;value-tail&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--vtail&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;comments&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;--comments&apos;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>param,option<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>params.items():</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>enum[param]:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.append(</highlight><highlight class="stringliteral">&apos;%s<sp/>%r&apos;</highlight><highlight class="normal">%(option,enum[param]))</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS_OPTIONS&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(options)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task.set_inputs(inputs)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task.set_outputs(tgt_node)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1glib2_1_1glib__mkenums" kindref="compound">glib_mkenums</ref>(<ref refid="classwaflib_1_1_task_1_1_task" kindref="compound">Task.Task</ref>):</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>run_str=</highlight><highlight class="stringliteral">&apos;${GLIB_MKENUMS}<sp/>${GLIB_MKENUMS_OPTIONS}<sp/>${GLIB_MKENUMS_SOURCE}<sp/>&gt;<sp/>${GLIB_MKENUMS_TARGET}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>color=</highlight><highlight class="stringliteral">&apos;PINK&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>ext_out=[</highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="86"><highlight class="normal">@taskgen_method</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1ab531686066a4e372e11153f59eb8a628" kindref="member">add_settings_schemas</ref>(self,filename_list):</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(self,</highlight><highlight class="stringliteral">&apos;settings_schema_files&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.settings_schema_files=[]</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(filename_list,list):</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename_list=[filename_list]</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>self.settings_schema_files.extend(filename_list)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">@taskgen_method</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1ae4d2a8204307e1016e1da9f22c082bf5" kindref="member">add_settings_enums</ref>(self,namespace,filename_list):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(self,</highlight><highlight class="stringliteral">&apos;settings_enum_namespace&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classwaflib_1_1_errors_1_1_waf_error" kindref="compound">Errors.WafError</ref>(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>add<sp/>gsettings<sp/>enums<sp/>to<sp/>&apos;%s&apos;<sp/>more<sp/>than<sp/>once&quot;</highlight><highlight class="normal">%self.name)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>self.settings_enum_namespace=namespace</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_tools_1_1tex_1a7638d43e3ce55594540ea118202a9a40" kindref="member">type</ref>(filename_list)!=</highlight><highlight class="stringliteral">&apos;list&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename_list=[filename_list]</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>self.settings_enum_files=filename_list</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1a4d5b1ae5edd56cff1b39d4979510bf7b" kindref="member">r_change_ext</ref>(self,ext):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>name=self.name</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>k=name.rfind(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>k&gt;=0:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=name[:k]+ext</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=name+ext</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.parent.find_or_declare([name])</highlight></codeline>
<codeline lineno="109"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;glib2&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1af1dcb72130b8fd03b0227b60d647e0e8" kindref="member">process_settings</ref>(self):</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>enums_tgt_node=[]</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>install_files=[]</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>settings_schema_files=getattr(self,</highlight><highlight class="stringliteral">&apos;settings_schema_files&apos;</highlight><highlight class="normal">,[])</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>settings_schema_files<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classwaflib_1_1_task_1_1_task_1ace363b3fc9aa947c470a9dd8684e4d2a" kindref="member">env</ref>[</highlight><highlight class="stringliteral">&apos;GLIB_COMPILE_SCHEMAS&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classwaflib_1_1_errors_1_1_waf_error" kindref="compound">Errors.WafError</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>process<sp/>GSettings<sp/>schemas<sp/>-<sp/>glib-compile-schemas<sp/>was<sp/>not<sp/>found<sp/>during<sp/>configure&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(self,</highlight><highlight class="stringliteral">&apos;settings_enum_files&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_task=self.create_task(</highlight><highlight class="stringliteral">&apos;glib_mkenums&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_list=self.settings_enum_files</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_list=[self.path.find_resource(k)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>source_list]</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_task.set_inputs(source_list)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_task.env[</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS_SOURCE&apos;</highlight><highlight class="normal">]=[k.abspath()</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>source_list]</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target=self.settings_enum_namespace+</highlight><highlight class="stringliteral">&apos;.enums.xml&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tgt_node=self.path.find_or_declare(target)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_task.set_outputs(tgt_node)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_task.env[</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS_TARGET&apos;</highlight><highlight class="normal">]=tgt_node.abspath()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_tgt_node=[tgt_node]</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>install_files.append(tgt_node)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options=</highlight><highlight class="stringliteral">&apos;--comments<sp/>&quot;&lt;!--<sp/>@comment@<sp/>--&gt;&quot;<sp/>--fhead<sp/>&quot;&lt;schemalist&gt;&quot;<sp/>--vhead<sp/>&quot;<sp/><sp/>&lt;@type@<sp/>id=\\&quot;%s.@EnumName@\\&quot;&gt;&quot;<sp/>--vprod<sp/>&quot;<sp/><sp/><sp/><sp/>&lt;value<sp/>nick=\\&quot;@valuenick@\\&quot;<sp/>value=\\&quot;@valuenum@\\&quot;/&gt;&quot;<sp/>--vtail<sp/>&quot;<sp/><sp/>&lt;/@type@&gt;&quot;<sp/>--ftail<sp/>&quot;&lt;/schemalist&gt;&quot;<sp/>&apos;</highlight><highlight class="normal">%(self.settings_enum_namespace)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enums_task.env[</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS_OPTIONS&apos;</highlight><highlight class="normal">]=options</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>schema<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>settings_schema_files:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema_task=self.create_task(</highlight><highlight class="stringliteral">&apos;glib_validate_schema&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema_node=self.path.find_resource(schema)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>schema_node:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classwaflib_1_1_errors_1_1_waf_error" kindref="compound">Errors.WafError</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>the<sp/>schema<sp/>file<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">%schema)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>install_files.append(schema_node)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_list=enums_tgt_node+[schema_node]</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema_task.set_inputs(source_list)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema_task.env[</highlight><highlight class="stringliteral">&apos;GLIB_COMPILE_SCHEMAS_OPTIONS&apos;</highlight><highlight class="normal">]=[(</highlight><highlight class="stringliteral">&quot;--schema-file=&quot;</highlight><highlight class="normal">+k.abspath())</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>source_list]</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_node=<ref refid="namespacewaflib_1_1_tools_1_1glib2_1a4d5b1ae5edd56cff1b39d4979510bf7b" kindref="member">r_change_ext</ref>(schema_node,</highlight><highlight class="stringliteral">&apos;.xml.valid&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema_task.set_outputs(target_node)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema_task.env[</highlight><highlight class="stringliteral">&apos;GLIB_VALIDATE_SCHEMA_OUTPUT&apos;</highlight><highlight class="normal">]=target_node.abspath()</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">compile_schemas_callback(bld):</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>bld.is_install:</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.pprint(</highlight><highlight class="stringliteral">&apos;YELLOW&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;Updating<sp/>GSettings<sp/>schema<sp/>cache&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command=Utils.subst_vars(</highlight><highlight class="stringliteral">&quot;${GLIB_COMPILE_SCHEMAS}<sp/>${GSETTINGSSCHEMADIR}&quot;</highlight><highlight class="normal">,bld.env)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=self.bld.exec_command(command)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.bld.is_install:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classwaflib_1_1_task_1_1_task_1ace363b3fc9aa947c470a9dd8684e4d2a" kindref="member">env</ref>[</highlight><highlight class="stringliteral">&apos;GSETTINGSSCHEMADIR&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classwaflib_1_1_errors_1_1_waf_error" kindref="compound">Errors.WafError</ref>(</highlight><highlight class="stringliteral">&apos;GSETTINGSSCHEMADIR<sp/>not<sp/>defined<sp/>(should<sp/>have<sp/>been<sp/>set<sp/>up<sp/>automatically<sp/>during<sp/>configure)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>install_files:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bld.install_files(self.<ref refid="classwaflib_1_1_task_1_1_task_1ace363b3fc9aa947c470a9dd8684e4d2a" kindref="member">env</ref>[</highlight><highlight class="stringliteral">&apos;GSETTINGSSCHEMADIR&apos;</highlight><highlight class="normal">],install_files)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(self.bld,</highlight><highlight class="stringliteral">&apos;_compile_schemas_registered&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bld.add_post_fun(compile_schemas_callback)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bld._compile_schemas_registered=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwaflib_1_1_tools_1_1glib2_1_1glib__validate__schema" kindref="compound">glib_validate_schema</ref>(<ref refid="classwaflib_1_1_task_1_1_task" kindref="compound">Task.Task</ref>):</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>run_str=</highlight><highlight class="stringliteral">&apos;rm<sp/>-f<sp/>${GLIB_VALIDATE_SCHEMA_OUTPUT}<sp/>&amp;&amp;<sp/>${GLIB_COMPILE_SCHEMAS}<sp/>--dry-run<sp/>${GLIB_COMPILE_SCHEMAS_OPTIONS}<sp/>&amp;&amp;<sp/>touch<sp/>${GLIB_VALIDATE_SCHEMA_OUTPUT}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>color=</highlight><highlight class="stringliteral">&apos;PINK&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1a0bfcb0b9cc3811f9e8db925651d664fb" kindref="member">configure</ref>(conf):</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.find_program(</highlight><highlight class="stringliteral">&apos;glib-genmarshal&apos;</highlight><highlight class="normal">,var=</highlight><highlight class="stringliteral">&apos;GLIB_GENMARSHAL&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.find_perl_program(</highlight><highlight class="stringliteral">&apos;glib-mkenums&apos;</highlight><highlight class="normal">,var=</highlight><highlight class="stringliteral">&apos;GLIB_MKENUMS&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.find_program(</highlight><highlight class="stringliteral">&apos;glib-compile-schemas&apos;</highlight><highlight class="normal">,var=</highlight><highlight class="stringliteral">&apos;GLIB_COMPILE_SCHEMAS&apos;</highlight><highlight class="normal">,mandatory=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getstr(varname):</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getattr(Options.options,varname,getattr(conf.env,varname,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>gsettingsschemadir=getstr(</highlight><highlight class="stringliteral">&apos;GSETTINGSSCHEMADIR&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>gsettingsschemadir:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datadir=getstr(</highlight><highlight class="stringliteral">&apos;DATADIR&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>datadir:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix=conf.env[</highlight><highlight class="stringliteral">&apos;PREFIX&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datadir=os.path.join(prefix,</highlight><highlight class="stringliteral">&apos;share&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsettingsschemadir=os.path.join(datadir,</highlight><highlight class="stringliteral">&apos;glib-2.0&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;schemas&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.env[</highlight><highlight class="stringliteral">&apos;GSETTINGSSCHEMADIR&apos;</highlight><highlight class="normal">]=gsettingsschemadir</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1glib2_1a73e118c0f183f41207cd7b59729a6d9d" kindref="member">options</ref>(opt):</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>opt.add_option(</highlight><highlight class="stringliteral">&apos;--gsettingsschemadir&apos;</highlight><highlight class="normal">,help=</highlight><highlight class="stringliteral">&apos;GSettings<sp/>schema<sp/>location<sp/>[Default:<sp/>${datadir}/glib-2.0/schemas]&apos;</highlight><highlight class="normal">,default=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,dest=</highlight><highlight class="stringliteral">&apos;GSETTINGSSCHEMADIR&apos;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/waflib/Tools/glib2.py"/>
  </compounddef>
</doxygen>
