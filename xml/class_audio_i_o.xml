<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_audio_i_o" kind="class" language="C++" prot="public" final="yes">
    <compoundname>AudioIO</compoundname>
    <includes refid="_audio_i_o_8h" local="no">AudioIO.h</includes>
    <innerclass refid="struct_audio_i_o_1_1_scrub_queue" prot="public">AudioIO::ScrubQueue</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877d" prot="private" static="no">
        <name>@272</name>
        <enumvalue id="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877da8c499158cb9d532cde00a73836ee537e" prot="private">
          <name>PLAY_STRAIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877daf3b6e9a5f9b7cc96cb5129ae13f4fc22" prot="private">
          <name>PLAY_LOOPED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877da81b36d80177e0f97badf559d7d2d3524" prot="private">
          <name>PLAY_SCRUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="641" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="641" bodyend="647"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_audio_i_o_1a42f4cf4090548388aa1c762bb59778ba" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int AudioIO::StandardRates</definition>
        <argsstring>[]</argsstring>
        <name>StandardRates</name>
        <initializer>= {
   8000,
   11025,
   16000,
   22050,
   32000,
   44100,
   48000,
   88200,
   96000,
   176400,
   192000,
   352800,
   384000
}</initializer>
        <briefdescription>
<para>Array of common audio sample rates. </para>        </briefdescription>
        <detaileddescription>
<para>These are the rates we will always support, regardless of hardware support for them (by resampling in audacity if needed) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="379" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a4d794f0244d6be2f833a6627cbfcdae8" prot="public" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int AudioIO::NumStandardRates</definition>
        <argsstring></argsstring>
        <name>NumStandardRates</name>
        <initializer>= sizeof(<ref refid="class_audio_i_o_1a42f4cf4090548388aa1c762bb59778ba" kindref="member">AudioIO::StandardRates</ref>) /
                                      sizeof(<ref refid="class_audio_i_o_1a42f4cf4090548388aa1c762bb59778ba" kindref="member">AudioIO::StandardRates</ref>[0])</initializer>
        <briefdescription>
<para>How many standard sample rates there are. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="381" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_audio_i_o_1a7a6449b2517e01d9d71a7cd69a11f851" prot="private" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int AudioIO::RatesToTry</definition>
        <argsstring>[]</argsstring>
        <name>RatesToTry</name>
        <initializer>= {
   8000,
   9600,
   11025,
   12000,
   15000,
   16000,
   22050,
   24000,
   32000,
   44100,
   48000,
   88200,
   96000,
   176400,
   192000,
   352800,
   384000
}</initializer>
        <briefdescription>
<para>Array of audio sample rates to try to use. </para>        </briefdescription>
        <detaileddescription>
<para>These are the rates we will check if a device supports, and is as long as I can think of (to try and work out what the card can do) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="500" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1acd857695ae99aee7817a5d3db4c271c7" prot="private" static="yes" mutable="no">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const int AudioIO::NumRatesToTry</definition>
        <argsstring></argsstring>
        <name>NumRatesToTry</name>
        <initializer>= sizeof(AudioIO::RatesToTry) /
                                      sizeof(AudioIO::RatesToTry[0])</initializer>
        <briefdescription>
<para>How many sample rates to try. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="502" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a9ccf03b89e0cd5e6218550b4213a2401" prot="private" static="yes" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::mNextStreamToken</definition>
        <argsstring></argsstring>
        <name>mNextStreamToken</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="583" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ad99844c4c1facce701712ae6750b015f" prot="private" static="yes" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::mCachedPlaybackIndex</definition>
        <argsstring></argsstring>
        <name>mCachedPlaybackIndex</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="666" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1aa66d101f7f1517437f94f25d19917f86" prot="private" static="yes" mutable="no">
        <type>wxArrayLong</type>
        <definition>wxArrayLong AudioIO::mCachedPlaybackRates</definition>
        <argsstring></argsstring>
        <name>mCachedPlaybackRates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="667" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ae00831ed842c9eb0c5cb423c23d920be" prot="private" static="yes" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::mCachedCaptureIndex</definition>
        <argsstring></argsstring>
        <name>mCachedCaptureIndex</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="668" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a8b1ec1271604968c425545fafc4501e9" prot="private" static="yes" mutable="no">
        <type>wxArrayLong</type>
        <definition>wxArrayLong AudioIO::mCachedCaptureRates</definition>
        <argsstring></argsstring>
        <name>mCachedCaptureRates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="669" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a8ef848736a948b39ecb0c6dca08cc568" prot="private" static="yes" mutable="no">
        <type>wxArrayLong</type>
        <definition>wxArrayLong AudioIO::mCachedSampleRates</definition>
        <argsstring></argsstring>
        <name>mCachedSampleRates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="670" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1aa93703171e76dddb0908af3a428ddc90" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mCachedBestRateIn</definition>
        <argsstring></argsstring>
        <name>mCachedBestRateIn</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="671" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a9c35f06f25392535e3214c1a11d0c5a0" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mCachedBestRateOut</definition>
        <argsstring></argsstring>
        <name>mCachedBestRateOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="672" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="672" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_audio_i_o_1abe59a72ea00361a4ae9c027b7b86db55" prot="private" static="no" mutable="no">
        <type><ref refid="class_audio_thread" kindref="compound">AudioThread</ref> *</type>
        <definition>AudioThread* AudioIO::mThread</definition>
        <argsstring></argsstring>
        <name>mThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="571" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ad1e8c444ca5eb006c2c885b9e61fbb2a" prot="private" static="no" mutable="no">
        <type><ref refid="class_resample" kindref="compound">Resample</ref> **</type>
        <definition>Resample** AudioIO::mResample</definition>
        <argsstring></argsstring>
        <name>mResample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="575" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a9943bccca4dc39c7f8aeba2157920a96" prot="private" static="no" mutable="no">
        <type><ref refid="class_ring_buffer" kindref="compound">RingBuffer</ref> **</type>
        <definition>RingBuffer** AudioIO::mCaptureBuffers</definition>
        <argsstring></argsstring>
        <name>mCaptureBuffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="576" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1acf5a63965ec6aa6edba5b605de65d691" prot="private" static="no" mutable="no">
        <type><ref refid="class_wave_track_array" kindref="compound">WaveTrackArray</ref> *</type>
        <definition>WaveTrackArray* AudioIO::mCaptureTracks</definition>
        <argsstring></argsstring>
        <name>mCaptureTracks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="577" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a2fc9ce02752e7f102c7952005ac0dfbe" prot="private" static="no" mutable="no">
        <type><ref refid="class_ring_buffer" kindref="compound">RingBuffer</ref> **</type>
        <definition>RingBuffer** AudioIO::mPlaybackBuffers</definition>
        <argsstring></argsstring>
        <name>mPlaybackBuffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="578" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a43e96ebed3b1364269ec7c941962e201" prot="private" static="no" mutable="no">
        <type><ref refid="class_wave_track_array" kindref="compound">WaveTrackArray</ref> *</type>
        <definition>WaveTrackArray* AudioIO::mPlaybackTracks</definition>
        <argsstring></argsstring>
        <name>mPlaybackTracks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="579" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a4cf441a40e28412dd800304fa748a39b" prot="private" static="no" mutable="no">
        <type><ref refid="class_mixer" kindref="compound">Mixer</ref> **</type>
        <definition>Mixer** AudioIO::mPlaybackMixers</definition>
        <argsstring></argsstring>
        <name>mPlaybackMixers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="581" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a79a2fc9de8ddc0d4589fb05d2978c9f1" prot="private" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>volatile int AudioIO::mStreamToken</definition>
        <argsstring></argsstring>
        <name>mStreamToken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="582" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1afb2cd8cfdaff11b52c3e6b91f5bfb395" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mFactor</definition>
        <argsstring></argsstring>
        <name>mFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="584" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a4c1d73ec8e53dc39f0552c69fbb58478" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mRate</definition>
        <argsstring></argsstring>
        <name>mRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="585" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ae44e43a79e74f936873a1aa56f425d0d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mT0</definition>
        <argsstring></argsstring>
        <name>mT0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="586" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1aeaa6d968d53f7484758f2814cc39707b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mT1</definition>
        <argsstring></argsstring>
        <name>mT1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="587" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1adf2d6f71c9cd21fd2064e38572714c99" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mTime</definition>
        <argsstring></argsstring>
        <name>mTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="588" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a5788f2fdd6ea71bb5b8b0df70a2575e1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mWarpedTime</definition>
        <argsstring></argsstring>
        <name>mWarpedTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="589" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ae079828d6dcee6b9c381f9bce937e21b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mWarpedLength</definition>
        <argsstring></argsstring>
        <name>mWarpedLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="590" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1aff6b26b419fcb778d39873cd70334463" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mSeek</definition>
        <argsstring></argsstring>
        <name>mSeek</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="591" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a6381cb51853d6c61f1c438d66abce61a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mPlaybackRingBufferSecs</definition>
        <argsstring></argsstring>
        <name>mPlaybackRingBufferSecs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="592" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1abe53e98a215869221222ad75d2d3ba4a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mCaptureRingBufferSecs</definition>
        <argsstring></argsstring>
        <name>mCaptureRingBufferSecs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="593" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ae2fb7edd87f34d4ced1f24f8e5b2c598" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long AudioIO::mPlaybackSamplesToCopy</definition>
        <argsstring></argsstring>
        <name>mPlaybackSamplesToCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="594" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ac0e4f8186f0c7fd2d2be77995f3d4a94" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mMinCaptureSecsToCopy</definition>
        <argsstring></argsstring>
        <name>mMinCaptureSecsToCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="595" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a138fbc3be7e9440a23c38497347e26c5" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mPaused</definition>
        <argsstring></argsstring>
        <name>mPaused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="596" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a49b21a3035e9556a54684bf6bc32356a" prot="private" static="no" mutable="no">
        <type><ref refid="portaudio_8h_1a19874734f89958fccf86785490d53b4c" kindref="member">PaStream</ref> *</type>
        <definition>PaStream* AudioIO::mPortStreamV19</definition>
        <argsstring></argsstring>
        <name>mPortStreamV19</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="597" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a406d8e0362d4f43c34dd817710247d63" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mSoftwarePlaythrough</definition>
        <argsstring></argsstring>
        <name>mSoftwarePlaythrough</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="598" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a06462325e7e5409cb42f2c2675838aee" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mPauseRec</definition>
        <argsstring></argsstring>
        <name>mPauseRec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="599" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ac6361df44d71228f143778ecebebdb54" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float AudioIO::mSilenceLevel</definition>
        <argsstring></argsstring>
        <name>mSilenceLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="600" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ad8431949843083dcc6f069eebdcc2278" prot="private" static="no" mutable="no">
        <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>unsigned int AudioIO::mNumCaptureChannels</definition>
        <argsstring></argsstring>
        <name>mNumCaptureChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="601" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a36c6f90a506763594c598f4e7af52723" prot="private" static="no" mutable="no">
        <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>unsigned int AudioIO::mNumPlaybackChannels</definition>
        <argsstring></argsstring>
        <name>mNumPlaybackChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="602" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a3ced3771559e0231c0dc521d4770922d" prot="private" static="no" mutable="no">
        <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
        <definition>sampleFormat AudioIO::mCaptureFormat</definition>
        <argsstring></argsstring>
        <name>mCaptureFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="603" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a17c3501d96e68b6f79f354bc0b0205a9" prot="private" static="no" mutable="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::mLostSamples</definition>
        <argsstring></argsstring>
        <name>mLostSamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="604" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ac46dc8c642a3d340a0685e3cf69a8885" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>volatile bool AudioIO::mAudioThreadShouldCallFillBuffersOnce</definition>
        <argsstring></argsstring>
        <name>mAudioThreadShouldCallFillBuffersOnce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="605" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a38da766dd2ae4aee4ec2121d3a97003d" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>volatile bool AudioIO::mAudioThreadFillBuffersLoopRunning</definition>
        <argsstring></argsstring>
        <name>mAudioThreadFillBuffersLoopRunning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="606" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a5b5caa76e3cd101bc3631bcbcd498f22" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>volatile bool AudioIO::mAudioThreadFillBuffersLoopActive</definition>
        <argsstring></argsstring>
        <name>mAudioThreadFillBuffersLoopActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="607" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a79c7dd0cf7d0ac8e94eec246ba3b014d" prot="private" static="no" mutable="no">
        <type>wxLongLong</type>
        <definition>wxLongLong AudioIO::mLastPlaybackTimeMillis</definition>
        <argsstring></argsstring>
        <name>mLastPlaybackTimeMillis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="609" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a880f41d8318c700e3d6bbad4aafa64b4" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>volatile double AudioIO::mLastRecordingOffset</definition>
        <argsstring></argsstring>
        <name>mLastRecordingOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="616" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1aa029876175fac5537354387b6f8f0081" prot="private" static="no" mutable="no">
        <type><ref refid="portaudio_8h_1a4949e4a8ef9f9dbe8cbee414ce69841d" kindref="member">PaError</ref></type>
        <definition>PaError AudioIO::mLastPaError</definition>
        <argsstring></argsstring>
        <name>mLastPaError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="617" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ac012af4448662da914b6cb2edd7c7045" prot="private" static="no" mutable="no">
        <type><ref refid="class_audacity_project" kindref="compound">AudacityProject</ref> *</type>
        <definition>AudacityProject* AudioIO::mOwningProject</definition>
        <argsstring></argsstring>
        <name>mOwningProject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="619" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a460f5fb4800a06db7aba2f9682b2fb9f" prot="private" static="no" mutable="no">
        <type><ref refid="class_meter" kindref="compound">Meter</ref> *</type>
        <definition>Meter* AudioIO::mInputMeter</definition>
        <argsstring></argsstring>
        <name>mInputMeter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="620" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1ab00f0faccf7e59dce5432e36c05f243a" prot="private" static="no" mutable="no">
        <type><ref refid="class_meter" kindref="compound">Meter</ref> *</type>
        <definition>Meter* AudioIO::mOutputMeter</definition>
        <argsstring></argsstring>
        <name>mOutputMeter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="621" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a755844de58787c4ebe165e3344595de9" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mUpdateMeters</definition>
        <argsstring></argsstring>
        <name>mUpdateMeters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="622" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a8cd0f28103ef8a7f88a423caae41aef7" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>volatile bool AudioIO::mUpdatingMeters</definition>
        <argsstring></argsstring>
        <name>mUpdatingMeters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="623" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a48dbb8470710384234e15d0839cebcfa" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mEmulateMixerOutputVol</definition>
        <argsstring></argsstring>
        <name>mEmulateMixerOutputVol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="630" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1af535797f7ac020e1811cc38bfba66e17" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mInputMixerWorks</definition>
        <argsstring></argsstring>
        <name>mInputMixerWorks</name>
        <briefdescription>
<para>Can we control the hardware input level? </para>        </briefdescription>
        <detaileddescription>
<para>This flag is set to true if using portmixer to control the input volume seems to be working (and so we offer the user the control), and to false (locking the control out) otherwise. This avoids stupid scaled clipping problems when trying to do software emulated input volume control </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="638" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a9027df822d0f1ebd27de7b36dbbc6e1e" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float AudioIO::mMixerOutputVol</definition>
        <argsstring></argsstring>
        <name>mMixerOutputVol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="639" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a275e36a2478dbb4be9c62c1ca32043b0" prot="private" static="no" mutable="no">
        <type>enum AudioIO::@272                                  </type>
        <definition>enum AudioIO::@272                    AudioIO::mPlayMode</definition>
        <argsstring></argsstring>
        <name>mPlayMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="647" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a592b2c6f26e92558bb3143a086cc267e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mCutPreviewGapStart</definition>
        <argsstring></argsstring>
        <name>mCutPreviewGapStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="648" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1acbaec684c745f9ada543bdcd80ea389d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double AudioIO::mCutPreviewGapLen</definition>
        <argsstring></argsstring>
        <name>mCutPreviewGapLen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="649" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a0efb6d425b3a523e35536b995862efb9" prot="private" static="no" mutable="no">
        <type><ref refid="class_growable_sample_buffer" kindref="compound">GrowableSampleBuffer</ref></type>
        <definition>GrowableSampleBuffer AudioIO::mSilentBuf</definition>
        <argsstring></argsstring>
        <name>mSilentBuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="651" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a5ea088c672f9438827a842fb45aa04f8" prot="private" static="no" mutable="no">
        <type><ref refid="class_audio_i_o_listener" kindref="compound">AudioIOListener</ref> *</type>
        <definition>AudioIOListener* AudioIO::mListener</definition>
        <argsstring></argsstring>
        <name>mListener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="653" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a2242677985647e79554f7ce564dd196d" prot="private" static="no" mutable="no">
        <type><ref refid="class_time_track" kindref="compound">TimeTrack</ref> *</type>
        <definition>TimeTrack* AudioIO::mTimeTrack</definition>
        <argsstring></argsstring>
        <name>mTimeTrack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="663" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a17d0ac79c212052c4fbc0b84c5c61d45" prot="private" static="no" mutable="no">
        <type>wxMutex</type>
        <definition>wxMutex AudioIO::mSuspendAudioThread</definition>
        <argsstring></argsstring>
        <name>mSuspendAudioThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="704" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1abdc2d224efba6159ab64731b50fa5c98" prot="private" static="no" mutable="no">
        <type><ref refid="struct_audio_i_o_1_1_scrub_queue" kindref="compound">ScrubQueue</ref> *</type>
        <definition>ScrubQueue* AudioIO::mScrubQueue</definition>
        <argsstring></argsstring>
        <name>mScrubQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="708" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a2fd4a21ec59c1351766d620ffdad20b9" prot="private" static="no" mutable="no">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::mSilentScrub</definition>
        <argsstring></argsstring>
        <name>mSilentScrub</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="710" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_audio_i_o_1a666c8da6543264befc781d1ca72b78f2" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long AudioIO::mScrubDuration</definition>
        <argsstring></argsstring>
        <name>mScrubDuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="711" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_audio_i_o_1a894b7c943c91bb34f845aeb117786dff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class AudioThread</definition>
        <argsstring></argsstring>
        <name>AudioThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="655" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_audio_i_o_1a5c082d9ef3612f42a4a78edffdf2a0db" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void InitAudioIO</definition>
        <argsstring>()</argsstring>
        <name>InitAudioIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="660" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="795" bodyend="823"/>
      </memberdef>
      <memberdef kind="friend" id="class_audio_i_o_1a362633315924afe19ab0fe0cf4bd32da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void DeinitAudioIO</definition>
        <argsstring>()</argsstring>
        <name>DeinitAudioIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="661" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="friend" id="class_audio_i_o_1a0d694f00df707ad21d421a1b29ad46ea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int audacityAudioCallback</definition>
        <argsstring>(const void *inputBuffer, void *outputBuffer, unsigned long framesPerBuffer, const PaStreamCallbackTimeInfo *timeInfo, PaStreamCallbackFlags statusFlags, void *userData)</argsstring>
        <name>audacityAudioCallback</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>inputBuffer</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>outputBuffer</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>framesPerBuffer</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_pa_stream_callback_time_info" kindref="compound">PaStreamCallbackTimeInfo</ref> *</type>
          <declname>timeInfo</declname>
        </param>
        <param>
          <type><ref refid="portaudio_8h_1a55a005924bcfa0424594f4f65cd4ae82" kindref="member">PaStreamCallbackFlags</ref></type>
          <declname>statusFlags</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>brief The function which is called from PortAudio&apos;s callback thread context to collect and deliver audio for / from the sound device.</para><para>This covers recording, playback, and doing both simultaneously. It is also invoked to do monitoring and software playthrough. Note that dealing with the two buffers needs some care to ensure that the right things happen for all possible cases. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer of length framesPerBuffer containing samples from the sound card, or null if not capturing audio. Note that the data type will depend on the format of audio data that was chosen when the stream was created (so could be floats or various integers) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Uninitialised buffer of length framesPerBuffer which will be sent to the sound card after the callback, or null if not playing audio back. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>framesPerBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the playback and recording buffers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="struct_pa_stream_callback_time_info" kindref="compound">PaStreamCallbackTimeInfo</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PortAudio time information structure, which tells us how long we have been playing / recording </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>PortAudio stream status flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userData</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to user-defined data structure. Provided for flexibility by PortAudio, but not used by Audacity - the data is stored in the <ref refid="class_audio_i_o" kindref="compound">AudioIO</ref> class instead. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="696" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_audio_i_o_1a68c6824c106711b4768dd3847a233366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AudioIO::AudioIO</definition>
        <argsstring>()</argsstring>
        <name>AudioIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="133" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="856" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a747b3a9f103ce40e9b8d5e8dfb1cfce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AudioIO::~AudioIO</definition>
        <argsstring>()</argsstring>
        <name>~AudioIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="134" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="960" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a78477917ca8c9800ce6f5074a7044399" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_audio_i_o_listener" kindref="compound">AudioIOListener</ref> *</type>
        <definition>AudioIOListener* AudioIO::GetListener</definition>
        <argsstring>()</argsstring>
        <name>GetListener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="136" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a8d9df4aba253fa43612ac02bafa994fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetListener</definition>
        <argsstring>(AudioIOListener *listener)</argsstring>
        <name>SetListener</name>
        <param>
          <type><ref refid="class_audio_i_o_listener" kindref="compound">AudioIOListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="137" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="3491" bodyend="3497"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a447c4b556a0f66a61ead1c97ed4ae7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::StartMonitoring</definition>
        <argsstring>(double sampleRate)</argsstring>
        <name>StartMonitoring</name>
        <param>
          <type>double</type>
          <declname>sampleRate</declname>
        </param>
        <briefdescription>
<para>Start up Portaudio for capture and recording as needed for input monitoring and software playthrough only. </para>        </briefdescription>
        <detaileddescription>
<para>This uses the Default project sample format, current sample rate, and selected number of input channels to open the recording device and start reading input data. If software playthrough is enabled, it also opens the output device in stereo to play the data through </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="146" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1459" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1ac2be97e813dfdedb3504b20f8b61cdd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::StartStream</definition>
        <argsstring>(WaveTrackArray playbackTracks, WaveTrackArray captureTracks, double sampleRate, double t0, double t1, const AudioIOStartStreamOptions &amp;options=AudioIOStartStreamOptions())</argsstring>
        <name>StartStream</name>
        <param>
          <type><ref refid="class_wave_track_array" kindref="compound">WaveTrackArray</ref></type>
          <declname>playbackTracks</declname>
        </param>
        <param>
          <type><ref refid="class_wave_track_array" kindref="compound">WaveTrackArray</ref></type>
          <declname>captureTracks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampleRate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_audio_i_o_start_stream_options" kindref="compound">AudioIOStartStreamOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="struct_audio_i_o_start_stream_options" kindref="compound">AudioIOStartStreamOptions</ref>()</defval>
        </param>
        <briefdescription>
<para>Start recording or playing back audio. </para>        </briefdescription>
        <detaileddescription>
<para>Allocates buffers for recording and playback, gets the Audio thread to fill them, and sets the stream rolling. If successful, returns a token identifying this particular stream instance. For use with <ref refid="class_audio_i_o_1a07490d6ae881910c5ea13cdf011835f3" kindref="member">IsStreamActive()</ref> below </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="155" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1490" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a018ef510a8616f1feeb0f542f82b1d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::StopStream</definition>
        <argsstring>()</argsstring>
        <name>StopStream</name>
        <briefdescription>
<para>Stop recording, playback or input monitoring. </para>        </briefdescription>
        <detaileddescription>
<para>Does quite a bit of housekeeping, including switching off monitoring, flushing recording buffers out to wave tracks, and applies latency correction to recorded tracks if necessary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="168" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2111" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a40488ff8506e6238963049844728a6c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SeekStream</definition>
        <argsstring>(double seconds)</argsstring>
        <name>SeekStream</name>
        <param>
          <type>double</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Move the playback / recording position of the current stream by the specified amount from where it is now. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="171" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1ada30edb1aa1b556aebb4ba0b9bbc697e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsScrubbing</definition>
        <argsstring>()</argsstring>
        <name>IsScrubbing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="174" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a89c8c6c8da819d583b92e32508fbae7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::EnqueueScrubByPosition</definition>
        <argsstring>(double endTime, double maxSpeed, bool maySkip)</argsstring>
        <name>EnqueueScrubByPosition</name>
        <param>
          <type>double</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxSpeed</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>maySkip</declname>
        </param>
        <briefdescription>
<para>enqueue a NEW end time, using the last end as the new start, to be played over the same duration, as between this and the last enqueuing (or the starting of the stream). Except, we do not exceed maximum scrub speed, so may need to adjust either the start or the end. If maySkip is true, then when mouse movement exceeds maximum scrub speed, adjust the beginning of the scrub interval rather than the end, so that the scrub skips or &quot;stutters&quot; to stay near the cursor. But if the &quot;stutter&quot; is too short for the minimum, then there is no effect on the work queue. Return true if some work was really enqueued. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="189" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2412" bodyend="2418"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1aa5680009162f44b9156622851767e328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::EnqueueScrubBySignedSpeed</definition>
        <argsstring>(double speed, double maxSpeed, bool maySkip)</argsstring>
        <name>EnqueueScrubBySignedSpeed</name>
        <param>
          <type>double</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxSpeed</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>maySkip</declname>
        </param>
        <briefdescription>
<para>enqueue a NEW positive or negative scrubbing speed, using the last end as the NEW start, to be played over the same duration, as between this and the last enqueueing (or the starting of the stream). Except, we do not exceed maximum scrub speed, so may need to adjust either the start or the end. If maySkip is true, then when mouse movement exceeds maximum scrub speed, adjust the beginning of the scrub interval rather than the end, so that the scrub skips or &quot;stutters&quot; to stay near the cursor. But if the &quot;stutter&quot; is too short for the minimum, then there is no effect on the work queue. Return true if some work was really enqueued. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="203" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2420" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a10f4e839ded338c433a4cd46a6ba41b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsBusy</definition>
        <argsstring>()</argsstring>
        <name>IsBusy</name>
        <briefdescription>
<para>Returns true if audio i/o is busy starting, stopping, playing, or recording. </para>        </briefdescription>
        <detaileddescription>
<para>When this is false, it&apos;s safe to start playing or recording </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="210" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2429" bodyend="2435"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a07490d6ae881910c5ea13cdf011835f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsStreamActive</definition>
        <argsstring>()</argsstring>
        <name>IsStreamActive</name>
        <briefdescription>
<para>Returns true if the audio i/o is running at all, but not during cleanup. </para>        </briefdescription>
        <detaileddescription>
<para>Doesn&apos;t return true if the device has been closed but some disk i/o or cleanup is still going on. If you want to know if it&apos;s safe to start a NEW stream, use <ref refid="class_audio_i_o_1a10f4e839ded338c433a4cd46a6ba41b1" kindref="member">IsBusy()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="218" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2437" bodyend="2448"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1aab4123922c22aac622db1512d01c6c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsStreamActive</definition>
        <argsstring>(int token)</argsstring>
        <name>IsStreamActive</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="219" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2450" bodyend="2453"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a313e20357b22f7adbbdd274ef1e2e84e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>wxLongLong</type>
        <definition>wxLongLong AudioIO::GetLastPlaybackTime</definition>
        <argsstring>() const </argsstring>
        <name>GetLastPlaybackTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="221" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1ae38ba2eafdaf5a1579366d788fd669d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsAudioTokenActive</definition>
        <argsstring>(int token)</argsstring>
        <name>IsAudioTokenActive</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Returns true if the stream is active, or even if audio I/O is busy cleaning up its data or writing to disk. </para>        </briefdescription>
        <detaileddescription>
<para>This is used by <ref refid="class_track_panel" kindref="compound">TrackPanel</ref> to determine when a track has been completely recorded, and it&apos;s safe to flush to disk. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="252" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2455" bodyend="2458"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a81838290ddb586dc13726abf901b8260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsMonitoring</definition>
        <argsstring>()</argsstring>
        <name>IsMonitoring</name>
        <briefdescription>
<para>Returns true if we&apos;re monitoring input (but not recording or playing actual audio) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="256" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2460" bodyend="2463"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a49f8574c7ce8410e3ab254fe95c44388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetPaused</definition>
        <argsstring>(bool state)</argsstring>
        <name>SetPaused</name>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Pause and un-pause playback and recording. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="259" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2389" bodyend="2404"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1aa83356a7bb2153f67f4c82b72ed5185b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsPaused</definition>
        <argsstring>()</argsstring>
        <name>IsPaused</name>
        <briefdescription>
<para>Find out if playback / recording is currently paused. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="261" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2406" bodyend="2409"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1ab90a44dee504b8748bf321416a25067b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetMixer</definition>
        <argsstring>(int inputSource)</argsstring>
        <name>SetMixer</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="269" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="999" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a6e08d80f05a4106be20dfaa96723c957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetMixer</definition>
        <argsstring>(int inputSource, float inputVolume, float playbackVolume)</argsstring>
        <name>SetMixer</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type>float</type>
          <declname>inputVolume</declname>
        </param>
        <param>
          <type>float</type>
          <declname>playbackVolume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="270" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1007" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a2341f380ecf5d7630ed1879a1b66e28c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::GetMixer</definition>
        <argsstring>(int *inputSource, float *inputVolume, float *playbackVolume)</argsstring>
        <name>GetMixer</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> *</type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>inputVolume</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>playbackVolume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="272" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1031" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a104cc037e35b66adb8864a35e8376f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::InputMixerWorks</definition>
        <argsstring>()</argsstring>
        <name>InputMixerWorks</name>
        <briefdescription>
<para>Find out if the input hardware level control is available. </para>        </briefdescription>
        <detaileddescription>
<para>Checks the mInputMixerWorks variable, which is set up in <ref refid="class_audio_i_o_1aef42a8e615a55e2b914a989e8b63af0b" kindref="member">AudioIO::HandleDeviceChange()</ref>. External people care, because we want to disable the UI if it doesn&apos;t work. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="280" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1062" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1abc4c1f9f7609603270df993ee8af1af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::OutputMixerEmulated</definition>
        <argsstring>()</argsstring>
        <name>OutputMixerEmulated</name>
        <briefdescription>
<para>Find out if the output level control is being emulated via software attenuation. </para>        </briefdescription>
        <detaileddescription>
<para>Checks the mEmulateMixerOutputVol variable, which is set up in <ref refid="class_audio_i_o_1aef42a8e615a55e2b914a989e8b63af0b" kindref="member">AudioIO::HandleDeviceChange()</ref>. External classes care, because we want to modify the UI if it doesn&apos;t work. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="288" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1067" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a871ad77e029d77ff4ae461b2be5325cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxArrayString</type>
        <definition>wxArrayString AudioIO::GetInputSourceNames</definition>
        <argsstring>()</argsstring>
        <name>GetInputSourceNames</name>
        <briefdescription>
<para>Get the list of inputs to the current mixer device. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an array of strings giving the names of the inputs to the soundcard mixer (driven by PortMixer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="294" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1072" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1aef42a8e615a55e2b914a989e8b63af0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::HandleDeviceChange</definition>
        <argsstring>()</argsstring>
        <name>HandleDeviceChange</name>
        <briefdescription>
<para>update state after changing what audio devices are selected </para>        </briefdescription>
        <detaileddescription>
<para>Called when the devices stored in the preferences are changed to update the audio mixer capabilities</para><para><xrefsect id="todo_1_todo000045"><xreftitle>Todo</xreftitle><xrefdescription><para>: Make this do a sample rate query and store the result in the <ref refid="class_audio_i_o" kindref="compound">AudioIO</ref> object to avoid doing it later? Would simplify the GetSupported*Rate functions considerably </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="304" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1100" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1adaf7977e341e8012b03dca8c733f24e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AudioIO::GetStreamTime</definition>
        <argsstring>()</argsstring>
        <name>GetStreamTime</name>
        <briefdescription>
<para>During playback, the (unwarped) track time most recently played. </para>        </briefdescription>
        <detaileddescription>
<para>When playing looped, this will start from t0 again, too. So the returned time should be always between t0 and t1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="370" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2506" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a5735d00a230e2a59a9702dfbf1a8b85d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
        <definition>sampleFormat AudioIO::GetCaptureFormat</definition>
        <argsstring>()</argsstring>
        <name>GetCaptureFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="372" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a841f37644672ecb5ea445bfb52907c1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::GetNumCaptureChannels</definition>
        <argsstring>()</argsstring>
        <name>GetNumCaptureChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="373" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="373" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a134b6a56921f9c6bd197d80de4ddce48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxString</type>
        <definition>wxString AudioIO::GetDeviceInfo</definition>
        <argsstring>()</argsstring>
        <name>GetDeviceInfo</name>
        <briefdescription>
<para>Get diagnostic information on all the available audio I/O devices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="386" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="3027" bodyend="3262"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a7735a1b6d723e8342d22f9ddcf61d8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::IsAvailable</definition>
        <argsstring>(AudacityProject *projecT)</argsstring>
        <name>IsAvailable</name>
        <param>
          <type><ref refid="class_audacity_project" kindref="compound">AudacityProject</ref> *</type>
          <declname>projecT</declname>
        </param>
        <briefdescription>
<para><ref refid="class_function" kindref="compound">Function</ref> to automatically set an acceptable volume. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="405" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2067" bodyend="2070"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a0ef8578b176133229c30a656fe41478e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetCaptureMeter</definition>
        <argsstring>(AudacityProject *project, Meter *meter)</argsstring>
        <name>SetCaptureMeter</name>
        <param>
          <type><ref refid="class_audacity_project" kindref="compound">AudacityProject</ref> *</type>
          <declname>project</declname>
        </param>
        <param>
          <type><ref refid="class_meter" kindref="compound">Meter</ref> *</type>
          <declname>meter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="406" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2072" bodyend="2082"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a615aec62315405636bfe8b6e2a326cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetPlaybackMeter</definition>
        <argsstring>(AudacityProject *project, Meter *meter)</argsstring>
        <name>SetPlaybackMeter</name>
        <param>
          <type><ref refid="class_audacity_project" kindref="compound">AudacityProject</ref> *</type>
          <declname>project</declname>
        </param>
        <param>
          <type><ref refid="class_meter" kindref="compound">Meter</ref> *</type>
          <declname>meter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="407" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2084" bodyend="2094"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_audio_i_o_1a377107ccda3176965ac68d757ba517a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double AudioIO::GetMaxScrubSpeed</definition>
        <argsstring>()</argsstring>
        <name>GetMaxScrubSpeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="176" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a40f26467a7d142f0edea9b3ac893dddd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double AudioIO::GetMinScrubSpeed</definition>
        <argsstring>()</argsstring>
        <name>GetMinScrubSpeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="177" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a8d5c6376948069792d356c4d465f65af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxArrayLong</type>
        <definition>wxArrayLong AudioIO::GetSupportedPlaybackRates</definition>
        <argsstring>(int DevIndex=-1, double rate=0.0)</argsstring>
        <name>GetSupportedPlaybackRates</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>DevIndex</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Get a list of sample rates the output (playback) device supports. </para>        </briefdescription>
        <detaileddescription>
<para>If no information about available sample rates can be fetched, an empty list is returned.</para><para>You can explicitely give the index of the device. If you don&apos;t give it, the currently selected device from the preferences will be used.</para><para>You may also specify a rate for which to check in addition to the standard rates. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="318" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2515" bodyend="2574"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a5a038799b288476cf6896129739c0ce5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxArrayLong</type>
        <definition>wxArrayLong AudioIO::GetSupportedCaptureRates</definition>
        <argsstring>(int devIndex=-1, double rate=0.0)</argsstring>
        <name>GetSupportedCaptureRates</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>devIndex</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Get a list of sample rates the input (recording) device supports. </para>        </briefdescription>
        <detaileddescription>
<para>If no information about available sample rates can be fetched, an empty list is returned.</para><para>You can explicitely give the index of the device. If you don&apos;t give it, the currently selected device from the preferences will be used.</para><para>You may also specify a rate for which to check in addition to the standard rates. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="333" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2576" bodyend="2640"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1acb6e16f4da1d263491071ce5b26a9abd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxArrayLong</type>
        <definition>wxArrayLong AudioIO::GetSupportedSampleRates</definition>
        <argsstring>(int playDevice=-1, int recDevice=-1, double rate=0.0)</argsstring>
        <name>GetSupportedSampleRates</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>playDevice</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>recDevice</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Get a list of sample rates the current input/output device combination supports. </para>        </briefdescription>
        <detaileddescription>
<para>Since there is no concept (yet) for different input/output sample rates, this currently returns only sample rates that are supported on both the output and input device. If no information about available sample rates can be fetched, it returns a default list. You can explicitely give the indexes of the playDevice/recDevice. If you don&apos;t give them, the selected devices from the preferences will be used. You may also specify a rate for which to check in addition to the standard rates. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="350" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2642" bodyend="2680"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a71facd3c7274394b70eaff652e1bc97e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::GetOptimalSupportedSampleRate</definition>
        <argsstring>()</argsstring>
        <name>GetOptimalSupportedSampleRate</name>
        <briefdescription>
<para>Get a supported sample rate which can be used a an optimal default. </para>        </briefdescription>
        <detaileddescription>
<para>Currently, this uses the first supported rate in the list [44100, 48000, highest sample rate]. Used in Project as a default value for project rates if one cannot be retrieved from the preferences. So all in all not that useful or important really</para><para><xrefsect id="todo_1_todo000044"><xreftitle>Todo</xreftitle><xrefdescription><para>: should this take into account PortAudio&apos;s value for <ref refid="struct_pa_device_info_1a68f435353bfe1a4c9b632203a9afcacb" kindref="member">PaDeviceInfo::defaultSampleRate</ref>? In principal this should let us work out which rates are &quot;real&quot; and which resampled in the drivers, and so prefer the real rates. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="362" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2686" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1acfaf9b48ca72d2d34ebfb8873e0ae7dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::ValidateDeviceNames</definition>
        <argsstring>(const wxString &amp;play, const wxString &amp;rec)</argsstring>
        <name>ValidateDeviceNames</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxString &amp;</type>
          <declname>play</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxString &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
<para>Ensure selected device names are valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="391" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="844" bodyend="854"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_audio_i_o_1a7892db04cc479361dadaef8f7a9ad575" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::SetMeters</definition>
        <argsstring>()</argsstring>
        <name>SetMeters</name>
        <briefdescription>
<para>Set the current VU meters - this should be done once after each call to StartStream currently. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="412" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2096" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a6489917b96acd5c4868b42724f1245a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AudioIO::GetBestRate</definition>
        <argsstring>(bool capturing, bool playing, double sampleRate)</argsstring>
        <name>GetBestRate</name>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>capturing</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>playing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampleRate</declname>
        </param>
        <briefdescription>
<para>Return a valid sample rate that is supported by the current I/O device(s). </para>        </briefdescription>
        <detaileddescription>
<para>The return from this function is used to determine the sample rate that audacity actually runs the audio I/O stream at. if there is no suitable rate available from the hardware, it returns 0. The sampleRate argument gives the desired sample rate (the rate of the audio to be handeled, i.e. the currently Project Rate). capturing is true if the stream is capturing one or more audio channels, and playing is true if one or more channels are being played. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="424" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2706" bodyend="2779"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a65037b9e93a038d12a766558b5df0f19" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::StartPortAudioStream</definition>
        <argsstring>(double sampleRate, unsigned int numPlaybackChannels, unsigned int numCaptureChannels, sampleFormat captureFormat)</argsstring>
        <name>StartPortAudioStream</name>
        <param>
          <type>double</type>
          <declname>sampleRate</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>numPlaybackChannels</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>numCaptureChannels</declname>
        </param>
        <param>
          <type><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref></type>
          <declname>captureFormat</declname>
        </param>
        <briefdescription>
<para>Opens the portaudio stream(s) used to do playback or recording (or both) through. </para>        </briefdescription>
        <detaileddescription>
<para>The sampleRate passed is the Project Rate of the active project. It may or may not be actually supported by playback or recording hardware currently in use (for many reasons). The number of Capture and Playback channels requested includes an allocation for doing software playthrough if necessary. The captureFormat is used for recording only, the playback being floating point always. Returns true if the stream opened sucessfully and false if it did not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="436" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1313" bodyend="1457"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1acf033159cb82dbe6e4f69e298e157d8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::FillBuffers</definition>
        <argsstring>()</argsstring>
        <name>FillBuffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="440" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="3267" bodyend="3489"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a399032af1122a89dee20a48b743e656e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::GetCommonlyAvailPlayback</definition>
        <argsstring>()</argsstring>
        <name>GetCommonlyAvailPlayback</name>
        <briefdescription>
<para>Get the number of audio samples free in all of the playback buffers. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the smallest of the buffer free space values in the event that they are different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="461" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2871" bodyend="2885"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a6d38408f6ebbb2fe5beaef55398c2ca3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::GetCommonlyAvailCapture</definition>
        <argsstring>()</argsstring>
        <name>GetCommonlyAvailCapture</name>
        <briefdescription>
<para>Get the number of audio samples ready in all of the recording buffers. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the smallest of the number of samples available for storage in the recording buffers (i.e. the number of samples that can be read from all record buffers without underflow). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="469" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2887" bodyend="2900"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a3d9eabb6feafc32be1abd235b043208c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool AudioIO::ReversedTime</definition>
        <argsstring>() const </argsstring>
        <name>ReversedTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="504" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a668d02b1a369fc0258741cf29285cb8f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AudioIO::LimitStreamTime</definition>
        <argsstring>(double absoluteTime) const </argsstring>
        <name>LimitStreamTime</name>
        <param>
          <type>double</type>
          <declname>absoluteTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="508" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2465" bodyend="2472"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a20c0b00cffe0323e3cd37a13894e6359" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AudioIO::NormalizeStreamTime</definition>
        <argsstring>(double absoluteTime) const </argsstring>
        <name>NormalizeStreamTime</name>
        <param>
          <type>double</type>
          <declname>absoluteTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="510" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2474" bodyend="2504"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1a849678c41c5b5992a3befb6e915625ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void AudioIO::StartStreamCleanup</definition>
        <argsstring>(bool bOnlyBuffers=false)</argsstring>
        <name>StartStreamCleanup</name>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>bOnlyBuffers</declname>
          <defval><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></defval>
        </param>
        <briefdescription>
<para>Clean up after StartStream if it fails. </para>        </briefdescription>
        <detaileddescription>
<para>If bOnlyBuffers is specified, it only cleans up the buffers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="515" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="1912" bodyend="1966"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_audio_i_o_1a16282080752daf8a51f9886ddda0b772" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::getRecordDevIndex</definition>
        <argsstring>(const wxString &amp;devName=wxEmptyString)</argsstring>
        <name>getRecordDevIndex</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxString &amp;</type>
          <declname>devName</declname>
          <defval>wxEmptyString</defval>
        </param>
        <briefdescription>
<para>get the index of the supplied (named) recording device, or the device selected in the preferences if none given. </para>        </briefdescription>
        <detaileddescription>
<para>Pure utility function, but it comes round a number of times in the code and would be neater done once. If the device isn&apos;t found, return the default device index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="478" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2970" bodyend="3025"/>
      </memberdef>
      <memberdef kind="function" id="class_audio_i_o_1af1f036de5d4d7c3596b2ae259cc742f9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int AudioIO::getPlayDevIndex</definition>
        <argsstring>(const wxString &amp;devName=wxEmptyString)</argsstring>
        <name>getPlayDevIndex</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> wxString &amp;</type>
          <declname>devName</declname>
          <defval>wxEmptyString</defval>
        </param>
        <briefdescription>
<para>get the index of the device selected in the preferences. </para>        </briefdescription>
        <detaileddescription>
<para>If the device isn&apos;t found, returns -1get the index of the supplied (named) playback device, or the device selected in the preferences if none given.</para><para>Pure utility function, but it comes round a number of times in the code and would be neater done once. If the device isn&apos;t found, return the default device index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="494" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.cpp" bodystart="2916" bodyend="2968"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_audio_i_o" kindref="compound">AudioIO</ref> uses the PortAudio library to play and record sound. </para>    </briefdescription>
    <detaileddescription>
<para>Great care and attention to detail are necessary for understanding and modifying this system. The code in this file is run from three different thread contexts: the UI thread, the disk thread (which this file creates and maintains; in the code, this is called the Audio Thread), and the PortAudio callback thread. To highlight this deliniation, the file is divided into three parts based on what thread context each function is intended to run in.</para><para><simplesect kind="par"><title>EXPERIMENTAL_MIDI_PLAYBACK</title><para>If EXPERIMENTAL_MIDI_PLAYBACK is defined, this class also manages MIDI playback. The reason for putting MIDI here rather than in, say, class MidiIO, is that there is no high-level synchronization and transport architecture, so Audio and MIDI must be coupled in order to start/stop/pause and synchronize them.</para></simplesect>
<simplesect kind="par"><title>MIDI With Audio</title><para>When Audio and MIDI play simultaneously, MIDI synchronizes to Audio. This is necessary because the Audio sample clock is not the same hardware as the system time used to schedule MIDI messages. MIDI is synchronized to Audio because it is simple to pause or rush the dispatch of MIDI messages, but generally impossible to pause or rush synchronous audio samples (without distortion).</para></simplesect>
<simplesect kind="par"><title></title><para>MIDI output is driven by yet another thread. In principle, we could output timestamped MIDI data at the same time we fill audio buffers from disk, but audio buffers are filled far in advance of playback time, and there is a lower latency thread (PortAudio&apos;s callback) that actually sends samples to the output device. The relatively low latency to the output device allows Audacity to stop audio output quickly. We want the same behavior for MIDI, but there is not periodic callback from PortMidi (because MIDI is asynchronous), so this function is performed by the MidiThread class.</para></simplesect>
<simplesect kind="par"><title></title><para>When Audio is running, MIDI is synchronized to Audio. Globals are set in the Audio callback (audacityAudioCallback) for use by a time function that reports milliseconds to PortMidi. (Details below.)</para></simplesect>
<simplesect kind="par"><title>MIDI Without Audio</title><para>When Audio is not running, PortMidi uses its own millisecond timer since there is no audio to synchronize to. (Details below.)</para></simplesect>
<simplesect kind="par"><title>Implementation Notes and Details for MIDI</title><para>When opening devices, successAudio and successMidi indicate errors if false, so normally both are true. Use playbackChannels, captureChannels and mMidiPlaybackTracks.IsEmpty() to determine if Audio or MIDI is actually in use.</para></simplesect>
<simplesect kind="par"><title>Audio Time</title><para>Normally, the current time during playback is given by the variable mTime. mTime normally advances by frames / samplerate each time an audio buffer is output by the audio callback. However, Audacity has a speed control that can perform continuously variable time stretching on audio. This is achieved in two places: the playback &quot;mixer&quot; that generates the samples for output processes the audio according to the speed control. In a separate algorithm, the audio callback updates mTime by (frames / samplerate) * factor, where factor reflects the speed at mTime. This effectively integrates speed to get position. Negative speeds are allowed too, for instance in scrubbing.</para></simplesect>
<simplesect kind="par"><title>Midi Time</title><para>MIDI is not warped according to the speed control. This might be something that should be changed. (Editorial note: Wouldn&apos;t it make more sense to display audio at the correct time and allow users to stretch audio the way they can stretch MIDI?) For now, MIDI plays at 1 second per second, so it requires an unwarped clock. In fact, MIDI time synchronization requires a millisecond clock that does not pause. Note that mTime will stop progress when the Pause button is pressed, even though audio samples (zeros) continue to be output.</para></simplesect>
<simplesect kind="par"><title></title><para>Therefore, we define the following interface for MIDI timing: <itemizedlist>
<listitem><para><computeroutput>AudioTime()</computeroutput> is the time based on all samples written so far, including zeros output during pauses. AudioTime() is based on the start location mT0, not zero. </para></listitem>
<listitem><para><computeroutput>PauseTime()</computeroutput> is the amount of time spent paused, based on a count of zero samples output. </para></listitem>
<listitem><para><computeroutput>MidiTime()</computeroutput> is an estimate in milliseconds of the current audio output time + 1s. In other words, what audacity track time corresponds to the audio (including pause insertions) at the output?</para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>AudioTime() and PauseTime() computation</title><para>AudioTime() is simply mT0 + mNumFrames / mRate. mNumFrames is incremented in each audio callback. Similarly, PauseTime() is mNumPauseFrames / mRate. mNumPauseFrames is also incremented in each audio callback when a pause is in effect.</para></simplesect>
<simplesect kind="par"><title>MidiTime() computation</title><para>MidiTime() is computed based on information from PortAudio&apos;s callback, which estimates the system time at which the current audio buffer will be output. Consider the (unimplemented) function RealToTrack() that maps real time to track time. If outputTime is PortAudio&apos;s time estimate for the most recent output buffer, then <linebreak/>
 RealToTrack(outputTime) = AudioTime() - PauseTime() - bufferDuration <linebreak/>
 We want to know RealToTrack of the current time, so we use this approximation for small d: <linebreak/>
 RealToTrack(t + d) = RealToTrack(t) + d <linebreak/>
 Letting t = outputTime and d = (systemTime - outputTime), we can substitute to get:<linebreak/>
 RealToTrack(systemTime) = AudioTime() - PauseTime() - bufferduration + (systemTime - outputTime) <linebreak/>
 MidiTime() should include pause time, so add PauseTime() to both sides of the equation. Also MidiTime() is offset by 1 second to avoid negative time at startup, so add 1 to both sides: MidiTime() in seconds = RealToTrack(systemTime) + PauseTime() + 1 = <linebreak/>
 AudioTime() - bufferduration + (systemTime - outputTime) + 1</para></simplesect>
<simplesect kind="par"><title></title><para>The difference AudioTime() - PauseTime() is the time &quot;cursor&quot; for MIDI. When the speed control is used, MIDI and Audio will become unsynchronized. In particular, MIDI will not be synchronized with the visual cursor, which moves with scaled time reported in mTime.</para></simplesect>
<simplesect kind="par"><title>Midi Synchronization</title><para>The goal of MIDI playback is to deliver MIDI messages synchronized to audio (assuming no speed variation for now). If a midi event has time tmidi, then the timestamp for that message should be <linebreak/>
 timestamp (in seconds) = tmidi + PauseTime() + 1.0 - latency.<linebreak/>
 (This is actually off by 1ms; see &quot;PortMidi Latency Parameter&quot; below for more detail.) Notice the extra 1.0, added because MidiTime() is offset by 1s to avoid starting at a negative value. Also notice that we subtract latency. The user must set device latency using preferences. Some software synthesizers have very high latency (on the order of 100ms), so unless we lower timestamps and send messages early, the final output will not be synchronized. This timestamp is interpreted by PortMidi relative to MidiTime(), which is synchronized to audio output. So the only thing we need to do is output Midi messages shortly before they will be played with the correct timestamp. We will take &quot;shortly before&quot; to mean &quot;at about the same time
  as corresponding audio&quot;. Based on this, output the event when AudioTime() - PauseTime() &gt; mtime - latency, adjusting the event time by adding PauseTime() + 1 - latency. This gives at least mAudioOutputLatency for the MIDI output to be generated (we want to generate MIDI output before the actual output time because events generated early are accurately timed according to their timestamp). However, the MIDI thread sleeps for MIDI_SLEEP in its polling loop, so the worst case is really mAudioOutputLatency + MIDI_SLEEP. In case the audio output latency is very low, we will output events when AudioTime() + MIDI_SLEEP - PauseTime() &gt; mtime - latency.</para></simplesect>
<simplesect kind="par"><title>Interaction between MIDI, Audio, and Pause</title><para>When Pause is used, PauseTime() will increase at the same rate as AudioTime(), and no more events will be output. Because of the time advance of mAudioOutputLatency + MIDI_SLEEP + latency and the fact that AudioTime() advances stepwise by mAudioBufferDuration, some extra MIDI might be output, but the same is true of audio: something like mAudioOutputLatency audio samples will be in the output buffer (with up to mAudioBufferDuration additional samples, depending on when the Pause takes effect). When playback is resumed, there will be a slight delay corresponding to the extra data previously sent. Again, the same is true of audio. Audio and MIDI will not pause and resume at exactly the same times, but their pause and resume times will be within the low tens of milliseconds, and the streams will be synchronized in any case. I.e. if audio pauses 10ms earlier than MIDI, it will resume 10ms earlier as well.</para></simplesect>
<simplesect kind="par"><title>PortMidi Latency Parameter</title><para>PortMidi has a &quot;latency&quot; parameter that is added to all timestamps. This value must be greater than zero to enable timestamp-based timing, but serves no other function, so we will set it to 1. All timestamps must then be adjusted down by 1 before messages are sent. This adjustment is on top of all the calculations described above. It just seem too complicated to describe everything in complete detail in one place.</para></simplesect>
<simplesect kind="par"><title>Midi While Recording Only</title><para>All of the midi-to-audio synchronization is of course meaningless when audio is not playing. If only recording, there is the problem that synchronization is based on output time, but without audio output, there is no output time. This does not seem like a critical feature, so MIDI is not synchronized to audio without audio playback. The user can always play a track of silence while recording to synchronize.</para></simplesect>
<simplesect kind="par"><title>Midi Without Audio Playback</title><para>When there is no audio playback, MIDI runs according to its own clock. The midi timestamp clock starts at approximately the same time as audio recording (if any). A timestamp of 0 corresponds to mT0, the starting time in the Midi track(s). Thus the timestamp for an event at time tmidi should be: <linebreak/>
 timestamp = tmidi - mT0 + PauseTime() - latency - 0.001<linebreak/>
 Where latency is the synthesizer latency, and the extra 0.001 is the latency (1ms) that PortMidi adds to timestamps automatically.</para></simplesect>
<simplesect kind="par"><title>Midi Output Without Audio Playback</title><para>Midi events should be written before their timestamp expires. Since the loop that checks for events to write pauses for MIDI_SLEEP, the events should be written at least MIDI_SLEEP early, and due to other delays and computation, we want some extra time, so let&apos;s allow 2*MIDI_SLEEP. Therefore, the write time should be when:<linebreak/>
 tmidi - mT0 + PauseTime() - latency - 0.001 - 2 * MIDI_SLEEP &lt; <ref refid="porttime_8h_1a9a335bb8c04c85bf85d807dd448d72d0" kindref="member">Pt_Time()</ref><linebreak/>
, which can be rearranged to:<linebreak/>
 tmidi &lt; mT0 + <ref refid="porttime_8h_1a9a335bb8c04c85bf85d807dd448d72d0" kindref="member">Pt_Time()</ref> + MIDI_SLEEP + (MIDI_SLEEP + latency) - PauseTime<linebreak/>
 which matches the code in AudioIO::FillMidiBuffers() after converting ms to s appropriately. (Note also that the 0.001 is dropped here <ndash/> it&apos;s not really important).</para></simplesect>
<simplesect kind="par"><title>The code for Midi Without Audio was developed by simply trying</title><para>to play Midi alone and fixing everything that did not work. The &quot;normal&quot; <ref refid="class_audio_i_o" kindref="compound">AudioIO</ref> execution was full of assumptions about audio, so there is no systematic design for running without audio, merely a number of &quot;patches&quot; to make it work. The expression &quot;mNumPlaybackChannels &gt; 0&quot; is used to detect whether audio playback is active, and &quot;mNumFrames &gt; 0&quot; is used to indicate that playback of either Midi or Audio has actually started. (mNumFrames is normally incremented by the audio callback, but if there is no audio playback or recording, it is set to 1 at the end of initialization.</para></simplesect>
<simplesect kind="par"><title>NoteTrack PlayLooped</title><para>When mPlayLooped is true, output is supposed to loop from mT0 to mT1. For NoteTracks, we interpret this to mean that any note-on or control change in the range mT0 &lt;= t &lt; mT1 is sent (notes that start before mT0 are not played even if they extend beyond mT0). Then, all notes are turned off. Events in the range mT0 &lt;= t &lt; mT1 are then repeated, offset by (mT1 - mT0), etc. We do NOT go back to the beginning and play all control changes (update events) up to mT0, nor do we &quot;undo&quot; any state changes between mT0 and mT1.</para></simplesect>
<simplesect kind="par"><title>NoteTrack PlayLooped Implementation</title><para>The mIterator object (an <ref refid="class_alg__iterator" kindref="compound">Alg_iterator</ref>) returns NULL when there are no more events scheduled before mT1. At mT1, we want to output all notes off messages, but the FillMidiBuffers() loop will exit if mNextEvent is NULL, so we create a &quot;fake&quot; mNextEvent for this special &quot;event&quot; of sending all notes off. After that, we destroy the iterator and use PrepareMidiIterator() to set up a NEW one. At each iteration, time must advance by (mT1 - mT0), so the accumulated time is held in mMidiLoopOffset.</para></simplesect>
<xrefsect id="todo_1_todo000043"><xreftitle>Todo</xreftitle><xrefdescription><para>run through all functions called from audio and portaudio threads to verify they are thread-safe. Note that synchronization of the style: &quot;A sets flag to signal B, B clears flag to acknowledge completion&quot; is not thread safe in a general multiple-CPU context. For example, B can write to a buffer and set a completion flag. The flag write can occur before the buffer write due to out-of-order execution. Then A can see the flag and read the buffer before buffer writes complete.</para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" line="130" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/AudioIO.h" bodystart="130" bodyend="713"/>
    <listofallmembers>
      <member refid="class_audio_i_o_1a0d694f00df707ad21d421a1b29ad46ea" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>audacityAudioCallback</name></member>
      <member refid="class_audio_i_o_1a68c6824c106711b4768dd3847a233366" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>AudioIO</name></member>
      <member refid="class_audio_i_o_1a894b7c943c91bb34f845aeb117786dff" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>AudioThread</name></member>
      <member refid="class_audio_i_o_1a362633315924afe19ab0fe0cf4bd32da" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>DeinitAudioIO</name></member>
      <member refid="class_audio_i_o_1a89c8c6c8da819d583b92e32508fbae7b" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>EnqueueScrubByPosition</name></member>
      <member refid="class_audio_i_o_1aa5680009162f44b9156622851767e328" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>EnqueueScrubBySignedSpeed</name></member>
      <member refid="class_audio_i_o_1acf033159cb82dbe6e4f69e298e157d8e" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>FillBuffers</name></member>
      <member refid="class_audio_i_o_1a6489917b96acd5c4868b42724f1245a3" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>GetBestRate</name></member>
      <member refid="class_audio_i_o_1a5735d00a230e2a59a9702dfbf1a8b85d" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetCaptureFormat</name></member>
      <member refid="class_audio_i_o_1a6d38408f6ebbb2fe5beaef55398c2ca3" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>GetCommonlyAvailCapture</name></member>
      <member refid="class_audio_i_o_1a399032af1122a89dee20a48b743e656e" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>GetCommonlyAvailPlayback</name></member>
      <member refid="class_audio_i_o_1a134b6a56921f9c6bd197d80de4ddce48" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetDeviceInfo</name></member>
      <member refid="class_audio_i_o_1a871ad77e029d77ff4ae461b2be5325cd" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetInputSourceNames</name></member>
      <member refid="class_audio_i_o_1a313e20357b22f7adbbdd274ef1e2e84e" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetLastPlaybackTime</name></member>
      <member refid="class_audio_i_o_1a78477917ca8c9800ce6f5074a7044399" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetListener</name></member>
      <member refid="class_audio_i_o_1a377107ccda3176965ac68d757ba517a7" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetMaxScrubSpeed</name></member>
      <member refid="class_audio_i_o_1a40f26467a7d142f0edea9b3ac893dddd" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetMinScrubSpeed</name></member>
      <member refid="class_audio_i_o_1a2341f380ecf5d7630ed1879a1b66e28c" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetMixer</name></member>
      <member refid="class_audio_i_o_1a841f37644672ecb5ea445bfb52907c1f" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetNumCaptureChannels</name></member>
      <member refid="class_audio_i_o_1a71facd3c7274394b70eaff652e1bc97e" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetOptimalSupportedSampleRate</name></member>
      <member refid="class_audio_i_o_1af1f036de5d4d7c3596b2ae259cc742f9" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>getPlayDevIndex</name></member>
      <member refid="class_audio_i_o_1a16282080752daf8a51f9886ddda0b772" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>getRecordDevIndex</name></member>
      <member refid="class_audio_i_o_1adaf7977e341e8012b03dca8c733f24e1" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetStreamTime</name></member>
      <member refid="class_audio_i_o_1a5a038799b288476cf6896129739c0ce5" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetSupportedCaptureRates</name></member>
      <member refid="class_audio_i_o_1a8d5c6376948069792d356c4d465f65af" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetSupportedPlaybackRates</name></member>
      <member refid="class_audio_i_o_1acb6e16f4da1d263491071ce5b26a9abd" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>GetSupportedSampleRates</name></member>
      <member refid="class_audio_i_o_1aef42a8e615a55e2b914a989e8b63af0b" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>HandleDeviceChange</name></member>
      <member refid="class_audio_i_o_1a5c082d9ef3612f42a4a78edffdf2a0db" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>InitAudioIO</name></member>
      <member refid="class_audio_i_o_1a104cc037e35b66adb8864a35e8376f8e" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>InputMixerWorks</name></member>
      <member refid="class_audio_i_o_1ae38ba2eafdaf5a1579366d788fd669d9" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsAudioTokenActive</name></member>
      <member refid="class_audio_i_o_1a7735a1b6d723e8342d22f9ddcf61d8e6" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsAvailable</name></member>
      <member refid="class_audio_i_o_1a10f4e839ded338c433a4cd46a6ba41b1" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsBusy</name></member>
      <member refid="class_audio_i_o_1a81838290ddb586dc13726abf901b8260" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsMonitoring</name></member>
      <member refid="class_audio_i_o_1aa83356a7bb2153f67f4c82b72ed5185b" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsPaused</name></member>
      <member refid="class_audio_i_o_1ada30edb1aa1b556aebb4ba0b9bbc697e" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsScrubbing</name></member>
      <member refid="class_audio_i_o_1a07490d6ae881910c5ea13cdf011835f3" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsStreamActive</name></member>
      <member refid="class_audio_i_o_1aab4123922c22aac622db1512d01c6c18" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>IsStreamActive</name></member>
      <member refid="class_audio_i_o_1a668d02b1a369fc0258741cf29285cb8f" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>LimitStreamTime</name></member>
      <member refid="class_audio_i_o_1a5b5caa76e3cd101bc3631bcbcd498f22" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mAudioThreadFillBuffersLoopActive</name></member>
      <member refid="class_audio_i_o_1a38da766dd2ae4aee4ec2121d3a97003d" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mAudioThreadFillBuffersLoopRunning</name></member>
      <member refid="class_audio_i_o_1ac46dc8c642a3d340a0685e3cf69a8885" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mAudioThreadShouldCallFillBuffersOnce</name></member>
      <member refid="class_audio_i_o_1aa93703171e76dddb0908af3a428ddc90" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedBestRateIn</name></member>
      <member refid="class_audio_i_o_1a9c35f06f25392535e3214c1a11d0c5a0" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedBestRateOut</name></member>
      <member refid="class_audio_i_o_1ae00831ed842c9eb0c5cb423c23d920be" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedCaptureIndex</name></member>
      <member refid="class_audio_i_o_1a8b1ec1271604968c425545fafc4501e9" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedCaptureRates</name></member>
      <member refid="class_audio_i_o_1ad99844c4c1facce701712ae6750b015f" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedPlaybackIndex</name></member>
      <member refid="class_audio_i_o_1aa66d101f7f1517437f94f25d19917f86" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedPlaybackRates</name></member>
      <member refid="class_audio_i_o_1a8ef848736a948b39ecb0c6dca08cc568" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCachedSampleRates</name></member>
      <member refid="class_audio_i_o_1a9943bccca4dc39c7f8aeba2157920a96" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCaptureBuffers</name></member>
      <member refid="class_audio_i_o_1a3ced3771559e0231c0dc521d4770922d" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCaptureFormat</name></member>
      <member refid="class_audio_i_o_1abe53e98a215869221222ad75d2d3ba4a" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCaptureRingBufferSecs</name></member>
      <member refid="class_audio_i_o_1acf5a63965ec6aa6edba5b605de65d691" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCaptureTracks</name></member>
      <member refid="class_audio_i_o_1acbaec684c745f9ada543bdcd80ea389d" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCutPreviewGapLen</name></member>
      <member refid="class_audio_i_o_1a592b2c6f26e92558bb3143a086cc267e" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mCutPreviewGapStart</name></member>
      <member refid="class_audio_i_o_1a48dbb8470710384234e15d0839cebcfa" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mEmulateMixerOutputVol</name></member>
      <member refid="class_audio_i_o_1afb2cd8cfdaff11b52c3e6b91f5bfb395" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mFactor</name></member>
      <member refid="class_audio_i_o_1a460f5fb4800a06db7aba2f9682b2fb9f" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mInputMeter</name></member>
      <member refid="class_audio_i_o_1af535797f7ac020e1811cc38bfba66e17" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mInputMixerWorks</name></member>
      <member refid="class_audio_i_o_1aa029876175fac5537354387b6f8f0081" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mLastPaError</name></member>
      <member refid="class_audio_i_o_1a79c7dd0cf7d0ac8e94eec246ba3b014d" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mLastPlaybackTimeMillis</name></member>
      <member refid="class_audio_i_o_1a880f41d8318c700e3d6bbad4aafa64b4" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mLastRecordingOffset</name></member>
      <member refid="class_audio_i_o_1a5ea088c672f9438827a842fb45aa04f8" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mListener</name></member>
      <member refid="class_audio_i_o_1a17c3501d96e68b6f79f354bc0b0205a9" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mLostSamples</name></member>
      <member refid="class_audio_i_o_1ac0e4f8186f0c7fd2d2be77995f3d4a94" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mMinCaptureSecsToCopy</name></member>
      <member refid="class_audio_i_o_1a9027df822d0f1ebd27de7b36dbbc6e1e" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mMixerOutputVol</name></member>
      <member refid="class_audio_i_o_1a9ccf03b89e0cd5e6218550b4213a2401" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mNextStreamToken</name></member>
      <member refid="class_audio_i_o_1ad8431949843083dcc6f069eebdcc2278" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mNumCaptureChannels</name></member>
      <member refid="class_audio_i_o_1a36c6f90a506763594c598f4e7af52723" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mNumPlaybackChannels</name></member>
      <member refid="class_audio_i_o_1ab00f0faccf7e59dce5432e36c05f243a" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mOutputMeter</name></member>
      <member refid="class_audio_i_o_1ac012af4448662da914b6cb2edd7c7045" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mOwningProject</name></member>
      <member refid="class_audio_i_o_1a138fbc3be7e9440a23c38497347e26c5" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPaused</name></member>
      <member refid="class_audio_i_o_1a06462325e7e5409cb42f2c2675838aee" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPauseRec</name></member>
      <member refid="class_audio_i_o_1a2fc9ce02752e7f102c7952005ac0dfbe" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPlaybackBuffers</name></member>
      <member refid="class_audio_i_o_1a4cf441a40e28412dd800304fa748a39b" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPlaybackMixers</name></member>
      <member refid="class_audio_i_o_1a6381cb51853d6c61f1c438d66abce61a" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPlaybackRingBufferSecs</name></member>
      <member refid="class_audio_i_o_1ae2fb7edd87f34d4ced1f24f8e5b2c598" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPlaybackSamplesToCopy</name></member>
      <member refid="class_audio_i_o_1a43e96ebed3b1364269ec7c941962e201" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPlaybackTracks</name></member>
      <member refid="class_audio_i_o_1a275e36a2478dbb4be9c62c1ca32043b0" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPlayMode</name></member>
      <member refid="class_audio_i_o_1a49b21a3035e9556a54684bf6bc32356a" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mPortStreamV19</name></member>
      <member refid="class_audio_i_o_1a4c1d73ec8e53dc39f0552c69fbb58478" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mRate</name></member>
      <member refid="class_audio_i_o_1ad1e8c444ca5eb006c2c885b9e61fbb2a" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mResample</name></member>
      <member refid="class_audio_i_o_1a666c8da6543264befc781d1ca72b78f2" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mScrubDuration</name></member>
      <member refid="class_audio_i_o_1abdc2d224efba6159ab64731b50fa5c98" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mScrubQueue</name></member>
      <member refid="class_audio_i_o_1aff6b26b419fcb778d39873cd70334463" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mSeek</name></member>
      <member refid="class_audio_i_o_1ac6361df44d71228f143778ecebebdb54" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mSilenceLevel</name></member>
      <member refid="class_audio_i_o_1a0efb6d425b3a523e35536b995862efb9" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mSilentBuf</name></member>
      <member refid="class_audio_i_o_1a2fd4a21ec59c1351766d620ffdad20b9" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mSilentScrub</name></member>
      <member refid="class_audio_i_o_1a406d8e0362d4f43c34dd817710247d63" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mSoftwarePlaythrough</name></member>
      <member refid="class_audio_i_o_1a79a2fc9de8ddc0d4589fb05d2978c9f1" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mStreamToken</name></member>
      <member refid="class_audio_i_o_1a17d0ac79c212052c4fbc0b84c5c61d45" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mSuspendAudioThread</name></member>
      <member refid="class_audio_i_o_1ae44e43a79e74f936873a1aa56f425d0d" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mT0</name></member>
      <member refid="class_audio_i_o_1aeaa6d968d53f7484758f2814cc39707b" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mT1</name></member>
      <member refid="class_audio_i_o_1abe59a72ea00361a4ae9c027b7b86db55" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mThread</name></member>
      <member refid="class_audio_i_o_1adf2d6f71c9cd21fd2064e38572714c99" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mTime</name></member>
      <member refid="class_audio_i_o_1a2242677985647e79554f7ce564dd196d" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mTimeTrack</name></member>
      <member refid="class_audio_i_o_1a755844de58787c4ebe165e3344595de9" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mUpdateMeters</name></member>
      <member refid="class_audio_i_o_1a8cd0f28103ef8a7f88a423caae41aef7" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mUpdatingMeters</name></member>
      <member refid="class_audio_i_o_1ae079828d6dcee6b9c381f9bce937e21b" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mWarpedLength</name></member>
      <member refid="class_audio_i_o_1a5788f2fdd6ea71bb5b8b0df70a2575e1" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>mWarpedTime</name></member>
      <member refid="class_audio_i_o_1a20c0b00cffe0323e3cd37a13894e6359" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>NormalizeStreamTime</name></member>
      <member refid="class_audio_i_o_1acd857695ae99aee7817a5d3db4c271c7" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>NumRatesToTry</name></member>
      <member refid="class_audio_i_o_1a4d794f0244d6be2f833a6627cbfcdae8" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>NumStandardRates</name></member>
      <member refid="class_audio_i_o_1abc4c1f9f7609603270df993ee8af1af2" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>OutputMixerEmulated</name></member>
      <member refid="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877daf3b6e9a5f9b7cc96cb5129ae13f4fc22" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>PLAY_LOOPED</name></member>
      <member refid="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877da81b36d80177e0f97badf559d7d2d3524" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>PLAY_SCRUB</name></member>
      <member refid="class_audio_i_o_1aadcaf0d020af23d1aef17e5b8e9d877da8c499158cb9d532cde00a73836ee537e" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>PLAY_STRAIGHT</name></member>
      <member refid="class_audio_i_o_1a7a6449b2517e01d9d71a7cd69a11f851" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>RatesToTry</name></member>
      <member refid="class_audio_i_o_1a3d9eabb6feafc32be1abd235b043208c" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>ReversedTime</name></member>
      <member refid="class_audio_i_o_1a40488ff8506e6238963049844728a6c6" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SeekStream</name></member>
      <member refid="class_audio_i_o_1a0ef8578b176133229c30a656fe41478e" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SetCaptureMeter</name></member>
      <member refid="class_audio_i_o_1a8d9df4aba253fa43612ac02bafa994fd" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SetListener</name></member>
      <member refid="class_audio_i_o_1a7892db04cc479361dadaef8f7a9ad575" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>SetMeters</name></member>
      <member refid="class_audio_i_o_1ab90a44dee504b8748bf321416a25067b" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SetMixer</name></member>
      <member refid="class_audio_i_o_1a6e08d80f05a4106be20dfaa96723c957" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SetMixer</name></member>
      <member refid="class_audio_i_o_1a49f8574c7ce8410e3ab254fe95c44388" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SetPaused</name></member>
      <member refid="class_audio_i_o_1a615aec62315405636bfe8b6e2a326cbe" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>SetPlaybackMeter</name></member>
      <member refid="class_audio_i_o_1a42f4cf4090548388aa1c762bb59778ba" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>StandardRates</name></member>
      <member refid="class_audio_i_o_1a447c4b556a0f66a61ead1c97ed4ae7e7" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>StartMonitoring</name></member>
      <member refid="class_audio_i_o_1a65037b9e93a038d12a766558b5df0f19" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>StartPortAudioStream</name></member>
      <member refid="class_audio_i_o_1ac2be97e813dfdedb3504b20f8b61cdd7" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>StartStream</name></member>
      <member refid="class_audio_i_o_1a849678c41c5b5992a3befb6e915625ae" prot="private" virt="non-virtual"><scope>AudioIO</scope><name>StartStreamCleanup</name></member>
      <member refid="class_audio_i_o_1a018ef510a8616f1feeb0f542f82b1d44" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>StopStream</name></member>
      <member refid="class_audio_i_o_1acfaf9b48ca72d2d34ebfb8873e0ae7dd" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>ValidateDeviceNames</name></member>
      <member refid="class_audio_i_o_1a747b3a9f103ce40e9b8d5e8dfb1cfce2" prot="public" virt="non-virtual"><scope>AudioIO</scope><name>~AudioIO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
