<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="portburn__staging_8c" kind="file" language="C++">
    <compoundname>portburn_staging.c</compoundname>
    <includes refid="portburn__staging_8h" local="yes">portburn_staging.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h" local="no">sys/types.h</includes>
    <incdepgraph>
      <node id="30756">
        <label>sys/stat.h</label>
      </node>
      <node id="30757">
        <label>sys/types.h</label>
        <link refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h"/>
        <childnode refid="30758" relation="include">
        </childnode>
        <childnode refid="30759" relation="include">
        </childnode>
        <childnode refid="30754" relation="include">
        </childnode>
      </node>
      <node id="30753">
        <label>stdlib.h</label>
      </node>
      <node id="30759">
        <label>alloca.h</label>
      </node>
      <node id="30750">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c</label>
        <link refid="portburn_staging.c"/>
        <childnode refid="30751" relation="include">
        </childnode>
        <childnode refid="30752" relation="include">
        </childnode>
        <childnode refid="30753" relation="include">
        </childnode>
        <childnode refid="30754" relation="include">
        </childnode>
        <childnode refid="30755" relation="include">
        </childnode>
        <childnode refid="30756" relation="include">
        </childnode>
        <childnode refid="30757" relation="include">
        </childnode>
      </node>
      <node id="30751">
        <label>portburn_staging.h</label>
        <link refid="portburn__staging_8h"/>
      </node>
      <node id="30758">
        <label>MacTypes.h</label>
      </node>
      <node id="30754">
        <label>string.h</label>
      </node>
      <node id="30755">
        <label>unistd.h</label>
      </node>
      <node id="30752">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_staging_handle" prot="public">StagingHandle</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="portburn__staging_8c_1a639636a198824ccc9312bf624ea950ed" prot="public" static="no">
        <name>swap_uint16</name>
        <param><defname>x</defname></param>
        <initializer>((((x) &gt;&gt; 8) &amp; 0xff) | (((x) &amp; 0xff) &lt;&lt; 8))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="25" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="portburn__staging_8c_1abe3cd2ee25d5792fa00d035dae421c0c" prot="public" static="no">
        <name>swap_uint32</name>
        <param><defname>x</defname></param>
        <initializer>((((x) &amp; 0xff000000) &gt;&gt; 24) | (((x) &amp; 0x00ff0000) &gt;&gt;  8) |    \
        (((x) &amp; 0x0000ff00) &lt;&lt;  8) | (((x) &amp; 0x000000ff) &lt;&lt; 24))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="27" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>const unsigned int FourCharInt32</definition>
        <argsstring>(const char *str)</argsstring>
        <name>FourCharInt32</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="31" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a9583dac0bb5df3c2f23a918926393980" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void PortBurn_Put32</definition>
        <argsstring>(StagingHandle *handle, unsigned int data)</argsstring>
        <name>PortBurn_Put32</name>
        <param>
          <type><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="46" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a6ef3561aa9780ad04de15d7b55f7f1a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void PortBurn_Put16</definition>
        <argsstring>(StagingHandle *handle, unsigned short data)</argsstring>
        <name>PortBurn_Put16</name>
        <param>
          <type><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="53" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a4606700b7a7847616d0500b446fd06d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* PortBurn_TempDirStaging</definition>
        <argsstring>(const char *temporary_directory)</argsstring>
        <name>PortBurn_TempDirStaging</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>temporary_directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="60" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="60" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a2d635a350f0d4e565e7ffb702acfa54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PortBurn_StartStagingTrack</definition>
        <argsstring>(void *handle, const char *name, int frames)</argsstring>
        <name>PortBurn_StartStagingTrack</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="132" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="132" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a7b8f3a9c0019d70e01490058004660b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PortBurn_AddStagingFrame</definition>
        <argsstring>(void *handle, short *buffer)</argsstring>
        <name>PortBurn_AddStagingFrame</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="197" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="197" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1adaa3e9c884a5a2115ee97d0b334741c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PortBurn_EndStagingTrack</definition>
        <argsstring>(void *handle)</argsstring>
        <name>PortBurn_EndStagingTrack</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="226" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="226" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a441271293df55603a006088e1c5359aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PortBurn_FinishStaging</definition>
        <argsstring>(void *handle)</argsstring>
        <name>PortBurn_FinishStaging</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="242" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a37451c702bb5a1b53720c0422ad6a2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PortBurn_GetNumStagedTracks</definition>
        <argsstring>(void *handle)</argsstring>
        <name>PortBurn_GetNumStagedTracks</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="247" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="247" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a97a373723224897fc658eb218d64e1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* PortBurn_GetStagedFilename</definition>
        <argsstring>(void *handle, int index)</argsstring>
        <name>PortBurn_GetStagedFilename</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="256" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="256" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1aba361a2c7e4a632d5dfeb434f892d1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
        <definition>const char* PortBurn_GetStagedTrackName</definition>
        <argsstring>(void *handle, int index)</argsstring>
        <name>PortBurn_GetStagedTrackName</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="265" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="265" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a41ccbdcce6a2e45e75d662e0ae82a7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int PortBurn_GetStagedLengthInFrames</definition>
        <argsstring>(void *handle, int index)</argsstring>
        <name>PortBurn_GetStagedLengthInFrames</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="274" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="portburn__staging_8c_1a9d01118c7a2fb019a0cc490c91fb8996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PortBurn_CleanupStaging</definition>
        <argsstring>(void *handle)</argsstring>
        <name>PortBurn_CleanupStaging</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" line="283" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c" bodystart="283" bodyend="297"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>PortBurn</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Common<sp/>utilities<sp/>for<sp/>staging<sp/>audio<sp/>files<sp/>in<sp/>a<sp/>temporary<sp/>directory.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>License:<sp/>LGPL</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>A<sp/>library<sp/>for<sp/>cross-platform<sp/>audio<sp/>CD<sp/>burning</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>On<sp/>some<sp/>of<sp/>the<sp/>platforms<sp/>supported<sp/>by<sp/>PortBurn,<sp/>we<sp/>need<sp/>to<sp/>stage</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>the<sp/>audio<sp/>data<sp/>ourselves.<sp/><sp/>This<sp/>file<sp/>defines<sp/>an<sp/>interface<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>common<sp/>functions.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="portburn__staging_8h" kindref="compound">portburn_staging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib-src_2libvorbis_2macos_2compat_2sys_2_types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="portburn__staging_8c_1a639636a198824ccc9312bf624ea950ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>swap_uint16(x)<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((x)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff)<sp/>|<sp/>(((x)<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="portburn__staging_8c_1abe3cd2ee25d5792fa00d035dae421c0c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>swap_uint32(x)<sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((x)<sp/>&amp;<sp/>0xff000000)<sp/>&gt;&gt;<sp/>24)<sp/>|<sp/>(((x)<sp/>&amp;<sp/>0x00ff0000)<sp/>&gt;&gt;<sp/><sp/>8)<sp/>|<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0x0000ff00)<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>(((x)<sp/>&amp;<sp/>0x000000ff)<sp/>&lt;&lt;<sp/>24))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" kindref="member">FourCharInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1abe3cd2ee25d5792fa00d035dae421c0c" kindref="member">swap_uint32</ref>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(str));</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="struct_staging_handle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36" refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>;</highlight></codeline>
<codeline lineno="37" refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>;</highlight></codeline>
<codeline lineno="38" refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" refkind="member"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/>*<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>;</highlight></codeline>
<codeline lineno="39" refid="struct_staging_handle_1abcea901716e4e3651724fec56108c0d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="struct_staging_handle_1abcea901716e4e3651724fec56108c0d4" kindref="member">tmpdir</ref>;</highlight></codeline>
<codeline lineno="40" refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>[99];</highlight></codeline>
<codeline lineno="41" refid="struct_staging_handle_1a5890eb2011737b581f3aa35c1088e3bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*trackname[99];</highlight></codeline>
<codeline lineno="42" refid="struct_staging_handle_1ab99bbdc68483ab5e022c782021c7706f" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frames[99];</highlight></codeline>
<codeline lineno="43" refid="struct_staging_handle_1a3a39e20633115543ed82aabc01bc7a86" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_staging_handle_1a3a39e20633115543ed82aabc01bc7a86" kindref="member">needswap</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PortBurn_Put32(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*handle,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle-&gt;<ref refid="struct_staging_handle_1a3a39e20633115543ed82aabc01bc7a86" kindref="member">needswap</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/><ref refid="portburn__staging_8c_1abe3cd2ee25d5792fa00d035dae421c0c" kindref="member">swap_uint32</ref>(data);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>fwrite((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;data,<sp/>4,<sp/>1,<sp/>handle-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PortBurn_Put16(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*handle,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle-&gt;<ref refid="struct_staging_handle_1a3a39e20633115543ed82aabc01bc7a86" kindref="member">needswap</ref>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/><ref refid="portburn__staging_8c_1a639636a198824ccc9312bf624ea950ed" kindref="member">swap_uint16</ref>(data);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>fwrite((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;data,<sp/>2,<sp/>1,<sp/>handle-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="portburn__staging_8h_1a4606700b7a7847616d0500b446fd06d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="portburn__staging_8c_1a4606700b7a7847616d0500b446fd06d2" kindref="member">PortBurn_TempDirStaging</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temporary_directory)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swaptest;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp2;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temporary_directory<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>strlen(temporary_directory);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>tmp<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(len+1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>tmp2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(len+6);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><ref refid="hashrout_8h_1a11280e8971e1a91d58ccd7a36db51a8a" kindref="member">strcpy</ref>(tmp,<sp/>temporary_directory);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>all<sp/>of<sp/>the<sp/>parent<sp/>directories,<sp/>in<sp/>case<sp/>they<sp/>don&apos;t<sp/>exist.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;<sp/>i&lt;<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp[i]==</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mkdir(tmp,<sp/>0777);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>mkdir(tmp,<sp/>0777);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>path<sp/>shouldn&apos;t<sp/>end<sp/>in<sp/>a<sp/>&apos;/&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp[len-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[len-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len--;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>we<sp/>can<sp/>write<sp/>and<sp/>read<sp/>files<sp/>in<sp/>this<sp/>directory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>sprintf(tmp2,<sp/></highlight><highlight class="stringliteral">&quot;%s/test&quot;</highlight><highlight class="normal">,<sp/>tmp);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(tmp2,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tmp);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tmp2);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fp);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(tmp2,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlink(tmp2);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tmp);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tmp2);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(fp);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>unlink(tmp2);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref>));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>memset(h,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref>));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1abcea901716e4e3651724fec56108c0d4" kindref="member">tmpdir</ref><sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>free(tmp2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>swaptest<sp/>=<sp/>0x01020304;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;swaptest)[0]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a3a39e20633115543ed82aabc01bc7a86" kindref="member">needswap</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a3a39e20633115543ed82aabc01bc7a86" kindref="member">needswap</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="portburn__staging_8h_1a53836a2823dfdaf89a18742d4f0b2e53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a2d635a350f0d4e565e7ffb702acfa54d" kindref="member">PortBurn_StartStagingTrack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1a1b49b495b59f9e73205b69ad1a2965b0" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frames)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref><sp/>==<sp/>99)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>=<sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5890eb2011737b581f3aa35c1088e3bb" kindref="member">trackname</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(strlen(name)+1);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><ref refid="hashrout_8h_1a11280e8971e1a91d58ccd7a36db51a8a" kindref="member">strcpy</ref>(h-&gt;<ref refid="struct_staging_handle_1a5890eb2011737b581f3aa35c1088e3bb" kindref="member">trackname</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>],<sp/>name);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(strlen(h-&gt;<ref refid="struct_staging_handle_1abcea901716e4e3651724fec56108c0d4" kindref="member">tmpdir</ref>)+14);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>sprintf(h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>],<sp/></highlight><highlight class="stringliteral">&quot;%s/track%03d.wav&quot;</highlight><highlight class="normal">,<sp/>h-&gt;<ref refid="struct_staging_handle_1abcea901716e4e3651724fec56108c0d4" kindref="member">tmpdir</ref>,<sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>+1);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref><sp/>=<sp/>fopen(h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>],<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_staging_handle_1a5890eb2011737b581f3aa35c1088e3bb" kindref="member">trackname</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>]);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1ab99bbdc68483ab5e022c782021c7706f" kindref="member">frames</ref>[h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref>]<sp/>=<sp/>frames;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">WavFormatChunk<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>channels;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sndfile__load_8m_1ac5309ad522c97c94c294347821fdd375" kindref="member">samplerate</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byterate;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>blockAlign;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>bitsPerSample;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/><ref refid="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" kindref="member">FourCharInt32</ref>(</highlight><highlight class="stringliteral">&quot;RIFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/>44<sp/>+<sp/>(4<sp/>*<sp/>1176<sp/>*<sp/>frames));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/><ref refid="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" kindref="member">FourCharInt32</ref>(</highlight><highlight class="stringliteral">&quot;WAVE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/><ref refid="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" kindref="member">FourCharInt32</ref>(</highlight><highlight class="stringliteral">&quot;fmt<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/>16);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put16(h,<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put16(h,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>channels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/>44100);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>samplerate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/>176400);<sp/><sp/></highlight><highlight class="comment">/*<sp/>byterate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put16(h,<sp/>4);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>block<sp/>align<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put16(h,<sp/>16);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>per<sp/>sample<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/><ref refid="portburn__staging_8c_1a529e984ea5911991064fd1c392a7a666" kindref="member">FourCharInt32</ref>(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/>PortBurn_Put32(h,<sp/>4<sp/>*<sp/>1176<sp/>*<sp/>frames);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ferror(h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>))<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Finish<sp/>this<sp/>track<sp/>and<sp/>let<sp/>the<sp/>cleanup<sp/>function<sp/>handle<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>++;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="portburn__staging_8h_1a7b8f3a9c0019d70e01490058004660b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a7b8f3a9c0019d70e01490058004660b8" kindref="member">PortBurn_AddStagingFrame</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>!=<sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1176;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PortBurn_Put16(h,<sp/>buffer[i]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ferror(h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>))<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Finish<sp/>this<sp/>track<sp/>and<sp/>let<sp/>the<sp/>cleanup<sp/>function<sp/>handle<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="portburn__staging_8h_1adaa3e9c884a5a2115ee97d0b334741c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1adaa3e9c884a5a2115ee97d0b334741c9" kindref="member">PortBurn_EndStagingTrack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>!=<sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose</ref>(h-&gt;<ref refid="struct_staging_handle_1a712692b2f7f84a1164c33e5163718001" kindref="member">curfp</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>++;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<ref refid="struct_staging_handle_1a5b74fbb322efa94b93d196e462ef78d6" kindref="member">cur</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="portburn__staging_8h_1a441271293df55603a006088e1c5359aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a441271293df55603a006088e1c5359aa" kindref="member">PortBurn_FinishStaging</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="portburn__staging_8h_1a37451c702bb5a1b53720c0422ad6a2df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a37451c702bb5a1b53720c0422ad6a2df" kindref="member">PortBurn_GetNumStagedTracks</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="portburn__staging_8h_1a97a373723224897fc658eb218d64e1de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="portburn__staging_8c_1a97a373723224897fc658eb218d64e1de" kindref="member">PortBurn_GetStagedFilename</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[index];</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="portburn__staging_8c_1aba361a2c7e4a632d5dfeb434f892d1eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="portburn__staging_8c_1aba361a2c7e4a632d5dfeb434f892d1eb" kindref="member">PortBurn_GetStagedTrackName</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;<ref refid="struct_staging_handle_1a5890eb2011737b581f3aa35c1088e3bb" kindref="member">trackname</ref>[index];</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="portburn__staging_8h_1a41ccbdcce6a2e45e75d662e0ae82a7c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a41ccbdcce6a2e45e75d662e0ae82a7c4" kindref="member">PortBurn_GetStagedLengthInFrames</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;<ref refid="struct_staging_handle_1ab99bbdc68483ab5e022c782021c7706f" kindref="member">frames</ref>[index];</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="portburn__staging_8h_1a9d01118c7a2fb019a0cc490c91fb8996" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="portburn__staging_8c_1a9d01118c7a2fb019a0cc490c91fb8996" kindref="member">PortBurn_CleanupStaging</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*h<sp/>=<sp/>(<ref refid="struct_staging_handle" kindref="compound">StagingHandle</ref><sp/>*)handle;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_staging_handle_1abcea901716e4e3651724fec56108c0d4" kindref="member">tmpdir</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>h-&gt;<ref refid="struct_staging_handle_1a81acff94a7373df51df6237155359f2a" kindref="member">ntracks</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlink(h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[i]);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_staging_handle_1aa6e76e28477fa7789961f45e8fb03cca" kindref="member">filename</ref>[i]);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(h-&gt;<ref refid="struct_staging_handle_1a5890eb2011737b581f3aa35c1088e3bb" kindref="member">trackname</ref>[i]);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portburn/portburn_staging.c"/>
  </compounddef>
</doxygen>
