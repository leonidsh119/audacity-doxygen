<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__flacpp__metadata__level2" kind="group">
    <compoundname>flacpp_metadata_level2</compoundname>
    <title>FLAC++/metadata.h: metadata level 2 interface</title>
    <innerclass refid="class_f_l_a_c_1_1_metadata_1_1_chain" prot="public">FLAC::Metadata::Chain</innerclass>
    <innerclass refid="class_f_l_a_c_1_1_metadata_1_1_iterator" prot="public">FLAC::Metadata::Iterator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flacpp__metadata__level2_1gae49fa399a6273ccad7cb0e6f787a3f5c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FLAC::Metadata::Prototype::Prototype</definition>
        <argsstring>(const Prototype &amp;)</argsstring>
        <name>Prototype</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> Prototype &amp;</type>
          <defname>object</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a copy of the given object. This form always performs a deep copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC++/metadata.h" line="115" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC++/metadata.cpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__flacpp__metadata__level2_1ga3d03bfec2cd09578f166fcd463b56d4f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FLAC::Metadata::Prototype::Prototype</definition>
        <argsstring>(const ::FLAC__StreamMetadata &amp;)</argsstring>
        <name>Prototype</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> ::<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> &amp;</type>
          <defname>object</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC++/metadata.h" line="116" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC++/metadata.cpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__flacpp__metadata__level2_1ga1b39c0561f84c3529302dc68b1ba8a2e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FLAC::Metadata::Prototype::Prototype</definition>
        <argsstring>(const ::FLAC__StreamMetadata *)</argsstring>
        <name>Prototype</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> ::<ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <defname>object</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC++/metadata.h" line="117" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC++/metadata.cpp" bodystart="142" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Level 2 metadata iterator. </para>    </briefdescription>
    <detaileddescription>
<para>The flow through the iterator in the C++ layer is similar to the C layer:<itemizedlist>
<listitem><para>Create a <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain" kindref="compound">Chain</ref> instance</para></listitem><listitem><para>Check <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain_1a7c7799a4ed676ac334381af9e3888549" kindref="member">Chain::is_valid()</ref></para></listitem><listitem><para>Call <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain_1a509bf6a75a12df65bc77947a4765d9c1" kindref="member">Chain::read()</ref> and check the return</para></listitem><listitem><para>Traverse and/or edit with an <ref refid="class_f_l_a_c_1_1_metadata_1_1_iterator" kindref="compound">Iterator</ref> or with <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain_1aef51a0414284f468a2d73c07b540641d" kindref="member">Chain::merge_padding()</ref> or <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain_1a779eaac12da7e7edac67089053e5907f" kindref="member">Chain::sort_padding()</ref></para></listitem><listitem><para>Write changes back to <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file with <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain_1a2341690885e2312013afc561e6fafd81" kindref="member">Chain::write()</ref></para></listitem><listitem><para>Destroy the <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain" kindref="compound">Chain</ref> instance</para></listitem></itemizedlist>
</para><para>The ownership of pointers in the C++ layer is slightly different than in the C layer, i.e.<itemizedlist>
<listitem><para>The objects returned by <ref refid="class_f_l_a_c_1_1_metadata_1_1_iterator_1a9fb167ff8f0b058e244353a21541f3d7" kindref="member">Iterator::get_block()</ref> are NOT owned by the iterator and should be deleted by the caller when finished, BUT, when you modify the block, it will directly edit what&apos;s in the chain and you do not need to call <ref refid="class_f_l_a_c_1_1_metadata_1_1_iterator_1a3123daf89fca2a8981c9f361f466a418" kindref="member">Iterator::set_block()</ref>. However the changes will not be reflected in the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file until the chain is written with <ref refid="class_f_l_a_c_1_1_metadata_1_1_chain_1a2341690885e2312013afc561e6fafd81" kindref="member">Chain::write()</ref>.</para></listitem><listitem><para>When you pass an object to <ref refid="class_f_l_a_c_1_1_metadata_1_1_iterator_1a3123daf89fca2a8981c9f361f466a418" kindref="member">Iterator::set_block()</ref>, <ref refid="class_f_l_a_c_1_1_metadata_1_1_iterator_1a86de6d0b21ac08b74a2ea8c1a9adce36" kindref="member">Iterator::insert_block_before()</ref>, or <ref refid="class_f_l_a_c_1_1_metadata_1_1_iterator_1a73e7a3f7192f369cb3a19d078da504ab" kindref="member">Iterator::insert_block_after()</ref>, the iterator takes ownership of the block and it will be deleted by the chain.</para></listitem></itemizedlist>
</para><para>See the <ref refid="group__flac__metadata__level2" kindref="compound">C layer equivalent </ref> for more. </para>    </detaileddescription>
  </compounddef>
</doxygen>
