<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="pa__allocation_8c" kind="file" language="C++">
    <compoundname>pa_allocation.c</compoundname>
    <includes refid="pa__allocation_8h" local="yes">pa_allocation.h</includes>
    <includes refid="pa__util_8h" local="yes">pa_util.h</includes>
    <incdepgraph>
      <node id="29332">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c</label>
        <link refid="pa_allocation.c"/>
        <childnode refid="29333" relation="include">
        </childnode>
        <childnode refid="29334" relation="include">
        </childnode>
      </node>
      <node id="29333">
        <label>pa_allocation.h</label>
        <link refid="pa__allocation_8h"/>
      </node>
      <node id="29335">
        <label>portaudio.h</label>
        <link refid="portaudio_8h"/>
      </node>
      <node id="29334">
        <label>pa_util.h</label>
        <link refid="pa__util_8h"/>
        <childnode refid="29335" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_pa_util_allocation_group_link" prot="public">PaUtilAllocationGroupLink</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pa__allocation_8c_1a0c787f6c86ae2fcefec0e20592c4827a" prot="public" static="no">
        <name>PA_INITIAL_LINK_COUNT_</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="61" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pa__allocation_8c_1a6997d305b3f8b65b7d0c5dcd1bb383ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref> *</type>
        <definition>static struct PaUtilAllocationGroupLink* AllocateLinks</definition>
        <argsstring>(long count, struct PaUtilAllocationGroupLink *nextBlock, struct PaUtilAllocationGroupLink *nextSpare)</argsstring>
        <name>AllocateLinks</name>
        <param>
          <type>long</type>
          <declname>count</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref> *</type>
          <declname>nextBlock</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref> *</type>
          <declname>nextSpare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="75" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="75" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="pa__allocation_8c_1a9cc7370b73e75f690ab0a0360e7fffee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref> *</type>
        <definition>PaUtilAllocationGroup* PaUtil_CreateAllocationGroup</definition>
        <argsstring>(void)</argsstring>
        <name>PaUtil_CreateAllocationGroup</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an allocation group. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="103" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="103" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="pa__allocation_8c_1aefcb1143eaa768c2b555bd203f1c9deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_DestroyAllocationGroup</definition>
        <argsstring>(PaUtilAllocationGroup *group)</argsstring>
        <name>PaUtil_DestroyAllocationGroup</name>
        <param>
          <type><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an allocation group, but not the memory allocated through the group. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="130" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="130" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="pa__allocation_8c_1ace88f0110da3a26cb8d8ed00758accf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>void* PaUtil_GroupAllocateMemory</definition>
        <argsstring>(PaUtilAllocationGroup *group, long size)</argsstring>
        <name>PaUtil_GroupAllocateMemory</name>
        <param>
          <type><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of memory though an allocation group. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="146" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="146" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="pa__allocation_8c_1a9a53cc44b24fb0d201ee0ae9b7b6b64d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_GroupFreeMemory</definition>
        <argsstring>(PaUtilAllocationGroup *group, void *buffer)</argsstring>
        <name>PaUtil_GroupFreeMemory</name>
        <param>
          <type><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a block of memory that was previously allocated though an allocation group. Calling this function is a relatively time consuming operation. Under normal circumstances clients should call PaUtil_FreeAllAllocations to free all allocated blocks simultaneously. <simplesect kind="see"><para><ref refid="pa__allocation_8h_1aa83a07899e8db63d415d03f68b1f8a3d" kindref="member">PaUtil_FreeAllAllocations</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="183" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="183" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="pa__allocation_8c_1aa83a07899e8db63d415d03f68b1f8a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_FreeAllAllocations</definition>
        <argsstring>(PaUtilAllocationGroup *group)</argsstring>
        <name>PaUtil_FreeAllAllocations</name>
        <param>
          <type><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free all blocks of memory which have been allocated through the allocation group. This function doesn&apos;t destroy the group itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c" bodystart="220" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allocation Group implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>pa_allocation.c<sp/>1097<sp/>2006-08-26<sp/>08:27:53Z<sp/>rossb<sp/>$</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Portable<sp/>Audio<sp/>I/O<sp/>Library<sp/>allocation<sp/>group<sp/>implementation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>memory<sp/>allocation<sp/>group<sp/>for<sp/>tracking<sp/>allocation<sp/>groups</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Based<sp/>on<sp/>the<sp/>Open<sp/>Source<sp/>API<sp/>proposed<sp/>by<sp/>Ross<sp/>Bencina</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2002<sp/>Ross<sp/>Bencina,<sp/>Phil<sp/>Burk</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>The<sp/>text<sp/>above<sp/>constitutes<sp/>the<sp/>entire<sp/>PortAudio<sp/>license;<sp/>however,<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>the<sp/>PortAudio<sp/>community<sp/>also<sp/>makes<sp/>the<sp/>following<sp/>non-binding<sp/>requests:</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Any<sp/>person<sp/>wishing<sp/>to<sp/>distribute<sp/>modifications<sp/>to<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>requested<sp/>to<sp/>send<sp/>the<sp/>modifications<sp/>to<sp/>the<sp/>original<sp/>developer<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>they<sp/>can<sp/>be<sp/>incorporated<sp/>into<sp/>the<sp/>canonical<sp/>version.<sp/>It<sp/>is<sp/>also<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>requested<sp/>that<sp/>these<sp/>non-binding<sp/>requests<sp/>be<sp/>included<sp/>along<sp/>with<sp/>the<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>license<sp/>above.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__allocation_8h" kindref="compound">pa_allocation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__util_8h" kindref="compound">pa_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>Maintain<sp/>3<sp/>singly<sp/>linked<sp/>lists...</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>linkBlocks:<sp/>the<sp/>buffers<sp/>used<sp/>to<sp/>allocate<sp/>the<sp/>links</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>spareLinks:<sp/>links<sp/>available<sp/>for<sp/>use<sp/>in<sp/>the<sp/>allocations<sp/>list</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>allocations:<sp/>the<sp/>buffers<sp/>currently<sp/>allocated<sp/>using<sp/>PaUtil_ContextAllocateMemory()</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>Link<sp/>block<sp/>size<sp/>is<sp/>doubled<sp/>every<sp/>time<sp/>new<sp/>links<sp/>are<sp/>allocated.</highlight></codeline>
<codeline lineno="58"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="pa__allocation_8c_1a0c787f6c86ae2fcefec0e20592c4827a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PA_INITIAL_LINK_COUNT_<sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="struct_pa_util_allocation_group_link" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65" refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="66" refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>Allocate<sp/>a<sp/>block<sp/>of<sp/>links.<sp/>The<sp/>first<sp/>link<sp/>will<sp/>have<sp/>it&apos;s<sp/>buffer<sp/>member</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>pointing<sp/>to<sp/>the<sp/>block,<sp/>and<sp/>it&apos;s<sp/>next<sp/>member<sp/>set<sp/>to<sp/>&lt;nextBlock&gt;.<sp/>The<sp/>remaining</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>links<sp/>will<sp/>have<sp/>NULL<sp/>buffer<sp/>members,<sp/>and<sp/>each<sp/>link<sp/>will<sp/>point<sp/>to</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>next<sp/>link<sp/>except<sp/>the<sp/>last,<sp/>which<sp/>will<sp/>point<sp/>to<sp/>&lt;nextSpare&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*AllocateLinks(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*nextBlock,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*nextSpare<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*result;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*)<ref refid="pa__util_8h_1aa614f193aff12744a6ab90a9eb3128f0" kindref="member">PaUtil_AllocateMemory</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref>)<sp/>*<sp/><ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>result<sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>block<sp/>link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[0].<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[0].<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>nextBlock;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>spare<sp/>links<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i=1;<sp/>i&lt;<ref refid="cascade_8c_1afea6e77db19a2f8c91419904fe665a3a" kindref="member">count</ref>;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>&amp;result[i+1];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[count-1].<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>nextSpare;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="pa__allocation_8h_1a9cc7370b73e75f690ab0a0360e7fffee" refkind="member"><highlight class="normal"><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*<sp/><ref refid="pa__allocation_8c_1a9cc7370b73e75f690ab0a0360e7fffee" kindref="member">PaUtil_CreateAllocationGroup</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*links;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>links<sp/>=<sp/>AllocateLinks(<sp/><ref refid="pa__allocation_8c_1a0c787f6c86ae2fcefec0e20592c4827a" kindref="member">PA_INITIAL_LINK_COUNT_</ref>,<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>links<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*)<ref refid="pa__util_8h_1aa614f193aff12744a6ab90a9eb3128f0" kindref="member">PaUtil_AllocateMemory</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>)<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>result<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_pa_util_allocation_group_1adf2cd1d334a9703bf6aa35298bafb3cd" kindref="member">linkCount</ref><sp/>=<sp/><ref refid="pa__allocation_8c_1a0c787f6c86ae2fcefec0e20592c4827a" kindref="member">PA_INITIAL_LINK_COUNT_</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_pa_util_allocation_group_1a13cc36a8a6859cdcbb9bda370cc34f6f" kindref="member">linkBlocks</ref><sp/>=<sp/>&amp;links[0];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>=<sp/>&amp;links[1];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__util_8h_1a27a8f85d109600ef246e5c642c5c3cad" kindref="member">PaUtil_FreeMemory</ref>(<sp/>links<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="pa__allocation_8h_1aefcb1143eaa768c2b555bd203f1c9deb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__allocation_8c_1aefcb1143eaa768c2b555bd203f1c9deb" kindref="member">PaUtil_DestroyAllocationGroup</ref>(<sp/><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*<sp/>group<sp/>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*current<sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a13cc36a8a6859cdcbb9bda370cc34f6f" kindref="member">linkBlocks</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>current<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__util_8h_1a27a8f85d109600ef246e5c642c5c3cad" kindref="member">PaUtil_FreeMemory</ref>(<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/><ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__util_8h_1a27a8f85d109600ef246e5c642c5c3cad" kindref="member">PaUtil_FreeMemory</ref>(<sp/>group<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="pa__allocation_8h_1ace88f0110da3a26cb8d8ed00758accf3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="pa__allocation_8c_1ace88f0110da3a26cb8d8ed00758accf3" kindref="member">PaUtil_GroupAllocateMemory</ref>(<sp/><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*<sp/>group,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref><sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*links,<sp/>*link;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>more<sp/>links<sp/>if<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>the<sp/>link<sp/>count<sp/>on<sp/>each<sp/>block<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>links<sp/>=<sp/>AllocateLinks(<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1adf2cd1d334a9703bf6aa35298bafb3cd" kindref="member">linkCount</ref>,<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a13cc36a8a6859cdcbb9bda370cc34f6f" kindref="member">linkBlocks</ref>,<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>links<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1adf2cd1d334a9703bf6aa35298bafb3cd" kindref="member">linkCount</ref><sp/>+=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1adf2cd1d334a9703bf6aa35298bafb3cd" kindref="member">linkCount</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a13cc36a8a6859cdcbb9bda370cc34f6f" kindref="member">linkBlocks</ref><sp/>=<sp/>&amp;links[0];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>=<sp/>&amp;links[1];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="pa__util_8h_1aa614f193aff12744a6ab90a9eb3128f0" kindref="member">PaUtil_AllocateMemory</ref>(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>result<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>=<sp/>link-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="pa__allocation_8h_1a9a53cc44b24fb0d201ee0ae9b7b6b64d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__allocation_8c_1a9a53cc44b24fb0d201ee0ae9b7b6b64d" kindref="member">PaUtil_GroupFreeMemory</ref>(<sp/><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*<sp/>group,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref><sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*current<sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*previous<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>buffer<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>the<sp/>right<sp/>link<sp/>and<sp/>remove<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>current<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>==<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>previous<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref><sp/>=<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__util_8h_1a27a8f85d109600ef246e5c642c5c3cad" kindref="member">PaUtil_FreeMemory</ref>(<sp/>buffer<sp/>);<sp/></highlight><highlight class="comment">/*<sp/>free<sp/>the<sp/>memory<sp/>whether<sp/>we<sp/>found<sp/>it<sp/>in<sp/>the<sp/>list<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="pa__allocation_8h_1aa83a07899e8db63d415d03f68b1f8a3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__allocation_8c_1aa83a07899e8db63d415d03f68b1f8a3d" kindref="member">PaUtil_FreeAllAllocations</ref>(<sp/><ref refid="struct_pa_util_allocation_group" kindref="compound">PaUtilAllocationGroup</ref>*<sp/>group<sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*current<sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_pa_util_allocation_group_link" kindref="compound">PaUtilAllocationGroupLink</ref><sp/>*previous<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>all<sp/>buffers<sp/>in<sp/>the<sp/>allocations<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>current<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__util_8h_1a27a8f85d109600ef246e5c642c5c3cad" kindref="member">PaUtil_FreeMemory</ref>(<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a561613ae4eccf10ad1737aadcb2014f7" kindref="member">buffer</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>link<sp/>the<sp/>former<sp/>allocations<sp/>list<sp/>onto<sp/>the<sp/>front<sp/>of<sp/>the<sp/>spareLinks<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>previous<sp/>)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous-&gt;<ref refid="struct_pa_util_allocation_group_link_1a3b1739dedb3c039356364a3f2af239ec" kindref="member">next</ref><sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1ae83b87241f68c69e41df760cd8324d58" kindref="member">spareLinks</ref><sp/>=<sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group-&gt;<ref refid="struct_pa_util_allocation_group_1a1df45313b17066bb431d2b79ded2ab7b" kindref="member">allocations</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_allocation.c"/>
  </compounddef>
</doxygen>
