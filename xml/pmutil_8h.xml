<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="pmutil_8h" kind="file" language="C++">
    <compoundname>pmutil.h</compoundname>
    <includedby refid="pmutil_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c</includedby>
    <includedby refid="portmidi_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/portmidi.c</includedby>
    <includedby refid="pmlinux_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_linux/pmlinux.c</includedby>
    <includedby refid="pmlinuxalsa_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_linux/pmlinuxalsa.c</includedby>
    <includedby refid="pm__mac_2finddefault_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/finddefault.c</includedby>
    <includedby refid="pmmac_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/pmmac.c</includedby>
    <includedby refid="pmmacosxcm_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/pmmacosxcm.c</includedby>
    <includedby refid="midithread_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_test/midithread.c</includedby>
    <includedby refid="midithru_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_test/midithru.c</includedby>
    <includedby refid="qtest_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_test/qtest.c</includedby>
    <includedby refid="pmwin_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_win/pmwin.c</includedby>
    <includedby refid="pmwinmm_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_win/pmwinmm.c</includedby>
    <invincdepgraph>
      <node id="30833">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c</label>
        <link refid="pmutil_8c"/>
      </node>
      <node id="30832">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h</label>
        <link refid="pmutil.h"/>
        <childnode refid="30833" relation="include">
        </childnode>
        <childnode refid="30834" relation="include">
        </childnode>
        <childnode refid="30835" relation="include">
        </childnode>
        <childnode refid="30836" relation="include">
        </childnode>
        <childnode refid="30837" relation="include">
        </childnode>
        <childnode refid="30838" relation="include">
        </childnode>
        <childnode refid="30839" relation="include">
        </childnode>
        <childnode refid="30840" relation="include">
        </childnode>
        <childnode refid="30841" relation="include">
        </childnode>
        <childnode refid="30842" relation="include">
        </childnode>
        <childnode refid="30843" relation="include">
        </childnode>
        <childnode refid="30844" relation="include">
        </childnode>
      </node>
      <node id="30841">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_test/midithru.c</label>
        <link refid="midithru_8c"/>
      </node>
      <node id="30842">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_test/qtest.c</label>
        <link refid="qtest_8c"/>
      </node>
      <node id="30843">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_win/pmwin.c</label>
        <link refid="pmwin_8c"/>
      </node>
      <node id="30835">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_linux/pmlinux.c</label>
        <link refid="pmlinux_8c"/>
      </node>
      <node id="30838">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/pmmac.c</label>
        <link refid="pmmac_8c"/>
      </node>
      <node id="30844">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_win/pmwinmm.c</label>
        <link refid="pmwinmm_8c"/>
      </node>
      <node id="30834">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/portmidi.c</label>
        <link refid="portmidi_8c"/>
      </node>
      <node id="30840">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_test/midithread.c</label>
        <link refid="midithread_8c"/>
      </node>
      <node id="30836">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_linux/pmlinuxalsa.c</label>
        <link refid="pmlinuxalsa_8c"/>
      </node>
      <node id="30839">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/pmmacosxcm.c</label>
        <link refid="pmmacosxcm_8c"/>
      </node>
      <node id="30837">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_mac/finddefault.c</label>
        <link refid="pm__mac_2finddefault_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" prot="public" static="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>typedef void PmQueue</definition>
        <argsstring></argsstring>
        <name>PmQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="9" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pmutil_8h_1a4b9e5baad25b1efbf575dd928d4c6f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
        <definition>PMEXPORT PmQueue* Pm_QueueCreate</definition>
        <argsstring>(long num_msgs, int32_t bytes_per_msg)</argsstring>
        <name>Pm_QueueCreate</name>
        <param>
          <type>long</type>
          <declname>num_msgs</declname>
        </param>
        <param>
          <type><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref></type>
          <declname>bytes_per_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="47" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="33" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1ad96fb66329910ccc4bf7c5c4b5fc6ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref></type>
        <definition>PMEXPORT PmError Pm_QueueDestroy</definition>
        <argsstring>(PmQueue *queue)</argsstring>
        <name>Pm_QueueDestroy</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="48" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1a0191ec51a6d9f94661df3328c505618a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref></type>
        <definition>PMEXPORT PmError Pm_Dequeue</definition>
        <argsstring>(PmQueue *queue, void *msg)</argsstring>
        <name>Pm_Dequeue</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="59" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="85" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1ab64bf944a76ddb46454c1ce904757191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref></type>
        <definition>PMEXPORT PmError Pm_Enqueue</definition>
        <argsstring>(PmQueue *queue, void *msg)</argsstring>
        <name>Pm_Enqueue</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="67" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="179" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1a9862615a386490b496ef16aa511623be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>PMEXPORT int Pm_QueueFull</definition>
        <argsstring>(PmQueue *queue)</argsstring>
        <name>Pm_QueueFull</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="85" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="229" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1a9076ca903990d923908e4655cc385747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>PMEXPORT int Pm_QueueEmpty</definition>
        <argsstring>(PmQueue *queue)</argsstring>
        <name>Pm_QueueEmpty</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="86" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1a6cfbd76d7c72784327c7dd5d3f910aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>PMEXPORT void* Pm_QueuePeek</definition>
        <argsstring>(PmQueue *queue)</argsstring>
        <name>Pm_QueuePeek</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="112" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="248" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="pmutil_8h_1a1d25278007a24fbd2ecf4c21db795f19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="porttime_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref> <ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref></type>
        <definition>PMEXPORT PmError Pm_SetOverflow</definition>
        <argsstring>(PmQueue *queue)</argsstring>
        <name>Pm_SetOverflow</name>
        <param>
          <type><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h" line="123" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.c" bodystart="164" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>pmutil.h<sp/>--<sp/>some<sp/>helpful<sp/>utilities<sp/>for<sp/>building<sp/>midi<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applications<sp/>that<sp/>use<sp/>PortMidi<sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pmutil_8h_1aaffd2b634e54baa4759ee5dd2a32f717" kindref="member">PmQueue</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>single-reader,<sp/>single-writer<sp/>queue<sp/>is<sp/>created<sp/>by</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueueCreate(),<sp/>which<sp/>takes<sp/>the<sp/>number<sp/>of<sp/>messages<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>message<sp/>size<sp/>as<sp/>parameters.<sp/>The<sp/>queue<sp/>only<sp/>accepts</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>fixed<sp/>sized<sp/>messages.<sp/>Returns<sp/>NULL<sp/>if<sp/>memory<sp/>cannot<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>queue<sp/>implementation<sp/>uses<sp/>the<sp/>&quot;light<sp/>pipe&quot;<sp/>algorithm<sp/>which</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>operates<sp/>correctly<sp/>even<sp/>with<sp/>multi-processors<sp/>and<sp/>out-of-order</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>memory<sp/>writes.<sp/>(see<sp/>Alexander<sp/>Dokumentov,<sp/>&quot;Lock-free<sp/>Interprocess</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>Communication,&quot;<sp/>Dr.<sp/>Dobbs<sp/>Portal,<sp/>http://www.ddj.com/,<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>articleID=189401457,<sp/>June<sp/>15,<sp/>2006.<sp/>This<sp/>algorithm<sp/>requires</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>messages<sp/>be<sp/>translated<sp/>to<sp/>a<sp/>form<sp/>where<sp/>no<sp/>words<sp/>contain</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>zeros.<sp/>Each<sp/>word<sp/>becomes<sp/>its<sp/>own<sp/>&quot;data<sp/>valid&quot;<sp/>tag.<sp/>Because<sp/>of</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>translation,<sp/>we<sp/>cannot<sp/>return<sp/>a<sp/>pointer<sp/>to<sp/>data<sp/>still<sp/>in<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>queue<sp/>when<sp/>the<sp/>&quot;peek&quot;<sp/>method<sp/>is<sp/>called.<sp/>Instead,<sp/>a<sp/>buffer<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>preallocated<sp/>so<sp/>that<sp/>data<sp/>can<sp/>be<sp/>copied<sp/>there.<sp/>Pm_QueuePeek()<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/>dequeues<sp/>a<sp/>message<sp/>into<sp/>this<sp/>buffer<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/>it.<sp/>A<sp/>subsequent<sp/>Pm_Dequeue()<sp/>will<sp/>copy<sp/>from<sp/>this<sp/>buffer.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>implementation<sp/>does<sp/>not<sp/>try<sp/>to<sp/>keep<sp/>reader/writer<sp/>data<sp/>in</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>separate<sp/>cache<sp/>lines<sp/>or<sp/>prevent<sp/>thrashing<sp/>on<sp/>cache<sp/>lines.<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>However,<sp/>this<sp/>algorithm<sp/>differs<sp/>by<sp/>doing<sp/>inserts/removals<sp/>in</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>units<sp/>of<sp/>messages<sp/>rather<sp/>than<sp/>units<sp/>of<sp/>machine<sp/>words.<sp/>Some</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>performance<sp/>improvement<sp/>might<sp/>be<sp/>obtained<sp/>by<sp/>not<sp/>clearing<sp/>data</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>immediately<sp/>after<sp/>a<sp/>read,<sp/>but<sp/>instead<sp/>by<sp/>waiting<sp/>for<sp/>the<sp/>end</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>cache<sp/>line,<sp/>especially<sp/>if<sp/>messages<sp/>are<sp/>smaller<sp/>than</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>cache<sp/>lines.<sp/>See<sp/>the<sp/>Dokumentov<sp/>article<sp/>for<sp/>explanation.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>algorithm<sp/>is<sp/>extended<sp/>to<sp/>handle<sp/>&quot;overflow&quot;<sp/>reporting.<sp/>To<sp/>report</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>an<sp/>overflow,<sp/>the<sp/>sender<sp/>writes<sp/>the<sp/>current<sp/>tail<sp/>position<sp/>to<sp/>a<sp/>field.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>receiver<sp/>must<sp/>acknowlege<sp/>receipt<sp/>by<sp/>zeroing<sp/>the<sp/>field.<sp/>The<sp/>sender</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>not<sp/>send<sp/>more<sp/>until<sp/>the<sp/>field<sp/>is<sp/>zeroed.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueueDestroy()<sp/>destroys<sp/>the<sp/>queue<sp/>and<sp/>frees<sp/>its<sp/>storage.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/>PmQueue<sp/>*<ref refid="pmutil_8h_1a4b9e5baad25b1efbf575dd928d4c6f43" kindref="member">Pm_QueueCreate</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_msgs,<sp/><ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref><sp/>bytes_per_msg);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/><ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref><sp/><ref refid="pmutil_8h_1ad96fb66329910ccc4bf7c5c4b5fc6ab0" kindref="member">Pm_QueueDestroy</ref>(PmQueue<sp/>*queue);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Dequeue()<sp/>removes<sp/>one<sp/>item<sp/>from<sp/>the<sp/>queue,<sp/>copying<sp/>it<sp/>into<sp/>msg.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>if<sp/>successful,<sp/>and<sp/>0<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>Returns<sp/>pmBufferOverflow<sp/>if<sp/>what<sp/>would<sp/>have<sp/>been<sp/>the<sp/>next<sp/>thing</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>queue<sp/>was<sp/>dropped<sp/>due<sp/>to<sp/>overflow.<sp/>(So<sp/>when<sp/>overflow<sp/>occurs,</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>receiver<sp/>can<sp/>receive<sp/>a<sp/>queue<sp/>full<sp/>of<sp/>messages<sp/>before<sp/>getting<sp/>the</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>overflow<sp/>report.<sp/>This<sp/>protocol<sp/>ensures<sp/>that<sp/>the<sp/>reader<sp/>will<sp/>be<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>notified<sp/>when<sp/>data<sp/>is<sp/>lost<sp/>due<sp/>to<sp/>overflow.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/><ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref><sp/><ref refid="pmutil_8h_1a0191ec51a6d9f94661df3328c505618a" kindref="member">Pm_Dequeue</ref>(PmQueue<sp/>*queue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Enqueue()<sp/>inserts<sp/>one<sp/>item<sp/>into<sp/>the<sp/>queue,<sp/>copying<sp/>it<sp/>from<sp/>msg.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>Returns<sp/>pmNoError<sp/>if<sp/>successful<sp/>and<sp/>pmBufferOverflow<sp/>if<sp/>the<sp/>queue<sp/>was<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>already<sp/>full.<sp/>If<sp/>pmBufferOverflow<sp/>is<sp/>returned,<sp/>the<sp/>overflow<sp/>flag<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/><ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref><sp/><ref refid="pmutil_8h_1ab64bf944a76ddb46454c1ce904757191" kindref="member">Pm_Enqueue</ref>(PmQueue<sp/>*queue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueueFull()<sp/>returns<sp/>non-zero<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>full</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueueEmpty()<sp/>returns<sp/>non-zero<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>empty</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>Either<sp/>condition<sp/>may<sp/>change<sp/>immediately<sp/>because<sp/>a<sp/>parallel</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>enqueue<sp/>or<sp/>dequeue<sp/>operation<sp/>could<sp/>be<sp/>in<sp/>progress.<sp/>Furthermore,</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueueEmpty()<sp/>is<sp/>optimistic:<sp/>it<sp/>may<sp/>say<sp/>false,<sp/>when<sp/>due<sp/>to<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>out-of-order<sp/>writes,<sp/>the<sp/>full<sp/>message<sp/>has<sp/>not<sp/>arrived.<sp/>Therefore,</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Dequeue()<sp/>could<sp/>still<sp/>return<sp/>0<sp/>after<sp/>Pm_QueueEmpty()<sp/>returns</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>false.<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>Pm_QueueFull()<sp/>is<sp/>pessimistic:<sp/>if<sp/>it</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>returns<sp/>false,<sp/>then<sp/>Pm_Enqueue()<sp/>is<sp/>guaranteed<sp/>to<sp/>succeed.<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>Error<sp/>conditions:<sp/>Pm_QueueFull()<sp/>returns<sp/>pmBadPtr<sp/>if<sp/>queue<sp/>is<sp/>NULL.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueueEmpty()<sp/>returns<sp/>FALSE<sp/>if<sp/>queue<sp/>is<sp/>NULL.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pmutil_8h_1a9862615a386490b496ef16aa511623be" kindref="member">Pm_QueueFull</ref>(PmQueue<sp/>*queue);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pmutil_8h_1a9076ca903990d923908e4655cc385747" kindref="member">Pm_QueueEmpty</ref>(PmQueue<sp/>*queue);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueuePeek()<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>item<sp/>at<sp/>the<sp/>head<sp/>of<sp/>the<sp/>queue,</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>empty.<sp/>The<sp/>item<sp/>is<sp/>not<sp/>removed<sp/>from<sp/>the<sp/>queue.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueuePeek()<sp/>will<sp/>not<sp/>indicate<sp/>when<sp/>an<sp/>overflow<sp/>occurs.<sp/>If<sp/>you<sp/>want</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>get<sp/>and<sp/>check<sp/>pmBufferOverflow<sp/>messages,<sp/>use<sp/>the<sp/>return<sp/>value<sp/>of</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueuePeek()<sp/>*only*<sp/>as<sp/>an<sp/>indication<sp/>that<sp/>you<sp/>should<sp/>call<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_Dequeue().<sp/>At<sp/>the<sp/>point<sp/>where<sp/>a<sp/>direct<sp/>call<sp/>to<sp/>Pm_Dequeue()<sp/>would</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>pmBufferOverflow,<sp/>Pm_QueuePeek()<sp/>will<sp/>return<sp/>NULL<sp/>but<sp/>internally</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/>clear<sp/>the<sp/>pmBufferOverflow<sp/>flag,<sp/>enabling<sp/>Pm_Enqueue()<sp/>to<sp/>resume</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>enqueuing<sp/>messages.<sp/>A<sp/>subsequent<sp/>call<sp/>to<sp/>Pm_QueuePeek()</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>return<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>message<sp/>*after*<sp/>the<sp/>overflow.<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/>Using<sp/>this<sp/>as<sp/>an<sp/>indication<sp/>to<sp/>call<sp/>Pm_Dequeue(),<sp/>the<sp/>first<sp/>call</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>Pm_Dequeue()<sp/>will<sp/>return<sp/>pmBufferOverflow.<sp/>The<sp/>second<sp/>call<sp/>will</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>success,<sp/>copying<sp/>the<sp/>same<sp/>message<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_QueuePeek().</highlight></codeline>
<codeline lineno="104"><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>When<sp/>to<sp/>use<sp/>Pm_QueuePeek():<sp/>(1)<sp/>when<sp/>you<sp/>need<sp/>to<sp/>look<sp/>at<sp/>the<sp/>message</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>to<sp/>decide<sp/>who<sp/>should<sp/>be<sp/>called<sp/>to<sp/>receive<sp/>it.<sp/>(2)<sp/>when<sp/>you<sp/>need</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>know<sp/>a<sp/>message<sp/>is<sp/>ready<sp/>but<sp/>cannot<sp/>accept<sp/>the<sp/>message.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>Pm_QueuePeek()<sp/>is<sp/>not<sp/>a<sp/>fast<sp/>check,<sp/>so<sp/>if<sp/>possible,<sp/>you<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>might<sp/>as<sp/>well<sp/>just<sp/>call<sp/>Pm_Dequeue()<sp/>and<sp/>accept<sp/>the<sp/>data<sp/>if<sp/>it<sp/>is<sp/>there.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="pmutil_8h_1a6cfbd76d7c72784327c7dd5d3f910aa4" kindref="member">Pm_QueuePeek</ref>(PmQueue<sp/>*queue);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetOverflow()<sp/>allows<sp/>the<sp/>writer<sp/>(enqueuer)<sp/>to<sp/>signal<sp/>an<sp/>overflow</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>condition<sp/>to<sp/>the<sp/>reader<sp/>(dequeuer).<sp/>E.g.<sp/>when<sp/>transfering<sp/>data<sp/>from<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>OS<sp/>to<sp/>an<sp/>application,<sp/>if<sp/>the<sp/>OS<sp/>indicates<sp/>a<sp/>buffer<sp/>overrun,</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>Pm_SetOverflow()<sp/>can<sp/>be<sp/>used<sp/>to<sp/>insure<sp/>that<sp/>the<sp/>reader<sp/>receives<sp/>a</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/>pmBufferOverflow<sp/>result<sp/>from<sp/>Pm_Dequeue().<sp/>Returns<sp/>pmBadPtr<sp/>if<sp/>queue</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>NULL,<sp/>returns<sp/>pmBufferOverflow<sp/>if<sp/>buffer<sp/>is<sp/>already<sp/>in<sp/>an<sp/>overflow</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/>state,<sp/>returns<sp/>pmNoError<sp/>if<sp/>successfully<sp/>set<sp/>overflow<sp/>state.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="portmidi_8h_1ad478fb637833fb6b1a4bdb25a03f4662" kindref="member">PMEXPORT</ref><sp/><ref refid="portmidi_8h_1a5fd46ccd2e320e17a840886731e8c6b9" kindref="member">PmError</ref><sp/><ref refid="pmutil_8h_1a1d25278007a24fbd2ecf4c21db795f19" kindref="member">Pm_SetOverflow</ref>(PmQueue<sp/>*queue);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portmidi/pm_common/pmutil.h"/>
  </compounddef>
</doxygen>
