<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="curvefit_8cpp" kind="file" language="C++">
    <compoundname>curvefit.cpp</compoundname>
    <includes refid="assert_8h" local="no">assert.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="comp__chroma_8h" local="yes">comp_chroma.h</includes>
    <includes refid="sautils_8h" local="yes">sautils.h</includes>
    <includes local="no">fstream</includes>
    <includes refid="allegro_8h" local="yes">allegro.h</includes>
    <includes refid="audioreader_8h" local="yes">audioreader.h</includes>
    <includes refid="scorealign_8h" local="yes">scorealign.h</includes>
    <includes refid="hillclimb_8h" local="yes">hillclimb.h</includes>
    <includes refid="curvefit_8h" local="yes">curvefit.h</includes>
    <incdepgraph>
      <node id="19102">
        <label>allegro.h</label>
        <link refid="allegro_8h"/>
        <childnode refid="19095" relation="include">
        </childnode>
        <childnode refid="19103" relation="include">
        </childnode>
        <childnode refid="19104" relation="include">
        </childnode>
      </node>
      <node id="19108">
        <label>curvefit.h</label>
        <link refid="curvefit_8h"/>
      </node>
      <node id="19096">
        <label>stdlib.h</label>
      </node>
      <node id="19106">
        <label>scorealign.h</label>
        <link refid="scorealign_8h"/>
      </node>
      <node id="19105">
        <label>audioreader.h</label>
        <link refid="audioreader_8h"/>
      </node>
      <node id="19094">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp</label>
        <link refid="curvefit.cpp"/>
        <childnode refid="19095" relation="include">
        </childnode>
        <childnode refid="19096" relation="include">
        </childnode>
        <childnode refid="19097" relation="include">
        </childnode>
        <childnode refid="19098" relation="include">
        </childnode>
        <childnode refid="19099" relation="include">
        </childnode>
        <childnode refid="19100" relation="include">
        </childnode>
        <childnode refid="19101" relation="include">
        </childnode>
        <childnode refid="19102" relation="include">
        </childnode>
        <childnode refid="19105" relation="include">
        </childnode>
        <childnode refid="19106" relation="include">
        </childnode>
        <childnode refid="19107" relation="include">
        </childnode>
        <childnode refid="19108" relation="include">
        </childnode>
      </node>
      <node id="19095">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="19101">
        <label>fstream</label>
      </node>
      <node id="19104">
        <label>ostream</label>
      </node>
      <node id="19097">
        <label>string.h</label>
      </node>
      <node id="19098">
        <label>math.h</label>
      </node>
      <node id="19107">
        <label>hillclimb.h</label>
        <link refid="hillclimb_8h"/>
      </node>
      <node id="19100">
        <label>sautils.h</label>
        <link refid="sautils_8h"/>
      </node>
      <node id="19099">
        <label>comp_chroma.h</label>
        <link refid="comp__chroma_8h"/>
      </node>
      <node id="19103">
        <label>istream</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_curvefit" prot="public">Curvefit</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="curvefit_8cpp_1a467b0c936dd111ba6fc4a4a690af53ce" prot="public" static="yes" mutable="no">
        <type>long</type>
        <definition>long curvefit_iterations</definition>
        <argsstring></argsstring>
        <name>curvefit_iterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" line="249" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="curvefit_8cpp_1a2f4b0412544c5d89778b556319a1abec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void save_path</definition>
        <argsstring>(char *filename)</argsstring>
        <name>save_path</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="curvefit_8cpp_1a6696064d81e1bc9099a4031322a913ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void curvefit_progress</definition>
        <argsstring>(void *cookie, int iterations, double best)</argsstring>
        <name>curvefit_progress</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>best</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" line="263" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" bodystart="263" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="curvefit_8cpp_1a2e68c02d8cc3d3a48a1867a3a8c05254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void curve_fitting</definition>
        <argsstring>(Scorealign *sa, bool verbose)</argsstring>
        <name>curve_fitting</name>
        <param>
          <type><ref refid="class_scorealign" kindref="compound">Scorealign</ref> *</type>
          <declname>sa</declname>
        </param>
        <param>
          <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" line="272" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp" bodystart="272" bodyend="326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>curvefit.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>scorealign</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>by<sp/>Roger<sp/>Dannenberg<sp/>on<sp/>10/20/07.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assert_8h" kindref="compound">assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="comp__chroma_8h" kindref="compound">comp_chroma.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sautils_8h" kindref="compound">sautils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>are<sp/>needed<sp/>to<sp/>get<sp/>Scorealign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="allegro_8h" kindref="compound">allegro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="audioreader_8h" kindref="compound">audioreader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scorealign_8h" kindref="compound">scorealign.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hillclimb_8h" kindref="compound">hillclimb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="curvefit_8h" kindref="compound">curvefit.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="curvefit_8cpp_1a2f4b0412544c5d89778b556319a1abec" kindref="member">save_path</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="octave__test_8m_1a2ff994e16bf9521154de4cf659a3b689" kindref="member">filename</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Curvefit<sp/>class:<sp/>do<sp/>hill-climbing<sp/>to<sp/>fit<sp/>lines<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>This<sp/>class<sp/>implements<sp/>the<sp/>algorithm<sp/>described<sp/>above.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>The<sp/>problem<sp/>is<sp/>partitioned<sp/>into<sp/>the<sp/>general<sp/>search<sp/>algorithm</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>(implemented<sp/>in<sp/>Hillclimb::optimize)<sp/>and<sp/>the<sp/>evaluation<sp/>function</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>(implemented<sp/>in<sp/>Curvefit::evaluate).<sp/>A<sp/>brute-force<sp/>evaluation</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>would<sp/>simply<sp/>recompute<sp/>the<sp/>cost<sp/>of<sp/>the<sp/>entire<sp/>path<sp/>every<sp/>time,</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>but<sp/>note<sp/>that<sp/>the<sp/>search<sp/>algorithm<sp/>works<sp/>by<sp/>adjusting<sp/>one<sp/>parameter</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>at<sp/>a<sp/>time.<sp/>This<sp/>affects<sp/>at<sp/>most<sp/>two<sp/>line<sp/>segments,<sp/>so<sp/>the<sp/>rest</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>contribute<sp/>a<sp/>cost<sp/>that<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>recomputed.<sp/>Thus<sp/>the</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>total<sp/>cost<sp/>can<sp/>be<sp/>computed<sp/>incrementally.<sp/>It<sp/>is<sp/>hard<sp/>to<sp/>see<sp/>how</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>to<sp/>use<sp/>this<sp/>optimization<sp/>within<sp/>the<sp/>general<sp/>Hillclimb:optimize</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>method,<sp/>so<sp/>to<sp/>avoid<sp/>making<sp/>that<sp/>algorithm<sp/>very<sp/>specific<sp/>and<sp/>ugly,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>I<sp/>decided<sp/>to<sp/>hide<sp/>the<sp/>incremental<sp/>nature<sp/>of<sp/>evaluate<sp/>inside</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>the<sp/>evaluate<sp/>function<sp/>itself.<sp/>The<sp/>way<sp/>this<sp/>works<sp/>is<sp/>that<sp/>evaluate</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>keeps<sp/>a<sp/>cache<sp/>of<sp/>the<sp/>coordinates<sp/>of<sp/>each<sp/>line<sp/>segment<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>resulting<sp/>cost<sp/>of<sp/>the<sp/>segment.<sp/>Before<sp/>recomputing<sp/>any<sp/>segment,</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>the<sp/>cache<sp/>is<sp/>consulted.<sp/>If<sp/>the<sp/>end<sp/>points<sp/>have<sp/>not<sp/>moved,<sp/>the</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>cached<sp/>value<sp/>is<sp/>retrieved.<sp/>Ideally,<sp/>there<sp/>should<sp/>be<sp/>a<sp/>3-element</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>cache<sp/>because<sp/>endpoints<sp/>are<sp/>moved<sp/>and<sp/>then<sp/>restored.<sp/>(The<sp/>three</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>elements<sp/>would<sp/>hold<sp/>the<sp/>results<sp/>of<sp/>the<sp/>original,<sp/>changed<sp/>left,</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>and<sp/>changed<sp/>right<sp/>endpoints.)<sp/>The<sp/>bigger<sp/>cache<sp/>would<sp/>eliminate</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>1/3<sp/>of<sp/>the<sp/>computation,<sp/>but<sp/>the<sp/>simple<sp/>cache<sp/>already<sp/>eliminates</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>about<sp/>(n-2)/n<sp/>of<sp/>the<sp/>work,<sp/>so<sp/>that<sp/>should<sp/>help<sp/>a<sp/>lot.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_curvefit" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_curvefit" kindref="compound">Curvefit</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_hillclimb" kindref="compound">Hillclimb</ref><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="class_curvefit_1aa7f898ca09bc25e752ea412bf7f0ed30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_curvefit_1aa7f898ca09bc25e752ea412bf7f0ed30" kindref="member">Curvefit</ref>(<ref refid="class_scorealign" kindref="compound">Scorealign</ref><sp/>*sa_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose_)<sp/>{<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>sa_;<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose<sp/>=<sp/>verbose_;<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1_cache<sp/>=<sp/>p2_cache<sp/>=<sp/>d_cache<sp/>=<sp/>x<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_curvefit_1a1d8cc729c961dffa403b6bed8a10b66a" kindref="member">~Curvefit</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_curvefit_1ae942d111aa46344917edcae4d21e856d" kindref="member">evaluate</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_curvefit_1a8bb7d7981ba055c0ab43f8c533358869" kindref="member">setup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_curvefit_1aff809049090423bd5798ea50e87d4df4" kindref="member">set_step_size</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss);</highlight></codeline>
<codeline lineno="62" refid="class_curvefit_1aa9e3ac84698c6a669e55eca6ff4cbde2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="class_curvefit_1aa9e3ac84698c6a669e55eca6ff4cbde2" kindref="member">get_x</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_scorealign" kindref="compound">Scorealign</ref><sp/>*sa;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>line_dist(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>cost<sp/>of<sp/>line<sp/>segment<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compute_dist(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);<sp/></highlight><highlight class="comment">//<sp/>compute<sp/>cost<sp/>of<sp/>line<sp/>segment<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_rc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_xy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p1_cache;<sp/></highlight><highlight class="comment">//<sp/>left<sp/>endpoint<sp/>y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p2_cache;<sp/></highlight><highlight class="comment">//<sp/>right<sp/>endpoint<sp/>y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d_cache;<sp/></highlight><highlight class="comment">//<sp/>cached<sp/>cost<sp/>of<sp/>line<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>x<sp/>values<sp/>of<sp/>line<sp/>segment<sp/>endpoints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>y<sp/>values<sp/>are<sp/>in<sp/>parameters[])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_curvefit_1ae942d111aa46344917edcae4d21e856d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_curvefit_1ae942d111aa46344917edcae4d21e856d" kindref="member">Curvefit::evaluate</ref>()</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>why<sp/>does<sp/>this<sp/>loop<sp/>go<sp/>to<sp/>n-2?<sp/>Because<sp/>i<sp/>represents<sp/>the<sp/>left<sp/>endpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>line<sp/>segment.<sp/>There<sp/>are<sp/>n<sp/>parameters,<sp/>but<sp/>only<sp/>n-1<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>-1;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>line_dist(<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>);<sp/></highlight><highlight class="comment">//<sp/>look<sp/>up<sp/>in<sp/>cache<sp/>or<sp/>recompute<sp/>each<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sum;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>negative<sp/>of<sp/>distance<sp/>so<sp/>that<sp/>bigger<sp/>will<sp/>be<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Curvefit::line_dist(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1_cache[i]<sp/>==<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2_cache[i]<sp/>==<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i+1])<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>endpoints<sp/>have<sp/>not<sp/>changed:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d_cache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>we<sp/>need<sp/>to<sp/>recompute<sp/>and<sp/>save<sp/>dist<sp/>in<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>compute_dist(i);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>p1_cache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>p2_cache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i+1];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>d_cache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_curvefit_1a8bb7d7981ba055c0ab43f8c533358869" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_curvefit_1a8bb7d7981ba055c0ab43f8c533358869" kindref="member">Curvefit::setup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segments)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>parameters<sp/>is<sp/>greater<sp/>than<sp/>segments<sp/>because<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>col<sp/>of<sp/>segment<sp/>i<sp/>is<sp/>parameter<sp/>i,<sp/>so<sp/>the<sp/>right<sp/>col<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>segment<sp/>==<sp/>parameter[segments].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a50c1aec7038960a624c729f449c722ab" kindref="member">Hillclimb::setup</ref>(segments<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>p1_cache<sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>p2_cache<sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>d_cache<sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ideal<sp/>frames<sp/>per<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>seg_length<sp/>=<sp/>((float)<sp/>(sa-&gt;<ref refid="class_scorealign_1a0b75402da0086bbdce6c20862c4f655f" kindref="member">last_x</ref><sp/>-<sp/>sa-&gt;<ref refid="class_scorealign_1ade0b85e4931d63e777ba81efc2cc44a8" kindref="member">first_x</ref>))<sp/>/<sp/>segments;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>;<sp/>i++)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>cache<sp/>keys<sp/>to<sp/>garbage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1_cache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>p2_cache[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>-999999.99;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>x<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/><ref refid="cext_8h_1acd66e8cacf954c3bc3bba81d09425a12" kindref="member">ROUND</ref>(sa-&gt;<ref refid="class_scorealign_1ade0b85e4931d63e777ba81efc2cc44a8" kindref="member">first_x</ref><sp/>+<sp/>i<sp/>*<sp/>seg_length);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>initialize<sp/>parameters<sp/>based<sp/>on<sp/>pathx/pathy/time_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time_map<sp/>has<sp/>y<sp/>values<sp/>for<sp/>each<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sa-&gt;<ref refid="class_scorealign_1a9970a288920ebf2706f309a53b3ee362" kindref="member">time_map</ref>[(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>x[i]];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(<ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i]<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;initial<sp/>x[%d]<sp/>=<sp/>%g,<sp/>parameters[%d]<sp/>=<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>x[i],<sp/>i,<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i]);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a4f5e1bf831b1aba0025042d95d60f66e" kindref="member">min_param</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1aaaf4fa646f0debedf44d76c77c6ab53a" kindref="member">max_param</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>sa-&gt;<ref refid="class_scorealign_1a2302f07302de5e9791320d7ae610ea71" kindref="member">last_y</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="class_curvefit_1a1d8cc729c961dffa403b6bed8a10b66a" refkind="member"><highlight class="normal"><ref refid="class_curvefit_1a1d8cc729c961dffa403b6bed8a10b66a" kindref="member">Curvefit::~Curvefit</ref>()</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1_cache)<sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(p1_cache);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p2_cache)<sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(p2_cache);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d_cache)<sp/><sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(d_cache);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(x);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distance_rc<sp/>--<sp/>look<sp/>up<sp/>or<sp/>compute<sp/>distance<sp/>between<sp/>chroma<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>at<sp/>row,<sp/>col<sp/>in<sp/>similarity<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>in<sp/>current<sp/>implementation,<sp/>there<sp/>is<sp/>no<sp/>stored<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>matrix,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>recompute<sp/>every<sp/>time.<sp/>It<sp/>would<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possible<sp/>to<sp/>store<sp/>the<sp/>whole<sp/>matrix,<sp/>but<sp/>it&apos;s<sp/>large<sp/>and<sp/>it<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>the<sp/>memory<sp/>requirements<sp/>(we<sp/>already<sp/>allocate<sp/>the<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PATH<sp/>array<sp/>in<sp/>compare_chroma<sp/>to<sp/>compute<sp/>the<sp/>optimal<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>distance<sp/>can<sp/>be<sp/>computed<sp/>relatively<sp/>quickly,<sp/>a<sp/>better<sp/>plan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>be<sp/>to<sp/>cache<sp/>values<sp/>along<sp/>the<sp/>path.<sp/>Here&apos;s<sp/>a<sp/>brief<sp/>design</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(for<sp/>the<sp/>future,<sp/>assuming<sp/>this<sp/>routine<sp/>is<sp/>actually<sp/>a<sp/>hot<sp/>spot):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>matrix<sp/>that<sp/>is,<sp/>say,<sp/>20<sp/>x<sp/>file0_frames<sp/>to<sp/>contain<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>+/-<sp/>10<sp/>frames<sp/>from<sp/>the<sp/>path.<sp/>Initialize<sp/>cells<sp/>to<sp/>-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>an<sp/>array<sp/>of<sp/>integer<sp/>offsets<sp/>of<sp/>size<sp/>file1_frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>the<sp/>integer<sp/>offsets<sp/>with<sp/>the<sp/>column<sp/>number<sp/>(pathy)<sp/>value<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>path.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now,<sp/>to<sp/>get<sp/>distance_rc(row,<sp/>col):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>offset<sp/>=<sp/>offsets[row]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>i<sp/>=<sp/>10<sp/>+<sp/>col<sp/>-<sp/>offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(i<sp/>&lt;<sp/>0<sp/>||<sp/>i<sp/>&gt;<sp/>20)<sp/>/*<sp/>not<sp/>in<sp/>cache<sp/>*/<sp/>return<sp/>compute_distance(...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>dist<sp/>=<sp/>distances[20<sp/>*<sp/>row<sp/>+<sp/>i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(dist<sp/>==<sp/>-1)<sp/>{<sp/>return<sp/>distances[20<sp/>*<sp/>row<sp/>+<sp/>i]<sp/>=<sp/>compute_distance...}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>dist;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Curvefit::distance_rc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_scripting_1ade42ef48015fcded2eb15f341967ff47" kindref="member">dist</ref><sp/>=<sp/>sa-&gt;<ref refid="class_scorealign_1a626ed8876bafc5bbf5c86db23864c942" kindref="member">gen_dist</ref>(row,<sp/>col);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>20)<sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUGGING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;internal<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_scripting_1ade42ef48015fcded2eb15f341967ff47" kindref="member">dist</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>distance<sp/>from<sp/>distance<sp/>matrix<sp/>using<sp/>interpolation.<sp/>A<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>of<sp/>x,<sp/>y<sp/>should<sp/>be<sp/>an<sp/>integer<sp/>value<sp/>so<sp/>interpolation<sp/>is<sp/>only<sp/>2-way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Curvefit::distance_xy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xi<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>x;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yi<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>y;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xi<sp/>==<sp/>x)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>x<sp/>is<sp/>integer,<sp/>interpolate<sp/>along<sp/>y<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>distance_rc(xi,<sp/>yi);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/>distance_rc(xi,<sp/>yi<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sautils_8cpp_1a48f11b8a738d58dba1909b65a19c808b" kindref="member">interpolate</ref>(yi,<sp/>d1,<sp/>yi<sp/>+<sp/>1,<sp/>d2,<sp/>y);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yi<sp/>==<sp/>y)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>y<sp/>is<sp/>integer,<sp/>interpolate<sp/>along<sp/>x<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>distance_rc(xi,<sp/>yi);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/>distance_rc(xi<sp/>+<sp/>1,<sp/>yi);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sautils_8cpp_1a48f11b8a738d58dba1909b65a19c808b" kindref="member">interpolate</ref>(xi,<sp/>d1,<sp/>xi<sp/>+<sp/>1,<sp/>d2,<sp/>x);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;FATAL<sp/>INTERNAL<sp/>ERROR<sp/>IN<sp/>distance_xy:<sp/>neither<sp/>x<sp/>nor<sp/>y<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;an<sp/>integer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Curvefit::compute_dist(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>x[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>x2<sp/>=<sp/>x[i+1];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>],<sp/>y2<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i+1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>x2<sp/>-<sp/>x1,<sp/>dy<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libid3tag_2global_8h_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(x1<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>x2<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>y1<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>y2<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>&gt;<sp/>dy)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>evauate<sp/>at<sp/>each<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>dx;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>x1;<sp/>x<sp/>&lt;<sp/>x2;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="sautils_8cpp_1a48f11b8a738d58dba1909b65a19c808b" kindref="member">interpolate</ref>(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>distance_xy(x,<sp/>y);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>at<sp/>each<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>dy;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>y1;<sp/>y<sp/>&lt;<sp/>y2;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="sautils_8cpp_1a48f11b8a738d58dba1909b65a19c808b" kindref="member">interpolate</ref>(y1,<sp/>x1,<sp/>y2,<sp/>x2,<sp/>y);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>distance_xy(x,<sp/>y);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;dist<sp/>%g<sp/>%d<sp/>=<sp/>%g\n&quot;,<sp/>x,<sp/>y,<sp/>distance_xy(x,<sp/>y));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalize<sp/>using<sp/>line<sp/>length:<sp/>sum/n<sp/>is<sp/>average<sp/>distance.<sp/>Multiply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avg.<sp/>distance<sp/>(cost<sp/>per<sp/>unit<sp/>length)<sp/>by<sp/>length<sp/>to<sp/>get<sp/>total<sp/>cost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>this<sp/>gives<sp/>an<sp/>advantage<sp/>to<sp/>direct<sp/>diagonal<sp/>paths<sp/>without<sp/>bends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>longer<sp/>path<sp/>lengths<sp/>result<sp/>in<sp/>higher<sp/>total<sp/>cost.<sp/>This<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gives<sp/>heigher<sp/>weight<sp/>to<sp/>longer<sp/>segments,<sp/>although<sp/>all<sp/>segments<sp/>are<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>the<sp/>same<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rslt<sp/>=<sp/>sqrt(dx*dx<sp/>+<sp/>dy*dy)<sp/>*<sp/>sum<sp/>/<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;compute_dist<sp/>%d:<sp/>x1<sp/>%g<sp/>y1<sp/>%g<sp/>x2<sp/>%g<sp/>y2<sp/>%g<sp/>sum<sp/>%g<sp/>rslt<sp/>%g\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>sum,<sp/>rslt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rslt<sp/>&lt;<sp/>0<sp/>||<sp/>rslt<sp/>&gt;<sp/>24<sp/>*<sp/>n)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>DEBUGGING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;internal<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="class_curvefit_1aff809049090423bd5798ea50e87d4df4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_curvefit_1aff809049090423bd5798ea50e87d4df4" kindref="member">Curvefit::set_step_size</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>ss;<sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>curvefit_iterations;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>callback<sp/>from<sp/>Hillclimb::optimize<sp/>to<sp/>report<sp/>progress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>know<sp/>percentage<sp/>completion<sp/>because<sp/>we<sp/>don&apos;t<sp/>know<sp/>how</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>many<sp/>iterations<sp/>it<sp/>will<sp/>take<sp/>to<sp/>converge,<sp/>so<sp/>we<sp/>just<sp/>report</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterations.<sp/>The<sp/>SAProgress<sp/>class<sp/>assumes<sp/>some<sp/>number<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>experience.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normally,<sp/>the<sp/>iterations<sp/>parameter<sp/>is<sp/>a<sp/>good<sp/>indicator<sp/>of<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expended<sp/>so<sp/>far,<sp/>but<sp/>since<sp/>we<sp/>call<sp/>Hillclimb::optimize<sp/>twice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(second<sp/>time<sp/>with<sp/>a<sp/>finer<sp/>grid<sp/>to<sp/>search),<sp/>ignore<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>use<sp/>curvefit_iterations,<sp/>a<sp/>global<sp/>counter,<sp/>instead.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assumes<sp/>that<sp/>curvefit_progress<sp/>is<sp/>called<sp/>once<sp/>for<sp/>each<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="curvefit_8cpp_1a6696064d81e1bc9099a4031322a913ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="curvefit_8cpp_1a6696064d81e1bc9099a4031322a913ae" kindref="member">curvefit_progress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cookie,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>best)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_scorealign" kindref="compound">Scorealign</ref><sp/>*sa<sp/>=<sp/>(<ref refid="class_scorealign" kindref="compound">Scorealign</ref><sp/>*)<sp/>cookie;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa-&gt;<ref refid="class_scorealign_1a3fa5103411223026f9785f896c8f9572" kindref="member">progress</ref>)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a3fa5103411223026f9785f896c8f9572" kindref="member">progress</ref>-&gt;<ref refid="class_s_a_progress_1a47a45e9cac9fb1228db986a1f8fcc790" kindref="member">set_smoothing_progress</ref>(++curvefit_iterations);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="curvefit_8h_1a2e68c02d8cc3d3a48a1867a3a8c05254" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="curvefit_8cpp_1a2e68c02d8cc3d3a48a1867a3a8c05254" kindref="member">curve_fitting</ref>(<ref refid="class_scorealign" kindref="compound">Scorealign</ref><sp/>*sa,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;Performing<sp/>line-segment<sp/>approximation<sp/>with<sp/>%gs<sp/>segments.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a0e8480364897c190afc0c7fd432a78f7" kindref="member">line_time</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_curvefit" kindref="compound">Curvefit</ref><sp/>curvefit(sa,<sp/>verbose);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>curvefit_iterations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>segments?<sp/>About<sp/>total<sp/>time<sp/>/<sp/>line_time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segments<sp/>=<sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(0.5<sp/>+<sp/>(sa-&gt;<ref refid="class_scorealign_1afd2fe7e5977be513cf0255a8d3836678" kindref="member">actual_frame_period_0</ref><sp/>*<sp/>(sa-&gt;<ref refid="class_scorealign_1a0b75402da0086bbdce6c20862c4f655f" kindref="member">last_x</ref><sp/>-<sp/>sa-&gt;<ref refid="class_scorealign_1ade0b85e4931d63e777ba81efc2cc44a8" kindref="member">first_x</ref>))<sp/>/</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a0e8480364897c190afc0c7fd432a78f7" kindref="member">line_time</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>curvefit.<ref refid="class_curvefit_1a8bb7d7981ba055c0ab43f8c533358869" kindref="member">setup</ref>(segments);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>curvefit.<ref refid="class_hillclimb_1a9f3cde5c805f98c0a4aa13163feb5305" kindref="member">optimize</ref>(&amp;<ref refid="curvefit_8cpp_1a6696064d81e1bc9099a4031322a913ae" kindref="member">curvefit_progress</ref>,<sp/>sa);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>further<sp/>optimization<sp/>with<sp/>smaller<sp/>step<sp/>sizes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>step<sp/>size<sp/>will<sp/>interpolate<sp/>0.25s<sp/>frames<sp/>down<sp/>to<sp/>10ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>curvefit.<ref refid="class_curvefit_1aff809049090423bd5798ea50e87d4df4" kindref="member">set_step_size</ref>(0.04);<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>curvefit.<ref refid="class_hillclimb_1a9f3cde5c805f98c0a4aa13163feb5305" kindref="member">optimize</ref>(&amp;<ref refid="curvefit_8cpp_1a6696064d81e1bc9099a4031322a913ae" kindref="member">curvefit_progress</ref>,<sp/>sa);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>parameters<sp/>=<sp/>curvefit.<ref refid="class_hillclimb_1a70e0399ec4073f6722f772a406dd0475" kindref="member">get_parameters</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>curvefit.<ref refid="class_curvefit_1aa9e3ac84698c6a669e55eca6ff4cbde2" kindref="member">get_x</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>rewrite<sp/>pathx<sp/>and<sp/>pathy<sp/>according<sp/>to<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pathx<sp/>and<sp/>pathy<sp/>are<sp/>generously<sp/>allocated,<sp/>so<sp/>we<sp/>can<sp/>change<sp/>pathlen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>segment<sp/>goes<sp/>from<sp/>x[i],<sp/>parameters[i]<sp/>to<sp/>x[i+1],<sp/>parameters[i+1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>index<sp/>into<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>segments;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>x[i];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>x[i+1];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>parameters[i];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>parameters[i+1];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>&gt;=<sp/>dy)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>output<sp/>point<sp/>at<sp/>each<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>x1;<sp/>x<sp/>&lt;<sp/>x2;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a9aa670b061ce18988086803992d7d1c5" kindref="member">pathx</ref>[j]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a6c09342db2cad202c698da99c4ae0e98" kindref="member">pathy</ref>[j]<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(0.5<sp/>+<sp/><ref refid="sautils_8cpp_1a48f11b8a738d58dba1909b65a19c808b" kindref="member">interpolate</ref>(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y1;<sp/>y<sp/>&lt;<sp/>y2;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a9aa670b061ce18988086803992d7d1c5" kindref="member">pathx</ref>[j]<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(0.5<sp/>+<sp/><ref refid="sautils_8cpp_1a48f11b8a738d58dba1909b65a19c808b" kindref="member">interpolate</ref>(y1,<sp/>x1,<sp/>y2,<sp/>x2,<sp/>y));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a6c09342db2cad202c698da99c4ae0e98" kindref="member">pathy</ref>[j]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>last<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a9aa670b061ce18988086803992d7d1c5" kindref="member">pathx</ref>[j]<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>x[segments];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a6c09342db2cad202c698da99c4ae0e98" kindref="member">pathy</ref>[j]<sp/>=<sp/>(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)<sp/>(0.5<sp/>+<sp/>parameters[segments]);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="class_scorealign_1a93b4274da379f36e29f0fa84eb2887eb" kindref="member">set_pathlen</ref>(j);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/curvefit.cpp"/>
  </compounddef>
</doxygen>
