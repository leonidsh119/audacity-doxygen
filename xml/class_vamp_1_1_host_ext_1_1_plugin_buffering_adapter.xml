<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kind="class" language="C++" prot="public">
    <compoundname>Vamp::HostExt::PluginBufferingAdapter</compoundname>
    <basecompoundref refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper" prot="public" virt="non-virtual">Vamp::HostExt::PluginWrapper</basecompoundref>
    <includes refid="_plugin_buffering_adapter_8h" local="no">vamp-hostsdk/PluginBufferingAdapter.h</includes>
    <innerclass refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1_1_impl" prot="public">Vamp::HostExt::PluginBufferingAdapter::Impl</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a51e10c9c63c0349fd74c6d604de5554e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1_1_impl" kindref="compound">Impl</ref> *</type>
        <definition>Impl* Vamp::HostExt::PluginBufferingAdapter::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="185" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a1276bcfcbe1414b33eeefbd7b2b702fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vamp::HostExt::PluginBufferingAdapter::PluginBufferingAdapter</definition>
        <argsstring>(Plugin *plugin)</argsstring>
        <name>PluginBufferingAdapter</name>
        <param>
          <type><ref refid="class_vamp_1_1_plugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> wrapping the given plugin. The adapter takes ownership of the plugin, which will be deleted when the adapter is deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="83" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a539423b54a4ede511476125f4a97d977" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Vamp::HostExt::PluginBufferingAdapter::~PluginBufferingAdapter</definition>
        <argsstring>()</argsstring>
        <name>~PluginBufferingAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="84" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a2e66d009df69c951001e5d2786973d60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t Vamp::HostExt::PluginBufferingAdapter::getPreferredStepSize</definition>
        <argsstring>() const </argsstring>
        <name>getPreferredStepSize</name>
        <reimplements refid="class_vamp_1_1_plugin_1a514c716c22f81c055f19b56c3f882567">getPreferredStepSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the preferred step size for this adapter.</para><para>Because of the way this adapter works, its preferred step size will always be the same as its preferred block size. This may or may not be the same as the preferred step size of the underlying plugin, which may be obtained by calling <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1ad7fad500331808b5cdf90f5a45019b02" kindref="member">getPluginPreferredStepSize()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="95" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a21e45180b19873f9ab69fe7a4e184a03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t Vamp::HostExt::PluginBufferingAdapter::getPreferredBlockSize</definition>
        <argsstring>() const </argsstring>
        <name>getPreferredBlockSize</name>
        <reimplements refid="class_vamp_1_1_plugin_1aa529adf83f87a603954eb31407602aac">getPreferredBlockSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the preferred block size for this adapter.</para><para>This may or may not be the same as the preferred block size of the underlying plugin, which may be obtained by calling <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a7045be875de9dd226d2e2a222e957de0" kindref="member">getPluginPreferredBlockSize()</ref>.</para><para>Note that this adapter may be initialised with any block size, not just its supposedly preferred one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="107" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool Vamp::HostExt::PluginBufferingAdapter::initialise</definition>
        <argsstring>(size_t channels, size_t stepSize, size_t blockSize)</argsstring>
        <name>initialise</name>
        <reimplements refid="class_vamp_1_1_plugin_1af26212cf5fc511b603a8b48034247822">initialise</reimplements>
        <param>
          <type>size_t</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise the adapter (and therefore the plugin) for the given number of channels. Initialise the adapter for the given step and block size, which must be equal.</para><para>The step and block size used for the underlying plugin will depend on its preferences, or any values previously passed to setPluginStepSize and setPluginBlockSize. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="118" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1ad7fad500331808b5cdf90f5a45019b02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Vamp::HostExt::PluginBufferingAdapter::getPluginPreferredStepSize</definition>
        <argsstring>() const </argsstring>
        <name>getPluginPreferredStepSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the preferred step size of the plugin wrapped by this adapter.</para><para>This is included mainly for informational purposes. This value is not likely to be a valid step size for the adapter itself, and it is not usually of any use in interpreting the results (because the adapter re-writes OneSamplePerStep outputs to FixedSampleRate so that the hop size no longer needs to be known beforehand in order to interpret them). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="131" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a7045be875de9dd226d2e2a222e957de0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Vamp::HostExt::PluginBufferingAdapter::getPluginPreferredBlockSize</definition>
        <argsstring>() const </argsstring>
        <name>getPluginPreferredBlockSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the preferred block size of the plugin wrapped by this adapter.</para><para>This is included mainly for informational purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="139" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1ac99898d78a01a7fad4def4d6c5fd3a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::HostExt::PluginBufferingAdapter::setPluginStepSize</definition>
        <argsstring>(size_t stepSize)</argsstring>
        <name>setPluginStepSize</name>
        <param>
          <type>size_t</type>
          <declname>stepSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the step size that will be used for the underlying plugin when <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref> is called. If this is not set, the plugin&apos;s own preferred step size will be used. You will not usually need to call this function. If you do call it, it must be before the first call to <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="148" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1aa80ae1bff6f95e805811df2c3770a98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::HostExt::PluginBufferingAdapter::setPluginBlockSize</definition>
        <argsstring>(size_t blockSize)</argsstring>
        <name>setPluginBlockSize</name>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the block size that will be used for the underlying plugin when <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref> is called. If this is not set, the plugin&apos;s own preferred block size will be used. You will not usually need to call this function. If you do call it, it must be before the first call to <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="157" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1aa065985fd864f6869d1bc7fea6fa2ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::HostExt::PluginBufferingAdapter::getActualStepAndBlockSizes</definition>
        <argsstring>(size_t &amp;stepSize, size_t &amp;blockSize)</argsstring>
        <name>getActualStepAndBlockSizes</name>
        <param>
          <type>size_t &amp;</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the step and block sizes that were actually used when initialising the underlying plugin.</para><para>This is included mainly for informational purposes. You will not usually need to call this function. If this is called before <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref>, it will return 0 for both values. If it is called after a failed call to <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref>, it will return the values that were used in the failed call to the plugin&apos;s <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" kindref="member">initialise()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="170" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a7a979b20c169d37adbd7b7d8b8a077b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::HostExt::PluginBufferingAdapter::setParameter</definition>
        <argsstring>(std::string, float)</argsstring>
        <name>setParameter</name>
        <reimplements refid="class_vamp_1_1_plugin_base_1a6c718ce822f7b73b98940d59dcaa9366">setParameter</reimplements>
        <param>
          <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a named parameter. The first argument is the identifier field from that parameter&apos;s descriptor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="172" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a3cc7000e0aff525950e0a286b87f8927" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::HostExt::PluginBufferingAdapter::selectProgram</definition>
        <argsstring>(std::string)</argsstring>
        <name>selectProgram</name>
        <reimplements refid="class_vamp_1_1_plugin_base_1aadd3a547ef140bae200473a9518e3353">selectProgram</reimplements>
        <param>
          <type><ref refid="test__lib_f_l_a_c_2format_8c_1ab02026ad0de9fb6c1b4233deb0a00c75" kindref="member">std::string</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select a program. (If the given program name is not one of the available programs, do nothing.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="173" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a85a027f5859efb31d315205e234e94c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a30f531b8fb69fac41a24e3d2a6a08ed9" kindref="member">OutputList</ref></type>
        <definition>PluginBufferingAdapter::OutputList Vamp::HostExt::PluginBufferingAdapter::getOutputDescriptors</definition>
        <argsstring>() const </argsstring>
        <name>getOutputDescriptors</name>
        <reimplements refid="class_vamp_1_1_plugin_1a37b9f286c79c0d682c7fdfddaebf732a">getOutputDescriptors</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the outputs of this plugin. An output&apos;s index in this list is used as its numeric index when looking it up in the FeatureSet returned from the <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a262206b978d9de28ee4bb35f437e915e" kindref="member">process()</ref> call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="175" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a131fd9fe8a1795d7370d8a721176868a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void Vamp::HostExt::PluginBufferingAdapter::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplements refid="class_vamp_1_1_plugin_1aad67dc9d0052417511070c4ebcfbf24f">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the plugin after use, to prepare it for another clean run. Not called for the first initialisation (i.e. initialise must also do a reset). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="177" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a262206b978d9de28ee4bb35f437e915e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" kindref="member">FeatureSet</ref></type>
        <definition>PluginBufferingAdapter::FeatureSet Vamp::HostExt::PluginBufferingAdapter::process</definition>
        <argsstring>(const float *const *inputBuffers, RealTime timestamp)</argsstring>
        <name>process</name>
        <reimplements refid="class_vamp_1_1_plugin_1ae4aed3bebfe80a2e2fccd3d37af26996">process</reimplements>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>inputBuffers</declname>
        </param>
        <param>
          <type><ref refid="struct_vamp_1_1_real_time" kindref="compound">RealTime</ref></type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process a single block of input data.</para><para>If the plugin&apos;s inputDomain is TimeDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize consecutive audio samples (the host will zero-pad as necessary). The timestamp in this case will be the real time in seconds of the start of the supplied block of samples.</para><para>If the plugin&apos;s inputDomain is FrequencyDomain, inputBuffers will point to one array of floats per input channel, and each of these arrays will contain blockSize/2+1 consecutive pairs of real and imaginary component floats corresponding to bins 0..(blockSize/2) of the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> output. That is, bin 0 (the first pair of floats) contains the DC output, up to bin blockSize/2 which contains the Nyquist-frequency output. There will therefore be blockSize+2 floats per channel in total. The timestamp will be the real time in seconds of the centre of the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> input window (i.e. the very first block passed to process might contain the <ref refid="class_vamp_1_1_f_f_t" kindref="compound">FFT</ref> of half a block of zero samples and the first half-block of the actual data, with a timestamp of zero).</para><para>Return any features that have become available after this process call. (These do not necessarily have to fall within the process block, except for OneSamplePerStep outputs.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="179" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="338" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a8771cba75552aaa1340b68de9bf1659c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" kindref="member">FeatureSet</ref></type>
        <definition>PluginBufferingAdapter::FeatureSet Vamp::HostExt::PluginBufferingAdapter::getRemainingFeatures</definition>
        <argsstring>()</argsstring>
        <name>getRemainingFeatures</name>
        <reimplements refid="class_vamp_1_1_plugin_1aeca2a26e658ba0314ba90d25dd2195d6">getRemainingFeatures</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>After all blocks have been processed, calculate and return any remaining features derived from the complete input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="181" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/src/vamp-hostsdk/PluginBufferingAdapter.cpp" bodystart="345" bodyend="348"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> is a <ref refid="namespace_vamp" kindref="compound">Vamp</ref> plugin adapter that allows plugins to be used by a host supplying an audio stream in non-overlapping buffers of arbitrary size.</para><para>A host using <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> may ignore the preferred step and block size reported by the plugin, and still expect the plugin to run. The value of blockSize and stepSize passed to initialise should be the size of the buffer which the host will supply; the stepSize should be equal to the blockSize.</para><para>If the internal step size used for the plugin differs from that supplied by the host, the adapter will modify the sample type and rate specifications for the plugin outputs appropriately, and set timestamps on the output features for outputs that formerly used a different sample rate specification. This is necessary in order to obtain correct time stamping.</para><para>In other respects, the <ref refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter" kindref="compound">PluginBufferingAdapter</ref> behaves identically to the plugin that it wraps. The wrapped plugin will be deleted when the wrapper is deleted. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="8898">
        <label>Vamp::Plugin</label>
        <link refid="class_vamp_1_1_plugin"/>
        <childnode refid="8899" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8896">
        <label>Vamp::HostExt::PluginBufferingAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter"/>
        <childnode refid="8897" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8899">
        <label>Vamp::PluginBase</label>
        <link refid="class_vamp_1_1_plugin_base"/>
      </node>
      <node id="8897">
        <label>Vamp::HostExt::PluginWrapper</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper"/>
        <childnode refid="8898" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8902">
        <label>Vamp::Plugin</label>
        <link refid="class_vamp_1_1_plugin"/>
        <childnode refid="8903" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8900">
        <label>Vamp::HostExt::PluginBufferingAdapter</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter"/>
        <childnode refid="8901" relation="public-inheritance">
        </childnode>
        <childnode refid="8904" relation="usage">
          <edgelabel>m_impl</edgelabel>
        </childnode>
      </node>
      <node id="8905">
        <label>vector&lt; Vamp::HostExt::PluginBufferingAdapter::Impl::RingBuffer * &gt;</label>
      </node>
      <node id="8903">
        <label>Vamp::PluginBase</label>
        <link refid="class_vamp_1_1_plugin_base"/>
      </node>
      <node id="8904">
        <label>Vamp::HostExt::PluginBufferingAdapter::Impl</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1_1_impl"/>
        <childnode refid="8902" relation="usage">
          <edgelabel>m_plugin</edgelabel>
        </childnode>
        <childnode refid="8905" relation="usage">
          <edgelabel>m_queue</edgelabel>
        </childnode>
      </node>
      <node id="8901">
        <label>Vamp::HostExt::PluginWrapper</label>
        <link refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper"/>
        <childnode refid="8902" relation="public-inheritance">
        </childnode>
        <childnode refid="8902" relation="usage">
          <edgelabel>m_plugin</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" line="76" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libvamp/vamp-hostsdk/PluginBufferingAdapter.h" bodystart="75" bodyend="186"/>
    <listofallmembers>
      <member refid="class_vamp_1_1_plugin_1a0730bc72c87fa02eb8d2854b233f7be1" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>FeatureList</name></member>
      <member refid="class_vamp_1_1_plugin_1a448fb57dc245d47923ec9eeaf9856c5f" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>FeatureSet</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcaa30e7877ab33f76acbdca28607e6ab53" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>FrequencyDomain</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1aa065985fd864f6869d1bc7fea6fa2ece" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getActualStepAndBlockSizes</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ae14f6ecb78be909c4cd5f0cdaed3c566" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getCopyright</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a7a312dd42d161064b70afd7ff24c0651" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getCurrentProgram</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ac334f699c0996055942785410d8a065c" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getDescription</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a4baa9e48f717c2b3e7f92496aa39d904" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getIdentifier</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a031aa818fd48fd0f4b5e1bf80c032870" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getInputDomain</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a59d5a2298951b317995675e664b1c7bb" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getMaker</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a985eb21f1827bfbc3950d6871b107a58" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getMaxChannelCount</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a2b28f1cf37d46a514f1e1411a6037bf8" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getMinChannelCount</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ac70a3265bb25aeb03f6dd8f8a0442088" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getName</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a85a027f5859efb31d315205e234e94c0" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getOutputDescriptors</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a034920f56c8d7609a85447c42556048c" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getParameter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a3b075b8f950b344503f0d27ac0fe332e" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getParameterDescriptors</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a7045be875de9dd226d2e2a222e957de0" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getPluginPreferredBlockSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1ad7fad500331808b5cdf90f5a45019b02" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getPluginPreferredStepSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a47e1acf1696813008324a915c9ba59c5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getPluginVersion</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a21e45180b19873f9ab69fe7a4e184a03" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getPreferredBlockSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a2e66d009df69c951001e5d2786973d60" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getPreferredStepSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1af3abaf717dc4b00cad5770ed6dfa01e1" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getPrograms</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a8771cba75552aaa1340b68de9bf1659c" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getRemainingFeatures</name></member>
      <member refid="class_vamp_1_1_plugin_1abe13b3997a69fbcc09e2213faa352f91" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getType</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a74147fda6b44ff2169bd4a1eea0d46ff" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getVampApiVersion</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a653d0308e8e34881a8749b7631d00f05" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>getWrapper</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a9e7798ba4d7870db46502ab541ab37a8" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>initialise</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bc" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>InputDomain</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a51e10c9c63c0349fd74c6d604de5554e" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>m_impl</name></member>
      <member refid="class_vamp_1_1_plugin_1a59b9dd82a4f4eb946cd0474cc81abc23" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>m_inputSampleRate</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1ab4e40ecd98b445e1a2aa9e7baa280ea2" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>m_plugin</name></member>
      <member refid="class_vamp_1_1_plugin_1a30f531b8fb69fac41a24e3d2a6a08ed9" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>OutputList</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a3b6bb4bbd86affe1ca9deceea1aad4f8" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>ParameterList</name></member>
      <member refid="class_vamp_1_1_plugin_1a1b78c4f46c72ef345ed27f0b9bf20ac9" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>Plugin</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a1276bcfcbe1414b33eeefbd7b2b702fe" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>PluginBufferingAdapter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a35cc2d42f8322f5022e89859a79c97be" prot="protected" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>PluginWrapper</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a262206b978d9de28ee4bb35f437e915e" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>process</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a7f66f00437b21e5f694fe02356b12f20" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>ProgramList</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a131fd9fe8a1795d7370d8a721176868a" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>reset</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a3cc7000e0aff525950e0a286b87f8927" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>selectProgram</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a7a979b20c169d37adbd7b7d8b8a077b3" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>setParameter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1aa80ae1bff6f95e805811df2c3770a98c" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>setPluginBlockSize</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1ac99898d78a01a7fad4def4d6c5fd3a7e" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>setPluginStepSize</name></member>
      <member refid="class_vamp_1_1_plugin_1a39cb7649d6dcc20e4cb1640cd55907bcad4a9f31b958a43a9757af7893aa2e7ff" prot="public" virt="non-virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>TimeDomain</name></member>
      <member refid="class_vamp_1_1_plugin_1a42d3096f9c1f58b1876024cd8d9ab80b" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>~Plugin</name></member>
      <member refid="class_vamp_1_1_plugin_base_1a3773b37c658cf22d7f135c575a28f5c5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>~PluginBase</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_buffering_adapter_1a539423b54a4ede511476125f4a97d977" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>~PluginBufferingAdapter</name></member>
      <member refid="class_vamp_1_1_host_ext_1_1_plugin_wrapper_1a7449a364d524de75352a4719fec2e1f5" prot="public" virt="virtual"><scope>Vamp::HostExt::PluginBufferingAdapter</scope><name>~PluginWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
